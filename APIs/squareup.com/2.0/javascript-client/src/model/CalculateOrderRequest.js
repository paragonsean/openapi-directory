/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Order from './Order';
import OrderReward from './OrderReward';

/**
 * The CalculateOrderRequest model module.
 * @module model/CalculateOrderRequest
 * @version 2.0
 */
class CalculateOrderRequest {
    /**
     * Constructs a new <code>CalculateOrderRequest</code>.
     * 
     * @alias module:model/CalculateOrderRequest
     * @param order {module:model/Order} 
     */
    constructor(order) { 
        
        CalculateOrderRequest.initialize(this, order);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, order) { 
        obj['order'] = order;
    }

    /**
     * Constructs a <code>CalculateOrderRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CalculateOrderRequest} obj Optional instance to populate.
     * @return {module:model/CalculateOrderRequest} The populated <code>CalculateOrderRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CalculateOrderRequest();

            if (data.hasOwnProperty('order')) {
                obj['order'] = Order.constructFromObject(data['order']);
            }
            if (data.hasOwnProperty('proposed_rewards')) {
                obj['proposed_rewards'] = ApiClient.convertToType(data['proposed_rewards'], [OrderReward]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CalculateOrderRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CalculateOrderRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CalculateOrderRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `order`
        if (data['order']) { // data not null
          Order.validateJSON(data['order']);
        }
        if (data['proposed_rewards']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['proposed_rewards'])) {
                throw new Error("Expected the field `proposed_rewards` to be an array in the JSON data but got " + data['proposed_rewards']);
            }
            // validate the optional field `proposed_rewards` (array)
            for (const item of data['proposed_rewards']) {
                OrderReward.validateJSON(item);
            };
        }

        return true;
    }


}

CalculateOrderRequest.RequiredProperties = ["order"];

/**
 * @member {module:model/Order} order
 */
CalculateOrderRequest.prototype['order'] = undefined;

/**
 * Identifies one or more loyalty reward tiers to apply during the order calculation. The discounts defined by the reward tiers are added to the order only to preview the effect of applying the specified rewards. The rewards do not correspond to actual redemptions; that is, no `reward`s are created. Therefore, the reward `id`s are random strings used only to reference the reward tier.
 * @member {Array.<module:model/OrderReward>} proposed_rewards
 */
CalculateOrderRequest.prototype['proposed_rewards'] = undefined;






export default CalculateOrderRequest;

