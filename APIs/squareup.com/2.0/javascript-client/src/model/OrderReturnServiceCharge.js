/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';
import OrderLineItemAppliedTax from './OrderLineItemAppliedTax';

/**
 * The OrderReturnServiceCharge model module.
 * @module model/OrderReturnServiceCharge
 * @version 2.0
 */
class OrderReturnServiceCharge {
    /**
     * Constructs a new <code>OrderReturnServiceCharge</code>.
     * Represents the service charge applied to the original order.
     * @alias module:model/OrderReturnServiceCharge
     */
    constructor() { 
        
        OrderReturnServiceCharge.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderReturnServiceCharge</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderReturnServiceCharge} obj Optional instance to populate.
     * @return {module:model/OrderReturnServiceCharge} The populated <code>OrderReturnServiceCharge</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderReturnServiceCharge();

            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('applied_money')) {
                obj['applied_money'] = Money.constructFromObject(data['applied_money']);
            }
            if (data.hasOwnProperty('applied_taxes')) {
                obj['applied_taxes'] = ApiClient.convertToType(data['applied_taxes'], [OrderLineItemAppliedTax]);
            }
            if (data.hasOwnProperty('calculation_phase')) {
                obj['calculation_phase'] = ApiClient.convertToType(data['calculation_phase'], 'String');
            }
            if (data.hasOwnProperty('catalog_object_id')) {
                obj['catalog_object_id'] = ApiClient.convertToType(data['catalog_object_id'], 'String');
            }
            if (data.hasOwnProperty('catalog_version')) {
                obj['catalog_version'] = ApiClient.convertToType(data['catalog_version'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('percentage')) {
                obj['percentage'] = ApiClient.convertToType(data['percentage'], 'String');
            }
            if (data.hasOwnProperty('source_service_charge_uid')) {
                obj['source_service_charge_uid'] = ApiClient.convertToType(data['source_service_charge_uid'], 'String');
            }
            if (data.hasOwnProperty('taxable')) {
                obj['taxable'] = ApiClient.convertToType(data['taxable'], 'Boolean');
            }
            if (data.hasOwnProperty('total_money')) {
                obj['total_money'] = Money.constructFromObject(data['total_money']);
            }
            if (data.hasOwnProperty('total_tax_money')) {
                obj['total_tax_money'] = Money.constructFromObject(data['total_tax_money']);
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderReturnServiceCharge</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderReturnServiceCharge</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          Money.validateJSON(data['amount_money']);
        }
        // validate the optional field `applied_money`
        if (data['applied_money']) { // data not null
          Money.validateJSON(data['applied_money']);
        }
        if (data['applied_taxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applied_taxes'])) {
                throw new Error("Expected the field `applied_taxes` to be an array in the JSON data but got " + data['applied_taxes']);
            }
            // validate the optional field `applied_taxes` (array)
            for (const item of data['applied_taxes']) {
                OrderLineItemAppliedTax.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['calculation_phase'] && !(typeof data['calculation_phase'] === 'string' || data['calculation_phase'] instanceof String)) {
            throw new Error("Expected the field `calculation_phase` to be a primitive type in the JSON string but got " + data['calculation_phase']);
        }
        // ensure the json data is a string
        if (data['catalog_object_id'] && !(typeof data['catalog_object_id'] === 'string' || data['catalog_object_id'] instanceof String)) {
            throw new Error("Expected the field `catalog_object_id` to be a primitive type in the JSON string but got " + data['catalog_object_id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['percentage'] && !(typeof data['percentage'] === 'string' || data['percentage'] instanceof String)) {
            throw new Error("Expected the field `percentage` to be a primitive type in the JSON string but got " + data['percentage']);
        }
        // ensure the json data is a string
        if (data['source_service_charge_uid'] && !(typeof data['source_service_charge_uid'] === 'string' || data['source_service_charge_uid'] instanceof String)) {
            throw new Error("Expected the field `source_service_charge_uid` to be a primitive type in the JSON string but got " + data['source_service_charge_uid']);
        }
        // validate the optional field `total_money`
        if (data['total_money']) { // data not null
          Money.validateJSON(data['total_money']);
        }
        // validate the optional field `total_tax_money`
        if (data['total_tax_money']) { // data not null
          Money.validateJSON(data['total_tax_money']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * @member {module:model/Money} amount_money
 */
OrderReturnServiceCharge.prototype['amount_money'] = undefined;

/**
 * @member {module:model/Money} applied_money
 */
OrderReturnServiceCharge.prototype['applied_money'] = undefined;

/**
 * The list of references to `OrderReturnTax` entities applied to the `OrderReturnServiceCharge`. Each `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level `OrderReturnTax` that is being applied to the `OrderReturnServiceCharge`. On reads, the applied amount is populated.
 * @member {Array.<module:model/OrderLineItemAppliedTax>} applied_taxes
 */
OrderReturnServiceCharge.prototype['applied_taxes'] = undefined;

/**
 * The calculation phase after which to apply the service charge.
 * @member {String} calculation_phase
 */
OrderReturnServiceCharge.prototype['calculation_phase'] = undefined;

/**
 * The catalog object ID of the associated [OrderServiceCharge](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderServiceCharge).
 * @member {String} catalog_object_id
 */
OrderReturnServiceCharge.prototype['catalog_object_id'] = undefined;

/**
 * The version of the catalog object that this service charge references.
 * @member {Number} catalog_version
 */
OrderReturnServiceCharge.prototype['catalog_version'] = undefined;

/**
 * The name of the service charge.
 * @member {String} name
 */
OrderReturnServiceCharge.prototype['name'] = undefined;

/**
 * The percentage of the service charge, as a string representation of a decimal number. For example, a value of `\"7.25\"` corresponds to a percentage of 7.25%.  Either `percentage` or `amount_money` should be set, but not both.
 * @member {String} percentage
 */
OrderReturnServiceCharge.prototype['percentage'] = undefined;

/**
 * The service charge `uid` from the order containing the original service charge. `source_service_charge_uid` is `null` for unlinked returns.
 * @member {String} source_service_charge_uid
 */
OrderReturnServiceCharge.prototype['source_service_charge_uid'] = undefined;

/**
 * Indicates whether the surcharge can be taxed. Service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.
 * @member {Boolean} taxable
 */
OrderReturnServiceCharge.prototype['taxable'] = undefined;

/**
 * @member {module:model/Money} total_money
 */
OrderReturnServiceCharge.prototype['total_money'] = undefined;

/**
 * @member {module:model/Money} total_tax_money
 */
OrderReturnServiceCharge.prototype['total_tax_money'] = undefined;

/**
 * A unique ID that identifies the return service charge only within this order.
 * @member {String} uid
 */
OrderReturnServiceCharge.prototype['uid'] = undefined;






export default OrderReturnServiceCharge;

