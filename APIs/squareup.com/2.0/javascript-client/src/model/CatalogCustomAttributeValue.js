/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogCustomAttributeValue model module.
 * @module model/CatalogCustomAttributeValue
 * @version 2.0
 */
class CatalogCustomAttributeValue {
    /**
     * Constructs a new <code>CatalogCustomAttributeValue</code>.
     * An instance of a custom attribute. Custom attributes can be defined and added to &#x60;ITEM&#x60; and &#x60;ITEM_VARIATION&#x60; type catalog objects. [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes).
     * @alias module:model/CatalogCustomAttributeValue
     */
    constructor() { 
        
        CatalogCustomAttributeValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogCustomAttributeValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogCustomAttributeValue} obj Optional instance to populate.
     * @return {module:model/CatalogCustomAttributeValue} The populated <code>CatalogCustomAttributeValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogCustomAttributeValue();

            if (data.hasOwnProperty('boolean_value')) {
                obj['boolean_value'] = ApiClient.convertToType(data['boolean_value'], 'Boolean');
            }
            if (data.hasOwnProperty('custom_attribute_definition_id')) {
                obj['custom_attribute_definition_id'] = ApiClient.convertToType(data['custom_attribute_definition_id'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number_value')) {
                obj['number_value'] = ApiClient.convertToType(data['number_value'], 'String');
            }
            if (data.hasOwnProperty('selection_uid_values')) {
                obj['selection_uid_values'] = ApiClient.convertToType(data['selection_uid_values'], ['String']);
            }
            if (data.hasOwnProperty('string_value')) {
                obj['string_value'] = ApiClient.convertToType(data['string_value'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogCustomAttributeValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogCustomAttributeValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['custom_attribute_definition_id'] && !(typeof data['custom_attribute_definition_id'] === 'string' || data['custom_attribute_definition_id'] instanceof String)) {
            throw new Error("Expected the field `custom_attribute_definition_id` to be a primitive type in the JSON string but got " + data['custom_attribute_definition_id']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['number_value'] && !(typeof data['number_value'] === 'string' || data['number_value'] instanceof String)) {
            throw new Error("Expected the field `number_value` to be a primitive type in the JSON string but got " + data['number_value']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['selection_uid_values'])) {
            throw new Error("Expected the field `selection_uid_values` to be an array in the JSON data but got " + data['selection_uid_values']);
        }
        // ensure the json data is a string
        if (data['string_value'] && !(typeof data['string_value'] === 'string' || data['string_value'] instanceof String)) {
            throw new Error("Expected the field `string_value` to be a primitive type in the JSON string but got " + data['string_value']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * A `true` or `false` value. Populated if `type` = `BOOLEAN`.
 * @member {Boolean} boolean_value
 */
CatalogCustomAttributeValue.prototype['boolean_value'] = undefined;

/**
 * __Read-only.__ The id of the [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition) this value belongs to.
 * @member {String} custom_attribute_definition_id
 */
CatalogCustomAttributeValue.prototype['custom_attribute_definition_id'] = undefined;

/**
 * __Read-only.__ A copy of key from the associated `CatalogCustomAttributeDefinition`.
 * @member {String} key
 */
CatalogCustomAttributeValue.prototype['key'] = undefined;

/**
 * The name of the custom attribute.
 * @member {String} name
 */
CatalogCustomAttributeValue.prototype['name'] = undefined;

/**
 * Populated if `type` = `NUMBER`. Contains a string representation of a decimal number, using a `.` as the decimal separator.
 * @member {String} number_value
 */
CatalogCustomAttributeValue.prototype['number_value'] = undefined;

/**
 * One or more choices from `allowed_selections`. Populated if `type` = `SELECTION`.
 * @member {Array.<String>} selection_uid_values
 */
CatalogCustomAttributeValue.prototype['selection_uid_values'] = undefined;

/**
 * The string value of the custom attribute.  Populated if `type` = `STRING`.
 * @member {String} string_value
 */
CatalogCustomAttributeValue.prototype['string_value'] = undefined;

/**
 * __Read-only.__ A copy of type from the associated `CatalogCustomAttributeDefinition`.
 * @member {String} type
 */
CatalogCustomAttributeValue.prototype['type'] = undefined;






export default CatalogCustomAttributeValue;

