/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The CreateRefundRequest model module.
 * @module model/CreateRefundRequest
 * @version 2.0
 */
class CreateRefundRequest {
    /**
     * Constructs a new <code>CreateRefundRequest</code>.
     * Defines the body parameters that can be included in a request to the [CreateRefund](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/create-refund) endpoint.  Deprecated - recommend using [RefundPayment](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/refund-payment)
     * @alias module:model/CreateRefundRequest
     * @param amountMoney {module:model/Money} 
     * @param idempotencyKey {String} A value you specify that uniquely identifies this refund among refunds you've created for the tender.  If you're unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund.  See [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.
     * @param tenderId {String} The ID of the tender to refund.  A [`Transaction`](https://developer.squareup.com/reference/square_2021-08-18/objects/Transaction) has one or more `tenders` (i.e., methods of payment) associated with it, and you refund each tender separately with the Connect API.
     */
    constructor(amountMoney, idempotencyKey, tenderId) { 
        
        CreateRefundRequest.initialize(this, amountMoney, idempotencyKey, tenderId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amountMoney, idempotencyKey, tenderId) { 
        obj['amount_money'] = amountMoney;
        obj['idempotency_key'] = idempotencyKey;
        obj['tender_id'] = tenderId;
    }

    /**
     * Constructs a <code>CreateRefundRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateRefundRequest} obj Optional instance to populate.
     * @return {module:model/CreateRefundRequest} The populated <code>CreateRefundRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateRefundRequest();

            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('idempotency_key')) {
                obj['idempotency_key'] = ApiClient.convertToType(data['idempotency_key'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('tender_id')) {
                obj['tender_id'] = ApiClient.convertToType(data['tender_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateRefundRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateRefundRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateRefundRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          Money.validateJSON(data['amount_money']);
        }
        // ensure the json data is a string
        if (data['idempotency_key'] && !(typeof data['idempotency_key'] === 'string' || data['idempotency_key'] instanceof String)) {
            throw new Error("Expected the field `idempotency_key` to be a primitive type in the JSON string but got " + data['idempotency_key']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['tender_id'] && !(typeof data['tender_id'] === 'string' || data['tender_id'] instanceof String)) {
            throw new Error("Expected the field `tender_id` to be a primitive type in the JSON string but got " + data['tender_id']);
        }

        return true;
    }


}

CreateRefundRequest.RequiredProperties = ["amount_money", "idempotency_key", "tender_id"];

/**
 * @member {module:model/Money} amount_money
 */
CreateRefundRequest.prototype['amount_money'] = undefined;

/**
 * A value you specify that uniquely identifies this refund among refunds you've created for the tender.  If you're unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund.  See [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.
 * @member {String} idempotency_key
 */
CreateRefundRequest.prototype['idempotency_key'] = undefined;

/**
 * A description of the reason for the refund.  Default value: `Refund via API`
 * @member {String} reason
 */
CreateRefundRequest.prototype['reason'] = undefined;

/**
 * The ID of the tender to refund.  A [`Transaction`](https://developer.squareup.com/reference/square_2021-08-18/objects/Transaction) has one or more `tenders` (i.e., methods of payment) associated with it, and you refund each tender separately with the Connect API.
 * @member {String} tender_id
 */
CreateRefundRequest.prototype['tender_id'] = undefined;






export default CreateRefundRequest;

