/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Error from './Error';
import V1Money from './V1Money';
import V1OrderHistoryEntry from './V1OrderHistoryEntry';
import V1Tender from './V1Tender';

/**
 * The V1Order model module.
 * @module model/V1Order
 * @version 2.0
 */
class V1Order {
    /**
     * Constructs a new <code>V1Order</code>.
     * V1Order
     * @alias module:model/V1Order
     */
    constructor() { 
        
        V1Order.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V1Order</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1Order} obj Optional instance to populate.
     * @return {module:model/V1Order} The populated <code>V1Order</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1Order();

            if (data.hasOwnProperty('btc_price_satoshi')) {
                obj['btc_price_satoshi'] = ApiClient.convertToType(data['btc_price_satoshi'], 'Number');
            }
            if (data.hasOwnProperty('btc_receive_address')) {
                obj['btc_receive_address'] = ApiClient.convertToType(data['btc_receive_address'], 'String');
            }
            if (data.hasOwnProperty('buyer_email')) {
                obj['buyer_email'] = ApiClient.convertToType(data['buyer_email'], 'String');
            }
            if (data.hasOwnProperty('buyer_note')) {
                obj['buyer_note'] = ApiClient.convertToType(data['buyer_note'], 'String');
            }
            if (data.hasOwnProperty('canceled_note')) {
                obj['canceled_note'] = ApiClient.convertToType(data['canceled_note'], 'String');
            }
            if (data.hasOwnProperty('completed_note')) {
                obj['completed_note'] = ApiClient.convertToType(data['completed_note'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Error]);
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('order_history')) {
                obj['order_history'] = ApiClient.convertToType(data['order_history'], [V1OrderHistoryEntry]);
            }
            if (data.hasOwnProperty('payment_id')) {
                obj['payment_id'] = ApiClient.convertToType(data['payment_id'], 'String');
            }
            if (data.hasOwnProperty('promo_code')) {
                obj['promo_code'] = ApiClient.convertToType(data['promo_code'], 'String');
            }
            if (data.hasOwnProperty('recipient_name')) {
                obj['recipient_name'] = ApiClient.convertToType(data['recipient_name'], 'String');
            }
            if (data.hasOwnProperty('recipient_phone_number')) {
                obj['recipient_phone_number'] = ApiClient.convertToType(data['recipient_phone_number'], 'String');
            }
            if (data.hasOwnProperty('refunded_note')) {
                obj['refunded_note'] = ApiClient.convertToType(data['refunded_note'], 'String');
            }
            if (data.hasOwnProperty('shipping_address')) {
                obj['shipping_address'] = Address.constructFromObject(data['shipping_address']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('subtotal_money')) {
                obj['subtotal_money'] = V1Money.constructFromObject(data['subtotal_money']);
            }
            if (data.hasOwnProperty('tender')) {
                obj['tender'] = V1Tender.constructFromObject(data['tender']);
            }
            if (data.hasOwnProperty('total_discount_money')) {
                obj['total_discount_money'] = V1Money.constructFromObject(data['total_discount_money']);
            }
            if (data.hasOwnProperty('total_price_money')) {
                obj['total_price_money'] = V1Money.constructFromObject(data['total_price_money']);
            }
            if (data.hasOwnProperty('total_shipping_money')) {
                obj['total_shipping_money'] = V1Money.constructFromObject(data['total_shipping_money']);
            }
            if (data.hasOwnProperty('total_tax_money')) {
                obj['total_tax_money'] = V1Money.constructFromObject(data['total_tax_money']);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1Order</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1Order</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['btc_receive_address'] && !(typeof data['btc_receive_address'] === 'string' || data['btc_receive_address'] instanceof String)) {
            throw new Error("Expected the field `btc_receive_address` to be a primitive type in the JSON string but got " + data['btc_receive_address']);
        }
        // ensure the json data is a string
        if (data['buyer_email'] && !(typeof data['buyer_email'] === 'string' || data['buyer_email'] instanceof String)) {
            throw new Error("Expected the field `buyer_email` to be a primitive type in the JSON string but got " + data['buyer_email']);
        }
        // ensure the json data is a string
        if (data['buyer_note'] && !(typeof data['buyer_note'] === 'string' || data['buyer_note'] instanceof String)) {
            throw new Error("Expected the field `buyer_note` to be a primitive type in the JSON string but got " + data['buyer_note']);
        }
        // ensure the json data is a string
        if (data['canceled_note'] && !(typeof data['canceled_note'] === 'string' || data['canceled_note'] instanceof String)) {
            throw new Error("Expected the field `canceled_note` to be a primitive type in the JSON string but got " + data['canceled_note']);
        }
        // ensure the json data is a string
        if (data['completed_note'] && !(typeof data['completed_note'] === 'string' || data['completed_note'] instanceof String)) {
            throw new Error("Expected the field `completed_note` to be a primitive type in the JSON string but got " + data['completed_note']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                Error.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['expires_at'] && !(typeof data['expires_at'] === 'string' || data['expires_at'] instanceof String)) {
            throw new Error("Expected the field `expires_at` to be a primitive type in the JSON string but got " + data['expires_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['order_history']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['order_history'])) {
                throw new Error("Expected the field `order_history` to be an array in the JSON data but got " + data['order_history']);
            }
            // validate the optional field `order_history` (array)
            for (const item of data['order_history']) {
                V1OrderHistoryEntry.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['payment_id'] && !(typeof data['payment_id'] === 'string' || data['payment_id'] instanceof String)) {
            throw new Error("Expected the field `payment_id` to be a primitive type in the JSON string but got " + data['payment_id']);
        }
        // ensure the json data is a string
        if (data['promo_code'] && !(typeof data['promo_code'] === 'string' || data['promo_code'] instanceof String)) {
            throw new Error("Expected the field `promo_code` to be a primitive type in the JSON string but got " + data['promo_code']);
        }
        // ensure the json data is a string
        if (data['recipient_name'] && !(typeof data['recipient_name'] === 'string' || data['recipient_name'] instanceof String)) {
            throw new Error("Expected the field `recipient_name` to be a primitive type in the JSON string but got " + data['recipient_name']);
        }
        // ensure the json data is a string
        if (data['recipient_phone_number'] && !(typeof data['recipient_phone_number'] === 'string' || data['recipient_phone_number'] instanceof String)) {
            throw new Error("Expected the field `recipient_phone_number` to be a primitive type in the JSON string but got " + data['recipient_phone_number']);
        }
        // ensure the json data is a string
        if (data['refunded_note'] && !(typeof data['refunded_note'] === 'string' || data['refunded_note'] instanceof String)) {
            throw new Error("Expected the field `refunded_note` to be a primitive type in the JSON string but got " + data['refunded_note']);
        }
        // validate the optional field `shipping_address`
        if (data['shipping_address']) { // data not null
          Address.validateJSON(data['shipping_address']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `subtotal_money`
        if (data['subtotal_money']) { // data not null
          V1Money.validateJSON(data['subtotal_money']);
        }
        // validate the optional field `tender`
        if (data['tender']) { // data not null
          V1Tender.validateJSON(data['tender']);
        }
        // validate the optional field `total_discount_money`
        if (data['total_discount_money']) { // data not null
          V1Money.validateJSON(data['total_discount_money']);
        }
        // validate the optional field `total_price_money`
        if (data['total_price_money']) { // data not null
          V1Money.validateJSON(data['total_price_money']);
        }
        // validate the optional field `total_shipping_money`
        if (data['total_shipping_money']) { // data not null
          V1Money.validateJSON(data['total_shipping_money']);
        }
        // validate the optional field `total_tax_money`
        if (data['total_tax_money']) { // data not null
          V1Money.validateJSON(data['total_tax_money']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC).
 * @member {Number} btc_price_satoshi
 */
V1Order.prototype['btc_price_satoshi'] = undefined;

/**
 * For Bitcoin transactions, the address that the buyer sent Bitcoin to.
 * @member {String} btc_receive_address
 */
V1Order.prototype['btc_receive_address'] = undefined;

/**
 * The email address of the order's buyer.
 * @member {String} buyer_email
 */
V1Order.prototype['buyer_email'] = undefined;

/**
 * A note provided by the buyer when the order was created, if any.
 * @member {String} buyer_note
 */
V1Order.prototype['buyer_note'] = undefined;

/**
 * A note provided by the merchant when the order's state was set to CANCELED, if any.
 * @member {String} canceled_note
 */
V1Order.prototype['canceled_note'] = undefined;

/**
 * A note provided by the merchant when the order's state was set to COMPLETED, if any
 * @member {String} completed_note
 */
V1Order.prototype['completed_note'] = undefined;

/**
 * The time when the order was created, in ISO 8601 format.
 * @member {String} created_at
 */
V1Order.prototype['created_at'] = undefined;

/**
 * Any errors that occurred during the request.
 * @member {Array.<module:model/Error>} errors
 */
V1Order.prototype['errors'] = undefined;

/**
 * The time when the order expires if no action is taken, in ISO 8601 format.
 * @member {String} expires_at
 */
V1Order.prototype['expires_at'] = undefined;

/**
 * The order's unique identifier.
 * @member {String} id
 */
V1Order.prototype['id'] = undefined;

/**
 * The history of actions associated with the order.
 * @member {Array.<module:model/V1OrderHistoryEntry>} order_history
 */
V1Order.prototype['order_history'] = undefined;

/**
 * The unique identifier of the payment associated with the order.
 * @member {String} payment_id
 */
V1Order.prototype['payment_id'] = undefined;

/**
 * The promo code provided by the buyer, if any.
 * @member {String} promo_code
 */
V1Order.prototype['promo_code'] = undefined;

/**
 * The name of the order's buyer.
 * @member {String} recipient_name
 */
V1Order.prototype['recipient_name'] = undefined;

/**
 * The phone number to use for the order's delivery.
 * @member {String} recipient_phone_number
 */
V1Order.prototype['recipient_phone_number'] = undefined;

/**
 * A note provided by the merchant when the order's state was set to REFUNDED, if any.
 * @member {String} refunded_note
 */
V1Order.prototype['refunded_note'] = undefined;

/**
 * @member {module:model/Address} shipping_address
 */
V1Order.prototype['shipping_address'] = undefined;

/**
 * Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
 * @member {String} state
 */
V1Order.prototype['state'] = undefined;

/**
 * @member {module:model/V1Money} subtotal_money
 */
V1Order.prototype['subtotal_money'] = undefined;

/**
 * @member {module:model/V1Tender} tender
 */
V1Order.prototype['tender'] = undefined;

/**
 * @member {module:model/V1Money} total_discount_money
 */
V1Order.prototype['total_discount_money'] = undefined;

/**
 * @member {module:model/V1Money} total_price_money
 */
V1Order.prototype['total_price_money'] = undefined;

/**
 * @member {module:model/V1Money} total_shipping_money
 */
V1Order.prototype['total_shipping_money'] = undefined;

/**
 * @member {module:model/V1Money} total_tax_money
 */
V1Order.prototype['total_tax_money'] = undefined;

/**
 * The time when the order was last modified, in ISO 8601 format.
 * @member {String} updated_at
 */
V1Order.prototype['updated_at'] = undefined;






export default V1Order;

