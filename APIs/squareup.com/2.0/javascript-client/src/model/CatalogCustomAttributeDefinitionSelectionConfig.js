/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection from './CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection';

/**
 * The CatalogCustomAttributeDefinitionSelectionConfig model module.
 * @module model/CatalogCustomAttributeDefinitionSelectionConfig
 * @version 2.0
 */
class CatalogCustomAttributeDefinitionSelectionConfig {
    /**
     * Constructs a new <code>CatalogCustomAttributeDefinitionSelectionConfig</code>.
     * Configuration associated with &#x60;SELECTION&#x60;-type custom attribute definitions.
     * @alias module:model/CatalogCustomAttributeDefinitionSelectionConfig
     */
    constructor() { 
        
        CatalogCustomAttributeDefinitionSelectionConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogCustomAttributeDefinitionSelectionConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogCustomAttributeDefinitionSelectionConfig} obj Optional instance to populate.
     * @return {module:model/CatalogCustomAttributeDefinitionSelectionConfig} The populated <code>CatalogCustomAttributeDefinitionSelectionConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogCustomAttributeDefinitionSelectionConfig();

            if (data.hasOwnProperty('allowed_selections')) {
                obj['allowed_selections'] = ApiClient.convertToType(data['allowed_selections'], [CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection]);
            }
            if (data.hasOwnProperty('max_allowed_selections')) {
                obj['max_allowed_selections'] = ApiClient.convertToType(data['max_allowed_selections'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogCustomAttributeDefinitionSelectionConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogCustomAttributeDefinitionSelectionConfig</code>.
     */
    static validateJSON(data) {
        if (data['allowed_selections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['allowed_selections'])) {
                throw new Error("Expected the field `allowed_selections` to be an array in the JSON data but got " + data['allowed_selections']);
            }
            // validate the optional field `allowed_selections` (array)
            for (const item of data['allowed_selections']) {
                CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The set of valid `CatalogCustomAttributeSelections`. Up to a maximum of 100 selections can be defined. Can be modified.
 * @member {Array.<module:model/CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection>} allowed_selections
 */
CatalogCustomAttributeDefinitionSelectionConfig.prototype['allowed_selections'] = undefined;

/**
 * The maximum number of selections that can be set. The maximum value for this attribute is 100. The default value is 1. The value can be modified, but changing the value will not affect existing custom attribute values on objects. Clients need to handle custom attributes with more selected values than allowed by this limit.
 * @member {Number} max_allowed_selections
 */
CatalogCustomAttributeDefinitionSelectionConfig.prototype['max_allowed_selections'] = undefined;






export default CatalogCustomAttributeDefinitionSelectionConfig;

