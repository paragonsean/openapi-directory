/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WorkweekConfig model module.
 * @module model/WorkweekConfig
 * @version 2.0
 */
class WorkweekConfig {
    /**
     * Constructs a new <code>WorkweekConfig</code>.
     * Sets the day of the week and hour of the day that a business starts a workweek. This is used to calculate overtime pay.
     * @alias module:model/WorkweekConfig
     * @param startOfDayLocalTime {String} The local time at which a business week ends. Represented as a string in `HH:MM` format (`HH:MM:SS` is also accepted, but seconds are truncated).
     * @param startOfWeek {String} The day of the week on which a business week ends for compensation purposes.
     */
    constructor(startOfDayLocalTime, startOfWeek) { 
        
        WorkweekConfig.initialize(this, startOfDayLocalTime, startOfWeek);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, startOfDayLocalTime, startOfWeek) { 
        obj['start_of_day_local_time'] = startOfDayLocalTime;
        obj['start_of_week'] = startOfWeek;
    }

    /**
     * Constructs a <code>WorkweekConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkweekConfig} obj Optional instance to populate.
     * @return {module:model/WorkweekConfig} The populated <code>WorkweekConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkweekConfig();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('start_of_day_local_time')) {
                obj['start_of_day_local_time'] = ApiClient.convertToType(data['start_of_day_local_time'], 'String');
            }
            if (data.hasOwnProperty('start_of_week')) {
                obj['start_of_week'] = ApiClient.convertToType(data['start_of_week'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkweekConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkweekConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkweekConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['start_of_day_local_time'] && !(typeof data['start_of_day_local_time'] === 'string' || data['start_of_day_local_time'] instanceof String)) {
            throw new Error("Expected the field `start_of_day_local_time` to be a primitive type in the JSON string but got " + data['start_of_day_local_time']);
        }
        // ensure the json data is a string
        if (data['start_of_week'] && !(typeof data['start_of_week'] === 'string' || data['start_of_week'] instanceof String)) {
            throw new Error("Expected the field `start_of_week` to be a primitive type in the JSON string but got " + data['start_of_week']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

WorkweekConfig.RequiredProperties = ["start_of_day_local_time", "start_of_week"];

/**
 * A read-only timestamp in RFC 3339 format; presented in UTC.
 * @member {String} created_at
 */
WorkweekConfig.prototype['created_at'] = undefined;

/**
 * The UUID for this object.
 * @member {String} id
 */
WorkweekConfig.prototype['id'] = undefined;

/**
 * The local time at which a business week ends. Represented as a string in `HH:MM` format (`HH:MM:SS` is also accepted, but seconds are truncated).
 * @member {String} start_of_day_local_time
 */
WorkweekConfig.prototype['start_of_day_local_time'] = undefined;

/**
 * The day of the week on which a business week ends for compensation purposes.
 * @member {String} start_of_week
 */
WorkweekConfig.prototype['start_of_week'] = undefined;

/**
 * A read-only timestamp in RFC 3339 format; presented in UTC.
 * @member {String} updated_at
 */
WorkweekConfig.prototype['updated_at'] = undefined;

/**
 * Used for resolving concurrency issues. The request fails if the version provided does not match the server version at the time of the request. If not provided, Square executes a blind write; potentially overwriting data from another write.
 * @member {Number} version
 */
WorkweekConfig.prototype['version'] = undefined;






export default WorkweekConfig;

