/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RetrieveGiftCardFromNonceRequest model module.
 * @module model/RetrieveGiftCardFromNonceRequest
 * @version 2.0
 */
class RetrieveGiftCardFromNonceRequest {
    /**
     * Constructs a new <code>RetrieveGiftCardFromNonceRequest</code>.
     * A request to retrieve gift cards by using nonces.
     * @alias module:model/RetrieveGiftCardFromNonceRequest
     * @param nonce {String} The nonce of the gift card to retrieve.
     */
    constructor(nonce) { 
        
        RetrieveGiftCardFromNonceRequest.initialize(this, nonce);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nonce) { 
        obj['nonce'] = nonce;
    }

    /**
     * Constructs a <code>RetrieveGiftCardFromNonceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RetrieveGiftCardFromNonceRequest} obj Optional instance to populate.
     * @return {module:model/RetrieveGiftCardFromNonceRequest} The populated <code>RetrieveGiftCardFromNonceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RetrieveGiftCardFromNonceRequest();

            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RetrieveGiftCardFromNonceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RetrieveGiftCardFromNonceRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RetrieveGiftCardFromNonceRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['nonce'] && !(typeof data['nonce'] === 'string' || data['nonce'] instanceof String)) {
            throw new Error("Expected the field `nonce` to be a primitive type in the JSON string but got " + data['nonce']);
        }

        return true;
    }


}

RetrieveGiftCardFromNonceRequest.RequiredProperties = ["nonce"];

/**
 * The nonce of the gift card to retrieve.
 * @member {String} nonce
 */
RetrieveGiftCardFromNonceRequest.prototype['nonce'] = undefined;






export default RetrieveGiftCardFromNonceRequest;

