/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RegisterDomainRequest model module.
 * @module model/RegisterDomainRequest
 * @version 2.0
 */
class RegisterDomainRequest {
    /**
     * Constructs a new <code>RegisterDomainRequest</code>.
     * Defines the parameters that can be included in the body of a request to the [RegisterDomain](https://developer.squareup.com/reference/square_2021-08-18/apple-pay-api/register-domain) endpoint.
     * @alias module:model/RegisterDomainRequest
     * @param domainName {String} A domain name as described in RFC-1034 that will be registered with ApplePay.
     */
    constructor(domainName) { 
        
        RegisterDomainRequest.initialize(this, domainName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, domainName) { 
        obj['domain_name'] = domainName;
    }

    /**
     * Constructs a <code>RegisterDomainRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegisterDomainRequest} obj Optional instance to populate.
     * @return {module:model/RegisterDomainRequest} The populated <code>RegisterDomainRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegisterDomainRequest();

            if (data.hasOwnProperty('domain_name')) {
                obj['domain_name'] = ApiClient.convertToType(data['domain_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegisterDomainRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegisterDomainRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RegisterDomainRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['domain_name'] && !(typeof data['domain_name'] === 'string' || data['domain_name'] instanceof String)) {
            throw new Error("Expected the field `domain_name` to be a primitive type in the JSON string but got " + data['domain_name']);
        }

        return true;
    }


}

RegisterDomainRequest.RequiredProperties = ["domain_name"];

/**
 * A domain name as described in RFC-1034 that will be registered with ApplePay.
 * @member {String} domain_name
 */
RegisterDomainRequest.prototype['domain_name'] = undefined;






export default RegisterDomainRequest;

