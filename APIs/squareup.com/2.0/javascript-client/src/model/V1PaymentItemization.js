/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import V1Money from './V1Money';
import V1PaymentDiscount from './V1PaymentDiscount';
import V1PaymentItemDetail from './V1PaymentItemDetail';
import V1PaymentModifier from './V1PaymentModifier';
import V1PaymentTax from './V1PaymentTax';

/**
 * The V1PaymentItemization model module.
 * @module model/V1PaymentItemization
 * @version 2.0
 */
class V1PaymentItemization {
    /**
     * Constructs a new <code>V1PaymentItemization</code>.
     * Payment include an&#x60; itemizations&#x60; field that lists the items purchased, along with associated fees, modifiers, and discounts. Each itemization has an &#x60;itemization_type&#x60; field that indicates which of the following the itemization represents:  &lt;ul&gt; &lt;li&gt;An item variation from the merchant&#39;s item library&lt;/li&gt; &lt;li&gt;A custom monetary amount&lt;/li&gt; &lt;li&gt; An action performed on a Square gift card, such as activating or reloading it. &lt;/li&gt; &lt;/ul&gt;  *Note**: itemization information included in a &#x60;Payment&#x60; object reflects details collected **at the time of the payment**. Details such as the name or price of items might have changed since the payment was processed.
     * @alias module:model/V1PaymentItemization
     */
    constructor() { 
        
        V1PaymentItemization.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V1PaymentItemization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1PaymentItemization} obj Optional instance to populate.
     * @return {module:model/V1PaymentItemization} The populated <code>V1PaymentItemization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1PaymentItemization();

            if (data.hasOwnProperty('discount_money')) {
                obj['discount_money'] = V1Money.constructFromObject(data['discount_money']);
            }
            if (data.hasOwnProperty('discounts')) {
                obj['discounts'] = ApiClient.convertToType(data['discounts'], [V1PaymentDiscount]);
            }
            if (data.hasOwnProperty('gross_sales_money')) {
                obj['gross_sales_money'] = V1Money.constructFromObject(data['gross_sales_money']);
            }
            if (data.hasOwnProperty('item_detail')) {
                obj['item_detail'] = V1PaymentItemDetail.constructFromObject(data['item_detail']);
            }
            if (data.hasOwnProperty('item_variation_name')) {
                obj['item_variation_name'] = ApiClient.convertToType(data['item_variation_name'], 'String');
            }
            if (data.hasOwnProperty('itemization_type')) {
                obj['itemization_type'] = ApiClient.convertToType(data['itemization_type'], 'String');
            }
            if (data.hasOwnProperty('modifiers')) {
                obj['modifiers'] = ApiClient.convertToType(data['modifiers'], [V1PaymentModifier]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('net_sales_money')) {
                obj['net_sales_money'] = V1Money.constructFromObject(data['net_sales_money']);
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('single_quantity_money')) {
                obj['single_quantity_money'] = V1Money.constructFromObject(data['single_quantity_money']);
            }
            if (data.hasOwnProperty('taxes')) {
                obj['taxes'] = ApiClient.convertToType(data['taxes'], [V1PaymentTax]);
            }
            if (data.hasOwnProperty('total_money')) {
                obj['total_money'] = V1Money.constructFromObject(data['total_money']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1PaymentItemization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1PaymentItemization</code>.
     */
    static validateJSON(data) {
        // validate the optional field `discount_money`
        if (data['discount_money']) { // data not null
          V1Money.validateJSON(data['discount_money']);
        }
        if (data['discounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['discounts'])) {
                throw new Error("Expected the field `discounts` to be an array in the JSON data but got " + data['discounts']);
            }
            // validate the optional field `discounts` (array)
            for (const item of data['discounts']) {
                V1PaymentDiscount.validateJSON(item);
            };
        }
        // validate the optional field `gross_sales_money`
        if (data['gross_sales_money']) { // data not null
          V1Money.validateJSON(data['gross_sales_money']);
        }
        // validate the optional field `item_detail`
        if (data['item_detail']) { // data not null
          V1PaymentItemDetail.validateJSON(data['item_detail']);
        }
        // ensure the json data is a string
        if (data['item_variation_name'] && !(typeof data['item_variation_name'] === 'string' || data['item_variation_name'] instanceof String)) {
            throw new Error("Expected the field `item_variation_name` to be a primitive type in the JSON string but got " + data['item_variation_name']);
        }
        // ensure the json data is a string
        if (data['itemization_type'] && !(typeof data['itemization_type'] === 'string' || data['itemization_type'] instanceof String)) {
            throw new Error("Expected the field `itemization_type` to be a primitive type in the JSON string but got " + data['itemization_type']);
        }
        if (data['modifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['modifiers'])) {
                throw new Error("Expected the field `modifiers` to be an array in the JSON data but got " + data['modifiers']);
            }
            // validate the optional field `modifiers` (array)
            for (const item of data['modifiers']) {
                V1PaymentModifier.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `net_sales_money`
        if (data['net_sales_money']) { // data not null
          V1Money.validateJSON(data['net_sales_money']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // validate the optional field `single_quantity_money`
        if (data['single_quantity_money']) { // data not null
          V1Money.validateJSON(data['single_quantity_money']);
        }
        if (data['taxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taxes'])) {
                throw new Error("Expected the field `taxes` to be an array in the JSON data but got " + data['taxes']);
            }
            // validate the optional field `taxes` (array)
            for (const item of data['taxes']) {
                V1PaymentTax.validateJSON(item);
            };
        }
        // validate the optional field `total_money`
        if (data['total_money']) { // data not null
          V1Money.validateJSON(data['total_money']);
        }

        return true;
    }


}



/**
 * @member {module:model/V1Money} discount_money
 */
V1PaymentItemization.prototype['discount_money'] = undefined;

/**
 * All discounts applied to this itemization.
 * @member {Array.<module:model/V1PaymentDiscount>} discounts
 */
V1PaymentItemization.prototype['discounts'] = undefined;

/**
 * @member {module:model/V1Money} gross_sales_money
 */
V1PaymentItemization.prototype['gross_sales_money'] = undefined;

/**
 * @member {module:model/V1PaymentItemDetail} item_detail
 */
V1PaymentItemization.prototype['item_detail'] = undefined;

/**
 * The name of the item variation purchased, if any.
 * @member {String} item_variation_name
 */
V1PaymentItemization.prototype['item_variation_name'] = undefined;

/**
 * The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT
 * @member {String} itemization_type
 */
V1PaymentItemization.prototype['itemization_type'] = undefined;

/**
 * All modifier options applied to this itemization.
 * @member {Array.<module:model/V1PaymentModifier>} modifiers
 */
V1PaymentItemization.prototype['modifiers'] = undefined;

/**
 * The item's name.
 * @member {String} name
 */
V1PaymentItemization.prototype['name'] = undefined;

/**
 * @member {module:model/V1Money} net_sales_money
 */
V1PaymentItemization.prototype['net_sales_money'] = undefined;

/**
 * Notes entered by the merchant about the item at the time of payment, if any.
 * @member {String} notes
 */
V1PaymentItemization.prototype['notes'] = undefined;

/**
 * The quantity of the item purchased. This can be a decimal value.
 * @member {Number} quantity
 */
V1PaymentItemization.prototype['quantity'] = undefined;

/**
 * @member {module:model/V1Money} single_quantity_money
 */
V1PaymentItemization.prototype['single_quantity_money'] = undefined;

/**
 * All taxes applied to this itemization.
 * @member {Array.<module:model/V1PaymentTax>} taxes
 */
V1PaymentItemization.prototype['taxes'] = undefined;

/**
 * @member {module:model/V1Money} total_money
 */
V1PaymentItemization.prototype['total_money'] = undefined;






export default V1PaymentItemization;

