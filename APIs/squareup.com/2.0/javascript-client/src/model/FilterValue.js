/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FilterValue model module.
 * @module model/FilterValue
 * @version 2.0
 */
class FilterValue {
    /**
     * Constructs a new <code>FilterValue</code>.
     * A filter to select resources based on an exact field value. For any given value, the value can only be in one property. Depending on the field, either all properties can be set or only a subset will be available.  Refer to the documentation of the field.
     * @alias module:model/FilterValue
     */
    constructor() { 
        
        FilterValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FilterValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FilterValue} obj Optional instance to populate.
     * @return {module:model/FilterValue} The populated <code>FilterValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FilterValue();

            if (data.hasOwnProperty('all')) {
                obj['all'] = ApiClient.convertToType(data['all'], ['String']);
            }
            if (data.hasOwnProperty('any')) {
                obj['any'] = ApiClient.convertToType(data['any'], ['String']);
            }
            if (data.hasOwnProperty('none')) {
                obj['none'] = ApiClient.convertToType(data['none'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FilterValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FilterValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['all'])) {
            throw new Error("Expected the field `all` to be an array in the JSON data but got " + data['all']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['any'])) {
            throw new Error("Expected the field `any` to be an array in the JSON data but got " + data['any']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['none'])) {
            throw new Error("Expected the field `none` to be an array in the JSON data but got " + data['none']);
        }

        return true;
    }


}



/**
 * A list of terms that must be present on the field of the resource.
 * @member {Array.<String>} all
 */
FilterValue.prototype['all'] = undefined;

/**
 * A list of terms where at least one of them must be present on the field of the resource.
 * @member {Array.<String>} any
 */
FilterValue.prototype['any'] = undefined;

/**
 * A list of terms that must not be present on the field the resource
 * @member {Array.<String>} none
 */
FilterValue.prototype['none'] = undefined;






export default FilterValue;

