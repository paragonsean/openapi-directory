/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The OrderLineItemDiscount model module.
 * @module model/OrderLineItemDiscount
 * @version 2.0
 */
class OrderLineItemDiscount {
    /**
     * Constructs a new <code>OrderLineItemDiscount</code>.
     * Represents a discount that applies to one or more line items in an order.  Fixed-amount, order-scoped discounts are distributed across all non-zero line item totals. The amount distributed to each line item is relative to the amount contributed by the item to the order subtotal.
     * @alias module:model/OrderLineItemDiscount
     */
    constructor() { 
        
        OrderLineItemDiscount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderLineItemDiscount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderLineItemDiscount} obj Optional instance to populate.
     * @return {module:model/OrderLineItemDiscount} The populated <code>OrderLineItemDiscount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderLineItemDiscount();

            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('applied_money')) {
                obj['applied_money'] = Money.constructFromObject(data['applied_money']);
            }
            if (data.hasOwnProperty('catalog_object_id')) {
                obj['catalog_object_id'] = ApiClient.convertToType(data['catalog_object_id'], 'String');
            }
            if (data.hasOwnProperty('catalog_version')) {
                obj['catalog_version'] = ApiClient.convertToType(data['catalog_version'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('percentage')) {
                obj['percentage'] = ApiClient.convertToType(data['percentage'], 'String');
            }
            if (data.hasOwnProperty('pricing_rule_id')) {
                obj['pricing_rule_id'] = ApiClient.convertToType(data['pricing_rule_id'], 'String');
            }
            if (data.hasOwnProperty('reward_ids')) {
                obj['reward_ids'] = ApiClient.convertToType(data['reward_ids'], ['String']);
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderLineItemDiscount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderLineItemDiscount</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          Money.validateJSON(data['amount_money']);
        }
        // validate the optional field `applied_money`
        if (data['applied_money']) { // data not null
          Money.validateJSON(data['applied_money']);
        }
        // ensure the json data is a string
        if (data['catalog_object_id'] && !(typeof data['catalog_object_id'] === 'string' || data['catalog_object_id'] instanceof String)) {
            throw new Error("Expected the field `catalog_object_id` to be a primitive type in the JSON string but got " + data['catalog_object_id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['percentage'] && !(typeof data['percentage'] === 'string' || data['percentage'] instanceof String)) {
            throw new Error("Expected the field `percentage` to be a primitive type in the JSON string but got " + data['percentage']);
        }
        // ensure the json data is a string
        if (data['pricing_rule_id'] && !(typeof data['pricing_rule_id'] === 'string' || data['pricing_rule_id'] instanceof String)) {
            throw new Error("Expected the field `pricing_rule_id` to be a primitive type in the JSON string but got " + data['pricing_rule_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['reward_ids'])) {
            throw new Error("Expected the field `reward_ids` to be an array in the JSON data but got " + data['reward_ids']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * @member {module:model/Money} amount_money
 */
OrderLineItemDiscount.prototype['amount_money'] = undefined;

/**
 * @member {module:model/Money} applied_money
 */
OrderLineItemDiscount.prototype['applied_money'] = undefined;

/**
 * The catalog object ID referencing [CatalogDiscount](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogDiscount).
 * @member {String} catalog_object_id
 */
OrderLineItemDiscount.prototype['catalog_object_id'] = undefined;

/**
 * The version of the catalog object that this discount references.
 * @member {Number} catalog_version
 */
OrderLineItemDiscount.prototype['catalog_version'] = undefined;

/**
 * Application-defined data attached to this discount. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
 * @member {Object.<String, String>} metadata
 */
OrderLineItemDiscount.prototype['metadata'] = undefined;

/**
 * The discount's name.
 * @member {String} name
 */
OrderLineItemDiscount.prototype['name'] = undefined;

/**
 * The percentage of the discount, as a string representation of a decimal number. A value of `7.25` corresponds to a percentage of 7.25%.  `percentage` is not set for amount-based discounts.
 * @member {String} percentage
 */
OrderLineItemDiscount.prototype['percentage'] = undefined;

/**
 * The object ID of a [pricing rule](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule) to be applied  automatically to this discount. The specification and application of the discounts, to  which a `pricing_rule_id` is assigned, are completely controlled by the corresponding  pricing rule.
 * @member {String} pricing_rule_id
 */
OrderLineItemDiscount.prototype['pricing_rule_id'] = undefined;

/**
 * The reward IDs corresponding to this discount. The application and specification of discounts that have `reward_ids` are completely controlled by the backing criteria corresponding to the reward tiers of the rewards that are added to the order through the Loyalty API. To manually unapply discounts that are the result of added rewards, the rewards must be removed from the order through the Loyalty API.
 * @member {Array.<String>} reward_ids
 */
OrderLineItemDiscount.prototype['reward_ids'] = undefined;

/**
 * Indicates the level at which the discount applies. For `ORDER` scoped discounts, Square generates references in `applied_discounts` on all order line items that do not have them. For `LINE_ITEM` scoped discounts, the discount only applies to line items with a discount reference in their `applied_discounts` field.  This field is immutable. To change the scope of a discount, you must delete the discount and re-add it as a new discount.
 * @member {String} scope
 */
OrderLineItemDiscount.prototype['scope'] = undefined;

/**
 * The type of the discount.  Discounts that do not reference a catalog object ID must have a type of `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
 * @member {String} type
 */
OrderLineItemDiscount.prototype['type'] = undefined;

/**
 * A unique ID that identifies the discount only within this order.
 * @member {String} uid
 */
OrderLineItemDiscount.prototype['uid'] = undefined;






export default OrderLineItemDiscount;

