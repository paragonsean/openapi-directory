/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogCustomAttributeDefinitionNumberConfig from './CatalogCustomAttributeDefinitionNumberConfig';
import CatalogCustomAttributeDefinitionSelectionConfig from './CatalogCustomAttributeDefinitionSelectionConfig';
import CatalogCustomAttributeDefinitionStringConfig from './CatalogCustomAttributeDefinitionStringConfig';
import SourceApplication from './SourceApplication';

/**
 * The CatalogCustomAttributeDefinition model module.
 * @module model/CatalogCustomAttributeDefinition
 * @version 2.0
 */
class CatalogCustomAttributeDefinition {
    /**
     * Constructs a new <code>CatalogCustomAttributeDefinition</code>.
     * Contains information defining a custom attribute. Custom attributes are intended to store additional information about a catalog object or to associate a catalog object with an entity in another system. Do not use custom attributes to store any sensitive information (personally identifiable information, card details, etc.). [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes)
     * @alias module:model/CatalogCustomAttributeDefinition
     * @param allowedObjectTypes {Array.<String>} The set of Catalog Object Types that this Custom Attribute may be applied to. Currently, only `ITEM` and `ITEM_VARIATION` are allowed. At least one type must be included.
     * @param name {String}  The name of this definition for API and seller-facing UI purposes. The name must be unique within the (merchant, application) pair. Required. May not be empty and may not exceed 255 characters. Can be modified after creation.
     * @param type {String} The type of this custom attribute. Cannot be modified after creation. Required.
     */
    constructor(allowedObjectTypes, name, type) { 
        
        CatalogCustomAttributeDefinition.initialize(this, allowedObjectTypes, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allowedObjectTypes, name, type) { 
        obj['allowed_object_types'] = allowedObjectTypes;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CatalogCustomAttributeDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogCustomAttributeDefinition} obj Optional instance to populate.
     * @return {module:model/CatalogCustomAttributeDefinition} The populated <code>CatalogCustomAttributeDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogCustomAttributeDefinition();

            if (data.hasOwnProperty('allowed_object_types')) {
                obj['allowed_object_types'] = ApiClient.convertToType(data['allowed_object_types'], ['String']);
            }
            if (data.hasOwnProperty('app_visibility')) {
                obj['app_visibility'] = ApiClient.convertToType(data['app_visibility'], 'String');
            }
            if (data.hasOwnProperty('custom_attribute_usage_count')) {
                obj['custom_attribute_usage_count'] = ApiClient.convertToType(data['custom_attribute_usage_count'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number_config')) {
                obj['number_config'] = CatalogCustomAttributeDefinitionNumberConfig.constructFromObject(data['number_config']);
            }
            if (data.hasOwnProperty('selection_config')) {
                obj['selection_config'] = CatalogCustomAttributeDefinitionSelectionConfig.constructFromObject(data['selection_config']);
            }
            if (data.hasOwnProperty('seller_visibility')) {
                obj['seller_visibility'] = ApiClient.convertToType(data['seller_visibility'], 'String');
            }
            if (data.hasOwnProperty('source_application')) {
                obj['source_application'] = SourceApplication.constructFromObject(data['source_application']);
            }
            if (data.hasOwnProperty('string_config')) {
                obj['string_config'] = CatalogCustomAttributeDefinitionStringConfig.constructFromObject(data['string_config']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogCustomAttributeDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogCustomAttributeDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogCustomAttributeDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowed_object_types'])) {
            throw new Error("Expected the field `allowed_object_types` to be an array in the JSON data but got " + data['allowed_object_types']);
        }
        // ensure the json data is a string
        if (data['app_visibility'] && !(typeof data['app_visibility'] === 'string' || data['app_visibility'] instanceof String)) {
            throw new Error("Expected the field `app_visibility` to be a primitive type in the JSON string but got " + data['app_visibility']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `number_config`
        if (data['number_config']) { // data not null
          CatalogCustomAttributeDefinitionNumberConfig.validateJSON(data['number_config']);
        }
        // validate the optional field `selection_config`
        if (data['selection_config']) { // data not null
          CatalogCustomAttributeDefinitionSelectionConfig.validateJSON(data['selection_config']);
        }
        // ensure the json data is a string
        if (data['seller_visibility'] && !(typeof data['seller_visibility'] === 'string' || data['seller_visibility'] instanceof String)) {
            throw new Error("Expected the field `seller_visibility` to be a primitive type in the JSON string but got " + data['seller_visibility']);
        }
        // validate the optional field `source_application`
        if (data['source_application']) { // data not null
          SourceApplication.validateJSON(data['source_application']);
        }
        // validate the optional field `string_config`
        if (data['string_config']) { // data not null
          CatalogCustomAttributeDefinitionStringConfig.validateJSON(data['string_config']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

CatalogCustomAttributeDefinition.RequiredProperties = ["allowed_object_types", "name", "type"];

/**
 * The set of Catalog Object Types that this Custom Attribute may be applied to. Currently, only `ITEM` and `ITEM_VARIATION` are allowed. At least one type must be included.
 * @member {Array.<String>} allowed_object_types
 */
CatalogCustomAttributeDefinition.prototype['allowed_object_types'] = undefined;

/**
 * The visibility of a custom attribute to applications other than the application that created the attribute.
 * @member {String} app_visibility
 */
CatalogCustomAttributeDefinition.prototype['app_visibility'] = undefined;

/**
 * __Read-only.__ The number of custom attributes that reference this custom attribute definition. Set by the server in response to a ListCatalog request with `include_counts` set to `true`.  If the actual count is greater than 100, `custom_attribute_usage_count` will be set to `100`.
 * @member {Number} custom_attribute_usage_count
 */
CatalogCustomAttributeDefinition.prototype['custom_attribute_usage_count'] = undefined;

/**
 * Seller-oriented description of the meaning of this Custom Attribute, any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.
 * @member {String} description
 */
CatalogCustomAttributeDefinition.prototype['description'] = undefined;

/**
 * The name of the desired custom attribute key that can be used to access the custom attribute value on catalog objects. Cannot be modified after the custom attribute definition has been created. Must be between 1 and 60 characters, and may only contain the characters `[a-zA-Z0-9_-]`.
 * @member {String} key
 */
CatalogCustomAttributeDefinition.prototype['key'] = undefined;

/**
 *  The name of this definition for API and seller-facing UI purposes. The name must be unique within the (merchant, application) pair. Required. May not be empty and may not exceed 255 characters. Can be modified after creation.
 * @member {String} name
 */
CatalogCustomAttributeDefinition.prototype['name'] = undefined;

/**
 * @member {module:model/CatalogCustomAttributeDefinitionNumberConfig} number_config
 */
CatalogCustomAttributeDefinition.prototype['number_config'] = undefined;

/**
 * @member {module:model/CatalogCustomAttributeDefinitionSelectionConfig} selection_config
 */
CatalogCustomAttributeDefinition.prototype['selection_config'] = undefined;

/**
 * The visibility of a custom attribute in seller-facing UIs (including Square Point of Sale applications and Square Dashboard). May be modified.
 * @member {String} seller_visibility
 */
CatalogCustomAttributeDefinition.prototype['seller_visibility'] = undefined;

/**
 * @member {module:model/SourceApplication} source_application
 */
CatalogCustomAttributeDefinition.prototype['source_application'] = undefined;

/**
 * @member {module:model/CatalogCustomAttributeDefinitionStringConfig} string_config
 */
CatalogCustomAttributeDefinition.prototype['string_config'] = undefined;

/**
 * The type of this custom attribute. Cannot be modified after creation. Required.
 * @member {String} type
 */
CatalogCustomAttributeDefinition.prototype['type'] = undefined;






export default CatalogCustomAttributeDefinition;

