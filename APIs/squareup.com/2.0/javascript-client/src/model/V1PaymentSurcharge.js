/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import V1Money from './V1Money';
import V1PaymentTax from './V1PaymentTax';

/**
 * The V1PaymentSurcharge model module.
 * @module model/V1PaymentSurcharge
 * @version 2.0
 */
class V1PaymentSurcharge {
    /**
     * Constructs a new <code>V1PaymentSurcharge</code>.
     * V1PaymentSurcharge
     * @alias module:model/V1PaymentSurcharge
     */
    constructor() { 
        
        V1PaymentSurcharge.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V1PaymentSurcharge</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1PaymentSurcharge} obj Optional instance to populate.
     * @return {module:model/V1PaymentSurcharge} The populated <code>V1PaymentSurcharge</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1PaymentSurcharge();

            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = V1Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('applied_money')) {
                obj['applied_money'] = V1Money.constructFromObject(data['applied_money']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'String');
            }
            if (data.hasOwnProperty('surcharge_id')) {
                obj['surcharge_id'] = ApiClient.convertToType(data['surcharge_id'], 'String');
            }
            if (data.hasOwnProperty('taxable')) {
                obj['taxable'] = ApiClient.convertToType(data['taxable'], 'Boolean');
            }
            if (data.hasOwnProperty('taxes')) {
                obj['taxes'] = ApiClient.convertToType(data['taxes'], [V1PaymentTax]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1PaymentSurcharge</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1PaymentSurcharge</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          V1Money.validateJSON(data['amount_money']);
        }
        // validate the optional field `applied_money`
        if (data['applied_money']) { // data not null
          V1Money.validateJSON(data['applied_money']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['rate'] && !(typeof data['rate'] === 'string' || data['rate'] instanceof String)) {
            throw new Error("Expected the field `rate` to be a primitive type in the JSON string but got " + data['rate']);
        }
        // ensure the json data is a string
        if (data['surcharge_id'] && !(typeof data['surcharge_id'] === 'string' || data['surcharge_id'] instanceof String)) {
            throw new Error("Expected the field `surcharge_id` to be a primitive type in the JSON string but got " + data['surcharge_id']);
        }
        if (data['taxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taxes'])) {
                throw new Error("Expected the field `taxes` to be an array in the JSON data but got " + data['taxes']);
            }
            // validate the optional field `taxes` (array)
            for (const item of data['taxes']) {
                V1PaymentTax.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/V1Money} amount_money
 */
V1PaymentSurcharge.prototype['amount_money'] = undefined;

/**
 * @member {module:model/V1Money} applied_money
 */
V1PaymentSurcharge.prototype['applied_money'] = undefined;

/**
 * The name of the surcharge.
 * @member {String} name
 */
V1PaymentSurcharge.prototype['name'] = undefined;

/**
 * The amount of the surcharge as a percentage. The percentage is provided as a string representing the decimal equivalent of the percentage. For example, \"0.7\" corresponds to a 7% surcharge. Exactly one of rate or amount_money should be set.
 * @member {String} rate
 */
V1PaymentSurcharge.prototype['rate'] = undefined;

/**
 * A Square-issued unique identifier associated with the surcharge.
 * @member {String} surcharge_id
 */
V1PaymentSurcharge.prototype['surcharge_id'] = undefined;

/**
 * Indicates whether the surcharge is taxable.
 * @member {Boolean} taxable
 */
V1PaymentSurcharge.prototype['taxable'] = undefined;

/**
 * The list of taxes that should be applied to the surcharge.
 * @member {Array.<module:model/V1PaymentTax>} taxes
 */
V1PaymentSurcharge.prototype['taxes'] = undefined;

/**
 * Indicates the source of the surcharge. For example, if it was applied as an automatic gratuity for a large group.
 * @member {String} type
 */
V1PaymentSurcharge.prototype['type'] = undefined;






export default V1PaymentSurcharge;

