/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TipSettings model module.
 * @module model/TipSettings
 * @version 2.0
 */
class TipSettings {
    /**
     * Constructs a new <code>TipSettings</code>.
     * 
     * @alias module:model/TipSettings
     */
    constructor() { 
        
        TipSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TipSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TipSettings} obj Optional instance to populate.
     * @return {module:model/TipSettings} The populated <code>TipSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TipSettings();

            if (data.hasOwnProperty('allow_tipping')) {
                obj['allow_tipping'] = ApiClient.convertToType(data['allow_tipping'], 'Boolean');
            }
            if (data.hasOwnProperty('custom_tip_field')) {
                obj['custom_tip_field'] = ApiClient.convertToType(data['custom_tip_field'], 'Boolean');
            }
            if (data.hasOwnProperty('separate_tip_screen')) {
                obj['separate_tip_screen'] = ApiClient.convertToType(data['separate_tip_screen'], 'Boolean');
            }
            if (data.hasOwnProperty('smart_tipping')) {
                obj['smart_tipping'] = ApiClient.convertToType(data['smart_tipping'], 'Boolean');
            }
            if (data.hasOwnProperty('tip_percentages')) {
                obj['tip_percentages'] = ApiClient.convertToType(data['tip_percentages'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TipSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TipSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['tip_percentages'])) {
            throw new Error("Expected the field `tip_percentages` to be an array in the JSON data but got " + data['tip_percentages']);
        }

        return true;
    }


}



/**
 * Indicates whether tipping is enabled for this checkout. Defaults to false.
 * @member {Boolean} allow_tipping
 */
TipSettings.prototype['allow_tipping'] = undefined;

/**
 * Indicates whether custom tip amounts are allowed during the checkout flow. Defaults to false.
 * @member {Boolean} custom_tip_field
 */
TipSettings.prototype['custom_tip_field'] = undefined;

/**
 * Indicates whether tip options should be presented on the screen before presenting the signature screen during card payment. Defaults to false.
 * @member {Boolean} separate_tip_screen
 */
TipSettings.prototype['separate_tip_screen'] = undefined;

/**
 * Enables the \"Smart Tip Amounts\" behavior. Exact tipping options depend on the region in which the Square seller is active.  For payments under 10.00, in the Australia, Canada, Ireland, United Kingdom, and United States, tipping options are presented as no tip, .50, 1.00 or 2.00.  For payment amounts of 10.00 or greater, tipping options are presented as the following percentages: 0%, 5%, 10%, 15%.  If set to true, the `tip_percentages` settings is ignored. Defaults to false.  To learn more about smart tipping, see [Accept Tips with the Square App](https://squareup.com/help/us/en/article/5069-accept-tips-with-the-square-app).
 * @member {Boolean} smart_tipping
 */
TipSettings.prototype['smart_tipping'] = undefined;

/**
 * A list of tip percentages that should be presented during the checkout flow, specified as up to 3 non-negative integers from 0 to 100 (inclusive). Defaults to 15, 20, and 25.
 * @member {Array.<Number>} tip_percentages
 */
TipSettings.prototype['tip_percentages'] = undefined;






export default TipSettings;

