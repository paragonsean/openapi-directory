/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The RefundPaymentRequest model module.
 * @module model/RefundPaymentRequest
 * @version 2.0
 */
class RefundPaymentRequest {
    /**
     * Constructs a new <code>RefundPaymentRequest</code>.
     * Describes a request to refund a payment using [RefundPayment](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/refund-payment).
     * @alias module:model/RefundPaymentRequest
     * @param amountMoney {module:model/Money} 
     * @param idempotencyKey {String}  A unique string that identifies this `RefundPayment` request. The key can be any valid string but must be unique for every `RefundPayment` request.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
     * @param paymentId {String} The unique ID of the payment being refunded.
     */
    constructor(amountMoney, idempotencyKey, paymentId) { 
        
        RefundPaymentRequest.initialize(this, amountMoney, idempotencyKey, paymentId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amountMoney, idempotencyKey, paymentId) { 
        obj['amount_money'] = amountMoney;
        obj['idempotency_key'] = idempotencyKey;
        obj['payment_id'] = paymentId;
    }

    /**
     * Constructs a <code>RefundPaymentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RefundPaymentRequest} obj Optional instance to populate.
     * @return {module:model/RefundPaymentRequest} The populated <code>RefundPaymentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RefundPaymentRequest();

            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('app_fee_money')) {
                obj['app_fee_money'] = Money.constructFromObject(data['app_fee_money']);
            }
            if (data.hasOwnProperty('idempotency_key')) {
                obj['idempotency_key'] = ApiClient.convertToType(data['idempotency_key'], 'String');
            }
            if (data.hasOwnProperty('payment_id')) {
                obj['payment_id'] = ApiClient.convertToType(data['payment_id'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RefundPaymentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RefundPaymentRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RefundPaymentRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          Money.validateJSON(data['amount_money']);
        }
        // validate the optional field `app_fee_money`
        if (data['app_fee_money']) { // data not null
          Money.validateJSON(data['app_fee_money']);
        }
        // ensure the json data is a string
        if (data['idempotency_key'] && !(typeof data['idempotency_key'] === 'string' || data['idempotency_key'] instanceof String)) {
            throw new Error("Expected the field `idempotency_key` to be a primitive type in the JSON string but got " + data['idempotency_key']);
        }
        // ensure the json data is a string
        if (data['payment_id'] && !(typeof data['payment_id'] === 'string' || data['payment_id'] instanceof String)) {
            throw new Error("Expected the field `payment_id` to be a primitive type in the JSON string but got " + data['payment_id']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }

        return true;
    }


}

RefundPaymentRequest.RequiredProperties = ["amount_money", "idempotency_key", "payment_id"];

/**
 * @member {module:model/Money} amount_money
 */
RefundPaymentRequest.prototype['amount_money'] = undefined;

/**
 * @member {module:model/Money} app_fee_money
 */
RefundPaymentRequest.prototype['app_fee_money'] = undefined;

/**
 *  A unique string that identifies this `RefundPayment` request. The key can be any valid string but must be unique for every `RefundPayment` request.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
 * @member {String} idempotency_key
 */
RefundPaymentRequest.prototype['idempotency_key'] = undefined;

/**
 * The unique ID of the payment being refunded.
 * @member {String} payment_id
 */
RefundPaymentRequest.prototype['payment_id'] = undefined;

/**
 * A description of the reason for the refund.
 * @member {String} reason
 */
RefundPaymentRequest.prototype['reason'] = undefined;






export default RefundPaymentRequest;

