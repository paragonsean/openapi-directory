/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogModifierOverride model module.
 * @module model/CatalogModifierOverride
 * @version 2.0
 */
class CatalogModifierOverride {
    /**
     * Constructs a new <code>CatalogModifierOverride</code>.
     * Options to control how to override the default behavior of the specified modifier.
     * @alias module:model/CatalogModifierOverride
     * @param modifierId {String} The ID of the `CatalogModifier` whose default behavior is being overridden.
     */
    constructor(modifierId) { 
        
        CatalogModifierOverride.initialize(this, modifierId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, modifierId) { 
        obj['modifier_id'] = modifierId;
    }

    /**
     * Constructs a <code>CatalogModifierOverride</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogModifierOverride} obj Optional instance to populate.
     * @return {module:model/CatalogModifierOverride} The populated <code>CatalogModifierOverride</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogModifierOverride();

            if (data.hasOwnProperty('modifier_id')) {
                obj['modifier_id'] = ApiClient.convertToType(data['modifier_id'], 'String');
            }
            if (data.hasOwnProperty('on_by_default')) {
                obj['on_by_default'] = ApiClient.convertToType(data['on_by_default'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogModifierOverride</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogModifierOverride</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogModifierOverride.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['modifier_id'] && !(typeof data['modifier_id'] === 'string' || data['modifier_id'] instanceof String)) {
            throw new Error("Expected the field `modifier_id` to be a primitive type in the JSON string but got " + data['modifier_id']);
        }

        return true;
    }


}

CatalogModifierOverride.RequiredProperties = ["modifier_id"];

/**
 * The ID of the `CatalogModifier` whose default behavior is being overridden.
 * @member {String} modifier_id
 */
CatalogModifierOverride.prototype['modifier_id'] = undefined;

/**
 * If `true`, this `CatalogModifier` should be selected by default for this `CatalogItem`.
 * @member {Boolean} on_by_default
 */
CatalogModifierOverride.prototype['on_by_default'] = undefined;






export default CatalogModifierOverride;

