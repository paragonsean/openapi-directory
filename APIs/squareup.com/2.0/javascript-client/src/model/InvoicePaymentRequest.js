/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InvoicePaymentReminder from './InvoicePaymentReminder';
import Money from './Money';

/**
 * The InvoicePaymentRequest model module.
 * @module model/InvoicePaymentRequest
 * @version 2.0
 */
class InvoicePaymentRequest {
    /**
     * Constructs a new <code>InvoicePaymentRequest</code>.
     * Represents a payment request for an [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice). Invoices can specify a maximum of 13 payment requests, with up to 12 &#x60;INSTALLMENT&#x60; request types. For more information,  see [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).  Adding &#x60;INSTALLMENT&#x60; payment requests to an invoice requires an  [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
     * @alias module:model/InvoicePaymentRequest
     */
    constructor() { 
        
        InvoicePaymentRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InvoicePaymentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InvoicePaymentRequest} obj Optional instance to populate.
     * @return {module:model/InvoicePaymentRequest} The populated <code>InvoicePaymentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvoicePaymentRequest();

            if (data.hasOwnProperty('automatic_payment_source')) {
                obj['automatic_payment_source'] = ApiClient.convertToType(data['automatic_payment_source'], 'String');
            }
            if (data.hasOwnProperty('card_id')) {
                obj['card_id'] = ApiClient.convertToType(data['card_id'], 'String');
            }
            if (data.hasOwnProperty('computed_amount_money')) {
                obj['computed_amount_money'] = Money.constructFromObject(data['computed_amount_money']);
            }
            if (data.hasOwnProperty('due_date')) {
                obj['due_date'] = ApiClient.convertToType(data['due_date'], 'String');
            }
            if (data.hasOwnProperty('fixed_amount_requested_money')) {
                obj['fixed_amount_requested_money'] = Money.constructFromObject(data['fixed_amount_requested_money']);
            }
            if (data.hasOwnProperty('percentage_requested')) {
                obj['percentage_requested'] = ApiClient.convertToType(data['percentage_requested'], 'String');
            }
            if (data.hasOwnProperty('reminders')) {
                obj['reminders'] = ApiClient.convertToType(data['reminders'], [InvoicePaymentReminder]);
            }
            if (data.hasOwnProperty('request_method')) {
                obj['request_method'] = ApiClient.convertToType(data['request_method'], 'String');
            }
            if (data.hasOwnProperty('request_type')) {
                obj['request_type'] = ApiClient.convertToType(data['request_type'], 'String');
            }
            if (data.hasOwnProperty('rounding_adjustment_included_money')) {
                obj['rounding_adjustment_included_money'] = Money.constructFromObject(data['rounding_adjustment_included_money']);
            }
            if (data.hasOwnProperty('tipping_enabled')) {
                obj['tipping_enabled'] = ApiClient.convertToType(data['tipping_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('total_completed_amount_money')) {
                obj['total_completed_amount_money'] = Money.constructFromObject(data['total_completed_amount_money']);
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InvoicePaymentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InvoicePaymentRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['automatic_payment_source'] && !(typeof data['automatic_payment_source'] === 'string' || data['automatic_payment_source'] instanceof String)) {
            throw new Error("Expected the field `automatic_payment_source` to be a primitive type in the JSON string but got " + data['automatic_payment_source']);
        }
        // ensure the json data is a string
        if (data['card_id'] && !(typeof data['card_id'] === 'string' || data['card_id'] instanceof String)) {
            throw new Error("Expected the field `card_id` to be a primitive type in the JSON string but got " + data['card_id']);
        }
        // validate the optional field `computed_amount_money`
        if (data['computed_amount_money']) { // data not null
          Money.validateJSON(data['computed_amount_money']);
        }
        // ensure the json data is a string
        if (data['due_date'] && !(typeof data['due_date'] === 'string' || data['due_date'] instanceof String)) {
            throw new Error("Expected the field `due_date` to be a primitive type in the JSON string but got " + data['due_date']);
        }
        // validate the optional field `fixed_amount_requested_money`
        if (data['fixed_amount_requested_money']) { // data not null
          Money.validateJSON(data['fixed_amount_requested_money']);
        }
        // ensure the json data is a string
        if (data['percentage_requested'] && !(typeof data['percentage_requested'] === 'string' || data['percentage_requested'] instanceof String)) {
            throw new Error("Expected the field `percentage_requested` to be a primitive type in the JSON string but got " + data['percentage_requested']);
        }
        if (data['reminders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reminders'])) {
                throw new Error("Expected the field `reminders` to be an array in the JSON data but got " + data['reminders']);
            }
            // validate the optional field `reminders` (array)
            for (const item of data['reminders']) {
                InvoicePaymentReminder.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['request_method'] && !(typeof data['request_method'] === 'string' || data['request_method'] instanceof String)) {
            throw new Error("Expected the field `request_method` to be a primitive type in the JSON string but got " + data['request_method']);
        }
        // ensure the json data is a string
        if (data['request_type'] && !(typeof data['request_type'] === 'string' || data['request_type'] instanceof String)) {
            throw new Error("Expected the field `request_type` to be a primitive type in the JSON string but got " + data['request_type']);
        }
        // validate the optional field `rounding_adjustment_included_money`
        if (data['rounding_adjustment_included_money']) { // data not null
          Money.validateJSON(data['rounding_adjustment_included_money']);
        }
        // validate the optional field `total_completed_amount_money`
        if (data['total_completed_amount_money']) { // data not null
          Money.validateJSON(data['total_completed_amount_money']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * The payment method for an automatic payment.  The default value is `NONE`.
 * @member {String} automatic_payment_source
 */
InvoicePaymentRequest.prototype['automatic_payment_source'] = undefined;

/**
 * The ID of the credit or debit card on file to charge for the payment request. To get the cards on file for a customer, call [ListCards](https://developer.squareup.com/reference/square_2021-08-18/cards-api/list-cards) and include the `customer_id` of the invoice recipient.
 * @member {String} card_id
 */
InvoicePaymentRequest.prototype['card_id'] = undefined;

/**
 * @member {module:model/Money} computed_amount_money
 */
InvoicePaymentRequest.prototype['computed_amount_money'] = undefined;

/**
 * The due date (in the invoice's time zone) for the payment request, in `YYYY-MM-DD` format. This field is required to create a payment request.  After this date, the invoice becomes overdue. For example, a payment `due_date` of 2021-03-09 with a `timezone` of America/Los\\_Angeles becomes overdue at midnight on March 9 in America/Los\\_Angeles (which equals a UTC timestamp of 2021-03-10T08:00:00Z).
 * @member {String} due_date
 */
InvoicePaymentRequest.prototype['due_date'] = undefined;

/**
 * @member {module:model/Money} fixed_amount_requested_money
 */
InvoicePaymentRequest.prototype['fixed_amount_requested_money'] = undefined;

/**
 * Specifies the amount for the payment request in percentage:  - When the payment `request_type` is `DEPOSIT`, it is the percentage of the order's total amount. - When the payment `request_type` is `INSTALLMENT`, it is the percentage of the order's total less  the deposit, if requested. The sum of the `percentage_requested` in all installment  payment requests must be equal to 100.  You cannot specify this when the payment `request_type` is `BALANCE` or when the  payment request specifies the `fixed_amount_requested_money` field.
 * @member {String} percentage_requested
 */
InvoicePaymentRequest.prototype['percentage_requested'] = undefined;

/**
 * A list of one or more reminders to send for the payment request.
 * @member {Array.<module:model/InvoicePaymentReminder>} reminders
 */
InvoicePaymentRequest.prototype['reminders'] = undefined;

/**
 * Indicates how Square processes the payment request. DEPRECATED at version 2021-01-21. Replaced by the `Invoice.delivery_method` and `InvoicePaymentRequest.automatic_payment_source` fields.  One of the following is required when creating an invoice: - (Recommended) The `delivery_method` field of the invoice. To configure an automatic payment, the `automatic_payment_source` field of the payment request is also required. - This `request_method` field. Note that `invoice` objects returned in responses do not include `request_method`.
 * @member {String} request_method
 */
InvoicePaymentRequest.prototype['request_method'] = undefined;

/**
 * Identifies the payment request type. This type defines how the payment request amount is determined.  This field is required to create a payment request.
 * @member {String} request_type
 */
InvoicePaymentRequest.prototype['request_type'] = undefined;

/**
 * @member {module:model/Money} rounding_adjustment_included_money
 */
InvoicePaymentRequest.prototype['rounding_adjustment_included_money'] = undefined;

/**
 * If set to true, the Square-hosted invoice page (the `public_url` field of the invoice)  provides a place for the customer to pay a tip.   This field is allowed only on the final payment request   and the payment `request_type` must be `BALANCE` or `INSTALLMENT`.
 * @member {Boolean} tipping_enabled
 */
InvoicePaymentRequest.prototype['tipping_enabled'] = undefined;

/**
 * @member {module:model/Money} total_completed_amount_money
 */
InvoicePaymentRequest.prototype['total_completed_amount_money'] = undefined;

/**
 * The Square-generated ID of the payment request in an [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice).
 * @member {String} uid
 */
InvoicePaymentRequest.prototype['uid'] = undefined;






export default InvoicePaymentRequest;

