/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListGiftCardsRequest model module.
 * @module model/ListGiftCardsRequest
 * @version 2.0
 */
class ListGiftCardsRequest {
    /**
     * Constructs a new <code>ListGiftCardsRequest</code>.
     * A request to list gift cards. You can optionally specify a filter to retrieve a subset of  gift cards.
     * @alias module:model/ListGiftCardsRequest
     */
    constructor() { 
        
        ListGiftCardsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListGiftCardsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListGiftCardsRequest} obj Optional instance to populate.
     * @return {module:model/ListGiftCardsRequest} The populated <code>ListGiftCardsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListGiftCardsRequest();

            if (data.hasOwnProperty('cursor')) {
                obj['cursor'] = ApiClient.convertToType(data['cursor'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListGiftCardsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListGiftCardsRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cursor'] && !(typeof data['cursor'] === 'string' || data['cursor'] instanceof String)) {
            throw new Error("Expected the field `cursor` to be a primitive type in the JSON string but got " + data['cursor']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If a cursor is not provided, it returns the first page of the results.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
 * @member {String} cursor
 */
ListGiftCardsRequest.prototype['cursor'] = undefined;

/**
 * If a value is provided, returns only the gift cards linked to the specified customer
 * @member {String} customer_id
 */
ListGiftCardsRequest.prototype['customer_id'] = undefined;

/**
 * If a value is provided, it returns only that number of results per page. The maximum number of results allowed per page is 50. The default value is 30.
 * @member {Number} limit
 */
ListGiftCardsRequest.prototype['limit'] = undefined;

/**
 * If the state is provided, it returns the gift cards in the specified state  (see [GiftCardStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardStatus)). Otherwise, it returns the gift cards of all states.
 * @member {String} state
 */
ListGiftCardsRequest.prototype['state'] = undefined;

/**
 * If a type is provided, gift cards of this type are returned  (see [GiftCardType](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardType)). If no type is provided, it returns gift cards of all types.
 * @member {String} type
 */
ListGiftCardsRequest.prototype['type'] = undefined;






export default ListGiftCardsRequest;

