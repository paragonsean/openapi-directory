/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SearchTeamMembersFilter model module.
 * @module model/SearchTeamMembersFilter
 * @version 2.0
 */
class SearchTeamMembersFilter {
    /**
     * Constructs a new <code>SearchTeamMembersFilter</code>.
     * Represents a filter used in a search for &#x60;TeamMember&#x60; objects. &#x60;AND&#x60; logic is applied between the individual fields, and &#x60;OR&#x60; logic is applied within list-based fields. For example, setting this filter value: &#x60;&#x60;&#x60; filter &#x3D; (locations_ids &#x3D; [\&quot;A\&quot;, \&quot;B\&quot;], status &#x3D; ACTIVE) &#x60;&#x60;&#x60; returns only active team members assigned to either location \&quot;A\&quot; or \&quot;B\&quot;.
     * @alias module:model/SearchTeamMembersFilter
     */
    constructor() { 
        
        SearchTeamMembersFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchTeamMembersFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchTeamMembersFilter} obj Optional instance to populate.
     * @return {module:model/SearchTeamMembersFilter} The populated <code>SearchTeamMembersFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchTeamMembersFilter();

            if (data.hasOwnProperty('location_ids')) {
                obj['location_ids'] = ApiClient.convertToType(data['location_ids'], ['String']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchTeamMembersFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchTeamMembersFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['location_ids'])) {
            throw new Error("Expected the field `location_ids` to be an array in the JSON data but got " + data['location_ids']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * When present, filters by team members assigned to the specified locations. When empty, includes team members assigned to any location.
 * @member {Array.<String>} location_ids
 */
SearchTeamMembersFilter.prototype['location_ids'] = undefined;

/**
 * When present, filters by team members who match the given status. When empty, includes team members of all statuses.
 * @member {String} status
 */
SearchTeamMembersFilter.prototype['status'] = undefined;






export default SearchTeamMembersFilter;

