/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BreakType model module.
 * @module model/BreakType
 * @version 2.0
 */
class BreakType {
    /**
     * Constructs a new <code>BreakType</code>.
     * A defined break template that sets an expectation for possible &#x60;Break&#x60; instances on a &#x60;Shift&#x60;.
     * @alias module:model/BreakType
     * @param breakName {String} A human-readable name for this type of break. The name is displayed to employees in Square products.
     * @param expectedDuration {String} Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of this break. Precision less than minutes is truncated.
     * @param isPaid {Boolean} Whether this break counts towards time worked for compensation purposes.
     * @param locationId {String} The ID of the business location this type of break applies to.
     */
    constructor(breakName, expectedDuration, isPaid, locationId) { 
        
        BreakType.initialize(this, breakName, expectedDuration, isPaid, locationId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, breakName, expectedDuration, isPaid, locationId) { 
        obj['break_name'] = breakName;
        obj['expected_duration'] = expectedDuration;
        obj['is_paid'] = isPaid;
        obj['location_id'] = locationId;
    }

    /**
     * Constructs a <code>BreakType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BreakType} obj Optional instance to populate.
     * @return {module:model/BreakType} The populated <code>BreakType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BreakType();

            if (data.hasOwnProperty('break_name')) {
                obj['break_name'] = ApiClient.convertToType(data['break_name'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('expected_duration')) {
                obj['expected_duration'] = ApiClient.convertToType(data['expected_duration'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_paid')) {
                obj['is_paid'] = ApiClient.convertToType(data['is_paid'], 'Boolean');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BreakType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BreakType</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BreakType.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['break_name'] && !(typeof data['break_name'] === 'string' || data['break_name'] instanceof String)) {
            throw new Error("Expected the field `break_name` to be a primitive type in the JSON string but got " + data['break_name']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['expected_duration'] && !(typeof data['expected_duration'] === 'string' || data['expected_duration'] instanceof String)) {
            throw new Error("Expected the field `expected_duration` to be a primitive type in the JSON string but got " + data['expected_duration']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

BreakType.RequiredProperties = ["break_name", "expected_duration", "is_paid", "location_id"];

/**
 * A human-readable name for this type of break. The name is displayed to employees in Square products.
 * @member {String} break_name
 */
BreakType.prototype['break_name'] = undefined;

/**
 * A read-only timestamp in RFC 3339 format.
 * @member {String} created_at
 */
BreakType.prototype['created_at'] = undefined;

/**
 * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of this break. Precision less than minutes is truncated.
 * @member {String} expected_duration
 */
BreakType.prototype['expected_duration'] = undefined;

/**
 * The UUID for this object.
 * @member {String} id
 */
BreakType.prototype['id'] = undefined;

/**
 * Whether this break counts towards time worked for compensation purposes.
 * @member {Boolean} is_paid
 */
BreakType.prototype['is_paid'] = undefined;

/**
 * The ID of the business location this type of break applies to.
 * @member {String} location_id
 */
BreakType.prototype['location_id'] = undefined;

/**
 * A read-only timestamp in RFC 3339 format.
 * @member {String} updated_at
 */
BreakType.prototype['updated_at'] = undefined;

/**
 * Used for resolving concurrency issues. The request fails if the version provided does not match the server version at the time of the request. If a value is not provided, Square's servers execute a \"blind\" write; potentially overwriting another writer's data.
 * @member {Number} version
 */
BreakType.prototype['version'] = undefined;






export default BreakType;

