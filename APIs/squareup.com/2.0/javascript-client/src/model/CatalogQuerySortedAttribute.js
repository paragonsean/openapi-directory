/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogQuerySortedAttribute model module.
 * @module model/CatalogQuerySortedAttribute
 * @version 2.0
 */
class CatalogQuerySortedAttribute {
    /**
     * Constructs a new <code>CatalogQuerySortedAttribute</code>.
     * The query expression to specify the key to sort search results.
     * @alias module:model/CatalogQuerySortedAttribute
     * @param attributeName {String} The attribute whose value is used as the sort key.
     */
    constructor(attributeName) { 
        
        CatalogQuerySortedAttribute.initialize(this, attributeName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributeName) { 
        obj['attribute_name'] = attributeName;
    }

    /**
     * Constructs a <code>CatalogQuerySortedAttribute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogQuerySortedAttribute} obj Optional instance to populate.
     * @return {module:model/CatalogQuerySortedAttribute} The populated <code>CatalogQuerySortedAttribute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogQuerySortedAttribute();

            if (data.hasOwnProperty('attribute_name')) {
                obj['attribute_name'] = ApiClient.convertToType(data['attribute_name'], 'String');
            }
            if (data.hasOwnProperty('initial_attribute_value')) {
                obj['initial_attribute_value'] = ApiClient.convertToType(data['initial_attribute_value'], 'String');
            }
            if (data.hasOwnProperty('sort_order')) {
                obj['sort_order'] = ApiClient.convertToType(data['sort_order'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogQuerySortedAttribute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogQuerySortedAttribute</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogQuerySortedAttribute.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['attribute_name'] && !(typeof data['attribute_name'] === 'string' || data['attribute_name'] instanceof String)) {
            throw new Error("Expected the field `attribute_name` to be a primitive type in the JSON string but got " + data['attribute_name']);
        }
        // ensure the json data is a string
        if (data['initial_attribute_value'] && !(typeof data['initial_attribute_value'] === 'string' || data['initial_attribute_value'] instanceof String)) {
            throw new Error("Expected the field `initial_attribute_value` to be a primitive type in the JSON string but got " + data['initial_attribute_value']);
        }
        // ensure the json data is a string
        if (data['sort_order'] && !(typeof data['sort_order'] === 'string' || data['sort_order'] instanceof String)) {
            throw new Error("Expected the field `sort_order` to be a primitive type in the JSON string but got " + data['sort_order']);
        }

        return true;
    }


}

CatalogQuerySortedAttribute.RequiredProperties = ["attribute_name"];

/**
 * The attribute whose value is used as the sort key.
 * @member {String} attribute_name
 */
CatalogQuerySortedAttribute.prototype['attribute_name'] = undefined;

/**
 * The first attribute value to be returned by the query. Ascending sorts will return only objects with this value or greater, while descending sorts will return only objects with this value or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).
 * @member {String} initial_attribute_value
 */
CatalogQuerySortedAttribute.prototype['initial_attribute_value'] = undefined;

/**
 * The desired sort order, `\"ASC\"` (ascending) or `\"DESC\"` (descending).
 * @member {String} sort_order
 */
CatalogQuerySortedAttribute.prototype['sort_order'] = undefined;






export default CatalogQuerySortedAttribute;

