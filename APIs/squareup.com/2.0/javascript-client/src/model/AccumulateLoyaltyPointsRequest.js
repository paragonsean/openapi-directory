/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoyaltyEventAccumulatePoints from './LoyaltyEventAccumulatePoints';

/**
 * The AccumulateLoyaltyPointsRequest model module.
 * @module model/AccumulateLoyaltyPointsRequest
 * @version 2.0
 */
class AccumulateLoyaltyPointsRequest {
    /**
     * Constructs a new <code>AccumulateLoyaltyPointsRequest</code>.
     * A request to accumulate points for a purchase.
     * @alias module:model/AccumulateLoyaltyPointsRequest
     * @param accumulatePoints {module:model/LoyaltyEventAccumulatePoints} 
     * @param idempotencyKey {String} A unique string that identifies the `AccumulateLoyaltyPoints` request.  Keys can be any valid string but must be unique for every request.
     * @param locationId {String} The [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the purchase was made.
     */
    constructor(accumulatePoints, idempotencyKey, locationId) { 
        
        AccumulateLoyaltyPointsRequest.initialize(this, accumulatePoints, idempotencyKey, locationId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accumulatePoints, idempotencyKey, locationId) { 
        obj['accumulate_points'] = accumulatePoints;
        obj['idempotency_key'] = idempotencyKey;
        obj['location_id'] = locationId;
    }

    /**
     * Constructs a <code>AccumulateLoyaltyPointsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccumulateLoyaltyPointsRequest} obj Optional instance to populate.
     * @return {module:model/AccumulateLoyaltyPointsRequest} The populated <code>AccumulateLoyaltyPointsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccumulateLoyaltyPointsRequest();

            if (data.hasOwnProperty('accumulate_points')) {
                obj['accumulate_points'] = LoyaltyEventAccumulatePoints.constructFromObject(data['accumulate_points']);
            }
            if (data.hasOwnProperty('idempotency_key')) {
                obj['idempotency_key'] = ApiClient.convertToType(data['idempotency_key'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccumulateLoyaltyPointsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccumulateLoyaltyPointsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccumulateLoyaltyPointsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `accumulate_points`
        if (data['accumulate_points']) { // data not null
          LoyaltyEventAccumulatePoints.validateJSON(data['accumulate_points']);
        }
        // ensure the json data is a string
        if (data['idempotency_key'] && !(typeof data['idempotency_key'] === 'string' || data['idempotency_key'] instanceof String)) {
            throw new Error("Expected the field `idempotency_key` to be a primitive type in the JSON string but got " + data['idempotency_key']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }

        return true;
    }


}

AccumulateLoyaltyPointsRequest.RequiredProperties = ["accumulate_points", "idempotency_key", "location_id"];

/**
 * @member {module:model/LoyaltyEventAccumulatePoints} accumulate_points
 */
AccumulateLoyaltyPointsRequest.prototype['accumulate_points'] = undefined;

/**
 * A unique string that identifies the `AccumulateLoyaltyPoints` request.  Keys can be any valid string but must be unique for every request.
 * @member {String} idempotency_key
 */
AccumulateLoyaltyPointsRequest.prototype['idempotency_key'] = undefined;

/**
 * The [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the purchase was made.
 * @member {String} location_id
 */
AccumulateLoyaltyPointsRequest.prototype['location_id'] = undefined;






export default AccumulateLoyaltyPointsRequest;

