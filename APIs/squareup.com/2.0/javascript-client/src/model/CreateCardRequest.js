/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Card from './Card';

/**
 * The CreateCardRequest model module.
 * @module model/CreateCardRequest
 * @version 2.0
 */
class CreateCardRequest {
    /**
     * Constructs a new <code>CreateCardRequest</code>.
     * Creates a card from the source (nonce, payment id, etc). Accessible via HTTP requests at POST https://connect.squareup.com/v2/cards
     * @alias module:model/CreateCardRequest
     * @param card {module:model/Card} 
     * @param idempotencyKey {String} A unique string that identifies this CreateCard request. Keys can be any valid string and must be unique for every request.  Max: 45 characters  See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
     * @param sourceId {String} The ID of the source which represents the card information to be stored. This can be a card nonce or a payment id.
     */
    constructor(card, idempotencyKey, sourceId) { 
        
        CreateCardRequest.initialize(this, card, idempotencyKey, sourceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, card, idempotencyKey, sourceId) { 
        obj['card'] = card;
        obj['idempotency_key'] = idempotencyKey;
        obj['source_id'] = sourceId;
    }

    /**
     * Constructs a <code>CreateCardRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateCardRequest} obj Optional instance to populate.
     * @return {module:model/CreateCardRequest} The populated <code>CreateCardRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateCardRequest();

            if (data.hasOwnProperty('card')) {
                obj['card'] = Card.constructFromObject(data['card']);
            }
            if (data.hasOwnProperty('idempotency_key')) {
                obj['idempotency_key'] = ApiClient.convertToType(data['idempotency_key'], 'String');
            }
            if (data.hasOwnProperty('source_id')) {
                obj['source_id'] = ApiClient.convertToType(data['source_id'], 'String');
            }
            if (data.hasOwnProperty('verification_token')) {
                obj['verification_token'] = ApiClient.convertToType(data['verification_token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateCardRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateCardRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateCardRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `card`
        if (data['card']) { // data not null
          Card.validateJSON(data['card']);
        }
        // ensure the json data is a string
        if (data['idempotency_key'] && !(typeof data['idempotency_key'] === 'string' || data['idempotency_key'] instanceof String)) {
            throw new Error("Expected the field `idempotency_key` to be a primitive type in the JSON string but got " + data['idempotency_key']);
        }
        // ensure the json data is a string
        if (data['source_id'] && !(typeof data['source_id'] === 'string' || data['source_id'] instanceof String)) {
            throw new Error("Expected the field `source_id` to be a primitive type in the JSON string but got " + data['source_id']);
        }
        // ensure the json data is a string
        if (data['verification_token'] && !(typeof data['verification_token'] === 'string' || data['verification_token'] instanceof String)) {
            throw new Error("Expected the field `verification_token` to be a primitive type in the JSON string but got " + data['verification_token']);
        }

        return true;
    }


}

CreateCardRequest.RequiredProperties = ["card", "idempotency_key", "source_id"];

/**
 * @member {module:model/Card} card
 */
CreateCardRequest.prototype['card'] = undefined;

/**
 * A unique string that identifies this CreateCard request. Keys can be any valid string and must be unique for every request.  Max: 45 characters  See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
 * @member {String} idempotency_key
 */
CreateCardRequest.prototype['idempotency_key'] = undefined;

/**
 * The ID of the source which represents the card information to be stored. This can be a card nonce or a payment id.
 * @member {String} source_id
 */
CreateCardRequest.prototype['source_id'] = undefined;

/**
 * An identifying token generated by [Payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer). Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.  See the [SCA Overview](https://developer.squareup.com/docs/sca-overview).
 * @member {String} verification_token
 */
CreateCardRequest.prototype['verification_token'] = undefined;






export default CreateCardRequest;

