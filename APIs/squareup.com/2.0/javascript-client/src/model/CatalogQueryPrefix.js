/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogQueryPrefix model module.
 * @module model/CatalogQueryPrefix
 * @version 2.0
 */
class CatalogQueryPrefix {
    /**
     * Constructs a new <code>CatalogQueryPrefix</code>.
     * The query filter to return the search result whose named attribute values are prefixed by the specified attribute value.
     * @alias module:model/CatalogQueryPrefix
     * @param attributeName {String} The name of the attribute to be searched.
     * @param attributePrefix {String} The desired prefix of the search attribute value.
     */
    constructor(attributeName, attributePrefix) { 
        
        CatalogQueryPrefix.initialize(this, attributeName, attributePrefix);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributeName, attributePrefix) { 
        obj['attribute_name'] = attributeName;
        obj['attribute_prefix'] = attributePrefix;
    }

    /**
     * Constructs a <code>CatalogQueryPrefix</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogQueryPrefix} obj Optional instance to populate.
     * @return {module:model/CatalogQueryPrefix} The populated <code>CatalogQueryPrefix</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogQueryPrefix();

            if (data.hasOwnProperty('attribute_name')) {
                obj['attribute_name'] = ApiClient.convertToType(data['attribute_name'], 'String');
            }
            if (data.hasOwnProperty('attribute_prefix')) {
                obj['attribute_prefix'] = ApiClient.convertToType(data['attribute_prefix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogQueryPrefix</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogQueryPrefix</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogQueryPrefix.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['attribute_name'] && !(typeof data['attribute_name'] === 'string' || data['attribute_name'] instanceof String)) {
            throw new Error("Expected the field `attribute_name` to be a primitive type in the JSON string but got " + data['attribute_name']);
        }
        // ensure the json data is a string
        if (data['attribute_prefix'] && !(typeof data['attribute_prefix'] === 'string' || data['attribute_prefix'] instanceof String)) {
            throw new Error("Expected the field `attribute_prefix` to be a primitive type in the JSON string but got " + data['attribute_prefix']);
        }

        return true;
    }


}

CatalogQueryPrefix.RequiredProperties = ["attribute_name", "attribute_prefix"];

/**
 * The name of the attribute to be searched.
 * @member {String} attribute_name
 */
CatalogQueryPrefix.prototype['attribute_name'] = undefined;

/**
 * The desired prefix of the search attribute value.
 * @member {String} attribute_prefix
 */
CatalogQueryPrefix.prototype['attribute_prefix'] = undefined;






export default CatalogQueryPrefix;

