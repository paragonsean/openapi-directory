/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogObject from './CatalogObject';

/**
 * The CatalogModifierList model module.
 * @module model/CatalogModifierList
 * @version 2.0
 */
class CatalogModifierList {
    /**
     * Constructs a new <code>CatalogModifierList</code>.
     * A list of modifiers applicable to items at the time of sale.  For example, a \&quot;Condiments\&quot; modifier list applicable to a \&quot;Hot Dog\&quot; item may contain \&quot;Ketchup\&quot;, \&quot;Mustard\&quot;, and \&quot;Relish\&quot; modifiers. Use the &#x60;selection_type&#x60; field to specify whether or not multiple selections from the modifier list are allowed.
     * @alias module:model/CatalogModifierList
     */
    constructor() { 
        
        CatalogModifierList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogModifierList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogModifierList} obj Optional instance to populate.
     * @return {module:model/CatalogModifierList} The populated <code>CatalogModifierList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogModifierList();

            if (data.hasOwnProperty('modifiers')) {
                obj['modifiers'] = ApiClient.convertToType(data['modifiers'], [CatalogObject]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ordinal')) {
                obj['ordinal'] = ApiClient.convertToType(data['ordinal'], 'Number');
            }
            if (data.hasOwnProperty('selection_type')) {
                obj['selection_type'] = ApiClient.convertToType(data['selection_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogModifierList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogModifierList</code>.
     */
    static validateJSON(data) {
        if (data['modifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['modifiers'])) {
                throw new Error("Expected the field `modifiers` to be an array in the JSON data but got " + data['modifiers']);
            }
            // validate the optional field `modifiers` (array)
            for (const item of data['modifiers']) {
                CatalogObject.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['selection_type'] && !(typeof data['selection_type'] === 'string' || data['selection_type'] instanceof String)) {
            throw new Error("Expected the field `selection_type` to be a primitive type in the JSON string but got " + data['selection_type']);
        }

        return true;
    }


}



/**
 * The options included in the `CatalogModifierList`. You must include at least one `CatalogModifier`. Each CatalogObject must have type `MODIFIER` and contain `CatalogModifier` data.
 * @member {Array.<module:model/CatalogObject>} modifiers
 */
CatalogModifierList.prototype['modifiers'] = undefined;

/**
 * The name for the `CatalogModifierList` instance. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
 * @member {String} name
 */
CatalogModifierList.prototype['name'] = undefined;

/**
 * Determines where this modifier list appears in a list of `CatalogModifierList` values.
 * @member {Number} ordinal
 */
CatalogModifierList.prototype['ordinal'] = undefined;

/**
 * Indicates whether multiple options from the modifier list can be applied to a single `CatalogItem`.
 * @member {String} selection_type
 */
CatalogModifierList.prototype['selection_type'] = undefined;






export default CatalogModifierList;

