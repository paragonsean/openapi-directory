/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DisputedPayment from './DisputedPayment';
import Money from './Money';

/**
 * The Dispute model module.
 * @module model/Dispute
 * @version 2.0
 */
class Dispute {
    /**
     * Constructs a new <code>Dispute</code>.
     * Represents a dispute a cardholder initiated with their bank.
     * @alias module:model/Dispute
     */
    constructor() { 
        
        Dispute.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Dispute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dispute} obj Optional instance to populate.
     * @return {module:model/Dispute} The populated <code>Dispute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dispute();

            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('brand_dispute_id')) {
                obj['brand_dispute_id'] = ApiClient.convertToType(data['brand_dispute_id'], 'String');
            }
            if (data.hasOwnProperty('card_brand')) {
                obj['card_brand'] = ApiClient.convertToType(data['card_brand'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('dispute_id')) {
                obj['dispute_id'] = ApiClient.convertToType(data['dispute_id'], 'String');
            }
            if (data.hasOwnProperty('disputed_payment')) {
                obj['disputed_payment'] = DisputedPayment.constructFromObject(data['disputed_payment']);
            }
            if (data.hasOwnProperty('due_at')) {
                obj['due_at'] = ApiClient.convertToType(data['due_at'], 'String');
            }
            if (data.hasOwnProperty('evidence_ids')) {
                obj['evidence_ids'] = ApiClient.convertToType(data['evidence_ids'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('reported_at')) {
                obj['reported_at'] = ApiClient.convertToType(data['reported_at'], 'String');
            }
            if (data.hasOwnProperty('reported_date')) {
                obj['reported_date'] = ApiClient.convertToType(data['reported_date'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dispute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dispute</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          Money.validateJSON(data['amount_money']);
        }
        // ensure the json data is a string
        if (data['brand_dispute_id'] && !(typeof data['brand_dispute_id'] === 'string' || data['brand_dispute_id'] instanceof String)) {
            throw new Error("Expected the field `brand_dispute_id` to be a primitive type in the JSON string but got " + data['brand_dispute_id']);
        }
        // ensure the json data is a string
        if (data['card_brand'] && !(typeof data['card_brand'] === 'string' || data['card_brand'] instanceof String)) {
            throw new Error("Expected the field `card_brand` to be a primitive type in the JSON string but got " + data['card_brand']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['dispute_id'] && !(typeof data['dispute_id'] === 'string' || data['dispute_id'] instanceof String)) {
            throw new Error("Expected the field `dispute_id` to be a primitive type in the JSON string but got " + data['dispute_id']);
        }
        // validate the optional field `disputed_payment`
        if (data['disputed_payment']) { // data not null
          DisputedPayment.validateJSON(data['disputed_payment']);
        }
        // ensure the json data is a string
        if (data['due_at'] && !(typeof data['due_at'] === 'string' || data['due_at'] instanceof String)) {
            throw new Error("Expected the field `due_at` to be a primitive type in the JSON string but got " + data['due_at']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['evidence_ids'])) {
            throw new Error("Expected the field `evidence_ids` to be an array in the JSON data but got " + data['evidence_ids']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['reported_at'] && !(typeof data['reported_at'] === 'string' || data['reported_at'] instanceof String)) {
            throw new Error("Expected the field `reported_at` to be a primitive type in the JSON string but got " + data['reported_at']);
        }
        // ensure the json data is a string
        if (data['reported_date'] && !(typeof data['reported_date'] === 'string' || data['reported_date'] instanceof String)) {
            throw new Error("Expected the field `reported_date` to be a primitive type in the JSON string but got " + data['reported_date']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * @member {module:model/Money} amount_money
 */
Dispute.prototype['amount_money'] = undefined;

/**
 * The ID of the dispute in the card brand system, generated by the card brand.
 * @member {String} brand_dispute_id
 */
Dispute.prototype['brand_dispute_id'] = undefined;

/**
 * The card brand used in the disputed payment.
 * @member {String} card_brand
 */
Dispute.prototype['card_brand'] = undefined;

/**
 * The timestamp when the dispute was created, in RFC 3339 format.
 * @member {String} created_at
 */
Dispute.prototype['created_at'] = undefined;

/**
 * The unique ID for this `Dispute`, generated by Square.
 * @member {String} dispute_id
 */
Dispute.prototype['dispute_id'] = undefined;

/**
 * @member {module:model/DisputedPayment} disputed_payment
 */
Dispute.prototype['disputed_payment'] = undefined;

/**
 * The time when the next action is due, in RFC 3339 format.
 * @member {String} due_at
 */
Dispute.prototype['due_at'] = undefined;

/**
 * The IDs of the evidence associated with the dispute.
 * @member {Array.<String>} evidence_ids
 */
Dispute.prototype['evidence_ids'] = undefined;

/**
 * The unique ID for this `Dispute`, generated by Square.
 * @member {String} id
 */
Dispute.prototype['id'] = undefined;

/**
 * The ID of the location where the dispute originated.
 * @member {String} location_id
 */
Dispute.prototype['location_id'] = undefined;

/**
 * The dispute reason why the cardholder initiated the dispute with their bank.
 * @member {String} reason
 */
Dispute.prototype['reason'] = undefined;

/**
 * The timestamp when the dispute was reported, in RFC 3339 format.
 * @member {String} reported_at
 */
Dispute.prototype['reported_at'] = undefined;

/**
 * The timestamp when the dispute was reported, in RFC 3339 format.
 * @member {String} reported_date
 */
Dispute.prototype['reported_date'] = undefined;

/**
 * The current state of this dispute.
 * @member {String} state
 */
Dispute.prototype['state'] = undefined;

/**
 * The timestamp when the dispute was last updated, in RFC 3339 format.
 * @member {String} updated_at
 */
Dispute.prototype['updated_at'] = undefined;

/**
 * The current version of the `Dispute`.
 * @member {Number} version
 */
Dispute.prototype['version'] = undefined;






export default Dispute;

