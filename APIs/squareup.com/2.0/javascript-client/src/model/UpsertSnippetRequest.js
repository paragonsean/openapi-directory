/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Snippet from './Snippet';

/**
 * The UpsertSnippetRequest model module.
 * @module model/UpsertSnippetRequest
 * @version 2.0
 */
class UpsertSnippetRequest {
    /**
     * Constructs a new <code>UpsertSnippetRequest</code>.
     * Represents an &#x60;UpsertSnippet&#x60; request.
     * @alias module:model/UpsertSnippetRequest
     * @param snippet {module:model/Snippet} 
     */
    constructor(snippet) { 
        
        UpsertSnippetRequest.initialize(this, snippet);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, snippet) { 
        obj['snippet'] = snippet;
    }

    /**
     * Constructs a <code>UpsertSnippetRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpsertSnippetRequest} obj Optional instance to populate.
     * @return {module:model/UpsertSnippetRequest} The populated <code>UpsertSnippetRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpsertSnippetRequest();

            if (data.hasOwnProperty('snippet')) {
                obj['snippet'] = Snippet.constructFromObject(data['snippet']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpsertSnippetRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpsertSnippetRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpsertSnippetRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `snippet`
        if (data['snippet']) { // data not null
          Snippet.validateJSON(data['snippet']);
        }

        return true;
    }


}

UpsertSnippetRequest.RequiredProperties = ["snippet"];

/**
 * @member {module:model/Snippet} snippet
 */
UpsertSnippetRequest.prototype['snippet'] = undefined;






export default UpsertSnippetRequest;

