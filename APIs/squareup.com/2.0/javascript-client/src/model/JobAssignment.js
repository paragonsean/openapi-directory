/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The JobAssignment model module.
 * @module model/JobAssignment
 * @version 2.0
 */
class JobAssignment {
    /**
     * Constructs a new <code>JobAssignment</code>.
     * An object describing a job that a team member is assigned to.
     * @alias module:model/JobAssignment
     * @param jobTitle {String} The title of the job.
     * @param payType {String} The current pay type for the job assignment used to calculate the pay amount in a pay period.
     */
    constructor(jobTitle, payType) { 
        
        JobAssignment.initialize(this, jobTitle, payType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, jobTitle, payType) { 
        obj['job_title'] = jobTitle;
        obj['pay_type'] = payType;
    }

    /**
     * Constructs a <code>JobAssignment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobAssignment} obj Optional instance to populate.
     * @return {module:model/JobAssignment} The populated <code>JobAssignment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobAssignment();

            if (data.hasOwnProperty('annual_rate')) {
                obj['annual_rate'] = Money.constructFromObject(data['annual_rate']);
            }
            if (data.hasOwnProperty('hourly_rate')) {
                obj['hourly_rate'] = Money.constructFromObject(data['hourly_rate']);
            }
            if (data.hasOwnProperty('job_title')) {
                obj['job_title'] = ApiClient.convertToType(data['job_title'], 'String');
            }
            if (data.hasOwnProperty('pay_type')) {
                obj['pay_type'] = ApiClient.convertToType(data['pay_type'], 'String');
            }
            if (data.hasOwnProperty('weekly_hours')) {
                obj['weekly_hours'] = ApiClient.convertToType(data['weekly_hours'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobAssignment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobAssignment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobAssignment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `annual_rate`
        if (data['annual_rate']) { // data not null
          Money.validateJSON(data['annual_rate']);
        }
        // validate the optional field `hourly_rate`
        if (data['hourly_rate']) { // data not null
          Money.validateJSON(data['hourly_rate']);
        }
        // ensure the json data is a string
        if (data['job_title'] && !(typeof data['job_title'] === 'string' || data['job_title'] instanceof String)) {
            throw new Error("Expected the field `job_title` to be a primitive type in the JSON string but got " + data['job_title']);
        }
        // ensure the json data is a string
        if (data['pay_type'] && !(typeof data['pay_type'] === 'string' || data['pay_type'] instanceof String)) {
            throw new Error("Expected the field `pay_type` to be a primitive type in the JSON string but got " + data['pay_type']);
        }

        return true;
    }


}

JobAssignment.RequiredProperties = ["job_title", "pay_type"];

/**
 * @member {module:model/Money} annual_rate
 */
JobAssignment.prototype['annual_rate'] = undefined;

/**
 * @member {module:model/Money} hourly_rate
 */
JobAssignment.prototype['hourly_rate'] = undefined;

/**
 * The title of the job.
 * @member {String} job_title
 */
JobAssignment.prototype['job_title'] = undefined;

/**
 * The current pay type for the job assignment used to calculate the pay amount in a pay period.
 * @member {String} pay_type
 */
JobAssignment.prototype['pay_type'] = undefined;

/**
 * The planned hours per week for the job. Set if the job `PayType` is `SALARY`.
 * @member {Number} weekly_hours
 */
JobAssignment.prototype['weekly_hours'] = undefined;






export default JobAssignment;

