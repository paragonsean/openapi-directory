/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MeasurementUnitCustom model module.
 * @module model/MeasurementUnitCustom
 * @version 2.0
 */
class MeasurementUnitCustom {
    /**
     * Constructs a new <code>MeasurementUnitCustom</code>.
     * The information needed to define a custom unit, provided by the seller.
     * @alias module:model/MeasurementUnitCustom
     * @param abbreviation {String} The abbreviation of the custom unit, such as \"bsh\" (bushel). This appears in the cart for the Point of Sale app, and in reports.
     * @param name {String} The name of the custom unit, for example \"bushel\".
     */
    constructor(abbreviation, name) { 
        
        MeasurementUnitCustom.initialize(this, abbreviation, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, abbreviation, name) { 
        obj['abbreviation'] = abbreviation;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>MeasurementUnitCustom</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MeasurementUnitCustom} obj Optional instance to populate.
     * @return {module:model/MeasurementUnitCustom} The populated <code>MeasurementUnitCustom</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MeasurementUnitCustom();

            if (data.hasOwnProperty('abbreviation')) {
                obj['abbreviation'] = ApiClient.convertToType(data['abbreviation'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MeasurementUnitCustom</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MeasurementUnitCustom</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MeasurementUnitCustom.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['abbreviation'] && !(typeof data['abbreviation'] === 'string' || data['abbreviation'] instanceof String)) {
            throw new Error("Expected the field `abbreviation` to be a primitive type in the JSON string but got " + data['abbreviation']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

MeasurementUnitCustom.RequiredProperties = ["abbreviation", "name"];

/**
 * The abbreviation of the custom unit, such as \"bsh\" (bushel). This appears in the cart for the Point of Sale app, and in reports.
 * @member {String} abbreviation
 */
MeasurementUnitCustom.prototype['abbreviation'] = undefined;

/**
 * The name of the custom unit, for example \"bushel\".
 * @member {String} name
 */
MeasurementUnitCustom.prototype['name'] = undefined;






export default MeasurementUnitCustom;

