/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderMoneyAmounts from './OrderMoneyAmounts';
import OrderReturnDiscount from './OrderReturnDiscount';
import OrderReturnLineItem from './OrderReturnLineItem';
import OrderReturnServiceCharge from './OrderReturnServiceCharge';
import OrderReturnTax from './OrderReturnTax';
import OrderRoundingAdjustment from './OrderRoundingAdjustment';

/**
 * The OrderReturn model module.
 * @module model/OrderReturn
 * @version 2.0
 */
class OrderReturn {
    /**
     * Constructs a new <code>OrderReturn</code>.
     * The set of line items, service charges, taxes, discounts, tips, and other items being returned in an order.
     * @alias module:model/OrderReturn
     */
    constructor() { 
        
        OrderReturn.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderReturn</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderReturn} obj Optional instance to populate.
     * @return {module:model/OrderReturn} The populated <code>OrderReturn</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderReturn();

            if (data.hasOwnProperty('return_amounts')) {
                obj['return_amounts'] = OrderMoneyAmounts.constructFromObject(data['return_amounts']);
            }
            if (data.hasOwnProperty('return_discounts')) {
                obj['return_discounts'] = ApiClient.convertToType(data['return_discounts'], [OrderReturnDiscount]);
            }
            if (data.hasOwnProperty('return_line_items')) {
                obj['return_line_items'] = ApiClient.convertToType(data['return_line_items'], [OrderReturnLineItem]);
            }
            if (data.hasOwnProperty('return_service_charges')) {
                obj['return_service_charges'] = ApiClient.convertToType(data['return_service_charges'], [OrderReturnServiceCharge]);
            }
            if (data.hasOwnProperty('return_taxes')) {
                obj['return_taxes'] = ApiClient.convertToType(data['return_taxes'], [OrderReturnTax]);
            }
            if (data.hasOwnProperty('rounding_adjustment')) {
                obj['rounding_adjustment'] = OrderRoundingAdjustment.constructFromObject(data['rounding_adjustment']);
            }
            if (data.hasOwnProperty('source_order_id')) {
                obj['source_order_id'] = ApiClient.convertToType(data['source_order_id'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderReturn</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderReturn</code>.
     */
    static validateJSON(data) {
        // validate the optional field `return_amounts`
        if (data['return_amounts']) { // data not null
          OrderMoneyAmounts.validateJSON(data['return_amounts']);
        }
        if (data['return_discounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['return_discounts'])) {
                throw new Error("Expected the field `return_discounts` to be an array in the JSON data but got " + data['return_discounts']);
            }
            // validate the optional field `return_discounts` (array)
            for (const item of data['return_discounts']) {
                OrderReturnDiscount.validateJSON(item);
            };
        }
        if (data['return_line_items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['return_line_items'])) {
                throw new Error("Expected the field `return_line_items` to be an array in the JSON data but got " + data['return_line_items']);
            }
            // validate the optional field `return_line_items` (array)
            for (const item of data['return_line_items']) {
                OrderReturnLineItem.validateJSON(item);
            };
        }
        if (data['return_service_charges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['return_service_charges'])) {
                throw new Error("Expected the field `return_service_charges` to be an array in the JSON data but got " + data['return_service_charges']);
            }
            // validate the optional field `return_service_charges` (array)
            for (const item of data['return_service_charges']) {
                OrderReturnServiceCharge.validateJSON(item);
            };
        }
        if (data['return_taxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['return_taxes'])) {
                throw new Error("Expected the field `return_taxes` to be an array in the JSON data but got " + data['return_taxes']);
            }
            // validate the optional field `return_taxes` (array)
            for (const item of data['return_taxes']) {
                OrderReturnTax.validateJSON(item);
            };
        }
        // validate the optional field `rounding_adjustment`
        if (data['rounding_adjustment']) { // data not null
          OrderRoundingAdjustment.validateJSON(data['rounding_adjustment']);
        }
        // ensure the json data is a string
        if (data['source_order_id'] && !(typeof data['source_order_id'] === 'string' || data['source_order_id'] instanceof String)) {
            throw new Error("Expected the field `source_order_id` to be a primitive type in the JSON string but got " + data['source_order_id']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * @member {module:model/OrderMoneyAmounts} return_amounts
 */
OrderReturn.prototype['return_amounts'] = undefined;

/**
 * A collection of references to discounts being returned for an order, including the total applied discount amount to be returned. The discounts must reference a top-level discount ID from the source order.
 * @member {Array.<module:model/OrderReturnDiscount>} return_discounts
 */
OrderReturn.prototype['return_discounts'] = undefined;

/**
 * A collection of line items that are being returned.
 * @member {Array.<module:model/OrderReturnLineItem>} return_line_items
 */
OrderReturn.prototype['return_line_items'] = undefined;

/**
 * A collection of service charges that are being returned.
 * @member {Array.<module:model/OrderReturnServiceCharge>} return_service_charges
 */
OrderReturn.prototype['return_service_charges'] = undefined;

/**
 * A collection of references to taxes being returned for an order, including the total applied tax amount to be returned. The taxes must reference a top-level tax ID from the source order.
 * @member {Array.<module:model/OrderReturnTax>} return_taxes
 */
OrderReturn.prototype['return_taxes'] = undefined;

/**
 * @member {module:model/OrderRoundingAdjustment} rounding_adjustment
 */
OrderReturn.prototype['rounding_adjustment'] = undefined;

/**
 * An order that contains the original sale of these return line items. This is unset for unlinked returns.
 * @member {String} source_order_id
 */
OrderReturn.prototype['source_order_id'] = undefined;

/**
 * A unique ID that identifies the return only within this order.
 * @member {String} uid
 */
OrderReturn.prototype['uid'] = undefined;






export default OrderReturn;

