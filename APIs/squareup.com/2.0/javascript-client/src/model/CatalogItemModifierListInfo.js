/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogModifierOverride from './CatalogModifierOverride';

/**
 * The CatalogItemModifierListInfo model module.
 * @module model/CatalogItemModifierListInfo
 * @version 2.0
 */
class CatalogItemModifierListInfo {
    /**
     * Constructs a new <code>CatalogItemModifierListInfo</code>.
     * Options to control the properties of a &#x60;CatalogModifierList&#x60; applied to a &#x60;CatalogItem&#x60; instance.
     * @alias module:model/CatalogItemModifierListInfo
     * @param modifierListId {String} The ID of the `CatalogModifierList` controlled by this `CatalogModifierListInfo`.
     */
    constructor(modifierListId) { 
        
        CatalogItemModifierListInfo.initialize(this, modifierListId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, modifierListId) { 
        obj['modifier_list_id'] = modifierListId;
    }

    /**
     * Constructs a <code>CatalogItemModifierListInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogItemModifierListInfo} obj Optional instance to populate.
     * @return {module:model/CatalogItemModifierListInfo} The populated <code>CatalogItemModifierListInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogItemModifierListInfo();

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('max_selected_modifiers')) {
                obj['max_selected_modifiers'] = ApiClient.convertToType(data['max_selected_modifiers'], 'Number');
            }
            if (data.hasOwnProperty('min_selected_modifiers')) {
                obj['min_selected_modifiers'] = ApiClient.convertToType(data['min_selected_modifiers'], 'Number');
            }
            if (data.hasOwnProperty('modifier_list_id')) {
                obj['modifier_list_id'] = ApiClient.convertToType(data['modifier_list_id'], 'String');
            }
            if (data.hasOwnProperty('modifier_overrides')) {
                obj['modifier_overrides'] = ApiClient.convertToType(data['modifier_overrides'], [CatalogModifierOverride]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogItemModifierListInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogItemModifierListInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogItemModifierListInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['modifier_list_id'] && !(typeof data['modifier_list_id'] === 'string' || data['modifier_list_id'] instanceof String)) {
            throw new Error("Expected the field `modifier_list_id` to be a primitive type in the JSON string but got " + data['modifier_list_id']);
        }
        if (data['modifier_overrides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['modifier_overrides'])) {
                throw new Error("Expected the field `modifier_overrides` to be an array in the JSON data but got " + data['modifier_overrides']);
            }
            // validate the optional field `modifier_overrides` (array)
            for (const item of data['modifier_overrides']) {
                CatalogModifierOverride.validateJSON(item);
            };
        }

        return true;
    }


}

CatalogItemModifierListInfo.RequiredProperties = ["modifier_list_id"];

/**
 * If `true`, enable this `CatalogModifierList`. The default value is `true`.
 * @member {Boolean} enabled
 */
CatalogItemModifierListInfo.prototype['enabled'] = undefined;

/**
 * If 0 or larger, the largest number of `CatalogModifier`s that can be selected from this `CatalogModifierList`.
 * @member {Number} max_selected_modifiers
 */
CatalogItemModifierListInfo.prototype['max_selected_modifiers'] = undefined;

/**
 * If 0 or larger, the smallest number of `CatalogModifier`s that must be selected from this `CatalogModifierList`.
 * @member {Number} min_selected_modifiers
 */
CatalogItemModifierListInfo.prototype['min_selected_modifiers'] = undefined;

/**
 * The ID of the `CatalogModifierList` controlled by this `CatalogModifierListInfo`.
 * @member {String} modifier_list_id
 */
CatalogItemModifierListInfo.prototype['modifier_list_id'] = undefined;

/**
 * A set of `CatalogModifierOverride` objects that override whether a given `CatalogModifier` is enabled by default.
 * @member {Array.<module:model/CatalogModifierOverride>} modifier_overrides
 */
CatalogItemModifierListInfo.prototype['modifier_overrides'] = undefined;






export default CatalogItemModifierListInfo;

