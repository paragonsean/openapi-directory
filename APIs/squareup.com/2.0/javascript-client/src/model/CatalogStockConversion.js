/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogStockConversion model module.
 * @module model/CatalogStockConversion
 * @version 2.0
 */
class CatalogStockConversion {
    /**
     * Constructs a new <code>CatalogStockConversion</code>.
     * Represents the rule of conversion between a stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) and a non-stockable sell-by or receive-by &#x60;CatalogItemVariation&#x60; that share the same underlying stock.
     * @alias module:model/CatalogStockConversion
     * @param nonstockableQuantity {String} The converted equivalent quantity of the non-stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)  in its measurement unit. The `stockable_quantity` value and this `nonstockable_quantity` value together define the conversion ratio between stockable item variation and the non-stockable item variation. It accepts a decimal number in a string format that can take up to 10 digits before the decimal point and up to 5 digits after the decimal point.
     * @param stockableItemVariationId {String} References to the stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) for this stock conversion. Selling, receiving or recounting the non-stockable `CatalogItemVariation`  defined with a stock conversion results in adjustments of this stockable `CatalogItemVariation`. This immutable field must reference a stockable `CatalogItemVariation` that shares the parent [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) of the converted `CatalogItemVariation.`
     * @param stockableQuantity {String} The quantity of the stockable item variation (as identified by `stockable_item_variation_id`)  equivalent to the non-stockable item variation quantity (as specified in `nonstockable_quantity`)  as defined by this stock conversion.  It accepts a decimal number in a string format that can take up to 10 digits before the decimal point and up to 5 digits after the decimal point.
     */
    constructor(nonstockableQuantity, stockableItemVariationId, stockableQuantity) { 
        
        CatalogStockConversion.initialize(this, nonstockableQuantity, stockableItemVariationId, stockableQuantity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nonstockableQuantity, stockableItemVariationId, stockableQuantity) { 
        obj['nonstockable_quantity'] = nonstockableQuantity;
        obj['stockable_item_variation_id'] = stockableItemVariationId;
        obj['stockable_quantity'] = stockableQuantity;
    }

    /**
     * Constructs a <code>CatalogStockConversion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogStockConversion} obj Optional instance to populate.
     * @return {module:model/CatalogStockConversion} The populated <code>CatalogStockConversion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogStockConversion();

            if (data.hasOwnProperty('nonstockable_quantity')) {
                obj['nonstockable_quantity'] = ApiClient.convertToType(data['nonstockable_quantity'], 'String');
            }
            if (data.hasOwnProperty('stockable_item_variation_id')) {
                obj['stockable_item_variation_id'] = ApiClient.convertToType(data['stockable_item_variation_id'], 'String');
            }
            if (data.hasOwnProperty('stockable_quantity')) {
                obj['stockable_quantity'] = ApiClient.convertToType(data['stockable_quantity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogStockConversion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogStockConversion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogStockConversion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['nonstockable_quantity'] && !(typeof data['nonstockable_quantity'] === 'string' || data['nonstockable_quantity'] instanceof String)) {
            throw new Error("Expected the field `nonstockable_quantity` to be a primitive type in the JSON string but got " + data['nonstockable_quantity']);
        }
        // ensure the json data is a string
        if (data['stockable_item_variation_id'] && !(typeof data['stockable_item_variation_id'] === 'string' || data['stockable_item_variation_id'] instanceof String)) {
            throw new Error("Expected the field `stockable_item_variation_id` to be a primitive type in the JSON string but got " + data['stockable_item_variation_id']);
        }
        // ensure the json data is a string
        if (data['stockable_quantity'] && !(typeof data['stockable_quantity'] === 'string' || data['stockable_quantity'] instanceof String)) {
            throw new Error("Expected the field `stockable_quantity` to be a primitive type in the JSON string but got " + data['stockable_quantity']);
        }

        return true;
    }


}

CatalogStockConversion.RequiredProperties = ["nonstockable_quantity", "stockable_item_variation_id", "stockable_quantity"];

/**
 * The converted equivalent quantity of the non-stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)  in its measurement unit. The `stockable_quantity` value and this `nonstockable_quantity` value together define the conversion ratio between stockable item variation and the non-stockable item variation. It accepts a decimal number in a string format that can take up to 10 digits before the decimal point and up to 5 digits after the decimal point.
 * @member {String} nonstockable_quantity
 */
CatalogStockConversion.prototype['nonstockable_quantity'] = undefined;

/**
 * References to the stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) for this stock conversion. Selling, receiving or recounting the non-stockable `CatalogItemVariation`  defined with a stock conversion results in adjustments of this stockable `CatalogItemVariation`. This immutable field must reference a stockable `CatalogItemVariation` that shares the parent [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) of the converted `CatalogItemVariation.`
 * @member {String} stockable_item_variation_id
 */
CatalogStockConversion.prototype['stockable_item_variation_id'] = undefined;

/**
 * The quantity of the stockable item variation (as identified by `stockable_item_variation_id`)  equivalent to the non-stockable item variation quantity (as specified in `nonstockable_quantity`)  as defined by this stock conversion.  It accepts a decimal number in a string format that can take up to 10 digits before the decimal point and up to 5 digits after the decimal point.
 * @member {String} stockable_quantity
 */
CatalogStockConversion.prototype['stockable_quantity'] = undefined;






export default CatalogStockConversion;

