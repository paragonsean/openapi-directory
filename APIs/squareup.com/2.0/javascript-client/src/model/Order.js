/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';
import OrderFulfillment from './OrderFulfillment';
import OrderLineItem from './OrderLineItem';
import OrderLineItemDiscount from './OrderLineItemDiscount';
import OrderLineItemTax from './OrderLineItemTax';
import OrderMoneyAmounts from './OrderMoneyAmounts';
import OrderPricingOptions from './OrderPricingOptions';
import OrderReturn from './OrderReturn';
import OrderReward from './OrderReward';
import OrderRoundingAdjustment from './OrderRoundingAdjustment';
import OrderServiceCharge from './OrderServiceCharge';
import OrderSource from './OrderSource';
import Refund from './Refund';
import Tender from './Tender';

/**
 * The Order model module.
 * @module model/Order
 * @version 2.0
 */
class Order {
    /**
     * Constructs a new <code>Order</code>.
     * Contains all information related to a single order to process with Square, including line items that specify the products to purchase. &#x60;Order&#x60; objects also include information about any associated tenders, refunds, and returns.  All Connect V2 Transactions have all been converted to Orders including all associated itemization data.
     * @alias module:model/Order
     * @param locationId {String} The ID of the seller location that this order is associated with.
     */
    constructor(locationId) { 
        
        Order.initialize(this, locationId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, locationId) { 
        obj['location_id'] = locationId;
    }

    /**
     * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Order} obj Optional instance to populate.
     * @return {module:model/Order} The populated <code>Order</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Order();

            if (data.hasOwnProperty('closed_at')) {
                obj['closed_at'] = ApiClient.convertToType(data['closed_at'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('discounts')) {
                obj['discounts'] = ApiClient.convertToType(data['discounts'], [OrderLineItemDiscount]);
            }
            if (data.hasOwnProperty('fulfillments')) {
                obj['fulfillments'] = ApiClient.convertToType(data['fulfillments'], [OrderFulfillment]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('line_items')) {
                obj['line_items'] = ApiClient.convertToType(data['line_items'], [OrderLineItem]);
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('net_amounts')) {
                obj['net_amounts'] = OrderMoneyAmounts.constructFromObject(data['net_amounts']);
            }
            if (data.hasOwnProperty('pricing_options')) {
                obj['pricing_options'] = OrderPricingOptions.constructFromObject(data['pricing_options']);
            }
            if (data.hasOwnProperty('reference_id')) {
                obj['reference_id'] = ApiClient.convertToType(data['reference_id'], 'String');
            }
            if (data.hasOwnProperty('refunds')) {
                obj['refunds'] = ApiClient.convertToType(data['refunds'], [Refund]);
            }
            if (data.hasOwnProperty('return_amounts')) {
                obj['return_amounts'] = OrderMoneyAmounts.constructFromObject(data['return_amounts']);
            }
            if (data.hasOwnProperty('returns')) {
                obj['returns'] = ApiClient.convertToType(data['returns'], [OrderReturn]);
            }
            if (data.hasOwnProperty('rewards')) {
                obj['rewards'] = ApiClient.convertToType(data['rewards'], [OrderReward]);
            }
            if (data.hasOwnProperty('rounding_adjustment')) {
                obj['rounding_adjustment'] = OrderRoundingAdjustment.constructFromObject(data['rounding_adjustment']);
            }
            if (data.hasOwnProperty('service_charges')) {
                obj['service_charges'] = ApiClient.convertToType(data['service_charges'], [OrderServiceCharge]);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = OrderSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('taxes')) {
                obj['taxes'] = ApiClient.convertToType(data['taxes'], [OrderLineItemTax]);
            }
            if (data.hasOwnProperty('tenders')) {
                obj['tenders'] = ApiClient.convertToType(data['tenders'], [Tender]);
            }
            if (data.hasOwnProperty('total_discount_money')) {
                obj['total_discount_money'] = Money.constructFromObject(data['total_discount_money']);
            }
            if (data.hasOwnProperty('total_money')) {
                obj['total_money'] = Money.constructFromObject(data['total_money']);
            }
            if (data.hasOwnProperty('total_service_charge_money')) {
                obj['total_service_charge_money'] = Money.constructFromObject(data['total_service_charge_money']);
            }
            if (data.hasOwnProperty('total_tax_money')) {
                obj['total_tax_money'] = Money.constructFromObject(data['total_tax_money']);
            }
            if (data.hasOwnProperty('total_tip_money')) {
                obj['total_tip_money'] = Money.constructFromObject(data['total_tip_money']);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Order</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Order</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Order.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['closed_at'] && !(typeof data['closed_at'] === 'string' || data['closed_at'] instanceof String)) {
            throw new Error("Expected the field `closed_at` to be a primitive type in the JSON string but got " + data['closed_at']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        if (data['discounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['discounts'])) {
                throw new Error("Expected the field `discounts` to be an array in the JSON data but got " + data['discounts']);
            }
            // validate the optional field `discounts` (array)
            for (const item of data['discounts']) {
                OrderLineItemDiscount.validateJSON(item);
            };
        }
        if (data['fulfillments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fulfillments'])) {
                throw new Error("Expected the field `fulfillments` to be an array in the JSON data but got " + data['fulfillments']);
            }
            // validate the optional field `fulfillments` (array)
            for (const item of data['fulfillments']) {
                OrderFulfillment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['line_items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['line_items'])) {
                throw new Error("Expected the field `line_items` to be an array in the JSON data but got " + data['line_items']);
            }
            // validate the optional field `line_items` (array)
            for (const item of data['line_items']) {
                OrderLineItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // validate the optional field `net_amounts`
        if (data['net_amounts']) { // data not null
          OrderMoneyAmounts.validateJSON(data['net_amounts']);
        }
        // validate the optional field `pricing_options`
        if (data['pricing_options']) { // data not null
          OrderPricingOptions.validateJSON(data['pricing_options']);
        }
        // ensure the json data is a string
        if (data['reference_id'] && !(typeof data['reference_id'] === 'string' || data['reference_id'] instanceof String)) {
            throw new Error("Expected the field `reference_id` to be a primitive type in the JSON string but got " + data['reference_id']);
        }
        if (data['refunds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['refunds'])) {
                throw new Error("Expected the field `refunds` to be an array in the JSON data but got " + data['refunds']);
            }
            // validate the optional field `refunds` (array)
            for (const item of data['refunds']) {
                Refund.validateJSON(item);
            };
        }
        // validate the optional field `return_amounts`
        if (data['return_amounts']) { // data not null
          OrderMoneyAmounts.validateJSON(data['return_amounts']);
        }
        if (data['returns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['returns'])) {
                throw new Error("Expected the field `returns` to be an array in the JSON data but got " + data['returns']);
            }
            // validate the optional field `returns` (array)
            for (const item of data['returns']) {
                OrderReturn.validateJSON(item);
            };
        }
        if (data['rewards']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rewards'])) {
                throw new Error("Expected the field `rewards` to be an array in the JSON data but got " + data['rewards']);
            }
            // validate the optional field `rewards` (array)
            for (const item of data['rewards']) {
                OrderReward.validateJSON(item);
            };
        }
        // validate the optional field `rounding_adjustment`
        if (data['rounding_adjustment']) { // data not null
          OrderRoundingAdjustment.validateJSON(data['rounding_adjustment']);
        }
        if (data['service_charges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['service_charges'])) {
                throw new Error("Expected the field `service_charges` to be an array in the JSON data but got " + data['service_charges']);
            }
            // validate the optional field `service_charges` (array)
            for (const item of data['service_charges']) {
                OrderServiceCharge.validateJSON(item);
            };
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          OrderSource.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['taxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taxes'])) {
                throw new Error("Expected the field `taxes` to be an array in the JSON data but got " + data['taxes']);
            }
            // validate the optional field `taxes` (array)
            for (const item of data['taxes']) {
                OrderLineItemTax.validateJSON(item);
            };
        }
        if (data['tenders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tenders'])) {
                throw new Error("Expected the field `tenders` to be an array in the JSON data but got " + data['tenders']);
            }
            // validate the optional field `tenders` (array)
            for (const item of data['tenders']) {
                Tender.validateJSON(item);
            };
        }
        // validate the optional field `total_discount_money`
        if (data['total_discount_money']) { // data not null
          Money.validateJSON(data['total_discount_money']);
        }
        // validate the optional field `total_money`
        if (data['total_money']) { // data not null
          Money.validateJSON(data['total_money']);
        }
        // validate the optional field `total_service_charge_money`
        if (data['total_service_charge_money']) { // data not null
          Money.validateJSON(data['total_service_charge_money']);
        }
        // validate the optional field `total_tax_money`
        if (data['total_tax_money']) { // data not null
          Money.validateJSON(data['total_tax_money']);
        }
        // validate the optional field `total_tip_money`
        if (data['total_tip_money']) { // data not null
          Money.validateJSON(data['total_tip_money']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

Order.RequiredProperties = ["location_id"];

/**
 * The timestamp for when the order reached a terminal [state](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderState), in RFC 3339 format (for example \"2016-09-04T23:59:33.123Z\").
 * @member {String} closed_at
 */
Order.prototype['closed_at'] = undefined;

/**
 * The timestamp for when the order was created, in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").
 * @member {String} created_at
 */
Order.prototype['created_at'] = undefined;

/**
 * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) associated with the order.  __IMPORTANT:__ You should specify a `customer_id` if you want the corresponding payment transactions to be explicitly linked to the customer in the Seller Dashboard. If this field is omitted, the  `customer_id` assigned to any underlying `Payment` objects is ignored and might result in the  creation of new [instant profiles](https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).
 * @member {String} customer_id
 */
Order.prototype['customer_id'] = undefined;

/**
 * The list of all discounts associated with the order.  Discounts can be scoped to either `ORDER` or `LINE_ITEM`. For discounts scoped to `LINE_ITEM`, an `OrderLineItemAppliedDiscount` must be added to each line item that the discount applies to. For discounts with `ORDER` scope, the server generates an `OrderLineItemAppliedDiscount` for every line item.  __IMPORTANT__: If `LINE_ITEM` scope is set on any discounts in this field, using the deprecated `line_items.discounts` field results in an error. Use `line_items.applied_discounts` instead.
 * @member {Array.<module:model/OrderLineItemDiscount>} discounts
 */
Order.prototype['discounts'] = undefined;

/**
 * Details about order fulfillment.  Orders can only be created with at most one fulfillment. However, orders returned by the API might contain multiple fulfillments.
 * @member {Array.<module:model/OrderFulfillment>} fulfillments
 */
Order.prototype['fulfillments'] = undefined;

/**
 * The order's unique ID.
 * @member {String} id
 */
Order.prototype['id'] = undefined;

/**
 * The line items included in the order.
 * @member {Array.<module:model/OrderLineItem>} line_items
 */
Order.prototype['line_items'] = undefined;

/**
 * The ID of the seller location that this order is associated with.
 * @member {String} location_id
 */
Order.prototype['location_id'] = undefined;

/**
 * Application-defined data attached to this order. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
 * @member {Object.<String, String>} metadata
 */
Order.prototype['metadata'] = undefined;

/**
 * @member {module:model/OrderMoneyAmounts} net_amounts
 */
Order.prototype['net_amounts'] = undefined;

/**
 * @member {module:model/OrderPricingOptions} pricing_options
 */
Order.prototype['pricing_options'] = undefined;

/**
 * A client-specified ID to associate an entity in another system with this order.
 * @member {String} reference_id
 */
Order.prototype['reference_id'] = undefined;

/**
 * The refunds that are part of this order.
 * @member {Array.<module:model/Refund>} refunds
 */
Order.prototype['refunds'] = undefined;

/**
 * @member {module:model/OrderMoneyAmounts} return_amounts
 */
Order.prototype['return_amounts'] = undefined;

/**
 * A collection of items from sale orders being returned in this one. Normally part of an itemized return or exchange. There is exactly one `Return` object per sale `Order` being referenced.
 * @member {Array.<module:model/OrderReturn>} returns
 */
Order.prototype['returns'] = undefined;

/**
 * A set-like list of Rewards that have been added to the Order.
 * @member {Array.<module:model/OrderReward>} rewards
 */
Order.prototype['rewards'] = undefined;

/**
 * @member {module:model/OrderRoundingAdjustment} rounding_adjustment
 */
Order.prototype['rounding_adjustment'] = undefined;

/**
 * A list of service charges applied to the order.
 * @member {Array.<module:model/OrderServiceCharge>} service_charges
 */
Order.prototype['service_charges'] = undefined;

/**
 * @member {module:model/OrderSource} source
 */
Order.prototype['source'] = undefined;

/**
 * The current state of the order: `OPEN`, `COMPLETED`, or `CANCELED`.
 * @member {String} state
 */
Order.prototype['state'] = undefined;

/**
 * The list of all taxes associated with the order.  Taxes can be scoped to either `ORDER` or `LINE_ITEM`. For taxes with `LINE_ITEM` scope, an `OrderLineItemAppliedTax` must be added to each line item that the tax applies to. For taxes with `ORDER` scope, the server generates an `OrderLineItemAppliedTax` for every line item.  On reads, each tax in the list includes the total amount of that tax applied to the order.  __IMPORTANT__: If `LINE_ITEM` scope is set on any taxes in this field, using the deprecated `line_items.taxes` field results in an error. Use `line_items.applied_taxes` instead.
 * @member {Array.<module:model/OrderLineItemTax>} taxes
 */
Order.prototype['taxes'] = undefined;

/**
 * The tenders that were used to pay for the order.
 * @member {Array.<module:model/Tender>} tenders
 */
Order.prototype['tenders'] = undefined;

/**
 * @member {module:model/Money} total_discount_money
 */
Order.prototype['total_discount_money'] = undefined;

/**
 * @member {module:model/Money} total_money
 */
Order.prototype['total_money'] = undefined;

/**
 * @member {module:model/Money} total_service_charge_money
 */
Order.prototype['total_service_charge_money'] = undefined;

/**
 * @member {module:model/Money} total_tax_money
 */
Order.prototype['total_tax_money'] = undefined;

/**
 * @member {module:model/Money} total_tip_money
 */
Order.prototype['total_tip_money'] = undefined;

/**
 * The timestamp for when the order was last updated, in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").
 * @member {String} updated_at
 */
Order.prototype['updated_at'] = undefined;

/**
 * The version number, which is incremented each time an update is committed to the order. Orders not created through the API do not include a version number and therefore cannot be updated.  [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).
 * @member {Number} version
 */
Order.prototype['version'] = undefined;






export default Order;

