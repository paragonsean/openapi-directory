/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InvoiceAcceptedPaymentMethods from './InvoiceAcceptedPaymentMethods';
import InvoiceCustomField from './InvoiceCustomField';
import InvoicePaymentRequest from './InvoicePaymentRequest';
import InvoiceRecipient from './InvoiceRecipient';
import Money from './Money';

/**
 * The Invoice model module.
 * @module model/Invoice
 * @version 2.0
 */
class Invoice {
    /**
     * Constructs a new <code>Invoice</code>.
     * Stores information about an invoice. You use the Invoices API to create and manage invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
     * @alias module:model/Invoice
     */
    constructor() { 
        
        Invoice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Invoice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Invoice} obj Optional instance to populate.
     * @return {module:model/Invoice} The populated <code>Invoice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Invoice();

            if (data.hasOwnProperty('accepted_payment_methods')) {
                obj['accepted_payment_methods'] = InvoiceAcceptedPaymentMethods.constructFromObject(data['accepted_payment_methods']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], [InvoiceCustomField]);
            }
            if (data.hasOwnProperty('delivery_method')) {
                obj['delivery_method'] = ApiClient.convertToType(data['delivery_method'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('invoice_number')) {
                obj['invoice_number'] = ApiClient.convertToType(data['invoice_number'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('next_payment_amount_money')) {
                obj['next_payment_amount_money'] = Money.constructFromObject(data['next_payment_amount_money']);
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
            }
            if (data.hasOwnProperty('payment_requests')) {
                obj['payment_requests'] = ApiClient.convertToType(data['payment_requests'], [InvoicePaymentRequest]);
            }
            if (data.hasOwnProperty('primary_recipient')) {
                obj['primary_recipient'] = InvoiceRecipient.constructFromObject(data['primary_recipient']);
            }
            if (data.hasOwnProperty('public_url')) {
                obj['public_url'] = ApiClient.convertToType(data['public_url'], 'String');
            }
            if (data.hasOwnProperty('scheduled_at')) {
                obj['scheduled_at'] = ApiClient.convertToType(data['scheduled_at'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subscription_id')) {
                obj['subscription_id'] = ApiClient.convertToType(data['subscription_id'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Invoice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Invoice</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accepted_payment_methods`
        if (data['accepted_payment_methods']) { // data not null
          InvoiceAcceptedPaymentMethods.validateJSON(data['accepted_payment_methods']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        if (data['custom_fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['custom_fields'])) {
                throw new Error("Expected the field `custom_fields` to be an array in the JSON data but got " + data['custom_fields']);
            }
            // validate the optional field `custom_fields` (array)
            for (const item of data['custom_fields']) {
                InvoiceCustomField.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['invoice_number'] && !(typeof data['invoice_number'] === 'string' || data['invoice_number'] instanceof String)) {
            throw new Error("Expected the field `invoice_number` to be a primitive type in the JSON string but got " + data['invoice_number']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // validate the optional field `next_payment_amount_money`
        if (data['next_payment_amount_money']) { // data not null
          Money.validateJSON(data['next_payment_amount_money']);
        }
        // ensure the json data is a string
        if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
            throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
        }
        if (data['payment_requests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payment_requests'])) {
                throw new Error("Expected the field `payment_requests` to be an array in the JSON data but got " + data['payment_requests']);
            }
            // validate the optional field `payment_requests` (array)
            for (const item of data['payment_requests']) {
                InvoicePaymentRequest.validateJSON(item);
            };
        }
        // validate the optional field `primary_recipient`
        if (data['primary_recipient']) { // data not null
          InvoiceRecipient.validateJSON(data['primary_recipient']);
        }
        // ensure the json data is a string
        if (data['public_url'] && !(typeof data['public_url'] === 'string' || data['public_url'] instanceof String)) {
            throw new Error("Expected the field `public_url` to be a primitive type in the JSON string but got " + data['public_url']);
        }
        // ensure the json data is a string
        if (data['scheduled_at'] && !(typeof data['scheduled_at'] === 'string' || data['scheduled_at'] instanceof String)) {
            throw new Error("Expected the field `scheduled_at` to be a primitive type in the JSON string but got " + data['scheduled_at']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['subscription_id'] && !(typeof data['subscription_id'] === 'string' || data['subscription_id'] instanceof String)) {
            throw new Error("Expected the field `subscription_id` to be a primitive type in the JSON string but got " + data['subscription_id']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * @member {module:model/InvoiceAcceptedPaymentMethods} accepted_payment_methods
 */
Invoice.prototype['accepted_payment_methods'] = undefined;

/**
 * The timestamp when the invoice was created, in RFC 3339 format.
 * @member {String} created_at
 */
Invoice.prototype['created_at'] = undefined;

/**
 * Additional seller-defined fields to render on the invoice. These fields are visible to sellers and buyers on the Square-hosted invoice page and in emailed or PDF copies of invoices. For more information, see [Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).  Adding custom fields to an invoice requires an  [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).  Max: 2 custom fields
 * @member {Array.<module:model/InvoiceCustomField>} custom_fields
 */
Invoice.prototype['custom_fields'] = undefined;

/**
 * @member {Object} delivery_method
 */
Invoice.prototype['delivery_method'] = undefined;

/**
 * The description of the invoice. This is visible to the customer receiving the invoice.
 * @member {String} description
 */
Invoice.prototype['description'] = undefined;

/**
 * The Square-assigned ID of the invoice.
 * @member {String} id
 */
Invoice.prototype['id'] = undefined;

/**
 * A user-friendly invoice number. The value is unique within a location. If not provided when creating an invoice, Square assigns a value. It increments from 1 and padded with zeros making it 7 characters long (for example, 0000001 and 0000002).
 * @member {String} invoice_number
 */
Invoice.prototype['invoice_number'] = undefined;

/**
 * The ID of the location that this invoice is associated with.   If specified in a `CreateInvoice` request, the value must match the `location_id` of the associated order.
 * @member {String} location_id
 */
Invoice.prototype['location_id'] = undefined;

/**
 * @member {module:model/Money} next_payment_amount_money
 */
Invoice.prototype['next_payment_amount_money'] = undefined;

/**
 * The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) for which the invoice is created.  This field is required when creating an invoice, and the order must be in the `OPEN` state.  To view the line items and other information for the associated order, call the  [RetrieveOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/retrieve-order) endpoint using the order ID.
 * @member {String} order_id
 */
Invoice.prototype['order_id'] = undefined;

/**
 * The payment schedule for the invoice, represented by one or more payment requests that define payment settings, such as amount due and due date. An invoice supports the following payment request combinations: - One balance - One deposit with one balance - 2–12 installments  - One deposit with 2–12 installments  This field is required when creating an invoice. It must contain at least one payment request.  All payment requests for the invoice must equal the total order amount. For more information, see  [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).  Adding `INSTALLMENT` payment requests to an invoice requires an  [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
 * @member {Array.<module:model/InvoicePaymentRequest>} payment_requests
 */
Invoice.prototype['payment_requests'] = undefined;

/**
 * @member {module:model/InvoiceRecipient} primary_recipient
 */
Invoice.prototype['primary_recipient'] = undefined;

/**
 * The URL of the Square-hosted invoice page. After you publish the invoice using the `PublishInvoice` endpoint, Square hosts the invoice page and returns the page URL in the response.
 * @member {String} public_url
 */
Invoice.prototype['public_url'] = undefined;

/**
 * The timestamp when the invoice is scheduled for processing, in RFC 3339 format. After the invoice is published, Square processes the invoice on the specified date, according to the delivery method and payment request settings.  If the field is not set, Square processes the invoice immediately after it is published.
 * @member {String} scheduled_at
 */
Invoice.prototype['scheduled_at'] = undefined;

/**
 * The status of the invoice.
 * @member {String} status
 */
Invoice.prototype['status'] = undefined;

/**
 * The ID of the [subscription](https://developer.squareup.com/reference/square_2021-08-18/objects/Subscription) associated with the invoice. This field is present only on subscription billing invoices.
 * @member {String} subscription_id
 */
Invoice.prototype['subscription_id'] = undefined;

/**
 * The time zone used to interpret calendar dates on the invoice, such as `due_date`. When an invoice is created, this field is set to the `timezone` specified for the seller location. The value cannot be changed.  For example, a payment `due_date` of 2021-03-09 with a `timezone` of America/Los\\_Angeles becomes overdue at midnight on March 9 in America/Los\\_Angeles (which equals a UTC timestamp of 2021-03-10T08:00:00Z).
 * @member {String} timezone
 */
Invoice.prototype['timezone'] = undefined;

/**
 * The title of the invoice.
 * @member {String} title
 */
Invoice.prototype['title'] = undefined;

/**
 * The timestamp when the invoice was last updated, in RFC 3339 format.
 * @member {String} updated_at
 */
Invoice.prototype['updated_at'] = undefined;

/**
 * The Square-assigned version number, which is incremented each time an update is committed to the invoice.
 * @member {Number} version
 */
Invoice.prototype['version'] = undefined;






export default Invoice;

