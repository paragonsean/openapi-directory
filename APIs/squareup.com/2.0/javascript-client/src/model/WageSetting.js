/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JobAssignment from './JobAssignment';

/**
 * The WageSetting model module.
 * @module model/WageSetting
 * @version 2.0
 */
class WageSetting {
    /**
     * Constructs a new <code>WageSetting</code>.
     * An object representing a team member&#39;s wage information.
     * @alias module:model/WageSetting
     */
    constructor() { 
        
        WageSetting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WageSetting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WageSetting} obj Optional instance to populate.
     * @return {module:model/WageSetting} The populated <code>WageSetting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WageSetting();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('is_overtime_exempt')) {
                obj['is_overtime_exempt'] = ApiClient.convertToType(data['is_overtime_exempt'], 'Boolean');
            }
            if (data.hasOwnProperty('job_assignments')) {
                obj['job_assignments'] = ApiClient.convertToType(data['job_assignments'], [JobAssignment]);
            }
            if (data.hasOwnProperty('team_member_id')) {
                obj['team_member_id'] = ApiClient.convertToType(data['team_member_id'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WageSetting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WageSetting</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        if (data['job_assignments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['job_assignments'])) {
                throw new Error("Expected the field `job_assignments` to be an array in the JSON data but got " + data['job_assignments']);
            }
            // validate the optional field `job_assignments` (array)
            for (const item of data['job_assignments']) {
                JobAssignment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['team_member_id'] && !(typeof data['team_member_id'] === 'string' || data['team_member_id'] instanceof String)) {
            throw new Error("Expected the field `team_member_id` to be a primitive type in the JSON string but got " + data['team_member_id']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * The timestamp, in RFC 3339 format, describing when the wage setting object was created. For example, \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\".
 * @member {String} created_at
 */
WageSetting.prototype['created_at'] = undefined;

/**
 * Whether the team member is exempt from the overtime rules of the seller's country.
 * @member {Boolean} is_overtime_exempt
 */
WageSetting.prototype['is_overtime_exempt'] = undefined;

/**
 * Required. The ordered list of jobs that the team member is assigned to. The first job assignment is considered the team member's primary job.  The minimum length is 1 and the maximum length is 12.
 * @member {Array.<module:model/JobAssignment>} job_assignments
 */
WageSetting.prototype['job_assignments'] = undefined;

/**
 * The unique ID of the `TeamMember` whom this wage setting describes.
 * @member {String} team_member_id
 */
WageSetting.prototype['team_member_id'] = undefined;

/**
 * The timestamp, in RFC 3339 format, describing when the wage setting object was last updated. For example, \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\".
 * @member {String} updated_at
 */
WageSetting.prototype['updated_at'] = undefined;

/**
 * Used for resolving concurrency issues. The request fails if the version provided does not match the server version at the time of the request. If not provided, Square executes a blind write, potentially overwriting data from another write. For more information, see [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency).
 * @member {Number} version
 */
WageSetting.prototype['version'] = undefined;






export default WageSetting;

