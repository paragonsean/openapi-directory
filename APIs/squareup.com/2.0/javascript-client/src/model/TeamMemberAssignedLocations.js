/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TeamMemberAssignedLocations model module.
 * @module model/TeamMemberAssignedLocations
 * @version 2.0
 */
class TeamMemberAssignedLocations {
    /**
     * Constructs a new <code>TeamMemberAssignedLocations</code>.
     * An object that represents a team member&#39;s assignment to locations.
     * @alias module:model/TeamMemberAssignedLocations
     */
    constructor() { 
        
        TeamMemberAssignedLocations.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TeamMemberAssignedLocations</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamMemberAssignedLocations} obj Optional instance to populate.
     * @return {module:model/TeamMemberAssignedLocations} The populated <code>TeamMemberAssignedLocations</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamMemberAssignedLocations();

            if (data.hasOwnProperty('assignment_type')) {
                obj['assignment_type'] = ApiClient.convertToType(data['assignment_type'], 'String');
            }
            if (data.hasOwnProperty('location_ids')) {
                obj['location_ids'] = ApiClient.convertToType(data['location_ids'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamMemberAssignedLocations</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamMemberAssignedLocations</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assignment_type'] && !(typeof data['assignment_type'] === 'string' || data['assignment_type'] instanceof String)) {
            throw new Error("Expected the field `assignment_type` to be a primitive type in the JSON string but got " + data['assignment_type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['location_ids'])) {
            throw new Error("Expected the field `location_ids` to be an array in the JSON data but got " + data['location_ids']);
        }

        return true;
    }


}



/**
 * The current assignment type of the team member.
 * @member {String} assignment_type
 */
TeamMemberAssignedLocations.prototype['assignment_type'] = undefined;

/**
 * The locations that the team member is assigned to.
 * @member {Array.<String>} location_ids
 */
TeamMemberAssignedLocations.prototype['location_ids'] = undefined;






export default TeamMemberAssignedLocations;

