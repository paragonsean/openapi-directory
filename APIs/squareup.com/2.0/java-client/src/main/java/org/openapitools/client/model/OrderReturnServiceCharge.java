/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Money;
import org.openapitools.client.model.OrderLineItemAppliedTax;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the service charge applied to the original order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderReturnServiceCharge {
  public static final String SERIALIZED_NAME_AMOUNT_MONEY = "amount_money";
  @SerializedName(SERIALIZED_NAME_AMOUNT_MONEY)
  private Money amountMoney;

  public static final String SERIALIZED_NAME_APPLIED_MONEY = "applied_money";
  @SerializedName(SERIALIZED_NAME_APPLIED_MONEY)
  private Money appliedMoney;

  public static final String SERIALIZED_NAME_APPLIED_TAXES = "applied_taxes";
  @SerializedName(SERIALIZED_NAME_APPLIED_TAXES)
  private List<OrderLineItemAppliedTax> appliedTaxes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CALCULATION_PHASE = "calculation_phase";
  @SerializedName(SERIALIZED_NAME_CALCULATION_PHASE)
  private String calculationPhase;

  public static final String SERIALIZED_NAME_CATALOG_OBJECT_ID = "catalog_object_id";
  @SerializedName(SERIALIZED_NAME_CATALOG_OBJECT_ID)
  private String catalogObjectId;

  public static final String SERIALIZED_NAME_CATALOG_VERSION = "catalog_version";
  @SerializedName(SERIALIZED_NAME_CATALOG_VERSION)
  private Long catalogVersion;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private String percentage;

  public static final String SERIALIZED_NAME_SOURCE_SERVICE_CHARGE_UID = "source_service_charge_uid";
  @SerializedName(SERIALIZED_NAME_SOURCE_SERVICE_CHARGE_UID)
  private String sourceServiceChargeUid;

  public static final String SERIALIZED_NAME_TAXABLE = "taxable";
  @SerializedName(SERIALIZED_NAME_TAXABLE)
  private Boolean taxable;

  public static final String SERIALIZED_NAME_TOTAL_MONEY = "total_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_MONEY)
  private Money totalMoney;

  public static final String SERIALIZED_NAME_TOTAL_TAX_MONEY = "total_tax_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX_MONEY)
  private Money totalTaxMoney;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public OrderReturnServiceCharge() {
  }

  public OrderReturnServiceCharge amountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
    return this;
  }

  /**
   * Get amountMoney
   * @return amountMoney
   */
  @javax.annotation.Nullable
  public Money getAmountMoney() {
    return amountMoney;
  }

  public void setAmountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
  }


  public OrderReturnServiceCharge appliedMoney(Money appliedMoney) {
    this.appliedMoney = appliedMoney;
    return this;
  }

  /**
   * Get appliedMoney
   * @return appliedMoney
   */
  @javax.annotation.Nullable
  public Money getAppliedMoney() {
    return appliedMoney;
  }

  public void setAppliedMoney(Money appliedMoney) {
    this.appliedMoney = appliedMoney;
  }


  public OrderReturnServiceCharge appliedTaxes(List<OrderLineItemAppliedTax> appliedTaxes) {
    this.appliedTaxes = appliedTaxes;
    return this;
  }

  public OrderReturnServiceCharge addAppliedTaxesItem(OrderLineItemAppliedTax appliedTaxesItem) {
    if (this.appliedTaxes == null) {
      this.appliedTaxes = new ArrayList<>();
    }
    this.appliedTaxes.add(appliedTaxesItem);
    return this;
  }

  /**
   * The list of references to &#x60;OrderReturnTax&#x60; entities applied to the &#x60;OrderReturnServiceCharge&#x60;. Each &#x60;OrderLineItemAppliedTax&#x60; has a &#x60;tax_uid&#x60; that references the &#x60;uid&#x60; of a top-level &#x60;OrderReturnTax&#x60; that is being applied to the &#x60;OrderReturnServiceCharge&#x60;. On reads, the applied amount is populated.
   * @return appliedTaxes
   */
  @javax.annotation.Nullable
  public List<OrderLineItemAppliedTax> getAppliedTaxes() {
    return appliedTaxes;
  }

  public void setAppliedTaxes(List<OrderLineItemAppliedTax> appliedTaxes) {
    this.appliedTaxes = appliedTaxes;
  }


  public OrderReturnServiceCharge calculationPhase(String calculationPhase) {
    this.calculationPhase = calculationPhase;
    return this;
  }

  /**
   * The calculation phase after which to apply the service charge.
   * @return calculationPhase
   */
  @javax.annotation.Nullable
  public String getCalculationPhase() {
    return calculationPhase;
  }

  public void setCalculationPhase(String calculationPhase) {
    this.calculationPhase = calculationPhase;
  }


  public OrderReturnServiceCharge catalogObjectId(String catalogObjectId) {
    this.catalogObjectId = catalogObjectId;
    return this;
  }

  /**
   * The catalog object ID of the associated [OrderServiceCharge](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderServiceCharge).
   * @return catalogObjectId
   */
  @javax.annotation.Nullable
  public String getCatalogObjectId() {
    return catalogObjectId;
  }

  public void setCatalogObjectId(String catalogObjectId) {
    this.catalogObjectId = catalogObjectId;
  }


  public OrderReturnServiceCharge catalogVersion(Long catalogVersion) {
    this.catalogVersion = catalogVersion;
    return this;
  }

  /**
   * The version of the catalog object that this service charge references.
   * @return catalogVersion
   */
  @javax.annotation.Nullable
  public Long getCatalogVersion() {
    return catalogVersion;
  }

  public void setCatalogVersion(Long catalogVersion) {
    this.catalogVersion = catalogVersion;
  }


  public OrderReturnServiceCharge name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the service charge.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OrderReturnServiceCharge percentage(String percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * The percentage of the service charge, as a string representation of a decimal number. For example, a value of &#x60;\&quot;7.25\&quot;&#x60; corresponds to a percentage of 7.25%.  Either &#x60;percentage&#x60; or &#x60;amount_money&#x60; should be set, but not both.
   * @return percentage
   */
  @javax.annotation.Nullable
  public String getPercentage() {
    return percentage;
  }

  public void setPercentage(String percentage) {
    this.percentage = percentage;
  }


  public OrderReturnServiceCharge sourceServiceChargeUid(String sourceServiceChargeUid) {
    this.sourceServiceChargeUid = sourceServiceChargeUid;
    return this;
  }

  /**
   * The service charge &#x60;uid&#x60; from the order containing the original service charge. &#x60;source_service_charge_uid&#x60; is &#x60;null&#x60; for unlinked returns.
   * @return sourceServiceChargeUid
   */
  @javax.annotation.Nullable
  public String getSourceServiceChargeUid() {
    return sourceServiceChargeUid;
  }

  public void setSourceServiceChargeUid(String sourceServiceChargeUid) {
    this.sourceServiceChargeUid = sourceServiceChargeUid;
  }


  public OrderReturnServiceCharge taxable(Boolean taxable) {
    this.taxable = taxable;
    return this;
  }

  /**
   * Indicates whether the surcharge can be taxed. Service charges calculated in the &#x60;TOTAL_PHASE&#x60; cannot be marked as taxable.
   * @return taxable
   */
  @javax.annotation.Nullable
  public Boolean getTaxable() {
    return taxable;
  }

  public void setTaxable(Boolean taxable) {
    this.taxable = taxable;
  }


  public OrderReturnServiceCharge totalMoney(Money totalMoney) {
    this.totalMoney = totalMoney;
    return this;
  }

  /**
   * Get totalMoney
   * @return totalMoney
   */
  @javax.annotation.Nullable
  public Money getTotalMoney() {
    return totalMoney;
  }

  public void setTotalMoney(Money totalMoney) {
    this.totalMoney = totalMoney;
  }


  public OrderReturnServiceCharge totalTaxMoney(Money totalTaxMoney) {
    this.totalTaxMoney = totalTaxMoney;
    return this;
  }

  /**
   * Get totalTaxMoney
   * @return totalTaxMoney
   */
  @javax.annotation.Nullable
  public Money getTotalTaxMoney() {
    return totalTaxMoney;
  }

  public void setTotalTaxMoney(Money totalTaxMoney) {
    this.totalTaxMoney = totalTaxMoney;
  }


  public OrderReturnServiceCharge uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * A unique ID that identifies the return service charge only within this order.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderReturnServiceCharge orderReturnServiceCharge = (OrderReturnServiceCharge) o;
    return Objects.equals(this.amountMoney, orderReturnServiceCharge.amountMoney) &&
        Objects.equals(this.appliedMoney, orderReturnServiceCharge.appliedMoney) &&
        Objects.equals(this.appliedTaxes, orderReturnServiceCharge.appliedTaxes) &&
        Objects.equals(this.calculationPhase, orderReturnServiceCharge.calculationPhase) &&
        Objects.equals(this.catalogObjectId, orderReturnServiceCharge.catalogObjectId) &&
        Objects.equals(this.catalogVersion, orderReturnServiceCharge.catalogVersion) &&
        Objects.equals(this.name, orderReturnServiceCharge.name) &&
        Objects.equals(this.percentage, orderReturnServiceCharge.percentage) &&
        Objects.equals(this.sourceServiceChargeUid, orderReturnServiceCharge.sourceServiceChargeUid) &&
        Objects.equals(this.taxable, orderReturnServiceCharge.taxable) &&
        Objects.equals(this.totalMoney, orderReturnServiceCharge.totalMoney) &&
        Objects.equals(this.totalTaxMoney, orderReturnServiceCharge.totalTaxMoney) &&
        Objects.equals(this.uid, orderReturnServiceCharge.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountMoney, appliedMoney, appliedTaxes, calculationPhase, catalogObjectId, catalogVersion, name, percentage, sourceServiceChargeUid, taxable, totalMoney, totalTaxMoney, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderReturnServiceCharge {\n");
    sb.append("    amountMoney: ").append(toIndentedString(amountMoney)).append("\n");
    sb.append("    appliedMoney: ").append(toIndentedString(appliedMoney)).append("\n");
    sb.append("    appliedTaxes: ").append(toIndentedString(appliedTaxes)).append("\n");
    sb.append("    calculationPhase: ").append(toIndentedString(calculationPhase)).append("\n");
    sb.append("    catalogObjectId: ").append(toIndentedString(catalogObjectId)).append("\n");
    sb.append("    catalogVersion: ").append(toIndentedString(catalogVersion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    sourceServiceChargeUid: ").append(toIndentedString(sourceServiceChargeUid)).append("\n");
    sb.append("    taxable: ").append(toIndentedString(taxable)).append("\n");
    sb.append("    totalMoney: ").append(toIndentedString(totalMoney)).append("\n");
    sb.append("    totalTaxMoney: ").append(toIndentedString(totalTaxMoney)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount_money");
    openapiFields.add("applied_money");
    openapiFields.add("applied_taxes");
    openapiFields.add("calculation_phase");
    openapiFields.add("catalog_object_id");
    openapiFields.add("catalog_version");
    openapiFields.add("name");
    openapiFields.add("percentage");
    openapiFields.add("source_service_charge_uid");
    openapiFields.add("taxable");
    openapiFields.add("total_money");
    openapiFields.add("total_tax_money");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderReturnServiceCharge
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderReturnServiceCharge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderReturnServiceCharge is not found in the empty JSON string", OrderReturnServiceCharge.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderReturnServiceCharge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderReturnServiceCharge` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amount_money`
      if (jsonObj.get("amount_money") != null && !jsonObj.get("amount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("amount_money"));
      }
      // validate the optional field `applied_money`
      if (jsonObj.get("applied_money") != null && !jsonObj.get("applied_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("applied_money"));
      }
      if (jsonObj.get("applied_taxes") != null && !jsonObj.get("applied_taxes").isJsonNull()) {
        JsonArray jsonArrayappliedTaxes = jsonObj.getAsJsonArray("applied_taxes");
        if (jsonArrayappliedTaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applied_taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applied_taxes` to be an array in the JSON string but got `%s`", jsonObj.get("applied_taxes").toString()));
          }

          // validate the optional field `applied_taxes` (array)
          for (int i = 0; i < jsonArrayappliedTaxes.size(); i++) {
            OrderLineItemAppliedTax.validateJsonElement(jsonArrayappliedTaxes.get(i));
          };
        }
      }
      if ((jsonObj.get("calculation_phase") != null && !jsonObj.get("calculation_phase").isJsonNull()) && !jsonObj.get("calculation_phase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calculation_phase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calculation_phase").toString()));
      }
      if ((jsonObj.get("catalog_object_id") != null && !jsonObj.get("catalog_object_id").isJsonNull()) && !jsonObj.get("catalog_object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalog_object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalog_object_id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("percentage") != null && !jsonObj.get("percentage").isJsonNull()) && !jsonObj.get("percentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentage").toString()));
      }
      if ((jsonObj.get("source_service_charge_uid") != null && !jsonObj.get("source_service_charge_uid").isJsonNull()) && !jsonObj.get("source_service_charge_uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_service_charge_uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_service_charge_uid").toString()));
      }
      // validate the optional field `total_money`
      if (jsonObj.get("total_money") != null && !jsonObj.get("total_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_money"));
      }
      // validate the optional field `total_tax_money`
      if (jsonObj.get("total_tax_money") != null && !jsonObj.get("total_tax_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_tax_money"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderReturnServiceCharge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderReturnServiceCharge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderReturnServiceCharge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderReturnServiceCharge.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderReturnServiceCharge>() {
           @Override
           public void write(JsonWriter out, OrderReturnServiceCharge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderReturnServiceCharge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderReturnServiceCharge given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderReturnServiceCharge
   * @throws IOException if the JSON string is invalid with respect to OrderReturnServiceCharge
   */
  public static OrderReturnServiceCharge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderReturnServiceCharge.class);
  }

  /**
   * Convert an instance of OrderReturnServiceCharge to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

