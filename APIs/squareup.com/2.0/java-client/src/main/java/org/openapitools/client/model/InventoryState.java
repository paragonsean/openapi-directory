/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Indicates the state of a tracked item quantity in the lifecycle of goods.
 */
@JsonAdapter(InventoryState.Adapter.class)
public enum InventoryState {
  
  CUSTOM("CUSTOM"),
  
  IN_STOCK("IN_STOCK"),
  
  SOLD("SOLD"),
  
  RETURNED_BY_CUSTOMER("RETURNED_BY_CUSTOMER"),
  
  RESERVED_FOR_SALE("RESERVED_FOR_SALE"),
  
  SOLD_ONLINE("SOLD_ONLINE"),
  
  ORDERED_FROM_VENDOR("ORDERED_FROM_VENDOR"),
  
  RECEIVED_FROM_VENDOR("RECEIVED_FROM_VENDOR"),
  
  IN_TRANSIT_TO("IN_TRANSIT_TO"),
  
  NONE("NONE"),
  
  WASTE("WASTE"),
  
  UNLINKED_RETURN("UNLINKED_RETURN"),
  
  COMPOSED("COMPOSED"),
  
  DECOMPOSED("DECOMPOSED"),
  
  SUPPORTED_BY_NEWER_VERSION("SUPPORTED_BY_NEWER_VERSION");

  private String value;

  InventoryState(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static InventoryState fromValue(String value) {
    for (InventoryState b : InventoryState.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<InventoryState> {
    @Override
    public void write(final JsonWriter jsonWriter, final InventoryState enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public InventoryState read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return InventoryState.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    InventoryState.fromValue(value);
  }
}

