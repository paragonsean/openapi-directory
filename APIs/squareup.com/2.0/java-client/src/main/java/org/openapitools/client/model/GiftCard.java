/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Money;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a Square gift card.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GiftCard {
  public static final String SERIALIZED_NAME_BALANCE_MONEY = "balance_money";
  @SerializedName(SERIALIZED_NAME_BALANCE_MONEY)
  private Money balanceMoney;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOMER_IDS = "customer_ids";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_IDS)
  private List<String> customerIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_GAN = "gan";
  @SerializedName(SERIALIZED_NAME_GAN)
  private String gan;

  public static final String SERIALIZED_NAME_GAN_SOURCE = "gan_source";
  @SerializedName(SERIALIZED_NAME_GAN_SOURCE)
  private Object ganSource = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Object state = null;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Object type = null;

  public GiftCard() {
  }

  public GiftCard balanceMoney(Money balanceMoney) {
    this.balanceMoney = balanceMoney;
    return this;
  }

  /**
   * Get balanceMoney
   * @return balanceMoney
   */
  @javax.annotation.Nullable
  public Money getBalanceMoney() {
    return balanceMoney;
  }

  public void setBalanceMoney(Money balanceMoney) {
    this.balanceMoney = balanceMoney;
  }


  public GiftCard createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The timestamp when the gift card was created, in RFC 3339 format.  In the case of a digital gift card, it is the time when you create a card  (using the Square Point of Sale application, Seller Dashboard, or Gift Cards API).   In the case of a plastic gift card, it is the time when Square associates the card with the  seller at the time of activation.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public GiftCard customerIds(List<String> customerIds) {
    this.customerIds = customerIds;
    return this;
  }

  public GiftCard addCustomerIdsItem(String customerIdsItem) {
    if (this.customerIds == null) {
      this.customerIds = new ArrayList<>();
    }
    this.customerIds.add(customerIdsItem);
    return this;
  }

  /**
   * The IDs of the customers to whom this gift card is linked.
   * @return customerIds
   */
  @javax.annotation.Nullable
  public List<String> getCustomerIds() {
    return customerIds;
  }

  public void setCustomerIds(List<String> customerIds) {
    this.customerIds = customerIds;
  }


  public GiftCard gan(String gan) {
    this.gan = gan;
    return this;
  }

  /**
   * The gift card account number.
   * @return gan
   */
  @javax.annotation.Nullable
  public String getGan() {
    return gan;
  }

  public void setGan(String gan) {
    this.gan = gan;
  }


  public GiftCard ganSource(Object ganSource) {
    this.ganSource = ganSource;
    return this;
  }

  /**
   * Get ganSource
   * @return ganSource
   */
  @javax.annotation.Nullable
  public Object getGanSource() {
    return ganSource;
  }

  public void setGanSource(Object ganSource) {
    this.ganSource = ganSource;
  }


  public GiftCard id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Square-assigned ID of the gift card.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GiftCard state(Object state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public Object getState() {
    return state;
  }

  public void setState(Object state) {
    this.state = state;
  }


  public GiftCard type(Object type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public Object getType() {
    return type;
  }

  public void setType(Object type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GiftCard giftCard = (GiftCard) o;
    return Objects.equals(this.balanceMoney, giftCard.balanceMoney) &&
        Objects.equals(this.createdAt, giftCard.createdAt) &&
        Objects.equals(this.customerIds, giftCard.customerIds) &&
        Objects.equals(this.gan, giftCard.gan) &&
        Objects.equals(this.ganSource, giftCard.ganSource) &&
        Objects.equals(this.id, giftCard.id) &&
        Objects.equals(this.state, giftCard.state) &&
        Objects.equals(this.type, giftCard.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(balanceMoney, createdAt, customerIds, gan, ganSource, id, state, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GiftCard {\n");
    sb.append("    balanceMoney: ").append(toIndentedString(balanceMoney)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customerIds: ").append(toIndentedString(customerIds)).append("\n");
    sb.append("    gan: ").append(toIndentedString(gan)).append("\n");
    sb.append("    ganSource: ").append(toIndentedString(ganSource)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balance_money");
    openapiFields.add("created_at");
    openapiFields.add("customer_ids");
    openapiFields.add("gan");
    openapiFields.add("gan_source");
    openapiFields.add("id");
    openapiFields.add("state");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GiftCard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GiftCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GiftCard is not found in the empty JSON string", GiftCard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GiftCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GiftCard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GiftCard.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `balance_money`
      if (jsonObj.get("balance_money") != null && !jsonObj.get("balance_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("balance_money"));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customer_ids") != null && !jsonObj.get("customer_ids").isJsonNull() && !jsonObj.get("customer_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_ids` to be an array in the JSON string but got `%s`", jsonObj.get("customer_ids").toString()));
      }
      if ((jsonObj.get("gan") != null && !jsonObj.get("gan").isJsonNull()) && !jsonObj.get("gan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gan").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GiftCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GiftCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GiftCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GiftCard.class));

       return (TypeAdapter<T>) new TypeAdapter<GiftCard>() {
           @Override
           public void write(JsonWriter out, GiftCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GiftCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GiftCard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GiftCard
   * @throws IOException if the JSON string is invalid with respect to GiftCard
   */
  public static GiftCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GiftCard.class);
  }

  /**
   * Convert an instance of GiftCard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

