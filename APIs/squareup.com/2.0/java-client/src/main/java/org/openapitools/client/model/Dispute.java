/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DisputedPayment;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a dispute a cardholder initiated with their bank.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dispute {
  public static final String SERIALIZED_NAME_AMOUNT_MONEY = "amount_money";
  @SerializedName(SERIALIZED_NAME_AMOUNT_MONEY)
  private Money amountMoney;

  public static final String SERIALIZED_NAME_BRAND_DISPUTE_ID = "brand_dispute_id";
  @SerializedName(SERIALIZED_NAME_BRAND_DISPUTE_ID)
  private String brandDisputeId;

  public static final String SERIALIZED_NAME_CARD_BRAND = "card_brand";
  @SerializedName(SERIALIZED_NAME_CARD_BRAND)
  private String cardBrand;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DISPUTE_ID = "dispute_id";
  @SerializedName(SERIALIZED_NAME_DISPUTE_ID)
  private String disputeId;

  public static final String SERIALIZED_NAME_DISPUTED_PAYMENT = "disputed_payment";
  @SerializedName(SERIALIZED_NAME_DISPUTED_PAYMENT)
  private DisputedPayment disputedPayment;

  public static final String SERIALIZED_NAME_DUE_AT = "due_at";
  @SerializedName(SERIALIZED_NAME_DUE_AT)
  private String dueAt;

  public static final String SERIALIZED_NAME_EVIDENCE_IDS = "evidence_ids";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_IDS)
  private List<String> evidenceIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_REPORTED_AT = "reported_at";
  @SerializedName(SERIALIZED_NAME_REPORTED_AT)
  private String reportedAt;

  public static final String SERIALIZED_NAME_REPORTED_DATE = "reported_date";
  @SerializedName(SERIALIZED_NAME_REPORTED_DATE)
  private String reportedDate;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public Dispute() {
  }

  public Dispute amountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
    return this;
  }

  /**
   * Get amountMoney
   * @return amountMoney
   */
  @javax.annotation.Nullable
  public Money getAmountMoney() {
    return amountMoney;
  }

  public void setAmountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
  }


  public Dispute brandDisputeId(String brandDisputeId) {
    this.brandDisputeId = brandDisputeId;
    return this;
  }

  /**
   * The ID of the dispute in the card brand system, generated by the card brand.
   * @return brandDisputeId
   */
  @javax.annotation.Nullable
  public String getBrandDisputeId() {
    return brandDisputeId;
  }

  public void setBrandDisputeId(String brandDisputeId) {
    this.brandDisputeId = brandDisputeId;
  }


  public Dispute cardBrand(String cardBrand) {
    this.cardBrand = cardBrand;
    return this;
  }

  /**
   * The card brand used in the disputed payment.
   * @return cardBrand
   */
  @javax.annotation.Nullable
  public String getCardBrand() {
    return cardBrand;
  }

  public void setCardBrand(String cardBrand) {
    this.cardBrand = cardBrand;
  }


  public Dispute createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The timestamp when the dispute was created, in RFC 3339 format.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Dispute disputeId(String disputeId) {
    this.disputeId = disputeId;
    return this;
  }

  /**
   * The unique ID for this &#x60;Dispute&#x60;, generated by Square.
   * @return disputeId
   */
  @javax.annotation.Nullable
  public String getDisputeId() {
    return disputeId;
  }

  public void setDisputeId(String disputeId) {
    this.disputeId = disputeId;
  }


  public Dispute disputedPayment(DisputedPayment disputedPayment) {
    this.disputedPayment = disputedPayment;
    return this;
  }

  /**
   * Get disputedPayment
   * @return disputedPayment
   */
  @javax.annotation.Nullable
  public DisputedPayment getDisputedPayment() {
    return disputedPayment;
  }

  public void setDisputedPayment(DisputedPayment disputedPayment) {
    this.disputedPayment = disputedPayment;
  }


  public Dispute dueAt(String dueAt) {
    this.dueAt = dueAt;
    return this;
  }

  /**
   * The time when the next action is due, in RFC 3339 format.
   * @return dueAt
   */
  @javax.annotation.Nullable
  public String getDueAt() {
    return dueAt;
  }

  public void setDueAt(String dueAt) {
    this.dueAt = dueAt;
  }


  public Dispute evidenceIds(List<String> evidenceIds) {
    this.evidenceIds = evidenceIds;
    return this;
  }

  public Dispute addEvidenceIdsItem(String evidenceIdsItem) {
    if (this.evidenceIds == null) {
      this.evidenceIds = new ArrayList<>();
    }
    this.evidenceIds.add(evidenceIdsItem);
    return this;
  }

  /**
   * The IDs of the evidence associated with the dispute.
   * @return evidenceIds
   */
  @javax.annotation.Nullable
  public List<String> getEvidenceIds() {
    return evidenceIds;
  }

  public void setEvidenceIds(List<String> evidenceIds) {
    this.evidenceIds = evidenceIds;
  }


  public Dispute id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique ID for this &#x60;Dispute&#x60;, generated by Square.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Dispute locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The ID of the location where the dispute originated.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public Dispute reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The dispute reason why the cardholder initiated the dispute with their bank.
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public Dispute reportedAt(String reportedAt) {
    this.reportedAt = reportedAt;
    return this;
  }

  /**
   * The timestamp when the dispute was reported, in RFC 3339 format.
   * @return reportedAt
   */
  @javax.annotation.Nullable
  public String getReportedAt() {
    return reportedAt;
  }

  public void setReportedAt(String reportedAt) {
    this.reportedAt = reportedAt;
  }


  public Dispute reportedDate(String reportedDate) {
    this.reportedDate = reportedDate;
    return this;
  }

  /**
   * The timestamp when the dispute was reported, in RFC 3339 format.
   * @return reportedDate
   */
  @javax.annotation.Nullable
  public String getReportedDate() {
    return reportedDate;
  }

  public void setReportedDate(String reportedDate) {
    this.reportedDate = reportedDate;
  }


  public Dispute state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The current state of this dispute.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Dispute updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The timestamp when the dispute was last updated, in RFC 3339 format.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Dispute version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * The current version of the &#x60;Dispute&#x60;.
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dispute dispute = (Dispute) o;
    return Objects.equals(this.amountMoney, dispute.amountMoney) &&
        Objects.equals(this.brandDisputeId, dispute.brandDisputeId) &&
        Objects.equals(this.cardBrand, dispute.cardBrand) &&
        Objects.equals(this.createdAt, dispute.createdAt) &&
        Objects.equals(this.disputeId, dispute.disputeId) &&
        Objects.equals(this.disputedPayment, dispute.disputedPayment) &&
        Objects.equals(this.dueAt, dispute.dueAt) &&
        Objects.equals(this.evidenceIds, dispute.evidenceIds) &&
        Objects.equals(this.id, dispute.id) &&
        Objects.equals(this.locationId, dispute.locationId) &&
        Objects.equals(this.reason, dispute.reason) &&
        Objects.equals(this.reportedAt, dispute.reportedAt) &&
        Objects.equals(this.reportedDate, dispute.reportedDate) &&
        Objects.equals(this.state, dispute.state) &&
        Objects.equals(this.updatedAt, dispute.updatedAt) &&
        Objects.equals(this.version, dispute.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountMoney, brandDisputeId, cardBrand, createdAt, disputeId, disputedPayment, dueAt, evidenceIds, id, locationId, reason, reportedAt, reportedDate, state, updatedAt, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dispute {\n");
    sb.append("    amountMoney: ").append(toIndentedString(amountMoney)).append("\n");
    sb.append("    brandDisputeId: ").append(toIndentedString(brandDisputeId)).append("\n");
    sb.append("    cardBrand: ").append(toIndentedString(cardBrand)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    disputeId: ").append(toIndentedString(disputeId)).append("\n");
    sb.append("    disputedPayment: ").append(toIndentedString(disputedPayment)).append("\n");
    sb.append("    dueAt: ").append(toIndentedString(dueAt)).append("\n");
    sb.append("    evidenceIds: ").append(toIndentedString(evidenceIds)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    reportedAt: ").append(toIndentedString(reportedAt)).append("\n");
    sb.append("    reportedDate: ").append(toIndentedString(reportedDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount_money");
    openapiFields.add("brand_dispute_id");
    openapiFields.add("card_brand");
    openapiFields.add("created_at");
    openapiFields.add("dispute_id");
    openapiFields.add("disputed_payment");
    openapiFields.add("due_at");
    openapiFields.add("evidence_ids");
    openapiFields.add("id");
    openapiFields.add("location_id");
    openapiFields.add("reason");
    openapiFields.add("reported_at");
    openapiFields.add("reported_date");
    openapiFields.add("state");
    openapiFields.add("updated_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dispute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dispute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dispute is not found in the empty JSON string", Dispute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dispute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dispute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amount_money`
      if (jsonObj.get("amount_money") != null && !jsonObj.get("amount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("amount_money"));
      }
      if ((jsonObj.get("brand_dispute_id") != null && !jsonObj.get("brand_dispute_id").isJsonNull()) && !jsonObj.get("brand_dispute_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand_dispute_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand_dispute_id").toString()));
      }
      if ((jsonObj.get("card_brand") != null && !jsonObj.get("card_brand").isJsonNull()) && !jsonObj.get("card_brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_brand").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("dispute_id") != null && !jsonObj.get("dispute_id").isJsonNull()) && !jsonObj.get("dispute_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispute_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispute_id").toString()));
      }
      // validate the optional field `disputed_payment`
      if (jsonObj.get("disputed_payment") != null && !jsonObj.get("disputed_payment").isJsonNull()) {
        DisputedPayment.validateJsonElement(jsonObj.get("disputed_payment"));
      }
      if ((jsonObj.get("due_at") != null && !jsonObj.get("due_at").isJsonNull()) && !jsonObj.get("due_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `due_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("due_at").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("evidence_ids") != null && !jsonObj.get("evidence_ids").isJsonNull() && !jsonObj.get("evidence_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `evidence_ids` to be an array in the JSON string but got `%s`", jsonObj.get("evidence_ids").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("location_id") != null && !jsonObj.get("location_id").isJsonNull()) && !jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("reported_at") != null && !jsonObj.get("reported_at").isJsonNull()) && !jsonObj.get("reported_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reported_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reported_at").toString()));
      }
      if ((jsonObj.get("reported_date") != null && !jsonObj.get("reported_date").isJsonNull()) && !jsonObj.get("reported_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reported_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reported_date").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dispute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dispute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dispute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dispute.class));

       return (TypeAdapter<T>) new TypeAdapter<Dispute>() {
           @Override
           public void write(JsonWriter out, Dispute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dispute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dispute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dispute
   * @throws IOException if the JSON string is invalid with respect to Dispute
   */
  public static Dispute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dispute.class);
  }

  /**
   * Convert an instance of Dispute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

