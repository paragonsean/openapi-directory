/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a phase in a subscription plan. For more information, see [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionPhase {
  public static final String SERIALIZED_NAME_CADENCE = "cadence";
  @SerializedName(SERIALIZED_NAME_CADENCE)
  private String cadence;

  public static final String SERIALIZED_NAME_ORDINAL = "ordinal";
  @SerializedName(SERIALIZED_NAME_ORDINAL)
  private Long ordinal;

  public static final String SERIALIZED_NAME_PERIODS = "periods";
  @SerializedName(SERIALIZED_NAME_PERIODS)
  private Integer periods;

  public static final String SERIALIZED_NAME_RECURRING_PRICE_MONEY = "recurring_price_money";
  @SerializedName(SERIALIZED_NAME_RECURRING_PRICE_MONEY)
  private Money recurringPriceMoney;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public SubscriptionPhase() {
  }

  public SubscriptionPhase cadence(String cadence) {
    this.cadence = cadence;
    return this;
  }

  /**
   * The billing cadence of the phase. For example, weekly or monthly. This field cannot be changed after a &#x60;SubscriptionPhase&#x60; is created.
   * @return cadence
   */
  @javax.annotation.Nonnull
  public String getCadence() {
    return cadence;
  }

  public void setCadence(String cadence) {
    this.cadence = cadence;
  }


  public SubscriptionPhase ordinal(Long ordinal) {
    this.ordinal = ordinal;
    return this;
  }

  /**
   * The position this phase appears in the sequence of phases defined for the plan, indexed from 0. This field cannot be changed after a &#x60;SubscriptionPhase&#x60; is created.
   * @return ordinal
   */
  @javax.annotation.Nullable
  public Long getOrdinal() {
    return ordinal;
  }

  public void setOrdinal(Long ordinal) {
    this.ordinal = ordinal;
  }


  public SubscriptionPhase periods(Integer periods) {
    this.periods = periods;
    return this;
  }

  /**
   * The number of &#x60;cadence&#x60;s the phase lasts. If not set, the phase never ends. Only the last phase can be indefinite. This field cannot be changed after a &#x60;SubscriptionPhase&#x60; is created.
   * @return periods
   */
  @javax.annotation.Nullable
  public Integer getPeriods() {
    return periods;
  }

  public void setPeriods(Integer periods) {
    this.periods = periods;
  }


  public SubscriptionPhase recurringPriceMoney(Money recurringPriceMoney) {
    this.recurringPriceMoney = recurringPriceMoney;
    return this;
  }

  /**
   * Get recurringPriceMoney
   * @return recurringPriceMoney
   */
  @javax.annotation.Nonnull
  public Money getRecurringPriceMoney() {
    return recurringPriceMoney;
  }

  public void setRecurringPriceMoney(Money recurringPriceMoney) {
    this.recurringPriceMoney = recurringPriceMoney;
  }


  public SubscriptionPhase uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * The Square-assigned ID of the subscription phase. This field cannot be changed after a &#x60;SubscriptionPhase&#x60; is created.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionPhase subscriptionPhase = (SubscriptionPhase) o;
    return Objects.equals(this.cadence, subscriptionPhase.cadence) &&
        Objects.equals(this.ordinal, subscriptionPhase.ordinal) &&
        Objects.equals(this.periods, subscriptionPhase.periods) &&
        Objects.equals(this.recurringPriceMoney, subscriptionPhase.recurringPriceMoney) &&
        Objects.equals(this.uid, subscriptionPhase.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cadence, ordinal, periods, recurringPriceMoney, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionPhase {\n");
    sb.append("    cadence: ").append(toIndentedString(cadence)).append("\n");
    sb.append("    ordinal: ").append(toIndentedString(ordinal)).append("\n");
    sb.append("    periods: ").append(toIndentedString(periods)).append("\n");
    sb.append("    recurringPriceMoney: ").append(toIndentedString(recurringPriceMoney)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cadence");
    openapiFields.add("ordinal");
    openapiFields.add("periods");
    openapiFields.add("recurring_price_money");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cadence");
    openapiRequiredFields.add("recurring_price_money");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionPhase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionPhase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionPhase is not found in the empty JSON string", SubscriptionPhase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionPhase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionPhase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubscriptionPhase.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("cadence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cadence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cadence").toString()));
      }
      // validate the required field `recurring_price_money`
      Money.validateJsonElement(jsonObj.get("recurring_price_money"));
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionPhase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionPhase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionPhase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionPhase.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionPhase>() {
           @Override
           public void write(JsonWriter out, SubscriptionPhase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionPhase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionPhase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionPhase
   * @throws IOException if the JSON string is invalid with respect to SubscriptionPhase
   */
  public static SubscriptionPhase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionPhase.class);
  }

  /**
   * Convert an instance of SubscriptionPhase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

