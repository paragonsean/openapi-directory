/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.V1Money;
import org.openapitools.client.model.V1PaymentSurcharge;
import org.openapitools.client.model.V1PaymentTax;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V1Refund
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V1Refund {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_IS_EXCHANGE = "is_exchange";
  @SerializedName(SERIALIZED_NAME_IS_EXCHANGE)
  private Boolean isExchange;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_PAYMENT_ID = "payment_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  private String paymentId;

  public static final String SERIALIZED_NAME_PROCESSED_AT = "processed_at";
  @SerializedName(SERIALIZED_NAME_PROCESSED_AT)
  private String processedAt;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_REFUNDED_ADDITIVE_TAX = "refunded_additive_tax";
  @SerializedName(SERIALIZED_NAME_REFUNDED_ADDITIVE_TAX)
  private List<V1PaymentTax> refundedAdditiveTax = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFUNDED_ADDITIVE_TAX_MONEY = "refunded_additive_tax_money";
  @SerializedName(SERIALIZED_NAME_REFUNDED_ADDITIVE_TAX_MONEY)
  private V1Money refundedAdditiveTaxMoney;

  public static final String SERIALIZED_NAME_REFUNDED_DISCOUNT_MONEY = "refunded_discount_money";
  @SerializedName(SERIALIZED_NAME_REFUNDED_DISCOUNT_MONEY)
  private V1Money refundedDiscountMoney;

  public static final String SERIALIZED_NAME_REFUNDED_INCLUSIVE_TAX = "refunded_inclusive_tax";
  @SerializedName(SERIALIZED_NAME_REFUNDED_INCLUSIVE_TAX)
  private List<V1PaymentTax> refundedInclusiveTax = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFUNDED_INCLUSIVE_TAX_MONEY = "refunded_inclusive_tax_money";
  @SerializedName(SERIALIZED_NAME_REFUNDED_INCLUSIVE_TAX_MONEY)
  private V1Money refundedInclusiveTaxMoney;

  public static final String SERIALIZED_NAME_REFUNDED_MONEY = "refunded_money";
  @SerializedName(SERIALIZED_NAME_REFUNDED_MONEY)
  private V1Money refundedMoney;

  public static final String SERIALIZED_NAME_REFUNDED_PROCESSING_FEE_MONEY = "refunded_processing_fee_money";
  @SerializedName(SERIALIZED_NAME_REFUNDED_PROCESSING_FEE_MONEY)
  private V1Money refundedProcessingFeeMoney;

  public static final String SERIALIZED_NAME_REFUNDED_SURCHARGE_MONEY = "refunded_surcharge_money";
  @SerializedName(SERIALIZED_NAME_REFUNDED_SURCHARGE_MONEY)
  private V1Money refundedSurchargeMoney;

  public static final String SERIALIZED_NAME_REFUNDED_SURCHARGES = "refunded_surcharges";
  @SerializedName(SERIALIZED_NAME_REFUNDED_SURCHARGES)
  private List<V1PaymentSurcharge> refundedSurcharges = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFUNDED_TAX_MONEY = "refunded_tax_money";
  @SerializedName(SERIALIZED_NAME_REFUNDED_TAX_MONEY)
  private V1Money refundedTaxMoney;

  public static final String SERIALIZED_NAME_REFUNDED_TIP_MONEY = "refunded_tip_money";
  @SerializedName(SERIALIZED_NAME_REFUNDED_TIP_MONEY)
  private V1Money refundedTipMoney;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public V1Refund() {
  }

  public V1Refund createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The time when the merchant initiated the refund for Square to process, in ISO 8601 format.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public V1Refund isExchange(Boolean isExchange) {
    this.isExchange = isExchange;
    return this;
  }

  /**
   * Indicates whether or not the refund is associated with an exchange. If is_exchange is true, the refund reflects the value of goods returned in the exchange not the total money refunded.
   * @return isExchange
   */
  @javax.annotation.Nullable
  public Boolean getIsExchange() {
    return isExchange;
  }

  public void setIsExchange(Boolean isExchange) {
    this.isExchange = isExchange;
  }


  public V1Refund merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  /**
   * 
   * @return merchantId
   */
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public V1Refund paymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  /**
   * A Square-issued ID associated with the refund. For single-tender refunds, payment_id is the ID of the original payment ID. For split-tender refunds, payment_id is the ID of the original tender. For exchange-based refunds (is_exchange &#x3D;&#x3D; true), payment_id is the ID of the original payment ID even if the payment includes other tenders.
   * @return paymentId
   */
  @javax.annotation.Nullable
  public String getPaymentId() {
    return paymentId;
  }

  public void setPaymentId(String paymentId) {
    this.paymentId = paymentId;
  }


  public V1Refund processedAt(String processedAt) {
    this.processedAt = processedAt;
    return this;
  }

  /**
   * The time when Square processed the refund on behalf of the merchant, in ISO 8601 format.
   * @return processedAt
   */
  @javax.annotation.Nullable
  public String getProcessedAt() {
    return processedAt;
  }

  public void setProcessedAt(String processedAt) {
    this.processedAt = processedAt;
  }


  public V1Refund reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The merchant-specified reason for the refund.
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public V1Refund refundedAdditiveTax(List<V1PaymentTax> refundedAdditiveTax) {
    this.refundedAdditiveTax = refundedAdditiveTax;
    return this;
  }

  public V1Refund addRefundedAdditiveTaxItem(V1PaymentTax refundedAdditiveTaxItem) {
    if (this.refundedAdditiveTax == null) {
      this.refundedAdditiveTax = new ArrayList<>();
    }
    this.refundedAdditiveTax.add(refundedAdditiveTaxItem);
    return this;
  }

  /**
   * All of the additive taxes associated with the refund.
   * @return refundedAdditiveTax
   */
  @javax.annotation.Nullable
  public List<V1PaymentTax> getRefundedAdditiveTax() {
    return refundedAdditiveTax;
  }

  public void setRefundedAdditiveTax(List<V1PaymentTax> refundedAdditiveTax) {
    this.refundedAdditiveTax = refundedAdditiveTax;
  }


  public V1Refund refundedAdditiveTaxMoney(V1Money refundedAdditiveTaxMoney) {
    this.refundedAdditiveTaxMoney = refundedAdditiveTaxMoney;
    return this;
  }

  /**
   * Get refundedAdditiveTaxMoney
   * @return refundedAdditiveTaxMoney
   */
  @javax.annotation.Nullable
  public V1Money getRefundedAdditiveTaxMoney() {
    return refundedAdditiveTaxMoney;
  }

  public void setRefundedAdditiveTaxMoney(V1Money refundedAdditiveTaxMoney) {
    this.refundedAdditiveTaxMoney = refundedAdditiveTaxMoney;
  }


  public V1Refund refundedDiscountMoney(V1Money refundedDiscountMoney) {
    this.refundedDiscountMoney = refundedDiscountMoney;
    return this;
  }

  /**
   * Get refundedDiscountMoney
   * @return refundedDiscountMoney
   */
  @javax.annotation.Nullable
  public V1Money getRefundedDiscountMoney() {
    return refundedDiscountMoney;
  }

  public void setRefundedDiscountMoney(V1Money refundedDiscountMoney) {
    this.refundedDiscountMoney = refundedDiscountMoney;
  }


  public V1Refund refundedInclusiveTax(List<V1PaymentTax> refundedInclusiveTax) {
    this.refundedInclusiveTax = refundedInclusiveTax;
    return this;
  }

  public V1Refund addRefundedInclusiveTaxItem(V1PaymentTax refundedInclusiveTaxItem) {
    if (this.refundedInclusiveTax == null) {
      this.refundedInclusiveTax = new ArrayList<>();
    }
    this.refundedInclusiveTax.add(refundedInclusiveTaxItem);
    return this;
  }

  /**
   * All of the inclusive taxes associated with the refund.
   * @return refundedInclusiveTax
   */
  @javax.annotation.Nullable
  public List<V1PaymentTax> getRefundedInclusiveTax() {
    return refundedInclusiveTax;
  }

  public void setRefundedInclusiveTax(List<V1PaymentTax> refundedInclusiveTax) {
    this.refundedInclusiveTax = refundedInclusiveTax;
  }


  public V1Refund refundedInclusiveTaxMoney(V1Money refundedInclusiveTaxMoney) {
    this.refundedInclusiveTaxMoney = refundedInclusiveTaxMoney;
    return this;
  }

  /**
   * Get refundedInclusiveTaxMoney
   * @return refundedInclusiveTaxMoney
   */
  @javax.annotation.Nullable
  public V1Money getRefundedInclusiveTaxMoney() {
    return refundedInclusiveTaxMoney;
  }

  public void setRefundedInclusiveTaxMoney(V1Money refundedInclusiveTaxMoney) {
    this.refundedInclusiveTaxMoney = refundedInclusiveTaxMoney;
  }


  public V1Refund refundedMoney(V1Money refundedMoney) {
    this.refundedMoney = refundedMoney;
    return this;
  }

  /**
   * Get refundedMoney
   * @return refundedMoney
   */
  @javax.annotation.Nullable
  public V1Money getRefundedMoney() {
    return refundedMoney;
  }

  public void setRefundedMoney(V1Money refundedMoney) {
    this.refundedMoney = refundedMoney;
  }


  public V1Refund refundedProcessingFeeMoney(V1Money refundedProcessingFeeMoney) {
    this.refundedProcessingFeeMoney = refundedProcessingFeeMoney;
    return this;
  }

  /**
   * Get refundedProcessingFeeMoney
   * @return refundedProcessingFeeMoney
   */
  @javax.annotation.Nullable
  public V1Money getRefundedProcessingFeeMoney() {
    return refundedProcessingFeeMoney;
  }

  public void setRefundedProcessingFeeMoney(V1Money refundedProcessingFeeMoney) {
    this.refundedProcessingFeeMoney = refundedProcessingFeeMoney;
  }


  public V1Refund refundedSurchargeMoney(V1Money refundedSurchargeMoney) {
    this.refundedSurchargeMoney = refundedSurchargeMoney;
    return this;
  }

  /**
   * Get refundedSurchargeMoney
   * @return refundedSurchargeMoney
   */
  @javax.annotation.Nullable
  public V1Money getRefundedSurchargeMoney() {
    return refundedSurchargeMoney;
  }

  public void setRefundedSurchargeMoney(V1Money refundedSurchargeMoney) {
    this.refundedSurchargeMoney = refundedSurchargeMoney;
  }


  public V1Refund refundedSurcharges(List<V1PaymentSurcharge> refundedSurcharges) {
    this.refundedSurcharges = refundedSurcharges;
    return this;
  }

  public V1Refund addRefundedSurchargesItem(V1PaymentSurcharge refundedSurchargesItem) {
    if (this.refundedSurcharges == null) {
      this.refundedSurcharges = new ArrayList<>();
    }
    this.refundedSurcharges.add(refundedSurchargesItem);
    return this;
  }

  /**
   * A list of all surcharges associated with the refund.
   * @return refundedSurcharges
   */
  @javax.annotation.Nullable
  public List<V1PaymentSurcharge> getRefundedSurcharges() {
    return refundedSurcharges;
  }

  public void setRefundedSurcharges(List<V1PaymentSurcharge> refundedSurcharges) {
    this.refundedSurcharges = refundedSurcharges;
  }


  public V1Refund refundedTaxMoney(V1Money refundedTaxMoney) {
    this.refundedTaxMoney = refundedTaxMoney;
    return this;
  }

  /**
   * Get refundedTaxMoney
   * @return refundedTaxMoney
   */
  @javax.annotation.Nullable
  public V1Money getRefundedTaxMoney() {
    return refundedTaxMoney;
  }

  public void setRefundedTaxMoney(V1Money refundedTaxMoney) {
    this.refundedTaxMoney = refundedTaxMoney;
  }


  public V1Refund refundedTipMoney(V1Money refundedTipMoney) {
    this.refundedTipMoney = refundedTipMoney;
    return this;
  }

  /**
   * Get refundedTipMoney
   * @return refundedTipMoney
   */
  @javax.annotation.Nullable
  public V1Money getRefundedTipMoney() {
    return refundedTipMoney;
  }

  public void setRefundedTipMoney(V1Money refundedTipMoney) {
    this.refundedTipMoney = refundedTipMoney;
  }


  public V1Refund type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of refund
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1Refund v1Refund = (V1Refund) o;
    return Objects.equals(this.createdAt, v1Refund.createdAt) &&
        Objects.equals(this.isExchange, v1Refund.isExchange) &&
        Objects.equals(this.merchantId, v1Refund.merchantId) &&
        Objects.equals(this.paymentId, v1Refund.paymentId) &&
        Objects.equals(this.processedAt, v1Refund.processedAt) &&
        Objects.equals(this.reason, v1Refund.reason) &&
        Objects.equals(this.refundedAdditiveTax, v1Refund.refundedAdditiveTax) &&
        Objects.equals(this.refundedAdditiveTaxMoney, v1Refund.refundedAdditiveTaxMoney) &&
        Objects.equals(this.refundedDiscountMoney, v1Refund.refundedDiscountMoney) &&
        Objects.equals(this.refundedInclusiveTax, v1Refund.refundedInclusiveTax) &&
        Objects.equals(this.refundedInclusiveTaxMoney, v1Refund.refundedInclusiveTaxMoney) &&
        Objects.equals(this.refundedMoney, v1Refund.refundedMoney) &&
        Objects.equals(this.refundedProcessingFeeMoney, v1Refund.refundedProcessingFeeMoney) &&
        Objects.equals(this.refundedSurchargeMoney, v1Refund.refundedSurchargeMoney) &&
        Objects.equals(this.refundedSurcharges, v1Refund.refundedSurcharges) &&
        Objects.equals(this.refundedTaxMoney, v1Refund.refundedTaxMoney) &&
        Objects.equals(this.refundedTipMoney, v1Refund.refundedTipMoney) &&
        Objects.equals(this.type, v1Refund.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, isExchange, merchantId, paymentId, processedAt, reason, refundedAdditiveTax, refundedAdditiveTaxMoney, refundedDiscountMoney, refundedInclusiveTax, refundedInclusiveTaxMoney, refundedMoney, refundedProcessingFeeMoney, refundedSurchargeMoney, refundedSurcharges, refundedTaxMoney, refundedTipMoney, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1Refund {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    isExchange: ").append(toIndentedString(isExchange)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    processedAt: ").append(toIndentedString(processedAt)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    refundedAdditiveTax: ").append(toIndentedString(refundedAdditiveTax)).append("\n");
    sb.append("    refundedAdditiveTaxMoney: ").append(toIndentedString(refundedAdditiveTaxMoney)).append("\n");
    sb.append("    refundedDiscountMoney: ").append(toIndentedString(refundedDiscountMoney)).append("\n");
    sb.append("    refundedInclusiveTax: ").append(toIndentedString(refundedInclusiveTax)).append("\n");
    sb.append("    refundedInclusiveTaxMoney: ").append(toIndentedString(refundedInclusiveTaxMoney)).append("\n");
    sb.append("    refundedMoney: ").append(toIndentedString(refundedMoney)).append("\n");
    sb.append("    refundedProcessingFeeMoney: ").append(toIndentedString(refundedProcessingFeeMoney)).append("\n");
    sb.append("    refundedSurchargeMoney: ").append(toIndentedString(refundedSurchargeMoney)).append("\n");
    sb.append("    refundedSurcharges: ").append(toIndentedString(refundedSurcharges)).append("\n");
    sb.append("    refundedTaxMoney: ").append(toIndentedString(refundedTaxMoney)).append("\n");
    sb.append("    refundedTipMoney: ").append(toIndentedString(refundedTipMoney)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("is_exchange");
    openapiFields.add("merchant_id");
    openapiFields.add("payment_id");
    openapiFields.add("processed_at");
    openapiFields.add("reason");
    openapiFields.add("refunded_additive_tax");
    openapiFields.add("refunded_additive_tax_money");
    openapiFields.add("refunded_discount_money");
    openapiFields.add("refunded_inclusive_tax");
    openapiFields.add("refunded_inclusive_tax_money");
    openapiFields.add("refunded_money");
    openapiFields.add("refunded_processing_fee_money");
    openapiFields.add("refunded_surcharge_money");
    openapiFields.add("refunded_surcharges");
    openapiFields.add("refunded_tax_money");
    openapiFields.add("refunded_tip_money");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1Refund
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1Refund.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1Refund is not found in the empty JSON string", V1Refund.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1Refund.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1Refund` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonNull()) && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if ((jsonObj.get("payment_id") != null && !jsonObj.get("payment_id").isJsonNull()) && !jsonObj.get("payment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_id").toString()));
      }
      if ((jsonObj.get("processed_at") != null && !jsonObj.get("processed_at").isJsonNull()) && !jsonObj.get("processed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processed_at").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if (jsonObj.get("refunded_additive_tax") != null && !jsonObj.get("refunded_additive_tax").isJsonNull()) {
        JsonArray jsonArrayrefundedAdditiveTax = jsonObj.getAsJsonArray("refunded_additive_tax");
        if (jsonArrayrefundedAdditiveTax != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refunded_additive_tax").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refunded_additive_tax` to be an array in the JSON string but got `%s`", jsonObj.get("refunded_additive_tax").toString()));
          }

          // validate the optional field `refunded_additive_tax` (array)
          for (int i = 0; i < jsonArrayrefundedAdditiveTax.size(); i++) {
            V1PaymentTax.validateJsonElement(jsonArrayrefundedAdditiveTax.get(i));
          };
        }
      }
      // validate the optional field `refunded_additive_tax_money`
      if (jsonObj.get("refunded_additive_tax_money") != null && !jsonObj.get("refunded_additive_tax_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("refunded_additive_tax_money"));
      }
      // validate the optional field `refunded_discount_money`
      if (jsonObj.get("refunded_discount_money") != null && !jsonObj.get("refunded_discount_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("refunded_discount_money"));
      }
      if (jsonObj.get("refunded_inclusive_tax") != null && !jsonObj.get("refunded_inclusive_tax").isJsonNull()) {
        JsonArray jsonArrayrefundedInclusiveTax = jsonObj.getAsJsonArray("refunded_inclusive_tax");
        if (jsonArrayrefundedInclusiveTax != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refunded_inclusive_tax").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refunded_inclusive_tax` to be an array in the JSON string but got `%s`", jsonObj.get("refunded_inclusive_tax").toString()));
          }

          // validate the optional field `refunded_inclusive_tax` (array)
          for (int i = 0; i < jsonArrayrefundedInclusiveTax.size(); i++) {
            V1PaymentTax.validateJsonElement(jsonArrayrefundedInclusiveTax.get(i));
          };
        }
      }
      // validate the optional field `refunded_inclusive_tax_money`
      if (jsonObj.get("refunded_inclusive_tax_money") != null && !jsonObj.get("refunded_inclusive_tax_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("refunded_inclusive_tax_money"));
      }
      // validate the optional field `refunded_money`
      if (jsonObj.get("refunded_money") != null && !jsonObj.get("refunded_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("refunded_money"));
      }
      // validate the optional field `refunded_processing_fee_money`
      if (jsonObj.get("refunded_processing_fee_money") != null && !jsonObj.get("refunded_processing_fee_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("refunded_processing_fee_money"));
      }
      // validate the optional field `refunded_surcharge_money`
      if (jsonObj.get("refunded_surcharge_money") != null && !jsonObj.get("refunded_surcharge_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("refunded_surcharge_money"));
      }
      if (jsonObj.get("refunded_surcharges") != null && !jsonObj.get("refunded_surcharges").isJsonNull()) {
        JsonArray jsonArrayrefundedSurcharges = jsonObj.getAsJsonArray("refunded_surcharges");
        if (jsonArrayrefundedSurcharges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refunded_surcharges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refunded_surcharges` to be an array in the JSON string but got `%s`", jsonObj.get("refunded_surcharges").toString()));
          }

          // validate the optional field `refunded_surcharges` (array)
          for (int i = 0; i < jsonArrayrefundedSurcharges.size(); i++) {
            V1PaymentSurcharge.validateJsonElement(jsonArrayrefundedSurcharges.get(i));
          };
        }
      }
      // validate the optional field `refunded_tax_money`
      if (jsonObj.get("refunded_tax_money") != null && !jsonObj.get("refunded_tax_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("refunded_tax_money"));
      }
      // validate the optional field `refunded_tip_money`
      if (jsonObj.get("refunded_tip_money") != null && !jsonObj.get("refunded_tip_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("refunded_tip_money"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1Refund.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1Refund' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1Refund> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1Refund.class));

       return (TypeAdapter<T>) new TypeAdapter<V1Refund>() {
           @Override
           public void write(JsonWriter out, V1Refund value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1Refund read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1Refund given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1Refund
   * @throws IOException if the JSON string is invalid with respect to V1Refund
   */
  public static V1Refund fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1Refund.class);
  }

  /**
   * Convert an instance of V1Refund to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

