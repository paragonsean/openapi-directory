/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a customer subscription to a subscription plan. For an overview of the &#x60;Subscription&#x60; type, see [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Subscription {
  public static final String SERIALIZED_NAME_CANCELED_DATE = "canceled_date";
  @SerializedName(SERIALIZED_NAME_CANCELED_DATE)
  private String canceledDate;

  public static final String SERIALIZED_NAME_CARD_ID = "card_id";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  public static final String SERIALIZED_NAME_CHARGED_THROUGH_DATE = "charged_through_date";
  @SerializedName(SERIALIZED_NAME_CHARGED_THROUGH_DATE)
  private String chargedThroughDate;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INVOICE_IDS = "invoice_ids";
  @SerializedName(SERIALIZED_NAME_INVOICE_IDS)
  private List<String> invoiceIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_PLAN_ID = "plan_id";
  @SerializedName(SERIALIZED_NAME_PLAN_ID)
  private String planId;

  public static final String SERIALIZED_NAME_PRICE_OVERRIDE_MONEY = "price_override_money";
  @SerializedName(SERIALIZED_NAME_PRICE_OVERRIDE_MONEY)
  private Money priceOverrideMoney;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TAX_PERCENTAGE = "tax_percentage";
  @SerializedName(SERIALIZED_NAME_TAX_PERCENTAGE)
  private String taxPercentage;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Long version;

  public Subscription() {
  }

  public Subscription canceledDate(String canceledDate) {
    this.canceledDate = canceledDate;
    return this;
  }

  /**
   * The subscription cancellation date, in YYYY-MM-DD format (for example, 2013-01-15). On this date, the subscription status changes to &#x60;CANCELED&#x60; and the subscription billing stops. If you don&#39;t set this field, the subscription plan dictates if and when subscription ends.  You cannot update this field, you can only clear it.
   * @return canceledDate
   */
  @javax.annotation.Nullable
  public String getCanceledDate() {
    return canceledDate;
  }

  public void setCanceledDate(String canceledDate) {
    this.canceledDate = canceledDate;
  }


  public Subscription cardId(String cardId) {
    this.cardId = cardId;
    return this;
  }

  /**
   * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card) that is charged for the subscription.
   * @return cardId
   */
  @javax.annotation.Nullable
  public String getCardId() {
    return cardId;
  }

  public void setCardId(String cardId) {
    this.cardId = cardId;
  }


  public Subscription chargedThroughDate(String chargedThroughDate) {
    this.chargedThroughDate = chargedThroughDate;
    return this;
  }

  /**
   * The date up to which the customer is invoiced for the subscription, in YYYY-MM-DD format (for example, 2013-01-15).  After the invoice is sent for a given billing period, this date will be the last day of the billing period. For example, suppose for the month of May a customer gets an invoice (or charged the card) on May 1. For the monthly billing scenario, this date is then set to May 31.
   * @return chargedThroughDate
   */
  @javax.annotation.Nullable
  public String getChargedThroughDate() {
    return chargedThroughDate;
  }

  public void setChargedThroughDate(String chargedThroughDate) {
    this.chargedThroughDate = chargedThroughDate;
  }


  public Subscription createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The timestamp when the subscription was created, in RFC 3339 format.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Subscription customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * The ID of the associated [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public Subscription id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Square-assigned ID of the subscription.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Subscription invoiceIds(List<String> invoiceIds) {
    this.invoiceIds = invoiceIds;
    return this;
  }

  public Subscription addInvoiceIdsItem(String invoiceIdsItem) {
    if (this.invoiceIds == null) {
      this.invoiceIds = new ArrayList<>();
    }
    this.invoiceIds.add(invoiceIdsItem);
    return this;
  }

  /**
   * The IDs of the [invoices](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) created for the subscription, listed in order when the invoices were created (oldest invoices appear first).
   * @return invoiceIds
   */
  @javax.annotation.Nullable
  public List<String> getInvoiceIds() {
    return invoiceIds;
  }

  public void setInvoiceIds(List<String> invoiceIds) {
    this.invoiceIds = invoiceIds;
  }


  public Subscription locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The ID of the location associated with the subscription.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public Subscription planId(String planId) {
    this.planId = planId;
    return this;
  }

  /**
   * The ID of the associated [subscription plan](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogSubscriptionPlan).
   * @return planId
   */
  @javax.annotation.Nullable
  public String getPlanId() {
    return planId;
  }

  public void setPlanId(String planId) {
    this.planId = planId;
  }


  public Subscription priceOverrideMoney(Money priceOverrideMoney) {
    this.priceOverrideMoney = priceOverrideMoney;
    return this;
  }

  /**
   * Get priceOverrideMoney
   * @return priceOverrideMoney
   */
  @javax.annotation.Nullable
  public Money getPriceOverrideMoney() {
    return priceOverrideMoney;
  }

  public void setPriceOverrideMoney(Money priceOverrideMoney) {
    this.priceOverrideMoney = priceOverrideMoney;
  }


  public Subscription startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The start date of the subscription, in YYYY-MM-DD format (for example, 2013-01-15).
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public Subscription status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The current status of the subscription.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Subscription taxPercentage(String taxPercentage) {
    this.taxPercentage = taxPercentage;
    return this;
  }

  /**
   * The tax amount applied when billing the subscription. The percentage is expressed in decimal form, using a &#x60;&#39;.&#39;&#x60; as the decimal separator and without a &#x60;&#39;%&#39;&#x60; sign. For example, a value of &#x60;7.5&#x60; corresponds to 7.5%.
   * @return taxPercentage
   */
  @javax.annotation.Nullable
  public String getTaxPercentage() {
    return taxPercentage;
  }

  public void setTaxPercentage(String taxPercentage) {
    this.taxPercentage = taxPercentage;
  }


  public Subscription timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Timezone that will be used in date calculations for the subscription. Defaults to the timezone of the location based on &#x60;location_id&#x60;. Format: the IANA Timezone Database identifier for the location timezone (for example, &#x60;America/Los_Angeles&#x60;).
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public Subscription version(Long version) {
    this.version = version;
    return this;
  }

  /**
   * The version of the object. When updating an object, the version supplied must match the version in the database, otherwise the write will be rejected as conflicting.
   * @return version
   */
  @javax.annotation.Nullable
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscription subscription = (Subscription) o;
    return Objects.equals(this.canceledDate, subscription.canceledDate) &&
        Objects.equals(this.cardId, subscription.cardId) &&
        Objects.equals(this.chargedThroughDate, subscription.chargedThroughDate) &&
        Objects.equals(this.createdAt, subscription.createdAt) &&
        Objects.equals(this.customerId, subscription.customerId) &&
        Objects.equals(this.id, subscription.id) &&
        Objects.equals(this.invoiceIds, subscription.invoiceIds) &&
        Objects.equals(this.locationId, subscription.locationId) &&
        Objects.equals(this.planId, subscription.planId) &&
        Objects.equals(this.priceOverrideMoney, subscription.priceOverrideMoney) &&
        Objects.equals(this.startDate, subscription.startDate) &&
        Objects.equals(this.status, subscription.status) &&
        Objects.equals(this.taxPercentage, subscription.taxPercentage) &&
        Objects.equals(this.timezone, subscription.timezone) &&
        Objects.equals(this.version, subscription.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canceledDate, cardId, chargedThroughDate, createdAt, customerId, id, invoiceIds, locationId, planId, priceOverrideMoney, startDate, status, taxPercentage, timezone, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscription {\n");
    sb.append("    canceledDate: ").append(toIndentedString(canceledDate)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    chargedThroughDate: ").append(toIndentedString(chargedThroughDate)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    invoiceIds: ").append(toIndentedString(invoiceIds)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("    priceOverrideMoney: ").append(toIndentedString(priceOverrideMoney)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taxPercentage: ").append(toIndentedString(taxPercentage)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canceled_date");
    openapiFields.add("card_id");
    openapiFields.add("charged_through_date");
    openapiFields.add("created_at");
    openapiFields.add("customer_id");
    openapiFields.add("id");
    openapiFields.add("invoice_ids");
    openapiFields.add("location_id");
    openapiFields.add("plan_id");
    openapiFields.add("price_override_money");
    openapiFields.add("start_date");
    openapiFields.add("status");
    openapiFields.add("tax_percentage");
    openapiFields.add("timezone");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Subscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Subscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subscription is not found in the empty JSON string", Subscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Subscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Subscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("canceled_date") != null && !jsonObj.get("canceled_date").isJsonNull()) && !jsonObj.get("canceled_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canceled_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canceled_date").toString()));
      }
      if ((jsonObj.get("card_id") != null && !jsonObj.get("card_id").isJsonNull()) && !jsonObj.get("card_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_id").toString()));
      }
      if ((jsonObj.get("charged_through_date") != null && !jsonObj.get("charged_through_date").isJsonNull()) && !jsonObj.get("charged_through_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `charged_through_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("charged_through_date").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("invoice_ids") != null && !jsonObj.get("invoice_ids").isJsonNull() && !jsonObj.get("invoice_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_ids` to be an array in the JSON string but got `%s`", jsonObj.get("invoice_ids").toString()));
      }
      if ((jsonObj.get("location_id") != null && !jsonObj.get("location_id").isJsonNull()) && !jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      if ((jsonObj.get("plan_id") != null && !jsonObj.get("plan_id").isJsonNull()) && !jsonObj.get("plan_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan_id").toString()));
      }
      // validate the optional field `price_override_money`
      if (jsonObj.get("price_override_money") != null && !jsonObj.get("price_override_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("price_override_money"));
      }
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("tax_percentage") != null && !jsonObj.get("tax_percentage").isJsonNull()) && !jsonObj.get("tax_percentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_percentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_percentage").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subscription.class));

       return (TypeAdapter<T>) new TypeAdapter<Subscription>() {
           @Override
           public void write(JsonWriter out, Subscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Subscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Subscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Subscription
   * @throws IOException if the JSON string is invalid with respect to Subscription
   */
  public static Subscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subscription.class);
  }

  /**
   * Convert an instance of Subscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

