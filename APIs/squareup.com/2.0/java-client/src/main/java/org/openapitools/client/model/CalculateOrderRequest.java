/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Order;
import org.openapitools.client.model.OrderReward;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CalculateOrderRequest {
  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Order order;

  public static final String SERIALIZED_NAME_PROPOSED_REWARDS = "proposed_rewards";
  @SerializedName(SERIALIZED_NAME_PROPOSED_REWARDS)
  private List<OrderReward> proposedRewards = new ArrayList<>();

  public CalculateOrderRequest() {
  }

  public CalculateOrderRequest order(Order order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nonnull
  public Order getOrder() {
    return order;
  }

  public void setOrder(Order order) {
    this.order = order;
  }


  public CalculateOrderRequest proposedRewards(List<OrderReward> proposedRewards) {
    this.proposedRewards = proposedRewards;
    return this;
  }

  public CalculateOrderRequest addProposedRewardsItem(OrderReward proposedRewardsItem) {
    if (this.proposedRewards == null) {
      this.proposedRewards = new ArrayList<>();
    }
    this.proposedRewards.add(proposedRewardsItem);
    return this;
  }

  /**
   * Identifies one or more loyalty reward tiers to apply during the order calculation. The discounts defined by the reward tiers are added to the order only to preview the effect of applying the specified rewards. The rewards do not correspond to actual redemptions; that is, no &#x60;reward&#x60;s are created. Therefore, the reward &#x60;id&#x60;s are random strings used only to reference the reward tier.
   * @return proposedRewards
   */
  @javax.annotation.Nullable
  public List<OrderReward> getProposedRewards() {
    return proposedRewards;
  }

  public void setProposedRewards(List<OrderReward> proposedRewards) {
    this.proposedRewards = proposedRewards;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculateOrderRequest calculateOrderRequest = (CalculateOrderRequest) o;
    return Objects.equals(this.order, calculateOrderRequest.order) &&
        Objects.equals(this.proposedRewards, calculateOrderRequest.proposedRewards);
  }

  @Override
  public int hashCode() {
    return Objects.hash(order, proposedRewards);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculateOrderRequest {\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    proposedRewards: ").append(toIndentedString(proposedRewards)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("order");
    openapiFields.add("proposed_rewards");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("order");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CalculateOrderRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CalculateOrderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CalculateOrderRequest is not found in the empty JSON string", CalculateOrderRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CalculateOrderRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CalculateOrderRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CalculateOrderRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `order`
      Order.validateJsonElement(jsonObj.get("order"));
      if (jsonObj.get("proposed_rewards") != null && !jsonObj.get("proposed_rewards").isJsonNull()) {
        JsonArray jsonArrayproposedRewards = jsonObj.getAsJsonArray("proposed_rewards");
        if (jsonArrayproposedRewards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("proposed_rewards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `proposed_rewards` to be an array in the JSON string but got `%s`", jsonObj.get("proposed_rewards").toString()));
          }

          // validate the optional field `proposed_rewards` (array)
          for (int i = 0; i < jsonArrayproposedRewards.size(); i++) {
            OrderReward.validateJsonElement(jsonArrayproposedRewards.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CalculateOrderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CalculateOrderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CalculateOrderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CalculateOrderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CalculateOrderRequest>() {
           @Override
           public void write(JsonWriter out, CalculateOrderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CalculateOrderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CalculateOrderRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CalculateOrderRequest
   * @throws IOException if the JSON string is invalid with respect to CalculateOrderRequest
   */
  public static CalculateOrderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CalculateOrderRequest.class);
  }

  /**
   * Convert an instance of CalculateOrderRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

