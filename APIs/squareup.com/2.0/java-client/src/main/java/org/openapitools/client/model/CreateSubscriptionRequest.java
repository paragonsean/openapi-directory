/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines parameters in a [CreateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/create-subscription) endpoint request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSubscriptionRequest {
  public static final String SERIALIZED_NAME_CANCELED_DATE = "canceled_date";
  @SerializedName(SERIALIZED_NAME_CANCELED_DATE)
  private String canceledDate;

  public static final String SERIALIZED_NAME_CARD_ID = "card_id";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_IDEMPOTENCY_KEY = "idempotency_key";
  @SerializedName(SERIALIZED_NAME_IDEMPOTENCY_KEY)
  private String idempotencyKey;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_PLAN_ID = "plan_id";
  @SerializedName(SERIALIZED_NAME_PLAN_ID)
  private String planId;

  public static final String SERIALIZED_NAME_PRICE_OVERRIDE_MONEY = "price_override_money";
  @SerializedName(SERIALIZED_NAME_PRICE_OVERRIDE_MONEY)
  private Money priceOverrideMoney;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_TAX_PERCENTAGE = "tax_percentage";
  @SerializedName(SERIALIZED_NAME_TAX_PERCENTAGE)
  private String taxPercentage;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public CreateSubscriptionRequest() {
  }

  public CreateSubscriptionRequest canceledDate(String canceledDate) {
    this.canceledDate = canceledDate;
    return this;
  }

  /**
   * The date when the subscription should be canceled, in YYYY-MM-DD format (for example, 2025-02-29). This overrides the plan configuration if it comes before the date the subscription would otherwise end.
   * @return canceledDate
   */
  @javax.annotation.Nullable
  public String getCanceledDate() {
    return canceledDate;
  }

  public void setCanceledDate(String canceledDate) {
    this.canceledDate = canceledDate;
  }


  public CreateSubscriptionRequest cardId(String cardId) {
    this.cardId = cardId;
    return this;
  }

  /**
   * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card) to charge. If not specified, Square sends an invoice via email. For an example to create a customer and add a card on file, see [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).
   * @return cardId
   */
  @javax.annotation.Nullable
  public String getCardId() {
    return cardId;
  }

  public void setCardId(String cardId) {
    this.cardId = cardId;
  }


  public CreateSubscriptionRequest customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.
   * @return customerId
   */
  @javax.annotation.Nonnull
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public CreateSubscriptionRequest idempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
    return this;
  }

  /**
   * A unique string that identifies this &#x60;CreateSubscription&#x60; request. If you do not provide a unique string (or provide an empty string as the value), the endpoint treats each request as independent.  For more information, see [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency).
   * @return idempotencyKey
   */
  @javax.annotation.Nullable
  public String getIdempotencyKey() {
    return idempotencyKey;
  }

  public void setIdempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
  }


  public CreateSubscriptionRequest locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The ID of the location the subscription is associated with.
   * @return locationId
   */
  @javax.annotation.Nonnull
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public CreateSubscriptionRequest planId(String planId) {
    this.planId = planId;
    return this;
  }

  /**
   * The ID of the subscription plan created using the Catalog API. For more information, see [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan) and  [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).
   * @return planId
   */
  @javax.annotation.Nonnull
  public String getPlanId() {
    return planId;
  }

  public void setPlanId(String planId) {
    this.planId = planId;
  }


  public CreateSubscriptionRequest priceOverrideMoney(Money priceOverrideMoney) {
    this.priceOverrideMoney = priceOverrideMoney;
    return this;
  }

  /**
   * Get priceOverrideMoney
   * @return priceOverrideMoney
   */
  @javax.annotation.Nullable
  public Money getPriceOverrideMoney() {
    return priceOverrideMoney;
  }

  public void setPriceOverrideMoney(Money priceOverrideMoney) {
    this.priceOverrideMoney = priceOverrideMoney;
  }


  public CreateSubscriptionRequest startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The start date of the subscription, in YYYY-MM-DD format. For example, 2013-01-15. If the start date is left empty, the subscription begins immediately.
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public CreateSubscriptionRequest taxPercentage(String taxPercentage) {
    this.taxPercentage = taxPercentage;
    return this;
  }

  /**
   * The tax to add when billing the subscription. The percentage is expressed in decimal form, using a &#x60;&#39;.&#39;&#x60; as the decimal separator and without a &#x60;&#39;%&#39;&#x60; sign. For example, a value of 7.5 corresponds to 7.5%.
   * @return taxPercentage
   */
  @javax.annotation.Nullable
  public String getTaxPercentage() {
    return taxPercentage;
  }

  public void setTaxPercentage(String taxPercentage) {
    this.taxPercentage = taxPercentage;
  }


  public CreateSubscriptionRequest timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * The timezone that is used in date calculations for the subscription. If unset, defaults to the location timezone. If a timezone is not configured for the location, defaults to \&quot;America/New_York\&quot;. Format: the IANA Timezone Database identifier for the location timezone. For a list of time zones, see [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSubscriptionRequest createSubscriptionRequest = (CreateSubscriptionRequest) o;
    return Objects.equals(this.canceledDate, createSubscriptionRequest.canceledDate) &&
        Objects.equals(this.cardId, createSubscriptionRequest.cardId) &&
        Objects.equals(this.customerId, createSubscriptionRequest.customerId) &&
        Objects.equals(this.idempotencyKey, createSubscriptionRequest.idempotencyKey) &&
        Objects.equals(this.locationId, createSubscriptionRequest.locationId) &&
        Objects.equals(this.planId, createSubscriptionRequest.planId) &&
        Objects.equals(this.priceOverrideMoney, createSubscriptionRequest.priceOverrideMoney) &&
        Objects.equals(this.startDate, createSubscriptionRequest.startDate) &&
        Objects.equals(this.taxPercentage, createSubscriptionRequest.taxPercentage) &&
        Objects.equals(this.timezone, createSubscriptionRequest.timezone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canceledDate, cardId, customerId, idempotencyKey, locationId, planId, priceOverrideMoney, startDate, taxPercentage, timezone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSubscriptionRequest {\n");
    sb.append("    canceledDate: ").append(toIndentedString(canceledDate)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    idempotencyKey: ").append(toIndentedString(idempotencyKey)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("    priceOverrideMoney: ").append(toIndentedString(priceOverrideMoney)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    taxPercentage: ").append(toIndentedString(taxPercentage)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canceled_date");
    openapiFields.add("card_id");
    openapiFields.add("customer_id");
    openapiFields.add("idempotency_key");
    openapiFields.add("location_id");
    openapiFields.add("plan_id");
    openapiFields.add("price_override_money");
    openapiFields.add("start_date");
    openapiFields.add("tax_percentage");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("customer_id");
    openapiRequiredFields.add("location_id");
    openapiRequiredFields.add("plan_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSubscriptionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSubscriptionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSubscriptionRequest is not found in the empty JSON string", CreateSubscriptionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSubscriptionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSubscriptionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSubscriptionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("canceled_date") != null && !jsonObj.get("canceled_date").isJsonNull()) && !jsonObj.get("canceled_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canceled_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canceled_date").toString()));
      }
      if ((jsonObj.get("card_id") != null && !jsonObj.get("card_id").isJsonNull()) && !jsonObj.get("card_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_id").toString()));
      }
      if (!jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if ((jsonObj.get("idempotency_key") != null && !jsonObj.get("idempotency_key").isJsonNull()) && !jsonObj.get("idempotency_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idempotency_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idempotency_key").toString()));
      }
      if (!jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      if (!jsonObj.get("plan_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan_id").toString()));
      }
      // validate the optional field `price_override_money`
      if (jsonObj.get("price_override_money") != null && !jsonObj.get("price_override_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("price_override_money"));
      }
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      if ((jsonObj.get("tax_percentage") != null && !jsonObj.get("tax_percentage").isJsonNull()) && !jsonObj.get("tax_percentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_percentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_percentage").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSubscriptionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSubscriptionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSubscriptionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSubscriptionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSubscriptionRequest>() {
           @Override
           public void write(JsonWriter out, CreateSubscriptionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSubscriptionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSubscriptionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSubscriptionRequest
   * @throws IOException if the JSON string is invalid with respect to CreateSubscriptionRequest
   */
  public static CreateSubscriptionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSubscriptionRequest.class);
  }

  /**
   * Convert an instance of CreateSubscriptionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

