/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CatalogModifierOverride;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options to control the properties of a &#x60;CatalogModifierList&#x60; applied to a &#x60;CatalogItem&#x60; instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogItemModifierListInfo {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_MAX_SELECTED_MODIFIERS = "max_selected_modifiers";
  @SerializedName(SERIALIZED_NAME_MAX_SELECTED_MODIFIERS)
  private Integer maxSelectedModifiers;

  public static final String SERIALIZED_NAME_MIN_SELECTED_MODIFIERS = "min_selected_modifiers";
  @SerializedName(SERIALIZED_NAME_MIN_SELECTED_MODIFIERS)
  private Integer minSelectedModifiers;

  public static final String SERIALIZED_NAME_MODIFIER_LIST_ID = "modifier_list_id";
  @SerializedName(SERIALIZED_NAME_MODIFIER_LIST_ID)
  private String modifierListId;

  public static final String SERIALIZED_NAME_MODIFIER_OVERRIDES = "modifier_overrides";
  @SerializedName(SERIALIZED_NAME_MODIFIER_OVERRIDES)
  private List<CatalogModifierOverride> modifierOverrides = new ArrayList<>();

  public CatalogItemModifierListInfo() {
  }

  public CatalogItemModifierListInfo enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * If &#x60;true&#x60;, enable this &#x60;CatalogModifierList&#x60;. The default value is &#x60;true&#x60;.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CatalogItemModifierListInfo maxSelectedModifiers(Integer maxSelectedModifiers) {
    this.maxSelectedModifiers = maxSelectedModifiers;
    return this;
  }

  /**
   * If 0 or larger, the largest number of &#x60;CatalogModifier&#x60;s that can be selected from this &#x60;CatalogModifierList&#x60;.
   * @return maxSelectedModifiers
   */
  @javax.annotation.Nullable
  public Integer getMaxSelectedModifiers() {
    return maxSelectedModifiers;
  }

  public void setMaxSelectedModifiers(Integer maxSelectedModifiers) {
    this.maxSelectedModifiers = maxSelectedModifiers;
  }


  public CatalogItemModifierListInfo minSelectedModifiers(Integer minSelectedModifiers) {
    this.minSelectedModifiers = minSelectedModifiers;
    return this;
  }

  /**
   * If 0 or larger, the smallest number of &#x60;CatalogModifier&#x60;s that must be selected from this &#x60;CatalogModifierList&#x60;.
   * @return minSelectedModifiers
   */
  @javax.annotation.Nullable
  public Integer getMinSelectedModifiers() {
    return minSelectedModifiers;
  }

  public void setMinSelectedModifiers(Integer minSelectedModifiers) {
    this.minSelectedModifiers = minSelectedModifiers;
  }


  public CatalogItemModifierListInfo modifierListId(String modifierListId) {
    this.modifierListId = modifierListId;
    return this;
  }

  /**
   * The ID of the &#x60;CatalogModifierList&#x60; controlled by this &#x60;CatalogModifierListInfo&#x60;.
   * @return modifierListId
   */
  @javax.annotation.Nonnull
  public String getModifierListId() {
    return modifierListId;
  }

  public void setModifierListId(String modifierListId) {
    this.modifierListId = modifierListId;
  }


  public CatalogItemModifierListInfo modifierOverrides(List<CatalogModifierOverride> modifierOverrides) {
    this.modifierOverrides = modifierOverrides;
    return this;
  }

  public CatalogItemModifierListInfo addModifierOverridesItem(CatalogModifierOverride modifierOverridesItem) {
    if (this.modifierOverrides == null) {
      this.modifierOverrides = new ArrayList<>();
    }
    this.modifierOverrides.add(modifierOverridesItem);
    return this;
  }

  /**
   * A set of &#x60;CatalogModifierOverride&#x60; objects that override whether a given &#x60;CatalogModifier&#x60; is enabled by default.
   * @return modifierOverrides
   */
  @javax.annotation.Nullable
  public List<CatalogModifierOverride> getModifierOverrides() {
    return modifierOverrides;
  }

  public void setModifierOverrides(List<CatalogModifierOverride> modifierOverrides) {
    this.modifierOverrides = modifierOverrides;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogItemModifierListInfo catalogItemModifierListInfo = (CatalogItemModifierListInfo) o;
    return Objects.equals(this.enabled, catalogItemModifierListInfo.enabled) &&
        Objects.equals(this.maxSelectedModifiers, catalogItemModifierListInfo.maxSelectedModifiers) &&
        Objects.equals(this.minSelectedModifiers, catalogItemModifierListInfo.minSelectedModifiers) &&
        Objects.equals(this.modifierListId, catalogItemModifierListInfo.modifierListId) &&
        Objects.equals(this.modifierOverrides, catalogItemModifierListInfo.modifierOverrides);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, maxSelectedModifiers, minSelectedModifiers, modifierListId, modifierOverrides);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogItemModifierListInfo {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    maxSelectedModifiers: ").append(toIndentedString(maxSelectedModifiers)).append("\n");
    sb.append("    minSelectedModifiers: ").append(toIndentedString(minSelectedModifiers)).append("\n");
    sb.append("    modifierListId: ").append(toIndentedString(modifierListId)).append("\n");
    sb.append("    modifierOverrides: ").append(toIndentedString(modifierOverrides)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("max_selected_modifiers");
    openapiFields.add("min_selected_modifiers");
    openapiFields.add("modifier_list_id");
    openapiFields.add("modifier_overrides");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("modifier_list_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogItemModifierListInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogItemModifierListInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogItemModifierListInfo is not found in the empty JSON string", CatalogItemModifierListInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogItemModifierListInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogItemModifierListInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogItemModifierListInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("modifier_list_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifier_list_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifier_list_id").toString()));
      }
      if (jsonObj.get("modifier_overrides") != null && !jsonObj.get("modifier_overrides").isJsonNull()) {
        JsonArray jsonArraymodifierOverrides = jsonObj.getAsJsonArray("modifier_overrides");
        if (jsonArraymodifierOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("modifier_overrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `modifier_overrides` to be an array in the JSON string but got `%s`", jsonObj.get("modifier_overrides").toString()));
          }

          // validate the optional field `modifier_overrides` (array)
          for (int i = 0; i < jsonArraymodifierOverrides.size(); i++) {
            CatalogModifierOverride.validateJsonElement(jsonArraymodifierOverrides.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogItemModifierListInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogItemModifierListInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogItemModifierListInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogItemModifierListInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogItemModifierListInfo>() {
           @Override
           public void write(JsonWriter out, CatalogItemModifierListInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogItemModifierListInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogItemModifierListInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogItemModifierListInfo
   * @throws IOException if the JSON string is invalid with respect to CatalogItemModifierListInfo
   */
  public static CatalogItemModifierListInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogItemModifierListInfo.class);
  }

  /**
   * Convert an instance of CatalogItemModifierListInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

