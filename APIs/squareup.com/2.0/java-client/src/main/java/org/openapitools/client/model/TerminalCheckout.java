/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeviceCheckoutOptions;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TerminalCheckout {
  public static final String SERIALIZED_NAME_AMOUNT_MONEY = "amount_money";
  @SerializedName(SERIALIZED_NAME_AMOUNT_MONEY)
  private Money amountMoney;

  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_CANCEL_REASON = "cancel_reason";
  @SerializedName(SERIALIZED_NAME_CANCEL_REASON)
  private String cancelReason;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DEADLINE_DURATION = "deadline_duration";
  @SerializedName(SERIALIZED_NAME_DEADLINE_DURATION)
  private String deadlineDuration;

  public static final String SERIALIZED_NAME_DEVICE_OPTIONS = "device_options";
  @SerializedName(SERIALIZED_NAME_DEVICE_OPTIONS)
  private DeviceCheckoutOptions deviceOptions;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_PAYMENT_IDS = "payment_ids";
  @SerializedName(SERIALIZED_NAME_PAYMENT_IDS)
  private List<String> paymentIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "payment_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private String paymentType;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "reference_id";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public TerminalCheckout() {
  }

  public TerminalCheckout amountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
    return this;
  }

  /**
   * Get amountMoney
   * @return amountMoney
   */
  @javax.annotation.Nonnull
  public Money getAmountMoney() {
    return amountMoney;
  }

  public void setAmountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
  }


  public TerminalCheckout appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The ID of the application that created the checkout.
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public TerminalCheckout cancelReason(String cancelReason) {
    this.cancelReason = cancelReason;
    return this;
  }

  /**
   * Present if the status is &#x60;CANCELED&#x60;.
   * @return cancelReason
   */
  @javax.annotation.Nullable
  public String getCancelReason() {
    return cancelReason;
  }

  public void setCancelReason(String cancelReason) {
    this.cancelReason = cancelReason;
  }


  public TerminalCheckout createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The time when the &#x60;TerminalCheckout&#x60; was created, as an RFC 3339 timestamp.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public TerminalCheckout deadlineDuration(String deadlineDuration) {
    this.deadlineDuration = deadlineDuration;
    return this;
  }

  /**
   * An RFC 3339 duration, after which the checkout is automatically canceled. A &#x60;TerminalCheckout&#x60; that is &#x60;PENDING&#x60; is automatically &#x60;CANCELED&#x60; and has a cancellation reason of &#x60;TIMED_OUT&#x60;.  Default: 5 minutes from creation  Maximum: 5 minutes
   * @return deadlineDuration
   */
  @javax.annotation.Nullable
  public String getDeadlineDuration() {
    return deadlineDuration;
  }

  public void setDeadlineDuration(String deadlineDuration) {
    this.deadlineDuration = deadlineDuration;
  }


  public TerminalCheckout deviceOptions(DeviceCheckoutOptions deviceOptions) {
    this.deviceOptions = deviceOptions;
    return this;
  }

  /**
   * Get deviceOptions
   * @return deviceOptions
   */
  @javax.annotation.Nonnull
  public DeviceCheckoutOptions getDeviceOptions() {
    return deviceOptions;
  }

  public void setDeviceOptions(DeviceCheckoutOptions deviceOptions) {
    this.deviceOptions = deviceOptions;
  }


  public TerminalCheckout id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique ID for this &#x60;TerminalCheckout&#x60;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TerminalCheckout locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The location of the device where the &#x60;TerminalCheckout&#x60; was directed.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public TerminalCheckout note(String note) {
    this.note = note;
    return this;
  }

  /**
   * An optional note to associate with the checkout, as well as with any payments used to complete the checkout.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public TerminalCheckout paymentIds(List<String> paymentIds) {
    this.paymentIds = paymentIds;
    return this;
  }

  public TerminalCheckout addPaymentIdsItem(String paymentIdsItem) {
    if (this.paymentIds == null) {
      this.paymentIds = new ArrayList<>();
    }
    this.paymentIds.add(paymentIdsItem);
    return this;
  }

  /**
   * A list of IDs for payments created by this &#x60;TerminalCheckout&#x60;.
   * @return paymentIds
   */
  @javax.annotation.Nullable
  public List<String> getPaymentIds() {
    return paymentIds;
  }

  public void setPaymentIds(List<String> paymentIds) {
    this.paymentIds = paymentIds;
  }


  public TerminalCheckout paymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * The type of payment the terminal should attempt to capture from. Defaults to &#x60;CARD_PRESENT&#x60;.
   * @return paymentType
   */
  @javax.annotation.Nullable
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }


  public TerminalCheckout referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * An optional user-defined reference ID that can be used to associate this &#x60;TerminalCheckout&#x60; to another entity in an external system. For example, an order ID generated by a third-party shopping cart. The ID is also associated with any payments used to complete the checkout.
   * @return referenceId
   */
  @javax.annotation.Nullable
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public TerminalCheckout status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the &#x60;TerminalCheckout&#x60;. Options: &#x60;PENDING&#x60;, &#x60;IN_PROGRESS&#x60;, &#x60;CANCEL_REQUESTED&#x60;, &#x60;CANCELED&#x60;, &#x60;COMPLETED&#x60;
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public TerminalCheckout updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The time when the &#x60;TerminalCheckout&#x60; was last updated, as an RFC 3339 timestamp.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerminalCheckout terminalCheckout = (TerminalCheckout) o;
    return Objects.equals(this.amountMoney, terminalCheckout.amountMoney) &&
        Objects.equals(this.appId, terminalCheckout.appId) &&
        Objects.equals(this.cancelReason, terminalCheckout.cancelReason) &&
        Objects.equals(this.createdAt, terminalCheckout.createdAt) &&
        Objects.equals(this.deadlineDuration, terminalCheckout.deadlineDuration) &&
        Objects.equals(this.deviceOptions, terminalCheckout.deviceOptions) &&
        Objects.equals(this.id, terminalCheckout.id) &&
        Objects.equals(this.locationId, terminalCheckout.locationId) &&
        Objects.equals(this.note, terminalCheckout.note) &&
        Objects.equals(this.paymentIds, terminalCheckout.paymentIds) &&
        Objects.equals(this.paymentType, terminalCheckout.paymentType) &&
        Objects.equals(this.referenceId, terminalCheckout.referenceId) &&
        Objects.equals(this.status, terminalCheckout.status) &&
        Objects.equals(this.updatedAt, terminalCheckout.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountMoney, appId, cancelReason, createdAt, deadlineDuration, deviceOptions, id, locationId, note, paymentIds, paymentType, referenceId, status, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerminalCheckout {\n");
    sb.append("    amountMoney: ").append(toIndentedString(amountMoney)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    cancelReason: ").append(toIndentedString(cancelReason)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deadlineDuration: ").append(toIndentedString(deadlineDuration)).append("\n");
    sb.append("    deviceOptions: ").append(toIndentedString(deviceOptions)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    paymentIds: ").append(toIndentedString(paymentIds)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount_money");
    openapiFields.add("app_id");
    openapiFields.add("cancel_reason");
    openapiFields.add("created_at");
    openapiFields.add("deadline_duration");
    openapiFields.add("device_options");
    openapiFields.add("id");
    openapiFields.add("location_id");
    openapiFields.add("note");
    openapiFields.add("payment_ids");
    openapiFields.add("payment_type");
    openapiFields.add("reference_id");
    openapiFields.add("status");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount_money");
    openapiRequiredFields.add("device_options");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerminalCheckout
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerminalCheckout.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerminalCheckout is not found in the empty JSON string", TerminalCheckout.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerminalCheckout.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerminalCheckout` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TerminalCheckout.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `amount_money`
      Money.validateJsonElement(jsonObj.get("amount_money"));
      if ((jsonObj.get("app_id") != null && !jsonObj.get("app_id").isJsonNull()) && !jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      if ((jsonObj.get("cancel_reason") != null && !jsonObj.get("cancel_reason").isJsonNull()) && !jsonObj.get("cancel_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancel_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancel_reason").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("deadline_duration") != null && !jsonObj.get("deadline_duration").isJsonNull()) && !jsonObj.get("deadline_duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deadline_duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deadline_duration").toString()));
      }
      // validate the required field `device_options`
      DeviceCheckoutOptions.validateJsonElement(jsonObj.get("device_options"));
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("location_id") != null && !jsonObj.get("location_id").isJsonNull()) && !jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("payment_ids") != null && !jsonObj.get("payment_ids").isJsonNull() && !jsonObj.get("payment_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_ids` to be an array in the JSON string but got `%s`", jsonObj.get("payment_ids").toString()));
      }
      if ((jsonObj.get("payment_type") != null && !jsonObj.get("payment_type").isJsonNull()) && !jsonObj.get("payment_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_type").toString()));
      }
      if ((jsonObj.get("reference_id") != null && !jsonObj.get("reference_id").isJsonNull()) && !jsonObj.get("reference_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerminalCheckout.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerminalCheckout' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerminalCheckout> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerminalCheckout.class));

       return (TypeAdapter<T>) new TypeAdapter<TerminalCheckout>() {
           @Override
           public void write(JsonWriter out, TerminalCheckout value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerminalCheckout read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerminalCheckout given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerminalCheckout
   * @throws IOException if the JSON string is invalid with respect to TerminalCheckout
   */
  public static TerminalCheckout fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerminalCheckout.class);
  }

  /**
   * Convert an instance of TerminalCheckout to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

