/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InvoiceAcceptedPaymentMethods;
import org.openapitools.client.model.InvoiceCustomField;
import org.openapitools.client.model.InvoicePaymentRequest;
import org.openapitools.client.model.InvoiceRecipient;
import org.openapitools.client.model.Money;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Stores information about an invoice. You use the Invoices API to create and manage invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Invoice {
  public static final String SERIALIZED_NAME_ACCEPTED_PAYMENT_METHODS = "accepted_payment_methods";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_PAYMENT_METHODS)
  private InvoiceAcceptedPaymentMethods acceptedPaymentMethods;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<InvoiceCustomField> customFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELIVERY_METHOD = "delivery_method";
  @SerializedName(SERIALIZED_NAME_DELIVERY_METHOD)
  private Object deliveryMethod = null;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoice_number";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_NEXT_PAYMENT_AMOUNT_MONEY = "next_payment_amount_money";
  @SerializedName(SERIALIZED_NAME_NEXT_PAYMENT_AMOUNT_MONEY)
  private Money nextPaymentAmountMoney;

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_PAYMENT_REQUESTS = "payment_requests";
  @SerializedName(SERIALIZED_NAME_PAYMENT_REQUESTS)
  private List<InvoicePaymentRequest> paymentRequests = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIMARY_RECIPIENT = "primary_recipient";
  @SerializedName(SERIALIZED_NAME_PRIMARY_RECIPIENT)
  private InvoiceRecipient primaryRecipient;

  public static final String SERIALIZED_NAME_PUBLIC_URL = "public_url";
  @SerializedName(SERIALIZED_NAME_PUBLIC_URL)
  private String publicUrl;

  public static final String SERIALIZED_NAME_SCHEDULED_AT = "scheduled_at";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_AT)
  private String scheduledAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscription_id";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public Invoice() {
  }

  public Invoice acceptedPaymentMethods(InvoiceAcceptedPaymentMethods acceptedPaymentMethods) {
    this.acceptedPaymentMethods = acceptedPaymentMethods;
    return this;
  }

  /**
   * Get acceptedPaymentMethods
   * @return acceptedPaymentMethods
   */
  @javax.annotation.Nullable
  public InvoiceAcceptedPaymentMethods getAcceptedPaymentMethods() {
    return acceptedPaymentMethods;
  }

  public void setAcceptedPaymentMethods(InvoiceAcceptedPaymentMethods acceptedPaymentMethods) {
    this.acceptedPaymentMethods = acceptedPaymentMethods;
  }


  public Invoice createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The timestamp when the invoice was created, in RFC 3339 format.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Invoice customFields(List<InvoiceCustomField> customFields) {
    this.customFields = customFields;
    return this;
  }

  public Invoice addCustomFieldsItem(InvoiceCustomField customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

  /**
   * Additional seller-defined fields to render on the invoice. These fields are visible to sellers and buyers on the Square-hosted invoice page and in emailed or PDF copies of invoices. For more information, see [Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).  Adding custom fields to an invoice requires an  [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).  Max: 2 custom fields
   * @return customFields
   */
  @javax.annotation.Nullable
  public List<InvoiceCustomField> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(List<InvoiceCustomField> customFields) {
    this.customFields = customFields;
  }


  public Invoice deliveryMethod(Object deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
    return this;
  }

  /**
   * Get deliveryMethod
   * @return deliveryMethod
   */
  @javax.annotation.Nullable
  public Object getDeliveryMethod() {
    return deliveryMethod;
  }

  public void setDeliveryMethod(Object deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
  }


  public Invoice description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the invoice. This is visible to the customer receiving the invoice.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Invoice id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Square-assigned ID of the invoice.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Invoice invoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

  /**
   * A user-friendly invoice number. The value is unique within a location. If not provided when creating an invoice, Square assigns a value. It increments from 1 and padded with zeros making it 7 characters long (for example, 0000001 and 0000002).
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }


  public Invoice locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The ID of the location that this invoice is associated with.   If specified in a &#x60;CreateInvoice&#x60; request, the value must match the &#x60;location_id&#x60; of the associated order.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public Invoice nextPaymentAmountMoney(Money nextPaymentAmountMoney) {
    this.nextPaymentAmountMoney = nextPaymentAmountMoney;
    return this;
  }

  /**
   * Get nextPaymentAmountMoney
   * @return nextPaymentAmountMoney
   */
  @javax.annotation.Nullable
  public Money getNextPaymentAmountMoney() {
    return nextPaymentAmountMoney;
  }

  public void setNextPaymentAmountMoney(Money nextPaymentAmountMoney) {
    this.nextPaymentAmountMoney = nextPaymentAmountMoney;
  }


  public Invoice orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) for which the invoice is created.  This field is required when creating an invoice, and the order must be in the &#x60;OPEN&#x60; state.  To view the line items and other information for the associated order, call the  [RetrieveOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/retrieve-order) endpoint using the order ID.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public Invoice paymentRequests(List<InvoicePaymentRequest> paymentRequests) {
    this.paymentRequests = paymentRequests;
    return this;
  }

  public Invoice addPaymentRequestsItem(InvoicePaymentRequest paymentRequestsItem) {
    if (this.paymentRequests == null) {
      this.paymentRequests = new ArrayList<>();
    }
    this.paymentRequests.add(paymentRequestsItem);
    return this;
  }

  /**
   * The payment schedule for the invoice, represented by one or more payment requests that define payment settings, such as amount due and due date. An invoice supports the following payment request combinations: - One balance - One deposit with one balance - 2–12 installments  - One deposit with 2–12 installments  This field is required when creating an invoice. It must contain at least one payment request.  All payment requests for the invoice must equal the total order amount. For more information, see  [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).  Adding &#x60;INSTALLMENT&#x60; payment requests to an invoice requires an  [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
   * @return paymentRequests
   */
  @javax.annotation.Nullable
  public List<InvoicePaymentRequest> getPaymentRequests() {
    return paymentRequests;
  }

  public void setPaymentRequests(List<InvoicePaymentRequest> paymentRequests) {
    this.paymentRequests = paymentRequests;
  }


  public Invoice primaryRecipient(InvoiceRecipient primaryRecipient) {
    this.primaryRecipient = primaryRecipient;
    return this;
  }

  /**
   * Get primaryRecipient
   * @return primaryRecipient
   */
  @javax.annotation.Nullable
  public InvoiceRecipient getPrimaryRecipient() {
    return primaryRecipient;
  }

  public void setPrimaryRecipient(InvoiceRecipient primaryRecipient) {
    this.primaryRecipient = primaryRecipient;
  }


  public Invoice publicUrl(String publicUrl) {
    this.publicUrl = publicUrl;
    return this;
  }

  /**
   * The URL of the Square-hosted invoice page. After you publish the invoice using the &#x60;PublishInvoice&#x60; endpoint, Square hosts the invoice page and returns the page URL in the response.
   * @return publicUrl
   */
  @javax.annotation.Nullable
  public String getPublicUrl() {
    return publicUrl;
  }

  public void setPublicUrl(String publicUrl) {
    this.publicUrl = publicUrl;
  }


  public Invoice scheduledAt(String scheduledAt) {
    this.scheduledAt = scheduledAt;
    return this;
  }

  /**
   * The timestamp when the invoice is scheduled for processing, in RFC 3339 format. After the invoice is published, Square processes the invoice on the specified date, according to the delivery method and payment request settings.  If the field is not set, Square processes the invoice immediately after it is published.
   * @return scheduledAt
   */
  @javax.annotation.Nullable
  public String getScheduledAt() {
    return scheduledAt;
  }

  public void setScheduledAt(String scheduledAt) {
    this.scheduledAt = scheduledAt;
  }


  public Invoice status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the invoice.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Invoice subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * The ID of the [subscription](https://developer.squareup.com/reference/square_2021-08-18/objects/Subscription) associated with the invoice. This field is present only on subscription billing invoices.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public Invoice timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * The time zone used to interpret calendar dates on the invoice, such as &#x60;due_date&#x60;. When an invoice is created, this field is set to the &#x60;timezone&#x60; specified for the seller location. The value cannot be changed.  For example, a payment &#x60;due_date&#x60; of 2021-03-09 with a &#x60;timezone&#x60; of America/Los\\_Angeles becomes overdue at midnight on March 9 in America/Los\\_Angeles (which equals a UTC timestamp of 2021-03-10T08:00:00Z).
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public Invoice title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the invoice.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Invoice updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The timestamp when the invoice was last updated, in RFC 3339 format.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Invoice version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * The Square-assigned version number, which is incremented each time an update is committed to the invoice.
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Invoice invoice = (Invoice) o;
    return Objects.equals(this.acceptedPaymentMethods, invoice.acceptedPaymentMethods) &&
        Objects.equals(this.createdAt, invoice.createdAt) &&
        Objects.equals(this.customFields, invoice.customFields) &&
        Objects.equals(this.deliveryMethod, invoice.deliveryMethod) &&
        Objects.equals(this.description, invoice.description) &&
        Objects.equals(this.id, invoice.id) &&
        Objects.equals(this.invoiceNumber, invoice.invoiceNumber) &&
        Objects.equals(this.locationId, invoice.locationId) &&
        Objects.equals(this.nextPaymentAmountMoney, invoice.nextPaymentAmountMoney) &&
        Objects.equals(this.orderId, invoice.orderId) &&
        Objects.equals(this.paymentRequests, invoice.paymentRequests) &&
        Objects.equals(this.primaryRecipient, invoice.primaryRecipient) &&
        Objects.equals(this.publicUrl, invoice.publicUrl) &&
        Objects.equals(this.scheduledAt, invoice.scheduledAt) &&
        Objects.equals(this.status, invoice.status) &&
        Objects.equals(this.subscriptionId, invoice.subscriptionId) &&
        Objects.equals(this.timezone, invoice.timezone) &&
        Objects.equals(this.title, invoice.title) &&
        Objects.equals(this.updatedAt, invoice.updatedAt) &&
        Objects.equals(this.version, invoice.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedPaymentMethods, createdAt, customFields, deliveryMethod, description, id, invoiceNumber, locationId, nextPaymentAmountMoney, orderId, paymentRequests, primaryRecipient, publicUrl, scheduledAt, status, subscriptionId, timezone, title, updatedAt, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Invoice {\n");
    sb.append("    acceptedPaymentMethods: ").append(toIndentedString(acceptedPaymentMethods)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    deliveryMethod: ").append(toIndentedString(deliveryMethod)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    nextPaymentAmountMoney: ").append(toIndentedString(nextPaymentAmountMoney)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    paymentRequests: ").append(toIndentedString(paymentRequests)).append("\n");
    sb.append("    primaryRecipient: ").append(toIndentedString(primaryRecipient)).append("\n");
    sb.append("    publicUrl: ").append(toIndentedString(publicUrl)).append("\n");
    sb.append("    scheduledAt: ").append(toIndentedString(scheduledAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accepted_payment_methods");
    openapiFields.add("created_at");
    openapiFields.add("custom_fields");
    openapiFields.add("delivery_method");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("invoice_number");
    openapiFields.add("location_id");
    openapiFields.add("next_payment_amount_money");
    openapiFields.add("order_id");
    openapiFields.add("payment_requests");
    openapiFields.add("primary_recipient");
    openapiFields.add("public_url");
    openapiFields.add("scheduled_at");
    openapiFields.add("status");
    openapiFields.add("subscription_id");
    openapiFields.add("timezone");
    openapiFields.add("title");
    openapiFields.add("updated_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Invoice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Invoice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Invoice is not found in the empty JSON string", Invoice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Invoice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Invoice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accepted_payment_methods`
      if (jsonObj.get("accepted_payment_methods") != null && !jsonObj.get("accepted_payment_methods").isJsonNull()) {
        InvoiceAcceptedPaymentMethods.validateJsonElement(jsonObj.get("accepted_payment_methods"));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (jsonObj.get("custom_fields") != null && !jsonObj.get("custom_fields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("custom_fields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_fields` to be an array in the JSON string but got `%s`", jsonObj.get("custom_fields").toString()));
          }

          // validate the optional field `custom_fields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            InvoiceCustomField.validateJsonElement(jsonArraycustomFields.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("invoice_number") != null && !jsonObj.get("invoice_number").isJsonNull()) && !jsonObj.get("invoice_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_number").toString()));
      }
      if ((jsonObj.get("location_id") != null && !jsonObj.get("location_id").isJsonNull()) && !jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      // validate the optional field `next_payment_amount_money`
      if (jsonObj.get("next_payment_amount_money") != null && !jsonObj.get("next_payment_amount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("next_payment_amount_money"));
      }
      if ((jsonObj.get("order_id") != null && !jsonObj.get("order_id").isJsonNull()) && !jsonObj.get("order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_id").toString()));
      }
      if (jsonObj.get("payment_requests") != null && !jsonObj.get("payment_requests").isJsonNull()) {
        JsonArray jsonArraypaymentRequests = jsonObj.getAsJsonArray("payment_requests");
        if (jsonArraypaymentRequests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payment_requests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payment_requests` to be an array in the JSON string but got `%s`", jsonObj.get("payment_requests").toString()));
          }

          // validate the optional field `payment_requests` (array)
          for (int i = 0; i < jsonArraypaymentRequests.size(); i++) {
            InvoicePaymentRequest.validateJsonElement(jsonArraypaymentRequests.get(i));
          };
        }
      }
      // validate the optional field `primary_recipient`
      if (jsonObj.get("primary_recipient") != null && !jsonObj.get("primary_recipient").isJsonNull()) {
        InvoiceRecipient.validateJsonElement(jsonObj.get("primary_recipient"));
      }
      if ((jsonObj.get("public_url") != null && !jsonObj.get("public_url").isJsonNull()) && !jsonObj.get("public_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_url").toString()));
      }
      if ((jsonObj.get("scheduled_at") != null && !jsonObj.get("scheduled_at").isJsonNull()) && !jsonObj.get("scheduled_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduled_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduled_at").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("subscription_id") != null && !jsonObj.get("subscription_id").isJsonNull()) && !jsonObj.get("subscription_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_id").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Invoice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Invoice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Invoice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Invoice.class));

       return (TypeAdapter<T>) new TypeAdapter<Invoice>() {
           @Override
           public void write(JsonWriter out, Invoice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Invoice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Invoice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Invoice
   * @throws IOException if the JSON string is invalid with respect to Invoice
   */
  public static Invoice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Invoice.class);
  }

  /**
   * Convert an instance of Invoice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

