/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides details about the reward tier discount. DEPRECATED at version 2020-12-16. Discount details are now defined using a catalog pricing rule and other catalog objects. For more information, see [Get discount details for the reward](https://developer.squareup.com/docs/loyalty-api/overview#get-discount-details).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoyaltyProgramRewardDefinition {
  public static final String SERIALIZED_NAME_CATALOG_OBJECT_IDS = "catalog_object_ids";
  @SerializedName(SERIALIZED_NAME_CATALOG_OBJECT_IDS)
  private List<String> catalogObjectIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISCOUNT_TYPE = "discount_type";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_TYPE)
  private String discountType;

  public static final String SERIALIZED_NAME_FIXED_DISCOUNT_MONEY = "fixed_discount_money";
  @SerializedName(SERIALIZED_NAME_FIXED_DISCOUNT_MONEY)
  private Money fixedDiscountMoney;

  public static final String SERIALIZED_NAME_MAX_DISCOUNT_MONEY = "max_discount_money";
  @SerializedName(SERIALIZED_NAME_MAX_DISCOUNT_MONEY)
  private Money maxDiscountMoney;

  public static final String SERIALIZED_NAME_PERCENTAGE_DISCOUNT = "percentage_discount";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_DISCOUNT)
  private String percentageDiscount;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public LoyaltyProgramRewardDefinition() {
  }

  public LoyaltyProgramRewardDefinition catalogObjectIds(List<String> catalogObjectIds) {
    this.catalogObjectIds = catalogObjectIds;
    return this;
  }

  public LoyaltyProgramRewardDefinition addCatalogObjectIdsItem(String catalogObjectIdsItem) {
    if (this.catalogObjectIds == null) {
      this.catalogObjectIds = new ArrayList<>();
    }
    this.catalogObjectIds.add(catalogObjectIdsItem);
    return this;
  }

  /**
   * The list of catalog objects to which this reward can be applied. They are either all item-variation ids or category ids, depending on the &#x60;type&#x60; field. DEPRECATED at version 2020-12-16. You can find this information in the &#x60;product_set_data.product_ids_any&#x60; field of the &#x60;PRODUCT_SET&#x60; catalog object referenced by the pricing rule.
   * @return catalogObjectIds
   */
  @javax.annotation.Nullable
  public List<String> getCatalogObjectIds() {
    return catalogObjectIds;
  }

  public void setCatalogObjectIds(List<String> catalogObjectIds) {
    this.catalogObjectIds = catalogObjectIds;
  }


  public LoyaltyProgramRewardDefinition discountType(String discountType) {
    this.discountType = discountType;
    return this;
  }

  /**
   * The type of discount the reward tier offers. DEPRECATED at version 2020-12-16. You can find this information in the &#x60;discount_data.discount_type&#x60; field of the &#x60;DISCOUNT&#x60; catalog object referenced by the pricing rule.
   * @return discountType
   */
  @javax.annotation.Nonnull
  public String getDiscountType() {
    return discountType;
  }

  public void setDiscountType(String discountType) {
    this.discountType = discountType;
  }


  public LoyaltyProgramRewardDefinition fixedDiscountMoney(Money fixedDiscountMoney) {
    this.fixedDiscountMoney = fixedDiscountMoney;
    return this;
  }

  /**
   * Get fixedDiscountMoney
   * @return fixedDiscountMoney
   */
  @javax.annotation.Nullable
  public Money getFixedDiscountMoney() {
    return fixedDiscountMoney;
  }

  public void setFixedDiscountMoney(Money fixedDiscountMoney) {
    this.fixedDiscountMoney = fixedDiscountMoney;
  }


  public LoyaltyProgramRewardDefinition maxDiscountMoney(Money maxDiscountMoney) {
    this.maxDiscountMoney = maxDiscountMoney;
    return this;
  }

  /**
   * Get maxDiscountMoney
   * @return maxDiscountMoney
   */
  @javax.annotation.Nullable
  public Money getMaxDiscountMoney() {
    return maxDiscountMoney;
  }

  public void setMaxDiscountMoney(Money maxDiscountMoney) {
    this.maxDiscountMoney = maxDiscountMoney;
  }


  public LoyaltyProgramRewardDefinition percentageDiscount(String percentageDiscount) {
    this.percentageDiscount = percentageDiscount;
    return this;
  }

  /**
   * The fixed percentage of the discount. Present if &#x60;discount_type&#x60; is &#x60;FIXED_PERCENTAGE&#x60;. For example, a 7.25% off discount will be represented as \&quot;7.25\&quot;. DEPRECATED at version 2020-12-16. You can find this information in the &#x60;discount_data.percentage&#x60; field of the &#x60;DISCOUNT&#x60; catalog object referenced by the pricing rule.
   * @return percentageDiscount
   */
  @javax.annotation.Nullable
  public String getPercentageDiscount() {
    return percentageDiscount;
  }

  public void setPercentageDiscount(String percentageDiscount) {
    this.percentageDiscount = percentageDiscount;
  }


  public LoyaltyProgramRewardDefinition scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Indicates the scope of the reward tier. DEPRECATED at version 2020-12-16. You can find this information in the &#x60;discount_target_scope&#x60; field of the &#x60;PRICING_RULE&#x60; catalog object and the &#x60;product_set_data&#x60; field of the &#x60;PRODUCT_SET&#x60; catalog object referenced by the pricing rule. For &#x60;ORDER&#x60; scopes, the target scope is &#x60;WHOLE_PURCHASE&#x60; and &#x60;all_products&#x60; is true. For &#x60;ITEM_VARIATION&#x60; and &#x60;CATEGORY&#x60; scopes, the target scope is &#x60;LINE_ITEM&#x60; and &#x60;product_ids_any&#x60; is a list of catalog object IDs of the given type.
   * @return scope
   */
  @javax.annotation.Nonnull
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoyaltyProgramRewardDefinition loyaltyProgramRewardDefinition = (LoyaltyProgramRewardDefinition) o;
    return Objects.equals(this.catalogObjectIds, loyaltyProgramRewardDefinition.catalogObjectIds) &&
        Objects.equals(this.discountType, loyaltyProgramRewardDefinition.discountType) &&
        Objects.equals(this.fixedDiscountMoney, loyaltyProgramRewardDefinition.fixedDiscountMoney) &&
        Objects.equals(this.maxDiscountMoney, loyaltyProgramRewardDefinition.maxDiscountMoney) &&
        Objects.equals(this.percentageDiscount, loyaltyProgramRewardDefinition.percentageDiscount) &&
        Objects.equals(this.scope, loyaltyProgramRewardDefinition.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalogObjectIds, discountType, fixedDiscountMoney, maxDiscountMoney, percentageDiscount, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoyaltyProgramRewardDefinition {\n");
    sb.append("    catalogObjectIds: ").append(toIndentedString(catalogObjectIds)).append("\n");
    sb.append("    discountType: ").append(toIndentedString(discountType)).append("\n");
    sb.append("    fixedDiscountMoney: ").append(toIndentedString(fixedDiscountMoney)).append("\n");
    sb.append("    maxDiscountMoney: ").append(toIndentedString(maxDiscountMoney)).append("\n");
    sb.append("    percentageDiscount: ").append(toIndentedString(percentageDiscount)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("catalog_object_ids");
    openapiFields.add("discount_type");
    openapiFields.add("fixed_discount_money");
    openapiFields.add("max_discount_money");
    openapiFields.add("percentage_discount");
    openapiFields.add("scope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("discount_type");
    openapiRequiredFields.add("scope");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoyaltyProgramRewardDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoyaltyProgramRewardDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoyaltyProgramRewardDefinition is not found in the empty JSON string", LoyaltyProgramRewardDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoyaltyProgramRewardDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoyaltyProgramRewardDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LoyaltyProgramRewardDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("catalog_object_ids") != null && !jsonObj.get("catalog_object_ids").isJsonNull() && !jsonObj.get("catalog_object_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalog_object_ids` to be an array in the JSON string but got `%s`", jsonObj.get("catalog_object_ids").toString()));
      }
      if (!jsonObj.get("discount_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discount_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discount_type").toString()));
      }
      // validate the optional field `fixed_discount_money`
      if (jsonObj.get("fixed_discount_money") != null && !jsonObj.get("fixed_discount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("fixed_discount_money"));
      }
      // validate the optional field `max_discount_money`
      if (jsonObj.get("max_discount_money") != null && !jsonObj.get("max_discount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("max_discount_money"));
      }
      if ((jsonObj.get("percentage_discount") != null && !jsonObj.get("percentage_discount").isJsonNull()) && !jsonObj.get("percentage_discount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentage_discount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentage_discount").toString()));
      }
      if (!jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoyaltyProgramRewardDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoyaltyProgramRewardDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoyaltyProgramRewardDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoyaltyProgramRewardDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<LoyaltyProgramRewardDefinition>() {
           @Override
           public void write(JsonWriter out, LoyaltyProgramRewardDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoyaltyProgramRewardDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoyaltyProgramRewardDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoyaltyProgramRewardDefinition
   * @throws IOException if the JSON string is invalid with respect to LoyaltyProgramRewardDefinition
   */
  public static LoyaltyProgramRewardDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoyaltyProgramRewardDefinition.class);
  }

  /**
   * Convert an instance of LoyaltyProgramRewardDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

