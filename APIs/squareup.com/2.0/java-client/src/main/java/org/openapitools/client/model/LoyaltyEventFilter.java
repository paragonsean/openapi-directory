/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LoyaltyEventDateTimeFilter;
import org.openapitools.client.model.LoyaltyEventLocationFilter;
import org.openapitools.client.model.LoyaltyEventLoyaltyAccountFilter;
import org.openapitools.client.model.LoyaltyEventOrderFilter;
import org.openapitools.client.model.LoyaltyEventTypeFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The filtering criteria. If the request specifies multiple filters,  the endpoint uses a logical AND to evaluate them.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoyaltyEventFilter {
  public static final String SERIALIZED_NAME_DATE_TIME_FILTER = "date_time_filter";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_FILTER)
  private LoyaltyEventDateTimeFilter dateTimeFilter;

  public static final String SERIALIZED_NAME_LOCATION_FILTER = "location_filter";
  @SerializedName(SERIALIZED_NAME_LOCATION_FILTER)
  private LoyaltyEventLocationFilter locationFilter;

  public static final String SERIALIZED_NAME_LOYALTY_ACCOUNT_FILTER = "loyalty_account_filter";
  @SerializedName(SERIALIZED_NAME_LOYALTY_ACCOUNT_FILTER)
  private LoyaltyEventLoyaltyAccountFilter loyaltyAccountFilter;

  public static final String SERIALIZED_NAME_ORDER_FILTER = "order_filter";
  @SerializedName(SERIALIZED_NAME_ORDER_FILTER)
  private LoyaltyEventOrderFilter orderFilter;

  public static final String SERIALIZED_NAME_TYPE_FILTER = "type_filter";
  @SerializedName(SERIALIZED_NAME_TYPE_FILTER)
  private LoyaltyEventTypeFilter typeFilter;

  public LoyaltyEventFilter() {
  }

  public LoyaltyEventFilter dateTimeFilter(LoyaltyEventDateTimeFilter dateTimeFilter) {
    this.dateTimeFilter = dateTimeFilter;
    return this;
  }

  /**
   * Get dateTimeFilter
   * @return dateTimeFilter
   */
  @javax.annotation.Nullable
  public LoyaltyEventDateTimeFilter getDateTimeFilter() {
    return dateTimeFilter;
  }

  public void setDateTimeFilter(LoyaltyEventDateTimeFilter dateTimeFilter) {
    this.dateTimeFilter = dateTimeFilter;
  }


  public LoyaltyEventFilter locationFilter(LoyaltyEventLocationFilter locationFilter) {
    this.locationFilter = locationFilter;
    return this;
  }

  /**
   * Get locationFilter
   * @return locationFilter
   */
  @javax.annotation.Nullable
  public LoyaltyEventLocationFilter getLocationFilter() {
    return locationFilter;
  }

  public void setLocationFilter(LoyaltyEventLocationFilter locationFilter) {
    this.locationFilter = locationFilter;
  }


  public LoyaltyEventFilter loyaltyAccountFilter(LoyaltyEventLoyaltyAccountFilter loyaltyAccountFilter) {
    this.loyaltyAccountFilter = loyaltyAccountFilter;
    return this;
  }

  /**
   * Get loyaltyAccountFilter
   * @return loyaltyAccountFilter
   */
  @javax.annotation.Nullable
  public LoyaltyEventLoyaltyAccountFilter getLoyaltyAccountFilter() {
    return loyaltyAccountFilter;
  }

  public void setLoyaltyAccountFilter(LoyaltyEventLoyaltyAccountFilter loyaltyAccountFilter) {
    this.loyaltyAccountFilter = loyaltyAccountFilter;
  }


  public LoyaltyEventFilter orderFilter(LoyaltyEventOrderFilter orderFilter) {
    this.orderFilter = orderFilter;
    return this;
  }

  /**
   * Get orderFilter
   * @return orderFilter
   */
  @javax.annotation.Nullable
  public LoyaltyEventOrderFilter getOrderFilter() {
    return orderFilter;
  }

  public void setOrderFilter(LoyaltyEventOrderFilter orderFilter) {
    this.orderFilter = orderFilter;
  }


  public LoyaltyEventFilter typeFilter(LoyaltyEventTypeFilter typeFilter) {
    this.typeFilter = typeFilter;
    return this;
  }

  /**
   * Get typeFilter
   * @return typeFilter
   */
  @javax.annotation.Nullable
  public LoyaltyEventTypeFilter getTypeFilter() {
    return typeFilter;
  }

  public void setTypeFilter(LoyaltyEventTypeFilter typeFilter) {
    this.typeFilter = typeFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoyaltyEventFilter loyaltyEventFilter = (LoyaltyEventFilter) o;
    return Objects.equals(this.dateTimeFilter, loyaltyEventFilter.dateTimeFilter) &&
        Objects.equals(this.locationFilter, loyaltyEventFilter.locationFilter) &&
        Objects.equals(this.loyaltyAccountFilter, loyaltyEventFilter.loyaltyAccountFilter) &&
        Objects.equals(this.orderFilter, loyaltyEventFilter.orderFilter) &&
        Objects.equals(this.typeFilter, loyaltyEventFilter.typeFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateTimeFilter, locationFilter, loyaltyAccountFilter, orderFilter, typeFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoyaltyEventFilter {\n");
    sb.append("    dateTimeFilter: ").append(toIndentedString(dateTimeFilter)).append("\n");
    sb.append("    locationFilter: ").append(toIndentedString(locationFilter)).append("\n");
    sb.append("    loyaltyAccountFilter: ").append(toIndentedString(loyaltyAccountFilter)).append("\n");
    sb.append("    orderFilter: ").append(toIndentedString(orderFilter)).append("\n");
    sb.append("    typeFilter: ").append(toIndentedString(typeFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date_time_filter");
    openapiFields.add("location_filter");
    openapiFields.add("loyalty_account_filter");
    openapiFields.add("order_filter");
    openapiFields.add("type_filter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoyaltyEventFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoyaltyEventFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoyaltyEventFilter is not found in the empty JSON string", LoyaltyEventFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoyaltyEventFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoyaltyEventFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `date_time_filter`
      if (jsonObj.get("date_time_filter") != null && !jsonObj.get("date_time_filter").isJsonNull()) {
        LoyaltyEventDateTimeFilter.validateJsonElement(jsonObj.get("date_time_filter"));
      }
      // validate the optional field `location_filter`
      if (jsonObj.get("location_filter") != null && !jsonObj.get("location_filter").isJsonNull()) {
        LoyaltyEventLocationFilter.validateJsonElement(jsonObj.get("location_filter"));
      }
      // validate the optional field `loyalty_account_filter`
      if (jsonObj.get("loyalty_account_filter") != null && !jsonObj.get("loyalty_account_filter").isJsonNull()) {
        LoyaltyEventLoyaltyAccountFilter.validateJsonElement(jsonObj.get("loyalty_account_filter"));
      }
      // validate the optional field `order_filter`
      if (jsonObj.get("order_filter") != null && !jsonObj.get("order_filter").isJsonNull()) {
        LoyaltyEventOrderFilter.validateJsonElement(jsonObj.get("order_filter"));
      }
      // validate the optional field `type_filter`
      if (jsonObj.get("type_filter") != null && !jsonObj.get("type_filter").isJsonNull()) {
        LoyaltyEventTypeFilter.validateJsonElement(jsonObj.get("type_filter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoyaltyEventFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoyaltyEventFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoyaltyEventFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoyaltyEventFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<LoyaltyEventFilter>() {
           @Override
           public void write(JsonWriter out, LoyaltyEventFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoyaltyEventFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoyaltyEventFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoyaltyEventFilter
   * @throws IOException if the JSON string is invalid with respect to LoyaltyEventFilter
   */
  public static LoyaltyEventFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoyaltyEventFilter.class);
  }

  /**
   * Convert an instance of LoyaltyEventFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

