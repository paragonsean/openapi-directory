/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The type of the dispute evidence.
 */
@JsonAdapter(DisputeEvidenceType.Adapter.class)
public enum DisputeEvidenceType {
  
  GENERIC_EVIDENCE("GENERIC_EVIDENCE"),
  
  ONLINE_OR_APP_ACCESS_LOG("ONLINE_OR_APP_ACCESS_LOG"),
  
  AUTHORIZATION_DOCUMENTATION("AUTHORIZATION_DOCUMENTATION"),
  
  CANCELLATION_OR_REFUND_DOCUMENTATION("CANCELLATION_OR_REFUND_DOCUMENTATION"),
  
  CARDHOLDER_COMMUNICATION("CARDHOLDER_COMMUNICATION"),
  
  CARDHOLDER_INFORMATION("CARDHOLDER_INFORMATION"),
  
  PURCHASE_ACKNOWLEDGEMENT("PURCHASE_ACKNOWLEDGEMENT"),
  
  DUPLICATE_CHARGE_DOCUMENTATION("DUPLICATE_CHARGE_DOCUMENTATION"),
  
  PRODUCT_OR_SERVICE_DESCRIPTION("PRODUCT_OR_SERVICE_DESCRIPTION"),
  
  RECEIPT("RECEIPT"),
  
  SERVICE_RECEIVED_DOCUMENTATION("SERVICE_RECEIVED_DOCUMENTATION"),
  
  PROOF_OF_DELIVERY_DOCUMENTATION("PROOF_OF_DELIVERY_DOCUMENTATION"),
  
  RELATED_TRANSACTION_DOCUMENTATION("RELATED_TRANSACTION_DOCUMENTATION"),
  
  REBUTTAL_EXPLANATION("REBUTTAL_EXPLANATION"),
  
  TRACKING_NUMBER("TRACKING_NUMBER");

  private String value;

  DisputeEvidenceType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DisputeEvidenceType fromValue(String value) {
    for (DisputeEvidenceType b : DisputeEvidenceType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<DisputeEvidenceType> {
    @Override
    public void write(final JsonWriter jsonWriter, final DisputeEvidenceType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DisputeEvidenceType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return DisputeEvidenceType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    DisputeEvidenceType.fromValue(value);
  }
}

