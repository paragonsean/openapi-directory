/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an applied portion of a discount to a line item in an order.  Order scoped discounts have automatically applied discounts present for each line item. Line-item scoped discounts must have applied discounts added manually for any applicable line items. The corresponding applied money is automatically computed based on participating line items.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderLineItemAppliedDiscount {
  public static final String SERIALIZED_NAME_APPLIED_MONEY = "applied_money";
  @SerializedName(SERIALIZED_NAME_APPLIED_MONEY)
  private Money appliedMoney;

  public static final String SERIALIZED_NAME_DISCOUNT_UID = "discount_uid";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_UID)
  private String discountUid;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public OrderLineItemAppliedDiscount() {
  }

  public OrderLineItemAppliedDiscount appliedMoney(Money appliedMoney) {
    this.appliedMoney = appliedMoney;
    return this;
  }

  /**
   * Get appliedMoney
   * @return appliedMoney
   */
  @javax.annotation.Nullable
  public Money getAppliedMoney() {
    return appliedMoney;
  }

  public void setAppliedMoney(Money appliedMoney) {
    this.appliedMoney = appliedMoney;
  }


  public OrderLineItemAppliedDiscount discountUid(String discountUid) {
    this.discountUid = discountUid;
    return this;
  }

  /**
   * The &#x60;uid&#x60; of the discount that the applied discount represents. It must reference a discount present in the &#x60;order.discounts&#x60; field.  This field is immutable. To change which discounts apply to a line item, you must delete the discount and re-add it as a new &#x60;OrderLineItemAppliedDiscount&#x60;.
   * @return discountUid
   */
  @javax.annotation.Nonnull
  public String getDiscountUid() {
    return discountUid;
  }

  public void setDiscountUid(String discountUid) {
    this.discountUid = discountUid;
  }


  public OrderLineItemAppliedDiscount uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * A unique ID that identifies the applied discount only within this order.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderLineItemAppliedDiscount orderLineItemAppliedDiscount = (OrderLineItemAppliedDiscount) o;
    return Objects.equals(this.appliedMoney, orderLineItemAppliedDiscount.appliedMoney) &&
        Objects.equals(this.discountUid, orderLineItemAppliedDiscount.discountUid) &&
        Objects.equals(this.uid, orderLineItemAppliedDiscount.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliedMoney, discountUid, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderLineItemAppliedDiscount {\n");
    sb.append("    appliedMoney: ").append(toIndentedString(appliedMoney)).append("\n");
    sb.append("    discountUid: ").append(toIndentedString(discountUid)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applied_money");
    openapiFields.add("discount_uid");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("discount_uid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderLineItemAppliedDiscount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderLineItemAppliedDiscount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderLineItemAppliedDiscount is not found in the empty JSON string", OrderLineItemAppliedDiscount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderLineItemAppliedDiscount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderLineItemAppliedDiscount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderLineItemAppliedDiscount.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `applied_money`
      if (jsonObj.get("applied_money") != null && !jsonObj.get("applied_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("applied_money"));
      }
      if (!jsonObj.get("discount_uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discount_uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discount_uid").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderLineItemAppliedDiscount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderLineItemAppliedDiscount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderLineItemAppliedDiscount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderLineItemAppliedDiscount.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderLineItemAppliedDiscount>() {
           @Override
           public void write(JsonWriter out, OrderLineItemAppliedDiscount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderLineItemAppliedDiscount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderLineItemAppliedDiscount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderLineItemAppliedDiscount
   * @throws IOException if the JSON string is invalid with respect to OrderLineItemAppliedDiscount
   */
  public static OrderLineItemAppliedDiscount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderLineItemAppliedDiscount.class);
  }

  /**
   * Convert an instance of OrderLineItemAppliedDiscount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

