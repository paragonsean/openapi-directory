/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AcceptDisputeResponse;
import org.openapitools.client.model.CreateDisputeEvidenceTextRequest;
import org.openapitools.client.model.CreateDisputeEvidenceTextResponse;
import org.openapitools.client.model.DeleteDisputeEvidenceResponse;
import org.openapitools.client.model.ListDisputeEvidenceResponse;
import org.openapitools.client.model.ListDisputesResponse;
import org.openapitools.client.model.RetrieveDisputeEvidenceResponse;
import org.openapitools.client.model.RetrieveDisputeResponse;
import org.openapitools.client.model.SubmitEvidenceResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DisputesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DisputesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DisputesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acceptDispute
     * @param disputeId The ID of the dispute you want to accept. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptDisputeCall(String disputeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/disputes/{dispute_id}/accept"
            .replace("{" + "dispute_id" + "}", localVarApiClient.escapeString(disputeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptDisputeValidateBeforeCall(String disputeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disputeId' is set
        if (disputeId == null) {
            throw new ApiException("Missing the required parameter 'disputeId' when calling acceptDispute(Async)");
        }

        return acceptDisputeCall(disputeId, _callback);

    }

    /**
     * AcceptDispute
     * Accepts the loss on a dispute. Square returns the disputed amount to the cardholder and updates the dispute state to ACCEPTED.  Square debits the disputed amount from the seller’s Square account. If the Square account does not have sufficient funds, Square debits the associated bank account.
     * @param disputeId The ID of the dispute you want to accept. (required)
     * @return AcceptDisputeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AcceptDisputeResponse acceptDispute(String disputeId) throws ApiException {
        ApiResponse<AcceptDisputeResponse> localVarResp = acceptDisputeWithHttpInfo(disputeId);
        return localVarResp.getData();
    }

    /**
     * AcceptDispute
     * Accepts the loss on a dispute. Square returns the disputed amount to the cardholder and updates the dispute state to ACCEPTED.  Square debits the disputed amount from the seller’s Square account. If the Square account does not have sufficient funds, Square debits the associated bank account.
     * @param disputeId The ID of the dispute you want to accept. (required)
     * @return ApiResponse&lt;AcceptDisputeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AcceptDisputeResponse> acceptDisputeWithHttpInfo(String disputeId) throws ApiException {
        okhttp3.Call localVarCall = acceptDisputeValidateBeforeCall(disputeId, null);
        Type localVarReturnType = new TypeToken<AcceptDisputeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * AcceptDispute (asynchronously)
     * Accepts the loss on a dispute. Square returns the disputed amount to the cardholder and updates the dispute state to ACCEPTED.  Square debits the disputed amount from the seller’s Square account. If the Square account does not have sufficient funds, Square debits the associated bank account.
     * @param disputeId The ID of the dispute you want to accept. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptDisputeAsync(String disputeId, final ApiCallback<AcceptDisputeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptDisputeValidateBeforeCall(disputeId, _callback);
        Type localVarReturnType = new TypeToken<AcceptDisputeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDisputeEvidenceText
     * @param disputeId The ID of the dispute you want to upload evidence for. (required)
     * @param createDisputeEvidenceTextRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDisputeEvidenceTextCall(String disputeId, CreateDisputeEvidenceTextRequest createDisputeEvidenceTextRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDisputeEvidenceTextRequest;

        // create path and map variables
        String localVarPath = "/v2/disputes/{dispute_id}/evidence-text"
            .replace("{" + "dispute_id" + "}", localVarApiClient.escapeString(disputeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDisputeEvidenceTextValidateBeforeCall(String disputeId, CreateDisputeEvidenceTextRequest createDisputeEvidenceTextRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disputeId' is set
        if (disputeId == null) {
            throw new ApiException("Missing the required parameter 'disputeId' when calling createDisputeEvidenceText(Async)");
        }

        // verify the required parameter 'createDisputeEvidenceTextRequest' is set
        if (createDisputeEvidenceTextRequest == null) {
            throw new ApiException("Missing the required parameter 'createDisputeEvidenceTextRequest' when calling createDisputeEvidenceText(Async)");
        }

        return createDisputeEvidenceTextCall(disputeId, createDisputeEvidenceTextRequest, _callback);

    }

    /**
     * CreateDisputeEvidenceText
     * Uploads text to use as evidence for a dispute challenge.
     * @param disputeId The ID of the dispute you want to upload evidence for. (required)
     * @param createDisputeEvidenceTextRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return CreateDisputeEvidenceTextResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateDisputeEvidenceTextResponse createDisputeEvidenceText(String disputeId, CreateDisputeEvidenceTextRequest createDisputeEvidenceTextRequest) throws ApiException {
        ApiResponse<CreateDisputeEvidenceTextResponse> localVarResp = createDisputeEvidenceTextWithHttpInfo(disputeId, createDisputeEvidenceTextRequest);
        return localVarResp.getData();
    }

    /**
     * CreateDisputeEvidenceText
     * Uploads text to use as evidence for a dispute challenge.
     * @param disputeId The ID of the dispute you want to upload evidence for. (required)
     * @param createDisputeEvidenceTextRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;CreateDisputeEvidenceTextResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDisputeEvidenceTextResponse> createDisputeEvidenceTextWithHttpInfo(String disputeId, CreateDisputeEvidenceTextRequest createDisputeEvidenceTextRequest) throws ApiException {
        okhttp3.Call localVarCall = createDisputeEvidenceTextValidateBeforeCall(disputeId, createDisputeEvidenceTextRequest, null);
        Type localVarReturnType = new TypeToken<CreateDisputeEvidenceTextResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateDisputeEvidenceText (asynchronously)
     * Uploads text to use as evidence for a dispute challenge.
     * @param disputeId The ID of the dispute you want to upload evidence for. (required)
     * @param createDisputeEvidenceTextRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDisputeEvidenceTextAsync(String disputeId, CreateDisputeEvidenceTextRequest createDisputeEvidenceTextRequest, final ApiCallback<CreateDisputeEvidenceTextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDisputeEvidenceTextValidateBeforeCall(disputeId, createDisputeEvidenceTextRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateDisputeEvidenceTextResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDisputeEvidence
     * @param disputeId The ID of the dispute you want to remove evidence from. (required)
     * @param evidenceId The ID of the evidence you want to remove. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDisputeEvidenceCall(String disputeId, String evidenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/disputes/{dispute_id}/evidence/{evidence_id}"
            .replace("{" + "dispute_id" + "}", localVarApiClient.escapeString(disputeId.toString()))
            .replace("{" + "evidence_id" + "}", localVarApiClient.escapeString(evidenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDisputeEvidenceValidateBeforeCall(String disputeId, String evidenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disputeId' is set
        if (disputeId == null) {
            throw new ApiException("Missing the required parameter 'disputeId' when calling deleteDisputeEvidence(Async)");
        }

        // verify the required parameter 'evidenceId' is set
        if (evidenceId == null) {
            throw new ApiException("Missing the required parameter 'evidenceId' when calling deleteDisputeEvidence(Async)");
        }

        return deleteDisputeEvidenceCall(disputeId, evidenceId, _callback);

    }

    /**
     * DeleteDisputeEvidence
     * Removes specified evidence from a dispute.  Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after submitting it to the bank using [SubmitEvidence](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/submit-evidence).
     * @param disputeId The ID of the dispute you want to remove evidence from. (required)
     * @param evidenceId The ID of the evidence you want to remove. (required)
     * @return DeleteDisputeEvidenceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDisputeEvidenceResponse deleteDisputeEvidence(String disputeId, String evidenceId) throws ApiException {
        ApiResponse<DeleteDisputeEvidenceResponse> localVarResp = deleteDisputeEvidenceWithHttpInfo(disputeId, evidenceId);
        return localVarResp.getData();
    }

    /**
     * DeleteDisputeEvidence
     * Removes specified evidence from a dispute.  Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after submitting it to the bank using [SubmitEvidence](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/submit-evidence).
     * @param disputeId The ID of the dispute you want to remove evidence from. (required)
     * @param evidenceId The ID of the evidence you want to remove. (required)
     * @return ApiResponse&lt;DeleteDisputeEvidenceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDisputeEvidenceResponse> deleteDisputeEvidenceWithHttpInfo(String disputeId, String evidenceId) throws ApiException {
        okhttp3.Call localVarCall = deleteDisputeEvidenceValidateBeforeCall(disputeId, evidenceId, null);
        Type localVarReturnType = new TypeToken<DeleteDisputeEvidenceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeleteDisputeEvidence (asynchronously)
     * Removes specified evidence from a dispute.  Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after submitting it to the bank using [SubmitEvidence](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/submit-evidence).
     * @param disputeId The ID of the dispute you want to remove evidence from. (required)
     * @param evidenceId The ID of the evidence you want to remove. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDisputeEvidenceAsync(String disputeId, String evidenceId, final ApiCallback<DeleteDisputeEvidenceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDisputeEvidenceValidateBeforeCall(disputeId, evidenceId, _callback);
        Type localVarReturnType = new TypeToken<DeleteDisputeEvidenceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDisputeEvidence
     * @param disputeId The ID of the dispute. (required)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDisputeEvidenceCall(String disputeId, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/disputes/{dispute_id}/evidence"
            .replace("{" + "dispute_id" + "}", localVarApiClient.escapeString(disputeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDisputeEvidenceValidateBeforeCall(String disputeId, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disputeId' is set
        if (disputeId == null) {
            throw new ApiException("Missing the required parameter 'disputeId' when calling listDisputeEvidence(Async)");
        }

        return listDisputeEvidenceCall(disputeId, cursor, _callback);

    }

    /**
     * ListDisputeEvidence
     * Returns a list of evidence associated with a dispute.
     * @param disputeId The ID of the dispute. (required)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination). (optional)
     * @return ListDisputeEvidenceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListDisputeEvidenceResponse listDisputeEvidence(String disputeId, String cursor) throws ApiException {
        ApiResponse<ListDisputeEvidenceResponse> localVarResp = listDisputeEvidenceWithHttpInfo(disputeId, cursor);
        return localVarResp.getData();
    }

    /**
     * ListDisputeEvidence
     * Returns a list of evidence associated with a dispute.
     * @param disputeId The ID of the dispute. (required)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination). (optional)
     * @return ApiResponse&lt;ListDisputeEvidenceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDisputeEvidenceResponse> listDisputeEvidenceWithHttpInfo(String disputeId, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listDisputeEvidenceValidateBeforeCall(disputeId, cursor, null);
        Type localVarReturnType = new TypeToken<ListDisputeEvidenceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListDisputeEvidence (asynchronously)
     * Returns a list of evidence associated with a dispute.
     * @param disputeId The ID of the dispute. (required)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDisputeEvidenceAsync(String disputeId, String cursor, final ApiCallback<ListDisputeEvidenceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDisputeEvidenceValidateBeforeCall(disputeId, cursor, _callback);
        Type localVarReturnType = new TypeToken<ListDisputeEvidenceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDisputes
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination). (optional)
     * @param states The dispute states to filter the result. If not specified, the endpoint returns all open disputes (the dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;). (optional)
     * @param locationId The ID of the location for which to return a list of disputes. If not specified, the endpoint returns all open disputes (the dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;) associated with all locations. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDisputesCall(String cursor, String states, String locationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/disputes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (states != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("states", states));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDisputesValidateBeforeCall(String cursor, String states, String locationId, final ApiCallback _callback) throws ApiException {
        return listDisputesCall(cursor, states, locationId, _callback);

    }

    /**
     * ListDisputes
     * Returns a list of disputes associated with a particular account.
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination). (optional)
     * @param states The dispute states to filter the result. If not specified, the endpoint returns all open disputes (the dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;). (optional)
     * @param locationId The ID of the location for which to return a list of disputes. If not specified, the endpoint returns all open disputes (the dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;) associated with all locations. (optional)
     * @return ListDisputesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListDisputesResponse listDisputes(String cursor, String states, String locationId) throws ApiException {
        ApiResponse<ListDisputesResponse> localVarResp = listDisputesWithHttpInfo(cursor, states, locationId);
        return localVarResp.getData();
    }

    /**
     * ListDisputes
     * Returns a list of disputes associated with a particular account.
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination). (optional)
     * @param states The dispute states to filter the result. If not specified, the endpoint returns all open disputes (the dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;). (optional)
     * @param locationId The ID of the location for which to return a list of disputes. If not specified, the endpoint returns all open disputes (the dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;) associated with all locations. (optional)
     * @return ApiResponse&lt;ListDisputesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDisputesResponse> listDisputesWithHttpInfo(String cursor, String states, String locationId) throws ApiException {
        okhttp3.Call localVarCall = listDisputesValidateBeforeCall(cursor, states, locationId, null);
        Type localVarReturnType = new TypeToken<ListDisputesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListDisputes (asynchronously)
     * Returns a list of disputes associated with a particular account.
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination). (optional)
     * @param states The dispute states to filter the result. If not specified, the endpoint returns all open disputes (the dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;). (optional)
     * @param locationId The ID of the location for which to return a list of disputes. If not specified, the endpoint returns all open disputes (the dispute status is not &#x60;INQUIRY_CLOSED&#x60;, &#x60;WON&#x60;, or &#x60;LOST&#x60;) associated with all locations. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDisputesAsync(String cursor, String states, String locationId, final ApiCallback<ListDisputesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDisputesValidateBeforeCall(cursor, states, locationId, _callback);
        Type localVarReturnType = new TypeToken<ListDisputesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveDispute
     * @param disputeId The ID of the dispute you want more details about. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveDisputeCall(String disputeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/disputes/{dispute_id}"
            .replace("{" + "dispute_id" + "}", localVarApiClient.escapeString(disputeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveDisputeValidateBeforeCall(String disputeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disputeId' is set
        if (disputeId == null) {
            throw new ApiException("Missing the required parameter 'disputeId' when calling retrieveDispute(Async)");
        }

        return retrieveDisputeCall(disputeId, _callback);

    }

    /**
     * RetrieveDispute
     * Returns details about a specific dispute.
     * @param disputeId The ID of the dispute you want more details about. (required)
     * @return RetrieveDisputeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveDisputeResponse retrieveDispute(String disputeId) throws ApiException {
        ApiResponse<RetrieveDisputeResponse> localVarResp = retrieveDisputeWithHttpInfo(disputeId);
        return localVarResp.getData();
    }

    /**
     * RetrieveDispute
     * Returns details about a specific dispute.
     * @param disputeId The ID of the dispute you want more details about. (required)
     * @return ApiResponse&lt;RetrieveDisputeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveDisputeResponse> retrieveDisputeWithHttpInfo(String disputeId) throws ApiException {
        okhttp3.Call localVarCall = retrieveDisputeValidateBeforeCall(disputeId, null);
        Type localVarReturnType = new TypeToken<RetrieveDisputeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveDispute (asynchronously)
     * Returns details about a specific dispute.
     * @param disputeId The ID of the dispute you want more details about. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveDisputeAsync(String disputeId, final ApiCallback<RetrieveDisputeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveDisputeValidateBeforeCall(disputeId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveDisputeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveDisputeEvidence
     * @param disputeId The ID of the dispute that you want to retrieve evidence from. (required)
     * @param evidenceId The ID of the evidence to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveDisputeEvidenceCall(String disputeId, String evidenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/disputes/{dispute_id}/evidence/{evidence_id}"
            .replace("{" + "dispute_id" + "}", localVarApiClient.escapeString(disputeId.toString()))
            .replace("{" + "evidence_id" + "}", localVarApiClient.escapeString(evidenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveDisputeEvidenceValidateBeforeCall(String disputeId, String evidenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disputeId' is set
        if (disputeId == null) {
            throw new ApiException("Missing the required parameter 'disputeId' when calling retrieveDisputeEvidence(Async)");
        }

        // verify the required parameter 'evidenceId' is set
        if (evidenceId == null) {
            throw new ApiException("Missing the required parameter 'evidenceId' when calling retrieveDisputeEvidence(Async)");
        }

        return retrieveDisputeEvidenceCall(disputeId, evidenceId, _callback);

    }

    /**
     * RetrieveDisputeEvidence
     * Returns the evidence metadata specified by the evidence ID in the request URL path  You must maintain a copy of the evidence you upload if you want to reference it later. You cannot download the evidence after you upload it.
     * @param disputeId The ID of the dispute that you want to retrieve evidence from. (required)
     * @param evidenceId The ID of the evidence to retrieve. (required)
     * @return RetrieveDisputeEvidenceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveDisputeEvidenceResponse retrieveDisputeEvidence(String disputeId, String evidenceId) throws ApiException {
        ApiResponse<RetrieveDisputeEvidenceResponse> localVarResp = retrieveDisputeEvidenceWithHttpInfo(disputeId, evidenceId);
        return localVarResp.getData();
    }

    /**
     * RetrieveDisputeEvidence
     * Returns the evidence metadata specified by the evidence ID in the request URL path  You must maintain a copy of the evidence you upload if you want to reference it later. You cannot download the evidence after you upload it.
     * @param disputeId The ID of the dispute that you want to retrieve evidence from. (required)
     * @param evidenceId The ID of the evidence to retrieve. (required)
     * @return ApiResponse&lt;RetrieveDisputeEvidenceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveDisputeEvidenceResponse> retrieveDisputeEvidenceWithHttpInfo(String disputeId, String evidenceId) throws ApiException {
        okhttp3.Call localVarCall = retrieveDisputeEvidenceValidateBeforeCall(disputeId, evidenceId, null);
        Type localVarReturnType = new TypeToken<RetrieveDisputeEvidenceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveDisputeEvidence (asynchronously)
     * Returns the evidence metadata specified by the evidence ID in the request URL path  You must maintain a copy of the evidence you upload if you want to reference it later. You cannot download the evidence after you upload it.
     * @param disputeId The ID of the dispute that you want to retrieve evidence from. (required)
     * @param evidenceId The ID of the evidence to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveDisputeEvidenceAsync(String disputeId, String evidenceId, final ApiCallback<RetrieveDisputeEvidenceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveDisputeEvidenceValidateBeforeCall(disputeId, evidenceId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveDisputeEvidenceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitEvidence
     * @param disputeId The ID of the dispute that you want to submit evidence for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitEvidenceCall(String disputeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/disputes/{dispute_id}/submit-evidence"
            .replace("{" + "dispute_id" + "}", localVarApiClient.escapeString(disputeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitEvidenceValidateBeforeCall(String disputeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disputeId' is set
        if (disputeId == null) {
            throw new ApiException("Missing the required parameter 'disputeId' when calling submitEvidence(Async)");
        }

        return submitEvidenceCall(disputeId, _callback);

    }

    /**
     * SubmitEvidence
     * Submits evidence to the cardholder&#39;s bank.  Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded using the [CreateDisputeEvidenceFile](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-file) and [CreateDisputeEvidenceText](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-text) endpoints and evidence automatically provided by Square, when available.
     * @param disputeId The ID of the dispute that you want to submit evidence for. (required)
     * @return SubmitEvidenceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubmitEvidenceResponse submitEvidence(String disputeId) throws ApiException {
        ApiResponse<SubmitEvidenceResponse> localVarResp = submitEvidenceWithHttpInfo(disputeId);
        return localVarResp.getData();
    }

    /**
     * SubmitEvidence
     * Submits evidence to the cardholder&#39;s bank.  Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded using the [CreateDisputeEvidenceFile](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-file) and [CreateDisputeEvidenceText](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-text) endpoints and evidence automatically provided by Square, when available.
     * @param disputeId The ID of the dispute that you want to submit evidence for. (required)
     * @return ApiResponse&lt;SubmitEvidenceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmitEvidenceResponse> submitEvidenceWithHttpInfo(String disputeId) throws ApiException {
        okhttp3.Call localVarCall = submitEvidenceValidateBeforeCall(disputeId, null);
        Type localVarReturnType = new TypeToken<SubmitEvidenceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SubmitEvidence (asynchronously)
     * Submits evidence to the cardholder&#39;s bank.  Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded using the [CreateDisputeEvidenceFile](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-file) and [CreateDisputeEvidenceText](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-text) endpoints and evidence automatically provided by Square, when available.
     * @param disputeId The ID of the dispute that you want to submit evidence for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitEvidenceAsync(String disputeId, final ApiCallback<SubmitEvidenceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitEvidenceValidateBeforeCall(disputeId, _callback);
        Type localVarReturnType = new TypeToken<SubmitEvidenceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
