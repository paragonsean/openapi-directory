/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BulkCreateTeamMembersRequest;
import org.openapitools.client.model.BulkCreateTeamMembersResponse;
import org.openapitools.client.model.BulkUpdateTeamMembersRequest;
import org.openapitools.client.model.BulkUpdateTeamMembersResponse;
import org.openapitools.client.model.CreateTeamMemberRequest;
import org.openapitools.client.model.CreateTeamMemberResponse;
import org.openapitools.client.model.RetrieveTeamMemberResponse;
import org.openapitools.client.model.RetrieveWageSettingResponse;
import org.openapitools.client.model.SearchTeamMembersRequest;
import org.openapitools.client.model.SearchTeamMembersResponse;
import org.openapitools.client.model.UpdateTeamMemberRequest;
import org.openapitools.client.model.UpdateTeamMemberResponse;
import org.openapitools.client.model.UpdateWageSettingRequest;
import org.openapitools.client.model.UpdateWageSettingResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeamApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bulkCreateTeamMembers
     * @param bulkCreateTeamMembersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkCreateTeamMembersCall(BulkCreateTeamMembersRequest bulkCreateTeamMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkCreateTeamMembersRequest;

        // create path and map variables
        String localVarPath = "/v2/team-members/bulk-create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkCreateTeamMembersValidateBeforeCall(BulkCreateTeamMembersRequest bulkCreateTeamMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bulkCreateTeamMembersRequest' is set
        if (bulkCreateTeamMembersRequest == null) {
            throw new ApiException("Missing the required parameter 'bulkCreateTeamMembersRequest' when calling bulkCreateTeamMembers(Async)");
        }

        return bulkCreateTeamMembersCall(bulkCreateTeamMembersRequest, _callback);

    }

    /**
     * BulkCreateTeamMembers
     * Creates multiple &#x60;TeamMember&#x60; objects. The created &#x60;TeamMember&#x60; objects are returned on successful creates. This process is non-transactional and processes as much of the request as possible. If one of the creates in the request cannot be successfully processed, the request is not marked as failed, but the body of the response contains explicit error information for the failed create.  Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-create-team-members).
     * @param bulkCreateTeamMembersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return BulkCreateTeamMembersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BulkCreateTeamMembersResponse bulkCreateTeamMembers(BulkCreateTeamMembersRequest bulkCreateTeamMembersRequest) throws ApiException {
        ApiResponse<BulkCreateTeamMembersResponse> localVarResp = bulkCreateTeamMembersWithHttpInfo(bulkCreateTeamMembersRequest);
        return localVarResp.getData();
    }

    /**
     * BulkCreateTeamMembers
     * Creates multiple &#x60;TeamMember&#x60; objects. The created &#x60;TeamMember&#x60; objects are returned on successful creates. This process is non-transactional and processes as much of the request as possible. If one of the creates in the request cannot be successfully processed, the request is not marked as failed, but the body of the response contains explicit error information for the failed create.  Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-create-team-members).
     * @param bulkCreateTeamMembersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;BulkCreateTeamMembersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkCreateTeamMembersResponse> bulkCreateTeamMembersWithHttpInfo(BulkCreateTeamMembersRequest bulkCreateTeamMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = bulkCreateTeamMembersValidateBeforeCall(bulkCreateTeamMembersRequest, null);
        Type localVarReturnType = new TypeToken<BulkCreateTeamMembersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BulkCreateTeamMembers (asynchronously)
     * Creates multiple &#x60;TeamMember&#x60; objects. The created &#x60;TeamMember&#x60; objects are returned on successful creates. This process is non-transactional and processes as much of the request as possible. If one of the creates in the request cannot be successfully processed, the request is not marked as failed, but the body of the response contains explicit error information for the failed create.  Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-create-team-members).
     * @param bulkCreateTeamMembersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkCreateTeamMembersAsync(BulkCreateTeamMembersRequest bulkCreateTeamMembersRequest, final ApiCallback<BulkCreateTeamMembersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkCreateTeamMembersValidateBeforeCall(bulkCreateTeamMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<BulkCreateTeamMembersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkUpdateTeamMembers
     * @param bulkUpdateTeamMembersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkUpdateTeamMembersCall(BulkUpdateTeamMembersRequest bulkUpdateTeamMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkUpdateTeamMembersRequest;

        // create path and map variables
        String localVarPath = "/v2/team-members/bulk-update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkUpdateTeamMembersValidateBeforeCall(BulkUpdateTeamMembersRequest bulkUpdateTeamMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bulkUpdateTeamMembersRequest' is set
        if (bulkUpdateTeamMembersRequest == null) {
            throw new ApiException("Missing the required parameter 'bulkUpdateTeamMembersRequest' when calling bulkUpdateTeamMembers(Async)");
        }

        return bulkUpdateTeamMembersCall(bulkUpdateTeamMembersRequest, _callback);

    }

    /**
     * BulkUpdateTeamMembers
     * Updates multiple &#x60;TeamMember&#x60; objects. The updated &#x60;TeamMember&#x60; objects are returned on successful updates. This process is non-transactional and processes as much of the request as possible. If one of the updates in the request cannot be successfully processed, the request is not marked as failed, but the body of the response contains explicit error information for the failed update. Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-update-team-members).
     * @param bulkUpdateTeamMembersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return BulkUpdateTeamMembersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BulkUpdateTeamMembersResponse bulkUpdateTeamMembers(BulkUpdateTeamMembersRequest bulkUpdateTeamMembersRequest) throws ApiException {
        ApiResponse<BulkUpdateTeamMembersResponse> localVarResp = bulkUpdateTeamMembersWithHttpInfo(bulkUpdateTeamMembersRequest);
        return localVarResp.getData();
    }

    /**
     * BulkUpdateTeamMembers
     * Updates multiple &#x60;TeamMember&#x60; objects. The updated &#x60;TeamMember&#x60; objects are returned on successful updates. This process is non-transactional and processes as much of the request as possible. If one of the updates in the request cannot be successfully processed, the request is not marked as failed, but the body of the response contains explicit error information for the failed update. Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-update-team-members).
     * @param bulkUpdateTeamMembersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;BulkUpdateTeamMembersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkUpdateTeamMembersResponse> bulkUpdateTeamMembersWithHttpInfo(BulkUpdateTeamMembersRequest bulkUpdateTeamMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = bulkUpdateTeamMembersValidateBeforeCall(bulkUpdateTeamMembersRequest, null);
        Type localVarReturnType = new TypeToken<BulkUpdateTeamMembersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BulkUpdateTeamMembers (asynchronously)
     * Updates multiple &#x60;TeamMember&#x60; objects. The updated &#x60;TeamMember&#x60; objects are returned on successful updates. This process is non-transactional and processes as much of the request as possible. If one of the updates in the request cannot be successfully processed, the request is not marked as failed, but the body of the response contains explicit error information for the failed update. Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-update-team-members).
     * @param bulkUpdateTeamMembersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkUpdateTeamMembersAsync(BulkUpdateTeamMembersRequest bulkUpdateTeamMembersRequest, final ApiCallback<BulkUpdateTeamMembersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkUpdateTeamMembersValidateBeforeCall(bulkUpdateTeamMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<BulkUpdateTeamMembersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTeamMember
     * @param createTeamMemberRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTeamMemberCall(CreateTeamMemberRequest createTeamMemberRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTeamMemberRequest;

        // create path and map variables
        String localVarPath = "/v2/team-members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeamMemberValidateBeforeCall(CreateTeamMemberRequest createTeamMemberRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTeamMemberRequest' is set
        if (createTeamMemberRequest == null) {
            throw new ApiException("Missing the required parameter 'createTeamMemberRequest' when calling createTeamMember(Async)");
        }

        return createTeamMemberCall(createTeamMemberRequest, _callback);

    }

    /**
     * CreateTeamMember
     * Creates a single &#x60;TeamMember&#x60; object. The &#x60;TeamMember&#x60; object is returned on successful creates. You must provide the following values in your request to this endpoint: - &#x60;given_name&#x60; - &#x60;family_name&#x60;  Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#createteammember).
     * @param createTeamMemberRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return CreateTeamMemberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateTeamMemberResponse createTeamMember(CreateTeamMemberRequest createTeamMemberRequest) throws ApiException {
        ApiResponse<CreateTeamMemberResponse> localVarResp = createTeamMemberWithHttpInfo(createTeamMemberRequest);
        return localVarResp.getData();
    }

    /**
     * CreateTeamMember
     * Creates a single &#x60;TeamMember&#x60; object. The &#x60;TeamMember&#x60; object is returned on successful creates. You must provide the following values in your request to this endpoint: - &#x60;given_name&#x60; - &#x60;family_name&#x60;  Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#createteammember).
     * @param createTeamMemberRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;CreateTeamMemberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTeamMemberResponse> createTeamMemberWithHttpInfo(CreateTeamMemberRequest createTeamMemberRequest) throws ApiException {
        okhttp3.Call localVarCall = createTeamMemberValidateBeforeCall(createTeamMemberRequest, null);
        Type localVarReturnType = new TypeToken<CreateTeamMemberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateTeamMember (asynchronously)
     * Creates a single &#x60;TeamMember&#x60; object. The &#x60;TeamMember&#x60; object is returned on successful creates. You must provide the following values in your request to this endpoint: - &#x60;given_name&#x60; - &#x60;family_name&#x60;  Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#createteammember).
     * @param createTeamMemberRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTeamMemberAsync(CreateTeamMemberRequest createTeamMemberRequest, final ApiCallback<CreateTeamMemberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeamMemberValidateBeforeCall(createTeamMemberRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateTeamMemberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveTeamMember
     * @param teamMemberId The ID of the team member to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveTeamMemberCall(String teamMemberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/team-members/{team_member_id}"
            .replace("{" + "team_member_id" + "}", localVarApiClient.escapeString(teamMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveTeamMemberValidateBeforeCall(String teamMemberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamMemberId' is set
        if (teamMemberId == null) {
            throw new ApiException("Missing the required parameter 'teamMemberId' when calling retrieveTeamMember(Async)");
        }

        return retrieveTeamMemberCall(teamMemberId, _callback);

    }

    /**
     * RetrieveTeamMember
     * Retrieves a &#x60;TeamMember&#x60; object for the given &#x60;TeamMember.id&#x60;. Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrieve-a-team-member).
     * @param teamMemberId The ID of the team member to retrieve. (required)
     * @return RetrieveTeamMemberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveTeamMemberResponse retrieveTeamMember(String teamMemberId) throws ApiException {
        ApiResponse<RetrieveTeamMemberResponse> localVarResp = retrieveTeamMemberWithHttpInfo(teamMemberId);
        return localVarResp.getData();
    }

    /**
     * RetrieveTeamMember
     * Retrieves a &#x60;TeamMember&#x60; object for the given &#x60;TeamMember.id&#x60;. Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrieve-a-team-member).
     * @param teamMemberId The ID of the team member to retrieve. (required)
     * @return ApiResponse&lt;RetrieveTeamMemberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveTeamMemberResponse> retrieveTeamMemberWithHttpInfo(String teamMemberId) throws ApiException {
        okhttp3.Call localVarCall = retrieveTeamMemberValidateBeforeCall(teamMemberId, null);
        Type localVarReturnType = new TypeToken<RetrieveTeamMemberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveTeamMember (asynchronously)
     * Retrieves a &#x60;TeamMember&#x60; object for the given &#x60;TeamMember.id&#x60;. Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrieve-a-team-member).
     * @param teamMemberId The ID of the team member to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveTeamMemberAsync(String teamMemberId, final ApiCallback<RetrieveTeamMemberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveTeamMemberValidateBeforeCall(teamMemberId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveTeamMemberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveWageSetting
     * @param teamMemberId The ID of the team member for which to retrieve the wage setting. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveWageSettingCall(String teamMemberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/team-members/{team_member_id}/wage-setting"
            .replace("{" + "team_member_id" + "}", localVarApiClient.escapeString(teamMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveWageSettingValidateBeforeCall(String teamMemberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamMemberId' is set
        if (teamMemberId == null) {
            throw new ApiException("Missing the required parameter 'teamMemberId' when calling retrieveWageSetting(Async)");
        }

        return retrieveWageSettingCall(teamMemberId, _callback);

    }

    /**
     * RetrieveWageSetting
     * Retrieves a &#x60;WageSetting&#x60; object for a team member specified by &#x60;TeamMember.id&#x60;. Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrievewagesetting).
     * @param teamMemberId The ID of the team member for which to retrieve the wage setting. (required)
     * @return RetrieveWageSettingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveWageSettingResponse retrieveWageSetting(String teamMemberId) throws ApiException {
        ApiResponse<RetrieveWageSettingResponse> localVarResp = retrieveWageSettingWithHttpInfo(teamMemberId);
        return localVarResp.getData();
    }

    /**
     * RetrieveWageSetting
     * Retrieves a &#x60;WageSetting&#x60; object for a team member specified by &#x60;TeamMember.id&#x60;. Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrievewagesetting).
     * @param teamMemberId The ID of the team member for which to retrieve the wage setting. (required)
     * @return ApiResponse&lt;RetrieveWageSettingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveWageSettingResponse> retrieveWageSettingWithHttpInfo(String teamMemberId) throws ApiException {
        okhttp3.Call localVarCall = retrieveWageSettingValidateBeforeCall(teamMemberId, null);
        Type localVarReturnType = new TypeToken<RetrieveWageSettingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveWageSetting (asynchronously)
     * Retrieves a &#x60;WageSetting&#x60; object for a team member specified by &#x60;TeamMember.id&#x60;. Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrievewagesetting).
     * @param teamMemberId The ID of the team member for which to retrieve the wage setting. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveWageSettingAsync(String teamMemberId, final ApiCallback<RetrieveWageSettingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveWageSettingValidateBeforeCall(teamMemberId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveWageSettingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchTeamMembers
     * @param searchTeamMembersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchTeamMembersCall(SearchTeamMembersRequest searchTeamMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchTeamMembersRequest;

        // create path and map variables
        String localVarPath = "/v2/team-members/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchTeamMembersValidateBeforeCall(SearchTeamMembersRequest searchTeamMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchTeamMembersRequest' is set
        if (searchTeamMembersRequest == null) {
            throw new ApiException("Missing the required parameter 'searchTeamMembersRequest' when calling searchTeamMembers(Async)");
        }

        return searchTeamMembersCall(searchTeamMembersRequest, _callback);

    }

    /**
     * SearchTeamMembers
     * Returns a paginated list of &#x60;TeamMember&#x60; objects for a business. The list can be filtered by the following: - location IDs - &#x60;status&#x60;
     * @param searchTeamMembersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return SearchTeamMembersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SearchTeamMembersResponse searchTeamMembers(SearchTeamMembersRequest searchTeamMembersRequest) throws ApiException {
        ApiResponse<SearchTeamMembersResponse> localVarResp = searchTeamMembersWithHttpInfo(searchTeamMembersRequest);
        return localVarResp.getData();
    }

    /**
     * SearchTeamMembers
     * Returns a paginated list of &#x60;TeamMember&#x60; objects for a business. The list can be filtered by the following: - location IDs - &#x60;status&#x60;
     * @param searchTeamMembersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;SearchTeamMembersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchTeamMembersResponse> searchTeamMembersWithHttpInfo(SearchTeamMembersRequest searchTeamMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = searchTeamMembersValidateBeforeCall(searchTeamMembersRequest, null);
        Type localVarReturnType = new TypeToken<SearchTeamMembersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SearchTeamMembers (asynchronously)
     * Returns a paginated list of &#x60;TeamMember&#x60; objects for a business. The list can be filtered by the following: - location IDs - &#x60;status&#x60;
     * @param searchTeamMembersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchTeamMembersAsync(SearchTeamMembersRequest searchTeamMembersRequest, final ApiCallback<SearchTeamMembersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchTeamMembersValidateBeforeCall(searchTeamMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchTeamMembersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTeamMember
     * @param teamMemberId The ID of the team member to update. (required)
     * @param updateTeamMemberRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTeamMemberCall(String teamMemberId, UpdateTeamMemberRequest updateTeamMemberRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTeamMemberRequest;

        // create path and map variables
        String localVarPath = "/v2/team-members/{team_member_id}"
            .replace("{" + "team_member_id" + "}", localVarApiClient.escapeString(teamMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTeamMemberValidateBeforeCall(String teamMemberId, UpdateTeamMemberRequest updateTeamMemberRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamMemberId' is set
        if (teamMemberId == null) {
            throw new ApiException("Missing the required parameter 'teamMemberId' when calling updateTeamMember(Async)");
        }

        // verify the required parameter 'updateTeamMemberRequest' is set
        if (updateTeamMemberRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTeamMemberRequest' when calling updateTeamMember(Async)");
        }

        return updateTeamMemberCall(teamMemberId, updateTeamMemberRequest, _callback);

    }

    /**
     * UpdateTeamMember
     * Updates a single &#x60;TeamMember&#x60; object. The &#x60;TeamMember&#x60; object is returned on successful updates. Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#update-a-team-member).
     * @param teamMemberId The ID of the team member to update. (required)
     * @param updateTeamMemberRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return UpdateTeamMemberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTeamMemberResponse updateTeamMember(String teamMemberId, UpdateTeamMemberRequest updateTeamMemberRequest) throws ApiException {
        ApiResponse<UpdateTeamMemberResponse> localVarResp = updateTeamMemberWithHttpInfo(teamMemberId, updateTeamMemberRequest);
        return localVarResp.getData();
    }

    /**
     * UpdateTeamMember
     * Updates a single &#x60;TeamMember&#x60; object. The &#x60;TeamMember&#x60; object is returned on successful updates. Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#update-a-team-member).
     * @param teamMemberId The ID of the team member to update. (required)
     * @param updateTeamMemberRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;UpdateTeamMemberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTeamMemberResponse> updateTeamMemberWithHttpInfo(String teamMemberId, UpdateTeamMemberRequest updateTeamMemberRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTeamMemberValidateBeforeCall(teamMemberId, updateTeamMemberRequest, null);
        Type localVarReturnType = new TypeToken<UpdateTeamMemberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateTeamMember (asynchronously)
     * Updates a single &#x60;TeamMember&#x60; object. The &#x60;TeamMember&#x60; object is returned on successful updates. Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#update-a-team-member).
     * @param teamMemberId The ID of the team member to update. (required)
     * @param updateTeamMemberRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTeamMemberAsync(String teamMemberId, UpdateTeamMemberRequest updateTeamMemberRequest, final ApiCallback<UpdateTeamMemberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTeamMemberValidateBeforeCall(teamMemberId, updateTeamMemberRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateTeamMemberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWageSetting
     * @param teamMemberId The ID of the team member for which to update the &#x60;WageSetting&#x60; object. (required)
     * @param updateWageSettingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWageSettingCall(String teamMemberId, UpdateWageSettingRequest updateWageSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWageSettingRequest;

        // create path and map variables
        String localVarPath = "/v2/team-members/{team_member_id}/wage-setting"
            .replace("{" + "team_member_id" + "}", localVarApiClient.escapeString(teamMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWageSettingValidateBeforeCall(String teamMemberId, UpdateWageSettingRequest updateWageSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamMemberId' is set
        if (teamMemberId == null) {
            throw new ApiException("Missing the required parameter 'teamMemberId' when calling updateWageSetting(Async)");
        }

        // verify the required parameter 'updateWageSettingRequest' is set
        if (updateWageSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'updateWageSettingRequest' when calling updateWageSetting(Async)");
        }

        return updateWageSettingCall(teamMemberId, updateWageSettingRequest, _callback);

    }

    /**
     * UpdateWageSetting
     * Creates or updates a &#x60;WageSetting&#x60; object. The object is created if a &#x60;WageSetting&#x60; with the specified &#x60;team_member_id&#x60; does not exist. Otherwise, it fully replaces the &#x60;WageSetting&#x60; object for the team member. The &#x60;WageSetting&#x60; is returned on a successful update. Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#create-or-update-a-wage-setting).
     * @param teamMemberId The ID of the team member for which to update the &#x60;WageSetting&#x60; object. (required)
     * @param updateWageSettingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return UpdateWageSettingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWageSettingResponse updateWageSetting(String teamMemberId, UpdateWageSettingRequest updateWageSettingRequest) throws ApiException {
        ApiResponse<UpdateWageSettingResponse> localVarResp = updateWageSettingWithHttpInfo(teamMemberId, updateWageSettingRequest);
        return localVarResp.getData();
    }

    /**
     * UpdateWageSetting
     * Creates or updates a &#x60;WageSetting&#x60; object. The object is created if a &#x60;WageSetting&#x60; with the specified &#x60;team_member_id&#x60; does not exist. Otherwise, it fully replaces the &#x60;WageSetting&#x60; object for the team member. The &#x60;WageSetting&#x60; is returned on a successful update. Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#create-or-update-a-wage-setting).
     * @param teamMemberId The ID of the team member for which to update the &#x60;WageSetting&#x60; object. (required)
     * @param updateWageSettingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;UpdateWageSettingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateWageSettingResponse> updateWageSettingWithHttpInfo(String teamMemberId, UpdateWageSettingRequest updateWageSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWageSettingValidateBeforeCall(teamMemberId, updateWageSettingRequest, null);
        Type localVarReturnType = new TypeToken<UpdateWageSettingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateWageSetting (asynchronously)
     * Creates or updates a &#x60;WageSetting&#x60; object. The object is created if a &#x60;WageSetting&#x60; with the specified &#x60;team_member_id&#x60; does not exist. Otherwise, it fully replaces the &#x60;WageSetting&#x60; object for the team member. The &#x60;WageSetting&#x60; is returned on a successful update. Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#create-or-update-a-wage-setting).
     * @param teamMemberId The ID of the team member for which to update the &#x60;WageSetting&#x60; object. (required)
     * @param updateWageSettingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWageSettingAsync(String teamMemberId, UpdateWageSettingRequest updateWageSettingRequest, final ApiCallback<UpdateWageSettingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWageSettingValidateBeforeCall(teamMemberId, updateWageSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateWageSettingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
