/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CatalogQuickAmount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogQuickAmountsSettings {
  public static final String SERIALIZED_NAME_AMOUNTS = "amounts";
  @SerializedName(SERIALIZED_NAME_AMOUNTS)
  private List<CatalogQuickAmount> amounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ELIGIBLE_FOR_AUTO_AMOUNTS = "eligible_for_auto_amounts";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_FOR_AUTO_AMOUNTS)
  private Boolean eligibleForAutoAmounts;

  public static final String SERIALIZED_NAME_OPTION = "option";
  @SerializedName(SERIALIZED_NAME_OPTION)
  private String option;

  public CatalogQuickAmountsSettings() {
  }

  public CatalogQuickAmountsSettings amounts(List<CatalogQuickAmount> amounts) {
    this.amounts = amounts;
    return this;
  }

  public CatalogQuickAmountsSettings addAmountsItem(CatalogQuickAmount amountsItem) {
    if (this.amounts == null) {
      this.amounts = new ArrayList<>();
    }
    this.amounts.add(amountsItem);
    return this;
  }

  /**
   * Represents a set of Quick Amounts at this location.
   * @return amounts
   */
  @javax.annotation.Nullable
  public List<CatalogQuickAmount> getAmounts() {
    return amounts;
  }

  public void setAmounts(List<CatalogQuickAmount> amounts) {
    this.amounts = amounts;
  }


  public CatalogQuickAmountsSettings eligibleForAutoAmounts(Boolean eligibleForAutoAmounts) {
    this.eligibleForAutoAmounts = eligibleForAutoAmounts;
    return this;
  }

  /**
   * Represents location&#39;s eligibility for auto amounts The boolean should be consistent with whether there are AUTO amounts in the &#x60;amounts&#x60;.
   * @return eligibleForAutoAmounts
   */
  @javax.annotation.Nullable
  public Boolean getEligibleForAutoAmounts() {
    return eligibleForAutoAmounts;
  }

  public void setEligibleForAutoAmounts(Boolean eligibleForAutoAmounts) {
    this.eligibleForAutoAmounts = eligibleForAutoAmounts;
  }


  public CatalogQuickAmountsSettings option(String option) {
    this.option = option;
    return this;
  }

  /**
   * Represents the option seller currently uses on Quick Amounts.
   * @return option
   */
  @javax.annotation.Nonnull
  public String getOption() {
    return option;
  }

  public void setOption(String option) {
    this.option = option;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogQuickAmountsSettings catalogQuickAmountsSettings = (CatalogQuickAmountsSettings) o;
    return Objects.equals(this.amounts, catalogQuickAmountsSettings.amounts) &&
        Objects.equals(this.eligibleForAutoAmounts, catalogQuickAmountsSettings.eligibleForAutoAmounts) &&
        Objects.equals(this.option, catalogQuickAmountsSettings.option);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amounts, eligibleForAutoAmounts, option);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogQuickAmountsSettings {\n");
    sb.append("    amounts: ").append(toIndentedString(amounts)).append("\n");
    sb.append("    eligibleForAutoAmounts: ").append(toIndentedString(eligibleForAutoAmounts)).append("\n");
    sb.append("    option: ").append(toIndentedString(option)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amounts");
    openapiFields.add("eligible_for_auto_amounts");
    openapiFields.add("option");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("option");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogQuickAmountsSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogQuickAmountsSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogQuickAmountsSettings is not found in the empty JSON string", CatalogQuickAmountsSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogQuickAmountsSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogQuickAmountsSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogQuickAmountsSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("amounts") != null && !jsonObj.get("amounts").isJsonNull()) {
        JsonArray jsonArrayamounts = jsonObj.getAsJsonArray("amounts");
        if (jsonArrayamounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("amounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `amounts` to be an array in the JSON string but got `%s`", jsonObj.get("amounts").toString()));
          }

          // validate the optional field `amounts` (array)
          for (int i = 0; i < jsonArrayamounts.size(); i++) {
            CatalogQuickAmount.validateJsonElement(jsonArrayamounts.get(i));
          };
        }
      }
      if (!jsonObj.get("option").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `option` to be a primitive type in the JSON string but got `%s`", jsonObj.get("option").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogQuickAmountsSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogQuickAmountsSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogQuickAmountsSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogQuickAmountsSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogQuickAmountsSettings>() {
           @Override
           public void write(JsonWriter out, CatalogQuickAmountsSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogQuickAmountsSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogQuickAmountsSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogQuickAmountsSettings
   * @throws IOException if the JSON string is invalid with respect to CatalogQuickAmountsSettings
   */
  public static CatalogQuickAmountsSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogQuickAmountsSettings.class);
  }

  /**
   * Convert an instance of CatalogQuickAmountsSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

