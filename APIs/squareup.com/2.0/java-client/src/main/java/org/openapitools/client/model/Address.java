/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a postal address in a country. The address format is based  on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,  see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).  This format has dedicated fields for four address components: postal code,  locality (city), administrative district (state, prefecture, or province), and  sublocality (town or village). These components have dedicated fields in the  &#x60;Address&#x60; object because software sometimes behaves differently based on them.  For example, sales tax software may charge different amounts of sales tax  based on the postal code, and some software is only available in  certain states due to compliance reasons.  For the remaining address components, the &#x60;Address&#x60; type provides the  &#x60;address_line_1&#x60; and &#x60;address_line_2&#x60; fields for free-form data entry.  These fields are free-form because the remaining address components have  too many variations around the world and typical software does not parse  these components. These fields enable users to enter anything they want.   Note that, in the current implementation, all other &#x60;Address&#x60; type fields are blank.  These include &#x60;address_line_3&#x60;, &#x60;sublocality_2&#x60;, &#x60;sublocality_3&#x60;,  &#x60;administrative_district_level_2&#x60;, &#x60;administrative_district_level_3&#x60;,  &#x60;first_name&#x60;, &#x60;last_name&#x60;, and &#x60;organization&#x60;.   When it comes to localization, the seller&#39;s language preferences  (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))  are ignored for addresses. Even though Square products (such as Square Point of Sale  and the Seller Dashboard) mostly use a seller&#39;s language preference in  communication, when it comes to addresses, they will use English for a US address,  Japanese for an address in Japan, and so on.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Address {
  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "address_line_1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "address_line_2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  private String addressLine2;

  public static final String SERIALIZED_NAME_ADDRESS_LINE3 = "address_line_3";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE3)
  private String addressLine3;

  public static final String SERIALIZED_NAME_ADMINISTRATIVE_DISTRICT_LEVEL1 = "administrative_district_level_1";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATIVE_DISTRICT_LEVEL1)
  private String administrativeDistrictLevel1;

  public static final String SERIALIZED_NAME_ADMINISTRATIVE_DISTRICT_LEVEL2 = "administrative_district_level_2";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATIVE_DISTRICT_LEVEL2)
  private String administrativeDistrictLevel2;

  public static final String SERIALIZED_NAME_ADMINISTRATIVE_DISTRICT_LEVEL3 = "administrative_district_level_3";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATIVE_DISTRICT_LEVEL3)
  private String administrativeDistrictLevel3;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LOCALITY = "locality";
  @SerializedName(SERIALIZED_NAME_LOCALITY)
  private String locality;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private String organization;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_SUBLOCALITY = "sublocality";
  @SerializedName(SERIALIZED_NAME_SUBLOCALITY)
  private String sublocality;

  public static final String SERIALIZED_NAME_SUBLOCALITY2 = "sublocality_2";
  @SerializedName(SERIALIZED_NAME_SUBLOCALITY2)
  private String sublocality2;

  public static final String SERIALIZED_NAME_SUBLOCALITY3 = "sublocality_3";
  @SerializedName(SERIALIZED_NAME_SUBLOCALITY3)
  private String sublocality3;

  public Address() {
  }

  public Address addressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
    return this;
  }

  /**
   * The first line of the address.  Fields that start with &#x60;address_line&#x60; provide the address&#39;s most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields).
   * @return addressLine1
   */
  @javax.annotation.Nullable
  public String getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
  }


  public Address addressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
    return this;
  }

  /**
   * The second line of the address, if any.
   * @return addressLine2
   */
  @javax.annotation.Nullable
  public String getAddressLine2() {
    return addressLine2;
  }

  public void setAddressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
  }


  public Address addressLine3(String addressLine3) {
    this.addressLine3 = addressLine3;
    return this;
  }

  /**
   * The third line of the address, if any.
   * @return addressLine3
   */
  @javax.annotation.Nullable
  public String getAddressLine3() {
    return addressLine3;
  }

  public void setAddressLine3(String addressLine3) {
    this.addressLine3 = addressLine3;
  }


  public Address administrativeDistrictLevel1(String administrativeDistrictLevel1) {
    this.administrativeDistrictLevel1 = administrativeDistrictLevel1;
    return this;
  }

  /**
   * A civil entity within the address&#39;s country. In the US, this is the state.
   * @return administrativeDistrictLevel1
   */
  @javax.annotation.Nullable
  public String getAdministrativeDistrictLevel1() {
    return administrativeDistrictLevel1;
  }

  public void setAdministrativeDistrictLevel1(String administrativeDistrictLevel1) {
    this.administrativeDistrictLevel1 = administrativeDistrictLevel1;
  }


  public Address administrativeDistrictLevel2(String administrativeDistrictLevel2) {
    this.administrativeDistrictLevel2 = administrativeDistrictLevel2;
    return this;
  }

  /**
   * A civil entity within the address&#39;s &#x60;administrative_district_level_1&#x60;. In the US, this is the county.
   * @return administrativeDistrictLevel2
   */
  @javax.annotation.Nullable
  public String getAdministrativeDistrictLevel2() {
    return administrativeDistrictLevel2;
  }

  public void setAdministrativeDistrictLevel2(String administrativeDistrictLevel2) {
    this.administrativeDistrictLevel2 = administrativeDistrictLevel2;
  }


  public Address administrativeDistrictLevel3(String administrativeDistrictLevel3) {
    this.administrativeDistrictLevel3 = administrativeDistrictLevel3;
    return this;
  }

  /**
   * A civil entity within the address&#39;s &#x60;administrative_district_level_2&#x60;, if any.
   * @return administrativeDistrictLevel3
   */
  @javax.annotation.Nullable
  public String getAdministrativeDistrictLevel3() {
    return administrativeDistrictLevel3;
  }

  public void setAdministrativeDistrictLevel3(String administrativeDistrictLevel3) {
    this.administrativeDistrictLevel3 = administrativeDistrictLevel3;
  }


  public Address country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The address&#39;s country, in ISO 3166-1-alpha-2 format.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public Address firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Optional first name when it&#39;s representing recipient.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Address lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Optional last name when it&#39;s representing recipient.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Address locality(String locality) {
    this.locality = locality;
    return this;
  }

  /**
   * The city or town of the address.
   * @return locality
   */
  @javax.annotation.Nullable
  public String getLocality() {
    return locality;
  }

  public void setLocality(String locality) {
    this.locality = locality;
  }


  public Address organization(String organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Optional organization name when it&#39;s representing recipient.
   * @return organization
   */
  @javax.annotation.Nullable
  public String getOrganization() {
    return organization;
  }

  public void setOrganization(String organization) {
    this.organization = organization;
  }


  public Address postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * The address&#39;s postal code.
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public Address sublocality(String sublocality) {
    this.sublocality = sublocality;
    return this;
  }

  /**
   * A civil region within the address&#39;s &#x60;locality&#x60;, if any.
   * @return sublocality
   */
  @javax.annotation.Nullable
  public String getSublocality() {
    return sublocality;
  }

  public void setSublocality(String sublocality) {
    this.sublocality = sublocality;
  }


  public Address sublocality2(String sublocality2) {
    this.sublocality2 = sublocality2;
    return this;
  }

  /**
   * A civil region within the address&#39;s &#x60;sublocality&#x60;, if any.
   * @return sublocality2
   */
  @javax.annotation.Nullable
  public String getSublocality2() {
    return sublocality2;
  }

  public void setSublocality2(String sublocality2) {
    this.sublocality2 = sublocality2;
  }


  public Address sublocality3(String sublocality3) {
    this.sublocality3 = sublocality3;
    return this;
  }

  /**
   * A civil region within the address&#39;s &#x60;sublocality_2&#x60;, if any.
   * @return sublocality3
   */
  @javax.annotation.Nullable
  public String getSublocality3() {
    return sublocality3;
  }

  public void setSublocality3(String sublocality3) {
    this.sublocality3 = sublocality3;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Address address = (Address) o;
    return Objects.equals(this.addressLine1, address.addressLine1) &&
        Objects.equals(this.addressLine2, address.addressLine2) &&
        Objects.equals(this.addressLine3, address.addressLine3) &&
        Objects.equals(this.administrativeDistrictLevel1, address.administrativeDistrictLevel1) &&
        Objects.equals(this.administrativeDistrictLevel2, address.administrativeDistrictLevel2) &&
        Objects.equals(this.administrativeDistrictLevel3, address.administrativeDistrictLevel3) &&
        Objects.equals(this.country, address.country) &&
        Objects.equals(this.firstName, address.firstName) &&
        Objects.equals(this.lastName, address.lastName) &&
        Objects.equals(this.locality, address.locality) &&
        Objects.equals(this.organization, address.organization) &&
        Objects.equals(this.postalCode, address.postalCode) &&
        Objects.equals(this.sublocality, address.sublocality) &&
        Objects.equals(this.sublocality2, address.sublocality2) &&
        Objects.equals(this.sublocality3, address.sublocality3);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressLine1, addressLine2, addressLine3, administrativeDistrictLevel1, administrativeDistrictLevel2, administrativeDistrictLevel3, country, firstName, lastName, locality, organization, postalCode, sublocality, sublocality2, sublocality3);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Address {\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    addressLine3: ").append(toIndentedString(addressLine3)).append("\n");
    sb.append("    administrativeDistrictLevel1: ").append(toIndentedString(administrativeDistrictLevel1)).append("\n");
    sb.append("    administrativeDistrictLevel2: ").append(toIndentedString(administrativeDistrictLevel2)).append("\n");
    sb.append("    administrativeDistrictLevel3: ").append(toIndentedString(administrativeDistrictLevel3)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    locality: ").append(toIndentedString(locality)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    sublocality: ").append(toIndentedString(sublocality)).append("\n");
    sb.append("    sublocality2: ").append(toIndentedString(sublocality2)).append("\n");
    sb.append("    sublocality3: ").append(toIndentedString(sublocality3)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address_line_1");
    openapiFields.add("address_line_2");
    openapiFields.add("address_line_3");
    openapiFields.add("administrative_district_level_1");
    openapiFields.add("administrative_district_level_2");
    openapiFields.add("administrative_district_level_3");
    openapiFields.add("country");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("locality");
    openapiFields.add("organization");
    openapiFields.add("postal_code");
    openapiFields.add("sublocality");
    openapiFields.add("sublocality_2");
    openapiFields.add("sublocality_3");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Address
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Address.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Address is not found in the empty JSON string", Address.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Address.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Address` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address_line_1") != null && !jsonObj.get("address_line_1").isJsonNull()) && !jsonObj.get("address_line_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line_1").toString()));
      }
      if ((jsonObj.get("address_line_2") != null && !jsonObj.get("address_line_2").isJsonNull()) && !jsonObj.get("address_line_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line_2").toString()));
      }
      if ((jsonObj.get("address_line_3") != null && !jsonObj.get("address_line_3").isJsonNull()) && !jsonObj.get("address_line_3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line_3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line_3").toString()));
      }
      if ((jsonObj.get("administrative_district_level_1") != null && !jsonObj.get("administrative_district_level_1").isJsonNull()) && !jsonObj.get("administrative_district_level_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `administrative_district_level_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("administrative_district_level_1").toString()));
      }
      if ((jsonObj.get("administrative_district_level_2") != null && !jsonObj.get("administrative_district_level_2").isJsonNull()) && !jsonObj.get("administrative_district_level_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `administrative_district_level_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("administrative_district_level_2").toString()));
      }
      if ((jsonObj.get("administrative_district_level_3") != null && !jsonObj.get("administrative_district_level_3").isJsonNull()) && !jsonObj.get("administrative_district_level_3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `administrative_district_level_3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("administrative_district_level_3").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("locality") != null && !jsonObj.get("locality").isJsonNull()) && !jsonObj.get("locality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locality").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      if ((jsonObj.get("postal_code") != null && !jsonObj.get("postal_code").isJsonNull()) && !jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if ((jsonObj.get("sublocality") != null && !jsonObj.get("sublocality").isJsonNull()) && !jsonObj.get("sublocality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sublocality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sublocality").toString()));
      }
      if ((jsonObj.get("sublocality_2") != null && !jsonObj.get("sublocality_2").isJsonNull()) && !jsonObj.get("sublocality_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sublocality_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sublocality_2").toString()));
      }
      if ((jsonObj.get("sublocality_3") != null && !jsonObj.get("sublocality_3").isJsonNull()) && !jsonObj.get("sublocality_3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sublocality_3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sublocality_3").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Address.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Address' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Address> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Address.class));

       return (TypeAdapter<T>) new TypeAdapter<Address>() {
           @Override
           public void write(JsonWriter out, Address value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Address read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Address given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Address
   * @throws IOException if the JSON string is invalid with respect to Address
   */
  public static Address fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Address.class);
  }

  /**
   * Convert an instance of Address to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

