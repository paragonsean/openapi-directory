/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A filter to select resources based on an exact field value. For any given value, the value can only be in one property. Depending on the field, either all properties can be set or only a subset will be available.  Refer to the documentation of the field.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FilterValue {
  public static final String SERIALIZED_NAME_ALL = "all";
  @SerializedName(SERIALIZED_NAME_ALL)
  private List<String> all = new ArrayList<>();

  public static final String SERIALIZED_NAME_ANY = "any";
  @SerializedName(SERIALIZED_NAME_ANY)
  private List<String> any = new ArrayList<>();

  public static final String SERIALIZED_NAME_NONE = "none";
  @SerializedName(SERIALIZED_NAME_NONE)
  private List<String> none = new ArrayList<>();

  public FilterValue() {
  }

  public FilterValue all(List<String> all) {
    this.all = all;
    return this;
  }

  public FilterValue addAllItem(String allItem) {
    if (this.all == null) {
      this.all = new ArrayList<>();
    }
    this.all.add(allItem);
    return this;
  }

  /**
   * A list of terms that must be present on the field of the resource.
   * @return all
   */
  @javax.annotation.Nullable
  public List<String> getAll() {
    return all;
  }

  public void setAll(List<String> all) {
    this.all = all;
  }


  public FilterValue any(List<String> any) {
    this.any = any;
    return this;
  }

  public FilterValue addAnyItem(String anyItem) {
    if (this.any == null) {
      this.any = new ArrayList<>();
    }
    this.any.add(anyItem);
    return this;
  }

  /**
   * A list of terms where at least one of them must be present on the field of the resource.
   * @return any
   */
  @javax.annotation.Nullable
  public List<String> getAny() {
    return any;
  }

  public void setAny(List<String> any) {
    this.any = any;
  }


  public FilterValue none(List<String> none) {
    this.none = none;
    return this;
  }

  public FilterValue addNoneItem(String noneItem) {
    if (this.none == null) {
      this.none = new ArrayList<>();
    }
    this.none.add(noneItem);
    return this;
  }

  /**
   * A list of terms that must not be present on the field the resource
   * @return none
   */
  @javax.annotation.Nullable
  public List<String> getNone() {
    return none;
  }

  public void setNone(List<String> none) {
    this.none = none;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterValue filterValue = (FilterValue) o;
    return Objects.equals(this.all, filterValue.all) &&
        Objects.equals(this.any, filterValue.any) &&
        Objects.equals(this.none, filterValue.none);
  }

  @Override
  public int hashCode() {
    return Objects.hash(all, any, none);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterValue {\n");
    sb.append("    all: ").append(toIndentedString(all)).append("\n");
    sb.append("    any: ").append(toIndentedString(any)).append("\n");
    sb.append("    none: ").append(toIndentedString(none)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("all");
    openapiFields.add("any");
    openapiFields.add("none");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FilterValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FilterValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FilterValue is not found in the empty JSON string", FilterValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FilterValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FilterValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("all") != null && !jsonObj.get("all").isJsonNull() && !jsonObj.get("all").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `all` to be an array in the JSON string but got `%s`", jsonObj.get("all").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("any") != null && !jsonObj.get("any").isJsonNull() && !jsonObj.get("any").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `any` to be an array in the JSON string but got `%s`", jsonObj.get("any").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("none") != null && !jsonObj.get("none").isJsonNull() && !jsonObj.get("none").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `none` to be an array in the JSON string but got `%s`", jsonObj.get("none").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FilterValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FilterValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FilterValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FilterValue.class));

       return (TypeAdapter<T>) new TypeAdapter<FilterValue>() {
           @Override
           public void write(JsonWriter out, FilterValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FilterValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FilterValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FilterValue
   * @throws IOException if the JSON string is invalid with respect to FilterValue
   */
  public static FilterValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FilterValue.class);
  }

  /**
   * Convert an instance of FilterValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

