/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.BankAccountPaymentDetails;
import org.openapitools.client.model.CardPaymentDetails;
import org.openapitools.client.model.CashPaymentDetails;
import org.openapitools.client.model.DigitalWalletDetails;
import org.openapitools.client.model.ExternalPaymentDetails;
import org.openapitools.client.model.Money;
import org.openapitools.client.model.ProcessingFee;
import org.openapitools.client.model.RiskEvaluation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a payment processed by the Square API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Payment {
  public static final String SERIALIZED_NAME_AMOUNT_MONEY = "amount_money";
  @SerializedName(SERIALIZED_NAME_AMOUNT_MONEY)
  private Money amountMoney;

  public static final String SERIALIZED_NAME_APP_FEE_MONEY = "app_fee_money";
  @SerializedName(SERIALIZED_NAME_APP_FEE_MONEY)
  private Money appFeeMoney;

  public static final String SERIALIZED_NAME_APPROVED_MONEY = "approved_money";
  @SerializedName(SERIALIZED_NAME_APPROVED_MONEY)
  private Money approvedMoney;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_DETAILS = "bank_account_details";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_DETAILS)
  private BankAccountPaymentDetails bankAccountDetails;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billing_address";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private Address billingAddress;

  public static final String SERIALIZED_NAME_BUYER_EMAIL_ADDRESS = "buyer_email_address";
  @SerializedName(SERIALIZED_NAME_BUYER_EMAIL_ADDRESS)
  private String buyerEmailAddress;

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private List<String> capabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_CARD_DETAILS = "card_details";
  @SerializedName(SERIALIZED_NAME_CARD_DETAILS)
  private CardPaymentDetails cardDetails;

  public static final String SERIALIZED_NAME_CASH_DETAILS = "cash_details";
  @SerializedName(SERIALIZED_NAME_CASH_DETAILS)
  private CashPaymentDetails cashDetails;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_DELAY_ACTION = "delay_action";
  @SerializedName(SERIALIZED_NAME_DELAY_ACTION)
  private String delayAction;

  public static final String SERIALIZED_NAME_DELAY_DURATION = "delay_duration";
  @SerializedName(SERIALIZED_NAME_DELAY_DURATION)
  private String delayDuration;

  public static final String SERIALIZED_NAME_DELAYED_UNTIL = "delayed_until";
  @SerializedName(SERIALIZED_NAME_DELAYED_UNTIL)
  private String delayedUntil;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employee_id";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_EXTERNAL_DETAILS = "external_details";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DETAILS)
  private ExternalPaymentDetails externalDetails;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_PROCESSING_FEE = "processing_fee";
  @SerializedName(SERIALIZED_NAME_PROCESSING_FEE)
  private List<ProcessingFee> processingFee = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECEIPT_NUMBER = "receipt_number";
  @SerializedName(SERIALIZED_NAME_RECEIPT_NUMBER)
  private String receiptNumber;

  public static final String SERIALIZED_NAME_RECEIPT_URL = "receipt_url";
  @SerializedName(SERIALIZED_NAME_RECEIPT_URL)
  private String receiptUrl;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "reference_id";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_REFUND_IDS = "refund_ids";
  @SerializedName(SERIALIZED_NAME_REFUND_IDS)
  private List<String> refundIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFUNDED_MONEY = "refunded_money";
  @SerializedName(SERIALIZED_NAME_REFUNDED_MONEY)
  private Money refundedMoney;

  public static final String SERIALIZED_NAME_RISK_EVALUATION = "risk_evaluation";
  @SerializedName(SERIALIZED_NAME_RISK_EVALUATION)
  private RiskEvaluation riskEvaluation;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shipping_address";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private Address shippingAddress;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "source_type";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private String sourceType;

  public static final String SERIALIZED_NAME_STATEMENT_DESCRIPTION_IDENTIFIER = "statement_description_identifier";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DESCRIPTION_IDENTIFIER)
  private String statementDescriptionIdentifier;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TIP_MONEY = "tip_money";
  @SerializedName(SERIALIZED_NAME_TIP_MONEY)
  private Money tipMoney;

  public static final String SERIALIZED_NAME_TOTAL_MONEY = "total_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_MONEY)
  private Money totalMoney;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_VERSION_TOKEN = "version_token";
  @SerializedName(SERIALIZED_NAME_VERSION_TOKEN)
  private String versionToken;

  public static final String SERIALIZED_NAME_WALLET_DETAILS = "wallet_details";
  @SerializedName(SERIALIZED_NAME_WALLET_DETAILS)
  private DigitalWalletDetails walletDetails;

  public Payment() {
  }

  public Payment amountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
    return this;
  }

  /**
   * Get amountMoney
   * @return amountMoney
   */
  @javax.annotation.Nullable
  public Money getAmountMoney() {
    return amountMoney;
  }

  public void setAmountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
  }


  public Payment appFeeMoney(Money appFeeMoney) {
    this.appFeeMoney = appFeeMoney;
    return this;
  }

  /**
   * Get appFeeMoney
   * @return appFeeMoney
   */
  @javax.annotation.Nullable
  public Money getAppFeeMoney() {
    return appFeeMoney;
  }

  public void setAppFeeMoney(Money appFeeMoney) {
    this.appFeeMoney = appFeeMoney;
  }


  public Payment approvedMoney(Money approvedMoney) {
    this.approvedMoney = approvedMoney;
    return this;
  }

  /**
   * Get approvedMoney
   * @return approvedMoney
   */
  @javax.annotation.Nullable
  public Money getApprovedMoney() {
    return approvedMoney;
  }

  public void setApprovedMoney(Money approvedMoney) {
    this.approvedMoney = approvedMoney;
  }


  public Payment bankAccountDetails(BankAccountPaymentDetails bankAccountDetails) {
    this.bankAccountDetails = bankAccountDetails;
    return this;
  }

  /**
   * Get bankAccountDetails
   * @return bankAccountDetails
   */
  @javax.annotation.Nullable
  public BankAccountPaymentDetails getBankAccountDetails() {
    return bankAccountDetails;
  }

  public void setBankAccountDetails(BankAccountPaymentDetails bankAccountDetails) {
    this.bankAccountDetails = bankAccountDetails;
  }


  public Payment billingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }


  public Payment buyerEmailAddress(String buyerEmailAddress) {
    this.buyerEmailAddress = buyerEmailAddress;
    return this;
  }

  /**
   * The buyer&#39;s email address.
   * @return buyerEmailAddress
   */
  @javax.annotation.Nullable
  public String getBuyerEmailAddress() {
    return buyerEmailAddress;
  }

  public void setBuyerEmailAddress(String buyerEmailAddress) {
    this.buyerEmailAddress = buyerEmailAddress;
  }


  public Payment capabilities(List<String> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public Payment addCapabilitiesItem(String capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new ArrayList<>();
    }
    this.capabilities.add(capabilitiesItem);
    return this;
  }

  /**
   * Actions that can be performed on this payment: - &#x60;EDIT_AMOUNT_UP&#x60; - The payment amount can be edited up. - &#x60;EDIT_AMOUNT_DOWN&#x60; - The payment amount can be edited down. - &#x60;EDIT_TIP_AMOUNT_UP&#x60; - The tip amount can be edited up. - &#x60;EDIT_TIP_AMOUNT_DOWN&#x60; - The tip amount can be edited down.
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List<String> getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(List<String> capabilities) {
    this.capabilities = capabilities;
  }


  public Payment cardDetails(CardPaymentDetails cardDetails) {
    this.cardDetails = cardDetails;
    return this;
  }

  /**
   * Get cardDetails
   * @return cardDetails
   */
  @javax.annotation.Nullable
  public CardPaymentDetails getCardDetails() {
    return cardDetails;
  }

  public void setCardDetails(CardPaymentDetails cardDetails) {
    this.cardDetails = cardDetails;
  }


  public Payment cashDetails(CashPaymentDetails cashDetails) {
    this.cashDetails = cashDetails;
    return this;
  }

  /**
   * Get cashDetails
   * @return cashDetails
   */
  @javax.annotation.Nullable
  public CashPaymentDetails getCashDetails() {
    return cashDetails;
  }

  public void setCashDetails(CashPaymentDetails cashDetails) {
    this.cashDetails = cashDetails;
  }


  public Payment createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The timestamp of when the payment was created, in RFC 3339 format.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Payment customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public Payment delayAction(String delayAction) {
    this.delayAction = delayAction;
    return this;
  }

  /**
   * The action to be applied to the payment when the &#x60;delay_duration&#x60; has elapsed. This field is read-only.  Current values include &#x60;CANCEL&#x60;.
   * @return delayAction
   */
  @javax.annotation.Nullable
  public String getDelayAction() {
    return delayAction;
  }

  public void setDelayAction(String delayAction) {
    this.delayAction = delayAction;
  }


  public Payment delayDuration(String delayDuration) {
    this.delayDuration = delayDuration;
    return this;
  }

  /**
   * The duration of time after the payment&#39;s creation when Square automatically applies the &#x60;delay_action&#x60; to the payment. This automatic &#x60;delay_action&#x60; applies only to payments that do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the &#x60;delay_duration&#x60; time period.  This field is specified as a time duration, in RFC 3339 format.  Notes: This feature is only supported for card payments.  Default:  - Card-present payments: \&quot;PT36H\&quot; (36 hours) from the creation time. - Card-not-present payments: \&quot;P7D\&quot; (7 days) from the creation time.
   * @return delayDuration
   */
  @javax.annotation.Nullable
  public String getDelayDuration() {
    return delayDuration;
  }

  public void setDelayDuration(String delayDuration) {
    this.delayDuration = delayDuration;
  }


  public Payment delayedUntil(String delayedUntil) {
    this.delayedUntil = delayedUntil;
    return this;
  }

  /**
   * The read-only timestamp of when the &#x60;delay_action&#x60; is automatically applied, in RFC 3339 format.  Note that this field is calculated by summing the payment&#39;s &#x60;delay_duration&#x60; and &#x60;created_at&#x60; fields. The &#x60;created_at&#x60; field is generated by Square and might not exactly match the time on your local machine.
   * @return delayedUntil
   */
  @javax.annotation.Nullable
  public String getDelayedUntil() {
    return delayedUntil;
  }

  public void setDelayedUntil(String delayedUntil) {
    this.delayedUntil = delayedUntil;
  }


  public Payment employeeId(String employeeId) {
    this.employeeId = employeeId;
    return this;
  }

  /**
   * An optional ID of the employee associated with taking the payment.
   * @return employeeId
   */
  @javax.annotation.Nullable
  public String getEmployeeId() {
    return employeeId;
  }

  public void setEmployeeId(String employeeId) {
    this.employeeId = employeeId;
  }


  public Payment externalDetails(ExternalPaymentDetails externalDetails) {
    this.externalDetails = externalDetails;
    return this;
  }

  /**
   * Get externalDetails
   * @return externalDetails
   */
  @javax.annotation.Nullable
  public ExternalPaymentDetails getExternalDetails() {
    return externalDetails;
  }

  public void setExternalDetails(ExternalPaymentDetails externalDetails) {
    this.externalDetails = externalDetails;
  }


  public Payment id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique ID for the payment.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Payment locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The ID of the location associated with the payment.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public Payment note(String note) {
    this.note = note;
    return this;
  }

  /**
   * An optional note to include when creating a payment.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public Payment orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The ID of the order associated with the payment.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public Payment processingFee(List<ProcessingFee> processingFee) {
    this.processingFee = processingFee;
    return this;
  }

  public Payment addProcessingFeeItem(ProcessingFee processingFeeItem) {
    if (this.processingFee == null) {
      this.processingFee = new ArrayList<>();
    }
    this.processingFee.add(processingFeeItem);
    return this;
  }

  /**
   * The processing fees and fee adjustments assessed by Square for this payment.
   * @return processingFee
   */
  @javax.annotation.Nullable
  public List<ProcessingFee> getProcessingFee() {
    return processingFee;
  }

  public void setProcessingFee(List<ProcessingFee> processingFee) {
    this.processingFee = processingFee;
  }


  public Payment receiptNumber(String receiptNumber) {
    this.receiptNumber = receiptNumber;
    return this;
  }

  /**
   * The payment&#39;s receipt number. The field is missing if a payment is canceled.
   * @return receiptNumber
   */
  @javax.annotation.Nullable
  public String getReceiptNumber() {
    return receiptNumber;
  }

  public void setReceiptNumber(String receiptNumber) {
    this.receiptNumber = receiptNumber;
  }


  public Payment receiptUrl(String receiptUrl) {
    this.receiptUrl = receiptUrl;
    return this;
  }

  /**
   * The URL for the payment&#39;s receipt. The field is only populated for COMPLETED payments.
   * @return receiptUrl
   */
  @javax.annotation.Nullable
  public String getReceiptUrl() {
    return receiptUrl;
  }

  public void setReceiptUrl(String receiptUrl) {
    this.receiptUrl = receiptUrl;
  }


  public Payment referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * An optional ID that associates the payment with an entity in another system.
   * @return referenceId
   */
  @javax.annotation.Nullable
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public Payment refundIds(List<String> refundIds) {
    this.refundIds = refundIds;
    return this;
  }

  public Payment addRefundIdsItem(String refundIdsItem) {
    if (this.refundIds == null) {
      this.refundIds = new ArrayList<>();
    }
    this.refundIds.add(refundIdsItem);
    return this;
  }

  /**
   * A list of &#x60;refund_id&#x60;s identifying refunds for the payment.
   * @return refundIds
   */
  @javax.annotation.Nullable
  public List<String> getRefundIds() {
    return refundIds;
  }

  public void setRefundIds(List<String> refundIds) {
    this.refundIds = refundIds;
  }


  public Payment refundedMoney(Money refundedMoney) {
    this.refundedMoney = refundedMoney;
    return this;
  }

  /**
   * Get refundedMoney
   * @return refundedMoney
   */
  @javax.annotation.Nullable
  public Money getRefundedMoney() {
    return refundedMoney;
  }

  public void setRefundedMoney(Money refundedMoney) {
    this.refundedMoney = refundedMoney;
  }


  public Payment riskEvaluation(RiskEvaluation riskEvaluation) {
    this.riskEvaluation = riskEvaluation;
    return this;
  }

  /**
   * Get riskEvaluation
   * @return riskEvaluation
   */
  @javax.annotation.Nullable
  public RiskEvaluation getRiskEvaluation() {
    return riskEvaluation;
  }

  public void setRiskEvaluation(RiskEvaluation riskEvaluation) {
    this.riskEvaluation = riskEvaluation;
  }


  public Payment shippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

  /**
   * Get shippingAddress
   * @return shippingAddress
   */
  @javax.annotation.Nullable
  public Address getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  public Payment sourceType(String sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * The source type for this payment.  Current values include &#x60;CARD&#x60;, &#x60;BANK_ACCOUNT&#x60;, &#x60;WALLET&#x60;, &#x60;CASH&#x60;, or &#x60;EXTERNAL&#x60;.
   * @return sourceType
   */
  @javax.annotation.Nullable
  public String getSourceType() {
    return sourceType;
  }

  public void setSourceType(String sourceType) {
    this.sourceType = sourceType;
  }


  public Payment statementDescriptionIdentifier(String statementDescriptionIdentifier) {
    this.statementDescriptionIdentifier = statementDescriptionIdentifier;
    return this;
  }

  /**
   * Additional payment information that gets added to the customer&#39;s card statement as part of the statement description.  Note that the &#x60;statement_description_identifier&#x60; might get truncated on the statement description to fit the required information including the Square identifier (SQ *) and the name of the seller taking the payment.
   * @return statementDescriptionIdentifier
   */
  @javax.annotation.Nullable
  public String getStatementDescriptionIdentifier() {
    return statementDescriptionIdentifier;
  }

  public void setStatementDescriptionIdentifier(String statementDescriptionIdentifier) {
    this.statementDescriptionIdentifier = statementDescriptionIdentifier;
  }


  public Payment status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or FAILED.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Payment tipMoney(Money tipMoney) {
    this.tipMoney = tipMoney;
    return this;
  }

  /**
   * Get tipMoney
   * @return tipMoney
   */
  @javax.annotation.Nullable
  public Money getTipMoney() {
    return tipMoney;
  }

  public void setTipMoney(Money tipMoney) {
    this.tipMoney = tipMoney;
  }


  public Payment totalMoney(Money totalMoney) {
    this.totalMoney = totalMoney;
    return this;
  }

  /**
   * Get totalMoney
   * @return totalMoney
   */
  @javax.annotation.Nullable
  public Money getTotalMoney() {
    return totalMoney;
  }

  public void setTotalMoney(Money totalMoney) {
    this.totalMoney = totalMoney;
  }


  public Payment updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The timestamp of when the payment was last updated, in RFC 3339 format.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Payment versionToken(String versionToken) {
    this.versionToken = versionToken;
    return this;
  }

  /**
   * Used for optimistic concurrency. This opaque token identifies a specific version of the &#x60;Payment&#x60; object.
   * @return versionToken
   */
  @javax.annotation.Nullable
  public String getVersionToken() {
    return versionToken;
  }

  public void setVersionToken(String versionToken) {
    this.versionToken = versionToken;
  }


  public Payment walletDetails(DigitalWalletDetails walletDetails) {
    this.walletDetails = walletDetails;
    return this;
  }

  /**
   * Get walletDetails
   * @return walletDetails
   */
  @javax.annotation.Nullable
  public DigitalWalletDetails getWalletDetails() {
    return walletDetails;
  }

  public void setWalletDetails(DigitalWalletDetails walletDetails) {
    this.walletDetails = walletDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payment payment = (Payment) o;
    return Objects.equals(this.amountMoney, payment.amountMoney) &&
        Objects.equals(this.appFeeMoney, payment.appFeeMoney) &&
        Objects.equals(this.approvedMoney, payment.approvedMoney) &&
        Objects.equals(this.bankAccountDetails, payment.bankAccountDetails) &&
        Objects.equals(this.billingAddress, payment.billingAddress) &&
        Objects.equals(this.buyerEmailAddress, payment.buyerEmailAddress) &&
        Objects.equals(this.capabilities, payment.capabilities) &&
        Objects.equals(this.cardDetails, payment.cardDetails) &&
        Objects.equals(this.cashDetails, payment.cashDetails) &&
        Objects.equals(this.createdAt, payment.createdAt) &&
        Objects.equals(this.customerId, payment.customerId) &&
        Objects.equals(this.delayAction, payment.delayAction) &&
        Objects.equals(this.delayDuration, payment.delayDuration) &&
        Objects.equals(this.delayedUntil, payment.delayedUntil) &&
        Objects.equals(this.employeeId, payment.employeeId) &&
        Objects.equals(this.externalDetails, payment.externalDetails) &&
        Objects.equals(this.id, payment.id) &&
        Objects.equals(this.locationId, payment.locationId) &&
        Objects.equals(this.note, payment.note) &&
        Objects.equals(this.orderId, payment.orderId) &&
        Objects.equals(this.processingFee, payment.processingFee) &&
        Objects.equals(this.receiptNumber, payment.receiptNumber) &&
        Objects.equals(this.receiptUrl, payment.receiptUrl) &&
        Objects.equals(this.referenceId, payment.referenceId) &&
        Objects.equals(this.refundIds, payment.refundIds) &&
        Objects.equals(this.refundedMoney, payment.refundedMoney) &&
        Objects.equals(this.riskEvaluation, payment.riskEvaluation) &&
        Objects.equals(this.shippingAddress, payment.shippingAddress) &&
        Objects.equals(this.sourceType, payment.sourceType) &&
        Objects.equals(this.statementDescriptionIdentifier, payment.statementDescriptionIdentifier) &&
        Objects.equals(this.status, payment.status) &&
        Objects.equals(this.tipMoney, payment.tipMoney) &&
        Objects.equals(this.totalMoney, payment.totalMoney) &&
        Objects.equals(this.updatedAt, payment.updatedAt) &&
        Objects.equals(this.versionToken, payment.versionToken) &&
        Objects.equals(this.walletDetails, payment.walletDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountMoney, appFeeMoney, approvedMoney, bankAccountDetails, billingAddress, buyerEmailAddress, capabilities, cardDetails, cashDetails, createdAt, customerId, delayAction, delayDuration, delayedUntil, employeeId, externalDetails, id, locationId, note, orderId, processingFee, receiptNumber, receiptUrl, referenceId, refundIds, refundedMoney, riskEvaluation, shippingAddress, sourceType, statementDescriptionIdentifier, status, tipMoney, totalMoney, updatedAt, versionToken, walletDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payment {\n");
    sb.append("    amountMoney: ").append(toIndentedString(amountMoney)).append("\n");
    sb.append("    appFeeMoney: ").append(toIndentedString(appFeeMoney)).append("\n");
    sb.append("    approvedMoney: ").append(toIndentedString(approvedMoney)).append("\n");
    sb.append("    bankAccountDetails: ").append(toIndentedString(bankAccountDetails)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    buyerEmailAddress: ").append(toIndentedString(buyerEmailAddress)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    cardDetails: ").append(toIndentedString(cardDetails)).append("\n");
    sb.append("    cashDetails: ").append(toIndentedString(cashDetails)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    delayAction: ").append(toIndentedString(delayAction)).append("\n");
    sb.append("    delayDuration: ").append(toIndentedString(delayDuration)).append("\n");
    sb.append("    delayedUntil: ").append(toIndentedString(delayedUntil)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    externalDetails: ").append(toIndentedString(externalDetails)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    processingFee: ").append(toIndentedString(processingFee)).append("\n");
    sb.append("    receiptNumber: ").append(toIndentedString(receiptNumber)).append("\n");
    sb.append("    receiptUrl: ").append(toIndentedString(receiptUrl)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    refundIds: ").append(toIndentedString(refundIds)).append("\n");
    sb.append("    refundedMoney: ").append(toIndentedString(refundedMoney)).append("\n");
    sb.append("    riskEvaluation: ").append(toIndentedString(riskEvaluation)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    statementDescriptionIdentifier: ").append(toIndentedString(statementDescriptionIdentifier)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tipMoney: ").append(toIndentedString(tipMoney)).append("\n");
    sb.append("    totalMoney: ").append(toIndentedString(totalMoney)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    versionToken: ").append(toIndentedString(versionToken)).append("\n");
    sb.append("    walletDetails: ").append(toIndentedString(walletDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount_money");
    openapiFields.add("app_fee_money");
    openapiFields.add("approved_money");
    openapiFields.add("bank_account_details");
    openapiFields.add("billing_address");
    openapiFields.add("buyer_email_address");
    openapiFields.add("capabilities");
    openapiFields.add("card_details");
    openapiFields.add("cash_details");
    openapiFields.add("created_at");
    openapiFields.add("customer_id");
    openapiFields.add("delay_action");
    openapiFields.add("delay_duration");
    openapiFields.add("delayed_until");
    openapiFields.add("employee_id");
    openapiFields.add("external_details");
    openapiFields.add("id");
    openapiFields.add("location_id");
    openapiFields.add("note");
    openapiFields.add("order_id");
    openapiFields.add("processing_fee");
    openapiFields.add("receipt_number");
    openapiFields.add("receipt_url");
    openapiFields.add("reference_id");
    openapiFields.add("refund_ids");
    openapiFields.add("refunded_money");
    openapiFields.add("risk_evaluation");
    openapiFields.add("shipping_address");
    openapiFields.add("source_type");
    openapiFields.add("statement_description_identifier");
    openapiFields.add("status");
    openapiFields.add("tip_money");
    openapiFields.add("total_money");
    openapiFields.add("updated_at");
    openapiFields.add("version_token");
    openapiFields.add("wallet_details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Payment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Payment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Payment is not found in the empty JSON string", Payment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Payment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Payment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amount_money`
      if (jsonObj.get("amount_money") != null && !jsonObj.get("amount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("amount_money"));
      }
      // validate the optional field `app_fee_money`
      if (jsonObj.get("app_fee_money") != null && !jsonObj.get("app_fee_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("app_fee_money"));
      }
      // validate the optional field `approved_money`
      if (jsonObj.get("approved_money") != null && !jsonObj.get("approved_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("approved_money"));
      }
      // validate the optional field `bank_account_details`
      if (jsonObj.get("bank_account_details") != null && !jsonObj.get("bank_account_details").isJsonNull()) {
        BankAccountPaymentDetails.validateJsonElement(jsonObj.get("bank_account_details"));
      }
      // validate the optional field `billing_address`
      if (jsonObj.get("billing_address") != null && !jsonObj.get("billing_address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("billing_address"));
      }
      if ((jsonObj.get("buyer_email_address") != null && !jsonObj.get("buyer_email_address").isJsonNull()) && !jsonObj.get("buyer_email_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_email_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_email_address").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull() && !jsonObj.get("capabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `capabilities` to be an array in the JSON string but got `%s`", jsonObj.get("capabilities").toString()));
      }
      // validate the optional field `card_details`
      if (jsonObj.get("card_details") != null && !jsonObj.get("card_details").isJsonNull()) {
        CardPaymentDetails.validateJsonElement(jsonObj.get("card_details"));
      }
      // validate the optional field `cash_details`
      if (jsonObj.get("cash_details") != null && !jsonObj.get("cash_details").isJsonNull()) {
        CashPaymentDetails.validateJsonElement(jsonObj.get("cash_details"));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if ((jsonObj.get("delay_action") != null && !jsonObj.get("delay_action").isJsonNull()) && !jsonObj.get("delay_action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delay_action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delay_action").toString()));
      }
      if ((jsonObj.get("delay_duration") != null && !jsonObj.get("delay_duration").isJsonNull()) && !jsonObj.get("delay_duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delay_duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delay_duration").toString()));
      }
      if ((jsonObj.get("delayed_until") != null && !jsonObj.get("delayed_until").isJsonNull()) && !jsonObj.get("delayed_until").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delayed_until` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delayed_until").toString()));
      }
      if ((jsonObj.get("employee_id") != null && !jsonObj.get("employee_id").isJsonNull()) && !jsonObj.get("employee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_id").toString()));
      }
      // validate the optional field `external_details`
      if (jsonObj.get("external_details") != null && !jsonObj.get("external_details").isJsonNull()) {
        ExternalPaymentDetails.validateJsonElement(jsonObj.get("external_details"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("location_id") != null && !jsonObj.get("location_id").isJsonNull()) && !jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("order_id") != null && !jsonObj.get("order_id").isJsonNull()) && !jsonObj.get("order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_id").toString()));
      }
      if (jsonObj.get("processing_fee") != null && !jsonObj.get("processing_fee").isJsonNull()) {
        JsonArray jsonArrayprocessingFee = jsonObj.getAsJsonArray("processing_fee");
        if (jsonArrayprocessingFee != null) {
          // ensure the json data is an array
          if (!jsonObj.get("processing_fee").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `processing_fee` to be an array in the JSON string but got `%s`", jsonObj.get("processing_fee").toString()));
          }

          // validate the optional field `processing_fee` (array)
          for (int i = 0; i < jsonArrayprocessingFee.size(); i++) {
            ProcessingFee.validateJsonElement(jsonArrayprocessingFee.get(i));
          };
        }
      }
      if ((jsonObj.get("receipt_number") != null && !jsonObj.get("receipt_number").isJsonNull()) && !jsonObj.get("receipt_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receipt_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receipt_number").toString()));
      }
      if ((jsonObj.get("receipt_url") != null && !jsonObj.get("receipt_url").isJsonNull()) && !jsonObj.get("receipt_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receipt_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receipt_url").toString()));
      }
      if ((jsonObj.get("reference_id") != null && !jsonObj.get("reference_id").isJsonNull()) && !jsonObj.get("reference_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("refund_ids") != null && !jsonObj.get("refund_ids").isJsonNull() && !jsonObj.get("refund_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_ids` to be an array in the JSON string but got `%s`", jsonObj.get("refund_ids").toString()));
      }
      // validate the optional field `refunded_money`
      if (jsonObj.get("refunded_money") != null && !jsonObj.get("refunded_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("refunded_money"));
      }
      // validate the optional field `risk_evaluation`
      if (jsonObj.get("risk_evaluation") != null && !jsonObj.get("risk_evaluation").isJsonNull()) {
        RiskEvaluation.validateJsonElement(jsonObj.get("risk_evaluation"));
      }
      // validate the optional field `shipping_address`
      if (jsonObj.get("shipping_address") != null && !jsonObj.get("shipping_address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("shipping_address"));
      }
      if ((jsonObj.get("source_type") != null && !jsonObj.get("source_type").isJsonNull()) && !jsonObj.get("source_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_type").toString()));
      }
      if ((jsonObj.get("statement_description_identifier") != null && !jsonObj.get("statement_description_identifier").isJsonNull()) && !jsonObj.get("statement_description_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statement_description_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statement_description_identifier").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `tip_money`
      if (jsonObj.get("tip_money") != null && !jsonObj.get("tip_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("tip_money"));
      }
      // validate the optional field `total_money`
      if (jsonObj.get("total_money") != null && !jsonObj.get("total_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_money"));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("version_token") != null && !jsonObj.get("version_token").isJsonNull()) && !jsonObj.get("version_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version_token").toString()));
      }
      // validate the optional field `wallet_details`
      if (jsonObj.get("wallet_details") != null && !jsonObj.get("wallet_details").isJsonNull()) {
        DigitalWalletDetails.validateJsonElement(jsonObj.get("wallet_details"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Payment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Payment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Payment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Payment.class));

       return (TypeAdapter<T>) new TypeAdapter<Payment>() {
           @Override
           public void write(JsonWriter out, Payment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Payment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Payment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Payment
   * @throws IOException if the JSON string is invalid with respect to Payment
   */
  public static Payment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Payment.class);
  }

  /**
   * Convert an instance of Payment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

