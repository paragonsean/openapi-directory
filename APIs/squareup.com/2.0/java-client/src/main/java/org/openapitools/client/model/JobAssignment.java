/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object describing a job that a team member is assigned to.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobAssignment {
  public static final String SERIALIZED_NAME_ANNUAL_RATE = "annual_rate";
  @SerializedName(SERIALIZED_NAME_ANNUAL_RATE)
  private Money annualRate;

  public static final String SERIALIZED_NAME_HOURLY_RATE = "hourly_rate";
  @SerializedName(SERIALIZED_NAME_HOURLY_RATE)
  private Money hourlyRate;

  public static final String SERIALIZED_NAME_JOB_TITLE = "job_title";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_PAY_TYPE = "pay_type";
  @SerializedName(SERIALIZED_NAME_PAY_TYPE)
  private String payType;

  public static final String SERIALIZED_NAME_WEEKLY_HOURS = "weekly_hours";
  @SerializedName(SERIALIZED_NAME_WEEKLY_HOURS)
  private Integer weeklyHours;

  public JobAssignment() {
  }

  public JobAssignment annualRate(Money annualRate) {
    this.annualRate = annualRate;
    return this;
  }

  /**
   * Get annualRate
   * @return annualRate
   */
  @javax.annotation.Nullable
  public Money getAnnualRate() {
    return annualRate;
  }

  public void setAnnualRate(Money annualRate) {
    this.annualRate = annualRate;
  }


  public JobAssignment hourlyRate(Money hourlyRate) {
    this.hourlyRate = hourlyRate;
    return this;
  }

  /**
   * Get hourlyRate
   * @return hourlyRate
   */
  @javax.annotation.Nullable
  public Money getHourlyRate() {
    return hourlyRate;
  }

  public void setHourlyRate(Money hourlyRate) {
    this.hourlyRate = hourlyRate;
  }


  public JobAssignment jobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  /**
   * The title of the job.
   * @return jobTitle
   */
  @javax.annotation.Nonnull
  public String getJobTitle() {
    return jobTitle;
  }

  public void setJobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
  }


  public JobAssignment payType(String payType) {
    this.payType = payType;
    return this;
  }

  /**
   * The current pay type for the job assignment used to calculate the pay amount in a pay period.
   * @return payType
   */
  @javax.annotation.Nonnull
  public String getPayType() {
    return payType;
  }

  public void setPayType(String payType) {
    this.payType = payType;
  }


  public JobAssignment weeklyHours(Integer weeklyHours) {
    this.weeklyHours = weeklyHours;
    return this;
  }

  /**
   * The planned hours per week for the job. Set if the job &#x60;PayType&#x60; is &#x60;SALARY&#x60;.
   * @return weeklyHours
   */
  @javax.annotation.Nullable
  public Integer getWeeklyHours() {
    return weeklyHours;
  }

  public void setWeeklyHours(Integer weeklyHours) {
    this.weeklyHours = weeklyHours;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobAssignment jobAssignment = (JobAssignment) o;
    return Objects.equals(this.annualRate, jobAssignment.annualRate) &&
        Objects.equals(this.hourlyRate, jobAssignment.hourlyRate) &&
        Objects.equals(this.jobTitle, jobAssignment.jobTitle) &&
        Objects.equals(this.payType, jobAssignment.payType) &&
        Objects.equals(this.weeklyHours, jobAssignment.weeklyHours);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annualRate, hourlyRate, jobTitle, payType, weeklyHours);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobAssignment {\n");
    sb.append("    annualRate: ").append(toIndentedString(annualRate)).append("\n");
    sb.append("    hourlyRate: ").append(toIndentedString(hourlyRate)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    payType: ").append(toIndentedString(payType)).append("\n");
    sb.append("    weeklyHours: ").append(toIndentedString(weeklyHours)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annual_rate");
    openapiFields.add("hourly_rate");
    openapiFields.add("job_title");
    openapiFields.add("pay_type");
    openapiFields.add("weekly_hours");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("job_title");
    openapiRequiredFields.add("pay_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobAssignment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobAssignment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobAssignment is not found in the empty JSON string", JobAssignment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobAssignment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobAssignment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobAssignment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `annual_rate`
      if (jsonObj.get("annual_rate") != null && !jsonObj.get("annual_rate").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("annual_rate"));
      }
      // validate the optional field `hourly_rate`
      if (jsonObj.get("hourly_rate") != null && !jsonObj.get("hourly_rate").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("hourly_rate"));
      }
      if (!jsonObj.get("job_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_title").toString()));
      }
      if (!jsonObj.get("pay_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pay_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pay_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobAssignment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobAssignment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobAssignment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobAssignment.class));

       return (TypeAdapter<T>) new TypeAdapter<JobAssignment>() {
           @Override
           public void write(JsonWriter out, JobAssignment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobAssignment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobAssignment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobAssignment
   * @throws IOException if the JSON string is invalid with respect to JobAssignment
   */
  public static JobAssignment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobAssignment.class);
  }

  /**
   * Convert an instance of JobAssignment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

