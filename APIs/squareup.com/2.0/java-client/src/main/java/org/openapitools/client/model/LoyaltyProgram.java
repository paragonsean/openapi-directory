/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LoyaltyProgramAccrualRule;
import org.openapitools.client.model.LoyaltyProgramExpirationPolicy;
import org.openapitools.client.model.LoyaltyProgramRewardTier;
import org.openapitools.client.model.LoyaltyProgramTerminology;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a Square loyalty program. Loyalty programs define how buyers can earn points and redeem points for rewards.  Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard.  For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoyaltyProgram {
  public static final String SERIALIZED_NAME_ACCRUAL_RULES = "accrual_rules";
  @SerializedName(SERIALIZED_NAME_ACCRUAL_RULES)
  private List<LoyaltyProgramAccrualRule> accrualRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_EXPIRATION_POLICY = "expiration_policy";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_POLICY)
  private LoyaltyProgramExpirationPolicy expirationPolicy;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION_IDS = "location_ids";
  @SerializedName(SERIALIZED_NAME_LOCATION_IDS)
  private List<String> locationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_REWARD_TIERS = "reward_tiers";
  @SerializedName(SERIALIZED_NAME_REWARD_TIERS)
  private List<LoyaltyProgramRewardTier> rewardTiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TERMINOLOGY = "terminology";
  @SerializedName(SERIALIZED_NAME_TERMINOLOGY)
  private LoyaltyProgramTerminology terminology;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public LoyaltyProgram() {
  }

  public LoyaltyProgram accrualRules(List<LoyaltyProgramAccrualRule> accrualRules) {
    this.accrualRules = accrualRules;
    return this;
  }

  public LoyaltyProgram addAccrualRulesItem(LoyaltyProgramAccrualRule accrualRulesItem) {
    if (this.accrualRules == null) {
      this.accrualRules = new ArrayList<>();
    }
    this.accrualRules.add(accrualRulesItem);
    return this;
  }

  /**
   * Defines how buyers can earn loyalty points.
   * @return accrualRules
   */
  @javax.annotation.Nonnull
  public List<LoyaltyProgramAccrualRule> getAccrualRules() {
    return accrualRules;
  }

  public void setAccrualRules(List<LoyaltyProgramAccrualRule> accrualRules) {
    this.accrualRules = accrualRules;
  }


  public LoyaltyProgram createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The timestamp when the program was created, in RFC 3339 format.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public LoyaltyProgram expirationPolicy(LoyaltyProgramExpirationPolicy expirationPolicy) {
    this.expirationPolicy = expirationPolicy;
    return this;
  }

  /**
   * Get expirationPolicy
   * @return expirationPolicy
   */
  @javax.annotation.Nullable
  public LoyaltyProgramExpirationPolicy getExpirationPolicy() {
    return expirationPolicy;
  }

  public void setExpirationPolicy(LoyaltyProgramExpirationPolicy expirationPolicy) {
    this.expirationPolicy = expirationPolicy;
  }


  public LoyaltyProgram id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Square-assigned ID of the loyalty program. Updates to  the loyalty program do not modify the identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public LoyaltyProgram locationIds(List<String> locationIds) {
    this.locationIds = locationIds;
    return this;
  }

  public LoyaltyProgram addLocationIdsItem(String locationIdsItem) {
    if (this.locationIds == null) {
      this.locationIds = new ArrayList<>();
    }
    this.locationIds.add(locationIdsItem);
    return this;
  }

  /**
   * The [locations](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) at which the program is active.
   * @return locationIds
   */
  @javax.annotation.Nonnull
  public List<String> getLocationIds() {
    return locationIds;
  }

  public void setLocationIds(List<String> locationIds) {
    this.locationIds = locationIds;
  }


  public LoyaltyProgram rewardTiers(List<LoyaltyProgramRewardTier> rewardTiers) {
    this.rewardTiers = rewardTiers;
    return this;
  }

  public LoyaltyProgram addRewardTiersItem(LoyaltyProgramRewardTier rewardTiersItem) {
    if (this.rewardTiers == null) {
      this.rewardTiers = new ArrayList<>();
    }
    this.rewardTiers.add(rewardTiersItem);
    return this;
  }

  /**
   * The list of rewards for buyers, sorted by ascending points.
   * @return rewardTiers
   */
  @javax.annotation.Nonnull
  public List<LoyaltyProgramRewardTier> getRewardTiers() {
    return rewardTiers;
  }

  public void setRewardTiers(List<LoyaltyProgramRewardTier> rewardTiers) {
    this.rewardTiers = rewardTiers;
  }


  public LoyaltyProgram status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Whether the program is currently active.
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public LoyaltyProgram terminology(LoyaltyProgramTerminology terminology) {
    this.terminology = terminology;
    return this;
  }

  /**
   * Get terminology
   * @return terminology
   */
  @javax.annotation.Nonnull
  public LoyaltyProgramTerminology getTerminology() {
    return terminology;
  }

  public void setTerminology(LoyaltyProgramTerminology terminology) {
    this.terminology = terminology;
  }


  public LoyaltyProgram updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The timestamp when the reward was last updated, in RFC 3339 format.
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoyaltyProgram loyaltyProgram = (LoyaltyProgram) o;
    return Objects.equals(this.accrualRules, loyaltyProgram.accrualRules) &&
        Objects.equals(this.createdAt, loyaltyProgram.createdAt) &&
        Objects.equals(this.expirationPolicy, loyaltyProgram.expirationPolicy) &&
        Objects.equals(this.id, loyaltyProgram.id) &&
        Objects.equals(this.locationIds, loyaltyProgram.locationIds) &&
        Objects.equals(this.rewardTiers, loyaltyProgram.rewardTiers) &&
        Objects.equals(this.status, loyaltyProgram.status) &&
        Objects.equals(this.terminology, loyaltyProgram.terminology) &&
        Objects.equals(this.updatedAt, loyaltyProgram.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accrualRules, createdAt, expirationPolicy, id, locationIds, rewardTiers, status, terminology, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoyaltyProgram {\n");
    sb.append("    accrualRules: ").append(toIndentedString(accrualRules)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    expirationPolicy: ").append(toIndentedString(expirationPolicy)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationIds: ").append(toIndentedString(locationIds)).append("\n");
    sb.append("    rewardTiers: ").append(toIndentedString(rewardTiers)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    terminology: ").append(toIndentedString(terminology)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accrual_rules");
    openapiFields.add("created_at");
    openapiFields.add("expiration_policy");
    openapiFields.add("id");
    openapiFields.add("location_ids");
    openapiFields.add("reward_tiers");
    openapiFields.add("status");
    openapiFields.add("terminology");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accrual_rules");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("location_ids");
    openapiRequiredFields.add("reward_tiers");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("terminology");
    openapiRequiredFields.add("updated_at");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoyaltyProgram
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoyaltyProgram.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoyaltyProgram is not found in the empty JSON string", LoyaltyProgram.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoyaltyProgram.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoyaltyProgram` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LoyaltyProgram.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("accrual_rules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accrual_rules` to be an array in the JSON string but got `%s`", jsonObj.get("accrual_rules").toString()));
      }

      JsonArray jsonArrayaccrualRules = jsonObj.getAsJsonArray("accrual_rules");
      // validate the required field `accrual_rules` (array)
      for (int i = 0; i < jsonArrayaccrualRules.size(); i++) {
        LoyaltyProgramAccrualRule.validateJsonElement(jsonArrayaccrualRules.get(i));
      };
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      // validate the optional field `expiration_policy`
      if (jsonObj.get("expiration_policy") != null && !jsonObj.get("expiration_policy").isJsonNull()) {
        LoyaltyProgramExpirationPolicy.validateJsonElement(jsonObj.get("expiration_policy"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("location_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("location_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_ids` to be an array in the JSON string but got `%s`", jsonObj.get("location_ids").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("reward_tiers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reward_tiers` to be an array in the JSON string but got `%s`", jsonObj.get("reward_tiers").toString()));
      }

      JsonArray jsonArrayrewardTiers = jsonObj.getAsJsonArray("reward_tiers");
      // validate the required field `reward_tiers` (array)
      for (int i = 0; i < jsonArrayrewardTiers.size(); i++) {
        LoyaltyProgramRewardTier.validateJsonElement(jsonArrayrewardTiers.get(i));
      };
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `terminology`
      LoyaltyProgramTerminology.validateJsonElement(jsonObj.get("terminology"));
      if (!jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoyaltyProgram.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoyaltyProgram' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoyaltyProgram> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoyaltyProgram.class));

       return (TypeAdapter<T>) new TypeAdapter<LoyaltyProgram>() {
           @Override
           public void write(JsonWriter out, LoyaltyProgram value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoyaltyProgram read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoyaltyProgram given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoyaltyProgram
   * @throws IOException if the JSON string is invalid with respect to LoyaltyProgram
   */
  public static LoyaltyProgram fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoyaltyProgram.class);
  }

  /**
   * Convert an instance of LoyaltyProgram to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

