/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents Square-estimated quantity of items in a particular state at a particular seller location based on the known history of physical counts and inventory adjustments.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InventoryCount {
  public static final String SERIALIZED_NAME_CALCULATED_AT = "calculated_at";
  @SerializedName(SERIALIZED_NAME_CALCULATED_AT)
  private String calculatedAt;

  public static final String SERIALIZED_NAME_CATALOG_OBJECT_ID = "catalog_object_id";
  @SerializedName(SERIALIZED_NAME_CATALOG_OBJECT_ID)
  private String catalogObjectId;

  public static final String SERIALIZED_NAME_CATALOG_OBJECT_TYPE = "catalog_object_type";
  @SerializedName(SERIALIZED_NAME_CATALOG_OBJECT_TYPE)
  private String catalogObjectType;

  public static final String SERIALIZED_NAME_IS_ESTIMATED = "is_estimated";
  @SerializedName(SERIALIZED_NAME_IS_ESTIMATED)
  private Boolean isEstimated;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private String quantity;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public InventoryCount() {
  }

  public InventoryCount calculatedAt(String calculatedAt) {
    this.calculatedAt = calculatedAt;
    return this;
  }

  /**
   * An RFC 3339-formatted timestamp that indicates when the most recent physical count or adjustment affecting the estimated count is received.
   * @return calculatedAt
   */
  @javax.annotation.Nullable
  public String getCalculatedAt() {
    return calculatedAt;
  }

  public void setCalculatedAt(String calculatedAt) {
    this.calculatedAt = calculatedAt;
  }


  public InventoryCount catalogObjectId(String catalogObjectId) {
    this.catalogObjectId = catalogObjectId;
    return this;
  }

  /**
   * The Square-generated ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
   * @return catalogObjectId
   */
  @javax.annotation.Nullable
  public String getCatalogObjectId() {
    return catalogObjectId;
  }

  public void setCatalogObjectId(String catalogObjectId) {
    this.catalogObjectId = catalogObjectId;
  }


  public InventoryCount catalogObjectType(String catalogObjectType) {
    this.catalogObjectType = catalogObjectType;
    return this;
  }

  /**
   * The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only supported for the &#x60;ITEM_VARIATION&#x60; type.
   * @return catalogObjectType
   */
  @javax.annotation.Nullable
  public String getCatalogObjectType() {
    return catalogObjectType;
  }

  public void setCatalogObjectType(String catalogObjectType) {
    this.catalogObjectType = catalogObjectType;
  }


  public InventoryCount isEstimated(Boolean isEstimated) {
    this.isEstimated = isEstimated;
    return this;
  }

  /**
   * Whether the inventory count is for composed variation (TRUE) or not (FALSE). If true, the inventory count will not be present in the response of any of these endpoints: [BatchChangeInventory](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-change-inventory),  [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes),  [BatchRetrieveInventoryCounts](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-counts), and  [RetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-changes).
   * @return isEstimated
   */
  @javax.annotation.Nullable
  public Boolean getIsEstimated() {
    return isEstimated;
  }

  public void setIsEstimated(Boolean isEstimated) {
    this.isEstimated = isEstimated;
  }


  public InventoryCount locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related quantity of items is being tracked.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public InventoryCount quantity(String quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The number of items affected by the estimated count as a decimal string. Can support up to 5 digits after the decimal point.
   * @return quantity
   */
  @javax.annotation.Nullable
  public String getQuantity() {
    return quantity;
  }

  public void setQuantity(String quantity) {
    this.quantity = quantity;
  }


  public InventoryCount state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The current [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the related quantity of items.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventoryCount inventoryCount = (InventoryCount) o;
    return Objects.equals(this.calculatedAt, inventoryCount.calculatedAt) &&
        Objects.equals(this.catalogObjectId, inventoryCount.catalogObjectId) &&
        Objects.equals(this.catalogObjectType, inventoryCount.catalogObjectType) &&
        Objects.equals(this.isEstimated, inventoryCount.isEstimated) &&
        Objects.equals(this.locationId, inventoryCount.locationId) &&
        Objects.equals(this.quantity, inventoryCount.quantity) &&
        Objects.equals(this.state, inventoryCount.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculatedAt, catalogObjectId, catalogObjectType, isEstimated, locationId, quantity, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventoryCount {\n");
    sb.append("    calculatedAt: ").append(toIndentedString(calculatedAt)).append("\n");
    sb.append("    catalogObjectId: ").append(toIndentedString(catalogObjectId)).append("\n");
    sb.append("    catalogObjectType: ").append(toIndentedString(catalogObjectType)).append("\n");
    sb.append("    isEstimated: ").append(toIndentedString(isEstimated)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calculated_at");
    openapiFields.add("catalog_object_id");
    openapiFields.add("catalog_object_type");
    openapiFields.add("is_estimated");
    openapiFields.add("location_id");
    openapiFields.add("quantity");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InventoryCount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InventoryCount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InventoryCount is not found in the empty JSON string", InventoryCount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InventoryCount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InventoryCount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("calculated_at") != null && !jsonObj.get("calculated_at").isJsonNull()) && !jsonObj.get("calculated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calculated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calculated_at").toString()));
      }
      if ((jsonObj.get("catalog_object_id") != null && !jsonObj.get("catalog_object_id").isJsonNull()) && !jsonObj.get("catalog_object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalog_object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalog_object_id").toString()));
      }
      if ((jsonObj.get("catalog_object_type") != null && !jsonObj.get("catalog_object_type").isJsonNull()) && !jsonObj.get("catalog_object_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalog_object_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalog_object_type").toString()));
      }
      if ((jsonObj.get("location_id") != null && !jsonObj.get("location_id").isJsonNull()) && !jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      if ((jsonObj.get("quantity") != null && !jsonObj.get("quantity").isJsonNull()) && !jsonObj.get("quantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantity").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InventoryCount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InventoryCount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InventoryCount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InventoryCount.class));

       return (TypeAdapter<T>) new TypeAdapter<InventoryCount>() {
           @Override
           public void write(JsonWriter out, InventoryCount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InventoryCount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InventoryCount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InventoryCount
   * @throws IOException if the JSON string is invalid with respect to InventoryCount
   */
  public static InventoryCount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InventoryCount.class);
  }

  /**
   * Convert an instance of InventoryCount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

