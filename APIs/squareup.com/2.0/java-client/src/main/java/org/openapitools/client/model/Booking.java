/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppointmentSegment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a booking as a time-bound service contract for a seller&#39;s staff member to provide a specified service at a given location to a requesting customer in one or more appointment segments.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Booking {
  public static final String SERIALIZED_NAME_APPOINTMENT_SEGMENTS = "appointment_segments";
  @SerializedName(SERIALIZED_NAME_APPOINTMENT_SEGMENTS)
  private List<AppointmentSegment> appointmentSegments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_CUSTOMER_NOTE = "customer_note";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NOTE)
  private String customerNote;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_SELLER_NOTE = "seller_note";
  @SerializedName(SERIALIZED_NAME_SELLER_NOTE)
  private String sellerNote;

  public static final String SERIALIZED_NAME_START_AT = "start_at";
  @SerializedName(SERIALIZED_NAME_START_AT)
  private String startAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public Booking() {
  }

  public Booking appointmentSegments(List<AppointmentSegment> appointmentSegments) {
    this.appointmentSegments = appointmentSegments;
    return this;
  }

  public Booking addAppointmentSegmentsItem(AppointmentSegment appointmentSegmentsItem) {
    if (this.appointmentSegments == null) {
      this.appointmentSegments = new ArrayList<>();
    }
    this.appointmentSegments.add(appointmentSegmentsItem);
    return this;
  }

  /**
   * A list of appointment segments for this booking.
   * @return appointmentSegments
   */
  @javax.annotation.Nullable
  public List<AppointmentSegment> getAppointmentSegments() {
    return appointmentSegments;
  }

  public void setAppointmentSegments(List<AppointmentSegment> appointmentSegments) {
    this.appointmentSegments = appointmentSegments;
  }


  public Booking createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The timestamp specifying the creation time of this booking, in RFC 3339 format.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Booking customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * The ID of the [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) object representing the customer attending this booking
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public Booking customerNote(String customerNote) {
    this.customerNote = customerNote;
    return this;
  }

  /**
   * The free-text field for the customer to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a relevant [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.
   * @return customerNote
   */
  @javax.annotation.Nullable
  public String getCustomerNote() {
    return customerNote;
  }

  public void setCustomerNote(String customerNote) {
    this.customerNote = customerNote;
  }


  public Booking id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique ID of this object representing a booking.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Booking locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) object representing the location where the booked service is provided.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public Booking sellerNote(String sellerNote) {
    this.sellerNote = sellerNote;
    return this;
  }

  /**
   * The free-text field for the seller to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a specific [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance. This field should not be visible to customers.
   * @return sellerNote
   */
  @javax.annotation.Nullable
  public String getSellerNote() {
    return sellerNote;
  }

  public void setSellerNote(String sellerNote) {
    this.sellerNote = sellerNote;
  }


  public Booking startAt(String startAt) {
    this.startAt = startAt;
    return this;
  }

  /**
   * The timestamp specifying the starting time of this booking, in RFC 3339 format.
   * @return startAt
   */
  @javax.annotation.Nullable
  public String getStartAt() {
    return startAt;
  }

  public void setStartAt(String startAt) {
    this.startAt = startAt;
  }


  public Booking status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the booking, describing where the booking stands with respect to the booking state machine.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Booking updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The timestamp specifying the most recent update time of this booking, in RFC 3339 format.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Booking version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * The revision number for the booking used for optimistic concurrency.
   * minimum: 0
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Booking booking = (Booking) o;
    return Objects.equals(this.appointmentSegments, booking.appointmentSegments) &&
        Objects.equals(this.createdAt, booking.createdAt) &&
        Objects.equals(this.customerId, booking.customerId) &&
        Objects.equals(this.customerNote, booking.customerNote) &&
        Objects.equals(this.id, booking.id) &&
        Objects.equals(this.locationId, booking.locationId) &&
        Objects.equals(this.sellerNote, booking.sellerNote) &&
        Objects.equals(this.startAt, booking.startAt) &&
        Objects.equals(this.status, booking.status) &&
        Objects.equals(this.updatedAt, booking.updatedAt) &&
        Objects.equals(this.version, booking.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appointmentSegments, createdAt, customerId, customerNote, id, locationId, sellerNote, startAt, status, updatedAt, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Booking {\n");
    sb.append("    appointmentSegments: ").append(toIndentedString(appointmentSegments)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    customerNote: ").append(toIndentedString(customerNote)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    sellerNote: ").append(toIndentedString(sellerNote)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appointment_segments");
    openapiFields.add("created_at");
    openapiFields.add("customer_id");
    openapiFields.add("customer_note");
    openapiFields.add("id");
    openapiFields.add("location_id");
    openapiFields.add("seller_note");
    openapiFields.add("start_at");
    openapiFields.add("status");
    openapiFields.add("updated_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Booking
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Booking.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Booking is not found in the empty JSON string", Booking.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Booking.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Booking` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("appointment_segments") != null && !jsonObj.get("appointment_segments").isJsonNull()) {
        JsonArray jsonArrayappointmentSegments = jsonObj.getAsJsonArray("appointment_segments");
        if (jsonArrayappointmentSegments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appointment_segments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appointment_segments` to be an array in the JSON string but got `%s`", jsonObj.get("appointment_segments").toString()));
          }

          // validate the optional field `appointment_segments` (array)
          for (int i = 0; i < jsonArrayappointmentSegments.size(); i++) {
            AppointmentSegment.validateJsonElement(jsonArrayappointmentSegments.get(i));
          };
        }
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if ((jsonObj.get("customer_note") != null && !jsonObj.get("customer_note").isJsonNull()) && !jsonObj.get("customer_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_note").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("location_id") != null && !jsonObj.get("location_id").isJsonNull()) && !jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      if ((jsonObj.get("seller_note") != null && !jsonObj.get("seller_note").isJsonNull()) && !jsonObj.get("seller_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_note").toString()));
      }
      if ((jsonObj.get("start_at") != null && !jsonObj.get("start_at").isJsonNull()) && !jsonObj.get("start_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_at").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Booking.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Booking' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Booking> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Booking.class));

       return (TypeAdapter<T>) new TypeAdapter<Booking>() {
           @Override
           public void write(JsonWriter out, Booking value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Booking read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Booking given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Booking
   * @throws IOException if the JSON string is invalid with respect to Booking
   */
  public static Booking fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Booking.class);
  }

  /**
   * Convert an instance of Booking to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

