/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a discount that applies to one or more line items in an order.  Fixed-amount, order-scoped discounts are distributed across all non-zero line item totals. The amount distributed to each line item is relative to the amount contributed by the item to the order subtotal.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderLineItemDiscount {
  public static final String SERIALIZED_NAME_AMOUNT_MONEY = "amount_money";
  @SerializedName(SERIALIZED_NAME_AMOUNT_MONEY)
  private Money amountMoney;

  public static final String SERIALIZED_NAME_APPLIED_MONEY = "applied_money";
  @SerializedName(SERIALIZED_NAME_APPLIED_MONEY)
  private Money appliedMoney;

  public static final String SERIALIZED_NAME_CATALOG_OBJECT_ID = "catalog_object_id";
  @SerializedName(SERIALIZED_NAME_CATALOG_OBJECT_ID)
  private String catalogObjectId;

  public static final String SERIALIZED_NAME_CATALOG_VERSION = "catalog_version";
  @SerializedName(SERIALIZED_NAME_CATALOG_VERSION)
  private Long catalogVersion;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private String percentage;

  public static final String SERIALIZED_NAME_PRICING_RULE_ID = "pricing_rule_id";
  @SerializedName(SERIALIZED_NAME_PRICING_RULE_ID)
  private String pricingRuleId;

  public static final String SERIALIZED_NAME_REWARD_IDS = "reward_ids";
  @SerializedName(SERIALIZED_NAME_REWARD_IDS)
  private List<String> rewardIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public OrderLineItemDiscount() {
  }

  public OrderLineItemDiscount amountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
    return this;
  }

  /**
   * Get amountMoney
   * @return amountMoney
   */
  @javax.annotation.Nullable
  public Money getAmountMoney() {
    return amountMoney;
  }

  public void setAmountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
  }


  public OrderLineItemDiscount appliedMoney(Money appliedMoney) {
    this.appliedMoney = appliedMoney;
    return this;
  }

  /**
   * Get appliedMoney
   * @return appliedMoney
   */
  @javax.annotation.Nullable
  public Money getAppliedMoney() {
    return appliedMoney;
  }

  public void setAppliedMoney(Money appliedMoney) {
    this.appliedMoney = appliedMoney;
  }


  public OrderLineItemDiscount catalogObjectId(String catalogObjectId) {
    this.catalogObjectId = catalogObjectId;
    return this;
  }

  /**
   * The catalog object ID referencing [CatalogDiscount](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogDiscount).
   * @return catalogObjectId
   */
  @javax.annotation.Nullable
  public String getCatalogObjectId() {
    return catalogObjectId;
  }

  public void setCatalogObjectId(String catalogObjectId) {
    this.catalogObjectId = catalogObjectId;
  }


  public OrderLineItemDiscount catalogVersion(Long catalogVersion) {
    this.catalogVersion = catalogVersion;
    return this;
  }

  /**
   * The version of the catalog object that this discount references.
   * @return catalogVersion
   */
  @javax.annotation.Nullable
  public Long getCatalogVersion() {
    return catalogVersion;
  }

  public void setCatalogVersion(Long catalogVersion) {
    this.catalogVersion = catalogVersion;
  }


  public OrderLineItemDiscount metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public OrderLineItemDiscount putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Application-defined data attached to this discount. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set &#x60;[a-zA-Z0-9_-]&#x60;. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a &#39;:&#39; character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public OrderLineItemDiscount name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The discount&#39;s name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OrderLineItemDiscount percentage(String percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * The percentage of the discount, as a string representation of a decimal number. A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.  &#x60;percentage&#x60; is not set for amount-based discounts.
   * @return percentage
   */
  @javax.annotation.Nullable
  public String getPercentage() {
    return percentage;
  }

  public void setPercentage(String percentage) {
    this.percentage = percentage;
  }


  public OrderLineItemDiscount pricingRuleId(String pricingRuleId) {
    this.pricingRuleId = pricingRuleId;
    return this;
  }

  /**
   * The object ID of a [pricing rule](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule) to be applied  automatically to this discount. The specification and application of the discounts, to  which a &#x60;pricing_rule_id&#x60; is assigned, are completely controlled by the corresponding  pricing rule.
   * @return pricingRuleId
   */
  @javax.annotation.Nullable
  public String getPricingRuleId() {
    return pricingRuleId;
  }

  public void setPricingRuleId(String pricingRuleId) {
    this.pricingRuleId = pricingRuleId;
  }


  public OrderLineItemDiscount rewardIds(List<String> rewardIds) {
    this.rewardIds = rewardIds;
    return this;
  }

  public OrderLineItemDiscount addRewardIdsItem(String rewardIdsItem) {
    if (this.rewardIds == null) {
      this.rewardIds = new ArrayList<>();
    }
    this.rewardIds.add(rewardIdsItem);
    return this;
  }

  /**
   * The reward IDs corresponding to this discount. The application and specification of discounts that have &#x60;reward_ids&#x60; are completely controlled by the backing criteria corresponding to the reward tiers of the rewards that are added to the order through the Loyalty API. To manually unapply discounts that are the result of added rewards, the rewards must be removed from the order through the Loyalty API.
   * @return rewardIds
   */
  @javax.annotation.Nullable
  public List<String> getRewardIds() {
    return rewardIds;
  }

  public void setRewardIds(List<String> rewardIds) {
    this.rewardIds = rewardIds;
  }


  public OrderLineItemDiscount scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Indicates the level at which the discount applies. For &#x60;ORDER&#x60; scoped discounts, Square generates references in &#x60;applied_discounts&#x60; on all order line items that do not have them. For &#x60;LINE_ITEM&#x60; scoped discounts, the discount only applies to line items with a discount reference in their &#x60;applied_discounts&#x60; field.  This field is immutable. To change the scope of a discount, you must delete the discount and re-add it as a new discount.
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public OrderLineItemDiscount type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the discount.  Discounts that do not reference a catalog object ID must have a type of &#x60;FIXED_PERCENTAGE&#x60; or &#x60;FIXED_AMOUNT&#x60;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public OrderLineItemDiscount uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * A unique ID that identifies the discount only within this order.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderLineItemDiscount orderLineItemDiscount = (OrderLineItemDiscount) o;
    return Objects.equals(this.amountMoney, orderLineItemDiscount.amountMoney) &&
        Objects.equals(this.appliedMoney, orderLineItemDiscount.appliedMoney) &&
        Objects.equals(this.catalogObjectId, orderLineItemDiscount.catalogObjectId) &&
        Objects.equals(this.catalogVersion, orderLineItemDiscount.catalogVersion) &&
        Objects.equals(this.metadata, orderLineItemDiscount.metadata) &&
        Objects.equals(this.name, orderLineItemDiscount.name) &&
        Objects.equals(this.percentage, orderLineItemDiscount.percentage) &&
        Objects.equals(this.pricingRuleId, orderLineItemDiscount.pricingRuleId) &&
        Objects.equals(this.rewardIds, orderLineItemDiscount.rewardIds) &&
        Objects.equals(this.scope, orderLineItemDiscount.scope) &&
        Objects.equals(this.type, orderLineItemDiscount.type) &&
        Objects.equals(this.uid, orderLineItemDiscount.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountMoney, appliedMoney, catalogObjectId, catalogVersion, metadata, name, percentage, pricingRuleId, rewardIds, scope, type, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderLineItemDiscount {\n");
    sb.append("    amountMoney: ").append(toIndentedString(amountMoney)).append("\n");
    sb.append("    appliedMoney: ").append(toIndentedString(appliedMoney)).append("\n");
    sb.append("    catalogObjectId: ").append(toIndentedString(catalogObjectId)).append("\n");
    sb.append("    catalogVersion: ").append(toIndentedString(catalogVersion)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    pricingRuleId: ").append(toIndentedString(pricingRuleId)).append("\n");
    sb.append("    rewardIds: ").append(toIndentedString(rewardIds)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount_money");
    openapiFields.add("applied_money");
    openapiFields.add("catalog_object_id");
    openapiFields.add("catalog_version");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("percentage");
    openapiFields.add("pricing_rule_id");
    openapiFields.add("reward_ids");
    openapiFields.add("scope");
    openapiFields.add("type");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderLineItemDiscount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderLineItemDiscount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderLineItemDiscount is not found in the empty JSON string", OrderLineItemDiscount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderLineItemDiscount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderLineItemDiscount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amount_money`
      if (jsonObj.get("amount_money") != null && !jsonObj.get("amount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("amount_money"));
      }
      // validate the optional field `applied_money`
      if (jsonObj.get("applied_money") != null && !jsonObj.get("applied_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("applied_money"));
      }
      if ((jsonObj.get("catalog_object_id") != null && !jsonObj.get("catalog_object_id").isJsonNull()) && !jsonObj.get("catalog_object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalog_object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalog_object_id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("percentage") != null && !jsonObj.get("percentage").isJsonNull()) && !jsonObj.get("percentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentage").toString()));
      }
      if ((jsonObj.get("pricing_rule_id") != null && !jsonObj.get("pricing_rule_id").isJsonNull()) && !jsonObj.get("pricing_rule_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricing_rule_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricing_rule_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reward_ids") != null && !jsonObj.get("reward_ids").isJsonNull() && !jsonObj.get("reward_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reward_ids` to be an array in the JSON string but got `%s`", jsonObj.get("reward_ids").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderLineItemDiscount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderLineItemDiscount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderLineItemDiscount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderLineItemDiscount.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderLineItemDiscount>() {
           @Override
           public void write(JsonWriter out, OrderLineItemDiscount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderLineItemDiscount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderLineItemDiscount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderLineItemDiscount
   * @throws IOException if the JSON string is invalid with respect to OrderLineItemDiscount
   */
  public static OrderLineItemDiscount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderLineItemDiscount.class);
  }

  /**
   * Convert an instance of OrderLineItemDiscount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

