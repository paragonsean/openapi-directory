/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JobAssignment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object representing a team member&#39;s wage information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WageSetting {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_IS_OVERTIME_EXEMPT = "is_overtime_exempt";
  @SerializedName(SERIALIZED_NAME_IS_OVERTIME_EXEMPT)
  private Boolean isOvertimeExempt;

  public static final String SERIALIZED_NAME_JOB_ASSIGNMENTS = "job_assignments";
  @SerializedName(SERIALIZED_NAME_JOB_ASSIGNMENTS)
  private List<JobAssignment> jobAssignments = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAM_MEMBER_ID = "team_member_id";
  @SerializedName(SERIALIZED_NAME_TEAM_MEMBER_ID)
  private String teamMemberId;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public WageSetting() {
  }

  public WageSetting createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The timestamp, in RFC 3339 format, describing when the wage setting object was created. For example, \&quot;2018-10-04T04:00:00-07:00\&quot; or \&quot;2019-02-05T12:00:00Z\&quot;.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public WageSetting isOvertimeExempt(Boolean isOvertimeExempt) {
    this.isOvertimeExempt = isOvertimeExempt;
    return this;
  }

  /**
   * Whether the team member is exempt from the overtime rules of the seller&#39;s country.
   * @return isOvertimeExempt
   */
  @javax.annotation.Nullable
  public Boolean getIsOvertimeExempt() {
    return isOvertimeExempt;
  }

  public void setIsOvertimeExempt(Boolean isOvertimeExempt) {
    this.isOvertimeExempt = isOvertimeExempt;
  }


  public WageSetting jobAssignments(List<JobAssignment> jobAssignments) {
    this.jobAssignments = jobAssignments;
    return this;
  }

  public WageSetting addJobAssignmentsItem(JobAssignment jobAssignmentsItem) {
    if (this.jobAssignments == null) {
      this.jobAssignments = new ArrayList<>();
    }
    this.jobAssignments.add(jobAssignmentsItem);
    return this;
  }

  /**
   * Required. The ordered list of jobs that the team member is assigned to. The first job assignment is considered the team member&#39;s primary job.  The minimum length is 1 and the maximum length is 12.
   * @return jobAssignments
   */
  @javax.annotation.Nullable
  public List<JobAssignment> getJobAssignments() {
    return jobAssignments;
  }

  public void setJobAssignments(List<JobAssignment> jobAssignments) {
    this.jobAssignments = jobAssignments;
  }


  public WageSetting teamMemberId(String teamMemberId) {
    this.teamMemberId = teamMemberId;
    return this;
  }

  /**
   * The unique ID of the &#x60;TeamMember&#x60; whom this wage setting describes.
   * @return teamMemberId
   */
  @javax.annotation.Nullable
  public String getTeamMemberId() {
    return teamMemberId;
  }

  public void setTeamMemberId(String teamMemberId) {
    this.teamMemberId = teamMemberId;
  }


  public WageSetting updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The timestamp, in RFC 3339 format, describing when the wage setting object was last updated. For example, \&quot;2018-10-04T04:00:00-07:00\&quot; or \&quot;2019-02-05T12:00:00Z\&quot;.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public WageSetting version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Used for resolving concurrency issues. The request fails if the version provided does not match the server version at the time of the request. If not provided, Square executes a blind write, potentially overwriting data from another write. For more information, see [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency).
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WageSetting wageSetting = (WageSetting) o;
    return Objects.equals(this.createdAt, wageSetting.createdAt) &&
        Objects.equals(this.isOvertimeExempt, wageSetting.isOvertimeExempt) &&
        Objects.equals(this.jobAssignments, wageSetting.jobAssignments) &&
        Objects.equals(this.teamMemberId, wageSetting.teamMemberId) &&
        Objects.equals(this.updatedAt, wageSetting.updatedAt) &&
        Objects.equals(this.version, wageSetting.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, isOvertimeExempt, jobAssignments, teamMemberId, updatedAt, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WageSetting {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    isOvertimeExempt: ").append(toIndentedString(isOvertimeExempt)).append("\n");
    sb.append("    jobAssignments: ").append(toIndentedString(jobAssignments)).append("\n");
    sb.append("    teamMemberId: ").append(toIndentedString(teamMemberId)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("is_overtime_exempt");
    openapiFields.add("job_assignments");
    openapiFields.add("team_member_id");
    openapiFields.add("updated_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WageSetting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WageSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WageSetting is not found in the empty JSON string", WageSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WageSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WageSetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (jsonObj.get("job_assignments") != null && !jsonObj.get("job_assignments").isJsonNull()) {
        JsonArray jsonArrayjobAssignments = jsonObj.getAsJsonArray("job_assignments");
        if (jsonArrayjobAssignments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("job_assignments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `job_assignments` to be an array in the JSON string but got `%s`", jsonObj.get("job_assignments").toString()));
          }

          // validate the optional field `job_assignments` (array)
          for (int i = 0; i < jsonArrayjobAssignments.size(); i++) {
            JobAssignment.validateJsonElement(jsonArrayjobAssignments.get(i));
          };
        }
      }
      if ((jsonObj.get("team_member_id") != null && !jsonObj.get("team_member_id").isJsonNull()) && !jsonObj.get("team_member_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_member_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team_member_id").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WageSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WageSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WageSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WageSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<WageSetting>() {
           @Override
           public void write(JsonWriter out, WageSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WageSetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WageSetting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WageSetting
   * @throws IOException if the JSON string is invalid with respect to WageSetting
   */
  public static WageSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WageSetting.class);
  }

  /**
   * Convert an instance of WageSetting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

