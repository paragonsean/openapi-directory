/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DisputeEvidenceFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DisputeEvidence {
  public static final String SERIALIZED_NAME_DISPUTE_ID = "dispute_id";
  @SerializedName(SERIALIZED_NAME_DISPUTE_ID)
  private String disputeId;

  public static final String SERIALIZED_NAME_EVIDENCE_FILE = "evidence_file";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_FILE)
  private DisputeEvidenceFile evidenceFile;

  public static final String SERIALIZED_NAME_EVIDENCE_ID = "evidence_id";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_ID)
  private String evidenceId;

  public static final String SERIALIZED_NAME_EVIDENCE_TEXT = "evidence_text";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_TEXT)
  private String evidenceText;

  public static final String SERIALIZED_NAME_EVIDENCE_TYPE = "evidence_type";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_TYPE)
  private String evidenceType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_UPLOADED_AT = "uploaded_at";
  @SerializedName(SERIALIZED_NAME_UPLOADED_AT)
  private String uploadedAt;

  public DisputeEvidence() {
  }

  public DisputeEvidence disputeId(String disputeId) {
    this.disputeId = disputeId;
    return this;
  }

  /**
   * The ID of the dispute the evidence is associated with.
   * @return disputeId
   */
  @javax.annotation.Nullable
  public String getDisputeId() {
    return disputeId;
  }

  public void setDisputeId(String disputeId) {
    this.disputeId = disputeId;
  }


  public DisputeEvidence evidenceFile(DisputeEvidenceFile evidenceFile) {
    this.evidenceFile = evidenceFile;
    return this;
  }

  /**
   * Get evidenceFile
   * @return evidenceFile
   */
  @javax.annotation.Nullable
  public DisputeEvidenceFile getEvidenceFile() {
    return evidenceFile;
  }

  public void setEvidenceFile(DisputeEvidenceFile evidenceFile) {
    this.evidenceFile = evidenceFile;
  }


  public DisputeEvidence evidenceId(String evidenceId) {
    this.evidenceId = evidenceId;
    return this;
  }

  /**
   * The Square-generated ID of the evidence.
   * @return evidenceId
   */
  @javax.annotation.Nullable
  public String getEvidenceId() {
    return evidenceId;
  }

  public void setEvidenceId(String evidenceId) {
    this.evidenceId = evidenceId;
  }


  public DisputeEvidence evidenceText(String evidenceText) {
    this.evidenceText = evidenceText;
    return this;
  }

  /**
   * Raw text
   * @return evidenceText
   */
  @javax.annotation.Nullable
  public String getEvidenceText() {
    return evidenceText;
  }

  public void setEvidenceText(String evidenceText) {
    this.evidenceText = evidenceText;
  }


  public DisputeEvidence evidenceType(String evidenceType) {
    this.evidenceType = evidenceType;
    return this;
  }

  /**
   * The type of the evidence.
   * @return evidenceType
   */
  @javax.annotation.Nullable
  public String getEvidenceType() {
    return evidenceType;
  }

  public void setEvidenceType(String evidenceType) {
    this.evidenceType = evidenceType;
  }


  public DisputeEvidence id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Square-generated ID of the evidence.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DisputeEvidence uploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
    return this;
  }

  /**
   * The time when the next action is due, in RFC 3339 format.
   * @return uploadedAt
   */
  @javax.annotation.Nullable
  public String getUploadedAt() {
    return uploadedAt;
  }

  public void setUploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisputeEvidence disputeEvidence = (DisputeEvidence) o;
    return Objects.equals(this.disputeId, disputeEvidence.disputeId) &&
        Objects.equals(this.evidenceFile, disputeEvidence.evidenceFile) &&
        Objects.equals(this.evidenceId, disputeEvidence.evidenceId) &&
        Objects.equals(this.evidenceText, disputeEvidence.evidenceText) &&
        Objects.equals(this.evidenceType, disputeEvidence.evidenceType) &&
        Objects.equals(this.id, disputeEvidence.id) &&
        Objects.equals(this.uploadedAt, disputeEvidence.uploadedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disputeId, evidenceFile, evidenceId, evidenceText, evidenceType, id, uploadedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisputeEvidence {\n");
    sb.append("    disputeId: ").append(toIndentedString(disputeId)).append("\n");
    sb.append("    evidenceFile: ").append(toIndentedString(evidenceFile)).append("\n");
    sb.append("    evidenceId: ").append(toIndentedString(evidenceId)).append("\n");
    sb.append("    evidenceText: ").append(toIndentedString(evidenceText)).append("\n");
    sb.append("    evidenceType: ").append(toIndentedString(evidenceType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    uploadedAt: ").append(toIndentedString(uploadedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dispute_id");
    openapiFields.add("evidence_file");
    openapiFields.add("evidence_id");
    openapiFields.add("evidence_text");
    openapiFields.add("evidence_type");
    openapiFields.add("id");
    openapiFields.add("uploaded_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DisputeEvidence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DisputeEvidence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DisputeEvidence is not found in the empty JSON string", DisputeEvidence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DisputeEvidence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DisputeEvidence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dispute_id") != null && !jsonObj.get("dispute_id").isJsonNull()) && !jsonObj.get("dispute_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispute_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispute_id").toString()));
      }
      // validate the optional field `evidence_file`
      if (jsonObj.get("evidence_file") != null && !jsonObj.get("evidence_file").isJsonNull()) {
        DisputeEvidenceFile.validateJsonElement(jsonObj.get("evidence_file"));
      }
      if ((jsonObj.get("evidence_id") != null && !jsonObj.get("evidence_id").isJsonNull()) && !jsonObj.get("evidence_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evidence_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evidence_id").toString()));
      }
      if ((jsonObj.get("evidence_text") != null && !jsonObj.get("evidence_text").isJsonNull()) && !jsonObj.get("evidence_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evidence_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evidence_text").toString()));
      }
      if ((jsonObj.get("evidence_type") != null && !jsonObj.get("evidence_type").isJsonNull()) && !jsonObj.get("evidence_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evidence_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evidence_type").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("uploaded_at") != null && !jsonObj.get("uploaded_at").isJsonNull()) && !jsonObj.get("uploaded_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploaded_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploaded_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DisputeEvidence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DisputeEvidence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DisputeEvidence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DisputeEvidence.class));

       return (TypeAdapter<T>) new TypeAdapter<DisputeEvidence>() {
           @Override
           public void write(JsonWriter out, DisputeEvidence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DisputeEvidence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DisputeEvidence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DisputeEvidence
   * @throws IOException if the JSON string is invalid with respect to DisputeEvidence
   */
  public static DisputeEvidence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DisputeEvidence.class);
  }

  /**
   * Convert an instance of DisputeEvidence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

