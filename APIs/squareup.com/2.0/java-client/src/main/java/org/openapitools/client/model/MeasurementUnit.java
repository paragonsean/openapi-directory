/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MeasurementUnitCustom;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a unit of measurement to use with a quantity, such as ounces or inches. Exactly one of the following fields are required: &#x60;custom_unit&#x60;, &#x60;area_unit&#x60;, &#x60;length_unit&#x60;, &#x60;volume_unit&#x60;, and &#x60;weight_unit&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MeasurementUnit {
  public static final String SERIALIZED_NAME_AREA_UNIT = "area_unit";
  @SerializedName(SERIALIZED_NAME_AREA_UNIT)
  private String areaUnit;

  public static final String SERIALIZED_NAME_CUSTOM_UNIT = "custom_unit";
  @SerializedName(SERIALIZED_NAME_CUSTOM_UNIT)
  private MeasurementUnitCustom customUnit;

  public static final String SERIALIZED_NAME_GENERIC_UNIT = "generic_unit";
  @SerializedName(SERIALIZED_NAME_GENERIC_UNIT)
  private String genericUnit;

  public static final String SERIALIZED_NAME_LENGTH_UNIT = "length_unit";
  @SerializedName(SERIALIZED_NAME_LENGTH_UNIT)
  private String lengthUnit;

  public static final String SERIALIZED_NAME_TIME_UNIT = "time_unit";
  @SerializedName(SERIALIZED_NAME_TIME_UNIT)
  private String timeUnit;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VOLUME_UNIT = "volume_unit";
  @SerializedName(SERIALIZED_NAME_VOLUME_UNIT)
  private String volumeUnit;

  public static final String SERIALIZED_NAME_WEIGHT_UNIT = "weight_unit";
  @SerializedName(SERIALIZED_NAME_WEIGHT_UNIT)
  private String weightUnit;

  public MeasurementUnit() {
  }

  public MeasurementUnit areaUnit(String areaUnit) {
    this.areaUnit = areaUnit;
    return this;
  }

  /**
   * Represents a standard area unit.
   * @return areaUnit
   */
  @javax.annotation.Nullable
  public String getAreaUnit() {
    return areaUnit;
  }

  public void setAreaUnit(String areaUnit) {
    this.areaUnit = areaUnit;
  }


  public MeasurementUnit customUnit(MeasurementUnitCustom customUnit) {
    this.customUnit = customUnit;
    return this;
  }

  /**
   * Get customUnit
   * @return customUnit
   */
  @javax.annotation.Nullable
  public MeasurementUnitCustom getCustomUnit() {
    return customUnit;
  }

  public void setCustomUnit(MeasurementUnitCustom customUnit) {
    this.customUnit = customUnit;
  }


  public MeasurementUnit genericUnit(String genericUnit) {
    this.genericUnit = genericUnit;
    return this;
  }

  /**
   * Reserved for API integrations that lack the ability to specify a real measurement unit
   * @return genericUnit
   */
  @javax.annotation.Nullable
  public String getGenericUnit() {
    return genericUnit;
  }

  public void setGenericUnit(String genericUnit) {
    this.genericUnit = genericUnit;
  }


  public MeasurementUnit lengthUnit(String lengthUnit) {
    this.lengthUnit = lengthUnit;
    return this;
  }

  /**
   * Represents a standard length unit.
   * @return lengthUnit
   */
  @javax.annotation.Nullable
  public String getLengthUnit() {
    return lengthUnit;
  }

  public void setLengthUnit(String lengthUnit) {
    this.lengthUnit = lengthUnit;
  }


  public MeasurementUnit timeUnit(String timeUnit) {
    this.timeUnit = timeUnit;
    return this;
  }

  /**
   * Represents a standard unit of time.
   * @return timeUnit
   */
  @javax.annotation.Nullable
  public String getTimeUnit() {
    return timeUnit;
  }

  public void setTimeUnit(String timeUnit) {
    this.timeUnit = timeUnit;
  }


  public MeasurementUnit type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Represents the type of the measurement unit.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public MeasurementUnit volumeUnit(String volumeUnit) {
    this.volumeUnit = volumeUnit;
    return this;
  }

  /**
   * Represents a standard volume unit.
   * @return volumeUnit
   */
  @javax.annotation.Nullable
  public String getVolumeUnit() {
    return volumeUnit;
  }

  public void setVolumeUnit(String volumeUnit) {
    this.volumeUnit = volumeUnit;
  }


  public MeasurementUnit weightUnit(String weightUnit) {
    this.weightUnit = weightUnit;
    return this;
  }

  /**
   * Represents a standard unit of weight or mass.
   * @return weightUnit
   */
  @javax.annotation.Nullable
  public String getWeightUnit() {
    return weightUnit;
  }

  public void setWeightUnit(String weightUnit) {
    this.weightUnit = weightUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeasurementUnit measurementUnit = (MeasurementUnit) o;
    return Objects.equals(this.areaUnit, measurementUnit.areaUnit) &&
        Objects.equals(this.customUnit, measurementUnit.customUnit) &&
        Objects.equals(this.genericUnit, measurementUnit.genericUnit) &&
        Objects.equals(this.lengthUnit, measurementUnit.lengthUnit) &&
        Objects.equals(this.timeUnit, measurementUnit.timeUnit) &&
        Objects.equals(this.type, measurementUnit.type) &&
        Objects.equals(this.volumeUnit, measurementUnit.volumeUnit) &&
        Objects.equals(this.weightUnit, measurementUnit.weightUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(areaUnit, customUnit, genericUnit, lengthUnit, timeUnit, type, volumeUnit, weightUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeasurementUnit {\n");
    sb.append("    areaUnit: ").append(toIndentedString(areaUnit)).append("\n");
    sb.append("    customUnit: ").append(toIndentedString(customUnit)).append("\n");
    sb.append("    genericUnit: ").append(toIndentedString(genericUnit)).append("\n");
    sb.append("    lengthUnit: ").append(toIndentedString(lengthUnit)).append("\n");
    sb.append("    timeUnit: ").append(toIndentedString(timeUnit)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    volumeUnit: ").append(toIndentedString(volumeUnit)).append("\n");
    sb.append("    weightUnit: ").append(toIndentedString(weightUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("area_unit");
    openapiFields.add("custom_unit");
    openapiFields.add("generic_unit");
    openapiFields.add("length_unit");
    openapiFields.add("time_unit");
    openapiFields.add("type");
    openapiFields.add("volume_unit");
    openapiFields.add("weight_unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MeasurementUnit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MeasurementUnit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeasurementUnit is not found in the empty JSON string", MeasurementUnit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MeasurementUnit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MeasurementUnit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("area_unit") != null && !jsonObj.get("area_unit").isJsonNull()) && !jsonObj.get("area_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `area_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("area_unit").toString()));
      }
      // validate the optional field `custom_unit`
      if (jsonObj.get("custom_unit") != null && !jsonObj.get("custom_unit").isJsonNull()) {
        MeasurementUnitCustom.validateJsonElement(jsonObj.get("custom_unit"));
      }
      if ((jsonObj.get("generic_unit") != null && !jsonObj.get("generic_unit").isJsonNull()) && !jsonObj.get("generic_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generic_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generic_unit").toString()));
      }
      if ((jsonObj.get("length_unit") != null && !jsonObj.get("length_unit").isJsonNull()) && !jsonObj.get("length_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `length_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("length_unit").toString()));
      }
      if ((jsonObj.get("time_unit") != null && !jsonObj.get("time_unit").isJsonNull()) && !jsonObj.get("time_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_unit").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("volume_unit") != null && !jsonObj.get("volume_unit").isJsonNull()) && !jsonObj.get("volume_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volume_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volume_unit").toString()));
      }
      if ((jsonObj.get("weight_unit") != null && !jsonObj.get("weight_unit").isJsonNull()) && !jsonObj.get("weight_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weight_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weight_unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeasurementUnit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeasurementUnit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeasurementUnit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeasurementUnit.class));

       return (TypeAdapter<T>) new TypeAdapter<MeasurementUnit>() {
           @Override
           public void write(JsonWriter out, MeasurementUnit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MeasurementUnit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MeasurementUnit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MeasurementUnit
   * @throws IOException if the JSON string is invalid with respect to MeasurementUnit
   */
  public static MeasurementUnit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeasurementUnit.class);
  }

  /**
   * Convert an instance of MeasurementUnit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

