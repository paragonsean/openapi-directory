/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CatalogItemOptionValueForItemVariation;
import org.openapitools.client.model.CatalogStockConversion;
import org.openapitools.client.model.ItemVariationLocationOverrides;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An item variation (i.e., product) in the Catalog object model. Each item may have a maximum of 250 item variations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogItemVariation {
  public static final String SERIALIZED_NAME_AVAILABLE_FOR_BOOKING = "available_for_booking";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_FOR_BOOKING)
  private Boolean availableForBooking;

  public static final String SERIALIZED_NAME_INVENTORY_ALERT_THRESHOLD = "inventory_alert_threshold";
  @SerializedName(SERIALIZED_NAME_INVENTORY_ALERT_THRESHOLD)
  private Long inventoryAlertThreshold;

  public static final String SERIALIZED_NAME_INVENTORY_ALERT_TYPE = "inventory_alert_type";
  @SerializedName(SERIALIZED_NAME_INVENTORY_ALERT_TYPE)
  private String inventoryAlertType;

  public static final String SERIALIZED_NAME_ITEM_ID = "item_id";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_ITEM_OPTION_VALUES = "item_option_values";
  @SerializedName(SERIALIZED_NAME_ITEM_OPTION_VALUES)
  private List<CatalogItemOptionValueForItemVariation> itemOptionValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION_OVERRIDES = "location_overrides";
  @SerializedName(SERIALIZED_NAME_LOCATION_OVERRIDES)
  private List<ItemVariationLocationOverrides> locationOverrides = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT_ID = "measurement_unit_id";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT_ID)
  private String measurementUnitId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORDINAL = "ordinal";
  @SerializedName(SERIALIZED_NAME_ORDINAL)
  private Integer ordinal;

  public static final String SERIALIZED_NAME_PRICE_MONEY = "price_money";
  @SerializedName(SERIALIZED_NAME_PRICE_MONEY)
  private Money priceMoney;

  public static final String SERIALIZED_NAME_PRICING_TYPE = "pricing_type";
  @SerializedName(SERIALIZED_NAME_PRICING_TYPE)
  private String pricingType;

  public static final String SERIALIZED_NAME_SERVICE_DURATION = "service_duration";
  @SerializedName(SERIALIZED_NAME_SERVICE_DURATION)
  private Long serviceDuration;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_STOCKABLE = "stockable";
  @SerializedName(SERIALIZED_NAME_STOCKABLE)
  private Boolean stockable;

  public static final String SERIALIZED_NAME_STOCKABLE_CONVERSION = "stockable_conversion";
  @SerializedName(SERIALIZED_NAME_STOCKABLE_CONVERSION)
  private CatalogStockConversion stockableConversion;

  public static final String SERIALIZED_NAME_TEAM_MEMBER_IDS = "team_member_ids";
  @SerializedName(SERIALIZED_NAME_TEAM_MEMBER_IDS)
  private List<String> teamMemberIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACK_INVENTORY = "track_inventory";
  @SerializedName(SERIALIZED_NAME_TRACK_INVENTORY)
  private Boolean trackInventory;

  public static final String SERIALIZED_NAME_UPC = "upc";
  @SerializedName(SERIALIZED_NAME_UPC)
  private String upc;

  public static final String SERIALIZED_NAME_USER_DATA = "user_data";
  @SerializedName(SERIALIZED_NAME_USER_DATA)
  private String userData;

  public CatalogItemVariation() {
  }

  public CatalogItemVariation availableForBooking(Boolean availableForBooking) {
    this.availableForBooking = availableForBooking;
    return this;
  }

  /**
   * If the &#x60;CatalogItem&#x60; that owns this item variation is of type &#x60;APPOINTMENTS_SERVICE&#x60;, a bool representing whether this service is available for booking.
   * @return availableForBooking
   */
  @javax.annotation.Nullable
  public Boolean getAvailableForBooking() {
    return availableForBooking;
  }

  public void setAvailableForBooking(Boolean availableForBooking) {
    this.availableForBooking = availableForBooking;
  }


  public CatalogItemVariation inventoryAlertThreshold(Long inventoryAlertThreshold) {
    this.inventoryAlertThreshold = inventoryAlertThreshold;
    return this;
  }

  /**
   * If the inventory quantity for the variation is less than or equal to this value and &#x60;inventory_alert_type&#x60; is &#x60;LOW_QUANTITY&#x60;, the variation displays an alert in the merchant dashboard.  This value is always an integer.
   * @return inventoryAlertThreshold
   */
  @javax.annotation.Nullable
  public Long getInventoryAlertThreshold() {
    return inventoryAlertThreshold;
  }

  public void setInventoryAlertThreshold(Long inventoryAlertThreshold) {
    this.inventoryAlertThreshold = inventoryAlertThreshold;
  }


  public CatalogItemVariation inventoryAlertType(String inventoryAlertType) {
    this.inventoryAlertType = inventoryAlertType;
    return this;
  }

  /**
   * Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its &#x60;inventory_alert_threshold&#x60;.
   * @return inventoryAlertType
   */
  @javax.annotation.Nullable
  public String getInventoryAlertType() {
    return inventoryAlertType;
  }

  public void setInventoryAlertType(String inventoryAlertType) {
    this.inventoryAlertType = inventoryAlertType;
  }


  public CatalogItemVariation itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * The ID of the &#x60;CatalogItem&#x60; associated with this item variation.
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public CatalogItemVariation itemOptionValues(List<CatalogItemOptionValueForItemVariation> itemOptionValues) {
    this.itemOptionValues = itemOptionValues;
    return this;
  }

  public CatalogItemVariation addItemOptionValuesItem(CatalogItemOptionValueForItemVariation itemOptionValuesItem) {
    if (this.itemOptionValues == null) {
      this.itemOptionValues = new ArrayList<>();
    }
    this.itemOptionValues.add(itemOptionValuesItem);
    return this;
  }

  /**
   * List of item option values associated with this item variation. Listed in the same order as the item options of the parent item.
   * @return itemOptionValues
   */
  @javax.annotation.Nullable
  public List<CatalogItemOptionValueForItemVariation> getItemOptionValues() {
    return itemOptionValues;
  }

  public void setItemOptionValues(List<CatalogItemOptionValueForItemVariation> itemOptionValues) {
    this.itemOptionValues = itemOptionValues;
  }


  public CatalogItemVariation locationOverrides(List<ItemVariationLocationOverrides> locationOverrides) {
    this.locationOverrides = locationOverrides;
    return this;
  }

  public CatalogItemVariation addLocationOverridesItem(ItemVariationLocationOverrides locationOverridesItem) {
    if (this.locationOverrides == null) {
      this.locationOverrides = new ArrayList<>();
    }
    this.locationOverrides.add(locationOverridesItem);
    return this;
  }

  /**
   * Per-location price and inventory overrides.
   * @return locationOverrides
   */
  @javax.annotation.Nullable
  public List<ItemVariationLocationOverrides> getLocationOverrides() {
    return locationOverrides;
  }

  public void setLocationOverrides(List<ItemVariationLocationOverrides> locationOverrides) {
    this.locationOverrides = locationOverrides;
  }


  public CatalogItemVariation measurementUnitId(String measurementUnitId) {
    this.measurementUnitId = measurementUnitId;
    return this;
  }

  /**
   * ID of the ‘CatalogMeasurementUnit’ that is used to measure the quantity sold of this item variation. If left unset, the item will be sold in whole quantities.
   * @return measurementUnitId
   */
  @javax.annotation.Nullable
  public String getMeasurementUnitId() {
    return measurementUnitId;
  }

  public void setMeasurementUnitId(String measurementUnitId) {
    this.measurementUnitId = measurementUnitId;
  }


  public CatalogItemVariation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The item variation&#39;s name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CatalogItemVariation ordinal(Integer ordinal) {
    this.ordinal = ordinal;
    return this;
  }

  /**
   * The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal for each item variation within a parent &#x60;CatalogItem&#x60; is set according to the item variations&#39;s position. On reads, the value is not guaranteed to be sequential or unique.
   * @return ordinal
   */
  @javax.annotation.Nullable
  public Integer getOrdinal() {
    return ordinal;
  }

  public void setOrdinal(Integer ordinal) {
    this.ordinal = ordinal;
  }


  public CatalogItemVariation priceMoney(Money priceMoney) {
    this.priceMoney = priceMoney;
    return this;
  }

  /**
   * Get priceMoney
   * @return priceMoney
   */
  @javax.annotation.Nullable
  public Money getPriceMoney() {
    return priceMoney;
  }

  public void setPriceMoney(Money priceMoney) {
    this.priceMoney = priceMoney;
  }


  public CatalogItemVariation pricingType(String pricingType) {
    this.pricingType = pricingType;
    return this;
  }

  /**
   * Indicates whether the item variation&#39;s price is fixed or determined at the time of sale.
   * @return pricingType
   */
  @javax.annotation.Nullable
  public String getPricingType() {
    return pricingType;
  }

  public void setPricingType(String pricingType) {
    this.pricingType = pricingType;
  }


  public CatalogItemVariation serviceDuration(Long serviceDuration) {
    this.serviceDuration = serviceDuration;
    return this;
  }

  /**
   * If the &#x60;CatalogItem&#x60; that owns this item variation is of type &#x60;APPOINTMENTS_SERVICE&#x60;, then this is the duration of the service in milliseconds. For example, a 30 minute appointment would have the value &#x60;1800000&#x60;, which is equal to 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).
   * @return serviceDuration
   */
  @javax.annotation.Nullable
  public Long getServiceDuration() {
    return serviceDuration;
  }

  public void setServiceDuration(Long serviceDuration) {
    this.serviceDuration = serviceDuration;
  }


  public CatalogItemVariation sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * The item variation&#39;s SKU, if any. This is a searchable attribute for use in applicable query filters.
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public CatalogItemVariation stockable(Boolean stockable) {
    this.stockable = stockable;
    return this;
  }

  /**
   * Whether stock is counted directly on this variation (TRUE) or only on its components (FALSE). For backward compatibility missing values will be interpreted as TRUE.
   * @return stockable
   */
  @javax.annotation.Nullable
  public Boolean getStockable() {
    return stockable;
  }

  public void setStockable(Boolean stockable) {
    this.stockable = stockable;
  }


  public CatalogItemVariation stockableConversion(CatalogStockConversion stockableConversion) {
    this.stockableConversion = stockableConversion;
    return this;
  }

  /**
   * Get stockableConversion
   * @return stockableConversion
   */
  @javax.annotation.Nullable
  public CatalogStockConversion getStockableConversion() {
    return stockableConversion;
  }

  public void setStockableConversion(CatalogStockConversion stockableConversion) {
    this.stockableConversion = stockableConversion;
  }


  public CatalogItemVariation teamMemberIds(List<String> teamMemberIds) {
    this.teamMemberIds = teamMemberIds;
    return this;
  }

  public CatalogItemVariation addTeamMemberIdsItem(String teamMemberIdsItem) {
    if (this.teamMemberIds == null) {
      this.teamMemberIds = new ArrayList<>();
    }
    this.teamMemberIds.add(teamMemberIdsItem);
    return this;
  }

  /**
   * Tokens of employees that can perform the service represented by this variation. Only valid for variations of type &#x60;APPOINTMENTS_SERVICE&#x60;.
   * @return teamMemberIds
   */
  @javax.annotation.Nullable
  public List<String> getTeamMemberIds() {
    return teamMemberIds;
  }

  public void setTeamMemberIds(List<String> teamMemberIds) {
    this.teamMemberIds = teamMemberIds;
  }


  public CatalogItemVariation trackInventory(Boolean trackInventory) {
    this.trackInventory = trackInventory;
    return this;
  }

  /**
   * If &#x60;true&#x60;, inventory tracking is active for the variation.
   * @return trackInventory
   */
  @javax.annotation.Nullable
  public Boolean getTrackInventory() {
    return trackInventory;
  }

  public void setTrackInventory(Boolean trackInventory) {
    this.trackInventory = trackInventory;
  }


  public CatalogItemVariation upc(String upc) {
    this.upc = upc;
    return this;
  }

  /**
   * The universal product code (UPC) of the item variation, if any. This is a searchable attribute for use in applicable query filters.  The value of this attribute should be a number of 12-14 digits long.  This restriction is enforced on the Square Seller Dashboard, Square Point of Sale or Retail Point of Sale apps, where this attribute shows in the GTIN field. If a non-compliant UPC value is assigned to this attribute using the API, the value is not editable on the Seller Dashboard, Square Point of Sale or Retail Point of Sale apps unless it is updated to fit the expected format.
   * @return upc
   */
  @javax.annotation.Nullable
  public String getUpc() {
    return upc;
  }

  public void setUpc(String upc) {
    this.upc = upc;
  }


  public CatalogItemVariation userData(String userData) {
    this.userData = userData;
    return this;
  }

  /**
   * Arbitrary user metadata to associate with the item variation. This attribute value length is of Unicode code points.
   * @return userData
   */
  @javax.annotation.Nullable
  public String getUserData() {
    return userData;
  }

  public void setUserData(String userData) {
    this.userData = userData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogItemVariation catalogItemVariation = (CatalogItemVariation) o;
    return Objects.equals(this.availableForBooking, catalogItemVariation.availableForBooking) &&
        Objects.equals(this.inventoryAlertThreshold, catalogItemVariation.inventoryAlertThreshold) &&
        Objects.equals(this.inventoryAlertType, catalogItemVariation.inventoryAlertType) &&
        Objects.equals(this.itemId, catalogItemVariation.itemId) &&
        Objects.equals(this.itemOptionValues, catalogItemVariation.itemOptionValues) &&
        Objects.equals(this.locationOverrides, catalogItemVariation.locationOverrides) &&
        Objects.equals(this.measurementUnitId, catalogItemVariation.measurementUnitId) &&
        Objects.equals(this.name, catalogItemVariation.name) &&
        Objects.equals(this.ordinal, catalogItemVariation.ordinal) &&
        Objects.equals(this.priceMoney, catalogItemVariation.priceMoney) &&
        Objects.equals(this.pricingType, catalogItemVariation.pricingType) &&
        Objects.equals(this.serviceDuration, catalogItemVariation.serviceDuration) &&
        Objects.equals(this.sku, catalogItemVariation.sku) &&
        Objects.equals(this.stockable, catalogItemVariation.stockable) &&
        Objects.equals(this.stockableConversion, catalogItemVariation.stockableConversion) &&
        Objects.equals(this.teamMemberIds, catalogItemVariation.teamMemberIds) &&
        Objects.equals(this.trackInventory, catalogItemVariation.trackInventory) &&
        Objects.equals(this.upc, catalogItemVariation.upc) &&
        Objects.equals(this.userData, catalogItemVariation.userData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableForBooking, inventoryAlertThreshold, inventoryAlertType, itemId, itemOptionValues, locationOverrides, measurementUnitId, name, ordinal, priceMoney, pricingType, serviceDuration, sku, stockable, stockableConversion, teamMemberIds, trackInventory, upc, userData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogItemVariation {\n");
    sb.append("    availableForBooking: ").append(toIndentedString(availableForBooking)).append("\n");
    sb.append("    inventoryAlertThreshold: ").append(toIndentedString(inventoryAlertThreshold)).append("\n");
    sb.append("    inventoryAlertType: ").append(toIndentedString(inventoryAlertType)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    itemOptionValues: ").append(toIndentedString(itemOptionValues)).append("\n");
    sb.append("    locationOverrides: ").append(toIndentedString(locationOverrides)).append("\n");
    sb.append("    measurementUnitId: ").append(toIndentedString(measurementUnitId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ordinal: ").append(toIndentedString(ordinal)).append("\n");
    sb.append("    priceMoney: ").append(toIndentedString(priceMoney)).append("\n");
    sb.append("    pricingType: ").append(toIndentedString(pricingType)).append("\n");
    sb.append("    serviceDuration: ").append(toIndentedString(serviceDuration)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    stockable: ").append(toIndentedString(stockable)).append("\n");
    sb.append("    stockableConversion: ").append(toIndentedString(stockableConversion)).append("\n");
    sb.append("    teamMemberIds: ").append(toIndentedString(teamMemberIds)).append("\n");
    sb.append("    trackInventory: ").append(toIndentedString(trackInventory)).append("\n");
    sb.append("    upc: ").append(toIndentedString(upc)).append("\n");
    sb.append("    userData: ").append(toIndentedString(userData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available_for_booking");
    openapiFields.add("inventory_alert_threshold");
    openapiFields.add("inventory_alert_type");
    openapiFields.add("item_id");
    openapiFields.add("item_option_values");
    openapiFields.add("location_overrides");
    openapiFields.add("measurement_unit_id");
    openapiFields.add("name");
    openapiFields.add("ordinal");
    openapiFields.add("price_money");
    openapiFields.add("pricing_type");
    openapiFields.add("service_duration");
    openapiFields.add("sku");
    openapiFields.add("stockable");
    openapiFields.add("stockable_conversion");
    openapiFields.add("team_member_ids");
    openapiFields.add("track_inventory");
    openapiFields.add("upc");
    openapiFields.add("user_data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogItemVariation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogItemVariation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogItemVariation is not found in the empty JSON string", CatalogItemVariation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogItemVariation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogItemVariation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("inventory_alert_type") != null && !jsonObj.get("inventory_alert_type").isJsonNull()) && !jsonObj.get("inventory_alert_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventory_alert_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventory_alert_type").toString()));
      }
      if ((jsonObj.get("item_id") != null && !jsonObj.get("item_id").isJsonNull()) && !jsonObj.get("item_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_id").toString()));
      }
      if (jsonObj.get("item_option_values") != null && !jsonObj.get("item_option_values").isJsonNull()) {
        JsonArray jsonArrayitemOptionValues = jsonObj.getAsJsonArray("item_option_values");
        if (jsonArrayitemOptionValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("item_option_values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `item_option_values` to be an array in the JSON string but got `%s`", jsonObj.get("item_option_values").toString()));
          }

          // validate the optional field `item_option_values` (array)
          for (int i = 0; i < jsonArrayitemOptionValues.size(); i++) {
            CatalogItemOptionValueForItemVariation.validateJsonElement(jsonArrayitemOptionValues.get(i));
          };
        }
      }
      if (jsonObj.get("location_overrides") != null && !jsonObj.get("location_overrides").isJsonNull()) {
        JsonArray jsonArraylocationOverrides = jsonObj.getAsJsonArray("location_overrides");
        if (jsonArraylocationOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("location_overrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `location_overrides` to be an array in the JSON string but got `%s`", jsonObj.get("location_overrides").toString()));
          }

          // validate the optional field `location_overrides` (array)
          for (int i = 0; i < jsonArraylocationOverrides.size(); i++) {
            ItemVariationLocationOverrides.validateJsonElement(jsonArraylocationOverrides.get(i));
          };
        }
      }
      if ((jsonObj.get("measurement_unit_id") != null && !jsonObj.get("measurement_unit_id").isJsonNull()) && !jsonObj.get("measurement_unit_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurement_unit_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurement_unit_id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `price_money`
      if (jsonObj.get("price_money") != null && !jsonObj.get("price_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("price_money"));
      }
      if ((jsonObj.get("pricing_type") != null && !jsonObj.get("pricing_type").isJsonNull()) && !jsonObj.get("pricing_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricing_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricing_type").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      // validate the optional field `stockable_conversion`
      if (jsonObj.get("stockable_conversion") != null && !jsonObj.get("stockable_conversion").isJsonNull()) {
        CatalogStockConversion.validateJsonElement(jsonObj.get("stockable_conversion"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("team_member_ids") != null && !jsonObj.get("team_member_ids").isJsonNull() && !jsonObj.get("team_member_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_member_ids` to be an array in the JSON string but got `%s`", jsonObj.get("team_member_ids").toString()));
      }
      if ((jsonObj.get("upc") != null && !jsonObj.get("upc").isJsonNull()) && !jsonObj.get("upc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upc").toString()));
      }
      if ((jsonObj.get("user_data") != null && !jsonObj.get("user_data").isJsonNull()) && !jsonObj.get("user_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_data").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogItemVariation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogItemVariation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogItemVariation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogItemVariation.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogItemVariation>() {
           @Override
           public void write(JsonWriter out, CatalogItemVariation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogItemVariation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogItemVariation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogItemVariation
   * @throws IOException if the JSON string is invalid with respect to CatalogItemVariation
   */
  public static CatalogItemVariation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogItemVariation.class);
  }

  /**
   * Convert an instance of CatalogItemVariation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

