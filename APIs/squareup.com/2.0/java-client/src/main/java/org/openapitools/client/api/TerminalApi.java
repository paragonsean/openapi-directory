/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CancelTerminalCheckoutResponse;
import org.openapitools.client.model.CancelTerminalRefundResponse;
import org.openapitools.client.model.CreateTerminalCheckoutRequest;
import org.openapitools.client.model.CreateTerminalCheckoutResponse;
import org.openapitools.client.model.CreateTerminalRefundRequest;
import org.openapitools.client.model.CreateTerminalRefundResponse;
import org.openapitools.client.model.GetTerminalCheckoutResponse;
import org.openapitools.client.model.GetTerminalRefundResponse;
import org.openapitools.client.model.SearchTerminalCheckoutsRequest;
import org.openapitools.client.model.SearchTerminalCheckoutsResponse;
import org.openapitools.client.model.SearchTerminalRefundsRequest;
import org.openapitools.client.model.SearchTerminalRefundsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TerminalApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TerminalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TerminalApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelTerminalCheckout
     * @param checkoutId The unique ID for the desired &#x60;TerminalCheckout&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelTerminalCheckoutCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/terminals/checkouts/{checkout_id}/cancel"
            .replace("{" + "checkout_id" + "}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelTerminalCheckoutValidateBeforeCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling cancelTerminalCheckout(Async)");
        }

        return cancelTerminalCheckoutCall(checkoutId, _callback);

    }

    /**
     * CancelTerminalCheckout
     * Cancels a Terminal checkout request if the status of the request permits it.
     * @param checkoutId The unique ID for the desired &#x60;TerminalCheckout&#x60;. (required)
     * @return CancelTerminalCheckoutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CancelTerminalCheckoutResponse cancelTerminalCheckout(String checkoutId) throws ApiException {
        ApiResponse<CancelTerminalCheckoutResponse> localVarResp = cancelTerminalCheckoutWithHttpInfo(checkoutId);
        return localVarResp.getData();
    }

    /**
     * CancelTerminalCheckout
     * Cancels a Terminal checkout request if the status of the request permits it.
     * @param checkoutId The unique ID for the desired &#x60;TerminalCheckout&#x60;. (required)
     * @return ApiResponse&lt;CancelTerminalCheckoutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelTerminalCheckoutResponse> cancelTerminalCheckoutWithHttpInfo(String checkoutId) throws ApiException {
        okhttp3.Call localVarCall = cancelTerminalCheckoutValidateBeforeCall(checkoutId, null);
        Type localVarReturnType = new TypeToken<CancelTerminalCheckoutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CancelTerminalCheckout (asynchronously)
     * Cancels a Terminal checkout request if the status of the request permits it.
     * @param checkoutId The unique ID for the desired &#x60;TerminalCheckout&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelTerminalCheckoutAsync(String checkoutId, final ApiCallback<CancelTerminalCheckoutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelTerminalCheckoutValidateBeforeCall(checkoutId, _callback);
        Type localVarReturnType = new TypeToken<CancelTerminalCheckoutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelTerminalRefund
     * @param terminalRefundId The unique ID for the desired &#x60;TerminalRefund&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelTerminalRefundCall(String terminalRefundId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/terminals/refunds/{terminal_refund_id}/cancel"
            .replace("{" + "terminal_refund_id" + "}", localVarApiClient.escapeString(terminalRefundId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelTerminalRefundValidateBeforeCall(String terminalRefundId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminalRefundId' is set
        if (terminalRefundId == null) {
            throw new ApiException("Missing the required parameter 'terminalRefundId' when calling cancelTerminalRefund(Async)");
        }

        return cancelTerminalRefundCall(terminalRefundId, _callback);

    }

    /**
     * CancelTerminalRefund
     * Cancels an Interac Terminal refund request by refund request ID if the status of the request permits it.
     * @param terminalRefundId The unique ID for the desired &#x60;TerminalRefund&#x60;. (required)
     * @return CancelTerminalRefundResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CancelTerminalRefundResponse cancelTerminalRefund(String terminalRefundId) throws ApiException {
        ApiResponse<CancelTerminalRefundResponse> localVarResp = cancelTerminalRefundWithHttpInfo(terminalRefundId);
        return localVarResp.getData();
    }

    /**
     * CancelTerminalRefund
     * Cancels an Interac Terminal refund request by refund request ID if the status of the request permits it.
     * @param terminalRefundId The unique ID for the desired &#x60;TerminalRefund&#x60;. (required)
     * @return ApiResponse&lt;CancelTerminalRefundResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelTerminalRefundResponse> cancelTerminalRefundWithHttpInfo(String terminalRefundId) throws ApiException {
        okhttp3.Call localVarCall = cancelTerminalRefundValidateBeforeCall(terminalRefundId, null);
        Type localVarReturnType = new TypeToken<CancelTerminalRefundResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CancelTerminalRefund (asynchronously)
     * Cancels an Interac Terminal refund request by refund request ID if the status of the request permits it.
     * @param terminalRefundId The unique ID for the desired &#x60;TerminalRefund&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelTerminalRefundAsync(String terminalRefundId, final ApiCallback<CancelTerminalRefundResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelTerminalRefundValidateBeforeCall(terminalRefundId, _callback);
        Type localVarReturnType = new TypeToken<CancelTerminalRefundResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTerminalCheckout
     * @param createTerminalCheckoutRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTerminalCheckoutCall(CreateTerminalCheckoutRequest createTerminalCheckoutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTerminalCheckoutRequest;

        // create path and map variables
        String localVarPath = "/v2/terminals/checkouts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTerminalCheckoutValidateBeforeCall(CreateTerminalCheckoutRequest createTerminalCheckoutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTerminalCheckoutRequest' is set
        if (createTerminalCheckoutRequest == null) {
            throw new ApiException("Missing the required parameter 'createTerminalCheckoutRequest' when calling createTerminalCheckout(Async)");
        }

        return createTerminalCheckoutCall(createTerminalCheckoutRequest, _callback);

    }

    /**
     * CreateTerminalCheckout
     * Creates a Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
     * @param createTerminalCheckoutRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return CreateTerminalCheckoutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateTerminalCheckoutResponse createTerminalCheckout(CreateTerminalCheckoutRequest createTerminalCheckoutRequest) throws ApiException {
        ApiResponse<CreateTerminalCheckoutResponse> localVarResp = createTerminalCheckoutWithHttpInfo(createTerminalCheckoutRequest);
        return localVarResp.getData();
    }

    /**
     * CreateTerminalCheckout
     * Creates a Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
     * @param createTerminalCheckoutRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;CreateTerminalCheckoutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTerminalCheckoutResponse> createTerminalCheckoutWithHttpInfo(CreateTerminalCheckoutRequest createTerminalCheckoutRequest) throws ApiException {
        okhttp3.Call localVarCall = createTerminalCheckoutValidateBeforeCall(createTerminalCheckoutRequest, null);
        Type localVarReturnType = new TypeToken<CreateTerminalCheckoutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateTerminalCheckout (asynchronously)
     * Creates a Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
     * @param createTerminalCheckoutRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTerminalCheckoutAsync(CreateTerminalCheckoutRequest createTerminalCheckoutRequest, final ApiCallback<CreateTerminalCheckoutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTerminalCheckoutValidateBeforeCall(createTerminalCheckoutRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateTerminalCheckoutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTerminalRefund
     * @param createTerminalRefundRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTerminalRefundCall(CreateTerminalRefundRequest createTerminalRefundRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTerminalRefundRequest;

        // create path and map variables
        String localVarPath = "/v2/terminals/refunds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTerminalRefundValidateBeforeCall(CreateTerminalRefundRequest createTerminalRefundRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTerminalRefundRequest' is set
        if (createTerminalRefundRequest == null) {
            throw new ApiException("Missing the required parameter 'createTerminalRefundRequest' when calling createTerminalRefund(Async)");
        }

        return createTerminalRefundCall(createTerminalRefundRequest, _callback);

    }

    /**
     * CreateTerminalRefund
     * Creates a request to refund an Interac payment completed on a Square Terminal.
     * @param createTerminalRefundRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return CreateTerminalRefundResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateTerminalRefundResponse createTerminalRefund(CreateTerminalRefundRequest createTerminalRefundRequest) throws ApiException {
        ApiResponse<CreateTerminalRefundResponse> localVarResp = createTerminalRefundWithHttpInfo(createTerminalRefundRequest);
        return localVarResp.getData();
    }

    /**
     * CreateTerminalRefund
     * Creates a request to refund an Interac payment completed on a Square Terminal.
     * @param createTerminalRefundRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;CreateTerminalRefundResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTerminalRefundResponse> createTerminalRefundWithHttpInfo(CreateTerminalRefundRequest createTerminalRefundRequest) throws ApiException {
        okhttp3.Call localVarCall = createTerminalRefundValidateBeforeCall(createTerminalRefundRequest, null);
        Type localVarReturnType = new TypeToken<CreateTerminalRefundResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateTerminalRefund (asynchronously)
     * Creates a request to refund an Interac payment completed on a Square Terminal.
     * @param createTerminalRefundRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTerminalRefundAsync(CreateTerminalRefundRequest createTerminalRefundRequest, final ApiCallback<CreateTerminalRefundResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTerminalRefundValidateBeforeCall(createTerminalRefundRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateTerminalRefundResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTerminalCheckout
     * @param checkoutId The unique ID for the desired &#x60;TerminalCheckout&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTerminalCheckoutCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/terminals/checkouts/{checkout_id}"
            .replace("{" + "checkout_id" + "}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTerminalCheckoutValidateBeforeCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling getTerminalCheckout(Async)");
        }

        return getTerminalCheckoutCall(checkoutId, _callback);

    }

    /**
     * GetTerminalCheckout
     * Retrieves a Terminal checkout request by &#x60;checkout_id&#x60;.
     * @param checkoutId The unique ID for the desired &#x60;TerminalCheckout&#x60;. (required)
     * @return GetTerminalCheckoutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetTerminalCheckoutResponse getTerminalCheckout(String checkoutId) throws ApiException {
        ApiResponse<GetTerminalCheckoutResponse> localVarResp = getTerminalCheckoutWithHttpInfo(checkoutId);
        return localVarResp.getData();
    }

    /**
     * GetTerminalCheckout
     * Retrieves a Terminal checkout request by &#x60;checkout_id&#x60;.
     * @param checkoutId The unique ID for the desired &#x60;TerminalCheckout&#x60;. (required)
     * @return ApiResponse&lt;GetTerminalCheckoutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTerminalCheckoutResponse> getTerminalCheckoutWithHttpInfo(String checkoutId) throws ApiException {
        okhttp3.Call localVarCall = getTerminalCheckoutValidateBeforeCall(checkoutId, null);
        Type localVarReturnType = new TypeToken<GetTerminalCheckoutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetTerminalCheckout (asynchronously)
     * Retrieves a Terminal checkout request by &#x60;checkout_id&#x60;.
     * @param checkoutId The unique ID for the desired &#x60;TerminalCheckout&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTerminalCheckoutAsync(String checkoutId, final ApiCallback<GetTerminalCheckoutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTerminalCheckoutValidateBeforeCall(checkoutId, _callback);
        Type localVarReturnType = new TypeToken<GetTerminalCheckoutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTerminalRefund
     * @param terminalRefundId The unique ID for the desired &#x60;TerminalRefund&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTerminalRefundCall(String terminalRefundId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/terminals/refunds/{terminal_refund_id}"
            .replace("{" + "terminal_refund_id" + "}", localVarApiClient.escapeString(terminalRefundId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTerminalRefundValidateBeforeCall(String terminalRefundId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminalRefundId' is set
        if (terminalRefundId == null) {
            throw new ApiException("Missing the required parameter 'terminalRefundId' when calling getTerminalRefund(Async)");
        }

        return getTerminalRefundCall(terminalRefundId, _callback);

    }

    /**
     * GetTerminalRefund
     * Retrieves an Interac Terminal refund object by ID.
     * @param terminalRefundId The unique ID for the desired &#x60;TerminalRefund&#x60;. (required)
     * @return GetTerminalRefundResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetTerminalRefundResponse getTerminalRefund(String terminalRefundId) throws ApiException {
        ApiResponse<GetTerminalRefundResponse> localVarResp = getTerminalRefundWithHttpInfo(terminalRefundId);
        return localVarResp.getData();
    }

    /**
     * GetTerminalRefund
     * Retrieves an Interac Terminal refund object by ID.
     * @param terminalRefundId The unique ID for the desired &#x60;TerminalRefund&#x60;. (required)
     * @return ApiResponse&lt;GetTerminalRefundResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTerminalRefundResponse> getTerminalRefundWithHttpInfo(String terminalRefundId) throws ApiException {
        okhttp3.Call localVarCall = getTerminalRefundValidateBeforeCall(terminalRefundId, null);
        Type localVarReturnType = new TypeToken<GetTerminalRefundResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetTerminalRefund (asynchronously)
     * Retrieves an Interac Terminal refund object by ID.
     * @param terminalRefundId The unique ID for the desired &#x60;TerminalRefund&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTerminalRefundAsync(String terminalRefundId, final ApiCallback<GetTerminalRefundResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTerminalRefundValidateBeforeCall(terminalRefundId, _callback);
        Type localVarReturnType = new TypeToken<GetTerminalRefundResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchTerminalCheckouts
     * @param searchTerminalCheckoutsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchTerminalCheckoutsCall(SearchTerminalCheckoutsRequest searchTerminalCheckoutsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchTerminalCheckoutsRequest;

        // create path and map variables
        String localVarPath = "/v2/terminals/checkouts/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchTerminalCheckoutsValidateBeforeCall(SearchTerminalCheckoutsRequest searchTerminalCheckoutsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchTerminalCheckoutsRequest' is set
        if (searchTerminalCheckoutsRequest == null) {
            throw new ApiException("Missing the required parameter 'searchTerminalCheckoutsRequest' when calling searchTerminalCheckouts(Async)");
        }

        return searchTerminalCheckoutsCall(searchTerminalCheckoutsRequest, _callback);

    }

    /**
     * SearchTerminalCheckouts
     * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
     * @param searchTerminalCheckoutsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return SearchTerminalCheckoutsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SearchTerminalCheckoutsResponse searchTerminalCheckouts(SearchTerminalCheckoutsRequest searchTerminalCheckoutsRequest) throws ApiException {
        ApiResponse<SearchTerminalCheckoutsResponse> localVarResp = searchTerminalCheckoutsWithHttpInfo(searchTerminalCheckoutsRequest);
        return localVarResp.getData();
    }

    /**
     * SearchTerminalCheckouts
     * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
     * @param searchTerminalCheckoutsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;SearchTerminalCheckoutsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchTerminalCheckoutsResponse> searchTerminalCheckoutsWithHttpInfo(SearchTerminalCheckoutsRequest searchTerminalCheckoutsRequest) throws ApiException {
        okhttp3.Call localVarCall = searchTerminalCheckoutsValidateBeforeCall(searchTerminalCheckoutsRequest, null);
        Type localVarReturnType = new TypeToken<SearchTerminalCheckoutsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SearchTerminalCheckouts (asynchronously)
     * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
     * @param searchTerminalCheckoutsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchTerminalCheckoutsAsync(SearchTerminalCheckoutsRequest searchTerminalCheckoutsRequest, final ApiCallback<SearchTerminalCheckoutsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchTerminalCheckoutsValidateBeforeCall(searchTerminalCheckoutsRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchTerminalCheckoutsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchTerminalRefunds
     * @param searchTerminalRefundsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchTerminalRefundsCall(SearchTerminalRefundsRequest searchTerminalRefundsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchTerminalRefundsRequest;

        // create path and map variables
        String localVarPath = "/v2/terminals/refunds/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchTerminalRefundsValidateBeforeCall(SearchTerminalRefundsRequest searchTerminalRefundsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchTerminalRefundsRequest' is set
        if (searchTerminalRefundsRequest == null) {
            throw new ApiException("Missing the required parameter 'searchTerminalRefundsRequest' when calling searchTerminalRefunds(Async)");
        }

        return searchTerminalRefundsCall(searchTerminalRefundsRequest, _callback);

    }

    /**
     * SearchTerminalRefunds
     * Retrieves a filtered list of Interac Terminal refund requests created by the seller making the request.
     * @param searchTerminalRefundsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return SearchTerminalRefundsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SearchTerminalRefundsResponse searchTerminalRefunds(SearchTerminalRefundsRequest searchTerminalRefundsRequest) throws ApiException {
        ApiResponse<SearchTerminalRefundsResponse> localVarResp = searchTerminalRefundsWithHttpInfo(searchTerminalRefundsRequest);
        return localVarResp.getData();
    }

    /**
     * SearchTerminalRefunds
     * Retrieves a filtered list of Interac Terminal refund requests created by the seller making the request.
     * @param searchTerminalRefundsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;SearchTerminalRefundsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchTerminalRefundsResponse> searchTerminalRefundsWithHttpInfo(SearchTerminalRefundsRequest searchTerminalRefundsRequest) throws ApiException {
        okhttp3.Call localVarCall = searchTerminalRefundsValidateBeforeCall(searchTerminalRefundsRequest, null);
        Type localVarReturnType = new TypeToken<SearchTerminalRefundsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SearchTerminalRefunds (asynchronously)
     * Retrieves a filtered list of Interac Terminal refund requests created by the seller making the request.
     * @param searchTerminalRefundsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchTerminalRefundsAsync(SearchTerminalRefundsRequest searchTerminalRefundsRequest, final ApiCallback<SearchTerminalRefundsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchTerminalRefundsValidateBeforeCall(searchTerminalRefundsRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchTerminalRefundsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
