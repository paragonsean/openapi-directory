/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Range;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Supported custom attribute query expressions for calling the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint to search for items or item variations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomAttributeFilter {
  public static final String SERIALIZED_NAME_BOOL_FILTER = "bool_filter";
  @SerializedName(SERIALIZED_NAME_BOOL_FILTER)
  private Boolean boolFilter;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTE_DEFINITION_ID = "custom_attribute_definition_id";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTE_DEFINITION_ID)
  private String customAttributeDefinitionId;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_NUMBER_FILTER = "number_filter";
  @SerializedName(SERIALIZED_NAME_NUMBER_FILTER)
  private Range numberFilter;

  public static final String SERIALIZED_NAME_SELECTION_UIDS_FILTER = "selection_uids_filter";
  @SerializedName(SERIALIZED_NAME_SELECTION_UIDS_FILTER)
  private List<String> selectionUidsFilter = new ArrayList<>();

  public static final String SERIALIZED_NAME_STRING_FILTER = "string_filter";
  @SerializedName(SERIALIZED_NAME_STRING_FILTER)
  private String stringFilter;

  public CustomAttributeFilter() {
  }

  public CustomAttributeFilter boolFilter(Boolean boolFilter) {
    this.boolFilter = boolFilter;
    return this;
  }

  /**
   * A query expression to filter items or item variations by matching their custom attributes&#39; &#x60;boolean_value&#x60; property values against the specified Boolean expression.
   * @return boolFilter
   */
  @javax.annotation.Nullable
  public Boolean getBoolFilter() {
    return boolFilter;
  }

  public void setBoolFilter(Boolean boolFilter) {
    this.boolFilter = boolFilter;
  }


  public CustomAttributeFilter customAttributeDefinitionId(String customAttributeDefinitionId) {
    this.customAttributeDefinitionId = customAttributeDefinitionId;
    return this;
  }

  /**
   * A query expression to filter items or item variations by matching their custom attributes&#39; &#x60;custom_attribute_definition_id&#x60; property value against the the specified id.
   * @return customAttributeDefinitionId
   */
  @javax.annotation.Nullable
  public String getCustomAttributeDefinitionId() {
    return customAttributeDefinitionId;
  }

  public void setCustomAttributeDefinitionId(String customAttributeDefinitionId) {
    this.customAttributeDefinitionId = customAttributeDefinitionId;
  }


  public CustomAttributeFilter key(String key) {
    this.key = key;
    return this;
  }

  /**
   * A query expression to filter items or item variations by matching their custom attributes&#39; &#x60;key&#x60; property value against the specified key.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public CustomAttributeFilter numberFilter(Range numberFilter) {
    this.numberFilter = numberFilter;
    return this;
  }

  /**
   * Get numberFilter
   * @return numberFilter
   */
  @javax.annotation.Nullable
  public Range getNumberFilter() {
    return numberFilter;
  }

  public void setNumberFilter(Range numberFilter) {
    this.numberFilter = numberFilter;
  }


  public CustomAttributeFilter selectionUidsFilter(List<String> selectionUidsFilter) {
    this.selectionUidsFilter = selectionUidsFilter;
    return this;
  }

  public CustomAttributeFilter addSelectionUidsFilterItem(String selectionUidsFilterItem) {
    if (this.selectionUidsFilter == null) {
      this.selectionUidsFilter = new ArrayList<>();
    }
    this.selectionUidsFilter.add(selectionUidsFilterItem);
    return this;
  }

  /**
   * A query expression to filter items or item variations by matching  their custom attributes&#39; &#x60;selection_uid_values&#x60; values against the specified selection uids.
   * @return selectionUidsFilter
   */
  @javax.annotation.Nullable
  public List<String> getSelectionUidsFilter() {
    return selectionUidsFilter;
  }

  public void setSelectionUidsFilter(List<String> selectionUidsFilter) {
    this.selectionUidsFilter = selectionUidsFilter;
  }


  public CustomAttributeFilter stringFilter(String stringFilter) {
    this.stringFilter = stringFilter;
    return this;
  }

  /**
   * A query expression to filter items or item variations by matching their custom attributes&#39; &#x60;string_value&#x60;  property value against the specified text.
   * @return stringFilter
   */
  @javax.annotation.Nullable
  public String getStringFilter() {
    return stringFilter;
  }

  public void setStringFilter(String stringFilter) {
    this.stringFilter = stringFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomAttributeFilter customAttributeFilter = (CustomAttributeFilter) o;
    return Objects.equals(this.boolFilter, customAttributeFilter.boolFilter) &&
        Objects.equals(this.customAttributeDefinitionId, customAttributeFilter.customAttributeDefinitionId) &&
        Objects.equals(this.key, customAttributeFilter.key) &&
        Objects.equals(this.numberFilter, customAttributeFilter.numberFilter) &&
        Objects.equals(this.selectionUidsFilter, customAttributeFilter.selectionUidsFilter) &&
        Objects.equals(this.stringFilter, customAttributeFilter.stringFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boolFilter, customAttributeDefinitionId, key, numberFilter, selectionUidsFilter, stringFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomAttributeFilter {\n");
    sb.append("    boolFilter: ").append(toIndentedString(boolFilter)).append("\n");
    sb.append("    customAttributeDefinitionId: ").append(toIndentedString(customAttributeDefinitionId)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    numberFilter: ").append(toIndentedString(numberFilter)).append("\n");
    sb.append("    selectionUidsFilter: ").append(toIndentedString(selectionUidsFilter)).append("\n");
    sb.append("    stringFilter: ").append(toIndentedString(stringFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bool_filter");
    openapiFields.add("custom_attribute_definition_id");
    openapiFields.add("key");
    openapiFields.add("number_filter");
    openapiFields.add("selection_uids_filter");
    openapiFields.add("string_filter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomAttributeFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomAttributeFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomAttributeFilter is not found in the empty JSON string", CustomAttributeFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomAttributeFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomAttributeFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("custom_attribute_definition_id") != null && !jsonObj.get("custom_attribute_definition_id").isJsonNull()) && !jsonObj.get("custom_attribute_definition_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_attribute_definition_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_attribute_definition_id").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      // validate the optional field `number_filter`
      if (jsonObj.get("number_filter") != null && !jsonObj.get("number_filter").isJsonNull()) {
        Range.validateJsonElement(jsonObj.get("number_filter"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("selection_uids_filter") != null && !jsonObj.get("selection_uids_filter").isJsonNull() && !jsonObj.get("selection_uids_filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `selection_uids_filter` to be an array in the JSON string but got `%s`", jsonObj.get("selection_uids_filter").toString()));
      }
      if ((jsonObj.get("string_filter") != null && !jsonObj.get("string_filter").isJsonNull()) && !jsonObj.get("string_filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `string_filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("string_filter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomAttributeFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomAttributeFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomAttributeFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomAttributeFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomAttributeFilter>() {
           @Override
           public void write(JsonWriter out, CustomAttributeFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomAttributeFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomAttributeFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomAttributeFilter
   * @throws IOException if the JSON string is invalid with respect to CustomAttributeFilter
   */
  public static CustomAttributeFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomAttributeFilter.class);
  }

  /**
   * Convert an instance of CustomAttributeFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

