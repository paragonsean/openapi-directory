/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SourceApplication;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the quantity of an item variation that is physically present at a specific location, verified by a seller or a seller&#39;s employee. For example, a physical count might come from an employee counting the item variations on hand or from syncing with an external system.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InventoryPhysicalCount {
  public static final String SERIALIZED_NAME_CATALOG_OBJECT_ID = "catalog_object_id";
  @SerializedName(SERIALIZED_NAME_CATALOG_OBJECT_ID)
  private String catalogObjectId;

  public static final String SERIALIZED_NAME_CATALOG_OBJECT_TYPE = "catalog_object_type";
  @SerializedName(SERIALIZED_NAME_CATALOG_OBJECT_TYPE)
  private String catalogObjectType;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employee_id";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_OCCURRED_AT = "occurred_at";
  @SerializedName(SERIALIZED_NAME_OCCURRED_AT)
  private String occurredAt;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private String quantity;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "reference_id";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private SourceApplication source;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public InventoryPhysicalCount() {
  }

  public InventoryPhysicalCount catalogObjectId(String catalogObjectId) {
    this.catalogObjectId = catalogObjectId;
    return this;
  }

  /**
   * The Square-generated ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
   * @return catalogObjectId
   */
  @javax.annotation.Nullable
  public String getCatalogObjectId() {
    return catalogObjectId;
  }

  public void setCatalogObjectId(String catalogObjectId) {
    this.catalogObjectId = catalogObjectId;
  }


  public InventoryPhysicalCount catalogObjectType(String catalogObjectType) {
    this.catalogObjectType = catalogObjectType;
    return this;
  }

  /**
   * The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only supported for the &#x60;ITEM_VARIATION&#x60; type.
   * @return catalogObjectType
   */
  @javax.annotation.Nullable
  public String getCatalogObjectType() {
    return catalogObjectType;
  }

  public void setCatalogObjectType(String catalogObjectType) {
    this.catalogObjectType = catalogObjectType;
  }


  public InventoryPhysicalCount createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * An RFC 3339-formatted timestamp that indicates when the physical count is received.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public InventoryPhysicalCount employeeId(String employeeId) {
    this.employeeId = employeeId;
    return this;
  }

  /**
   * The Square-generated ID of the [Employee](https://developer.squareup.com/reference/square_2021-08-18/objects/Employee) responsible for the physical count.
   * @return employeeId
   */
  @javax.annotation.Nullable
  public String getEmployeeId() {
    return employeeId;
  }

  public void setEmployeeId(String employeeId) {
    this.employeeId = employeeId;
  }


  public InventoryPhysicalCount id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique Square-generated ID for the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount).
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public InventoryPhysicalCount locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related quantity of items is being tracked.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public InventoryPhysicalCount occurredAt(String occurredAt) {
    this.occurredAt = occurredAt;
    return this;
  }

  /**
   * A client-generated RFC 3339-formatted timestamp that indicates when the physical count was examined. For physical count updates, the &#x60;occurred_at&#x60; timestamp cannot be older than 24 hours or in the future relative to the time of the request.
   * @return occurredAt
   */
  @javax.annotation.Nullable
  public String getOccurredAt() {
    return occurredAt;
  }

  public void setOccurredAt(String occurredAt) {
    this.occurredAt = occurredAt;
  }


  public InventoryPhysicalCount quantity(String quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The number of items affected by the physical count as a decimal string. The number can support up to 5 digits after the decimal point.
   * @return quantity
   */
  @javax.annotation.Nullable
  public String getQuantity() {
    return quantity;
  }

  public void setQuantity(String quantity) {
    this.quantity = quantity;
  }


  public InventoryPhysicalCount referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * An optional ID provided by the application to tie the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to an external system.
   * @return referenceId
   */
  @javax.annotation.Nullable
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public InventoryPhysicalCount source(SourceApplication source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public SourceApplication getSource() {
    return source;
  }

  public void setSource(SourceApplication source) {
    this.source = source;
  }


  public InventoryPhysicalCount state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The current [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the related quantity of items.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventoryPhysicalCount inventoryPhysicalCount = (InventoryPhysicalCount) o;
    return Objects.equals(this.catalogObjectId, inventoryPhysicalCount.catalogObjectId) &&
        Objects.equals(this.catalogObjectType, inventoryPhysicalCount.catalogObjectType) &&
        Objects.equals(this.createdAt, inventoryPhysicalCount.createdAt) &&
        Objects.equals(this.employeeId, inventoryPhysicalCount.employeeId) &&
        Objects.equals(this.id, inventoryPhysicalCount.id) &&
        Objects.equals(this.locationId, inventoryPhysicalCount.locationId) &&
        Objects.equals(this.occurredAt, inventoryPhysicalCount.occurredAt) &&
        Objects.equals(this.quantity, inventoryPhysicalCount.quantity) &&
        Objects.equals(this.referenceId, inventoryPhysicalCount.referenceId) &&
        Objects.equals(this.source, inventoryPhysicalCount.source) &&
        Objects.equals(this.state, inventoryPhysicalCount.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalogObjectId, catalogObjectType, createdAt, employeeId, id, locationId, occurredAt, quantity, referenceId, source, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventoryPhysicalCount {\n");
    sb.append("    catalogObjectId: ").append(toIndentedString(catalogObjectId)).append("\n");
    sb.append("    catalogObjectType: ").append(toIndentedString(catalogObjectType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    occurredAt: ").append(toIndentedString(occurredAt)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("catalog_object_id");
    openapiFields.add("catalog_object_type");
    openapiFields.add("created_at");
    openapiFields.add("employee_id");
    openapiFields.add("id");
    openapiFields.add("location_id");
    openapiFields.add("occurred_at");
    openapiFields.add("quantity");
    openapiFields.add("reference_id");
    openapiFields.add("source");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InventoryPhysicalCount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InventoryPhysicalCount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InventoryPhysicalCount is not found in the empty JSON string", InventoryPhysicalCount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InventoryPhysicalCount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InventoryPhysicalCount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("catalog_object_id") != null && !jsonObj.get("catalog_object_id").isJsonNull()) && !jsonObj.get("catalog_object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalog_object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalog_object_id").toString()));
      }
      if ((jsonObj.get("catalog_object_type") != null && !jsonObj.get("catalog_object_type").isJsonNull()) && !jsonObj.get("catalog_object_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalog_object_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalog_object_type").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("employee_id") != null && !jsonObj.get("employee_id").isJsonNull()) && !jsonObj.get("employee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_id").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("location_id") != null && !jsonObj.get("location_id").isJsonNull()) && !jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      if ((jsonObj.get("occurred_at") != null && !jsonObj.get("occurred_at").isJsonNull()) && !jsonObj.get("occurred_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occurred_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occurred_at").toString()));
      }
      if ((jsonObj.get("quantity") != null && !jsonObj.get("quantity").isJsonNull()) && !jsonObj.get("quantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantity").toString()));
      }
      if ((jsonObj.get("reference_id") != null && !jsonObj.get("reference_id").isJsonNull()) && !jsonObj.get("reference_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference_id").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        SourceApplication.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InventoryPhysicalCount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InventoryPhysicalCount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InventoryPhysicalCount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InventoryPhysicalCount.class));

       return (TypeAdapter<T>) new TypeAdapter<InventoryPhysicalCount>() {
           @Override
           public void write(JsonWriter out, InventoryPhysicalCount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InventoryPhysicalCount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InventoryPhysicalCount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InventoryPhysicalCount
   * @throws IOException if the JSON string is invalid with respect to InventoryPhysicalCount
   */
  public static InventoryPhysicalCount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InventoryPhysicalCount.class);
  }

  /**
   * Convert an instance of InventoryPhysicalCount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

