/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The tax IDs that a Location is operating under.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaxIds {
  public static final String SERIALIZED_NAME_EU_VAT = "eu_vat";
  @SerializedName(SERIALIZED_NAME_EU_VAT)
  private String euVat;

  public static final String SERIALIZED_NAME_FR_NAF = "fr_naf";
  @SerializedName(SERIALIZED_NAME_FR_NAF)
  private String frNaf;

  public static final String SERIALIZED_NAME_FR_SIRET = "fr_siret";
  @SerializedName(SERIALIZED_NAME_FR_SIRET)
  private String frSiret;

  public TaxIds() {
  }

  public TaxIds euVat(String euVat) {
    this.euVat = euVat;
    return this;
  }

  /**
   * The EU VAT number for this location. For example, \&quot;IE3426675K\&quot;. If the EU VAT number is present, it is well-formed and has been validated with VIES, the VAT Information Exchange System.
   * @return euVat
   */
  @javax.annotation.Nullable
  public String getEuVat() {
    return euVat;
  }

  public void setEuVat(String euVat) {
    this.euVat = euVat;
  }


  public TaxIds frNaf(String frNaf) {
    this.frNaf = frNaf;
    return this;
  }

  /**
   * The French government uses the NAF (Nomenclature des Activités Françaises) to display and track economic statistical data. This is also called the APE (Activite Principale de l’Entreprise) code. For example, 6910Z.
   * @return frNaf
   */
  @javax.annotation.Nullable
  public String getFrNaf() {
    return frNaf;
  }

  public void setFrNaf(String frNaf) {
    this.frNaf = frNaf;
  }


  public TaxIds frSiret(String frSiret) {
    this.frSiret = frSiret;
    return this;
  }

  /**
   * The SIRET (Système d&#39;Identification du Répertoire des Entreprises et de leurs Etablissements) number is a 14 digits code issued by the French INSEE. For example, \&quot;39922799000021\&quot;.
   * @return frSiret
   */
  @javax.annotation.Nullable
  public String getFrSiret() {
    return frSiret;
  }

  public void setFrSiret(String frSiret) {
    this.frSiret = frSiret;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxIds taxIds = (TaxIds) o;
    return Objects.equals(this.euVat, taxIds.euVat) &&
        Objects.equals(this.frNaf, taxIds.frNaf) &&
        Objects.equals(this.frSiret, taxIds.frSiret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(euVat, frNaf, frSiret);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxIds {\n");
    sb.append("    euVat: ").append(toIndentedString(euVat)).append("\n");
    sb.append("    frNaf: ").append(toIndentedString(frNaf)).append("\n");
    sb.append("    frSiret: ").append(toIndentedString(frSiret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eu_vat");
    openapiFields.add("fr_naf");
    openapiFields.add("fr_siret");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaxIds
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaxIds.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxIds is not found in the empty JSON string", TaxIds.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaxIds.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxIds` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eu_vat") != null && !jsonObj.get("eu_vat").isJsonNull()) && !jsonObj.get("eu_vat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eu_vat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eu_vat").toString()));
      }
      if ((jsonObj.get("fr_naf") != null && !jsonObj.get("fr_naf").isJsonNull()) && !jsonObj.get("fr_naf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fr_naf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fr_naf").toString()));
      }
      if ((jsonObj.get("fr_siret") != null && !jsonObj.get("fr_siret").isJsonNull()) && !jsonObj.get("fr_siret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fr_siret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fr_siret").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxIds.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxIds' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxIds> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxIds.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxIds>() {
           @Override
           public void write(JsonWriter out, TaxIds value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxIds read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaxIds given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaxIds
   * @throws IOException if the JSON string is invalid with respect to TaxIds
   */
  public static TaxIds fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxIds.class);
  }

  /**
   * Convert an instance of TaxIds to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

