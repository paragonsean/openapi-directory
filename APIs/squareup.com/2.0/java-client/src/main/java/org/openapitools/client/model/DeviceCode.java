/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceCode {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DEVICE_ID = "device_id";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAIR_BY = "pair_by";
  @SerializedName(SERIALIZED_NAME_PAIR_BY)
  private String pairBy;

  public static final String SERIALIZED_NAME_PAIRED_AT = "paired_at";
  @SerializedName(SERIALIZED_NAME_PAIRED_AT)
  private String pairedAt;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "product_type";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private String productType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STATUS_CHANGED_AT = "status_changed_at";
  @SerializedName(SERIALIZED_NAME_STATUS_CHANGED_AT)
  private String statusChangedAt;

  public DeviceCode() {
  }

  public DeviceCode code(String code) {
    this.code = code;
    return this;
  }

  /**
   * The unique code that can be used to login.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public DeviceCode createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When this DeviceCode was created. Timestamp in RFC 3339 format.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public DeviceCode deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * The unique id of the device that used this code. Populated when the device is paired up.
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public DeviceCode id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique id for this device code.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DeviceCode locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The location assigned to this code.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public DeviceCode name(String name) {
    this.name = name;
    return this;
  }

  /**
   * An optional user-defined name for the device code.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DeviceCode pairBy(String pairBy) {
    this.pairBy = pairBy;
    return this;
  }

  /**
   * When this DeviceCode will expire and no longer login. Timestamp in RFC 3339 format.
   * @return pairBy
   */
  @javax.annotation.Nullable
  public String getPairBy() {
    return pairBy;
  }

  public void setPairBy(String pairBy) {
    this.pairBy = pairBy;
  }


  public DeviceCode pairedAt(String pairedAt) {
    this.pairedAt = pairedAt;
    return this;
  }

  /**
   * When this DeviceCode was paired. Timestamp in RFC 3339 format.
   * @return pairedAt
   */
  @javax.annotation.Nullable
  public String getPairedAt() {
    return pairedAt;
  }

  public void setPairedAt(String pairedAt) {
    this.pairedAt = pairedAt;
  }


  public DeviceCode productType(String productType) {
    this.productType = productType;
    return this;
  }

  /**
   * The targeting product type of the device code.
   * @return productType
   */
  @javax.annotation.Nonnull
  public String getProductType() {
    return productType;
  }

  public void setProductType(String productType) {
    this.productType = productType;
  }


  public DeviceCode status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The pairing status of the device code.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public DeviceCode statusChangedAt(String statusChangedAt) {
    this.statusChangedAt = statusChangedAt;
    return this;
  }

  /**
   * When this DeviceCode&#39;s status was last changed. Timestamp in RFC 3339 format.
   * @return statusChangedAt
   */
  @javax.annotation.Nullable
  public String getStatusChangedAt() {
    return statusChangedAt;
  }

  public void setStatusChangedAt(String statusChangedAt) {
    this.statusChangedAt = statusChangedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceCode deviceCode = (DeviceCode) o;
    return Objects.equals(this.code, deviceCode.code) &&
        Objects.equals(this.createdAt, deviceCode.createdAt) &&
        Objects.equals(this.deviceId, deviceCode.deviceId) &&
        Objects.equals(this.id, deviceCode.id) &&
        Objects.equals(this.locationId, deviceCode.locationId) &&
        Objects.equals(this.name, deviceCode.name) &&
        Objects.equals(this.pairBy, deviceCode.pairBy) &&
        Objects.equals(this.pairedAt, deviceCode.pairedAt) &&
        Objects.equals(this.productType, deviceCode.productType) &&
        Objects.equals(this.status, deviceCode.status) &&
        Objects.equals(this.statusChangedAt, deviceCode.statusChangedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, createdAt, deviceId, id, locationId, name, pairBy, pairedAt, productType, status, statusChangedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceCode {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pairBy: ").append(toIndentedString(pairBy)).append("\n");
    sb.append("    pairedAt: ").append(toIndentedString(pairedAt)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusChangedAt: ").append(toIndentedString(statusChangedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("created_at");
    openapiFields.add("device_id");
    openapiFields.add("id");
    openapiFields.add("location_id");
    openapiFields.add("name");
    openapiFields.add("pair_by");
    openapiFields.add("paired_at");
    openapiFields.add("product_type");
    openapiFields.add("status");
    openapiFields.add("status_changed_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("product_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceCode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceCode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceCode is not found in the empty JSON string", DeviceCode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceCode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceCode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeviceCode.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("device_id") != null && !jsonObj.get("device_id").isJsonNull()) && !jsonObj.get("device_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_id").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("location_id") != null && !jsonObj.get("location_id").isJsonNull()) && !jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pair_by") != null && !jsonObj.get("pair_by").isJsonNull()) && !jsonObj.get("pair_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pair_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pair_by").toString()));
      }
      if ((jsonObj.get("paired_at") != null && !jsonObj.get("paired_at").isJsonNull()) && !jsonObj.get("paired_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paired_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paired_at").toString()));
      }
      if (!jsonObj.get("product_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_type").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("status_changed_at") != null && !jsonObj.get("status_changed_at").isJsonNull()) && !jsonObj.get("status_changed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_changed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_changed_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceCode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceCode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceCode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceCode.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceCode>() {
           @Override
           public void write(JsonWriter out, DeviceCode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceCode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceCode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceCode
   * @throws IOException if the JSON string is invalid with respect to DeviceCode
   */
  public static DeviceCode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceCode.class);
  }

  /**
   * Convert an instance of DeviceCode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

