/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SearchOrdersCustomerFilter;
import org.openapitools.client.model.SearchOrdersDateTimeFilter;
import org.openapitools.client.model.SearchOrdersFulfillmentFilter;
import org.openapitools.client.model.SearchOrdersSourceFilter;
import org.openapitools.client.model.SearchOrdersStateFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Filtering criteria to use for a &#x60;SearchOrders&#x60; request. Multiple filters are ANDed together.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchOrdersFilter {
  public static final String SERIALIZED_NAME_CUSTOMER_FILTER = "customer_filter";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_FILTER)
  private SearchOrdersCustomerFilter customerFilter;

  public static final String SERIALIZED_NAME_DATE_TIME_FILTER = "date_time_filter";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_FILTER)
  private SearchOrdersDateTimeFilter dateTimeFilter;

  public static final String SERIALIZED_NAME_FULFILLMENT_FILTER = "fulfillment_filter";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_FILTER)
  private SearchOrdersFulfillmentFilter fulfillmentFilter;

  public static final String SERIALIZED_NAME_SOURCE_FILTER = "source_filter";
  @SerializedName(SERIALIZED_NAME_SOURCE_FILTER)
  private SearchOrdersSourceFilter sourceFilter;

  public static final String SERIALIZED_NAME_STATE_FILTER = "state_filter";
  @SerializedName(SERIALIZED_NAME_STATE_FILTER)
  private SearchOrdersStateFilter stateFilter;

  public SearchOrdersFilter() {
  }

  public SearchOrdersFilter customerFilter(SearchOrdersCustomerFilter customerFilter) {
    this.customerFilter = customerFilter;
    return this;
  }

  /**
   * Get customerFilter
   * @return customerFilter
   */
  @javax.annotation.Nullable
  public SearchOrdersCustomerFilter getCustomerFilter() {
    return customerFilter;
  }

  public void setCustomerFilter(SearchOrdersCustomerFilter customerFilter) {
    this.customerFilter = customerFilter;
  }


  public SearchOrdersFilter dateTimeFilter(SearchOrdersDateTimeFilter dateTimeFilter) {
    this.dateTimeFilter = dateTimeFilter;
    return this;
  }

  /**
   * Get dateTimeFilter
   * @return dateTimeFilter
   */
  @javax.annotation.Nullable
  public SearchOrdersDateTimeFilter getDateTimeFilter() {
    return dateTimeFilter;
  }

  public void setDateTimeFilter(SearchOrdersDateTimeFilter dateTimeFilter) {
    this.dateTimeFilter = dateTimeFilter;
  }


  public SearchOrdersFilter fulfillmentFilter(SearchOrdersFulfillmentFilter fulfillmentFilter) {
    this.fulfillmentFilter = fulfillmentFilter;
    return this;
  }

  /**
   * Get fulfillmentFilter
   * @return fulfillmentFilter
   */
  @javax.annotation.Nullable
  public SearchOrdersFulfillmentFilter getFulfillmentFilter() {
    return fulfillmentFilter;
  }

  public void setFulfillmentFilter(SearchOrdersFulfillmentFilter fulfillmentFilter) {
    this.fulfillmentFilter = fulfillmentFilter;
  }


  public SearchOrdersFilter sourceFilter(SearchOrdersSourceFilter sourceFilter) {
    this.sourceFilter = sourceFilter;
    return this;
  }

  /**
   * Get sourceFilter
   * @return sourceFilter
   */
  @javax.annotation.Nullable
  public SearchOrdersSourceFilter getSourceFilter() {
    return sourceFilter;
  }

  public void setSourceFilter(SearchOrdersSourceFilter sourceFilter) {
    this.sourceFilter = sourceFilter;
  }


  public SearchOrdersFilter stateFilter(SearchOrdersStateFilter stateFilter) {
    this.stateFilter = stateFilter;
    return this;
  }

  /**
   * Get stateFilter
   * @return stateFilter
   */
  @javax.annotation.Nullable
  public SearchOrdersStateFilter getStateFilter() {
    return stateFilter;
  }

  public void setStateFilter(SearchOrdersStateFilter stateFilter) {
    this.stateFilter = stateFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchOrdersFilter searchOrdersFilter = (SearchOrdersFilter) o;
    return Objects.equals(this.customerFilter, searchOrdersFilter.customerFilter) &&
        Objects.equals(this.dateTimeFilter, searchOrdersFilter.dateTimeFilter) &&
        Objects.equals(this.fulfillmentFilter, searchOrdersFilter.fulfillmentFilter) &&
        Objects.equals(this.sourceFilter, searchOrdersFilter.sourceFilter) &&
        Objects.equals(this.stateFilter, searchOrdersFilter.stateFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerFilter, dateTimeFilter, fulfillmentFilter, sourceFilter, stateFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchOrdersFilter {\n");
    sb.append("    customerFilter: ").append(toIndentedString(customerFilter)).append("\n");
    sb.append("    dateTimeFilter: ").append(toIndentedString(dateTimeFilter)).append("\n");
    sb.append("    fulfillmentFilter: ").append(toIndentedString(fulfillmentFilter)).append("\n");
    sb.append("    sourceFilter: ").append(toIndentedString(sourceFilter)).append("\n");
    sb.append("    stateFilter: ").append(toIndentedString(stateFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customer_filter");
    openapiFields.add("date_time_filter");
    openapiFields.add("fulfillment_filter");
    openapiFields.add("source_filter");
    openapiFields.add("state_filter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchOrdersFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchOrdersFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchOrdersFilter is not found in the empty JSON string", SearchOrdersFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchOrdersFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchOrdersFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `customer_filter`
      if (jsonObj.get("customer_filter") != null && !jsonObj.get("customer_filter").isJsonNull()) {
        SearchOrdersCustomerFilter.validateJsonElement(jsonObj.get("customer_filter"));
      }
      // validate the optional field `date_time_filter`
      if (jsonObj.get("date_time_filter") != null && !jsonObj.get("date_time_filter").isJsonNull()) {
        SearchOrdersDateTimeFilter.validateJsonElement(jsonObj.get("date_time_filter"));
      }
      // validate the optional field `fulfillment_filter`
      if (jsonObj.get("fulfillment_filter") != null && !jsonObj.get("fulfillment_filter").isJsonNull()) {
        SearchOrdersFulfillmentFilter.validateJsonElement(jsonObj.get("fulfillment_filter"));
      }
      // validate the optional field `source_filter`
      if (jsonObj.get("source_filter") != null && !jsonObj.get("source_filter").isJsonNull()) {
        SearchOrdersSourceFilter.validateJsonElement(jsonObj.get("source_filter"));
      }
      // validate the optional field `state_filter`
      if (jsonObj.get("state_filter") != null && !jsonObj.get("state_filter").isJsonNull()) {
        SearchOrdersStateFilter.validateJsonElement(jsonObj.get("state_filter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchOrdersFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchOrdersFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchOrdersFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchOrdersFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchOrdersFilter>() {
           @Override
           public void write(JsonWriter out, SearchOrdersFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchOrdersFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchOrdersFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchOrdersFilter
   * @throws IOException if the JSON string is invalid with respect to SearchOrdersFilter
   */
  public static SearchOrdersFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchOrdersFilter.class);
  }

  /**
   * Convert an instance of SearchOrdersFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

