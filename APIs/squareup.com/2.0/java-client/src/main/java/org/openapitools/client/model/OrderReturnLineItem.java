/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Money;
import org.openapitools.client.model.OrderLineItemAppliedDiscount;
import org.openapitools.client.model.OrderLineItemAppliedTax;
import org.openapitools.client.model.OrderQuantityUnit;
import org.openapitools.client.model.OrderReturnLineItemModifier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The line item being returned in an order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderReturnLineItem {
  public static final String SERIALIZED_NAME_APPLIED_DISCOUNTS = "applied_discounts";
  @SerializedName(SERIALIZED_NAME_APPLIED_DISCOUNTS)
  private List<OrderLineItemAppliedDiscount> appliedDiscounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPLIED_TAXES = "applied_taxes";
  @SerializedName(SERIALIZED_NAME_APPLIED_TAXES)
  private List<OrderLineItemAppliedTax> appliedTaxes = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASE_PRICE_MONEY = "base_price_money";
  @SerializedName(SERIALIZED_NAME_BASE_PRICE_MONEY)
  private Money basePriceMoney;

  public static final String SERIALIZED_NAME_CATALOG_OBJECT_ID = "catalog_object_id";
  @SerializedName(SERIALIZED_NAME_CATALOG_OBJECT_ID)
  private String catalogObjectId;

  public static final String SERIALIZED_NAME_CATALOG_VERSION = "catalog_version";
  @SerializedName(SERIALIZED_NAME_CATALOG_VERSION)
  private Long catalogVersion;

  public static final String SERIALIZED_NAME_GROSS_RETURN_MONEY = "gross_return_money";
  @SerializedName(SERIALIZED_NAME_GROSS_RETURN_MONEY)
  private Money grossReturnMoney;

  public static final String SERIALIZED_NAME_ITEM_TYPE = "item_type";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private String itemType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private String quantity;

  public static final String SERIALIZED_NAME_QUANTITY_UNIT = "quantity_unit";
  @SerializedName(SERIALIZED_NAME_QUANTITY_UNIT)
  private OrderQuantityUnit quantityUnit;

  public static final String SERIALIZED_NAME_RETURN_MODIFIERS = "return_modifiers";
  @SerializedName(SERIALIZED_NAME_RETURN_MODIFIERS)
  private List<OrderReturnLineItemModifier> returnModifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_LINE_ITEM_UID = "source_line_item_uid";
  @SerializedName(SERIALIZED_NAME_SOURCE_LINE_ITEM_UID)
  private String sourceLineItemUid;

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNT_MONEY = "total_discount_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNT_MONEY)
  private Money totalDiscountMoney;

  public static final String SERIALIZED_NAME_TOTAL_MONEY = "total_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_MONEY)
  private Money totalMoney;

  public static final String SERIALIZED_NAME_TOTAL_TAX_MONEY = "total_tax_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX_MONEY)
  private Money totalTaxMoney;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_VARIATION_NAME = "variation_name";
  @SerializedName(SERIALIZED_NAME_VARIATION_NAME)
  private String variationName;

  public static final String SERIALIZED_NAME_VARIATION_TOTAL_PRICE_MONEY = "variation_total_price_money";
  @SerializedName(SERIALIZED_NAME_VARIATION_TOTAL_PRICE_MONEY)
  private Money variationTotalPriceMoney;

  public OrderReturnLineItem() {
  }

  public OrderReturnLineItem appliedDiscounts(List<OrderLineItemAppliedDiscount> appliedDiscounts) {
    this.appliedDiscounts = appliedDiscounts;
    return this;
  }

  public OrderReturnLineItem addAppliedDiscountsItem(OrderLineItemAppliedDiscount appliedDiscountsItem) {
    if (this.appliedDiscounts == null) {
      this.appliedDiscounts = new ArrayList<>();
    }
    this.appliedDiscounts.add(appliedDiscountsItem);
    return this;
  }

  /**
   * The list of references to &#x60;OrderReturnDiscount&#x60; entities applied to the return line item. Each &#x60;OrderLineItemAppliedDiscount&#x60; has a &#x60;discount_uid&#x60; that references the &#x60;uid&#x60; of a top-level &#x60;OrderReturnDiscount&#x60; applied to the return line item. On reads, the applied amount is populated.
   * @return appliedDiscounts
   */
  @javax.annotation.Nullable
  public List<OrderLineItemAppliedDiscount> getAppliedDiscounts() {
    return appliedDiscounts;
  }

  public void setAppliedDiscounts(List<OrderLineItemAppliedDiscount> appliedDiscounts) {
    this.appliedDiscounts = appliedDiscounts;
  }


  public OrderReturnLineItem appliedTaxes(List<OrderLineItemAppliedTax> appliedTaxes) {
    this.appliedTaxes = appliedTaxes;
    return this;
  }

  public OrderReturnLineItem addAppliedTaxesItem(OrderLineItemAppliedTax appliedTaxesItem) {
    if (this.appliedTaxes == null) {
      this.appliedTaxes = new ArrayList<>();
    }
    this.appliedTaxes.add(appliedTaxesItem);
    return this;
  }

  /**
   * The list of references to &#x60;OrderReturnTax&#x60; entities applied to the return line item. Each &#x60;OrderLineItemAppliedTax&#x60; has a &#x60;tax_uid&#x60; that references the &#x60;uid&#x60; of a top-level &#x60;OrderReturnTax&#x60; applied to the return line item. On reads, the applied amount is populated.
   * @return appliedTaxes
   */
  @javax.annotation.Nullable
  public List<OrderLineItemAppliedTax> getAppliedTaxes() {
    return appliedTaxes;
  }

  public void setAppliedTaxes(List<OrderLineItemAppliedTax> appliedTaxes) {
    this.appliedTaxes = appliedTaxes;
  }


  public OrderReturnLineItem basePriceMoney(Money basePriceMoney) {
    this.basePriceMoney = basePriceMoney;
    return this;
  }

  /**
   * Get basePriceMoney
   * @return basePriceMoney
   */
  @javax.annotation.Nullable
  public Money getBasePriceMoney() {
    return basePriceMoney;
  }

  public void setBasePriceMoney(Money basePriceMoney) {
    this.basePriceMoney = basePriceMoney;
  }


  public OrderReturnLineItem catalogObjectId(String catalogObjectId) {
    this.catalogObjectId = catalogObjectId;
    return this;
  }

  /**
   * The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this return line item.
   * @return catalogObjectId
   */
  @javax.annotation.Nullable
  public String getCatalogObjectId() {
    return catalogObjectId;
  }

  public void setCatalogObjectId(String catalogObjectId) {
    this.catalogObjectId = catalogObjectId;
  }


  public OrderReturnLineItem catalogVersion(Long catalogVersion) {
    this.catalogVersion = catalogVersion;
    return this;
  }

  /**
   * The version of the catalog object that this line item references.
   * @return catalogVersion
   */
  @javax.annotation.Nullable
  public Long getCatalogVersion() {
    return catalogVersion;
  }

  public void setCatalogVersion(Long catalogVersion) {
    this.catalogVersion = catalogVersion;
  }


  public OrderReturnLineItem grossReturnMoney(Money grossReturnMoney) {
    this.grossReturnMoney = grossReturnMoney;
    return this;
  }

  /**
   * Get grossReturnMoney
   * @return grossReturnMoney
   */
  @javax.annotation.Nullable
  public Money getGrossReturnMoney() {
    return grossReturnMoney;
  }

  public void setGrossReturnMoney(Money grossReturnMoney) {
    this.grossReturnMoney = grossReturnMoney;
  }


  public OrderReturnLineItem itemType(String itemType) {
    this.itemType = itemType;
    return this;
  }

  /**
   * The type of line item: an itemized return, a non-itemized return (custom amount), or the return of an unactivated gift card sale.
   * @return itemType
   */
  @javax.annotation.Nullable
  public String getItemType() {
    return itemType;
  }

  public void setItemType(String itemType) {
    this.itemType = itemType;
  }


  public OrderReturnLineItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the line item.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OrderReturnLineItem note(String note) {
    this.note = note;
    return this;
  }

  /**
   * The note of the return line item.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public OrderReturnLineItem quantity(String quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The quantity returned, formatted as a decimal number. For example, &#x60;\&quot;3\&quot;&#x60;.  Line items with a &#x60;quantity_unit&#x60; can have non-integer quantities. For example, &#x60;\&quot;1.70000\&quot;&#x60;.
   * @return quantity
   */
  @javax.annotation.Nonnull
  public String getQuantity() {
    return quantity;
  }

  public void setQuantity(String quantity) {
    this.quantity = quantity;
  }


  public OrderReturnLineItem quantityUnit(OrderQuantityUnit quantityUnit) {
    this.quantityUnit = quantityUnit;
    return this;
  }

  /**
   * Get quantityUnit
   * @return quantityUnit
   */
  @javax.annotation.Nullable
  public OrderQuantityUnit getQuantityUnit() {
    return quantityUnit;
  }

  public void setQuantityUnit(OrderQuantityUnit quantityUnit) {
    this.quantityUnit = quantityUnit;
  }


  public OrderReturnLineItem returnModifiers(List<OrderReturnLineItemModifier> returnModifiers) {
    this.returnModifiers = returnModifiers;
    return this;
  }

  public OrderReturnLineItem addReturnModifiersItem(OrderReturnLineItemModifier returnModifiersItem) {
    if (this.returnModifiers == null) {
      this.returnModifiers = new ArrayList<>();
    }
    this.returnModifiers.add(returnModifiersItem);
    return this;
  }

  /**
   * The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item.
   * @return returnModifiers
   */
  @javax.annotation.Nullable
  public List<OrderReturnLineItemModifier> getReturnModifiers() {
    return returnModifiers;
  }

  public void setReturnModifiers(List<OrderReturnLineItemModifier> returnModifiers) {
    this.returnModifiers = returnModifiers;
  }


  public OrderReturnLineItem sourceLineItemUid(String sourceLineItemUid) {
    this.sourceLineItemUid = sourceLineItemUid;
    return this;
  }

  /**
   * The &#x60;uid&#x60; of the line item in the original sale order.
   * @return sourceLineItemUid
   */
  @javax.annotation.Nullable
  public String getSourceLineItemUid() {
    return sourceLineItemUid;
  }

  public void setSourceLineItemUid(String sourceLineItemUid) {
    this.sourceLineItemUid = sourceLineItemUid;
  }


  public OrderReturnLineItem totalDiscountMoney(Money totalDiscountMoney) {
    this.totalDiscountMoney = totalDiscountMoney;
    return this;
  }

  /**
   * Get totalDiscountMoney
   * @return totalDiscountMoney
   */
  @javax.annotation.Nullable
  public Money getTotalDiscountMoney() {
    return totalDiscountMoney;
  }

  public void setTotalDiscountMoney(Money totalDiscountMoney) {
    this.totalDiscountMoney = totalDiscountMoney;
  }


  public OrderReturnLineItem totalMoney(Money totalMoney) {
    this.totalMoney = totalMoney;
    return this;
  }

  /**
   * Get totalMoney
   * @return totalMoney
   */
  @javax.annotation.Nullable
  public Money getTotalMoney() {
    return totalMoney;
  }

  public void setTotalMoney(Money totalMoney) {
    this.totalMoney = totalMoney;
  }


  public OrderReturnLineItem totalTaxMoney(Money totalTaxMoney) {
    this.totalTaxMoney = totalTaxMoney;
    return this;
  }

  /**
   * Get totalTaxMoney
   * @return totalTaxMoney
   */
  @javax.annotation.Nullable
  public Money getTotalTaxMoney() {
    return totalTaxMoney;
  }

  public void setTotalTaxMoney(Money totalTaxMoney) {
    this.totalTaxMoney = totalTaxMoney;
  }


  public OrderReturnLineItem uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * A unique ID for this return line-item entry.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }


  public OrderReturnLineItem variationName(String variationName) {
    this.variationName = variationName;
    return this;
  }

  /**
   * The name of the variation applied to this return line item.
   * @return variationName
   */
  @javax.annotation.Nullable
  public String getVariationName() {
    return variationName;
  }

  public void setVariationName(String variationName) {
    this.variationName = variationName;
  }


  public OrderReturnLineItem variationTotalPriceMoney(Money variationTotalPriceMoney) {
    this.variationTotalPriceMoney = variationTotalPriceMoney;
    return this;
  }

  /**
   * Get variationTotalPriceMoney
   * @return variationTotalPriceMoney
   */
  @javax.annotation.Nullable
  public Money getVariationTotalPriceMoney() {
    return variationTotalPriceMoney;
  }

  public void setVariationTotalPriceMoney(Money variationTotalPriceMoney) {
    this.variationTotalPriceMoney = variationTotalPriceMoney;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderReturnLineItem orderReturnLineItem = (OrderReturnLineItem) o;
    return Objects.equals(this.appliedDiscounts, orderReturnLineItem.appliedDiscounts) &&
        Objects.equals(this.appliedTaxes, orderReturnLineItem.appliedTaxes) &&
        Objects.equals(this.basePriceMoney, orderReturnLineItem.basePriceMoney) &&
        Objects.equals(this.catalogObjectId, orderReturnLineItem.catalogObjectId) &&
        Objects.equals(this.catalogVersion, orderReturnLineItem.catalogVersion) &&
        Objects.equals(this.grossReturnMoney, orderReturnLineItem.grossReturnMoney) &&
        Objects.equals(this.itemType, orderReturnLineItem.itemType) &&
        Objects.equals(this.name, orderReturnLineItem.name) &&
        Objects.equals(this.note, orderReturnLineItem.note) &&
        Objects.equals(this.quantity, orderReturnLineItem.quantity) &&
        Objects.equals(this.quantityUnit, orderReturnLineItem.quantityUnit) &&
        Objects.equals(this.returnModifiers, orderReturnLineItem.returnModifiers) &&
        Objects.equals(this.sourceLineItemUid, orderReturnLineItem.sourceLineItemUid) &&
        Objects.equals(this.totalDiscountMoney, orderReturnLineItem.totalDiscountMoney) &&
        Objects.equals(this.totalMoney, orderReturnLineItem.totalMoney) &&
        Objects.equals(this.totalTaxMoney, orderReturnLineItem.totalTaxMoney) &&
        Objects.equals(this.uid, orderReturnLineItem.uid) &&
        Objects.equals(this.variationName, orderReturnLineItem.variationName) &&
        Objects.equals(this.variationTotalPriceMoney, orderReturnLineItem.variationTotalPriceMoney);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliedDiscounts, appliedTaxes, basePriceMoney, catalogObjectId, catalogVersion, grossReturnMoney, itemType, name, note, quantity, quantityUnit, returnModifiers, sourceLineItemUid, totalDiscountMoney, totalMoney, totalTaxMoney, uid, variationName, variationTotalPriceMoney);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderReturnLineItem {\n");
    sb.append("    appliedDiscounts: ").append(toIndentedString(appliedDiscounts)).append("\n");
    sb.append("    appliedTaxes: ").append(toIndentedString(appliedTaxes)).append("\n");
    sb.append("    basePriceMoney: ").append(toIndentedString(basePriceMoney)).append("\n");
    sb.append("    catalogObjectId: ").append(toIndentedString(catalogObjectId)).append("\n");
    sb.append("    catalogVersion: ").append(toIndentedString(catalogVersion)).append("\n");
    sb.append("    grossReturnMoney: ").append(toIndentedString(grossReturnMoney)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    quantityUnit: ").append(toIndentedString(quantityUnit)).append("\n");
    sb.append("    returnModifiers: ").append(toIndentedString(returnModifiers)).append("\n");
    sb.append("    sourceLineItemUid: ").append(toIndentedString(sourceLineItemUid)).append("\n");
    sb.append("    totalDiscountMoney: ").append(toIndentedString(totalDiscountMoney)).append("\n");
    sb.append("    totalMoney: ").append(toIndentedString(totalMoney)).append("\n");
    sb.append("    totalTaxMoney: ").append(toIndentedString(totalTaxMoney)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    variationName: ").append(toIndentedString(variationName)).append("\n");
    sb.append("    variationTotalPriceMoney: ").append(toIndentedString(variationTotalPriceMoney)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applied_discounts");
    openapiFields.add("applied_taxes");
    openapiFields.add("base_price_money");
    openapiFields.add("catalog_object_id");
    openapiFields.add("catalog_version");
    openapiFields.add("gross_return_money");
    openapiFields.add("item_type");
    openapiFields.add("name");
    openapiFields.add("note");
    openapiFields.add("quantity");
    openapiFields.add("quantity_unit");
    openapiFields.add("return_modifiers");
    openapiFields.add("source_line_item_uid");
    openapiFields.add("total_discount_money");
    openapiFields.add("total_money");
    openapiFields.add("total_tax_money");
    openapiFields.add("uid");
    openapiFields.add("variation_name");
    openapiFields.add("variation_total_price_money");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("quantity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderReturnLineItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderReturnLineItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderReturnLineItem is not found in the empty JSON string", OrderReturnLineItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderReturnLineItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderReturnLineItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderReturnLineItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("applied_discounts") != null && !jsonObj.get("applied_discounts").isJsonNull()) {
        JsonArray jsonArrayappliedDiscounts = jsonObj.getAsJsonArray("applied_discounts");
        if (jsonArrayappliedDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applied_discounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applied_discounts` to be an array in the JSON string but got `%s`", jsonObj.get("applied_discounts").toString()));
          }

          // validate the optional field `applied_discounts` (array)
          for (int i = 0; i < jsonArrayappliedDiscounts.size(); i++) {
            OrderLineItemAppliedDiscount.validateJsonElement(jsonArrayappliedDiscounts.get(i));
          };
        }
      }
      if (jsonObj.get("applied_taxes") != null && !jsonObj.get("applied_taxes").isJsonNull()) {
        JsonArray jsonArrayappliedTaxes = jsonObj.getAsJsonArray("applied_taxes");
        if (jsonArrayappliedTaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applied_taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applied_taxes` to be an array in the JSON string but got `%s`", jsonObj.get("applied_taxes").toString()));
          }

          // validate the optional field `applied_taxes` (array)
          for (int i = 0; i < jsonArrayappliedTaxes.size(); i++) {
            OrderLineItemAppliedTax.validateJsonElement(jsonArrayappliedTaxes.get(i));
          };
        }
      }
      // validate the optional field `base_price_money`
      if (jsonObj.get("base_price_money") != null && !jsonObj.get("base_price_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("base_price_money"));
      }
      if ((jsonObj.get("catalog_object_id") != null && !jsonObj.get("catalog_object_id").isJsonNull()) && !jsonObj.get("catalog_object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalog_object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalog_object_id").toString()));
      }
      // validate the optional field `gross_return_money`
      if (jsonObj.get("gross_return_money") != null && !jsonObj.get("gross_return_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("gross_return_money"));
      }
      if ((jsonObj.get("item_type") != null && !jsonObj.get("item_type").isJsonNull()) && !jsonObj.get("item_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (!jsonObj.get("quantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantity").toString()));
      }
      // validate the optional field `quantity_unit`
      if (jsonObj.get("quantity_unit") != null && !jsonObj.get("quantity_unit").isJsonNull()) {
        OrderQuantityUnit.validateJsonElement(jsonObj.get("quantity_unit"));
      }
      if (jsonObj.get("return_modifiers") != null && !jsonObj.get("return_modifiers").isJsonNull()) {
        JsonArray jsonArrayreturnModifiers = jsonObj.getAsJsonArray("return_modifiers");
        if (jsonArrayreturnModifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("return_modifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `return_modifiers` to be an array in the JSON string but got `%s`", jsonObj.get("return_modifiers").toString()));
          }

          // validate the optional field `return_modifiers` (array)
          for (int i = 0; i < jsonArrayreturnModifiers.size(); i++) {
            OrderReturnLineItemModifier.validateJsonElement(jsonArrayreturnModifiers.get(i));
          };
        }
      }
      if ((jsonObj.get("source_line_item_uid") != null && !jsonObj.get("source_line_item_uid").isJsonNull()) && !jsonObj.get("source_line_item_uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_line_item_uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_line_item_uid").toString()));
      }
      // validate the optional field `total_discount_money`
      if (jsonObj.get("total_discount_money") != null && !jsonObj.get("total_discount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_discount_money"));
      }
      // validate the optional field `total_money`
      if (jsonObj.get("total_money") != null && !jsonObj.get("total_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_money"));
      }
      // validate the optional field `total_tax_money`
      if (jsonObj.get("total_tax_money") != null && !jsonObj.get("total_tax_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_tax_money"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("variation_name") != null && !jsonObj.get("variation_name").isJsonNull()) && !jsonObj.get("variation_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variation_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variation_name").toString()));
      }
      // validate the optional field `variation_total_price_money`
      if (jsonObj.get("variation_total_price_money") != null && !jsonObj.get("variation_total_price_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("variation_total_price_money"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderReturnLineItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderReturnLineItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderReturnLineItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderReturnLineItem.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderReturnLineItem>() {
           @Override
           public void write(JsonWriter out, OrderReturnLineItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderReturnLineItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderReturnLineItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderReturnLineItem
   * @throws IOException if the JSON string is invalid with respect to OrderReturnLineItem
   */
  public static OrderReturnLineItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderReturnLineItem.class);
  }

  /**
   * Convert an instance of OrderReturnLineItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

