/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a payment request reminder (automatic notification) that Square sends to the customer. You configure a reminder relative to the payment request &#x60;due_date&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvoicePaymentReminder {
  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RELATIVE_SCHEDULED_DAYS = "relative_scheduled_days";
  @SerializedName(SERIALIZED_NAME_RELATIVE_SCHEDULED_DAYS)
  private Integer relativeScheduledDays;

  public static final String SERIALIZED_NAME_SENT_AT = "sent_at";
  @SerializedName(SERIALIZED_NAME_SENT_AT)
  private String sentAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public InvoicePaymentReminder() {
  }

  public InvoicePaymentReminder message(String message) {
    this.message = message;
    return this;
  }

  /**
   * The reminder message.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public InvoicePaymentReminder relativeScheduledDays(Integer relativeScheduledDays) {
    this.relativeScheduledDays = relativeScheduledDays;
    return this;
  }

  /**
   * The number of days before (a negative number) or after (a positive number) the payment request &#x60;due_date&#x60; when the reminder is sent. For example, -3 indicates that the reminder should be sent 3 days before the payment request &#x60;due_date&#x60;.
   * minimum: -32767
   * maximum: 32767
   * @return relativeScheduledDays
   */
  @javax.annotation.Nullable
  public Integer getRelativeScheduledDays() {
    return relativeScheduledDays;
  }

  public void setRelativeScheduledDays(Integer relativeScheduledDays) {
    this.relativeScheduledDays = relativeScheduledDays;
  }


  public InvoicePaymentReminder sentAt(String sentAt) {
    this.sentAt = sentAt;
    return this;
  }

  /**
   * If sent, the timestamp when the reminder was sent, in RFC 3339 format.
   * @return sentAt
   */
  @javax.annotation.Nullable
  public String getSentAt() {
    return sentAt;
  }

  public void setSentAt(String sentAt) {
    this.sentAt = sentAt;
  }


  public InvoicePaymentReminder status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the reminder.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public InvoicePaymentReminder uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * A Square-assigned ID that uniquely identifies the reminder within the &#x60;InvoicePaymentRequest&#x60;.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoicePaymentReminder invoicePaymentReminder = (InvoicePaymentReminder) o;
    return Objects.equals(this.message, invoicePaymentReminder.message) &&
        Objects.equals(this.relativeScheduledDays, invoicePaymentReminder.relativeScheduledDays) &&
        Objects.equals(this.sentAt, invoicePaymentReminder.sentAt) &&
        Objects.equals(this.status, invoicePaymentReminder.status) &&
        Objects.equals(this.uid, invoicePaymentReminder.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, relativeScheduledDays, sentAt, status, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoicePaymentReminder {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    relativeScheduledDays: ").append(toIndentedString(relativeScheduledDays)).append("\n");
    sb.append("    sentAt: ").append(toIndentedString(sentAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("message");
    openapiFields.add("relative_scheduled_days");
    openapiFields.add("sent_at");
    openapiFields.add("status");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoicePaymentReminder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoicePaymentReminder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoicePaymentReminder is not found in the empty JSON string", InvoicePaymentReminder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoicePaymentReminder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoicePaymentReminder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("sent_at") != null && !jsonObj.get("sent_at").isJsonNull()) && !jsonObj.get("sent_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sent_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sent_at").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoicePaymentReminder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoicePaymentReminder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoicePaymentReminder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoicePaymentReminder.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoicePaymentReminder>() {
           @Override
           public void write(JsonWriter out, InvoicePaymentReminder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoicePaymentReminder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoicePaymentReminder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoicePaymentReminder
   * @throws IOException if the JSON string is invalid with respect to InvoicePaymentReminder
   */
  public static InvoicePaymentReminder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoicePaymentReminder.class);
  }

  /**
   * Convert an instance of InvoicePaymentReminder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

