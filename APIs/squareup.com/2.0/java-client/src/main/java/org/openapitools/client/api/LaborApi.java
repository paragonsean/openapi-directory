/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateBreakTypeRequest;
import org.openapitools.client.model.CreateBreakTypeResponse;
import org.openapitools.client.model.CreateShiftRequest;
import org.openapitools.client.model.CreateShiftResponse;
import org.openapitools.client.model.DeleteBreakTypeResponse;
import org.openapitools.client.model.DeleteShiftResponse;
import org.openapitools.client.model.GetBreakTypeResponse;
import org.openapitools.client.model.GetEmployeeWageResponse;
import org.openapitools.client.model.GetShiftResponse;
import org.openapitools.client.model.GetTeamMemberWageResponse;
import org.openapitools.client.model.ListBreakTypesResponse;
import org.openapitools.client.model.ListEmployeeWagesResponse;
import org.openapitools.client.model.ListTeamMemberWagesResponse;
import org.openapitools.client.model.ListWorkweekConfigsResponse;
import org.openapitools.client.model.SearchShiftsRequest;
import org.openapitools.client.model.SearchShiftsResponse;
import org.openapitools.client.model.UpdateBreakTypeRequest;
import org.openapitools.client.model.UpdateBreakTypeResponse;
import org.openapitools.client.model.UpdateShiftRequest;
import org.openapitools.client.model.UpdateShiftResponse;
import org.openapitools.client.model.UpdateWorkweekConfigRequest;
import org.openapitools.client.model.UpdateWorkweekConfigResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LaborApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LaborApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LaborApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createBreakType
     * @param createBreakTypeRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBreakTypeCall(CreateBreakTypeRequest createBreakTypeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBreakTypeRequest;

        // create path and map variables
        String localVarPath = "/v2/labor/break-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBreakTypeValidateBeforeCall(CreateBreakTypeRequest createBreakTypeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createBreakTypeRequest' is set
        if (createBreakTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'createBreakTypeRequest' when calling createBreakType(Async)");
        }

        return createBreakTypeCall(createBreakTypeRequest, _callback);

    }

    /**
     * CreateBreakType
     * Creates a new &#x60;BreakType&#x60;.  A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects. You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have three &#x60;BreakType&#x60; instances per location. If you attempt to add a fourth &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
     * @param createBreakTypeRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return CreateBreakTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateBreakTypeResponse createBreakType(CreateBreakTypeRequest createBreakTypeRequest) throws ApiException {
        ApiResponse<CreateBreakTypeResponse> localVarResp = createBreakTypeWithHttpInfo(createBreakTypeRequest);
        return localVarResp.getData();
    }

    /**
     * CreateBreakType
     * Creates a new &#x60;BreakType&#x60;.  A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects. You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have three &#x60;BreakType&#x60; instances per location. If you attempt to add a fourth &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
     * @param createBreakTypeRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;CreateBreakTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateBreakTypeResponse> createBreakTypeWithHttpInfo(CreateBreakTypeRequest createBreakTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = createBreakTypeValidateBeforeCall(createBreakTypeRequest, null);
        Type localVarReturnType = new TypeToken<CreateBreakTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateBreakType (asynchronously)
     * Creates a new &#x60;BreakType&#x60;.  A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects. You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have three &#x60;BreakType&#x60; instances per location. If you attempt to add a fourth &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
     * @param createBreakTypeRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBreakTypeAsync(CreateBreakTypeRequest createBreakTypeRequest, final ApiCallback<CreateBreakTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBreakTypeValidateBeforeCall(createBreakTypeRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateBreakTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createShift
     * @param createShiftRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createShiftCall(CreateShiftRequest createShiftRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createShiftRequest;

        // create path and map variables
        String localVarPath = "/v2/labor/shifts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createShiftValidateBeforeCall(CreateShiftRequest createShiftRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createShiftRequest' is set
        if (createShiftRequest == null) {
            throw new ApiException("Missing the required parameter 'createShiftRequest' when calling createShift(Async)");
        }

        return createShiftCall(createShiftRequest, _callback);

    }

    /**
     * CreateShift
     * Creates a new &#x60;Shift&#x60;.  A &#x60;Shift&#x60; represents a complete workday for a single employee. You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another shift with an &#x60;OPEN&#x60; status. - The &#x60;start_at&#x60; date is in the future. - The &#x60;start_at&#x60; or &#x60;end_at&#x60; date overlaps another shift for the same employee. - The &#x60;Break&#x60; instances are set in the request and a break &#x60;start_at&#x60; is before the &#x60;Shift.start_at&#x60;, a break &#x60;end_at&#x60; is after the &#x60;Shift.end_at&#x60;, or both.
     * @param createShiftRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return CreateShiftResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateShiftResponse createShift(CreateShiftRequest createShiftRequest) throws ApiException {
        ApiResponse<CreateShiftResponse> localVarResp = createShiftWithHttpInfo(createShiftRequest);
        return localVarResp.getData();
    }

    /**
     * CreateShift
     * Creates a new &#x60;Shift&#x60;.  A &#x60;Shift&#x60; represents a complete workday for a single employee. You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another shift with an &#x60;OPEN&#x60; status. - The &#x60;start_at&#x60; date is in the future. - The &#x60;start_at&#x60; or &#x60;end_at&#x60; date overlaps another shift for the same employee. - The &#x60;Break&#x60; instances are set in the request and a break &#x60;start_at&#x60; is before the &#x60;Shift.start_at&#x60;, a break &#x60;end_at&#x60; is after the &#x60;Shift.end_at&#x60;, or both.
     * @param createShiftRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;CreateShiftResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateShiftResponse> createShiftWithHttpInfo(CreateShiftRequest createShiftRequest) throws ApiException {
        okhttp3.Call localVarCall = createShiftValidateBeforeCall(createShiftRequest, null);
        Type localVarReturnType = new TypeToken<CreateShiftResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateShift (asynchronously)
     * Creates a new &#x60;Shift&#x60;.  A &#x60;Shift&#x60; represents a complete workday for a single employee. You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another shift with an &#x60;OPEN&#x60; status. - The &#x60;start_at&#x60; date is in the future. - The &#x60;start_at&#x60; or &#x60;end_at&#x60; date overlaps another shift for the same employee. - The &#x60;Break&#x60; instances are set in the request and a break &#x60;start_at&#x60; is before the &#x60;Shift.start_at&#x60;, a break &#x60;end_at&#x60; is after the &#x60;Shift.end_at&#x60;, or both.
     * @param createShiftRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createShiftAsync(CreateShiftRequest createShiftRequest, final ApiCallback<CreateShiftResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createShiftValidateBeforeCall(createShiftRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateShiftResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBreakType
     * @param id The UUID for the &#x60;BreakType&#x60; being deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBreakTypeCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/labor/break-types/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBreakTypeValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteBreakType(Async)");
        }

        return deleteBreakTypeCall(id, _callback);

    }

    /**
     * DeleteBreakType
     * Deletes an existing &#x60;BreakType&#x60;.  A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
     * @param id The UUID for the &#x60;BreakType&#x60; being deleted. (required)
     * @return DeleteBreakTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBreakTypeResponse deleteBreakType(String id) throws ApiException {
        ApiResponse<DeleteBreakTypeResponse> localVarResp = deleteBreakTypeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * DeleteBreakType
     * Deletes an existing &#x60;BreakType&#x60;.  A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
     * @param id The UUID for the &#x60;BreakType&#x60; being deleted. (required)
     * @return ApiResponse&lt;DeleteBreakTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteBreakTypeResponse> deleteBreakTypeWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteBreakTypeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeleteBreakTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeleteBreakType (asynchronously)
     * Deletes an existing &#x60;BreakType&#x60;.  A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
     * @param id The UUID for the &#x60;BreakType&#x60; being deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBreakTypeAsync(String id, final ApiCallback<DeleteBreakTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBreakTypeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeleteBreakTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteShift
     * @param id The UUID for the &#x60;Shift&#x60; being deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteShiftCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/labor/shifts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteShiftValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteShift(Async)");
        }

        return deleteShiftCall(id, _callback);

    }

    /**
     * DeleteShift
     * Deletes a &#x60;Shift&#x60;.
     * @param id The UUID for the &#x60;Shift&#x60; being deleted. (required)
     * @return DeleteShiftResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeleteShiftResponse deleteShift(String id) throws ApiException {
        ApiResponse<DeleteShiftResponse> localVarResp = deleteShiftWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * DeleteShift
     * Deletes a &#x60;Shift&#x60;.
     * @param id The UUID for the &#x60;Shift&#x60; being deleted. (required)
     * @return ApiResponse&lt;DeleteShiftResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteShiftResponse> deleteShiftWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteShiftValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeleteShiftResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeleteShift (asynchronously)
     * Deletes a &#x60;Shift&#x60;.
     * @param id The UUID for the &#x60;Shift&#x60; being deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteShiftAsync(String id, final ApiCallback<DeleteShiftResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteShiftValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeleteShiftResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBreakType
     * @param id The UUID for the &#x60;BreakType&#x60; being retrieved. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBreakTypeCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/labor/break-types/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBreakTypeValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBreakType(Async)");
        }

        return getBreakTypeCall(id, _callback);

    }

    /**
     * GetBreakType
     * Returns a single &#x60;BreakType&#x60; specified by &#x60;id&#x60;.
     * @param id The UUID for the &#x60;BreakType&#x60; being retrieved. (required)
     * @return GetBreakTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetBreakTypeResponse getBreakType(String id) throws ApiException {
        ApiResponse<GetBreakTypeResponse> localVarResp = getBreakTypeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * GetBreakType
     * Returns a single &#x60;BreakType&#x60; specified by &#x60;id&#x60;.
     * @param id The UUID for the &#x60;BreakType&#x60; being retrieved. (required)
     * @return ApiResponse&lt;GetBreakTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBreakTypeResponse> getBreakTypeWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getBreakTypeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetBreakTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetBreakType (asynchronously)
     * Returns a single &#x60;BreakType&#x60; specified by &#x60;id&#x60;.
     * @param id The UUID for the &#x60;BreakType&#x60; being retrieved. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBreakTypeAsync(String id, final ApiCallback<GetBreakTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBreakTypeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetBreakTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmployeeWage
     * @param id The UUID for the &#x60;EmployeeWage&#x60; being retrieved. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmployeeWageCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/labor/employee-wages/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeWageValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEmployeeWage(Async)");
        }

        return getEmployeeWageCall(id, _callback);

    }

    /**
     * GetEmployeeWage
     * Returns a single &#x60;EmployeeWage&#x60; specified by &#x60;id&#x60;.
     * @param id The UUID for the &#x60;EmployeeWage&#x60; being retrieved. (required)
     * @return GetEmployeeWageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeWageResponse getEmployeeWage(String id) throws ApiException {
        ApiResponse<GetEmployeeWageResponse> localVarResp = getEmployeeWageWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * GetEmployeeWage
     * Returns a single &#x60;EmployeeWage&#x60; specified by &#x60;id&#x60;.
     * @param id The UUID for the &#x60;EmployeeWage&#x60; being retrieved. (required)
     * @return ApiResponse&lt;GetEmployeeWageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEmployeeWageResponse> getEmployeeWageWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeWageValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetEmployeeWageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetEmployeeWage (asynchronously)
     * Returns a single &#x60;EmployeeWage&#x60; specified by &#x60;id&#x60;.
     * @param id The UUID for the &#x60;EmployeeWage&#x60; being retrieved. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmployeeWageAsync(String id, final ApiCallback<GetEmployeeWageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeWageValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetEmployeeWageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShift
     * @param id The UUID for the &#x60;Shift&#x60; being retrieved. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShiftCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/labor/shifts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShiftValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getShift(Async)");
        }

        return getShiftCall(id, _callback);

    }

    /**
     * GetShift
     * Returns a single &#x60;Shift&#x60; specified by &#x60;id&#x60;.
     * @param id The UUID for the &#x60;Shift&#x60; being retrieved. (required)
     * @return GetShiftResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetShiftResponse getShift(String id) throws ApiException {
        ApiResponse<GetShiftResponse> localVarResp = getShiftWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * GetShift
     * Returns a single &#x60;Shift&#x60; specified by &#x60;id&#x60;.
     * @param id The UUID for the &#x60;Shift&#x60; being retrieved. (required)
     * @return ApiResponse&lt;GetShiftResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetShiftResponse> getShiftWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getShiftValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetShiftResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetShift (asynchronously)
     * Returns a single &#x60;Shift&#x60; specified by &#x60;id&#x60;.
     * @param id The UUID for the &#x60;Shift&#x60; being retrieved. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShiftAsync(String id, final ApiCallback<GetShiftResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShiftValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetShiftResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeamMemberWage
     * @param id The UUID for the &#x60;TeamMemberWage&#x60; being retrieved. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamMemberWageCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/labor/team-member-wages/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamMemberWageValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTeamMemberWage(Async)");
        }

        return getTeamMemberWageCall(id, _callback);

    }

    /**
     * GetTeamMemberWage
     * Returns a single &#x60;TeamMemberWage&#x60; specified by &#x60;id &#x60;.
     * @param id The UUID for the &#x60;TeamMemberWage&#x60; being retrieved. (required)
     * @return GetTeamMemberWageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetTeamMemberWageResponse getTeamMemberWage(String id) throws ApiException {
        ApiResponse<GetTeamMemberWageResponse> localVarResp = getTeamMemberWageWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * GetTeamMemberWage
     * Returns a single &#x60;TeamMemberWage&#x60; specified by &#x60;id &#x60;.
     * @param id The UUID for the &#x60;TeamMemberWage&#x60; being retrieved. (required)
     * @return ApiResponse&lt;GetTeamMemberWageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTeamMemberWageResponse> getTeamMemberWageWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getTeamMemberWageValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetTeamMemberWageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetTeamMemberWage (asynchronously)
     * Returns a single &#x60;TeamMemberWage&#x60; specified by &#x60;id &#x60;.
     * @param id The UUID for the &#x60;TeamMemberWage&#x60; being retrieved. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamMemberWageAsync(String id, final ApiCallback<GetTeamMemberWageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamMemberWageValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetTeamMemberWageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBreakTypes
     * @param locationId Filter the returned &#x60;BreakType&#x60; results to only those that are associated with the specified location. (optional)
     * @param limit The maximum number of &#x60;BreakType&#x60; results to return per page. The number can range between 1 and 200. The default is 200. (optional)
     * @param cursor A pointer to the next page of &#x60;BreakType&#x60; results to fetch. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBreakTypesCall(String locationId, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/labor/break-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBreakTypesValidateBeforeCall(String locationId, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        return listBreakTypesCall(locationId, limit, cursor, _callback);

    }

    /**
     * ListBreakTypes
     * Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
     * @param locationId Filter the returned &#x60;BreakType&#x60; results to only those that are associated with the specified location. (optional)
     * @param limit The maximum number of &#x60;BreakType&#x60; results to return per page. The number can range between 1 and 200. The default is 200. (optional)
     * @param cursor A pointer to the next page of &#x60;BreakType&#x60; results to fetch. (optional)
     * @return ListBreakTypesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListBreakTypesResponse listBreakTypes(String locationId, Integer limit, String cursor) throws ApiException {
        ApiResponse<ListBreakTypesResponse> localVarResp = listBreakTypesWithHttpInfo(locationId, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * ListBreakTypes
     * Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
     * @param locationId Filter the returned &#x60;BreakType&#x60; results to only those that are associated with the specified location. (optional)
     * @param limit The maximum number of &#x60;BreakType&#x60; results to return per page. The number can range between 1 and 200. The default is 200. (optional)
     * @param cursor A pointer to the next page of &#x60;BreakType&#x60; results to fetch. (optional)
     * @return ApiResponse&lt;ListBreakTypesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBreakTypesResponse> listBreakTypesWithHttpInfo(String locationId, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listBreakTypesValidateBeforeCall(locationId, limit, cursor, null);
        Type localVarReturnType = new TypeToken<ListBreakTypesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListBreakTypes (asynchronously)
     * Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
     * @param locationId Filter the returned &#x60;BreakType&#x60; results to only those that are associated with the specified location. (optional)
     * @param limit The maximum number of &#x60;BreakType&#x60; results to return per page. The number can range between 1 and 200. The default is 200. (optional)
     * @param cursor A pointer to the next page of &#x60;BreakType&#x60; results to fetch. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBreakTypesAsync(String locationId, Integer limit, String cursor, final ApiCallback<ListBreakTypesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBreakTypesValidateBeforeCall(locationId, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<ListBreakTypesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEmployeeWages
     * @param employeeId Filter the returned wages to only those that are associated with the specified employee. (optional)
     * @param limit The maximum number of &#x60;EmployeeWage&#x60; results to return per page. The number can range between 1 and 200. The default is 200. (optional)
     * @param cursor A pointer to the next page of &#x60;EmployeeWage&#x60; results to fetch. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEmployeeWagesCall(String employeeId, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/labor/employee-wages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employee_id", employeeId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmployeeWagesValidateBeforeCall(String employeeId, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        return listEmployeeWagesCall(employeeId, limit, cursor, _callback);

    }

    /**
     * ListEmployeeWages
     * Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
     * @param employeeId Filter the returned wages to only those that are associated with the specified employee. (optional)
     * @param limit The maximum number of &#x60;EmployeeWage&#x60; results to return per page. The number can range between 1 and 200. The default is 200. (optional)
     * @param cursor A pointer to the next page of &#x60;EmployeeWage&#x60; results to fetch. (optional)
     * @return ListEmployeeWagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListEmployeeWagesResponse listEmployeeWages(String employeeId, Integer limit, String cursor) throws ApiException {
        ApiResponse<ListEmployeeWagesResponse> localVarResp = listEmployeeWagesWithHttpInfo(employeeId, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * ListEmployeeWages
     * Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
     * @param employeeId Filter the returned wages to only those that are associated with the specified employee. (optional)
     * @param limit The maximum number of &#x60;EmployeeWage&#x60; results to return per page. The number can range between 1 and 200. The default is 200. (optional)
     * @param cursor A pointer to the next page of &#x60;EmployeeWage&#x60; results to fetch. (optional)
     * @return ApiResponse&lt;ListEmployeeWagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEmployeeWagesResponse> listEmployeeWagesWithHttpInfo(String employeeId, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listEmployeeWagesValidateBeforeCall(employeeId, limit, cursor, null);
        Type localVarReturnType = new TypeToken<ListEmployeeWagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListEmployeeWages (asynchronously)
     * Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
     * @param employeeId Filter the returned wages to only those that are associated with the specified employee. (optional)
     * @param limit The maximum number of &#x60;EmployeeWage&#x60; results to return per page. The number can range between 1 and 200. The default is 200. (optional)
     * @param cursor A pointer to the next page of &#x60;EmployeeWage&#x60; results to fetch. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEmployeeWagesAsync(String employeeId, Integer limit, String cursor, final ApiCallback<ListEmployeeWagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmployeeWagesValidateBeforeCall(employeeId, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<ListEmployeeWagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTeamMemberWages
     * @param teamMemberId Filter the returned wages to only those that are associated with the specified team member. (optional)
     * @param limit The maximum number of &#x60;TeamMemberWage&#x60; results to return per page. The number can range between 1 and 200. The default is 200. (optional)
     * @param cursor A pointer to the next page of &#x60;EmployeeWage&#x60; results to fetch. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTeamMemberWagesCall(String teamMemberId, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/labor/team-member-wages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamMemberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_member_id", teamMemberId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamMemberWagesValidateBeforeCall(String teamMemberId, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        return listTeamMemberWagesCall(teamMemberId, limit, cursor, _callback);

    }

    /**
     * ListTeamMemberWages
     * Returns a paginated list of &#x60;TeamMemberWage&#x60; instances for a business.
     * @param teamMemberId Filter the returned wages to only those that are associated with the specified team member. (optional)
     * @param limit The maximum number of &#x60;TeamMemberWage&#x60; results to return per page. The number can range between 1 and 200. The default is 200. (optional)
     * @param cursor A pointer to the next page of &#x60;EmployeeWage&#x60; results to fetch. (optional)
     * @return ListTeamMemberWagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListTeamMemberWagesResponse listTeamMemberWages(String teamMemberId, Integer limit, String cursor) throws ApiException {
        ApiResponse<ListTeamMemberWagesResponse> localVarResp = listTeamMemberWagesWithHttpInfo(teamMemberId, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * ListTeamMemberWages
     * Returns a paginated list of &#x60;TeamMemberWage&#x60; instances for a business.
     * @param teamMemberId Filter the returned wages to only those that are associated with the specified team member. (optional)
     * @param limit The maximum number of &#x60;TeamMemberWage&#x60; results to return per page. The number can range between 1 and 200. The default is 200. (optional)
     * @param cursor A pointer to the next page of &#x60;EmployeeWage&#x60; results to fetch. (optional)
     * @return ApiResponse&lt;ListTeamMemberWagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTeamMemberWagesResponse> listTeamMemberWagesWithHttpInfo(String teamMemberId, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listTeamMemberWagesValidateBeforeCall(teamMemberId, limit, cursor, null);
        Type localVarReturnType = new TypeToken<ListTeamMemberWagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListTeamMemberWages (asynchronously)
     * Returns a paginated list of &#x60;TeamMemberWage&#x60; instances for a business.
     * @param teamMemberId Filter the returned wages to only those that are associated with the specified team member. (optional)
     * @param limit The maximum number of &#x60;TeamMemberWage&#x60; results to return per page. The number can range between 1 and 200. The default is 200. (optional)
     * @param cursor A pointer to the next page of &#x60;EmployeeWage&#x60; results to fetch. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTeamMemberWagesAsync(String teamMemberId, Integer limit, String cursor, final ApiCallback<ListTeamMemberWagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamMemberWagesValidateBeforeCall(teamMemberId, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<ListTeamMemberWagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWorkweekConfigs
     * @param limit The maximum number of &#x60;WorkweekConfigs&#x60; results to return per page. (optional)
     * @param cursor A pointer to the next page of &#x60;WorkweekConfig&#x60; results to fetch. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWorkweekConfigsCall(Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/labor/workweek-configs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkweekConfigsValidateBeforeCall(Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        return listWorkweekConfigsCall(limit, cursor, _callback);

    }

    /**
     * ListWorkweekConfigs
     * Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
     * @param limit The maximum number of &#x60;WorkweekConfigs&#x60; results to return per page. (optional)
     * @param cursor A pointer to the next page of &#x60;WorkweekConfig&#x60; results to fetch. (optional)
     * @return ListWorkweekConfigsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListWorkweekConfigsResponse listWorkweekConfigs(Integer limit, String cursor) throws ApiException {
        ApiResponse<ListWorkweekConfigsResponse> localVarResp = listWorkweekConfigsWithHttpInfo(limit, cursor);
        return localVarResp.getData();
    }

    /**
     * ListWorkweekConfigs
     * Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
     * @param limit The maximum number of &#x60;WorkweekConfigs&#x60; results to return per page. (optional)
     * @param cursor A pointer to the next page of &#x60;WorkweekConfig&#x60; results to fetch. (optional)
     * @return ApiResponse&lt;ListWorkweekConfigsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListWorkweekConfigsResponse> listWorkweekConfigsWithHttpInfo(Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listWorkweekConfigsValidateBeforeCall(limit, cursor, null);
        Type localVarReturnType = new TypeToken<ListWorkweekConfigsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListWorkweekConfigs (asynchronously)
     * Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
     * @param limit The maximum number of &#x60;WorkweekConfigs&#x60; results to return per page. (optional)
     * @param cursor A pointer to the next page of &#x60;WorkweekConfig&#x60; results to fetch. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWorkweekConfigsAsync(Integer limit, String cursor, final ApiCallback<ListWorkweekConfigsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkweekConfigsValidateBeforeCall(limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<ListWorkweekConfigsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchShifts
     * @param searchShiftsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchShiftsCall(SearchShiftsRequest searchShiftsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchShiftsRequest;

        // create path and map variables
        String localVarPath = "/v2/labor/shifts/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchShiftsValidateBeforeCall(SearchShiftsRequest searchShiftsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchShiftsRequest' is set
        if (searchShiftsRequest == null) {
            throw new ApiException("Missing the required parameter 'searchShiftsRequest' when calling searchShifts(Async)");
        }

        return searchShiftsCall(searchShiftsRequest, _callback);

    }

    /**
     * SearchShifts
     * Returns a paginated list of &#x60;Shift&#x60; records for a business. The list to be returned can be filtered by: - Location IDs. - Employee IDs. - Shift status (&#x60;OPEN&#x60; and &#x60;CLOSED&#x60;). - Shift start. - Shift end. - Workday details.  The list can be sorted by: - &#x60;start_at&#x60;. - &#x60;end_at&#x60;. - &#x60;created_at&#x60;. - &#x60;updated_at&#x60;.
     * @param searchShiftsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return SearchShiftsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SearchShiftsResponse searchShifts(SearchShiftsRequest searchShiftsRequest) throws ApiException {
        ApiResponse<SearchShiftsResponse> localVarResp = searchShiftsWithHttpInfo(searchShiftsRequest);
        return localVarResp.getData();
    }

    /**
     * SearchShifts
     * Returns a paginated list of &#x60;Shift&#x60; records for a business. The list to be returned can be filtered by: - Location IDs. - Employee IDs. - Shift status (&#x60;OPEN&#x60; and &#x60;CLOSED&#x60;). - Shift start. - Shift end. - Workday details.  The list can be sorted by: - &#x60;start_at&#x60;. - &#x60;end_at&#x60;. - &#x60;created_at&#x60;. - &#x60;updated_at&#x60;.
     * @param searchShiftsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;SearchShiftsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchShiftsResponse> searchShiftsWithHttpInfo(SearchShiftsRequest searchShiftsRequest) throws ApiException {
        okhttp3.Call localVarCall = searchShiftsValidateBeforeCall(searchShiftsRequest, null);
        Type localVarReturnType = new TypeToken<SearchShiftsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SearchShifts (asynchronously)
     * Returns a paginated list of &#x60;Shift&#x60; records for a business. The list to be returned can be filtered by: - Location IDs. - Employee IDs. - Shift status (&#x60;OPEN&#x60; and &#x60;CLOSED&#x60;). - Shift start. - Shift end. - Workday details.  The list can be sorted by: - &#x60;start_at&#x60;. - &#x60;end_at&#x60;. - &#x60;created_at&#x60;. - &#x60;updated_at&#x60;.
     * @param searchShiftsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchShiftsAsync(SearchShiftsRequest searchShiftsRequest, final ApiCallback<SearchShiftsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchShiftsValidateBeforeCall(searchShiftsRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchShiftsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBreakType
     * @param id  The UUID for the &#x60;BreakType&#x60; being updated. (required)
     * @param updateBreakTypeRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBreakTypeCall(String id, UpdateBreakTypeRequest updateBreakTypeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateBreakTypeRequest;

        // create path and map variables
        String localVarPath = "/v2/labor/break-types/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBreakTypeValidateBeforeCall(String id, UpdateBreakTypeRequest updateBreakTypeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateBreakType(Async)");
        }

        // verify the required parameter 'updateBreakTypeRequest' is set
        if (updateBreakTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'updateBreakTypeRequest' when calling updateBreakType(Async)");
        }

        return updateBreakTypeCall(id, updateBreakTypeRequest, _callback);

    }

    /**
     * UpdateBreakType
     * Updates an existing &#x60;BreakType&#x60;.
     * @param id  The UUID for the &#x60;BreakType&#x60; being updated. (required)
     * @param updateBreakTypeRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return UpdateBreakTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBreakTypeResponse updateBreakType(String id, UpdateBreakTypeRequest updateBreakTypeRequest) throws ApiException {
        ApiResponse<UpdateBreakTypeResponse> localVarResp = updateBreakTypeWithHttpInfo(id, updateBreakTypeRequest);
        return localVarResp.getData();
    }

    /**
     * UpdateBreakType
     * Updates an existing &#x60;BreakType&#x60;.
     * @param id  The UUID for the &#x60;BreakType&#x60; being updated. (required)
     * @param updateBreakTypeRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;UpdateBreakTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateBreakTypeResponse> updateBreakTypeWithHttpInfo(String id, UpdateBreakTypeRequest updateBreakTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBreakTypeValidateBeforeCall(id, updateBreakTypeRequest, null);
        Type localVarReturnType = new TypeToken<UpdateBreakTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateBreakType (asynchronously)
     * Updates an existing &#x60;BreakType&#x60;.
     * @param id  The UUID for the &#x60;BreakType&#x60; being updated. (required)
     * @param updateBreakTypeRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBreakTypeAsync(String id, UpdateBreakTypeRequest updateBreakTypeRequest, final ApiCallback<UpdateBreakTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBreakTypeValidateBeforeCall(id, updateBreakTypeRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateBreakTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateShift
     * @param id The ID of the object being updated. (required)
     * @param updateShiftRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateShiftCall(String id, UpdateShiftRequest updateShiftRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateShiftRequest;

        // create path and map variables
        String localVarPath = "/v2/labor/shifts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateShiftValidateBeforeCall(String id, UpdateShiftRequest updateShiftRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateShift(Async)");
        }

        // verify the required parameter 'updateShiftRequest' is set
        if (updateShiftRequest == null) {
            throw new ApiException("Missing the required parameter 'updateShiftRequest' when calling updateShift(Async)");
        }

        return updateShiftCall(id, updateShiftRequest, _callback);

    }

    /**
     * UpdateShift
     * Updates an existing &#x60;Shift&#x60;.  When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Break&#x60; instances in the &#x60;Shift&#x60; have the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.  When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the &#x60;Shift&#x60; must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
     * @param id The ID of the object being updated. (required)
     * @param updateShiftRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return UpdateShiftResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateShiftResponse updateShift(String id, UpdateShiftRequest updateShiftRequest) throws ApiException {
        ApiResponse<UpdateShiftResponse> localVarResp = updateShiftWithHttpInfo(id, updateShiftRequest);
        return localVarResp.getData();
    }

    /**
     * UpdateShift
     * Updates an existing &#x60;Shift&#x60;.  When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Break&#x60; instances in the &#x60;Shift&#x60; have the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.  When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the &#x60;Shift&#x60; must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
     * @param id The ID of the object being updated. (required)
     * @param updateShiftRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;UpdateShiftResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateShiftResponse> updateShiftWithHttpInfo(String id, UpdateShiftRequest updateShiftRequest) throws ApiException {
        okhttp3.Call localVarCall = updateShiftValidateBeforeCall(id, updateShiftRequest, null);
        Type localVarReturnType = new TypeToken<UpdateShiftResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateShift (asynchronously)
     * Updates an existing &#x60;Shift&#x60;.  When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Break&#x60; instances in the &#x60;Shift&#x60; have the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.  When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the &#x60;Shift&#x60; must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
     * @param id The ID of the object being updated. (required)
     * @param updateShiftRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateShiftAsync(String id, UpdateShiftRequest updateShiftRequest, final ApiCallback<UpdateShiftResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateShiftValidateBeforeCall(id, updateShiftRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateShiftResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWorkweekConfig
     * @param id The UUID for the &#x60;WorkweekConfig&#x60; object being updated. (required)
     * @param updateWorkweekConfigRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkweekConfigCall(String id, UpdateWorkweekConfigRequest updateWorkweekConfigRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWorkweekConfigRequest;

        // create path and map variables
        String localVarPath = "/v2/labor/workweek-configs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkweekConfigValidateBeforeCall(String id, UpdateWorkweekConfigRequest updateWorkweekConfigRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateWorkweekConfig(Async)");
        }

        // verify the required parameter 'updateWorkweekConfigRequest' is set
        if (updateWorkweekConfigRequest == null) {
            throw new ApiException("Missing the required parameter 'updateWorkweekConfigRequest' when calling updateWorkweekConfig(Async)");
        }

        return updateWorkweekConfigCall(id, updateWorkweekConfigRequest, _callback);

    }

    /**
     * UpdateWorkweekConfig
     * Updates a &#x60;WorkweekConfig&#x60;.
     * @param id The UUID for the &#x60;WorkweekConfig&#x60; object being updated. (required)
     * @param updateWorkweekConfigRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return UpdateWorkweekConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWorkweekConfigResponse updateWorkweekConfig(String id, UpdateWorkweekConfigRequest updateWorkweekConfigRequest) throws ApiException {
        ApiResponse<UpdateWorkweekConfigResponse> localVarResp = updateWorkweekConfigWithHttpInfo(id, updateWorkweekConfigRequest);
        return localVarResp.getData();
    }

    /**
     * UpdateWorkweekConfig
     * Updates a &#x60;WorkweekConfig&#x60;.
     * @param id The UUID for the &#x60;WorkweekConfig&#x60; object being updated. (required)
     * @param updateWorkweekConfigRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;UpdateWorkweekConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateWorkweekConfigResponse> updateWorkweekConfigWithHttpInfo(String id, UpdateWorkweekConfigRequest updateWorkweekConfigRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWorkweekConfigValidateBeforeCall(id, updateWorkweekConfigRequest, null);
        Type localVarReturnType = new TypeToken<UpdateWorkweekConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateWorkweekConfig (asynchronously)
     * Updates a &#x60;WorkweekConfig&#x60;.
     * @param id The UUID for the &#x60;WorkweekConfig&#x60; object being updated. (required)
     * @param updateWorkweekConfigRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkweekConfigAsync(String id, UpdateWorkweekConfigRequest updateWorkweekConfigRequest, final ApiCallback<UpdateWorkweekConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkweekConfigValidateBeforeCall(id, updateWorkweekConfigRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateWorkweekConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
