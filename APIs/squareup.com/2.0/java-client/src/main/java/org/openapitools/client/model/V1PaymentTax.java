/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.V1Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V1PaymentTax
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V1PaymentTax {
  public static final String SERIALIZED_NAME_APPLIED_MONEY = "applied_money";
  @SerializedName(SERIALIZED_NAME_APPLIED_MONEY)
  private V1Money appliedMoney;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Error> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEE_ID = "fee_id";
  @SerializedName(SERIALIZED_NAME_FEE_ID)
  private String feeId;

  public static final String SERIALIZED_NAME_INCLUSION_TYPE = "inclusion_type";
  @SerializedName(SERIALIZED_NAME_INCLUSION_TYPE)
  private String inclusionType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private String rate;

  public V1PaymentTax() {
  }

  public V1PaymentTax appliedMoney(V1Money appliedMoney) {
    this.appliedMoney = appliedMoney;
    return this;
  }

  /**
   * Get appliedMoney
   * @return appliedMoney
   */
  @javax.annotation.Nullable
  public V1Money getAppliedMoney() {
    return appliedMoney;
  }

  public void setAppliedMoney(V1Money appliedMoney) {
    this.appliedMoney = appliedMoney;
  }


  public V1PaymentTax errors(List<Error> errors) {
    this.errors = errors;
    return this;
  }

  public V1PaymentTax addErrorsItem(Error errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Any errors that occurred during the request.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<Error> getErrors() {
    return errors;
  }

  public void setErrors(List<Error> errors) {
    this.errors = errors;
  }


  public V1PaymentTax feeId(String feeId) {
    this.feeId = feeId;
    return this;
  }

  /**
   * The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.
   * @return feeId
   */
  @javax.annotation.Nullable
  public String getFeeId() {
    return feeId;
  }

  public void setFeeId(String feeId) {
    this.feeId = feeId;
  }


  public V1PaymentTax inclusionType(String inclusionType) {
    this.inclusionType = inclusionType;
    return this;
  }

  /**
   * Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
   * @return inclusionType
   */
  @javax.annotation.Nullable
  public String getInclusionType() {
    return inclusionType;
  }

  public void setInclusionType(String inclusionType) {
    this.inclusionType = inclusionType;
  }


  public V1PaymentTax name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The merchant-defined name of the tax.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public V1PaymentTax rate(String rate) {
    this.rate = rate;
    return this;
  }

  /**
   * The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
   * @return rate
   */
  @javax.annotation.Nullable
  public String getRate() {
    return rate;
  }

  public void setRate(String rate) {
    this.rate = rate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PaymentTax v1PaymentTax = (V1PaymentTax) o;
    return Objects.equals(this.appliedMoney, v1PaymentTax.appliedMoney) &&
        Objects.equals(this.errors, v1PaymentTax.errors) &&
        Objects.equals(this.feeId, v1PaymentTax.feeId) &&
        Objects.equals(this.inclusionType, v1PaymentTax.inclusionType) &&
        Objects.equals(this.name, v1PaymentTax.name) &&
        Objects.equals(this.rate, v1PaymentTax.rate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliedMoney, errors, feeId, inclusionType, name, rate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PaymentTax {\n");
    sb.append("    appliedMoney: ").append(toIndentedString(appliedMoney)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    feeId: ").append(toIndentedString(feeId)).append("\n");
    sb.append("    inclusionType: ").append(toIndentedString(inclusionType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applied_money");
    openapiFields.add("errors");
    openapiFields.add("fee_id");
    openapiFields.add("inclusion_type");
    openapiFields.add("name");
    openapiFields.add("rate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1PaymentTax
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1PaymentTax.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PaymentTax is not found in the empty JSON string", V1PaymentTax.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1PaymentTax.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PaymentTax` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `applied_money`
      if (jsonObj.get("applied_money") != null && !jsonObj.get("applied_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("applied_money"));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            Error.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("fee_id") != null && !jsonObj.get("fee_id").isJsonNull()) && !jsonObj.get("fee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fee_id").toString()));
      }
      if ((jsonObj.get("inclusion_type") != null && !jsonObj.get("inclusion_type").isJsonNull()) && !jsonObj.get("inclusion_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inclusion_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inclusion_type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("rate") != null && !jsonObj.get("rate").isJsonNull()) && !jsonObj.get("rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PaymentTax.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PaymentTax' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PaymentTax> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PaymentTax.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PaymentTax>() {
           @Override
           public void write(JsonWriter out, V1PaymentTax value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PaymentTax read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1PaymentTax given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1PaymentTax
   * @throws IOException if the JSON string is invalid with respect to V1PaymentTax
   */
  public static V1PaymentTax fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PaymentTax.class);
  }

  /**
   * Convert an instance of V1PaymentTax to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

