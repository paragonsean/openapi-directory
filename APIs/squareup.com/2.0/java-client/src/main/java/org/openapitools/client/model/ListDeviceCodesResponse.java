/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeviceCode;
import org.openapitools.client.model.Error;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListDeviceCodesResponse {
  public static final String SERIALIZED_NAME_CURSOR = "cursor";
  @SerializedName(SERIALIZED_NAME_CURSOR)
  private String cursor;

  public static final String SERIALIZED_NAME_DEVICE_CODES = "device_codes";
  @SerializedName(SERIALIZED_NAME_DEVICE_CODES)
  private List<DeviceCode> deviceCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Error> errors = new ArrayList<>();

  public ListDeviceCodesResponse() {
  }

  public ListDeviceCodesResponse cursor(String cursor) {
    this.cursor = cursor;
    return this;
  }

  /**
   * A pagination cursor to retrieve the next set of results for your original query to the endpoint. This value is present only if the request succeeded and additional results are available.  See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
   * @return cursor
   */
  @javax.annotation.Nullable
  public String getCursor() {
    return cursor;
  }

  public void setCursor(String cursor) {
    this.cursor = cursor;
  }


  public ListDeviceCodesResponse deviceCodes(List<DeviceCode> deviceCodes) {
    this.deviceCodes = deviceCodes;
    return this;
  }

  public ListDeviceCodesResponse addDeviceCodesItem(DeviceCode deviceCodesItem) {
    if (this.deviceCodes == null) {
      this.deviceCodes = new ArrayList<>();
    }
    this.deviceCodes.add(deviceCodesItem);
    return this;
  }

  /**
   * The queried DeviceCode.
   * @return deviceCodes
   */
  @javax.annotation.Nullable
  public List<DeviceCode> getDeviceCodes() {
    return deviceCodes;
  }

  public void setDeviceCodes(List<DeviceCode> deviceCodes) {
    this.deviceCodes = deviceCodes;
  }


  public ListDeviceCodesResponse errors(List<Error> errors) {
    this.errors = errors;
    return this;
  }

  public ListDeviceCodesResponse addErrorsItem(Error errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Any errors that occurred during the request.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<Error> getErrors() {
    return errors;
  }

  public void setErrors(List<Error> errors) {
    this.errors = errors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListDeviceCodesResponse listDeviceCodesResponse = (ListDeviceCodesResponse) o;
    return Objects.equals(this.cursor, listDeviceCodesResponse.cursor) &&
        Objects.equals(this.deviceCodes, listDeviceCodesResponse.deviceCodes) &&
        Objects.equals(this.errors, listDeviceCodesResponse.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cursor, deviceCodes, errors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListDeviceCodesResponse {\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("    deviceCodes: ").append(toIndentedString(deviceCodes)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cursor");
    openapiFields.add("device_codes");
    openapiFields.add("errors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListDeviceCodesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListDeviceCodesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListDeviceCodesResponse is not found in the empty JSON string", ListDeviceCodesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListDeviceCodesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListDeviceCodesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cursor") != null && !jsonObj.get("cursor").isJsonNull()) && !jsonObj.get("cursor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cursor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cursor").toString()));
      }
      if (jsonObj.get("device_codes") != null && !jsonObj.get("device_codes").isJsonNull()) {
        JsonArray jsonArraydeviceCodes = jsonObj.getAsJsonArray("device_codes");
        if (jsonArraydeviceCodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("device_codes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `device_codes` to be an array in the JSON string but got `%s`", jsonObj.get("device_codes").toString()));
          }

          // validate the optional field `device_codes` (array)
          for (int i = 0; i < jsonArraydeviceCodes.size(); i++) {
            DeviceCode.validateJsonElement(jsonArraydeviceCodes.get(i));
          };
        }
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            Error.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListDeviceCodesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListDeviceCodesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListDeviceCodesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListDeviceCodesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListDeviceCodesResponse>() {
           @Override
           public void write(JsonWriter out, ListDeviceCodesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListDeviceCodesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListDeviceCodesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListDeviceCodesResponse
   * @throws IOException if the JSON string is invalid with respect to ListDeviceCodesResponse
   */
  public static ListDeviceCodesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListDeviceCodesResponse.class);
  }

  /**
   * Convert an instance of ListDeviceCodesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

