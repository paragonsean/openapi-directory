/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdditionalRecipient;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Order;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Square Checkout lets merchants accept online payments for supported payment types using a checkout workflow hosted on squareup.com.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Checkout {
  public static final String SERIALIZED_NAME_ADDITIONAL_RECIPIENTS = "additional_recipients";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_RECIPIENTS)
  private List<AdditionalRecipient> additionalRecipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASK_FOR_SHIPPING_ADDRESS = "ask_for_shipping_address";
  @SerializedName(SERIALIZED_NAME_ASK_FOR_SHIPPING_ADDRESS)
  private Boolean askForShippingAddress;

  public static final String SERIALIZED_NAME_CHECKOUT_PAGE_URL = "checkout_page_url";
  @SerializedName(SERIALIZED_NAME_CHECKOUT_PAGE_URL)
  private String checkoutPageUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MERCHANT_SUPPORT_EMAIL = "merchant_support_email";
  @SerializedName(SERIALIZED_NAME_MERCHANT_SUPPORT_EMAIL)
  private String merchantSupportEmail;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Order order;

  public static final String SERIALIZED_NAME_PRE_POPULATE_BUYER_EMAIL = "pre_populate_buyer_email";
  @SerializedName(SERIALIZED_NAME_PRE_POPULATE_BUYER_EMAIL)
  private String prePopulateBuyerEmail;

  public static final String SERIALIZED_NAME_PRE_POPULATE_SHIPPING_ADDRESS = "pre_populate_shipping_address";
  @SerializedName(SERIALIZED_NAME_PRE_POPULATE_SHIPPING_ADDRESS)
  private Address prePopulateShippingAddress;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public Checkout() {
  }

  public Checkout additionalRecipients(List<AdditionalRecipient> additionalRecipients) {
    this.additionalRecipients = additionalRecipients;
    return this;
  }

  public Checkout addAdditionalRecipientsItem(AdditionalRecipient additionalRecipientsItem) {
    if (this.additionalRecipients == null) {
      this.additionalRecipients = new ArrayList<>();
    }
    this.additionalRecipients.add(additionalRecipientsItem);
    return this;
  }

  /**
   * Additional recipients (other than the merchant) receiving a portion of this checkout. For example, fees assessed on the purchase by a third party integration.
   * @return additionalRecipients
   */
  @javax.annotation.Nullable
  public List<AdditionalRecipient> getAdditionalRecipients() {
    return additionalRecipients;
  }

  public void setAdditionalRecipients(List<AdditionalRecipient> additionalRecipients) {
    this.additionalRecipients = additionalRecipients;
  }


  public Checkout askForShippingAddress(Boolean askForShippingAddress) {
    this.askForShippingAddress = askForShippingAddress;
    return this;
  }

  /**
   * If &#x60;true&#x60;, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: &#x60;false&#x60;.
   * @return askForShippingAddress
   */
  @javax.annotation.Nullable
  public Boolean getAskForShippingAddress() {
    return askForShippingAddress;
  }

  public void setAskForShippingAddress(Boolean askForShippingAddress) {
    this.askForShippingAddress = askForShippingAddress;
  }


  public Checkout checkoutPageUrl(String checkoutPageUrl) {
    this.checkoutPageUrl = checkoutPageUrl;
    return this;
  }

  /**
   * The URL that the buyer&#39;s browser should be redirected to after the checkout is completed.
   * @return checkoutPageUrl
   */
  @javax.annotation.Nullable
  public String getCheckoutPageUrl() {
    return checkoutPageUrl;
  }

  public void setCheckoutPageUrl(String checkoutPageUrl) {
    this.checkoutPageUrl = checkoutPageUrl;
  }


  public Checkout createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The time when the checkout was created, in RFC 3339 format.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Checkout id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID generated by Square Checkout when a new checkout is requested.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Checkout merchantSupportEmail(String merchantSupportEmail) {
    this.merchantSupportEmail = merchantSupportEmail;
    return this;
  }

  /**
   * The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant&#39;s Square account.  Default: none; only exists if explicitly set.
   * @return merchantSupportEmail
   */
  @javax.annotation.Nullable
  public String getMerchantSupportEmail() {
    return merchantSupportEmail;
  }

  public void setMerchantSupportEmail(String merchantSupportEmail) {
    this.merchantSupportEmail = merchantSupportEmail;
  }


  public Checkout order(Order order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public Order getOrder() {
    return order;
  }

  public void setOrder(Order order) {
    this.order = order;
  }


  public Checkout prePopulateBuyerEmail(String prePopulateBuyerEmail) {
    this.prePopulateBuyerEmail = prePopulateBuyerEmail;
    return this;
  }

  /**
   * If provided, the buyer&#39;s email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.
   * @return prePopulateBuyerEmail
   */
  @javax.annotation.Nullable
  public String getPrePopulateBuyerEmail() {
    return prePopulateBuyerEmail;
  }

  public void setPrePopulateBuyerEmail(String prePopulateBuyerEmail) {
    this.prePopulateBuyerEmail = prePopulateBuyerEmail;
  }


  public Checkout prePopulateShippingAddress(Address prePopulateShippingAddress) {
    this.prePopulateShippingAddress = prePopulateShippingAddress;
    return this;
  }

  /**
   * Get prePopulateShippingAddress
   * @return prePopulateShippingAddress
   */
  @javax.annotation.Nullable
  public Address getPrePopulateShippingAddress() {
    return prePopulateShippingAddress;
  }

  public void setPrePopulateShippingAddress(Address prePopulateShippingAddress) {
    this.prePopulateShippingAddress = prePopulateShippingAddress;
  }


  public Checkout redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * The URL to redirect to after checkout is completed with &#x60;checkoutId&#x60;, Square&#39;s &#x60;orderId&#x60;, &#x60;transactionId&#x60;, and &#x60;referenceId&#x60; appended as URL parameters. For example, if the provided redirect_url is &#x60;http://www.example.com/order-complete&#x60;, a successful transaction redirects the customer to:  &lt;pre&gt;&lt;code&gt;http://www.example.com/order-complete?checkoutId&#x3D;xxxxxx&amp;amp;orderId&#x3D;xxxxxx&amp;amp;referenceId&#x3D;xxxxxx&amp;amp;transactionId&#x3D;xxxxxx&lt;/code&gt;&lt;/pre&gt;  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Checkout checkout = (Checkout) o;
    return Objects.equals(this.additionalRecipients, checkout.additionalRecipients) &&
        Objects.equals(this.askForShippingAddress, checkout.askForShippingAddress) &&
        Objects.equals(this.checkoutPageUrl, checkout.checkoutPageUrl) &&
        Objects.equals(this.createdAt, checkout.createdAt) &&
        Objects.equals(this.id, checkout.id) &&
        Objects.equals(this.merchantSupportEmail, checkout.merchantSupportEmail) &&
        Objects.equals(this.order, checkout.order) &&
        Objects.equals(this.prePopulateBuyerEmail, checkout.prePopulateBuyerEmail) &&
        Objects.equals(this.prePopulateShippingAddress, checkout.prePopulateShippingAddress) &&
        Objects.equals(this.redirectUrl, checkout.redirectUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalRecipients, askForShippingAddress, checkoutPageUrl, createdAt, id, merchantSupportEmail, order, prePopulateBuyerEmail, prePopulateShippingAddress, redirectUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Checkout {\n");
    sb.append("    additionalRecipients: ").append(toIndentedString(additionalRecipients)).append("\n");
    sb.append("    askForShippingAddress: ").append(toIndentedString(askForShippingAddress)).append("\n");
    sb.append("    checkoutPageUrl: ").append(toIndentedString(checkoutPageUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    merchantSupportEmail: ").append(toIndentedString(merchantSupportEmail)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    prePopulateBuyerEmail: ").append(toIndentedString(prePopulateBuyerEmail)).append("\n");
    sb.append("    prePopulateShippingAddress: ").append(toIndentedString(prePopulateShippingAddress)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_recipients");
    openapiFields.add("ask_for_shipping_address");
    openapiFields.add("checkout_page_url");
    openapiFields.add("created_at");
    openapiFields.add("id");
    openapiFields.add("merchant_support_email");
    openapiFields.add("order");
    openapiFields.add("pre_populate_buyer_email");
    openapiFields.add("pre_populate_shipping_address");
    openapiFields.add("redirect_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Checkout
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Checkout.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Checkout is not found in the empty JSON string", Checkout.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Checkout.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Checkout` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additional_recipients") != null && !jsonObj.get("additional_recipients").isJsonNull()) {
        JsonArray jsonArrayadditionalRecipients = jsonObj.getAsJsonArray("additional_recipients");
        if (jsonArrayadditionalRecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additional_recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additional_recipients` to be an array in the JSON string but got `%s`", jsonObj.get("additional_recipients").toString()));
          }

          // validate the optional field `additional_recipients` (array)
          for (int i = 0; i < jsonArrayadditionalRecipients.size(); i++) {
            AdditionalRecipient.validateJsonElement(jsonArrayadditionalRecipients.get(i));
          };
        }
      }
      if ((jsonObj.get("checkout_page_url") != null && !jsonObj.get("checkout_page_url").isJsonNull()) && !jsonObj.get("checkout_page_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkout_page_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkout_page_url").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("merchant_support_email") != null && !jsonObj.get("merchant_support_email").isJsonNull()) && !jsonObj.get("merchant_support_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_support_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_support_email").toString()));
      }
      // validate the optional field `order`
      if (jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) {
        Order.validateJsonElement(jsonObj.get("order"));
      }
      if ((jsonObj.get("pre_populate_buyer_email") != null && !jsonObj.get("pre_populate_buyer_email").isJsonNull()) && !jsonObj.get("pre_populate_buyer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pre_populate_buyer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pre_populate_buyer_email").toString()));
      }
      // validate the optional field `pre_populate_shipping_address`
      if (jsonObj.get("pre_populate_shipping_address") != null && !jsonObj.get("pre_populate_shipping_address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("pre_populate_shipping_address"));
      }
      if ((jsonObj.get("redirect_url") != null && !jsonObj.get("redirect_url").isJsonNull()) && !jsonObj.get("redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Checkout.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Checkout' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Checkout> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Checkout.class));

       return (TypeAdapter<T>) new TypeAdapter<Checkout>() {
           @Override
           public void write(JsonWriter out, Checkout value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Checkout read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Checkout given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Checkout
   * @throws IOException if the JSON string is invalid with respect to Checkout
   */
  public static Checkout fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Checkout.class);
  }

  /**
   * Convert an instance of Checkout to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

