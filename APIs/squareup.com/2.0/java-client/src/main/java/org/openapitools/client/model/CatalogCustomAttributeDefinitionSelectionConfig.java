/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration associated with &#x60;SELECTION&#x60;-type custom attribute definitions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogCustomAttributeDefinitionSelectionConfig {
  public static final String SERIALIZED_NAME_ALLOWED_SELECTIONS = "allowed_selections";
  @SerializedName(SERIALIZED_NAME_ALLOWED_SELECTIONS)
  private List<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection> allowedSelections = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_ALLOWED_SELECTIONS = "max_allowed_selections";
  @SerializedName(SERIALIZED_NAME_MAX_ALLOWED_SELECTIONS)
  private Integer maxAllowedSelections;

  public CatalogCustomAttributeDefinitionSelectionConfig() {
  }

  public CatalogCustomAttributeDefinitionSelectionConfig allowedSelections(List<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection> allowedSelections) {
    this.allowedSelections = allowedSelections;
    return this;
  }

  public CatalogCustomAttributeDefinitionSelectionConfig addAllowedSelectionsItem(CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection allowedSelectionsItem) {
    if (this.allowedSelections == null) {
      this.allowedSelections = new ArrayList<>();
    }
    this.allowedSelections.add(allowedSelectionsItem);
    return this;
  }

  /**
   * The set of valid &#x60;CatalogCustomAttributeSelections&#x60;. Up to a maximum of 100 selections can be defined. Can be modified.
   * @return allowedSelections
   */
  @javax.annotation.Nullable
  public List<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection> getAllowedSelections() {
    return allowedSelections;
  }

  public void setAllowedSelections(List<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection> allowedSelections) {
    this.allowedSelections = allowedSelections;
  }


  public CatalogCustomAttributeDefinitionSelectionConfig maxAllowedSelections(Integer maxAllowedSelections) {
    this.maxAllowedSelections = maxAllowedSelections;
    return this;
  }

  /**
   * The maximum number of selections that can be set. The maximum value for this attribute is 100. The default value is 1. The value can be modified, but changing the value will not affect existing custom attribute values on objects. Clients need to handle custom attributes with more selected values than allowed by this limit.
   * maximum: 100
   * @return maxAllowedSelections
   */
  @javax.annotation.Nullable
  public Integer getMaxAllowedSelections() {
    return maxAllowedSelections;
  }

  public void setMaxAllowedSelections(Integer maxAllowedSelections) {
    this.maxAllowedSelections = maxAllowedSelections;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogCustomAttributeDefinitionSelectionConfig catalogCustomAttributeDefinitionSelectionConfig = (CatalogCustomAttributeDefinitionSelectionConfig) o;
    return Objects.equals(this.allowedSelections, catalogCustomAttributeDefinitionSelectionConfig.allowedSelections) &&
        Objects.equals(this.maxAllowedSelections, catalogCustomAttributeDefinitionSelectionConfig.maxAllowedSelections);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedSelections, maxAllowedSelections);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogCustomAttributeDefinitionSelectionConfig {\n");
    sb.append("    allowedSelections: ").append(toIndentedString(allowedSelections)).append("\n");
    sb.append("    maxAllowedSelections: ").append(toIndentedString(maxAllowedSelections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_selections");
    openapiFields.add("max_allowed_selections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogCustomAttributeDefinitionSelectionConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogCustomAttributeDefinitionSelectionConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogCustomAttributeDefinitionSelectionConfig is not found in the empty JSON string", CatalogCustomAttributeDefinitionSelectionConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogCustomAttributeDefinitionSelectionConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogCustomAttributeDefinitionSelectionConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("allowed_selections") != null && !jsonObj.get("allowed_selections").isJsonNull()) {
        JsonArray jsonArrayallowedSelections = jsonObj.getAsJsonArray("allowed_selections");
        if (jsonArrayallowedSelections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allowed_selections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allowed_selections` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_selections").toString()));
          }

          // validate the optional field `allowed_selections` (array)
          for (int i = 0; i < jsonArrayallowedSelections.size(); i++) {
            CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection.validateJsonElement(jsonArrayallowedSelections.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogCustomAttributeDefinitionSelectionConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogCustomAttributeDefinitionSelectionConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogCustomAttributeDefinitionSelectionConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogCustomAttributeDefinitionSelectionConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogCustomAttributeDefinitionSelectionConfig>() {
           @Override
           public void write(JsonWriter out, CatalogCustomAttributeDefinitionSelectionConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogCustomAttributeDefinitionSelectionConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogCustomAttributeDefinitionSelectionConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogCustomAttributeDefinitionSelectionConfig
   * @throws IOException if the JSON string is invalid with respect to CatalogCustomAttributeDefinitionSelectionConfig
   */
  public static CatalogCustomAttributeDefinitionSelectionConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogCustomAttributeDefinitionSelectionConfig.class);
  }

  /**
   * Convert an instance of CatalogCustomAttributeDefinitionSelectionConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

