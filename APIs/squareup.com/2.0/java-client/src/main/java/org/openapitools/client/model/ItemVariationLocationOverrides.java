/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Price and inventory alerting overrides for a &#x60;CatalogItemVariation&#x60; at a specific &#x60;Location&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItemVariationLocationOverrides {
  public static final String SERIALIZED_NAME_INVENTORY_ALERT_THRESHOLD = "inventory_alert_threshold";
  @SerializedName(SERIALIZED_NAME_INVENTORY_ALERT_THRESHOLD)
  private Long inventoryAlertThreshold;

  public static final String SERIALIZED_NAME_INVENTORY_ALERT_TYPE = "inventory_alert_type";
  @SerializedName(SERIALIZED_NAME_INVENTORY_ALERT_TYPE)
  private String inventoryAlertType;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_PRICE_MONEY = "price_money";
  @SerializedName(SERIALIZED_NAME_PRICE_MONEY)
  private Money priceMoney;

  public static final String SERIALIZED_NAME_PRICING_TYPE = "pricing_type";
  @SerializedName(SERIALIZED_NAME_PRICING_TYPE)
  private String pricingType;

  public static final String SERIALIZED_NAME_TRACK_INVENTORY = "track_inventory";
  @SerializedName(SERIALIZED_NAME_TRACK_INVENTORY)
  private Boolean trackInventory;

  public ItemVariationLocationOverrides() {
  }

  public ItemVariationLocationOverrides inventoryAlertThreshold(Long inventoryAlertThreshold) {
    this.inventoryAlertThreshold = inventoryAlertThreshold;
    return this;
  }

  /**
   * If the inventory quantity for the variation is less than or equal to this value and &#x60;inventory_alert_type&#x60; is &#x60;LOW_QUANTITY&#x60;, the variation displays an alert in the merchant dashboard.  This value is always an integer.
   * @return inventoryAlertThreshold
   */
  @javax.annotation.Nullable
  public Long getInventoryAlertThreshold() {
    return inventoryAlertThreshold;
  }

  public void setInventoryAlertThreshold(Long inventoryAlertThreshold) {
    this.inventoryAlertThreshold = inventoryAlertThreshold;
  }


  public ItemVariationLocationOverrides inventoryAlertType(String inventoryAlertType) {
    this.inventoryAlertType = inventoryAlertType;
    return this;
  }

  /**
   * Indicates whether the &#x60;CatalogItemVariation&#x60; displays an alert when its inventory quantity is less than or equal to its &#x60;inventory_alert_threshold&#x60;.
   * @return inventoryAlertType
   */
  @javax.annotation.Nullable
  public String getInventoryAlertType() {
    return inventoryAlertType;
  }

  public void setInventoryAlertType(String inventoryAlertType) {
    this.inventoryAlertType = inventoryAlertType;
  }


  public ItemVariationLocationOverrides locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The ID of the &#x60;Location&#x60;. This can include locations that are deactivated.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public ItemVariationLocationOverrides priceMoney(Money priceMoney) {
    this.priceMoney = priceMoney;
    return this;
  }

  /**
   * Get priceMoney
   * @return priceMoney
   */
  @javax.annotation.Nullable
  public Money getPriceMoney() {
    return priceMoney;
  }

  public void setPriceMoney(Money priceMoney) {
    this.priceMoney = priceMoney;
  }


  public ItemVariationLocationOverrides pricingType(String pricingType) {
    this.pricingType = pricingType;
    return this;
  }

  /**
   * The pricing type (fixed or variable) for the &#x60;CatalogItemVariation&#x60; at the given &#x60;Location&#x60;.
   * @return pricingType
   */
  @javax.annotation.Nullable
  public String getPricingType() {
    return pricingType;
  }

  public void setPricingType(String pricingType) {
    this.pricingType = pricingType;
  }


  public ItemVariationLocationOverrides trackInventory(Boolean trackInventory) {
    this.trackInventory = trackInventory;
    return this;
  }

  /**
   * If &#x60;true&#x60;, inventory tracking is active for the &#x60;CatalogItemVariation&#x60; at this &#x60;Location&#x60;.
   * @return trackInventory
   */
  @javax.annotation.Nullable
  public Boolean getTrackInventory() {
    return trackInventory;
  }

  public void setTrackInventory(Boolean trackInventory) {
    this.trackInventory = trackInventory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemVariationLocationOverrides itemVariationLocationOverrides = (ItemVariationLocationOverrides) o;
    return Objects.equals(this.inventoryAlertThreshold, itemVariationLocationOverrides.inventoryAlertThreshold) &&
        Objects.equals(this.inventoryAlertType, itemVariationLocationOverrides.inventoryAlertType) &&
        Objects.equals(this.locationId, itemVariationLocationOverrides.locationId) &&
        Objects.equals(this.priceMoney, itemVariationLocationOverrides.priceMoney) &&
        Objects.equals(this.pricingType, itemVariationLocationOverrides.pricingType) &&
        Objects.equals(this.trackInventory, itemVariationLocationOverrides.trackInventory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inventoryAlertThreshold, inventoryAlertType, locationId, priceMoney, pricingType, trackInventory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemVariationLocationOverrides {\n");
    sb.append("    inventoryAlertThreshold: ").append(toIndentedString(inventoryAlertThreshold)).append("\n");
    sb.append("    inventoryAlertType: ").append(toIndentedString(inventoryAlertType)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    priceMoney: ").append(toIndentedString(priceMoney)).append("\n");
    sb.append("    pricingType: ").append(toIndentedString(pricingType)).append("\n");
    sb.append("    trackInventory: ").append(toIndentedString(trackInventory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inventory_alert_threshold");
    openapiFields.add("inventory_alert_type");
    openapiFields.add("location_id");
    openapiFields.add("price_money");
    openapiFields.add("pricing_type");
    openapiFields.add("track_inventory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemVariationLocationOverrides
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemVariationLocationOverrides.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemVariationLocationOverrides is not found in the empty JSON string", ItemVariationLocationOverrides.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemVariationLocationOverrides.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemVariationLocationOverrides` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("inventory_alert_type") != null && !jsonObj.get("inventory_alert_type").isJsonNull()) && !jsonObj.get("inventory_alert_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventory_alert_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventory_alert_type").toString()));
      }
      if ((jsonObj.get("location_id") != null && !jsonObj.get("location_id").isJsonNull()) && !jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      // validate the optional field `price_money`
      if (jsonObj.get("price_money") != null && !jsonObj.get("price_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("price_money"));
      }
      if ((jsonObj.get("pricing_type") != null && !jsonObj.get("pricing_type").isJsonNull()) && !jsonObj.get("pricing_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricing_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricing_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemVariationLocationOverrides.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemVariationLocationOverrides' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemVariationLocationOverrides> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemVariationLocationOverrides.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemVariationLocationOverrides>() {
           @Override
           public void write(JsonWriter out, ItemVariationLocationOverrides value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemVariationLocationOverrides read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemVariationLocationOverrides given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemVariationLocationOverrides
   * @throws IOException if the JSON string is invalid with respect to ItemVariationLocationOverrides
   */
  public static ItemVariationLocationOverrides fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemVariationLocationOverrides.class);
  }

  /**
   * Convert an instance of ItemVariationLocationOverrides to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

