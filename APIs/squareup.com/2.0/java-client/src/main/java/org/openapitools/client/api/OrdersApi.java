/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchRetrieveOrdersRequest;
import org.openapitools.client.model.BatchRetrieveOrdersResponse;
import org.openapitools.client.model.CalculateOrderRequest;
import org.openapitools.client.model.CalculateOrderResponse;
import org.openapitools.client.model.CreateOrderRequest;
import org.openapitools.client.model.CreateOrderResponse;
import org.openapitools.client.model.PayOrderRequest;
import org.openapitools.client.model.PayOrderResponse;
import org.openapitools.client.model.RetrieveOrderResponse;
import org.openapitools.client.model.SearchOrdersRequest;
import org.openapitools.client.model.SearchOrdersResponse;
import org.openapitools.client.model.UpdateOrderRequest;
import org.openapitools.client.model.UpdateOrderResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchRetrieveOrders
     * @param batchRetrieveOrdersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchRetrieveOrdersCall(BatchRetrieveOrdersRequest batchRetrieveOrdersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchRetrieveOrdersRequest;

        // create path and map variables
        String localVarPath = "/v2/orders/batch-retrieve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchRetrieveOrdersValidateBeforeCall(BatchRetrieveOrdersRequest batchRetrieveOrdersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchRetrieveOrdersRequest' is set
        if (batchRetrieveOrdersRequest == null) {
            throw new ApiException("Missing the required parameter 'batchRetrieveOrdersRequest' when calling batchRetrieveOrders(Async)");
        }

        return batchRetrieveOrdersCall(batchRetrieveOrdersRequest, _callback);

    }

    /**
     * BatchRetrieveOrders
     * Retrieves a set of [orders](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by their IDs.  If a given order ID does not exist, the ID is ignored instead of generating an error.
     * @param batchRetrieveOrdersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return BatchRetrieveOrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BatchRetrieveOrdersResponse batchRetrieveOrders(BatchRetrieveOrdersRequest batchRetrieveOrdersRequest) throws ApiException {
        ApiResponse<BatchRetrieveOrdersResponse> localVarResp = batchRetrieveOrdersWithHttpInfo(batchRetrieveOrdersRequest);
        return localVarResp.getData();
    }

    /**
     * BatchRetrieveOrders
     * Retrieves a set of [orders](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by their IDs.  If a given order ID does not exist, the ID is ignored instead of generating an error.
     * @param batchRetrieveOrdersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;BatchRetrieveOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchRetrieveOrdersResponse> batchRetrieveOrdersWithHttpInfo(BatchRetrieveOrdersRequest batchRetrieveOrdersRequest) throws ApiException {
        okhttp3.Call localVarCall = batchRetrieveOrdersValidateBeforeCall(batchRetrieveOrdersRequest, null);
        Type localVarReturnType = new TypeToken<BatchRetrieveOrdersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BatchRetrieveOrders (asynchronously)
     * Retrieves a set of [orders](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by their IDs.  If a given order ID does not exist, the ID is ignored instead of generating an error.
     * @param batchRetrieveOrdersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchRetrieveOrdersAsync(BatchRetrieveOrdersRequest batchRetrieveOrdersRequest, final ApiCallback<BatchRetrieveOrdersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchRetrieveOrdersValidateBeforeCall(batchRetrieveOrdersRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchRetrieveOrdersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateOrder
     * @param calculateOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateOrderCall(CalculateOrderRequest calculateOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = calculateOrderRequest;

        // create path and map variables
        String localVarPath = "/v2/orders/calculate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateOrderValidateBeforeCall(CalculateOrderRequest calculateOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'calculateOrderRequest' is set
        if (calculateOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'calculateOrderRequest' when calling calculateOrder(Async)");
        }

        return calculateOrderCall(calculateOrderRequest, _callback);

    }

    /**
     * CalculateOrder
     * Enables applications to preview order pricing without creating an order.
     * @param calculateOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return CalculateOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CalculateOrderResponse calculateOrder(CalculateOrderRequest calculateOrderRequest) throws ApiException {
        ApiResponse<CalculateOrderResponse> localVarResp = calculateOrderWithHttpInfo(calculateOrderRequest);
        return localVarResp.getData();
    }

    /**
     * CalculateOrder
     * Enables applications to preview order pricing without creating an order.
     * @param calculateOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;CalculateOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalculateOrderResponse> calculateOrderWithHttpInfo(CalculateOrderRequest calculateOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = calculateOrderValidateBeforeCall(calculateOrderRequest, null);
        Type localVarReturnType = new TypeToken<CalculateOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CalculateOrder (asynchronously)
     * Enables applications to preview order pricing without creating an order.
     * @param calculateOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateOrderAsync(CalculateOrderRequest calculateOrderRequest, final ApiCallback<CalculateOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateOrderValidateBeforeCall(calculateOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<CalculateOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrder
     * @param createOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderCall(CreateOrderRequest createOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrderRequest;

        // create path and map variables
        String localVarPath = "/v2/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrderValidateBeforeCall(CreateOrderRequest createOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createOrderRequest' is set
        if (createOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrderRequest' when calling createOrder(Async)");
        }

        return createOrderCall(createOrderRequest, _callback);

    }

    /**
     * CreateOrder
     * Creates a new [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that can include information about products for purchase and settings to apply to the purchase.  To pay for a created order, see  [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).  You can modify open orders using the [UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
     * @param createOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return CreateOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrderResponse createOrder(CreateOrderRequest createOrderRequest) throws ApiException {
        ApiResponse<CreateOrderResponse> localVarResp = createOrderWithHttpInfo(createOrderRequest);
        return localVarResp.getData();
    }

    /**
     * CreateOrder
     * Creates a new [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that can include information about products for purchase and settings to apply to the purchase.  To pay for a created order, see  [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).  You can modify open orders using the [UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
     * @param createOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;CreateOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateOrderResponse> createOrderWithHttpInfo(CreateOrderRequest createOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrderValidateBeforeCall(createOrderRequest, null);
        Type localVarReturnType = new TypeToken<CreateOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateOrder (asynchronously)
     * Creates a new [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that can include information about products for purchase and settings to apply to the purchase.  To pay for a created order, see  [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).  You can modify open orders using the [UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
     * @param createOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderAsync(CreateOrderRequest createOrderRequest, final ApiCallback<CreateOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrderValidateBeforeCall(createOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for payOrder
     * @param orderId The ID of the order being paid. (required)
     * @param payOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payOrderCall(String orderId, PayOrderRequest payOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payOrderRequest;

        // create path and map variables
        String localVarPath = "/v2/orders/{order_id}/pay"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call payOrderValidateBeforeCall(String orderId, PayOrderRequest payOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling payOrder(Async)");
        }

        // verify the required parameter 'payOrderRequest' is set
        if (payOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'payOrderRequest' when calling payOrder(Async)");
        }

        return payOrderCall(orderId, payOrderRequest, _callback);

    }

    /**
     * PayOrder
     * Pay for an [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) using one or more approved [payments](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) or settle an order with a total of &#x60;0&#x60;.  The total of the &#x60;payment_ids&#x60; listed in the request must be equal to the order total. Orders with a total amount of &#x60;0&#x60; can be marked as paid by specifying an empty array of &#x60;payment_ids&#x60; in the request.  To be used with &#x60;PayOrder&#x60;, a payment must:  - Reference the order by specifying the &#x60;order_id&#x60; when [creating the payment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment). Any approved payments that reference the same &#x60;order_id&#x60; not specified in the &#x60;payment_ids&#x60; is canceled. - Be approved with [delayed capture](https://developer.squareup.com/docs/payments-api/take-payments#delayed-capture). Using a delayed capture payment with &#x60;PayOrder&#x60; completes the approved payment.
     * @param orderId The ID of the order being paid. (required)
     * @param payOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return PayOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PayOrderResponse payOrder(String orderId, PayOrderRequest payOrderRequest) throws ApiException {
        ApiResponse<PayOrderResponse> localVarResp = payOrderWithHttpInfo(orderId, payOrderRequest);
        return localVarResp.getData();
    }

    /**
     * PayOrder
     * Pay for an [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) using one or more approved [payments](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) or settle an order with a total of &#x60;0&#x60;.  The total of the &#x60;payment_ids&#x60; listed in the request must be equal to the order total. Orders with a total amount of &#x60;0&#x60; can be marked as paid by specifying an empty array of &#x60;payment_ids&#x60; in the request.  To be used with &#x60;PayOrder&#x60;, a payment must:  - Reference the order by specifying the &#x60;order_id&#x60; when [creating the payment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment). Any approved payments that reference the same &#x60;order_id&#x60; not specified in the &#x60;payment_ids&#x60; is canceled. - Be approved with [delayed capture](https://developer.squareup.com/docs/payments-api/take-payments#delayed-capture). Using a delayed capture payment with &#x60;PayOrder&#x60; completes the approved payment.
     * @param orderId The ID of the order being paid. (required)
     * @param payOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;PayOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayOrderResponse> payOrderWithHttpInfo(String orderId, PayOrderRequest payOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = payOrderValidateBeforeCall(orderId, payOrderRequest, null);
        Type localVarReturnType = new TypeToken<PayOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PayOrder (asynchronously)
     * Pay for an [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) using one or more approved [payments](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) or settle an order with a total of &#x60;0&#x60;.  The total of the &#x60;payment_ids&#x60; listed in the request must be equal to the order total. Orders with a total amount of &#x60;0&#x60; can be marked as paid by specifying an empty array of &#x60;payment_ids&#x60; in the request.  To be used with &#x60;PayOrder&#x60;, a payment must:  - Reference the order by specifying the &#x60;order_id&#x60; when [creating the payment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment). Any approved payments that reference the same &#x60;order_id&#x60; not specified in the &#x60;payment_ids&#x60; is canceled. - Be approved with [delayed capture](https://developer.squareup.com/docs/payments-api/take-payments#delayed-capture). Using a delayed capture payment with &#x60;PayOrder&#x60; completes the approved payment.
     * @param orderId The ID of the order being paid. (required)
     * @param payOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payOrderAsync(String orderId, PayOrderRequest payOrderRequest, final ApiCallback<PayOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = payOrderValidateBeforeCall(orderId, payOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<PayOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchOrders
     * @param searchOrdersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchOrdersCall(SearchOrdersRequest searchOrdersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchOrdersRequest;

        // create path and map variables
        String localVarPath = "/v2/orders/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchOrdersValidateBeforeCall(SearchOrdersRequest searchOrdersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchOrdersRequest' is set
        if (searchOrdersRequest == null) {
            throw new ApiException("Missing the required parameter 'searchOrdersRequest' when calling searchOrders(Async)");
        }

        return searchOrdersCall(searchOrdersRequest, _callback);

    }

    /**
     * SearchOrders
     * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square ecosystem (such as Point of Sale, Invoices, and Connect APIs).  &#x60;SearchOrders&#x60; requests need to specify which locations to search and define a [SearchOrdersQuery](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersQuery) object that controls how to sort or filter the results. Your &#x60;SearchOrdersQuery&#x60; can:    Set filter criteria.   Set the sort order.   Determine whether to return results as complete &#x60;Order&#x60; objects or as [OrderEntry](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode might not be transmitted to Square for up to 72 hours. Offline orders have a &#x60;created_at&#x60; value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
     * @param searchOrdersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return SearchOrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SearchOrdersResponse searchOrders(SearchOrdersRequest searchOrdersRequest) throws ApiException {
        ApiResponse<SearchOrdersResponse> localVarResp = searchOrdersWithHttpInfo(searchOrdersRequest);
        return localVarResp.getData();
    }

    /**
     * SearchOrders
     * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square ecosystem (such as Point of Sale, Invoices, and Connect APIs).  &#x60;SearchOrders&#x60; requests need to specify which locations to search and define a [SearchOrdersQuery](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersQuery) object that controls how to sort or filter the results. Your &#x60;SearchOrdersQuery&#x60; can:    Set filter criteria.   Set the sort order.   Determine whether to return results as complete &#x60;Order&#x60; objects or as [OrderEntry](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode might not be transmitted to Square for up to 72 hours. Offline orders have a &#x60;created_at&#x60; value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
     * @param searchOrdersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;SearchOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchOrdersResponse> searchOrdersWithHttpInfo(SearchOrdersRequest searchOrdersRequest) throws ApiException {
        okhttp3.Call localVarCall = searchOrdersValidateBeforeCall(searchOrdersRequest, null);
        Type localVarReturnType = new TypeToken<SearchOrdersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SearchOrders (asynchronously)
     * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square ecosystem (such as Point of Sale, Invoices, and Connect APIs).  &#x60;SearchOrders&#x60; requests need to specify which locations to search and define a [SearchOrdersQuery](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersQuery) object that controls how to sort or filter the results. Your &#x60;SearchOrdersQuery&#x60; can:    Set filter criteria.   Set the sort order.   Determine whether to return results as complete &#x60;Order&#x60; objects or as [OrderEntry](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode might not be transmitted to Square for up to 72 hours. Offline orders have a &#x60;created_at&#x60; value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
     * @param searchOrdersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchOrdersAsync(SearchOrdersRequest searchOrdersRequest, final ApiCallback<SearchOrdersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchOrdersValidateBeforeCall(searchOrdersRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchOrdersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrdersOrderIdGet
     * @param orderId The ID of the order to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrdersOrderIdGetCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/orders/{order_id}"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrdersOrderIdGetValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling v2OrdersOrderIdGet(Async)");
        }

        return v2OrdersOrderIdGetCall(orderId, _callback);

    }

    /**
     * RetrieveOrder
     * Retrieves an [Order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by ID.
     * @param orderId The ID of the order to retrieve. (required)
     * @return RetrieveOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveOrderResponse v2OrdersOrderIdGet(String orderId) throws ApiException {
        ApiResponse<RetrieveOrderResponse> localVarResp = v2OrdersOrderIdGetWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * RetrieveOrder
     * Retrieves an [Order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by ID.
     * @param orderId The ID of the order to retrieve. (required)
     * @return ApiResponse&lt;RetrieveOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveOrderResponse> v2OrdersOrderIdGetWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = v2OrdersOrderIdGetValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<RetrieveOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveOrder (asynchronously)
     * Retrieves an [Order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by ID.
     * @param orderId The ID of the order to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrdersOrderIdGetAsync(String orderId, final ApiCallback<RetrieveOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrdersOrderIdGetValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrdersOrderIdPut
     * @param orderId The ID of the order to update. (required)
     * @param updateOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrdersOrderIdPutCall(String orderId, UpdateOrderRequest updateOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrderRequest;

        // create path and map variables
        String localVarPath = "/v2/orders/{order_id}"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrdersOrderIdPutValidateBeforeCall(String orderId, UpdateOrderRequest updateOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling v2OrdersOrderIdPut(Async)");
        }

        // verify the required parameter 'updateOrderRequest' is set
        if (updateOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'updateOrderRequest' when calling v2OrdersOrderIdPut(Async)");
        }

        return v2OrdersOrderIdPutCall(orderId, updateOrderRequest, _callback);

    }

    /**
     * UpdateOrder
     * Updates an open [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by adding, replacing, or deleting fields. Orders with a &#x60;COMPLETED&#x60; or &#x60;CANCELED&#x60; state cannot be updated.  An &#x60;UpdateOrder&#x60; request requires the following:  - The &#x60;order_id&#x60; in the endpoint path, identifying the order to update. - The latest &#x60;version&#x60; of the order to update. - The [sparse order](https://developer.squareup.com/docs/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version to which the update is being applied. - If deleting fields, the [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation) identifying the fields to clear.  To pay for an order, see  [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).
     * @param orderId The ID of the order to update. (required)
     * @param updateOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return UpdateOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOrderResponse v2OrdersOrderIdPut(String orderId, UpdateOrderRequest updateOrderRequest) throws ApiException {
        ApiResponse<UpdateOrderResponse> localVarResp = v2OrdersOrderIdPutWithHttpInfo(orderId, updateOrderRequest);
        return localVarResp.getData();
    }

    /**
     * UpdateOrder
     * Updates an open [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by adding, replacing, or deleting fields. Orders with a &#x60;COMPLETED&#x60; or &#x60;CANCELED&#x60; state cannot be updated.  An &#x60;UpdateOrder&#x60; request requires the following:  - The &#x60;order_id&#x60; in the endpoint path, identifying the order to update. - The latest &#x60;version&#x60; of the order to update. - The [sparse order](https://developer.squareup.com/docs/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version to which the update is being applied. - If deleting fields, the [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation) identifying the fields to clear.  To pay for an order, see  [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).
     * @param orderId The ID of the order to update. (required)
     * @param updateOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;UpdateOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateOrderResponse> v2OrdersOrderIdPutWithHttpInfo(String orderId, UpdateOrderRequest updateOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = v2OrdersOrderIdPutValidateBeforeCall(orderId, updateOrderRequest, null);
        Type localVarReturnType = new TypeToken<UpdateOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateOrder (asynchronously)
     * Updates an open [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by adding, replacing, or deleting fields. Orders with a &#x60;COMPLETED&#x60; or &#x60;CANCELED&#x60; state cannot be updated.  An &#x60;UpdateOrder&#x60; request requires the following:  - The &#x60;order_id&#x60; in the endpoint path, identifying the order to update. - The latest &#x60;version&#x60; of the order to update. - The [sparse order](https://developer.squareup.com/docs/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version to which the update is being applied. - If deleting fields, the [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation) identifying the fields to clear.  To pay for an order, see  [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).
     * @param orderId The ID of the order to update. (required)
     * @param updateOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrdersOrderIdPutAsync(String orderId, UpdateOrderRequest updateOrderRequest, final ApiCallback<UpdateOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrdersOrderIdPutValidateBeforeCall(orderId, updateOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
