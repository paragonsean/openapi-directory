/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V1ListEmployeeRolesRequest {
  public static final String SERIALIZED_NAME_BATCH_TOKEN = "batch_token";
  @SerializedName(SERIALIZED_NAME_BATCH_TOKEN)
  private String batchToken;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private String order;

  public V1ListEmployeeRolesRequest() {
  }

  public V1ListEmployeeRolesRequest batchToken(String batchToken) {
    this.batchToken = batchToken;
    return this;
  }

  /**
   * A pagination cursor to retrieve the next set of results for your original query to the endpoint.
   * @return batchToken
   */
  @javax.annotation.Nullable
  public String getBatchToken() {
    return batchToken;
  }

  public void setBatchToken(String batchToken) {
    this.batchToken = batchToken;
  }


  public V1ListEmployeeRolesRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public V1ListEmployeeRolesRequest order(String order) {
    this.order = order;
    return this;
  }

  /**
   * The order in which employees are listed in the response, based on their created_at field.Default value: ASC
   * @return order
   */
  @javax.annotation.Nullable
  public String getOrder() {
    return order;
  }

  public void setOrder(String order) {
    this.order = order;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ListEmployeeRolesRequest v1ListEmployeeRolesRequest = (V1ListEmployeeRolesRequest) o;
    return Objects.equals(this.batchToken, v1ListEmployeeRolesRequest.batchToken) &&
        Objects.equals(this.limit, v1ListEmployeeRolesRequest.limit) &&
        Objects.equals(this.order, v1ListEmployeeRolesRequest.order);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchToken, limit, order);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ListEmployeeRolesRequest {\n");
    sb.append("    batchToken: ").append(toIndentedString(batchToken)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("batch_token");
    openapiFields.add("limit");
    openapiFields.add("order");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1ListEmployeeRolesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1ListEmployeeRolesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1ListEmployeeRolesRequest is not found in the empty JSON string", V1ListEmployeeRolesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1ListEmployeeRolesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1ListEmployeeRolesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("batch_token") != null && !jsonObj.get("batch_token").isJsonNull()) && !jsonObj.get("batch_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batch_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batch_token").toString()));
      }
      if ((jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) && !jsonObj.get("order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1ListEmployeeRolesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1ListEmployeeRolesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1ListEmployeeRolesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1ListEmployeeRolesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<V1ListEmployeeRolesRequest>() {
           @Override
           public void write(JsonWriter out, V1ListEmployeeRolesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1ListEmployeeRolesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1ListEmployeeRolesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1ListEmployeeRolesRequest
   * @throws IOException if the JSON string is invalid with respect to V1ListEmployeeRolesRequest
   */
  public static V1ListEmployeeRolesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1ListEmployeeRolesRequest.class);
  }

  /**
   * Convert an instance of V1ListEmployeeRolesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

