/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a collection of catalog objects for the purpose of applying a &#x60;PricingRule&#x60;. Including a catalog object will include all of its subtypes. For example, including a category in a product set will include all of its items and associated item variations in the product set. Including an item in a product set will also include its item variations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogProductSet {
  public static final String SERIALIZED_NAME_ALL_PRODUCTS = "all_products";
  @SerializedName(SERIALIZED_NAME_ALL_PRODUCTS)
  private Boolean allProducts;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRODUCT_IDS_ALL = "product_ids_all";
  @SerializedName(SERIALIZED_NAME_PRODUCT_IDS_ALL)
  private List<String> productIdsAll = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT_IDS_ANY = "product_ids_any";
  @SerializedName(SERIALIZED_NAME_PRODUCT_IDS_ANY)
  private List<String> productIdsAny = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUANTITY_EXACT = "quantity_exact";
  @SerializedName(SERIALIZED_NAME_QUANTITY_EXACT)
  private Long quantityExact;

  public static final String SERIALIZED_NAME_QUANTITY_MAX = "quantity_max";
  @SerializedName(SERIALIZED_NAME_QUANTITY_MAX)
  private Long quantityMax;

  public static final String SERIALIZED_NAME_QUANTITY_MIN = "quantity_min";
  @SerializedName(SERIALIZED_NAME_QUANTITY_MIN)
  private Long quantityMin;

  public CatalogProductSet() {
  }

  public CatalogProductSet allProducts(Boolean allProducts) {
    this.allProducts = allProducts;
    return this;
  }

  /**
   * If set to &#x60;true&#x60;, the product set will include every item in the catalog. Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.
   * @return allProducts
   */
  @javax.annotation.Nullable
  public Boolean getAllProducts() {
    return allProducts;
  }

  public void setAllProducts(Boolean allProducts) {
    this.allProducts = allProducts;
  }


  public CatalogProductSet name(String name) {
    this.name = name;
    return this;
  }

  /**
   * User-defined name for the product set. For example, \&quot;Clearance Items\&quot; or \&quot;Winter Sale Items\&quot;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CatalogProductSet productIdsAll(List<String> productIdsAll) {
    this.productIdsAll = productIdsAll;
    return this;
  }

  public CatalogProductSet addProductIdsAllItem(String productIdsAllItem) {
    if (this.productIdsAll == null) {
      this.productIdsAll = new ArrayList<>();
    }
    this.productIdsAll.add(productIdsAllItem);
    return this;
  }

  /**
   * Unique IDs for any &#x60;CatalogObject&#x60; included in this product set. All objects in this set must be included in an order for a pricing rule to apply.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.  Max: 500 catalog object IDs.
   * @return productIdsAll
   */
  @javax.annotation.Nullable
  public List<String> getProductIdsAll() {
    return productIdsAll;
  }

  public void setProductIdsAll(List<String> productIdsAll) {
    this.productIdsAll = productIdsAll;
  }


  public CatalogProductSet productIdsAny(List<String> productIdsAny) {
    this.productIdsAny = productIdsAny;
    return this;
  }

  public CatalogProductSet addProductIdsAnyItem(String productIdsAnyItem) {
    if (this.productIdsAny == null) {
      this.productIdsAny = new ArrayList<>();
    }
    this.productIdsAny.add(productIdsAnyItem);
    return this;
  }

  /**
   *  Unique IDs for any &#x60;CatalogObject&#x60; included in this product set. Any number of these catalog objects can be in an order for a pricing rule to apply.  This can be used with &#x60;product_ids_all&#x60; in a parent &#x60;CatalogProductSet&#x60; to match groups of products for a bulk discount, such as a discount for an entree and side combo.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.  Max: 500 catalog object IDs.
   * @return productIdsAny
   */
  @javax.annotation.Nullable
  public List<String> getProductIdsAny() {
    return productIdsAny;
  }

  public void setProductIdsAny(List<String> productIdsAny) {
    this.productIdsAny = productIdsAny;
  }


  public CatalogProductSet quantityExact(Long quantityExact) {
    this.quantityExact = quantityExact;
    return this;
  }

  /**
   * If set, there must be exactly this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60; in the cart for the discount to apply.  Cannot be combined with either &#x60;quantity_min&#x60; or &#x60;quantity_max&#x60;.
   * @return quantityExact
   */
  @javax.annotation.Nullable
  public Long getQuantityExact() {
    return quantityExact;
  }

  public void setQuantityExact(Long quantityExact) {
    this.quantityExact = quantityExact;
  }


  public CatalogProductSet quantityMax(Long quantityMax) {
    this.quantityMax = quantityMax;
    return this;
  }

  /**
   * If set, the pricing rule will apply to a maximum of this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60;.
   * @return quantityMax
   */
  @javax.annotation.Nullable
  public Long getQuantityMax() {
    return quantityMax;
  }

  public void setQuantityMax(Long quantityMax) {
    this.quantityMax = quantityMax;
  }


  public CatalogProductSet quantityMin(Long quantityMin) {
    this.quantityMin = quantityMin;
    return this;
  }

  /**
   * If set, there must be at least this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60; in a cart for the discount to apply. See &#x60;quantity_exact&#x60;. Defaults to 0 if &#x60;quantity_exact&#x60;, &#x60;quantity_min&#x60; and &#x60;quantity_max&#x60; are all unspecified.
   * @return quantityMin
   */
  @javax.annotation.Nullable
  public Long getQuantityMin() {
    return quantityMin;
  }

  public void setQuantityMin(Long quantityMin) {
    this.quantityMin = quantityMin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogProductSet catalogProductSet = (CatalogProductSet) o;
    return Objects.equals(this.allProducts, catalogProductSet.allProducts) &&
        Objects.equals(this.name, catalogProductSet.name) &&
        Objects.equals(this.productIdsAll, catalogProductSet.productIdsAll) &&
        Objects.equals(this.productIdsAny, catalogProductSet.productIdsAny) &&
        Objects.equals(this.quantityExact, catalogProductSet.quantityExact) &&
        Objects.equals(this.quantityMax, catalogProductSet.quantityMax) &&
        Objects.equals(this.quantityMin, catalogProductSet.quantityMin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allProducts, name, productIdsAll, productIdsAny, quantityExact, quantityMax, quantityMin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogProductSet {\n");
    sb.append("    allProducts: ").append(toIndentedString(allProducts)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    productIdsAll: ").append(toIndentedString(productIdsAll)).append("\n");
    sb.append("    productIdsAny: ").append(toIndentedString(productIdsAny)).append("\n");
    sb.append("    quantityExact: ").append(toIndentedString(quantityExact)).append("\n");
    sb.append("    quantityMax: ").append(toIndentedString(quantityMax)).append("\n");
    sb.append("    quantityMin: ").append(toIndentedString(quantityMin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("all_products");
    openapiFields.add("name");
    openapiFields.add("product_ids_all");
    openapiFields.add("product_ids_any");
    openapiFields.add("quantity_exact");
    openapiFields.add("quantity_max");
    openapiFields.add("quantity_min");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogProductSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogProductSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogProductSet is not found in the empty JSON string", CatalogProductSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogProductSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogProductSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("product_ids_all") != null && !jsonObj.get("product_ids_all").isJsonNull() && !jsonObj.get("product_ids_all").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_ids_all` to be an array in the JSON string but got `%s`", jsonObj.get("product_ids_all").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("product_ids_any") != null && !jsonObj.get("product_ids_any").isJsonNull() && !jsonObj.get("product_ids_any").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_ids_any` to be an array in the JSON string but got `%s`", jsonObj.get("product_ids_any").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogProductSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogProductSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogProductSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogProductSet.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogProductSet>() {
           @Override
           public void write(JsonWriter out, CatalogProductSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogProductSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogProductSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogProductSet
   * @throws IOException if the JSON string is invalid with respect to CatalogProductSet
   */
  public static CatalogProductSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogProductSet.class);
  }

  /**
   * Convert an instance of CatalogProductSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

