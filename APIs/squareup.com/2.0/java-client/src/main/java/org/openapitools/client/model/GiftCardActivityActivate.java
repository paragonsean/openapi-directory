/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a gift card activity of the ACTIVATE type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GiftCardActivityActivate {
  public static final String SERIALIZED_NAME_AMOUNT_MONEY = "amount_money";
  @SerializedName(SERIALIZED_NAME_AMOUNT_MONEY)
  private Money amountMoney;

  public static final String SERIALIZED_NAME_BUYER_PAYMENT_INSTRUMENT_IDS = "buyer_payment_instrument_ids";
  @SerializedName(SERIALIZED_NAME_BUYER_PAYMENT_INSTRUMENT_IDS)
  private List<String> buyerPaymentInstrumentIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINE_ITEM_UID = "line_item_uid";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_UID)
  private String lineItemUid;

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "reference_id";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public GiftCardActivityActivate() {
  }

  public GiftCardActivityActivate amountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
    return this;
  }

  /**
   * Get amountMoney
   * @return amountMoney
   */
  @javax.annotation.Nullable
  public Money getAmountMoney() {
    return amountMoney;
  }

  public void setAmountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
  }


  public GiftCardActivityActivate buyerPaymentInstrumentIds(List<String> buyerPaymentInstrumentIds) {
    this.buyerPaymentInstrumentIds = buyerPaymentInstrumentIds;
    return this;
  }

  public GiftCardActivityActivate addBuyerPaymentInstrumentIdsItem(String buyerPaymentInstrumentIdsItem) {
    if (this.buyerPaymentInstrumentIds == null) {
      this.buyerPaymentInstrumentIds = new ArrayList<>();
    }
    this.buyerPaymentInstrumentIds.add(buyerPaymentInstrumentIdsItem);
    return this;
  }

  /**
   * Required if your application does not use the Square Orders API.  This is a list of client-provided payment instrument IDs.  Square uses this information to perform compliance checks. If you use the Square Orders API, Square has the necessary instrument IDs to perform necessary  compliance checks.
   * @return buyerPaymentInstrumentIds
   */
  @javax.annotation.Nullable
  public List<String> getBuyerPaymentInstrumentIds() {
    return buyerPaymentInstrumentIds;
  }

  public void setBuyerPaymentInstrumentIds(List<String> buyerPaymentInstrumentIds) {
    this.buyerPaymentInstrumentIds = buyerPaymentInstrumentIds;
  }


  public GiftCardActivityActivate lineItemUid(String lineItemUid) {
    this.lineItemUid = lineItemUid;
    return this;
  }

  /**
   * The &#x60;line_item_uid&#x60; of the gift card line item in an order.  This is required if your application uses the Square Orders API.
   * @return lineItemUid
   */
  @javax.annotation.Nullable
  public String getLineItemUid() {
    return lineItemUid;
  }

  public void setLineItemUid(String lineItemUid) {
    this.lineItemUid = lineItemUid;
  }


  public GiftCardActivityActivate orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The ID of the order associated with the activity.  This is required if your application uses the Square Orders API.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public GiftCardActivityActivate referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * If your application does not use the Square Orders API, you can optionally use this field  to associate the gift card activity with a client-side entity.
   * @return referenceId
   */
  @javax.annotation.Nullable
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GiftCardActivityActivate giftCardActivityActivate = (GiftCardActivityActivate) o;
    return Objects.equals(this.amountMoney, giftCardActivityActivate.amountMoney) &&
        Objects.equals(this.buyerPaymentInstrumentIds, giftCardActivityActivate.buyerPaymentInstrumentIds) &&
        Objects.equals(this.lineItemUid, giftCardActivityActivate.lineItemUid) &&
        Objects.equals(this.orderId, giftCardActivityActivate.orderId) &&
        Objects.equals(this.referenceId, giftCardActivityActivate.referenceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountMoney, buyerPaymentInstrumentIds, lineItemUid, orderId, referenceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GiftCardActivityActivate {\n");
    sb.append("    amountMoney: ").append(toIndentedString(amountMoney)).append("\n");
    sb.append("    buyerPaymentInstrumentIds: ").append(toIndentedString(buyerPaymentInstrumentIds)).append("\n");
    sb.append("    lineItemUid: ").append(toIndentedString(lineItemUid)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount_money");
    openapiFields.add("buyer_payment_instrument_ids");
    openapiFields.add("line_item_uid");
    openapiFields.add("order_id");
    openapiFields.add("reference_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GiftCardActivityActivate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GiftCardActivityActivate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GiftCardActivityActivate is not found in the empty JSON string", GiftCardActivityActivate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GiftCardActivityActivate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GiftCardActivityActivate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amount_money`
      if (jsonObj.get("amount_money") != null && !jsonObj.get("amount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("amount_money"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("buyer_payment_instrument_ids") != null && !jsonObj.get("buyer_payment_instrument_ids").isJsonNull() && !jsonObj.get("buyer_payment_instrument_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_payment_instrument_ids` to be an array in the JSON string but got `%s`", jsonObj.get("buyer_payment_instrument_ids").toString()));
      }
      if ((jsonObj.get("line_item_uid") != null && !jsonObj.get("line_item_uid").isJsonNull()) && !jsonObj.get("line_item_uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line_item_uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line_item_uid").toString()));
      }
      if ((jsonObj.get("order_id") != null && !jsonObj.get("order_id").isJsonNull()) && !jsonObj.get("order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_id").toString()));
      }
      if ((jsonObj.get("reference_id") != null && !jsonObj.get("reference_id").isJsonNull()) && !jsonObj.get("reference_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GiftCardActivityActivate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GiftCardActivityActivate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GiftCardActivityActivate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GiftCardActivityActivate.class));

       return (TypeAdapter<T>) new TypeAdapter<GiftCardActivityActivate>() {
           @Override
           public void write(JsonWriter out, GiftCardActivityActivate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GiftCardActivityActivate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GiftCardActivityActivate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GiftCardActivityActivate
   * @throws IOException if the JSON string is invalid with respect to GiftCardActivityActivate
   */
  public static GiftCardActivityActivate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GiftCardActivityActivate.class);
  }

  /**
   * Convert an instance of GiftCardActivityActivate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

