/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The service appointment settings, including where and how the service is provided.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BusinessAppointmentSettings {
  public static final String SERIALIZED_NAME_ALIGNMENT_TIME = "alignment_time";
  @SerializedName(SERIALIZED_NAME_ALIGNMENT_TIME)
  private String alignmentTime;

  public static final String SERIALIZED_NAME_ANY_TEAM_MEMBER_BOOKING_ENABLED = "any_team_member_booking_enabled";
  @SerializedName(SERIALIZED_NAME_ANY_TEAM_MEMBER_BOOKING_ENABLED)
  private Boolean anyTeamMemberBookingEnabled;

  public static final String SERIALIZED_NAME_CANCELLATION_FEE_MONEY = "cancellation_fee_money";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_FEE_MONEY)
  private Money cancellationFeeMoney;

  public static final String SERIALIZED_NAME_CANCELLATION_POLICY = "cancellation_policy";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_POLICY)
  private String cancellationPolicy;

  public static final String SERIALIZED_NAME_CANCELLATION_POLICY_TEXT = "cancellation_policy_text";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_POLICY_TEXT)
  private String cancellationPolicyText;

  public static final String SERIALIZED_NAME_CANCELLATION_WINDOW_SECONDS = "cancellation_window_seconds";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_WINDOW_SECONDS)
  private Integer cancellationWindowSeconds;

  public static final String SERIALIZED_NAME_LOCATION_TYPES = "location_types";
  @SerializedName(SERIALIZED_NAME_LOCATION_TYPES)
  private List<String> locationTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_APPOINTMENTS_PER_DAY_LIMIT = "max_appointments_per_day_limit";
  @SerializedName(SERIALIZED_NAME_MAX_APPOINTMENTS_PER_DAY_LIMIT)
  private Integer maxAppointmentsPerDayLimit;

  public static final String SERIALIZED_NAME_MAX_APPOINTMENTS_PER_DAY_LIMIT_TYPE = "max_appointments_per_day_limit_type";
  @SerializedName(SERIALIZED_NAME_MAX_APPOINTMENTS_PER_DAY_LIMIT_TYPE)
  private String maxAppointmentsPerDayLimitType;

  public static final String SERIALIZED_NAME_MAX_BOOKING_LEAD_TIME_SECONDS = "max_booking_lead_time_seconds";
  @SerializedName(SERIALIZED_NAME_MAX_BOOKING_LEAD_TIME_SECONDS)
  private Integer maxBookingLeadTimeSeconds;

  public static final String SERIALIZED_NAME_MIN_BOOKING_LEAD_TIME_SECONDS = "min_booking_lead_time_seconds";
  @SerializedName(SERIALIZED_NAME_MIN_BOOKING_LEAD_TIME_SECONDS)
  private Integer minBookingLeadTimeSeconds;

  public static final String SERIALIZED_NAME_MULTIPLE_SERVICE_BOOKING_ENABLED = "multiple_service_booking_enabled";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_SERVICE_BOOKING_ENABLED)
  private Boolean multipleServiceBookingEnabled;

  public static final String SERIALIZED_NAME_SKIP_BOOKING_FLOW_STAFF_SELECTION = "skip_booking_flow_staff_selection";
  @SerializedName(SERIALIZED_NAME_SKIP_BOOKING_FLOW_STAFF_SELECTION)
  private Boolean skipBookingFlowStaffSelection;

  public BusinessAppointmentSettings() {
  }

  public BusinessAppointmentSettings alignmentTime(String alignmentTime) {
    this.alignmentTime = alignmentTime;
    return this;
  }

  /**
   * The time unit of the service duration for bookings.
   * @return alignmentTime
   */
  @javax.annotation.Nullable
  public String getAlignmentTime() {
    return alignmentTime;
  }

  public void setAlignmentTime(String alignmentTime) {
    this.alignmentTime = alignmentTime;
  }


  public BusinessAppointmentSettings anyTeamMemberBookingEnabled(Boolean anyTeamMemberBookingEnabled) {
    this.anyTeamMemberBookingEnabled = anyTeamMemberBookingEnabled;
    return this;
  }

  /**
   * Indicates whether a customer can choose from all available time slots and have a staff member assigned automatically (&#x60;true&#x60;) or not (&#x60;false&#x60;).
   * @return anyTeamMemberBookingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAnyTeamMemberBookingEnabled() {
    return anyTeamMemberBookingEnabled;
  }

  public void setAnyTeamMemberBookingEnabled(Boolean anyTeamMemberBookingEnabled) {
    this.anyTeamMemberBookingEnabled = anyTeamMemberBookingEnabled;
  }


  public BusinessAppointmentSettings cancellationFeeMoney(Money cancellationFeeMoney) {
    this.cancellationFeeMoney = cancellationFeeMoney;
    return this;
  }

  /**
   * Get cancellationFeeMoney
   * @return cancellationFeeMoney
   */
  @javax.annotation.Nullable
  public Money getCancellationFeeMoney() {
    return cancellationFeeMoney;
  }

  public void setCancellationFeeMoney(Money cancellationFeeMoney) {
    this.cancellationFeeMoney = cancellationFeeMoney;
  }


  public BusinessAppointmentSettings cancellationPolicy(String cancellationPolicy) {
    this.cancellationPolicy = cancellationPolicy;
    return this;
  }

  /**
   * The cancellation policy adopted by the seller.
   * @return cancellationPolicy
   */
  @javax.annotation.Nullable
  public String getCancellationPolicy() {
    return cancellationPolicy;
  }

  public void setCancellationPolicy(String cancellationPolicy) {
    this.cancellationPolicy = cancellationPolicy;
  }


  public BusinessAppointmentSettings cancellationPolicyText(String cancellationPolicyText) {
    this.cancellationPolicyText = cancellationPolicyText;
    return this;
  }

  /**
   * The free-form text of the seller&#39;s cancellation policy.
   * @return cancellationPolicyText
   */
  @javax.annotation.Nullable
  public String getCancellationPolicyText() {
    return cancellationPolicyText;
  }

  public void setCancellationPolicyText(String cancellationPolicyText) {
    this.cancellationPolicyText = cancellationPolicyText;
  }


  public BusinessAppointmentSettings cancellationWindowSeconds(Integer cancellationWindowSeconds) {
    this.cancellationWindowSeconds = cancellationWindowSeconds;
    return this;
  }

  /**
   * The cut-off time in seconds for allowing clients to cancel or reschedule an appointment.
   * @return cancellationWindowSeconds
   */
  @javax.annotation.Nullable
  public Integer getCancellationWindowSeconds() {
    return cancellationWindowSeconds;
  }

  public void setCancellationWindowSeconds(Integer cancellationWindowSeconds) {
    this.cancellationWindowSeconds = cancellationWindowSeconds;
  }


  public BusinessAppointmentSettings locationTypes(List<String> locationTypes) {
    this.locationTypes = locationTypes;
    return this;
  }

  public BusinessAppointmentSettings addLocationTypesItem(String locationTypesItem) {
    if (this.locationTypes == null) {
      this.locationTypes = new ArrayList<>();
    }
    this.locationTypes.add(locationTypesItem);
    return this;
  }

  /**
   * Types of the location allowed for bookings.
   * @return locationTypes
   */
  @javax.annotation.Nullable
  public List<String> getLocationTypes() {
    return locationTypes;
  }

  public void setLocationTypes(List<String> locationTypes) {
    this.locationTypes = locationTypes;
  }


  public BusinessAppointmentSettings maxAppointmentsPerDayLimit(Integer maxAppointmentsPerDayLimit) {
    this.maxAppointmentsPerDayLimit = maxAppointmentsPerDayLimit;
    return this;
  }

  /**
   * The maximum number of daily appointments per team member or per location.
   * @return maxAppointmentsPerDayLimit
   */
  @javax.annotation.Nullable
  public Integer getMaxAppointmentsPerDayLimit() {
    return maxAppointmentsPerDayLimit;
  }

  public void setMaxAppointmentsPerDayLimit(Integer maxAppointmentsPerDayLimit) {
    this.maxAppointmentsPerDayLimit = maxAppointmentsPerDayLimit;
  }


  public BusinessAppointmentSettings maxAppointmentsPerDayLimitType(String maxAppointmentsPerDayLimitType) {
    this.maxAppointmentsPerDayLimitType = maxAppointmentsPerDayLimitType;
    return this;
  }

  /**
   * Indicates whether the daily appointment limit applies to team members or to business locations.
   * @return maxAppointmentsPerDayLimitType
   */
  @javax.annotation.Nullable
  public String getMaxAppointmentsPerDayLimitType() {
    return maxAppointmentsPerDayLimitType;
  }

  public void setMaxAppointmentsPerDayLimitType(String maxAppointmentsPerDayLimitType) {
    this.maxAppointmentsPerDayLimitType = maxAppointmentsPerDayLimitType;
  }


  public BusinessAppointmentSettings maxBookingLeadTimeSeconds(Integer maxBookingLeadTimeSeconds) {
    this.maxBookingLeadTimeSeconds = maxBookingLeadTimeSeconds;
    return this;
  }

  /**
   * The maximum lead time in seconds before a service can be booked. Bookings must be created at most this far ahead of the booking&#39;s starting time.
   * @return maxBookingLeadTimeSeconds
   */
  @javax.annotation.Nullable
  public Integer getMaxBookingLeadTimeSeconds() {
    return maxBookingLeadTimeSeconds;
  }

  public void setMaxBookingLeadTimeSeconds(Integer maxBookingLeadTimeSeconds) {
    this.maxBookingLeadTimeSeconds = maxBookingLeadTimeSeconds;
  }


  public BusinessAppointmentSettings minBookingLeadTimeSeconds(Integer minBookingLeadTimeSeconds) {
    this.minBookingLeadTimeSeconds = minBookingLeadTimeSeconds;
    return this;
  }

  /**
   * The minimum lead time in seconds before a service can be booked. Bookings must be created at least this far ahead of the booking&#39;s starting time.
   * @return minBookingLeadTimeSeconds
   */
  @javax.annotation.Nullable
  public Integer getMinBookingLeadTimeSeconds() {
    return minBookingLeadTimeSeconds;
  }

  public void setMinBookingLeadTimeSeconds(Integer minBookingLeadTimeSeconds) {
    this.minBookingLeadTimeSeconds = minBookingLeadTimeSeconds;
  }


  public BusinessAppointmentSettings multipleServiceBookingEnabled(Boolean multipleServiceBookingEnabled) {
    this.multipleServiceBookingEnabled = multipleServiceBookingEnabled;
    return this;
  }

  /**
   * Indicates whether a customer can book multiple services in a single online booking.
   * @return multipleServiceBookingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMultipleServiceBookingEnabled() {
    return multipleServiceBookingEnabled;
  }

  public void setMultipleServiceBookingEnabled(Boolean multipleServiceBookingEnabled) {
    this.multipleServiceBookingEnabled = multipleServiceBookingEnabled;
  }


  public BusinessAppointmentSettings skipBookingFlowStaffSelection(Boolean skipBookingFlowStaffSelection) {
    this.skipBookingFlowStaffSelection = skipBookingFlowStaffSelection;
    return this;
  }

  /**
   * Indicates whether customers has an assigned staff member (&#x60;true&#x60;) or can select s staff member of their choice (&#x60;false&#x60;).
   * @return skipBookingFlowStaffSelection
   */
  @javax.annotation.Nullable
  public Boolean getSkipBookingFlowStaffSelection() {
    return skipBookingFlowStaffSelection;
  }

  public void setSkipBookingFlowStaffSelection(Boolean skipBookingFlowStaffSelection) {
    this.skipBookingFlowStaffSelection = skipBookingFlowStaffSelection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessAppointmentSettings businessAppointmentSettings = (BusinessAppointmentSettings) o;
    return Objects.equals(this.alignmentTime, businessAppointmentSettings.alignmentTime) &&
        Objects.equals(this.anyTeamMemberBookingEnabled, businessAppointmentSettings.anyTeamMemberBookingEnabled) &&
        Objects.equals(this.cancellationFeeMoney, businessAppointmentSettings.cancellationFeeMoney) &&
        Objects.equals(this.cancellationPolicy, businessAppointmentSettings.cancellationPolicy) &&
        Objects.equals(this.cancellationPolicyText, businessAppointmentSettings.cancellationPolicyText) &&
        Objects.equals(this.cancellationWindowSeconds, businessAppointmentSettings.cancellationWindowSeconds) &&
        Objects.equals(this.locationTypes, businessAppointmentSettings.locationTypes) &&
        Objects.equals(this.maxAppointmentsPerDayLimit, businessAppointmentSettings.maxAppointmentsPerDayLimit) &&
        Objects.equals(this.maxAppointmentsPerDayLimitType, businessAppointmentSettings.maxAppointmentsPerDayLimitType) &&
        Objects.equals(this.maxBookingLeadTimeSeconds, businessAppointmentSettings.maxBookingLeadTimeSeconds) &&
        Objects.equals(this.minBookingLeadTimeSeconds, businessAppointmentSettings.minBookingLeadTimeSeconds) &&
        Objects.equals(this.multipleServiceBookingEnabled, businessAppointmentSettings.multipleServiceBookingEnabled) &&
        Objects.equals(this.skipBookingFlowStaffSelection, businessAppointmentSettings.skipBookingFlowStaffSelection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alignmentTime, anyTeamMemberBookingEnabled, cancellationFeeMoney, cancellationPolicy, cancellationPolicyText, cancellationWindowSeconds, locationTypes, maxAppointmentsPerDayLimit, maxAppointmentsPerDayLimitType, maxBookingLeadTimeSeconds, minBookingLeadTimeSeconds, multipleServiceBookingEnabled, skipBookingFlowStaffSelection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessAppointmentSettings {\n");
    sb.append("    alignmentTime: ").append(toIndentedString(alignmentTime)).append("\n");
    sb.append("    anyTeamMemberBookingEnabled: ").append(toIndentedString(anyTeamMemberBookingEnabled)).append("\n");
    sb.append("    cancellationFeeMoney: ").append(toIndentedString(cancellationFeeMoney)).append("\n");
    sb.append("    cancellationPolicy: ").append(toIndentedString(cancellationPolicy)).append("\n");
    sb.append("    cancellationPolicyText: ").append(toIndentedString(cancellationPolicyText)).append("\n");
    sb.append("    cancellationWindowSeconds: ").append(toIndentedString(cancellationWindowSeconds)).append("\n");
    sb.append("    locationTypes: ").append(toIndentedString(locationTypes)).append("\n");
    sb.append("    maxAppointmentsPerDayLimit: ").append(toIndentedString(maxAppointmentsPerDayLimit)).append("\n");
    sb.append("    maxAppointmentsPerDayLimitType: ").append(toIndentedString(maxAppointmentsPerDayLimitType)).append("\n");
    sb.append("    maxBookingLeadTimeSeconds: ").append(toIndentedString(maxBookingLeadTimeSeconds)).append("\n");
    sb.append("    minBookingLeadTimeSeconds: ").append(toIndentedString(minBookingLeadTimeSeconds)).append("\n");
    sb.append("    multipleServiceBookingEnabled: ").append(toIndentedString(multipleServiceBookingEnabled)).append("\n");
    sb.append("    skipBookingFlowStaffSelection: ").append(toIndentedString(skipBookingFlowStaffSelection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alignment_time");
    openapiFields.add("any_team_member_booking_enabled");
    openapiFields.add("cancellation_fee_money");
    openapiFields.add("cancellation_policy");
    openapiFields.add("cancellation_policy_text");
    openapiFields.add("cancellation_window_seconds");
    openapiFields.add("location_types");
    openapiFields.add("max_appointments_per_day_limit");
    openapiFields.add("max_appointments_per_day_limit_type");
    openapiFields.add("max_booking_lead_time_seconds");
    openapiFields.add("min_booking_lead_time_seconds");
    openapiFields.add("multiple_service_booking_enabled");
    openapiFields.add("skip_booking_flow_staff_selection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BusinessAppointmentSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BusinessAppointmentSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessAppointmentSettings is not found in the empty JSON string", BusinessAppointmentSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BusinessAppointmentSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BusinessAppointmentSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alignment_time") != null && !jsonObj.get("alignment_time").isJsonNull()) && !jsonObj.get("alignment_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alignment_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alignment_time").toString()));
      }
      // validate the optional field `cancellation_fee_money`
      if (jsonObj.get("cancellation_fee_money") != null && !jsonObj.get("cancellation_fee_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("cancellation_fee_money"));
      }
      if ((jsonObj.get("cancellation_policy") != null && !jsonObj.get("cancellation_policy").isJsonNull()) && !jsonObj.get("cancellation_policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancellation_policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancellation_policy").toString()));
      }
      if ((jsonObj.get("cancellation_policy_text") != null && !jsonObj.get("cancellation_policy_text").isJsonNull()) && !jsonObj.get("cancellation_policy_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancellation_policy_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancellation_policy_text").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("location_types") != null && !jsonObj.get("location_types").isJsonNull() && !jsonObj.get("location_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_types` to be an array in the JSON string but got `%s`", jsonObj.get("location_types").toString()));
      }
      if ((jsonObj.get("max_appointments_per_day_limit_type") != null && !jsonObj.get("max_appointments_per_day_limit_type").isJsonNull()) && !jsonObj.get("max_appointments_per_day_limit_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_appointments_per_day_limit_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_appointments_per_day_limit_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessAppointmentSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessAppointmentSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessAppointmentSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessAppointmentSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessAppointmentSettings>() {
           @Override
           public void write(JsonWriter out, BusinessAppointmentSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessAppointmentSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BusinessAppointmentSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BusinessAppointmentSettings
   * @throws IOException if the JSON string is invalid with respect to BusinessAppointmentSettings
   */
  public static BusinessAppointmentSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessAppointmentSettings.class);
  }

  /**
   * Convert an instance of BusinessAppointmentSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

