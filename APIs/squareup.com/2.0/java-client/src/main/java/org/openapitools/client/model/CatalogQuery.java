/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CatalogQueryExact;
import org.openapitools.client.model.CatalogQueryItemVariationsForItemOptionValues;
import org.openapitools.client.model.CatalogQueryItemsForItemOptions;
import org.openapitools.client.model.CatalogQueryItemsForModifierList;
import org.openapitools.client.model.CatalogQueryItemsForTax;
import org.openapitools.client.model.CatalogQueryPrefix;
import org.openapitools.client.model.CatalogQueryRange;
import org.openapitools.client.model.CatalogQuerySet;
import org.openapitools.client.model.CatalogQuerySortedAttribute;
import org.openapitools.client.model.CatalogQueryText;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the &#x60;SearchCatalogObjects&#x60; endpoint.  Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects). Any combination of the following types may be used together: - [exact_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryExact) - [prefix_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryPrefix) - [range_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryRange) - [sorted_attribute_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQuerySortedAttribute) - [text_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryText) All other query types cannot be combined with any others.  When a query filter is based on an attribute, the attribute must be searchable. Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.  * Searchable attribute and objects queryable by searchable attributes ** - &#x60;name&#x60;:  &#x60;CatalogItem&#x60;, &#x60;CatalogItemVariation&#x60;, &#x60;CatalogCategory&#x60;, &#x60;CatalogTax&#x60;, &#x60;CatalogDiscount&#x60;, &#x60;CatalogModifier&#x60;, &#39;CatalogModifierList&#x60;, &#x60;CatalogItemOption&#x60;, &#x60;CatalogItemOptionValue&#x60; - &#x60;description&#x60;: &#x60;CatalogItem&#x60;, &#x60;CatalogItemOptionValue&#x60; - &#x60;abbreviation&#x60;: &#x60;CatalogItem&#x60; - &#x60;upc&#x60;: &#x60;CatalogItemVariation&#x60; - &#x60;sku&#x60;: &#x60;CatalogItemVariation&#x60; - &#x60;caption&#x60;: &#x60;CatalogImage&#x60; - &#x60;display_name&#x60;: &#x60;CatalogItemOption&#x60;  For example, to search for [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) objects by searchable attributes, you can use the &#x60;\&quot;name\&quot;&#x60;, &#x60;\&quot;description\&quot;&#x60;, or &#x60;\&quot;abbreviation\&quot;&#x60; attribute in an applicable query filter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogQuery {
  public static final String SERIALIZED_NAME_EXACT_QUERY = "exact_query";
  @SerializedName(SERIALIZED_NAME_EXACT_QUERY)
  private CatalogQueryExact exactQuery;

  public static final String SERIALIZED_NAME_ITEM_VARIATIONS_FOR_ITEM_OPTION_VALUES_QUERY = "item_variations_for_item_option_values_query";
  @SerializedName(SERIALIZED_NAME_ITEM_VARIATIONS_FOR_ITEM_OPTION_VALUES_QUERY)
  private CatalogQueryItemVariationsForItemOptionValues itemVariationsForItemOptionValuesQuery;

  public static final String SERIALIZED_NAME_ITEMS_FOR_ITEM_OPTIONS_QUERY = "items_for_item_options_query";
  @SerializedName(SERIALIZED_NAME_ITEMS_FOR_ITEM_OPTIONS_QUERY)
  private CatalogQueryItemsForItemOptions itemsForItemOptionsQuery;

  public static final String SERIALIZED_NAME_ITEMS_FOR_MODIFIER_LIST_QUERY = "items_for_modifier_list_query";
  @SerializedName(SERIALIZED_NAME_ITEMS_FOR_MODIFIER_LIST_QUERY)
  private CatalogQueryItemsForModifierList itemsForModifierListQuery;

  public static final String SERIALIZED_NAME_ITEMS_FOR_TAX_QUERY = "items_for_tax_query";
  @SerializedName(SERIALIZED_NAME_ITEMS_FOR_TAX_QUERY)
  private CatalogQueryItemsForTax itemsForTaxQuery;

  public static final String SERIALIZED_NAME_PREFIX_QUERY = "prefix_query";
  @SerializedName(SERIALIZED_NAME_PREFIX_QUERY)
  private CatalogQueryPrefix prefixQuery;

  public static final String SERIALIZED_NAME_RANGE_QUERY = "range_query";
  @SerializedName(SERIALIZED_NAME_RANGE_QUERY)
  private CatalogQueryRange rangeQuery;

  public static final String SERIALIZED_NAME_SET_QUERY = "set_query";
  @SerializedName(SERIALIZED_NAME_SET_QUERY)
  private CatalogQuerySet setQuery;

  public static final String SERIALIZED_NAME_SORTED_ATTRIBUTE_QUERY = "sorted_attribute_query";
  @SerializedName(SERIALIZED_NAME_SORTED_ATTRIBUTE_QUERY)
  private CatalogQuerySortedAttribute sortedAttributeQuery;

  public static final String SERIALIZED_NAME_TEXT_QUERY = "text_query";
  @SerializedName(SERIALIZED_NAME_TEXT_QUERY)
  private CatalogQueryText textQuery;

  public CatalogQuery() {
  }

  public CatalogQuery exactQuery(CatalogQueryExact exactQuery) {
    this.exactQuery = exactQuery;
    return this;
  }

  /**
   * Get exactQuery
   * @return exactQuery
   */
  @javax.annotation.Nullable
  public CatalogQueryExact getExactQuery() {
    return exactQuery;
  }

  public void setExactQuery(CatalogQueryExact exactQuery) {
    this.exactQuery = exactQuery;
  }


  public CatalogQuery itemVariationsForItemOptionValuesQuery(CatalogQueryItemVariationsForItemOptionValues itemVariationsForItemOptionValuesQuery) {
    this.itemVariationsForItemOptionValuesQuery = itemVariationsForItemOptionValuesQuery;
    return this;
  }

  /**
   * Get itemVariationsForItemOptionValuesQuery
   * @return itemVariationsForItemOptionValuesQuery
   */
  @javax.annotation.Nullable
  public CatalogQueryItemVariationsForItemOptionValues getItemVariationsForItemOptionValuesQuery() {
    return itemVariationsForItemOptionValuesQuery;
  }

  public void setItemVariationsForItemOptionValuesQuery(CatalogQueryItemVariationsForItemOptionValues itemVariationsForItemOptionValuesQuery) {
    this.itemVariationsForItemOptionValuesQuery = itemVariationsForItemOptionValuesQuery;
  }


  public CatalogQuery itemsForItemOptionsQuery(CatalogQueryItemsForItemOptions itemsForItemOptionsQuery) {
    this.itemsForItemOptionsQuery = itemsForItemOptionsQuery;
    return this;
  }

  /**
   * Get itemsForItemOptionsQuery
   * @return itemsForItemOptionsQuery
   */
  @javax.annotation.Nullable
  public CatalogQueryItemsForItemOptions getItemsForItemOptionsQuery() {
    return itemsForItemOptionsQuery;
  }

  public void setItemsForItemOptionsQuery(CatalogQueryItemsForItemOptions itemsForItemOptionsQuery) {
    this.itemsForItemOptionsQuery = itemsForItemOptionsQuery;
  }


  public CatalogQuery itemsForModifierListQuery(CatalogQueryItemsForModifierList itemsForModifierListQuery) {
    this.itemsForModifierListQuery = itemsForModifierListQuery;
    return this;
  }

  /**
   * Get itemsForModifierListQuery
   * @return itemsForModifierListQuery
   */
  @javax.annotation.Nullable
  public CatalogQueryItemsForModifierList getItemsForModifierListQuery() {
    return itemsForModifierListQuery;
  }

  public void setItemsForModifierListQuery(CatalogQueryItemsForModifierList itemsForModifierListQuery) {
    this.itemsForModifierListQuery = itemsForModifierListQuery;
  }


  public CatalogQuery itemsForTaxQuery(CatalogQueryItemsForTax itemsForTaxQuery) {
    this.itemsForTaxQuery = itemsForTaxQuery;
    return this;
  }

  /**
   * Get itemsForTaxQuery
   * @return itemsForTaxQuery
   */
  @javax.annotation.Nullable
  public CatalogQueryItemsForTax getItemsForTaxQuery() {
    return itemsForTaxQuery;
  }

  public void setItemsForTaxQuery(CatalogQueryItemsForTax itemsForTaxQuery) {
    this.itemsForTaxQuery = itemsForTaxQuery;
  }


  public CatalogQuery prefixQuery(CatalogQueryPrefix prefixQuery) {
    this.prefixQuery = prefixQuery;
    return this;
  }

  /**
   * Get prefixQuery
   * @return prefixQuery
   */
  @javax.annotation.Nullable
  public CatalogQueryPrefix getPrefixQuery() {
    return prefixQuery;
  }

  public void setPrefixQuery(CatalogQueryPrefix prefixQuery) {
    this.prefixQuery = prefixQuery;
  }


  public CatalogQuery rangeQuery(CatalogQueryRange rangeQuery) {
    this.rangeQuery = rangeQuery;
    return this;
  }

  /**
   * Get rangeQuery
   * @return rangeQuery
   */
  @javax.annotation.Nullable
  public CatalogQueryRange getRangeQuery() {
    return rangeQuery;
  }

  public void setRangeQuery(CatalogQueryRange rangeQuery) {
    this.rangeQuery = rangeQuery;
  }


  public CatalogQuery setQuery(CatalogQuerySet setQuery) {
    this.setQuery = setQuery;
    return this;
  }

  /**
   * Get setQuery
   * @return setQuery
   */
  @javax.annotation.Nullable
  public CatalogQuerySet getSetQuery() {
    return setQuery;
  }

  public void setSetQuery(CatalogQuerySet setQuery) {
    this.setQuery = setQuery;
  }


  public CatalogQuery sortedAttributeQuery(CatalogQuerySortedAttribute sortedAttributeQuery) {
    this.sortedAttributeQuery = sortedAttributeQuery;
    return this;
  }

  /**
   * Get sortedAttributeQuery
   * @return sortedAttributeQuery
   */
  @javax.annotation.Nullable
  public CatalogQuerySortedAttribute getSortedAttributeQuery() {
    return sortedAttributeQuery;
  }

  public void setSortedAttributeQuery(CatalogQuerySortedAttribute sortedAttributeQuery) {
    this.sortedAttributeQuery = sortedAttributeQuery;
  }


  public CatalogQuery textQuery(CatalogQueryText textQuery) {
    this.textQuery = textQuery;
    return this;
  }

  /**
   * Get textQuery
   * @return textQuery
   */
  @javax.annotation.Nullable
  public CatalogQueryText getTextQuery() {
    return textQuery;
  }

  public void setTextQuery(CatalogQueryText textQuery) {
    this.textQuery = textQuery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogQuery catalogQuery = (CatalogQuery) o;
    return Objects.equals(this.exactQuery, catalogQuery.exactQuery) &&
        Objects.equals(this.itemVariationsForItemOptionValuesQuery, catalogQuery.itemVariationsForItemOptionValuesQuery) &&
        Objects.equals(this.itemsForItemOptionsQuery, catalogQuery.itemsForItemOptionsQuery) &&
        Objects.equals(this.itemsForModifierListQuery, catalogQuery.itemsForModifierListQuery) &&
        Objects.equals(this.itemsForTaxQuery, catalogQuery.itemsForTaxQuery) &&
        Objects.equals(this.prefixQuery, catalogQuery.prefixQuery) &&
        Objects.equals(this.rangeQuery, catalogQuery.rangeQuery) &&
        Objects.equals(this.setQuery, catalogQuery.setQuery) &&
        Objects.equals(this.sortedAttributeQuery, catalogQuery.sortedAttributeQuery) &&
        Objects.equals(this.textQuery, catalogQuery.textQuery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exactQuery, itemVariationsForItemOptionValuesQuery, itemsForItemOptionsQuery, itemsForModifierListQuery, itemsForTaxQuery, prefixQuery, rangeQuery, setQuery, sortedAttributeQuery, textQuery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogQuery {\n");
    sb.append("    exactQuery: ").append(toIndentedString(exactQuery)).append("\n");
    sb.append("    itemVariationsForItemOptionValuesQuery: ").append(toIndentedString(itemVariationsForItemOptionValuesQuery)).append("\n");
    sb.append("    itemsForItemOptionsQuery: ").append(toIndentedString(itemsForItemOptionsQuery)).append("\n");
    sb.append("    itemsForModifierListQuery: ").append(toIndentedString(itemsForModifierListQuery)).append("\n");
    sb.append("    itemsForTaxQuery: ").append(toIndentedString(itemsForTaxQuery)).append("\n");
    sb.append("    prefixQuery: ").append(toIndentedString(prefixQuery)).append("\n");
    sb.append("    rangeQuery: ").append(toIndentedString(rangeQuery)).append("\n");
    sb.append("    setQuery: ").append(toIndentedString(setQuery)).append("\n");
    sb.append("    sortedAttributeQuery: ").append(toIndentedString(sortedAttributeQuery)).append("\n");
    sb.append("    textQuery: ").append(toIndentedString(textQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exact_query");
    openapiFields.add("item_variations_for_item_option_values_query");
    openapiFields.add("items_for_item_options_query");
    openapiFields.add("items_for_modifier_list_query");
    openapiFields.add("items_for_tax_query");
    openapiFields.add("prefix_query");
    openapiFields.add("range_query");
    openapiFields.add("set_query");
    openapiFields.add("sorted_attribute_query");
    openapiFields.add("text_query");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogQuery is not found in the empty JSON string", CatalogQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `exact_query`
      if (jsonObj.get("exact_query") != null && !jsonObj.get("exact_query").isJsonNull()) {
        CatalogQueryExact.validateJsonElement(jsonObj.get("exact_query"));
      }
      // validate the optional field `item_variations_for_item_option_values_query`
      if (jsonObj.get("item_variations_for_item_option_values_query") != null && !jsonObj.get("item_variations_for_item_option_values_query").isJsonNull()) {
        CatalogQueryItemVariationsForItemOptionValues.validateJsonElement(jsonObj.get("item_variations_for_item_option_values_query"));
      }
      // validate the optional field `items_for_item_options_query`
      if (jsonObj.get("items_for_item_options_query") != null && !jsonObj.get("items_for_item_options_query").isJsonNull()) {
        CatalogQueryItemsForItemOptions.validateJsonElement(jsonObj.get("items_for_item_options_query"));
      }
      // validate the optional field `items_for_modifier_list_query`
      if (jsonObj.get("items_for_modifier_list_query") != null && !jsonObj.get("items_for_modifier_list_query").isJsonNull()) {
        CatalogQueryItemsForModifierList.validateJsonElement(jsonObj.get("items_for_modifier_list_query"));
      }
      // validate the optional field `items_for_tax_query`
      if (jsonObj.get("items_for_tax_query") != null && !jsonObj.get("items_for_tax_query").isJsonNull()) {
        CatalogQueryItemsForTax.validateJsonElement(jsonObj.get("items_for_tax_query"));
      }
      // validate the optional field `prefix_query`
      if (jsonObj.get("prefix_query") != null && !jsonObj.get("prefix_query").isJsonNull()) {
        CatalogQueryPrefix.validateJsonElement(jsonObj.get("prefix_query"));
      }
      // validate the optional field `range_query`
      if (jsonObj.get("range_query") != null && !jsonObj.get("range_query").isJsonNull()) {
        CatalogQueryRange.validateJsonElement(jsonObj.get("range_query"));
      }
      // validate the optional field `set_query`
      if (jsonObj.get("set_query") != null && !jsonObj.get("set_query").isJsonNull()) {
        CatalogQuerySet.validateJsonElement(jsonObj.get("set_query"));
      }
      // validate the optional field `sorted_attribute_query`
      if (jsonObj.get("sorted_attribute_query") != null && !jsonObj.get("sorted_attribute_query").isJsonNull()) {
        CatalogQuerySortedAttribute.validateJsonElement(jsonObj.get("sorted_attribute_query"));
      }
      // validate the optional field `text_query`
      if (jsonObj.get("text_query") != null && !jsonObj.get("text_query").isJsonNull()) {
        CatalogQueryText.validateJsonElement(jsonObj.get("text_query"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogQuery>() {
           @Override
           public void write(JsonWriter out, CatalogQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogQuery
   * @throws IOException if the JSON string is invalid with respect to CatalogQuery
   */
  public static CatalogQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogQuery.class);
  }

  /**
   * Convert an instance of CatalogQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

