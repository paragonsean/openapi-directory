/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * 
 */
@JsonAdapter(V1SettlementEntryType.Adapter.class)
public enum V1SettlementEntryType {
  
  ADJUSTMENT("ADJUSTMENT"),
  
  BALANCE_CHARGE("BALANCE_CHARGE"),
  
  CHARGE("CHARGE"),
  
  FREE_PROCESSING("FREE_PROCESSING"),
  
  HOLD_ADJUSTMENT("HOLD_ADJUSTMENT"),
  
  PAID_SERVICE_FEE("PAID_SERVICE_FEE"),
  
  PAID_SERVICE_FEE_REFUND("PAID_SERVICE_FEE_REFUND"),
  
  REDEMPTION_CODE("REDEMPTION_CODE"),
  
  REFUND("REFUND"),
  
  RETURNED_PAYOUT("RETURNED_PAYOUT"),
  
  SQUARE_CAPITAL_ADVANCE("SQUARE_CAPITAL_ADVANCE"),
  
  SQUARE_CAPITAL_PAYMENT("SQUARE_CAPITAL_PAYMENT"),
  
  SQUARE_CAPITAL_REVERSED_PAYMENT("SQUARE_CAPITAL_REVERSED_PAYMENT"),
  
  SUBSCRIPTION_FEE("SUBSCRIPTION_FEE"),
  
  SUBSCRIPTION_FEE_REFUND("SUBSCRIPTION_FEE_REFUND"),
  
  OTHER("OTHER"),
  
  INCENTED_PAYMENT("INCENTED_PAYMENT"),
  
  RETURNED_ACH_ENTRY("RETURNED_ACH_ENTRY"),
  
  RETURNED_SQUARE_275("RETURNED_SQUARE_275"),
  
  SQUARE_275("SQUARE_275"),
  
  SQUARE_CARD("SQUARE_CARD");

  private String value;

  V1SettlementEntryType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static V1SettlementEntryType fromValue(String value) {
    for (V1SettlementEntryType b : V1SettlementEntryType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<V1SettlementEntryType> {
    @Override
    public void write(final JsonWriter jsonWriter, final V1SettlementEntryType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public V1SettlementEntryType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return V1SettlementEntryType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    V1SettlementEntryType.fromValue(value);
  }
}

