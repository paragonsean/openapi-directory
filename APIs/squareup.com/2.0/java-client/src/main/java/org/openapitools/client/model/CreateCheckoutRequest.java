/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.ChargeRequestAdditionalRecipient;
import org.openapitools.client.model.CreateOrderRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the parameters that can be included in the body of a request to the &#x60;CreateCheckout&#x60; endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateCheckoutRequest {
  public static final String SERIALIZED_NAME_ADDITIONAL_RECIPIENTS = "additional_recipients";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_RECIPIENTS)
  private List<ChargeRequestAdditionalRecipient> additionalRecipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASK_FOR_SHIPPING_ADDRESS = "ask_for_shipping_address";
  @SerializedName(SERIALIZED_NAME_ASK_FOR_SHIPPING_ADDRESS)
  private Boolean askForShippingAddress;

  public static final String SERIALIZED_NAME_IDEMPOTENCY_KEY = "idempotency_key";
  @SerializedName(SERIALIZED_NAME_IDEMPOTENCY_KEY)
  private String idempotencyKey;

  public static final String SERIALIZED_NAME_MERCHANT_SUPPORT_EMAIL = "merchant_support_email";
  @SerializedName(SERIALIZED_NAME_MERCHANT_SUPPORT_EMAIL)
  private String merchantSupportEmail;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private CreateOrderRequest order;

  public static final String SERIALIZED_NAME_PRE_POPULATE_BUYER_EMAIL = "pre_populate_buyer_email";
  @SerializedName(SERIALIZED_NAME_PRE_POPULATE_BUYER_EMAIL)
  private String prePopulateBuyerEmail;

  public static final String SERIALIZED_NAME_PRE_POPULATE_SHIPPING_ADDRESS = "pre_populate_shipping_address";
  @SerializedName(SERIALIZED_NAME_PRE_POPULATE_SHIPPING_ADDRESS)
  private Address prePopulateShippingAddress;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public CreateCheckoutRequest() {
  }

  public CreateCheckoutRequest additionalRecipients(List<ChargeRequestAdditionalRecipient> additionalRecipients) {
    this.additionalRecipients = additionalRecipients;
    return this;
  }

  public CreateCheckoutRequest addAdditionalRecipientsItem(ChargeRequestAdditionalRecipient additionalRecipientsItem) {
    if (this.additionalRecipients == null) {
      this.additionalRecipients = new ArrayList<>();
    }
    this.additionalRecipients.add(additionalRecipientsItem);
    return this;
  }

  /**
   * The basic primitive of a multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the &#x60;amount_money&#x60; value in your &#x60;additional_recipients&#x60; field cannot be more than 90% of the &#x60;total_money&#x60; calculated by Square for your order. The &#x60;location_id&#x60; must be a valid seller location where the checkout is occurring.  This field requires &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission.  This field is currently not supported in the Square Sandbox.
   * @return additionalRecipients
   */
  @javax.annotation.Nullable
  public List<ChargeRequestAdditionalRecipient> getAdditionalRecipients() {
    return additionalRecipients;
  }

  public void setAdditionalRecipients(List<ChargeRequestAdditionalRecipient> additionalRecipients) {
    this.additionalRecipients = additionalRecipients;
  }


  public CreateCheckoutRequest askForShippingAddress(Boolean askForShippingAddress) {
    this.askForShippingAddress = askForShippingAddress;
    return this;
  }

  /**
   * If &#x60;true&#x60;, Square Checkout collects shipping information on your behalf and stores  that information with the transaction information in the Square Seller Dashboard.  Default: &#x60;false&#x60;.
   * @return askForShippingAddress
   */
  @javax.annotation.Nullable
  public Boolean getAskForShippingAddress() {
    return askForShippingAddress;
  }

  public void setAskForShippingAddress(Boolean askForShippingAddress) {
    this.askForShippingAddress = askForShippingAddress;
  }


  public CreateCheckoutRequest idempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
    return this;
  }

  /**
   * A unique string that identifies this checkout among others you have created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you are  unsure whether a particular checkout was created successfully, you can attempt it again with the same idempotency key and all the same other parameters without worrying about creating duplicates.  You should use a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
   * @return idempotencyKey
   */
  @javax.annotation.Nonnull
  public String getIdempotencyKey() {
    return idempotencyKey;
  }

  public void setIdempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
  }


  public CreateCheckoutRequest merchantSupportEmail(String merchantSupportEmail) {
    this.merchantSupportEmail = merchantSupportEmail;
    return this;
  }

  /**
   * The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the seller.  If this value is not set, the confirmation page and email display the primary email address associated with the seller&#39;s Square account.  Default: none; only exists if explicitly set.
   * @return merchantSupportEmail
   */
  @javax.annotation.Nullable
  public String getMerchantSupportEmail() {
    return merchantSupportEmail;
  }

  public void setMerchantSupportEmail(String merchantSupportEmail) {
    this.merchantSupportEmail = merchantSupportEmail;
  }


  public CreateCheckoutRequest note(String note) {
    this.note = note;
    return this;
  }

  /**
   * An optional note to associate with the &#x60;checkout&#x60; object.  This value cannot exceed 60 characters.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public CreateCheckoutRequest order(CreateOrderRequest order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nonnull
  public CreateOrderRequest getOrder() {
    return order;
  }

  public void setOrder(CreateOrderRequest order) {
    this.order = order;
  }


  public CreateCheckoutRequest prePopulateBuyerEmail(String prePopulateBuyerEmail) {
    this.prePopulateBuyerEmail = prePopulateBuyerEmail;
    return this;
  }

  /**
   * If provided, the buyer&#39;s email is prepopulated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.
   * @return prePopulateBuyerEmail
   */
  @javax.annotation.Nullable
  public String getPrePopulateBuyerEmail() {
    return prePopulateBuyerEmail;
  }

  public void setPrePopulateBuyerEmail(String prePopulateBuyerEmail) {
    this.prePopulateBuyerEmail = prePopulateBuyerEmail;
  }


  public CreateCheckoutRequest prePopulateShippingAddress(Address prePopulateShippingAddress) {
    this.prePopulateShippingAddress = prePopulateShippingAddress;
    return this;
  }

  /**
   * Get prePopulateShippingAddress
   * @return prePopulateShippingAddress
   */
  @javax.annotation.Nullable
  public Address getPrePopulateShippingAddress() {
    return prePopulateShippingAddress;
  }

  public void setPrePopulateShippingAddress(Address prePopulateShippingAddress) {
    this.prePopulateShippingAddress = prePopulateShippingAddress;
  }


  public CreateCheckoutRequest redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * The URL to redirect to after the checkout is completed with &#x60;checkoutId&#x60;, &#x60;transactionId&#x60;, and &#x60;referenceId&#x60; appended as URL parameters. For example, if the provided redirect URL is &#x60;http://www.example.com/order-complete&#x60;, a successful transaction redirects the customer to:  &lt;pre&gt;&lt;code&gt;http://www.example.com/order-complete?checkoutId&#x3D;xxxxxx&amp;amp;referenceId&#x3D;xxxxxx&amp;amp;transactionId&#x3D;xxxxxx&lt;/code&gt;&lt;/pre&gt;  If you do not provide a redirect URL, Square Checkout displays an order confirmation page on your behalf; however, it is strongly recommended that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.  Default: none; only exists if explicitly set.
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCheckoutRequest createCheckoutRequest = (CreateCheckoutRequest) o;
    return Objects.equals(this.additionalRecipients, createCheckoutRequest.additionalRecipients) &&
        Objects.equals(this.askForShippingAddress, createCheckoutRequest.askForShippingAddress) &&
        Objects.equals(this.idempotencyKey, createCheckoutRequest.idempotencyKey) &&
        Objects.equals(this.merchantSupportEmail, createCheckoutRequest.merchantSupportEmail) &&
        Objects.equals(this.note, createCheckoutRequest.note) &&
        Objects.equals(this.order, createCheckoutRequest.order) &&
        Objects.equals(this.prePopulateBuyerEmail, createCheckoutRequest.prePopulateBuyerEmail) &&
        Objects.equals(this.prePopulateShippingAddress, createCheckoutRequest.prePopulateShippingAddress) &&
        Objects.equals(this.redirectUrl, createCheckoutRequest.redirectUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalRecipients, askForShippingAddress, idempotencyKey, merchantSupportEmail, note, order, prePopulateBuyerEmail, prePopulateShippingAddress, redirectUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCheckoutRequest {\n");
    sb.append("    additionalRecipients: ").append(toIndentedString(additionalRecipients)).append("\n");
    sb.append("    askForShippingAddress: ").append(toIndentedString(askForShippingAddress)).append("\n");
    sb.append("    idempotencyKey: ").append(toIndentedString(idempotencyKey)).append("\n");
    sb.append("    merchantSupportEmail: ").append(toIndentedString(merchantSupportEmail)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    prePopulateBuyerEmail: ").append(toIndentedString(prePopulateBuyerEmail)).append("\n");
    sb.append("    prePopulateShippingAddress: ").append(toIndentedString(prePopulateShippingAddress)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_recipients");
    openapiFields.add("ask_for_shipping_address");
    openapiFields.add("idempotency_key");
    openapiFields.add("merchant_support_email");
    openapiFields.add("note");
    openapiFields.add("order");
    openapiFields.add("pre_populate_buyer_email");
    openapiFields.add("pre_populate_shipping_address");
    openapiFields.add("redirect_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("idempotency_key");
    openapiRequiredFields.add("order");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateCheckoutRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateCheckoutRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateCheckoutRequest is not found in the empty JSON string", CreateCheckoutRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateCheckoutRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateCheckoutRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateCheckoutRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additional_recipients") != null && !jsonObj.get("additional_recipients").isJsonNull()) {
        JsonArray jsonArrayadditionalRecipients = jsonObj.getAsJsonArray("additional_recipients");
        if (jsonArrayadditionalRecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additional_recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additional_recipients` to be an array in the JSON string but got `%s`", jsonObj.get("additional_recipients").toString()));
          }

          // validate the optional field `additional_recipients` (array)
          for (int i = 0; i < jsonArrayadditionalRecipients.size(); i++) {
            ChargeRequestAdditionalRecipient.validateJsonElement(jsonArrayadditionalRecipients.get(i));
          };
        }
      }
      if (!jsonObj.get("idempotency_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idempotency_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idempotency_key").toString()));
      }
      if ((jsonObj.get("merchant_support_email") != null && !jsonObj.get("merchant_support_email").isJsonNull()) && !jsonObj.get("merchant_support_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_support_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_support_email").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      // validate the required field `order`
      CreateOrderRequest.validateJsonElement(jsonObj.get("order"));
      if ((jsonObj.get("pre_populate_buyer_email") != null && !jsonObj.get("pre_populate_buyer_email").isJsonNull()) && !jsonObj.get("pre_populate_buyer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pre_populate_buyer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pre_populate_buyer_email").toString()));
      }
      // validate the optional field `pre_populate_shipping_address`
      if (jsonObj.get("pre_populate_shipping_address") != null && !jsonObj.get("pre_populate_shipping_address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("pre_populate_shipping_address"));
      }
      if ((jsonObj.get("redirect_url") != null && !jsonObj.get("redirect_url").isJsonNull()) && !jsonObj.get("redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateCheckoutRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateCheckoutRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateCheckoutRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateCheckoutRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateCheckoutRequest>() {
           @Override
           public void write(JsonWriter out, CreateCheckoutRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateCheckoutRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateCheckoutRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateCheckoutRequest
   * @throws IOException if the JSON string is invalid with respect to CreateCheckoutRequest
   */
  public static CreateCheckoutRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateCheckoutRequest.class);
  }

  /**
   * Convert an instance of CreateCheckoutRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

