/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A line item modifier being returned.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderReturnLineItemModifier {
  public static final String SERIALIZED_NAME_BASE_PRICE_MONEY = "base_price_money";
  @SerializedName(SERIALIZED_NAME_BASE_PRICE_MONEY)
  private Money basePriceMoney;

  public static final String SERIALIZED_NAME_CATALOG_OBJECT_ID = "catalog_object_id";
  @SerializedName(SERIALIZED_NAME_CATALOG_OBJECT_ID)
  private String catalogObjectId;

  public static final String SERIALIZED_NAME_CATALOG_VERSION = "catalog_version";
  @SerializedName(SERIALIZED_NAME_CATALOG_VERSION)
  private Long catalogVersion;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE_MODIFIER_UID = "source_modifier_uid";
  @SerializedName(SERIALIZED_NAME_SOURCE_MODIFIER_UID)
  private String sourceModifierUid;

  public static final String SERIALIZED_NAME_TOTAL_PRICE_MONEY = "total_price_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRICE_MONEY)
  private Money totalPriceMoney;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public OrderReturnLineItemModifier() {
  }

  public OrderReturnLineItemModifier basePriceMoney(Money basePriceMoney) {
    this.basePriceMoney = basePriceMoney;
    return this;
  }

  /**
   * Get basePriceMoney
   * @return basePriceMoney
   */
  @javax.annotation.Nullable
  public Money getBasePriceMoney() {
    return basePriceMoney;
  }

  public void setBasePriceMoney(Money basePriceMoney) {
    this.basePriceMoney = basePriceMoney;
  }


  public OrderReturnLineItemModifier catalogObjectId(String catalogObjectId) {
    this.catalogObjectId = catalogObjectId;
    return this;
  }

  /**
   * The catalog object ID referencing [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier).
   * @return catalogObjectId
   */
  @javax.annotation.Nullable
  public String getCatalogObjectId() {
    return catalogObjectId;
  }

  public void setCatalogObjectId(String catalogObjectId) {
    this.catalogObjectId = catalogObjectId;
  }


  public OrderReturnLineItemModifier catalogVersion(Long catalogVersion) {
    this.catalogVersion = catalogVersion;
    return this;
  }

  /**
   * The version of the catalog object that this line item modifier references.
   * @return catalogVersion
   */
  @javax.annotation.Nullable
  public Long getCatalogVersion() {
    return catalogVersion;
  }

  public void setCatalogVersion(Long catalogVersion) {
    this.catalogVersion = catalogVersion;
  }


  public OrderReturnLineItemModifier name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the item modifier.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OrderReturnLineItemModifier sourceModifierUid(String sourceModifierUid) {
    this.sourceModifierUid = sourceModifierUid;
    return this;
  }

  /**
   * The modifier &#x60;uid&#x60; from the order&#39;s line item that contains the original sale of this line item modifier.
   * @return sourceModifierUid
   */
  @javax.annotation.Nullable
  public String getSourceModifierUid() {
    return sourceModifierUid;
  }

  public void setSourceModifierUid(String sourceModifierUid) {
    this.sourceModifierUid = sourceModifierUid;
  }


  public OrderReturnLineItemModifier totalPriceMoney(Money totalPriceMoney) {
    this.totalPriceMoney = totalPriceMoney;
    return this;
  }

  /**
   * Get totalPriceMoney
   * @return totalPriceMoney
   */
  @javax.annotation.Nullable
  public Money getTotalPriceMoney() {
    return totalPriceMoney;
  }

  public void setTotalPriceMoney(Money totalPriceMoney) {
    this.totalPriceMoney = totalPriceMoney;
  }


  public OrderReturnLineItemModifier uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * A unique ID that identifies the return modifier only within this order.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderReturnLineItemModifier orderReturnLineItemModifier = (OrderReturnLineItemModifier) o;
    return Objects.equals(this.basePriceMoney, orderReturnLineItemModifier.basePriceMoney) &&
        Objects.equals(this.catalogObjectId, orderReturnLineItemModifier.catalogObjectId) &&
        Objects.equals(this.catalogVersion, orderReturnLineItemModifier.catalogVersion) &&
        Objects.equals(this.name, orderReturnLineItemModifier.name) &&
        Objects.equals(this.sourceModifierUid, orderReturnLineItemModifier.sourceModifierUid) &&
        Objects.equals(this.totalPriceMoney, orderReturnLineItemModifier.totalPriceMoney) &&
        Objects.equals(this.uid, orderReturnLineItemModifier.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basePriceMoney, catalogObjectId, catalogVersion, name, sourceModifierUid, totalPriceMoney, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderReturnLineItemModifier {\n");
    sb.append("    basePriceMoney: ").append(toIndentedString(basePriceMoney)).append("\n");
    sb.append("    catalogObjectId: ").append(toIndentedString(catalogObjectId)).append("\n");
    sb.append("    catalogVersion: ").append(toIndentedString(catalogVersion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceModifierUid: ").append(toIndentedString(sourceModifierUid)).append("\n");
    sb.append("    totalPriceMoney: ").append(toIndentedString(totalPriceMoney)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_price_money");
    openapiFields.add("catalog_object_id");
    openapiFields.add("catalog_version");
    openapiFields.add("name");
    openapiFields.add("source_modifier_uid");
    openapiFields.add("total_price_money");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderReturnLineItemModifier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderReturnLineItemModifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderReturnLineItemModifier is not found in the empty JSON string", OrderReturnLineItemModifier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderReturnLineItemModifier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderReturnLineItemModifier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `base_price_money`
      if (jsonObj.get("base_price_money") != null && !jsonObj.get("base_price_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("base_price_money"));
      }
      if ((jsonObj.get("catalog_object_id") != null && !jsonObj.get("catalog_object_id").isJsonNull()) && !jsonObj.get("catalog_object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalog_object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalog_object_id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("source_modifier_uid") != null && !jsonObj.get("source_modifier_uid").isJsonNull()) && !jsonObj.get("source_modifier_uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_modifier_uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_modifier_uid").toString()));
      }
      // validate the optional field `total_price_money`
      if (jsonObj.get("total_price_money") != null && !jsonObj.get("total_price_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_price_money"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderReturnLineItemModifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderReturnLineItemModifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderReturnLineItemModifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderReturnLineItemModifier.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderReturnLineItemModifier>() {
           @Override
           public void write(JsonWriter out, OrderReturnLineItemModifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderReturnLineItemModifier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderReturnLineItemModifier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderReturnLineItemModifier
   * @throws IOException if the JSON string is invalid with respect to OrderReturnLineItemModifier
   */
  public static OrderReturnLineItemModifier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderReturnLineItemModifier.class);
  }

  /**
   * Convert an instance of OrderReturnLineItemModifier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

