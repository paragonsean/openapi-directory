/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Money;
import org.openapitools.client.model.OrderLineItemAppliedTax;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a service charge applied to an order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderServiceCharge {
  public static final String SERIALIZED_NAME_AMOUNT_MONEY = "amount_money";
  @SerializedName(SERIALIZED_NAME_AMOUNT_MONEY)
  private Money amountMoney;

  public static final String SERIALIZED_NAME_APPLIED_MONEY = "applied_money";
  @SerializedName(SERIALIZED_NAME_APPLIED_MONEY)
  private Money appliedMoney;

  public static final String SERIALIZED_NAME_APPLIED_TAXES = "applied_taxes";
  @SerializedName(SERIALIZED_NAME_APPLIED_TAXES)
  private List<OrderLineItemAppliedTax> appliedTaxes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CALCULATION_PHASE = "calculation_phase";
  @SerializedName(SERIALIZED_NAME_CALCULATION_PHASE)
  private String calculationPhase;

  public static final String SERIALIZED_NAME_CATALOG_OBJECT_ID = "catalog_object_id";
  @SerializedName(SERIALIZED_NAME_CATALOG_OBJECT_ID)
  private String catalogObjectId;

  public static final String SERIALIZED_NAME_CATALOG_VERSION = "catalog_version";
  @SerializedName(SERIALIZED_NAME_CATALOG_VERSION)
  private Long catalogVersion;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private String percentage;

  public static final String SERIALIZED_NAME_TAXABLE = "taxable";
  @SerializedName(SERIALIZED_NAME_TAXABLE)
  private Boolean taxable;

  public static final String SERIALIZED_NAME_TOTAL_MONEY = "total_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_MONEY)
  private Money totalMoney;

  public static final String SERIALIZED_NAME_TOTAL_TAX_MONEY = "total_tax_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX_MONEY)
  private Money totalTaxMoney;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public OrderServiceCharge() {
  }

  public OrderServiceCharge amountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
    return this;
  }

  /**
   * Get amountMoney
   * @return amountMoney
   */
  @javax.annotation.Nullable
  public Money getAmountMoney() {
    return amountMoney;
  }

  public void setAmountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
  }


  public OrderServiceCharge appliedMoney(Money appliedMoney) {
    this.appliedMoney = appliedMoney;
    return this;
  }

  /**
   * Get appliedMoney
   * @return appliedMoney
   */
  @javax.annotation.Nullable
  public Money getAppliedMoney() {
    return appliedMoney;
  }

  public void setAppliedMoney(Money appliedMoney) {
    this.appliedMoney = appliedMoney;
  }


  public OrderServiceCharge appliedTaxes(List<OrderLineItemAppliedTax> appliedTaxes) {
    this.appliedTaxes = appliedTaxes;
    return this;
  }

  public OrderServiceCharge addAppliedTaxesItem(OrderLineItemAppliedTax appliedTaxesItem) {
    if (this.appliedTaxes == null) {
      this.appliedTaxes = new ArrayList<>();
    }
    this.appliedTaxes.add(appliedTaxesItem);
    return this;
  }

  /**
   * The list of references to the taxes applied to this service charge. Each &#x60;OrderLineItemAppliedTax&#x60; has a &#x60;tax_uid&#x60; that references the &#x60;uid&#x60; of a top-level &#x60;OrderLineItemTax&#x60; that is being applied to this service charge. On reads, the amount applied is populated.  An &#x60;OrderLineItemAppliedTax&#x60; is automatically created on every taxable service charge for all &#x60;ORDER&#x60; scoped taxes that are added to the order. &#x60;OrderLineItemAppliedTax&#x60; records for &#x60;LINE_ITEM&#x60; scoped taxes must be added in requests for the tax to apply to any taxable service charge. Taxable service charges have the &#x60;taxable&#x60; field set to &#x60;true&#x60; and calculated in the &#x60;SUBTOTAL_PHASE&#x60;.  To change the amount of a tax, modify the referenced top-level tax.
   * @return appliedTaxes
   */
  @javax.annotation.Nullable
  public List<OrderLineItemAppliedTax> getAppliedTaxes() {
    return appliedTaxes;
  }

  public void setAppliedTaxes(List<OrderLineItemAppliedTax> appliedTaxes) {
    this.appliedTaxes = appliedTaxes;
  }


  public OrderServiceCharge calculationPhase(String calculationPhase) {
    this.calculationPhase = calculationPhase;
    return this;
  }

  /**
   * The calculation phase at which to apply the service charge.
   * @return calculationPhase
   */
  @javax.annotation.Nullable
  public String getCalculationPhase() {
    return calculationPhase;
  }

  public void setCalculationPhase(String calculationPhase) {
    this.calculationPhase = calculationPhase;
  }


  public OrderServiceCharge catalogObjectId(String catalogObjectId) {
    this.catalogObjectId = catalogObjectId;
    return this;
  }

  /**
   * The catalog object ID referencing the service charge [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject).
   * @return catalogObjectId
   */
  @javax.annotation.Nullable
  public String getCatalogObjectId() {
    return catalogObjectId;
  }

  public void setCatalogObjectId(String catalogObjectId) {
    this.catalogObjectId = catalogObjectId;
  }


  public OrderServiceCharge catalogVersion(Long catalogVersion) {
    this.catalogVersion = catalogVersion;
    return this;
  }

  /**
   * The version of the catalog object that this service charge references.
   * @return catalogVersion
   */
  @javax.annotation.Nullable
  public Long getCatalogVersion() {
    return catalogVersion;
  }

  public void setCatalogVersion(Long catalogVersion) {
    this.catalogVersion = catalogVersion;
  }


  public OrderServiceCharge metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public OrderServiceCharge putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Application-defined data attached to this service charge. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set &#x60;[a-zA-Z0-9_-]&#x60;. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a &#39;:&#39; character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public OrderServiceCharge name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the service charge.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OrderServiceCharge percentage(String percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * The service charge percentage as a string representation of a decimal number. For example, &#x60;\&quot;7.25\&quot;&#x60; indicates a service charge of 7.25%.  Exactly 1 of &#x60;percentage&#x60; or &#x60;amount_money&#x60; should be set.
   * @return percentage
   */
  @javax.annotation.Nullable
  public String getPercentage() {
    return percentage;
  }

  public void setPercentage(String percentage) {
    this.percentage = percentage;
  }


  public OrderServiceCharge taxable(Boolean taxable) {
    this.taxable = taxable;
    return this;
  }

  /**
   * Indicates whether the service charge can be taxed. If set to &#x60;true&#x60;, order-level taxes automatically apply to the service charge. Note that service charges calculated in the &#x60;TOTAL_PHASE&#x60; cannot be marked as taxable.
   * @return taxable
   */
  @javax.annotation.Nullable
  public Boolean getTaxable() {
    return taxable;
  }

  public void setTaxable(Boolean taxable) {
    this.taxable = taxable;
  }


  public OrderServiceCharge totalMoney(Money totalMoney) {
    this.totalMoney = totalMoney;
    return this;
  }

  /**
   * Get totalMoney
   * @return totalMoney
   */
  @javax.annotation.Nullable
  public Money getTotalMoney() {
    return totalMoney;
  }

  public void setTotalMoney(Money totalMoney) {
    this.totalMoney = totalMoney;
  }


  public OrderServiceCharge totalTaxMoney(Money totalTaxMoney) {
    this.totalTaxMoney = totalTaxMoney;
    return this;
  }

  /**
   * Get totalTaxMoney
   * @return totalTaxMoney
   */
  @javax.annotation.Nullable
  public Money getTotalTaxMoney() {
    return totalTaxMoney;
  }

  public void setTotalTaxMoney(Money totalTaxMoney) {
    this.totalTaxMoney = totalTaxMoney;
  }


  public OrderServiceCharge type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the service charge.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public OrderServiceCharge uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * A unique ID that identifies the service charge only within this order.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderServiceCharge orderServiceCharge = (OrderServiceCharge) o;
    return Objects.equals(this.amountMoney, orderServiceCharge.amountMoney) &&
        Objects.equals(this.appliedMoney, orderServiceCharge.appliedMoney) &&
        Objects.equals(this.appliedTaxes, orderServiceCharge.appliedTaxes) &&
        Objects.equals(this.calculationPhase, orderServiceCharge.calculationPhase) &&
        Objects.equals(this.catalogObjectId, orderServiceCharge.catalogObjectId) &&
        Objects.equals(this.catalogVersion, orderServiceCharge.catalogVersion) &&
        Objects.equals(this.metadata, orderServiceCharge.metadata) &&
        Objects.equals(this.name, orderServiceCharge.name) &&
        Objects.equals(this.percentage, orderServiceCharge.percentage) &&
        Objects.equals(this.taxable, orderServiceCharge.taxable) &&
        Objects.equals(this.totalMoney, orderServiceCharge.totalMoney) &&
        Objects.equals(this.totalTaxMoney, orderServiceCharge.totalTaxMoney) &&
        Objects.equals(this.type, orderServiceCharge.type) &&
        Objects.equals(this.uid, orderServiceCharge.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountMoney, appliedMoney, appliedTaxes, calculationPhase, catalogObjectId, catalogVersion, metadata, name, percentage, taxable, totalMoney, totalTaxMoney, type, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderServiceCharge {\n");
    sb.append("    amountMoney: ").append(toIndentedString(amountMoney)).append("\n");
    sb.append("    appliedMoney: ").append(toIndentedString(appliedMoney)).append("\n");
    sb.append("    appliedTaxes: ").append(toIndentedString(appliedTaxes)).append("\n");
    sb.append("    calculationPhase: ").append(toIndentedString(calculationPhase)).append("\n");
    sb.append("    catalogObjectId: ").append(toIndentedString(catalogObjectId)).append("\n");
    sb.append("    catalogVersion: ").append(toIndentedString(catalogVersion)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    taxable: ").append(toIndentedString(taxable)).append("\n");
    sb.append("    totalMoney: ").append(toIndentedString(totalMoney)).append("\n");
    sb.append("    totalTaxMoney: ").append(toIndentedString(totalTaxMoney)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount_money");
    openapiFields.add("applied_money");
    openapiFields.add("applied_taxes");
    openapiFields.add("calculation_phase");
    openapiFields.add("catalog_object_id");
    openapiFields.add("catalog_version");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("percentage");
    openapiFields.add("taxable");
    openapiFields.add("total_money");
    openapiFields.add("total_tax_money");
    openapiFields.add("type");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderServiceCharge
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderServiceCharge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderServiceCharge is not found in the empty JSON string", OrderServiceCharge.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderServiceCharge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderServiceCharge` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amount_money`
      if (jsonObj.get("amount_money") != null && !jsonObj.get("amount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("amount_money"));
      }
      // validate the optional field `applied_money`
      if (jsonObj.get("applied_money") != null && !jsonObj.get("applied_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("applied_money"));
      }
      if (jsonObj.get("applied_taxes") != null && !jsonObj.get("applied_taxes").isJsonNull()) {
        JsonArray jsonArrayappliedTaxes = jsonObj.getAsJsonArray("applied_taxes");
        if (jsonArrayappliedTaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applied_taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applied_taxes` to be an array in the JSON string but got `%s`", jsonObj.get("applied_taxes").toString()));
          }

          // validate the optional field `applied_taxes` (array)
          for (int i = 0; i < jsonArrayappliedTaxes.size(); i++) {
            OrderLineItemAppliedTax.validateJsonElement(jsonArrayappliedTaxes.get(i));
          };
        }
      }
      if ((jsonObj.get("calculation_phase") != null && !jsonObj.get("calculation_phase").isJsonNull()) && !jsonObj.get("calculation_phase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calculation_phase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calculation_phase").toString()));
      }
      if ((jsonObj.get("catalog_object_id") != null && !jsonObj.get("catalog_object_id").isJsonNull()) && !jsonObj.get("catalog_object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalog_object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalog_object_id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("percentage") != null && !jsonObj.get("percentage").isJsonNull()) && !jsonObj.get("percentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentage").toString()));
      }
      // validate the optional field `total_money`
      if (jsonObj.get("total_money") != null && !jsonObj.get("total_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_money"));
      }
      // validate the optional field `total_tax_money`
      if (jsonObj.get("total_tax_money") != null && !jsonObj.get("total_tax_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_tax_money"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderServiceCharge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderServiceCharge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderServiceCharge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderServiceCharge.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderServiceCharge>() {
           @Override
           public void write(JsonWriter out, OrderServiceCharge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderServiceCharge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderServiceCharge given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderServiceCharge
   * @throws IOException if the JSON string is invalid with respect to OrderServiceCharge
   */
  public static OrderServiceCharge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderServiceCharge.class);
  }

  /**
   * Convert an instance of OrderServiceCharge to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

