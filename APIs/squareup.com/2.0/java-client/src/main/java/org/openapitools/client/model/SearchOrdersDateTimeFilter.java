/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TimeRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Filter for &#x60;Order&#x60; objects based on whether their &#x60;CREATED_AT&#x60;, &#x60;CLOSED_AT&#x60;, or &#x60;UPDATED_AT&#x60; timestamps fall within a specified time range. You can specify the time range and which timestamp to filter for. You can filter for only one time range at a time.  For each time range, the start time and end time are inclusive. If the end time is absent, it defaults to the time of the first request for the cursor.  __Important:__ If you use the &#x60;DateTimeFilter&#x60; in a &#x60;SearchOrders&#x60; query, you must set the &#x60;sort_field&#x60; in [OrdersSort](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersSort) to the same field you filter for. For example, if you set the &#x60;CLOSED_AT&#x60; field in &#x60;DateTimeFilter&#x60;, you must set the &#x60;sort_field&#x60; in &#x60;SearchOrdersSort&#x60; to &#x60;CLOSED_AT&#x60;. Otherwise, &#x60;SearchOrders&#x60; throws an error. [Learn more about filtering orders by time range.](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchOrdersDateTimeFilter {
  public static final String SERIALIZED_NAME_CLOSED_AT = "closed_at";
  @SerializedName(SERIALIZED_NAME_CLOSED_AT)
  private TimeRange closedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private TimeRange createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private TimeRange updatedAt;

  public SearchOrdersDateTimeFilter() {
  }

  public SearchOrdersDateTimeFilter closedAt(TimeRange closedAt) {
    this.closedAt = closedAt;
    return this;
  }

  /**
   * Get closedAt
   * @return closedAt
   */
  @javax.annotation.Nullable
  public TimeRange getClosedAt() {
    return closedAt;
  }

  public void setClosedAt(TimeRange closedAt) {
    this.closedAt = closedAt;
  }


  public SearchOrdersDateTimeFilter createdAt(TimeRange createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public TimeRange getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(TimeRange createdAt) {
    this.createdAt = createdAt;
  }


  public SearchOrdersDateTimeFilter updatedAt(TimeRange updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public TimeRange getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(TimeRange updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchOrdersDateTimeFilter searchOrdersDateTimeFilter = (SearchOrdersDateTimeFilter) o;
    return Objects.equals(this.closedAt, searchOrdersDateTimeFilter.closedAt) &&
        Objects.equals(this.createdAt, searchOrdersDateTimeFilter.createdAt) &&
        Objects.equals(this.updatedAt, searchOrdersDateTimeFilter.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closedAt, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchOrdersDateTimeFilter {\n");
    sb.append("    closedAt: ").append(toIndentedString(closedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closed_at");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchOrdersDateTimeFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchOrdersDateTimeFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchOrdersDateTimeFilter is not found in the empty JSON string", SearchOrdersDateTimeFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchOrdersDateTimeFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchOrdersDateTimeFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `closed_at`
      if (jsonObj.get("closed_at") != null && !jsonObj.get("closed_at").isJsonNull()) {
        TimeRange.validateJsonElement(jsonObj.get("closed_at"));
      }
      // validate the optional field `created_at`
      if (jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) {
        TimeRange.validateJsonElement(jsonObj.get("created_at"));
      }
      // validate the optional field `updated_at`
      if (jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) {
        TimeRange.validateJsonElement(jsonObj.get("updated_at"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchOrdersDateTimeFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchOrdersDateTimeFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchOrdersDateTimeFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchOrdersDateTimeFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchOrdersDateTimeFilter>() {
           @Override
           public void write(JsonWriter out, SearchOrdersDateTimeFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchOrdersDateTimeFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchOrdersDateTimeFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchOrdersDateTimeFilter
   * @throws IOException if the JSON string is invalid with respect to SearchOrdersDateTimeFilter
   */
  public static SearchOrdersDateTimeFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchOrdersDateTimeFilter.class);
  }

  /**
   * Convert an instance of SearchOrdersDateTimeFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

