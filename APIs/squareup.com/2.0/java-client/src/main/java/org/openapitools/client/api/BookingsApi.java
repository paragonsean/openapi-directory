/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CancelBookingRequest;
import org.openapitools.client.model.CancelBookingResponse;
import org.openapitools.client.model.CreateBookingRequest;
import org.openapitools.client.model.CreateBookingResponse;
import org.openapitools.client.model.ListTeamMemberBookingProfilesResponse;
import org.openapitools.client.model.RetrieveBookingResponse;
import org.openapitools.client.model.RetrieveBusinessBookingProfileResponse;
import org.openapitools.client.model.RetrieveTeamMemberBookingProfileResponse;
import org.openapitools.client.model.SearchAvailabilityRequest;
import org.openapitools.client.model.SearchAvailabilityResponse;
import org.openapitools.client.model.UpdateBookingRequest;
import org.openapitools.client.model.UpdateBookingResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BookingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BookingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BookingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelBooking
     * @param bookingId The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-cancelled booking. (required)
     * @param cancelBookingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelBookingCall(String bookingId, CancelBookingRequest cancelBookingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelBookingRequest;

        // create path and map variables
        String localVarPath = "/v2/bookings/{booking_id}/cancel"
            .replace("{" + "booking_id" + "}", localVarApiClient.escapeString(bookingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelBookingValidateBeforeCall(String bookingId, CancelBookingRequest cancelBookingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bookingId' is set
        if (bookingId == null) {
            throw new ApiException("Missing the required parameter 'bookingId' when calling cancelBooking(Async)");
        }

        // verify the required parameter 'cancelBookingRequest' is set
        if (cancelBookingRequest == null) {
            throw new ApiException("Missing the required parameter 'cancelBookingRequest' when calling cancelBooking(Async)");
        }

        return cancelBookingCall(bookingId, cancelBookingRequest, _callback);

    }

    /**
     * CancelBooking
     * Cancels an existing booking.
     * @param bookingId The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-cancelled booking. (required)
     * @param cancelBookingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return CancelBookingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CancelBookingResponse cancelBooking(String bookingId, CancelBookingRequest cancelBookingRequest) throws ApiException {
        ApiResponse<CancelBookingResponse> localVarResp = cancelBookingWithHttpInfo(bookingId, cancelBookingRequest);
        return localVarResp.getData();
    }

    /**
     * CancelBooking
     * Cancels an existing booking.
     * @param bookingId The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-cancelled booking. (required)
     * @param cancelBookingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;CancelBookingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelBookingResponse> cancelBookingWithHttpInfo(String bookingId, CancelBookingRequest cancelBookingRequest) throws ApiException {
        okhttp3.Call localVarCall = cancelBookingValidateBeforeCall(bookingId, cancelBookingRequest, null);
        Type localVarReturnType = new TypeToken<CancelBookingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CancelBooking (asynchronously)
     * Cancels an existing booking.
     * @param bookingId The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-cancelled booking. (required)
     * @param cancelBookingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelBookingAsync(String bookingId, CancelBookingRequest cancelBookingRequest, final ApiCallback<CancelBookingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelBookingValidateBeforeCall(bookingId, cancelBookingRequest, _callback);
        Type localVarReturnType = new TypeToken<CancelBookingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBooking
     * @param createBookingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBookingCall(CreateBookingRequest createBookingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBookingRequest;

        // create path and map variables
        String localVarPath = "/v2/bookings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBookingValidateBeforeCall(CreateBookingRequest createBookingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createBookingRequest' is set
        if (createBookingRequest == null) {
            throw new ApiException("Missing the required parameter 'createBookingRequest' when calling createBooking(Async)");
        }

        return createBookingCall(createBookingRequest, _callback);

    }

    /**
     * CreateBooking
     * Creates a booking.
     * @param createBookingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return CreateBookingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateBookingResponse createBooking(CreateBookingRequest createBookingRequest) throws ApiException {
        ApiResponse<CreateBookingResponse> localVarResp = createBookingWithHttpInfo(createBookingRequest);
        return localVarResp.getData();
    }

    /**
     * CreateBooking
     * Creates a booking.
     * @param createBookingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;CreateBookingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateBookingResponse> createBookingWithHttpInfo(CreateBookingRequest createBookingRequest) throws ApiException {
        okhttp3.Call localVarCall = createBookingValidateBeforeCall(createBookingRequest, null);
        Type localVarReturnType = new TypeToken<CreateBookingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateBooking (asynchronously)
     * Creates a booking.
     * @param createBookingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBookingAsync(CreateBookingRequest createBookingRequest, final ApiCallback<CreateBookingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBookingValidateBeforeCall(createBookingRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateBookingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTeamMemberBookingProfiles
     * @param bookableOnly Indicates whether to include only bookable team members in the returned result (&#x60;true&#x60;) or not (&#x60;false&#x60;). (optional)
     * @param limit The maximum number of results to return. (optional)
     * @param cursor The cursor for paginating through the results. (optional)
     * @param locationId Indicates whether to include only team members enabled at the given location in the returned result. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTeamMemberBookingProfilesCall(Boolean bookableOnly, Integer limit, String cursor, String locationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/bookings/team-member-booking-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bookableOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookable_only", bookableOnly));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamMemberBookingProfilesValidateBeforeCall(Boolean bookableOnly, Integer limit, String cursor, String locationId, final ApiCallback _callback) throws ApiException {
        return listTeamMemberBookingProfilesCall(bookableOnly, limit, cursor, locationId, _callback);

    }

    /**
     * ListTeamMemberBookingProfiles
     * Lists booking profiles for team members.
     * @param bookableOnly Indicates whether to include only bookable team members in the returned result (&#x60;true&#x60;) or not (&#x60;false&#x60;). (optional)
     * @param limit The maximum number of results to return. (optional)
     * @param cursor The cursor for paginating through the results. (optional)
     * @param locationId Indicates whether to include only team members enabled at the given location in the returned result. (optional)
     * @return ListTeamMemberBookingProfilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListTeamMemberBookingProfilesResponse listTeamMemberBookingProfiles(Boolean bookableOnly, Integer limit, String cursor, String locationId) throws ApiException {
        ApiResponse<ListTeamMemberBookingProfilesResponse> localVarResp = listTeamMemberBookingProfilesWithHttpInfo(bookableOnly, limit, cursor, locationId);
        return localVarResp.getData();
    }

    /**
     * ListTeamMemberBookingProfiles
     * Lists booking profiles for team members.
     * @param bookableOnly Indicates whether to include only bookable team members in the returned result (&#x60;true&#x60;) or not (&#x60;false&#x60;). (optional)
     * @param limit The maximum number of results to return. (optional)
     * @param cursor The cursor for paginating through the results. (optional)
     * @param locationId Indicates whether to include only team members enabled at the given location in the returned result. (optional)
     * @return ApiResponse&lt;ListTeamMemberBookingProfilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTeamMemberBookingProfilesResponse> listTeamMemberBookingProfilesWithHttpInfo(Boolean bookableOnly, Integer limit, String cursor, String locationId) throws ApiException {
        okhttp3.Call localVarCall = listTeamMemberBookingProfilesValidateBeforeCall(bookableOnly, limit, cursor, locationId, null);
        Type localVarReturnType = new TypeToken<ListTeamMemberBookingProfilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListTeamMemberBookingProfiles (asynchronously)
     * Lists booking profiles for team members.
     * @param bookableOnly Indicates whether to include only bookable team members in the returned result (&#x60;true&#x60;) or not (&#x60;false&#x60;). (optional)
     * @param limit The maximum number of results to return. (optional)
     * @param cursor The cursor for paginating through the results. (optional)
     * @param locationId Indicates whether to include only team members enabled at the given location in the returned result. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTeamMemberBookingProfilesAsync(Boolean bookableOnly, Integer limit, String cursor, String locationId, final ApiCallback<ListTeamMemberBookingProfilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamMemberBookingProfilesValidateBeforeCall(bookableOnly, limit, cursor, locationId, _callback);
        Type localVarReturnType = new TypeToken<ListTeamMemberBookingProfilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveBooking
     * @param bookingId The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-retrieved booking. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveBookingCall(String bookingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/bookings/{booking_id}"
            .replace("{" + "booking_id" + "}", localVarApiClient.escapeString(bookingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveBookingValidateBeforeCall(String bookingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bookingId' is set
        if (bookingId == null) {
            throw new ApiException("Missing the required parameter 'bookingId' when calling retrieveBooking(Async)");
        }

        return retrieveBookingCall(bookingId, _callback);

    }

    /**
     * RetrieveBooking
     * Retrieves a booking.
     * @param bookingId The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-retrieved booking. (required)
     * @return RetrieveBookingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveBookingResponse retrieveBooking(String bookingId) throws ApiException {
        ApiResponse<RetrieveBookingResponse> localVarResp = retrieveBookingWithHttpInfo(bookingId);
        return localVarResp.getData();
    }

    /**
     * RetrieveBooking
     * Retrieves a booking.
     * @param bookingId The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-retrieved booking. (required)
     * @return ApiResponse&lt;RetrieveBookingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveBookingResponse> retrieveBookingWithHttpInfo(String bookingId) throws ApiException {
        okhttp3.Call localVarCall = retrieveBookingValidateBeforeCall(bookingId, null);
        Type localVarReturnType = new TypeToken<RetrieveBookingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveBooking (asynchronously)
     * Retrieves a booking.
     * @param bookingId The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-retrieved booking. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveBookingAsync(String bookingId, final ApiCallback<RetrieveBookingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveBookingValidateBeforeCall(bookingId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveBookingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveBusinessBookingProfile
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveBusinessBookingProfileCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/bookings/business-booking-profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveBusinessBookingProfileValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return retrieveBusinessBookingProfileCall(_callback);

    }

    /**
     * RetrieveBusinessBookingProfile
     * Retrieves a seller&#39;s booking profile.
     * @return RetrieveBusinessBookingProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveBusinessBookingProfileResponse retrieveBusinessBookingProfile() throws ApiException {
        ApiResponse<RetrieveBusinessBookingProfileResponse> localVarResp = retrieveBusinessBookingProfileWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * RetrieveBusinessBookingProfile
     * Retrieves a seller&#39;s booking profile.
     * @return ApiResponse&lt;RetrieveBusinessBookingProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveBusinessBookingProfileResponse> retrieveBusinessBookingProfileWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = retrieveBusinessBookingProfileValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RetrieveBusinessBookingProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveBusinessBookingProfile (asynchronously)
     * Retrieves a seller&#39;s booking profile.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveBusinessBookingProfileAsync(final ApiCallback<RetrieveBusinessBookingProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveBusinessBookingProfileValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RetrieveBusinessBookingProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveTeamMemberBookingProfile
     * @param teamMemberId The ID of the team member to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveTeamMemberBookingProfileCall(String teamMemberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/bookings/team-member-booking-profiles/{team_member_id}"
            .replace("{" + "team_member_id" + "}", localVarApiClient.escapeString(teamMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveTeamMemberBookingProfileValidateBeforeCall(String teamMemberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamMemberId' is set
        if (teamMemberId == null) {
            throw new ApiException("Missing the required parameter 'teamMemberId' when calling retrieveTeamMemberBookingProfile(Async)");
        }

        return retrieveTeamMemberBookingProfileCall(teamMemberId, _callback);

    }

    /**
     * RetrieveTeamMemberBookingProfile
     * Retrieves a team member&#39;s booking profile.
     * @param teamMemberId The ID of the team member to retrieve. (required)
     * @return RetrieveTeamMemberBookingProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveTeamMemberBookingProfileResponse retrieveTeamMemberBookingProfile(String teamMemberId) throws ApiException {
        ApiResponse<RetrieveTeamMemberBookingProfileResponse> localVarResp = retrieveTeamMemberBookingProfileWithHttpInfo(teamMemberId);
        return localVarResp.getData();
    }

    /**
     * RetrieveTeamMemberBookingProfile
     * Retrieves a team member&#39;s booking profile.
     * @param teamMemberId The ID of the team member to retrieve. (required)
     * @return ApiResponse&lt;RetrieveTeamMemberBookingProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveTeamMemberBookingProfileResponse> retrieveTeamMemberBookingProfileWithHttpInfo(String teamMemberId) throws ApiException {
        okhttp3.Call localVarCall = retrieveTeamMemberBookingProfileValidateBeforeCall(teamMemberId, null);
        Type localVarReturnType = new TypeToken<RetrieveTeamMemberBookingProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveTeamMemberBookingProfile (asynchronously)
     * Retrieves a team member&#39;s booking profile.
     * @param teamMemberId The ID of the team member to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveTeamMemberBookingProfileAsync(String teamMemberId, final ApiCallback<RetrieveTeamMemberBookingProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveTeamMemberBookingProfileValidateBeforeCall(teamMemberId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveTeamMemberBookingProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchAvailability
     * @param searchAvailabilityRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAvailabilityCall(SearchAvailabilityRequest searchAvailabilityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchAvailabilityRequest;

        // create path and map variables
        String localVarPath = "/v2/bookings/availability/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAvailabilityValidateBeforeCall(SearchAvailabilityRequest searchAvailabilityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchAvailabilityRequest' is set
        if (searchAvailabilityRequest == null) {
            throw new ApiException("Missing the required parameter 'searchAvailabilityRequest' when calling searchAvailability(Async)");
        }

        return searchAvailabilityCall(searchAvailabilityRequest, _callback);

    }

    /**
     * SearchAvailability
     * Searches for availabilities for booking.
     * @param searchAvailabilityRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return SearchAvailabilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SearchAvailabilityResponse searchAvailability(SearchAvailabilityRequest searchAvailabilityRequest) throws ApiException {
        ApiResponse<SearchAvailabilityResponse> localVarResp = searchAvailabilityWithHttpInfo(searchAvailabilityRequest);
        return localVarResp.getData();
    }

    /**
     * SearchAvailability
     * Searches for availabilities for booking.
     * @param searchAvailabilityRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;SearchAvailabilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchAvailabilityResponse> searchAvailabilityWithHttpInfo(SearchAvailabilityRequest searchAvailabilityRequest) throws ApiException {
        okhttp3.Call localVarCall = searchAvailabilityValidateBeforeCall(searchAvailabilityRequest, null);
        Type localVarReturnType = new TypeToken<SearchAvailabilityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SearchAvailability (asynchronously)
     * Searches for availabilities for booking.
     * @param searchAvailabilityRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAvailabilityAsync(SearchAvailabilityRequest searchAvailabilityRequest, final ApiCallback<SearchAvailabilityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAvailabilityValidateBeforeCall(searchAvailabilityRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchAvailabilityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBooking
     * @param bookingId The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-updated booking. (required)
     * @param updateBookingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBookingCall(String bookingId, UpdateBookingRequest updateBookingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateBookingRequest;

        // create path and map variables
        String localVarPath = "/v2/bookings/{booking_id}"
            .replace("{" + "booking_id" + "}", localVarApiClient.escapeString(bookingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBookingValidateBeforeCall(String bookingId, UpdateBookingRequest updateBookingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bookingId' is set
        if (bookingId == null) {
            throw new ApiException("Missing the required parameter 'bookingId' when calling updateBooking(Async)");
        }

        // verify the required parameter 'updateBookingRequest' is set
        if (updateBookingRequest == null) {
            throw new ApiException("Missing the required parameter 'updateBookingRequest' when calling updateBooking(Async)");
        }

        return updateBookingCall(bookingId, updateBookingRequest, _callback);

    }

    /**
     * UpdateBooking
     * Updates a booking.
     * @param bookingId The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-updated booking. (required)
     * @param updateBookingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return UpdateBookingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBookingResponse updateBooking(String bookingId, UpdateBookingRequest updateBookingRequest) throws ApiException {
        ApiResponse<UpdateBookingResponse> localVarResp = updateBookingWithHttpInfo(bookingId, updateBookingRequest);
        return localVarResp.getData();
    }

    /**
     * UpdateBooking
     * Updates a booking.
     * @param bookingId The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-updated booking. (required)
     * @param updateBookingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;UpdateBookingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateBookingResponse> updateBookingWithHttpInfo(String bookingId, UpdateBookingRequest updateBookingRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBookingValidateBeforeCall(bookingId, updateBookingRequest, null);
        Type localVarReturnType = new TypeToken<UpdateBookingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateBooking (asynchronously)
     * Updates a booking.
     * @param bookingId The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-updated booking. (required)
     * @param updateBookingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBookingAsync(String bookingId, UpdateBookingRequest updateBookingRequest, final ApiCallback<UpdateBookingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBookingValidateBeforeCall(bookingId, updateBookingRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateBookingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
