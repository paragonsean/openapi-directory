/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A discount applicable to items.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogDiscount {
  public static final String SERIALIZED_NAME_AMOUNT_MONEY = "amount_money";
  @SerializedName(SERIALIZED_NAME_AMOUNT_MONEY)
  private Money amountMoney;

  public static final String SERIALIZED_NAME_DISCOUNT_TYPE = "discount_type";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_TYPE)
  private String discountType;

  public static final String SERIALIZED_NAME_LABEL_COLOR = "label_color";
  @SerializedName(SERIALIZED_NAME_LABEL_COLOR)
  private String labelColor;

  public static final String SERIALIZED_NAME_MODIFY_TAX_BASIS = "modify_tax_basis";
  @SerializedName(SERIALIZED_NAME_MODIFY_TAX_BASIS)
  private String modifyTaxBasis;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private String percentage;

  public static final String SERIALIZED_NAME_PIN_REQUIRED = "pin_required";
  @SerializedName(SERIALIZED_NAME_PIN_REQUIRED)
  private Boolean pinRequired;

  public CatalogDiscount() {
  }

  public CatalogDiscount amountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
    return this;
  }

  /**
   * Get amountMoney
   * @return amountMoney
   */
  @javax.annotation.Nullable
  public Money getAmountMoney() {
    return amountMoney;
  }

  public void setAmountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
  }


  public CatalogDiscount discountType(String discountType) {
    this.discountType = discountType;
    return this;
  }

  /**
   * Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale.
   * @return discountType
   */
  @javax.annotation.Nullable
  public String getDiscountType() {
    return discountType;
  }

  public void setDiscountType(String discountType) {
    this.discountType = discountType;
  }


  public CatalogDiscount labelColor(String labelColor) {
    this.labelColor = labelColor;
    return this;
  }

  /**
   * The color of the discount display label in the Square Point of Sale app. This must be a valid hex color code.
   * @return labelColor
   */
  @javax.annotation.Nullable
  public String getLabelColor() {
    return labelColor;
  }

  public void setLabelColor(String labelColor) {
    this.labelColor = labelColor;
  }


  public CatalogDiscount modifyTaxBasis(String modifyTaxBasis) {
    this.modifyTaxBasis = modifyTaxBasis;
    return this;
  }

  /**
   * Indicates whether this discount should reduce the price used to calculate tax.  Most discounts should use &#x60;MODIFY_TAX_BASIS&#x60;. However, in some circumstances taxes must be calculated based on an item&#39;s price, ignoring a particular discount. For example, in many US jurisdictions, a manufacturer coupon or instant rebate reduces the price a customer pays but does not reduce the sale price used to calculate how much sales tax is due. In this case, the discount representing that manufacturer coupon should have &#x60;DO_NOT_MODIFY_TAX_BASIS&#x60; for this field.  If you are unsure whether you need to use this field, consult your tax professional.
   * @return modifyTaxBasis
   */
  @javax.annotation.Nullable
  public String getModifyTaxBasis() {
    return modifyTaxBasis;
  }

  public void setModifyTaxBasis(String modifyTaxBasis) {
    this.modifyTaxBasis = modifyTaxBasis;
  }


  public CatalogDiscount name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The discount name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CatalogDiscount percentage(String percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * The percentage of the discount as a string representation of a decimal number, using a &#x60;.&#x60; as the decimal separator and without a &#x60;%&#x60; sign. A value of &#x60;7.5&#x60; corresponds to &#x60;7.5%&#x60;. Specify a percentage of &#x60;0&#x60; if &#x60;discount_type&#x60; is &#x60;VARIABLE_PERCENTAGE&#x60;.  Do not use this field for amount-based or variable discounts.
   * @return percentage
   */
  @javax.annotation.Nullable
  public String getPercentage() {
    return percentage;
  }

  public void setPercentage(String percentage) {
    this.percentage = percentage;
  }


  public CatalogDiscount pinRequired(Boolean pinRequired) {
    this.pinRequired = pinRequired;
    return this;
  }

  /**
   * Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment in the Square Point of Sale app.
   * @return pinRequired
   */
  @javax.annotation.Nullable
  public Boolean getPinRequired() {
    return pinRequired;
  }

  public void setPinRequired(Boolean pinRequired) {
    this.pinRequired = pinRequired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDiscount catalogDiscount = (CatalogDiscount) o;
    return Objects.equals(this.amountMoney, catalogDiscount.amountMoney) &&
        Objects.equals(this.discountType, catalogDiscount.discountType) &&
        Objects.equals(this.labelColor, catalogDiscount.labelColor) &&
        Objects.equals(this.modifyTaxBasis, catalogDiscount.modifyTaxBasis) &&
        Objects.equals(this.name, catalogDiscount.name) &&
        Objects.equals(this.percentage, catalogDiscount.percentage) &&
        Objects.equals(this.pinRequired, catalogDiscount.pinRequired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountMoney, discountType, labelColor, modifyTaxBasis, name, percentage, pinRequired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDiscount {\n");
    sb.append("    amountMoney: ").append(toIndentedString(amountMoney)).append("\n");
    sb.append("    discountType: ").append(toIndentedString(discountType)).append("\n");
    sb.append("    labelColor: ").append(toIndentedString(labelColor)).append("\n");
    sb.append("    modifyTaxBasis: ").append(toIndentedString(modifyTaxBasis)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    pinRequired: ").append(toIndentedString(pinRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount_money");
    openapiFields.add("discount_type");
    openapiFields.add("label_color");
    openapiFields.add("modify_tax_basis");
    openapiFields.add("name");
    openapiFields.add("percentage");
    openapiFields.add("pin_required");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogDiscount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogDiscount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogDiscount is not found in the empty JSON string", CatalogDiscount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogDiscount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogDiscount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amount_money`
      if (jsonObj.get("amount_money") != null && !jsonObj.get("amount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("amount_money"));
      }
      if ((jsonObj.get("discount_type") != null && !jsonObj.get("discount_type").isJsonNull()) && !jsonObj.get("discount_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discount_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discount_type").toString()));
      }
      if ((jsonObj.get("label_color") != null && !jsonObj.get("label_color").isJsonNull()) && !jsonObj.get("label_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label_color").toString()));
      }
      if ((jsonObj.get("modify_tax_basis") != null && !jsonObj.get("modify_tax_basis").isJsonNull()) && !jsonObj.get("modify_tax_basis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modify_tax_basis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modify_tax_basis").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("percentage") != null && !jsonObj.get("percentage").isJsonNull()) && !jsonObj.get("percentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogDiscount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogDiscount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogDiscount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogDiscount.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogDiscount>() {
           @Override
           public void write(JsonWriter out, CatalogDiscount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogDiscount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogDiscount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogDiscount
   * @throws IOException if the JSON string is invalid with respect to CatalogDiscount
   */
  public static CatalogDiscount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogDiscount.class);
  }

  /**
   * Convert an instance of CatalogDiscount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

