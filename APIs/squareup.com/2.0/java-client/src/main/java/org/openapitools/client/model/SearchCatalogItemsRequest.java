/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomAttributeFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the request body for the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchCatalogItemsRequest {
  public static final String SERIALIZED_NAME_CATEGORY_IDS = "category_ids";
  @SerializedName(SERIALIZED_NAME_CATEGORY_IDS)
  private List<String> categoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURSOR = "cursor";
  @SerializedName(SERIALIZED_NAME_CURSOR)
  private String cursor;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTE_FILTERS = "custom_attribute_filters";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTE_FILTERS)
  private List<CustomAttributeFilter> customAttributeFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLED_LOCATION_IDS = "enabled_location_ids";
  @SerializedName(SERIALIZED_NAME_ENABLED_LOCATION_IDS)
  private List<String> enabledLocationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_PRODUCT_TYPES = "product_types";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPES)
  private List<String> productTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SORT_ORDER = "sort_order";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private String sortOrder;

  public static final String SERIALIZED_NAME_STOCK_LEVELS = "stock_levels";
  @SerializedName(SERIALIZED_NAME_STOCK_LEVELS)
  private List<String> stockLevels = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEXT_FILTER = "text_filter";
  @SerializedName(SERIALIZED_NAME_TEXT_FILTER)
  private String textFilter;

  public SearchCatalogItemsRequest() {
  }

  public SearchCatalogItemsRequest categoryIds(List<String> categoryIds) {
    this.categoryIds = categoryIds;
    return this;
  }

  public SearchCatalogItemsRequest addCategoryIdsItem(String categoryIdsItem) {
    if (this.categoryIds == null) {
      this.categoryIds = new ArrayList<>();
    }
    this.categoryIds.add(categoryIdsItem);
    return this;
  }

  /**
   * The category id query expression to return items containing the specified category IDs.
   * @return categoryIds
   */
  @javax.annotation.Nullable
  public List<String> getCategoryIds() {
    return categoryIds;
  }

  public void setCategoryIds(List<String> categoryIds) {
    this.categoryIds = categoryIds;
  }


  public SearchCatalogItemsRequest cursor(String cursor) {
    this.cursor = cursor;
    return this;
  }

  /**
   * The pagination token, returned in the previous response, used to fetch the next batch of pending results.
   * @return cursor
   */
  @javax.annotation.Nullable
  public String getCursor() {
    return cursor;
  }

  public void setCursor(String cursor) {
    this.cursor = cursor;
  }


  public SearchCatalogItemsRequest customAttributeFilters(List<CustomAttributeFilter> customAttributeFilters) {
    this.customAttributeFilters = customAttributeFilters;
    return this;
  }

  public SearchCatalogItemsRequest addCustomAttributeFiltersItem(CustomAttributeFilter customAttributeFiltersItem) {
    if (this.customAttributeFilters == null) {
      this.customAttributeFilters = new ArrayList<>();
    }
    this.customAttributeFilters.add(customAttributeFiltersItem);
    return this;
  }

  /**
   * The customer-attribute filter to return items or item variations matching the specified custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in a single call to the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
   * @return customAttributeFilters
   */
  @javax.annotation.Nullable
  public List<CustomAttributeFilter> getCustomAttributeFilters() {
    return customAttributeFilters;
  }

  public void setCustomAttributeFilters(List<CustomAttributeFilter> customAttributeFilters) {
    this.customAttributeFilters = customAttributeFilters;
  }


  public SearchCatalogItemsRequest enabledLocationIds(List<String> enabledLocationIds) {
    this.enabledLocationIds = enabledLocationIds;
    return this;
  }

  public SearchCatalogItemsRequest addEnabledLocationIdsItem(String enabledLocationIdsItem) {
    if (this.enabledLocationIds == null) {
      this.enabledLocationIds = new ArrayList<>();
    }
    this.enabledLocationIds.add(enabledLocationIdsItem);
    return this;
  }

  /**
   * The enabled-location query expression to return items and item variations having specified enabled locations.
   * @return enabledLocationIds
   */
  @javax.annotation.Nullable
  public List<String> getEnabledLocationIds() {
    return enabledLocationIds;
  }

  public void setEnabledLocationIds(List<String> enabledLocationIds) {
    this.enabledLocationIds = enabledLocationIds;
  }


  public SearchCatalogItemsRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The maximum number of results to return per page. The default value is 100.
   * maximum: 100
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public SearchCatalogItemsRequest productTypes(List<String> productTypes) {
    this.productTypes = productTypes;
    return this;
  }

  public SearchCatalogItemsRequest addProductTypesItem(String productTypesItem) {
    if (this.productTypes == null) {
      this.productTypes = new ArrayList<>();
    }
    this.productTypes.add(productTypesItem);
    return this;
  }

  /**
   * The product types query expression to return items or item variations having the specified product types.
   * @return productTypes
   */
  @javax.annotation.Nullable
  public List<String> getProductTypes() {
    return productTypes;
  }

  public void setProductTypes(List<String> productTypes) {
    this.productTypes = productTypes;
  }


  public SearchCatalogItemsRequest sortOrder(String sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * The order to sort the results by item names. The default sort order is ascending (&#x60;ASC&#x60;).
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public String getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(String sortOrder) {
    this.sortOrder = sortOrder;
  }


  public SearchCatalogItemsRequest stockLevels(List<String> stockLevels) {
    this.stockLevels = stockLevels;
    return this;
  }

  public SearchCatalogItemsRequest addStockLevelsItem(String stockLevelsItem) {
    if (this.stockLevels == null) {
      this.stockLevels = new ArrayList<>();
    }
    this.stockLevels.add(stockLevelsItem);
    return this;
  }

  /**
   * The stock-level query expression to return item variations with the specified stock levels.
   * @return stockLevels
   */
  @javax.annotation.Nullable
  public List<String> getStockLevels() {
    return stockLevels;
  }

  public void setStockLevels(List<String> stockLevels) {
    this.stockLevels = stockLevels;
  }


  public SearchCatalogItemsRequest textFilter(String textFilter) {
    this.textFilter = textFilter;
    return this;
  }

  /**
   * The text filter expression to return items or item variations containing specified text in the &#x60;name&#x60;, &#x60;description&#x60;, or &#x60;abbreviation&#x60; attribute value of an item, or in the &#x60;name&#x60;, &#x60;sku&#x60;, or &#x60;upc&#x60; attribute value of an item variation.
   * @return textFilter
   */
  @javax.annotation.Nullable
  public String getTextFilter() {
    return textFilter;
  }

  public void setTextFilter(String textFilter) {
    this.textFilter = textFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchCatalogItemsRequest searchCatalogItemsRequest = (SearchCatalogItemsRequest) o;
    return Objects.equals(this.categoryIds, searchCatalogItemsRequest.categoryIds) &&
        Objects.equals(this.cursor, searchCatalogItemsRequest.cursor) &&
        Objects.equals(this.customAttributeFilters, searchCatalogItemsRequest.customAttributeFilters) &&
        Objects.equals(this.enabledLocationIds, searchCatalogItemsRequest.enabledLocationIds) &&
        Objects.equals(this.limit, searchCatalogItemsRequest.limit) &&
        Objects.equals(this.productTypes, searchCatalogItemsRequest.productTypes) &&
        Objects.equals(this.sortOrder, searchCatalogItemsRequest.sortOrder) &&
        Objects.equals(this.stockLevels, searchCatalogItemsRequest.stockLevels) &&
        Objects.equals(this.textFilter, searchCatalogItemsRequest.textFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryIds, cursor, customAttributeFilters, enabledLocationIds, limit, productTypes, sortOrder, stockLevels, textFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchCatalogItemsRequest {\n");
    sb.append("    categoryIds: ").append(toIndentedString(categoryIds)).append("\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("    customAttributeFilters: ").append(toIndentedString(customAttributeFilters)).append("\n");
    sb.append("    enabledLocationIds: ").append(toIndentedString(enabledLocationIds)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    productTypes: ").append(toIndentedString(productTypes)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    stockLevels: ").append(toIndentedString(stockLevels)).append("\n");
    sb.append("    textFilter: ").append(toIndentedString(textFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category_ids");
    openapiFields.add("cursor");
    openapiFields.add("custom_attribute_filters");
    openapiFields.add("enabled_location_ids");
    openapiFields.add("limit");
    openapiFields.add("product_types");
    openapiFields.add("sort_order");
    openapiFields.add("stock_levels");
    openapiFields.add("text_filter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchCatalogItemsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchCatalogItemsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchCatalogItemsRequest is not found in the empty JSON string", SearchCatalogItemsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchCatalogItemsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchCatalogItemsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("category_ids") != null && !jsonObj.get("category_ids").isJsonNull() && !jsonObj.get("category_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_ids` to be an array in the JSON string but got `%s`", jsonObj.get("category_ids").toString()));
      }
      if ((jsonObj.get("cursor") != null && !jsonObj.get("cursor").isJsonNull()) && !jsonObj.get("cursor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cursor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cursor").toString()));
      }
      if (jsonObj.get("custom_attribute_filters") != null && !jsonObj.get("custom_attribute_filters").isJsonNull()) {
        JsonArray jsonArraycustomAttributeFilters = jsonObj.getAsJsonArray("custom_attribute_filters");
        if (jsonArraycustomAttributeFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_attribute_filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_attribute_filters` to be an array in the JSON string but got `%s`", jsonObj.get("custom_attribute_filters").toString()));
          }

          // validate the optional field `custom_attribute_filters` (array)
          for (int i = 0; i < jsonArraycustomAttributeFilters.size(); i++) {
            CustomAttributeFilter.validateJsonElement(jsonArraycustomAttributeFilters.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enabled_location_ids") != null && !jsonObj.get("enabled_location_ids").isJsonNull() && !jsonObj.get("enabled_location_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enabled_location_ids` to be an array in the JSON string but got `%s`", jsonObj.get("enabled_location_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("product_types") != null && !jsonObj.get("product_types").isJsonNull() && !jsonObj.get("product_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_types` to be an array in the JSON string but got `%s`", jsonObj.get("product_types").toString()));
      }
      if ((jsonObj.get("sort_order") != null && !jsonObj.get("sort_order").isJsonNull()) && !jsonObj.get("sort_order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort_order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort_order").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stock_levels") != null && !jsonObj.get("stock_levels").isJsonNull() && !jsonObj.get("stock_levels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stock_levels` to be an array in the JSON string but got `%s`", jsonObj.get("stock_levels").toString()));
      }
      if ((jsonObj.get("text_filter") != null && !jsonObj.get("text_filter").isJsonNull()) && !jsonObj.get("text_filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_filter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchCatalogItemsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchCatalogItemsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchCatalogItemsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchCatalogItemsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchCatalogItemsRequest>() {
           @Override
           public void write(JsonWriter out, SearchCatalogItemsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchCatalogItemsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchCatalogItemsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchCatalogItemsRequest
   * @throws IOException if the JSON string is invalid with respect to SearchCatalogItemsRequest
   */
  public static SearchCatalogItemsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchCatalogItemsRequest.class);
  }

  /**
   * Convert an instance of SearchCatalogItemsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

