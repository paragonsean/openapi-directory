/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StandardUnitDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Group of standard measurement units.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StandardUnitDescriptionGroup {
  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "language_code";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_STANDARD_UNIT_DESCRIPTIONS = "standard_unit_descriptions";
  @SerializedName(SERIALIZED_NAME_STANDARD_UNIT_DESCRIPTIONS)
  private List<StandardUnitDescription> standardUnitDescriptions = new ArrayList<>();

  public StandardUnitDescriptionGroup() {
  }

  public StandardUnitDescriptionGroup languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * IETF language tag.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public StandardUnitDescriptionGroup standardUnitDescriptions(List<StandardUnitDescription> standardUnitDescriptions) {
    this.standardUnitDescriptions = standardUnitDescriptions;
    return this;
  }

  public StandardUnitDescriptionGroup addStandardUnitDescriptionsItem(StandardUnitDescription standardUnitDescriptionsItem) {
    if (this.standardUnitDescriptions == null) {
      this.standardUnitDescriptions = new ArrayList<>();
    }
    this.standardUnitDescriptions.add(standardUnitDescriptionsItem);
    return this;
  }

  /**
   * List of standard (non-custom) measurement units in this description group.
   * @return standardUnitDescriptions
   */
  @javax.annotation.Nullable
  public List<StandardUnitDescription> getStandardUnitDescriptions() {
    return standardUnitDescriptions;
  }

  public void setStandardUnitDescriptions(List<StandardUnitDescription> standardUnitDescriptions) {
    this.standardUnitDescriptions = standardUnitDescriptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StandardUnitDescriptionGroup standardUnitDescriptionGroup = (StandardUnitDescriptionGroup) o;
    return Objects.equals(this.languageCode, standardUnitDescriptionGroup.languageCode) &&
        Objects.equals(this.standardUnitDescriptions, standardUnitDescriptionGroup.standardUnitDescriptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(languageCode, standardUnitDescriptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StandardUnitDescriptionGroup {\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    standardUnitDescriptions: ").append(toIndentedString(standardUnitDescriptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("language_code");
    openapiFields.add("standard_unit_descriptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StandardUnitDescriptionGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StandardUnitDescriptionGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StandardUnitDescriptionGroup is not found in the empty JSON string", StandardUnitDescriptionGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StandardUnitDescriptionGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StandardUnitDescriptionGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("language_code") != null && !jsonObj.get("language_code").isJsonNull()) && !jsonObj.get("language_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_code").toString()));
      }
      if (jsonObj.get("standard_unit_descriptions") != null && !jsonObj.get("standard_unit_descriptions").isJsonNull()) {
        JsonArray jsonArraystandardUnitDescriptions = jsonObj.getAsJsonArray("standard_unit_descriptions");
        if (jsonArraystandardUnitDescriptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("standard_unit_descriptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `standard_unit_descriptions` to be an array in the JSON string but got `%s`", jsonObj.get("standard_unit_descriptions").toString()));
          }

          // validate the optional field `standard_unit_descriptions` (array)
          for (int i = 0; i < jsonArraystandardUnitDescriptions.size(); i++) {
            StandardUnitDescription.validateJsonElement(jsonArraystandardUnitDescriptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StandardUnitDescriptionGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StandardUnitDescriptionGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StandardUnitDescriptionGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StandardUnitDescriptionGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<StandardUnitDescriptionGroup>() {
           @Override
           public void write(JsonWriter out, StandardUnitDescriptionGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StandardUnitDescriptionGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StandardUnitDescriptionGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StandardUnitDescriptionGroup
   * @throws IOException if the JSON string is invalid with respect to StandardUnitDescriptionGroup
   */
  public static StandardUnitDescriptionGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StandardUnitDescriptionGroup.class);
  }

  /**
   * Convert an instance of StandardUnitDescriptionGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

