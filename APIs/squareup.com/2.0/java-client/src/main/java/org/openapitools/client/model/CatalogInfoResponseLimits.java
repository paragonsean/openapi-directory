/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogInfoResponseLimits {
  public static final String SERIALIZED_NAME_BATCH_DELETE_MAX_OBJECT_IDS = "batch_delete_max_object_ids";
  @SerializedName(SERIALIZED_NAME_BATCH_DELETE_MAX_OBJECT_IDS)
  private Integer batchDeleteMaxObjectIds;

  public static final String SERIALIZED_NAME_BATCH_RETRIEVE_MAX_OBJECT_IDS = "batch_retrieve_max_object_ids";
  @SerializedName(SERIALIZED_NAME_BATCH_RETRIEVE_MAX_OBJECT_IDS)
  private Integer batchRetrieveMaxObjectIds;

  public static final String SERIALIZED_NAME_BATCH_UPSERT_MAX_OBJECTS_PER_BATCH = "batch_upsert_max_objects_per_batch";
  @SerializedName(SERIALIZED_NAME_BATCH_UPSERT_MAX_OBJECTS_PER_BATCH)
  private Integer batchUpsertMaxObjectsPerBatch;

  public static final String SERIALIZED_NAME_BATCH_UPSERT_MAX_TOTAL_OBJECTS = "batch_upsert_max_total_objects";
  @SerializedName(SERIALIZED_NAME_BATCH_UPSERT_MAX_TOTAL_OBJECTS)
  private Integer batchUpsertMaxTotalObjects;

  public static final String SERIALIZED_NAME_SEARCH_MAX_PAGE_LIMIT = "search_max_page_limit";
  @SerializedName(SERIALIZED_NAME_SEARCH_MAX_PAGE_LIMIT)
  private Integer searchMaxPageLimit;

  public static final String SERIALIZED_NAME_UPDATE_ITEM_MODIFIER_LISTS_MAX_ITEM_IDS = "update_item_modifier_lists_max_item_ids";
  @SerializedName(SERIALIZED_NAME_UPDATE_ITEM_MODIFIER_LISTS_MAX_ITEM_IDS)
  private Integer updateItemModifierListsMaxItemIds;

  public static final String SERIALIZED_NAME_UPDATE_ITEM_MODIFIER_LISTS_MAX_MODIFIER_LISTS_TO_DISABLE = "update_item_modifier_lists_max_modifier_lists_to_disable";
  @SerializedName(SERIALIZED_NAME_UPDATE_ITEM_MODIFIER_LISTS_MAX_MODIFIER_LISTS_TO_DISABLE)
  private Integer updateItemModifierListsMaxModifierListsToDisable;

  public static final String SERIALIZED_NAME_UPDATE_ITEM_MODIFIER_LISTS_MAX_MODIFIER_LISTS_TO_ENABLE = "update_item_modifier_lists_max_modifier_lists_to_enable";
  @SerializedName(SERIALIZED_NAME_UPDATE_ITEM_MODIFIER_LISTS_MAX_MODIFIER_LISTS_TO_ENABLE)
  private Integer updateItemModifierListsMaxModifierListsToEnable;

  public static final String SERIALIZED_NAME_UPDATE_ITEM_TAXES_MAX_ITEM_IDS = "update_item_taxes_max_item_ids";
  @SerializedName(SERIALIZED_NAME_UPDATE_ITEM_TAXES_MAX_ITEM_IDS)
  private Integer updateItemTaxesMaxItemIds;

  public static final String SERIALIZED_NAME_UPDATE_ITEM_TAXES_MAX_TAXES_TO_DISABLE = "update_item_taxes_max_taxes_to_disable";
  @SerializedName(SERIALIZED_NAME_UPDATE_ITEM_TAXES_MAX_TAXES_TO_DISABLE)
  private Integer updateItemTaxesMaxTaxesToDisable;

  public static final String SERIALIZED_NAME_UPDATE_ITEM_TAXES_MAX_TAXES_TO_ENABLE = "update_item_taxes_max_taxes_to_enable";
  @SerializedName(SERIALIZED_NAME_UPDATE_ITEM_TAXES_MAX_TAXES_TO_ENABLE)
  private Integer updateItemTaxesMaxTaxesToEnable;

  public CatalogInfoResponseLimits() {
  }

  public CatalogInfoResponseLimits batchDeleteMaxObjectIds(Integer batchDeleteMaxObjectIds) {
    this.batchDeleteMaxObjectIds = batchDeleteMaxObjectIds;
    return this;
  }

  /**
   * The maximum number of object IDs that may be included in a single &#x60;/v2/catalog/batch-delete&#x60; request.
   * @return batchDeleteMaxObjectIds
   */
  @javax.annotation.Nullable
  public Integer getBatchDeleteMaxObjectIds() {
    return batchDeleteMaxObjectIds;
  }

  public void setBatchDeleteMaxObjectIds(Integer batchDeleteMaxObjectIds) {
    this.batchDeleteMaxObjectIds = batchDeleteMaxObjectIds;
  }


  public CatalogInfoResponseLimits batchRetrieveMaxObjectIds(Integer batchRetrieveMaxObjectIds) {
    this.batchRetrieveMaxObjectIds = batchRetrieveMaxObjectIds;
    return this;
  }

  /**
   * The maximum number of object IDs that may appear in a &#x60;/v2/catalog/batch-retrieve&#x60; request.
   * @return batchRetrieveMaxObjectIds
   */
  @javax.annotation.Nullable
  public Integer getBatchRetrieveMaxObjectIds() {
    return batchRetrieveMaxObjectIds;
  }

  public void setBatchRetrieveMaxObjectIds(Integer batchRetrieveMaxObjectIds) {
    this.batchRetrieveMaxObjectIds = batchRetrieveMaxObjectIds;
  }


  public CatalogInfoResponseLimits batchUpsertMaxObjectsPerBatch(Integer batchUpsertMaxObjectsPerBatch) {
    this.batchUpsertMaxObjectsPerBatch = batchUpsertMaxObjectsPerBatch;
    return this;
  }

  /**
   * The maximum number of objects that may appear within a single batch in a &#x60;/v2/catalog/batch-upsert&#x60; request.
   * @return batchUpsertMaxObjectsPerBatch
   */
  @javax.annotation.Nullable
  public Integer getBatchUpsertMaxObjectsPerBatch() {
    return batchUpsertMaxObjectsPerBatch;
  }

  public void setBatchUpsertMaxObjectsPerBatch(Integer batchUpsertMaxObjectsPerBatch) {
    this.batchUpsertMaxObjectsPerBatch = batchUpsertMaxObjectsPerBatch;
  }


  public CatalogInfoResponseLimits batchUpsertMaxTotalObjects(Integer batchUpsertMaxTotalObjects) {
    this.batchUpsertMaxTotalObjects = batchUpsertMaxTotalObjects;
    return this;
  }

  /**
   * The maximum number of objects that may appear across all batches in a &#x60;/v2/catalog/batch-upsert&#x60; request.
   * @return batchUpsertMaxTotalObjects
   */
  @javax.annotation.Nullable
  public Integer getBatchUpsertMaxTotalObjects() {
    return batchUpsertMaxTotalObjects;
  }

  public void setBatchUpsertMaxTotalObjects(Integer batchUpsertMaxTotalObjects) {
    this.batchUpsertMaxTotalObjects = batchUpsertMaxTotalObjects;
  }


  public CatalogInfoResponseLimits searchMaxPageLimit(Integer searchMaxPageLimit) {
    this.searchMaxPageLimit = searchMaxPageLimit;
    return this;
  }

  /**
   * The maximum number of results that may be returned in a page of a &#x60;/v2/catalog/search&#x60; response.
   * @return searchMaxPageLimit
   */
  @javax.annotation.Nullable
  public Integer getSearchMaxPageLimit() {
    return searchMaxPageLimit;
  }

  public void setSearchMaxPageLimit(Integer searchMaxPageLimit) {
    this.searchMaxPageLimit = searchMaxPageLimit;
  }


  public CatalogInfoResponseLimits updateItemModifierListsMaxItemIds(Integer updateItemModifierListsMaxItemIds) {
    this.updateItemModifierListsMaxItemIds = updateItemModifierListsMaxItemIds;
    return this;
  }

  /**
   * The maximum number of item IDs that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request.
   * @return updateItemModifierListsMaxItemIds
   */
  @javax.annotation.Nullable
  public Integer getUpdateItemModifierListsMaxItemIds() {
    return updateItemModifierListsMaxItemIds;
  }

  public void setUpdateItemModifierListsMaxItemIds(Integer updateItemModifierListsMaxItemIds) {
    this.updateItemModifierListsMaxItemIds = updateItemModifierListsMaxItemIds;
  }


  public CatalogInfoResponseLimits updateItemModifierListsMaxModifierListsToDisable(Integer updateItemModifierListsMaxModifierListsToDisable) {
    this.updateItemModifierListsMaxModifierListsToDisable = updateItemModifierListsMaxModifierListsToDisable;
    return this;
  }

  /**
   * The maximum number of modifier list IDs to be disabled that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request.
   * @return updateItemModifierListsMaxModifierListsToDisable
   */
  @javax.annotation.Nullable
  public Integer getUpdateItemModifierListsMaxModifierListsToDisable() {
    return updateItemModifierListsMaxModifierListsToDisable;
  }

  public void setUpdateItemModifierListsMaxModifierListsToDisable(Integer updateItemModifierListsMaxModifierListsToDisable) {
    this.updateItemModifierListsMaxModifierListsToDisable = updateItemModifierListsMaxModifierListsToDisable;
  }


  public CatalogInfoResponseLimits updateItemModifierListsMaxModifierListsToEnable(Integer updateItemModifierListsMaxModifierListsToEnable) {
    this.updateItemModifierListsMaxModifierListsToEnable = updateItemModifierListsMaxModifierListsToEnable;
    return this;
  }

  /**
   * The maximum number of modifier list IDs to be enabled that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request.
   * @return updateItemModifierListsMaxModifierListsToEnable
   */
  @javax.annotation.Nullable
  public Integer getUpdateItemModifierListsMaxModifierListsToEnable() {
    return updateItemModifierListsMaxModifierListsToEnable;
  }

  public void setUpdateItemModifierListsMaxModifierListsToEnable(Integer updateItemModifierListsMaxModifierListsToEnable) {
    this.updateItemModifierListsMaxModifierListsToEnable = updateItemModifierListsMaxModifierListsToEnable;
  }


  public CatalogInfoResponseLimits updateItemTaxesMaxItemIds(Integer updateItemTaxesMaxItemIds) {
    this.updateItemTaxesMaxItemIds = updateItemTaxesMaxItemIds;
    return this;
  }

  /**
   * The maximum number of item IDs that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request.
   * @return updateItemTaxesMaxItemIds
   */
  @javax.annotation.Nullable
  public Integer getUpdateItemTaxesMaxItemIds() {
    return updateItemTaxesMaxItemIds;
  }

  public void setUpdateItemTaxesMaxItemIds(Integer updateItemTaxesMaxItemIds) {
    this.updateItemTaxesMaxItemIds = updateItemTaxesMaxItemIds;
  }


  public CatalogInfoResponseLimits updateItemTaxesMaxTaxesToDisable(Integer updateItemTaxesMaxTaxesToDisable) {
    this.updateItemTaxesMaxTaxesToDisable = updateItemTaxesMaxTaxesToDisable;
    return this;
  }

  /**
   * The maximum number of tax IDs to be disabled that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request.
   * @return updateItemTaxesMaxTaxesToDisable
   */
  @javax.annotation.Nullable
  public Integer getUpdateItemTaxesMaxTaxesToDisable() {
    return updateItemTaxesMaxTaxesToDisable;
  }

  public void setUpdateItemTaxesMaxTaxesToDisable(Integer updateItemTaxesMaxTaxesToDisable) {
    this.updateItemTaxesMaxTaxesToDisable = updateItemTaxesMaxTaxesToDisable;
  }


  public CatalogInfoResponseLimits updateItemTaxesMaxTaxesToEnable(Integer updateItemTaxesMaxTaxesToEnable) {
    this.updateItemTaxesMaxTaxesToEnable = updateItemTaxesMaxTaxesToEnable;
    return this;
  }

  /**
   * The maximum number of tax IDs to be enabled that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request.
   * @return updateItemTaxesMaxTaxesToEnable
   */
  @javax.annotation.Nullable
  public Integer getUpdateItemTaxesMaxTaxesToEnable() {
    return updateItemTaxesMaxTaxesToEnable;
  }

  public void setUpdateItemTaxesMaxTaxesToEnable(Integer updateItemTaxesMaxTaxesToEnable) {
    this.updateItemTaxesMaxTaxesToEnable = updateItemTaxesMaxTaxesToEnable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogInfoResponseLimits catalogInfoResponseLimits = (CatalogInfoResponseLimits) o;
    return Objects.equals(this.batchDeleteMaxObjectIds, catalogInfoResponseLimits.batchDeleteMaxObjectIds) &&
        Objects.equals(this.batchRetrieveMaxObjectIds, catalogInfoResponseLimits.batchRetrieveMaxObjectIds) &&
        Objects.equals(this.batchUpsertMaxObjectsPerBatch, catalogInfoResponseLimits.batchUpsertMaxObjectsPerBatch) &&
        Objects.equals(this.batchUpsertMaxTotalObjects, catalogInfoResponseLimits.batchUpsertMaxTotalObjects) &&
        Objects.equals(this.searchMaxPageLimit, catalogInfoResponseLimits.searchMaxPageLimit) &&
        Objects.equals(this.updateItemModifierListsMaxItemIds, catalogInfoResponseLimits.updateItemModifierListsMaxItemIds) &&
        Objects.equals(this.updateItemModifierListsMaxModifierListsToDisable, catalogInfoResponseLimits.updateItemModifierListsMaxModifierListsToDisable) &&
        Objects.equals(this.updateItemModifierListsMaxModifierListsToEnable, catalogInfoResponseLimits.updateItemModifierListsMaxModifierListsToEnable) &&
        Objects.equals(this.updateItemTaxesMaxItemIds, catalogInfoResponseLimits.updateItemTaxesMaxItemIds) &&
        Objects.equals(this.updateItemTaxesMaxTaxesToDisable, catalogInfoResponseLimits.updateItemTaxesMaxTaxesToDisable) &&
        Objects.equals(this.updateItemTaxesMaxTaxesToEnable, catalogInfoResponseLimits.updateItemTaxesMaxTaxesToEnable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchDeleteMaxObjectIds, batchRetrieveMaxObjectIds, batchUpsertMaxObjectsPerBatch, batchUpsertMaxTotalObjects, searchMaxPageLimit, updateItemModifierListsMaxItemIds, updateItemModifierListsMaxModifierListsToDisable, updateItemModifierListsMaxModifierListsToEnable, updateItemTaxesMaxItemIds, updateItemTaxesMaxTaxesToDisable, updateItemTaxesMaxTaxesToEnable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogInfoResponseLimits {\n");
    sb.append("    batchDeleteMaxObjectIds: ").append(toIndentedString(batchDeleteMaxObjectIds)).append("\n");
    sb.append("    batchRetrieveMaxObjectIds: ").append(toIndentedString(batchRetrieveMaxObjectIds)).append("\n");
    sb.append("    batchUpsertMaxObjectsPerBatch: ").append(toIndentedString(batchUpsertMaxObjectsPerBatch)).append("\n");
    sb.append("    batchUpsertMaxTotalObjects: ").append(toIndentedString(batchUpsertMaxTotalObjects)).append("\n");
    sb.append("    searchMaxPageLimit: ").append(toIndentedString(searchMaxPageLimit)).append("\n");
    sb.append("    updateItemModifierListsMaxItemIds: ").append(toIndentedString(updateItemModifierListsMaxItemIds)).append("\n");
    sb.append("    updateItemModifierListsMaxModifierListsToDisable: ").append(toIndentedString(updateItemModifierListsMaxModifierListsToDisable)).append("\n");
    sb.append("    updateItemModifierListsMaxModifierListsToEnable: ").append(toIndentedString(updateItemModifierListsMaxModifierListsToEnable)).append("\n");
    sb.append("    updateItemTaxesMaxItemIds: ").append(toIndentedString(updateItemTaxesMaxItemIds)).append("\n");
    sb.append("    updateItemTaxesMaxTaxesToDisable: ").append(toIndentedString(updateItemTaxesMaxTaxesToDisable)).append("\n");
    sb.append("    updateItemTaxesMaxTaxesToEnable: ").append(toIndentedString(updateItemTaxesMaxTaxesToEnable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("batch_delete_max_object_ids");
    openapiFields.add("batch_retrieve_max_object_ids");
    openapiFields.add("batch_upsert_max_objects_per_batch");
    openapiFields.add("batch_upsert_max_total_objects");
    openapiFields.add("search_max_page_limit");
    openapiFields.add("update_item_modifier_lists_max_item_ids");
    openapiFields.add("update_item_modifier_lists_max_modifier_lists_to_disable");
    openapiFields.add("update_item_modifier_lists_max_modifier_lists_to_enable");
    openapiFields.add("update_item_taxes_max_item_ids");
    openapiFields.add("update_item_taxes_max_taxes_to_disable");
    openapiFields.add("update_item_taxes_max_taxes_to_enable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogInfoResponseLimits
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogInfoResponseLimits.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogInfoResponseLimits is not found in the empty JSON string", CatalogInfoResponseLimits.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogInfoResponseLimits.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogInfoResponseLimits` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogInfoResponseLimits.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogInfoResponseLimits' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogInfoResponseLimits> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogInfoResponseLimits.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogInfoResponseLimits>() {
           @Override
           public void write(JsonWriter out, CatalogInfoResponseLimits value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogInfoResponseLimits read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogInfoResponseLimits given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogInfoResponseLimits
   * @throws IOException if the JSON string is invalid with respect to CatalogInfoResponseLimits
   */
  public static CatalogInfoResponseLimits fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogInfoResponseLimits.class);
  }

  /**
   * Convert an instance of CatalogInfoResponseLimits to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

