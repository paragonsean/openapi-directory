/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateGiftCardRequest;
import org.openapitools.client.model.CreateGiftCardResponse;
import org.openapitools.client.model.LinkCustomerToGiftCardRequest;
import org.openapitools.client.model.LinkCustomerToGiftCardResponse;
import org.openapitools.client.model.ListGiftCardsResponse;
import org.openapitools.client.model.RetrieveGiftCardFromGANRequest;
import org.openapitools.client.model.RetrieveGiftCardFromGANResponse;
import org.openapitools.client.model.RetrieveGiftCardFromNonceRequest;
import org.openapitools.client.model.RetrieveGiftCardFromNonceResponse;
import org.openapitools.client.model.RetrieveGiftCardResponse;
import org.openapitools.client.model.UnlinkCustomerFromGiftCardRequest;
import org.openapitools.client.model.UnlinkCustomerFromGiftCardResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GiftCardsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GiftCardsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GiftCardsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createGiftCard
     * @param createGiftCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGiftCardCall(CreateGiftCardRequest createGiftCardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGiftCardRequest;

        // create path and map variables
        String localVarPath = "/v2/gift-cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGiftCardValidateBeforeCall(CreateGiftCardRequest createGiftCardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createGiftCardRequest' is set
        if (createGiftCardRequest == null) {
            throw new ApiException("Missing the required parameter 'createGiftCardRequest' when calling createGiftCard(Async)");
        }

        return createGiftCardCall(createGiftCardRequest, _callback);

    }

    /**
     * CreateGiftCard
     * Creates a digital gift card or registers a physical (plastic) gift card. You must activate the gift card before  it can be used for payment. For more information, see  [Selling gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#selling-square-gift-cards).
     * @param createGiftCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return CreateGiftCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateGiftCardResponse createGiftCard(CreateGiftCardRequest createGiftCardRequest) throws ApiException {
        ApiResponse<CreateGiftCardResponse> localVarResp = createGiftCardWithHttpInfo(createGiftCardRequest);
        return localVarResp.getData();
    }

    /**
     * CreateGiftCard
     * Creates a digital gift card or registers a physical (plastic) gift card. You must activate the gift card before  it can be used for payment. For more information, see  [Selling gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#selling-square-gift-cards).
     * @param createGiftCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;CreateGiftCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGiftCardResponse> createGiftCardWithHttpInfo(CreateGiftCardRequest createGiftCardRequest) throws ApiException {
        okhttp3.Call localVarCall = createGiftCardValidateBeforeCall(createGiftCardRequest, null);
        Type localVarReturnType = new TypeToken<CreateGiftCardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateGiftCard (asynchronously)
     * Creates a digital gift card or registers a physical (plastic) gift card. You must activate the gift card before  it can be used for payment. For more information, see  [Selling gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#selling-square-gift-cards).
     * @param createGiftCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGiftCardAsync(CreateGiftCardRequest createGiftCardRequest, final ApiCallback<CreateGiftCardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGiftCardValidateBeforeCall(createGiftCardRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateGiftCardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linkCustomerToGiftCard
     * @param giftCardId The ID of the gift card to link. (required)
     * @param linkCustomerToGiftCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkCustomerToGiftCardCall(String giftCardId, LinkCustomerToGiftCardRequest linkCustomerToGiftCardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkCustomerToGiftCardRequest;

        // create path and map variables
        String localVarPath = "/v2/gift-cards/{gift_card_id}/link-customer"
            .replace("{" + "gift_card_id" + "}", localVarApiClient.escapeString(giftCardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkCustomerToGiftCardValidateBeforeCall(String giftCardId, LinkCustomerToGiftCardRequest linkCustomerToGiftCardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'giftCardId' is set
        if (giftCardId == null) {
            throw new ApiException("Missing the required parameter 'giftCardId' when calling linkCustomerToGiftCard(Async)");
        }

        // verify the required parameter 'linkCustomerToGiftCardRequest' is set
        if (linkCustomerToGiftCardRequest == null) {
            throw new ApiException("Missing the required parameter 'linkCustomerToGiftCardRequest' when calling linkCustomerToGiftCard(Async)");
        }

        return linkCustomerToGiftCardCall(giftCardId, linkCustomerToGiftCardRequest, _callback);

    }

    /**
     * LinkCustomerToGiftCard
     * Links a customer to a gift card
     * @param giftCardId The ID of the gift card to link. (required)
     * @param linkCustomerToGiftCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return LinkCustomerToGiftCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LinkCustomerToGiftCardResponse linkCustomerToGiftCard(String giftCardId, LinkCustomerToGiftCardRequest linkCustomerToGiftCardRequest) throws ApiException {
        ApiResponse<LinkCustomerToGiftCardResponse> localVarResp = linkCustomerToGiftCardWithHttpInfo(giftCardId, linkCustomerToGiftCardRequest);
        return localVarResp.getData();
    }

    /**
     * LinkCustomerToGiftCard
     * Links a customer to a gift card
     * @param giftCardId The ID of the gift card to link. (required)
     * @param linkCustomerToGiftCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;LinkCustomerToGiftCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkCustomerToGiftCardResponse> linkCustomerToGiftCardWithHttpInfo(String giftCardId, LinkCustomerToGiftCardRequest linkCustomerToGiftCardRequest) throws ApiException {
        okhttp3.Call localVarCall = linkCustomerToGiftCardValidateBeforeCall(giftCardId, linkCustomerToGiftCardRequest, null);
        Type localVarReturnType = new TypeToken<LinkCustomerToGiftCardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * LinkCustomerToGiftCard (asynchronously)
     * Links a customer to a gift card
     * @param giftCardId The ID of the gift card to link. (required)
     * @param linkCustomerToGiftCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkCustomerToGiftCardAsync(String giftCardId, LinkCustomerToGiftCardRequest linkCustomerToGiftCardRequest, final ApiCallback<LinkCustomerToGiftCardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkCustomerToGiftCardValidateBeforeCall(giftCardId, linkCustomerToGiftCardRequest, _callback);
        Type localVarReturnType = new TypeToken<LinkCustomerToGiftCardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listGiftCards
     * @param type If a type is provided, gift cards of this type are returned  (see [GiftCardType](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardType)). If no type is provided, it returns gift cards of all types. (optional)
     * @param state If the state is provided, it returns the gift cards in the specified state  (see [GiftCardStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardStatus)). Otherwise, it returns the gift cards of all states. (optional)
     * @param limit If a value is provided, it returns only that number of results per page. The maximum number of results allowed per page is 50. The default value is 30. (optional)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If a cursor is not provided, it returns the first page of the results.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination). (optional)
     * @param customerId If a value is provided, returns only the gift cards linked to the specified customer (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGiftCardsCall(String type, String state, Integer limit, String cursor, String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/gift-cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_id", customerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGiftCardsValidateBeforeCall(String type, String state, Integer limit, String cursor, String customerId, final ApiCallback _callback) throws ApiException {
        return listGiftCardsCall(type, state, limit, cursor, customerId, _callback);

    }

    /**
     * ListGiftCards
     * Lists all gift cards. You can specify optional filters to retrieve  a subset of the gift cards.
     * @param type If a type is provided, gift cards of this type are returned  (see [GiftCardType](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardType)). If no type is provided, it returns gift cards of all types. (optional)
     * @param state If the state is provided, it returns the gift cards in the specified state  (see [GiftCardStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardStatus)). Otherwise, it returns the gift cards of all states. (optional)
     * @param limit If a value is provided, it returns only that number of results per page. The maximum number of results allowed per page is 50. The default value is 30. (optional)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If a cursor is not provided, it returns the first page of the results.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination). (optional)
     * @param customerId If a value is provided, returns only the gift cards linked to the specified customer (optional)
     * @return ListGiftCardsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListGiftCardsResponse listGiftCards(String type, String state, Integer limit, String cursor, String customerId) throws ApiException {
        ApiResponse<ListGiftCardsResponse> localVarResp = listGiftCardsWithHttpInfo(type, state, limit, cursor, customerId);
        return localVarResp.getData();
    }

    /**
     * ListGiftCards
     * Lists all gift cards. You can specify optional filters to retrieve  a subset of the gift cards.
     * @param type If a type is provided, gift cards of this type are returned  (see [GiftCardType](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardType)). If no type is provided, it returns gift cards of all types. (optional)
     * @param state If the state is provided, it returns the gift cards in the specified state  (see [GiftCardStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardStatus)). Otherwise, it returns the gift cards of all states. (optional)
     * @param limit If a value is provided, it returns only that number of results per page. The maximum number of results allowed per page is 50. The default value is 30. (optional)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If a cursor is not provided, it returns the first page of the results.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination). (optional)
     * @param customerId If a value is provided, returns only the gift cards linked to the specified customer (optional)
     * @return ApiResponse&lt;ListGiftCardsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListGiftCardsResponse> listGiftCardsWithHttpInfo(String type, String state, Integer limit, String cursor, String customerId) throws ApiException {
        okhttp3.Call localVarCall = listGiftCardsValidateBeforeCall(type, state, limit, cursor, customerId, null);
        Type localVarReturnType = new TypeToken<ListGiftCardsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListGiftCards (asynchronously)
     * Lists all gift cards. You can specify optional filters to retrieve  a subset of the gift cards.
     * @param type If a type is provided, gift cards of this type are returned  (see [GiftCardType](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardType)). If no type is provided, it returns gift cards of all types. (optional)
     * @param state If the state is provided, it returns the gift cards in the specified state  (see [GiftCardStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardStatus)). Otherwise, it returns the gift cards of all states. (optional)
     * @param limit If a value is provided, it returns only that number of results per page. The maximum number of results allowed per page is 50. The default value is 30. (optional)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If a cursor is not provided, it returns the first page of the results.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination). (optional)
     * @param customerId If a value is provided, returns only the gift cards linked to the specified customer (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGiftCardsAsync(String type, String state, Integer limit, String cursor, String customerId, final ApiCallback<ListGiftCardsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGiftCardsValidateBeforeCall(type, state, limit, cursor, customerId, _callback);
        Type localVarReturnType = new TypeToken<ListGiftCardsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveGiftCard
     * @param id The ID of the gift card to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveGiftCardCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/gift-cards/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveGiftCardValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrieveGiftCard(Async)");
        }

        return retrieveGiftCardCall(id, _callback);

    }

    /**
     * RetrieveGiftCard
     * Retrieves a gift card using its ID.
     * @param id The ID of the gift card to retrieve. (required)
     * @return RetrieveGiftCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveGiftCardResponse retrieveGiftCard(String id) throws ApiException {
        ApiResponse<RetrieveGiftCardResponse> localVarResp = retrieveGiftCardWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * RetrieveGiftCard
     * Retrieves a gift card using its ID.
     * @param id The ID of the gift card to retrieve. (required)
     * @return ApiResponse&lt;RetrieveGiftCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveGiftCardResponse> retrieveGiftCardWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = retrieveGiftCardValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RetrieveGiftCardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveGiftCard (asynchronously)
     * Retrieves a gift card using its ID.
     * @param id The ID of the gift card to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveGiftCardAsync(String id, final ApiCallback<RetrieveGiftCardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveGiftCardValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RetrieveGiftCardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveGiftCardFromGAN
     * @param retrieveGiftCardFromGANRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveGiftCardFromGANCall(RetrieveGiftCardFromGANRequest retrieveGiftCardFromGANRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = retrieveGiftCardFromGANRequest;

        // create path and map variables
        String localVarPath = "/v2/gift-cards/from-gan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveGiftCardFromGANValidateBeforeCall(RetrieveGiftCardFromGANRequest retrieveGiftCardFromGANRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retrieveGiftCardFromGANRequest' is set
        if (retrieveGiftCardFromGANRequest == null) {
            throw new ApiException("Missing the required parameter 'retrieveGiftCardFromGANRequest' when calling retrieveGiftCardFromGAN(Async)");
        }

        return retrieveGiftCardFromGANCall(retrieveGiftCardFromGANRequest, _callback);

    }

    /**
     * RetrieveGiftCardFromGAN
     * Retrieves a gift card using the gift card account number (GAN).
     * @param retrieveGiftCardFromGANRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return RetrieveGiftCardFromGANResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveGiftCardFromGANResponse retrieveGiftCardFromGAN(RetrieveGiftCardFromGANRequest retrieveGiftCardFromGANRequest) throws ApiException {
        ApiResponse<RetrieveGiftCardFromGANResponse> localVarResp = retrieveGiftCardFromGANWithHttpInfo(retrieveGiftCardFromGANRequest);
        return localVarResp.getData();
    }

    /**
     * RetrieveGiftCardFromGAN
     * Retrieves a gift card using the gift card account number (GAN).
     * @param retrieveGiftCardFromGANRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;RetrieveGiftCardFromGANResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveGiftCardFromGANResponse> retrieveGiftCardFromGANWithHttpInfo(RetrieveGiftCardFromGANRequest retrieveGiftCardFromGANRequest) throws ApiException {
        okhttp3.Call localVarCall = retrieveGiftCardFromGANValidateBeforeCall(retrieveGiftCardFromGANRequest, null);
        Type localVarReturnType = new TypeToken<RetrieveGiftCardFromGANResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveGiftCardFromGAN (asynchronously)
     * Retrieves a gift card using the gift card account number (GAN).
     * @param retrieveGiftCardFromGANRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveGiftCardFromGANAsync(RetrieveGiftCardFromGANRequest retrieveGiftCardFromGANRequest, final ApiCallback<RetrieveGiftCardFromGANResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveGiftCardFromGANValidateBeforeCall(retrieveGiftCardFromGANRequest, _callback);
        Type localVarReturnType = new TypeToken<RetrieveGiftCardFromGANResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveGiftCardFromNonce
     * @param retrieveGiftCardFromNonceRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveGiftCardFromNonceCall(RetrieveGiftCardFromNonceRequest retrieveGiftCardFromNonceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = retrieveGiftCardFromNonceRequest;

        // create path and map variables
        String localVarPath = "/v2/gift-cards/from-nonce";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveGiftCardFromNonceValidateBeforeCall(RetrieveGiftCardFromNonceRequest retrieveGiftCardFromNonceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retrieveGiftCardFromNonceRequest' is set
        if (retrieveGiftCardFromNonceRequest == null) {
            throw new ApiException("Missing the required parameter 'retrieveGiftCardFromNonceRequest' when calling retrieveGiftCardFromNonce(Async)");
        }

        return retrieveGiftCardFromNonceCall(retrieveGiftCardFromNonceRequest, _callback);

    }

    /**
     * RetrieveGiftCardFromNonce
     * Retrieves a gift card using a nonce (a secure token) that represents the gift card.
     * @param retrieveGiftCardFromNonceRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return RetrieveGiftCardFromNonceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveGiftCardFromNonceResponse retrieveGiftCardFromNonce(RetrieveGiftCardFromNonceRequest retrieveGiftCardFromNonceRequest) throws ApiException {
        ApiResponse<RetrieveGiftCardFromNonceResponse> localVarResp = retrieveGiftCardFromNonceWithHttpInfo(retrieveGiftCardFromNonceRequest);
        return localVarResp.getData();
    }

    /**
     * RetrieveGiftCardFromNonce
     * Retrieves a gift card using a nonce (a secure token) that represents the gift card.
     * @param retrieveGiftCardFromNonceRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;RetrieveGiftCardFromNonceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveGiftCardFromNonceResponse> retrieveGiftCardFromNonceWithHttpInfo(RetrieveGiftCardFromNonceRequest retrieveGiftCardFromNonceRequest) throws ApiException {
        okhttp3.Call localVarCall = retrieveGiftCardFromNonceValidateBeforeCall(retrieveGiftCardFromNonceRequest, null);
        Type localVarReturnType = new TypeToken<RetrieveGiftCardFromNonceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveGiftCardFromNonce (asynchronously)
     * Retrieves a gift card using a nonce (a secure token) that represents the gift card.
     * @param retrieveGiftCardFromNonceRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveGiftCardFromNonceAsync(RetrieveGiftCardFromNonceRequest retrieveGiftCardFromNonceRequest, final ApiCallback<RetrieveGiftCardFromNonceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveGiftCardFromNonceValidateBeforeCall(retrieveGiftCardFromNonceRequest, _callback);
        Type localVarReturnType = new TypeToken<RetrieveGiftCardFromNonceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlinkCustomerFromGiftCard
     * @param giftCardId  (required)
     * @param unlinkCustomerFromGiftCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlinkCustomerFromGiftCardCall(String giftCardId, UnlinkCustomerFromGiftCardRequest unlinkCustomerFromGiftCardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unlinkCustomerFromGiftCardRequest;

        // create path and map variables
        String localVarPath = "/v2/gift-cards/{gift_card_id}/unlink-customer"
            .replace("{" + "gift_card_id" + "}", localVarApiClient.escapeString(giftCardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlinkCustomerFromGiftCardValidateBeforeCall(String giftCardId, UnlinkCustomerFromGiftCardRequest unlinkCustomerFromGiftCardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'giftCardId' is set
        if (giftCardId == null) {
            throw new ApiException("Missing the required parameter 'giftCardId' when calling unlinkCustomerFromGiftCard(Async)");
        }

        // verify the required parameter 'unlinkCustomerFromGiftCardRequest' is set
        if (unlinkCustomerFromGiftCardRequest == null) {
            throw new ApiException("Missing the required parameter 'unlinkCustomerFromGiftCardRequest' when calling unlinkCustomerFromGiftCard(Async)");
        }

        return unlinkCustomerFromGiftCardCall(giftCardId, unlinkCustomerFromGiftCardRequest, _callback);

    }

    /**
     * UnlinkCustomerFromGiftCard
     * Unlinks a customer from a gift card
     * @param giftCardId  (required)
     * @param unlinkCustomerFromGiftCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return UnlinkCustomerFromGiftCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UnlinkCustomerFromGiftCardResponse unlinkCustomerFromGiftCard(String giftCardId, UnlinkCustomerFromGiftCardRequest unlinkCustomerFromGiftCardRequest) throws ApiException {
        ApiResponse<UnlinkCustomerFromGiftCardResponse> localVarResp = unlinkCustomerFromGiftCardWithHttpInfo(giftCardId, unlinkCustomerFromGiftCardRequest);
        return localVarResp.getData();
    }

    /**
     * UnlinkCustomerFromGiftCard
     * Unlinks a customer from a gift card
     * @param giftCardId  (required)
     * @param unlinkCustomerFromGiftCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;UnlinkCustomerFromGiftCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnlinkCustomerFromGiftCardResponse> unlinkCustomerFromGiftCardWithHttpInfo(String giftCardId, UnlinkCustomerFromGiftCardRequest unlinkCustomerFromGiftCardRequest) throws ApiException {
        okhttp3.Call localVarCall = unlinkCustomerFromGiftCardValidateBeforeCall(giftCardId, unlinkCustomerFromGiftCardRequest, null);
        Type localVarReturnType = new TypeToken<UnlinkCustomerFromGiftCardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UnlinkCustomerFromGiftCard (asynchronously)
     * Unlinks a customer from a gift card
     * @param giftCardId  (required)
     * @param unlinkCustomerFromGiftCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlinkCustomerFromGiftCardAsync(String giftCardId, UnlinkCustomerFromGiftCardRequest unlinkCustomerFromGiftCardRequest, final ApiCallback<UnlinkCustomerFromGiftCardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlinkCustomerFromGiftCardValidateBeforeCall(giftCardId, unlinkCustomerFromGiftCardRequest, _callback);
        Type localVarReturnType = new TypeToken<UnlinkCustomerFromGiftCardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
