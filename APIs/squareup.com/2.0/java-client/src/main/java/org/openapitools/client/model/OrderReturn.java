/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderMoneyAmounts;
import org.openapitools.client.model.OrderReturnDiscount;
import org.openapitools.client.model.OrderReturnLineItem;
import org.openapitools.client.model.OrderReturnServiceCharge;
import org.openapitools.client.model.OrderReturnTax;
import org.openapitools.client.model.OrderRoundingAdjustment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The set of line items, service charges, taxes, discounts, tips, and other items being returned in an order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderReturn {
  public static final String SERIALIZED_NAME_RETURN_AMOUNTS = "return_amounts";
  @SerializedName(SERIALIZED_NAME_RETURN_AMOUNTS)
  private OrderMoneyAmounts returnAmounts;

  public static final String SERIALIZED_NAME_RETURN_DISCOUNTS = "return_discounts";
  @SerializedName(SERIALIZED_NAME_RETURN_DISCOUNTS)
  private List<OrderReturnDiscount> returnDiscounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURN_LINE_ITEMS = "return_line_items";
  @SerializedName(SERIALIZED_NAME_RETURN_LINE_ITEMS)
  private List<OrderReturnLineItem> returnLineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURN_SERVICE_CHARGES = "return_service_charges";
  @SerializedName(SERIALIZED_NAME_RETURN_SERVICE_CHARGES)
  private List<OrderReturnServiceCharge> returnServiceCharges = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURN_TAXES = "return_taxes";
  @SerializedName(SERIALIZED_NAME_RETURN_TAXES)
  private List<OrderReturnTax> returnTaxes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROUNDING_ADJUSTMENT = "rounding_adjustment";
  @SerializedName(SERIALIZED_NAME_ROUNDING_ADJUSTMENT)
  private OrderRoundingAdjustment roundingAdjustment;

  public static final String SERIALIZED_NAME_SOURCE_ORDER_ID = "source_order_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ORDER_ID)
  private String sourceOrderId;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public OrderReturn() {
  }

  public OrderReturn returnAmounts(OrderMoneyAmounts returnAmounts) {
    this.returnAmounts = returnAmounts;
    return this;
  }

  /**
   * Get returnAmounts
   * @return returnAmounts
   */
  @javax.annotation.Nullable
  public OrderMoneyAmounts getReturnAmounts() {
    return returnAmounts;
  }

  public void setReturnAmounts(OrderMoneyAmounts returnAmounts) {
    this.returnAmounts = returnAmounts;
  }


  public OrderReturn returnDiscounts(List<OrderReturnDiscount> returnDiscounts) {
    this.returnDiscounts = returnDiscounts;
    return this;
  }

  public OrderReturn addReturnDiscountsItem(OrderReturnDiscount returnDiscountsItem) {
    if (this.returnDiscounts == null) {
      this.returnDiscounts = new ArrayList<>();
    }
    this.returnDiscounts.add(returnDiscountsItem);
    return this;
  }

  /**
   * A collection of references to discounts being returned for an order, including the total applied discount amount to be returned. The discounts must reference a top-level discount ID from the source order.
   * @return returnDiscounts
   */
  @javax.annotation.Nullable
  public List<OrderReturnDiscount> getReturnDiscounts() {
    return returnDiscounts;
  }

  public void setReturnDiscounts(List<OrderReturnDiscount> returnDiscounts) {
    this.returnDiscounts = returnDiscounts;
  }


  public OrderReturn returnLineItems(List<OrderReturnLineItem> returnLineItems) {
    this.returnLineItems = returnLineItems;
    return this;
  }

  public OrderReturn addReturnLineItemsItem(OrderReturnLineItem returnLineItemsItem) {
    if (this.returnLineItems == null) {
      this.returnLineItems = new ArrayList<>();
    }
    this.returnLineItems.add(returnLineItemsItem);
    return this;
  }

  /**
   * A collection of line items that are being returned.
   * @return returnLineItems
   */
  @javax.annotation.Nullable
  public List<OrderReturnLineItem> getReturnLineItems() {
    return returnLineItems;
  }

  public void setReturnLineItems(List<OrderReturnLineItem> returnLineItems) {
    this.returnLineItems = returnLineItems;
  }


  public OrderReturn returnServiceCharges(List<OrderReturnServiceCharge> returnServiceCharges) {
    this.returnServiceCharges = returnServiceCharges;
    return this;
  }

  public OrderReturn addReturnServiceChargesItem(OrderReturnServiceCharge returnServiceChargesItem) {
    if (this.returnServiceCharges == null) {
      this.returnServiceCharges = new ArrayList<>();
    }
    this.returnServiceCharges.add(returnServiceChargesItem);
    return this;
  }

  /**
   * A collection of service charges that are being returned.
   * @return returnServiceCharges
   */
  @javax.annotation.Nullable
  public List<OrderReturnServiceCharge> getReturnServiceCharges() {
    return returnServiceCharges;
  }

  public void setReturnServiceCharges(List<OrderReturnServiceCharge> returnServiceCharges) {
    this.returnServiceCharges = returnServiceCharges;
  }


  public OrderReturn returnTaxes(List<OrderReturnTax> returnTaxes) {
    this.returnTaxes = returnTaxes;
    return this;
  }

  public OrderReturn addReturnTaxesItem(OrderReturnTax returnTaxesItem) {
    if (this.returnTaxes == null) {
      this.returnTaxes = new ArrayList<>();
    }
    this.returnTaxes.add(returnTaxesItem);
    return this;
  }

  /**
   * A collection of references to taxes being returned for an order, including the total applied tax amount to be returned. The taxes must reference a top-level tax ID from the source order.
   * @return returnTaxes
   */
  @javax.annotation.Nullable
  public List<OrderReturnTax> getReturnTaxes() {
    return returnTaxes;
  }

  public void setReturnTaxes(List<OrderReturnTax> returnTaxes) {
    this.returnTaxes = returnTaxes;
  }


  public OrderReturn roundingAdjustment(OrderRoundingAdjustment roundingAdjustment) {
    this.roundingAdjustment = roundingAdjustment;
    return this;
  }

  /**
   * Get roundingAdjustment
   * @return roundingAdjustment
   */
  @javax.annotation.Nullable
  public OrderRoundingAdjustment getRoundingAdjustment() {
    return roundingAdjustment;
  }

  public void setRoundingAdjustment(OrderRoundingAdjustment roundingAdjustment) {
    this.roundingAdjustment = roundingAdjustment;
  }


  public OrderReturn sourceOrderId(String sourceOrderId) {
    this.sourceOrderId = sourceOrderId;
    return this;
  }

  /**
   * An order that contains the original sale of these return line items. This is unset for unlinked returns.
   * @return sourceOrderId
   */
  @javax.annotation.Nullable
  public String getSourceOrderId() {
    return sourceOrderId;
  }

  public void setSourceOrderId(String sourceOrderId) {
    this.sourceOrderId = sourceOrderId;
  }


  public OrderReturn uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * A unique ID that identifies the return only within this order.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderReturn orderReturn = (OrderReturn) o;
    return Objects.equals(this.returnAmounts, orderReturn.returnAmounts) &&
        Objects.equals(this.returnDiscounts, orderReturn.returnDiscounts) &&
        Objects.equals(this.returnLineItems, orderReturn.returnLineItems) &&
        Objects.equals(this.returnServiceCharges, orderReturn.returnServiceCharges) &&
        Objects.equals(this.returnTaxes, orderReturn.returnTaxes) &&
        Objects.equals(this.roundingAdjustment, orderReturn.roundingAdjustment) &&
        Objects.equals(this.sourceOrderId, orderReturn.sourceOrderId) &&
        Objects.equals(this.uid, orderReturn.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(returnAmounts, returnDiscounts, returnLineItems, returnServiceCharges, returnTaxes, roundingAdjustment, sourceOrderId, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderReturn {\n");
    sb.append("    returnAmounts: ").append(toIndentedString(returnAmounts)).append("\n");
    sb.append("    returnDiscounts: ").append(toIndentedString(returnDiscounts)).append("\n");
    sb.append("    returnLineItems: ").append(toIndentedString(returnLineItems)).append("\n");
    sb.append("    returnServiceCharges: ").append(toIndentedString(returnServiceCharges)).append("\n");
    sb.append("    returnTaxes: ").append(toIndentedString(returnTaxes)).append("\n");
    sb.append("    roundingAdjustment: ").append(toIndentedString(roundingAdjustment)).append("\n");
    sb.append("    sourceOrderId: ").append(toIndentedString(sourceOrderId)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("return_amounts");
    openapiFields.add("return_discounts");
    openapiFields.add("return_line_items");
    openapiFields.add("return_service_charges");
    openapiFields.add("return_taxes");
    openapiFields.add("rounding_adjustment");
    openapiFields.add("source_order_id");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderReturn
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderReturn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderReturn is not found in the empty JSON string", OrderReturn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderReturn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderReturn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `return_amounts`
      if (jsonObj.get("return_amounts") != null && !jsonObj.get("return_amounts").isJsonNull()) {
        OrderMoneyAmounts.validateJsonElement(jsonObj.get("return_amounts"));
      }
      if (jsonObj.get("return_discounts") != null && !jsonObj.get("return_discounts").isJsonNull()) {
        JsonArray jsonArrayreturnDiscounts = jsonObj.getAsJsonArray("return_discounts");
        if (jsonArrayreturnDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("return_discounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `return_discounts` to be an array in the JSON string but got `%s`", jsonObj.get("return_discounts").toString()));
          }

          // validate the optional field `return_discounts` (array)
          for (int i = 0; i < jsonArrayreturnDiscounts.size(); i++) {
            OrderReturnDiscount.validateJsonElement(jsonArrayreturnDiscounts.get(i));
          };
        }
      }
      if (jsonObj.get("return_line_items") != null && !jsonObj.get("return_line_items").isJsonNull()) {
        JsonArray jsonArrayreturnLineItems = jsonObj.getAsJsonArray("return_line_items");
        if (jsonArrayreturnLineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("return_line_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `return_line_items` to be an array in the JSON string but got `%s`", jsonObj.get("return_line_items").toString()));
          }

          // validate the optional field `return_line_items` (array)
          for (int i = 0; i < jsonArrayreturnLineItems.size(); i++) {
            OrderReturnLineItem.validateJsonElement(jsonArrayreturnLineItems.get(i));
          };
        }
      }
      if (jsonObj.get("return_service_charges") != null && !jsonObj.get("return_service_charges").isJsonNull()) {
        JsonArray jsonArrayreturnServiceCharges = jsonObj.getAsJsonArray("return_service_charges");
        if (jsonArrayreturnServiceCharges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("return_service_charges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `return_service_charges` to be an array in the JSON string but got `%s`", jsonObj.get("return_service_charges").toString()));
          }

          // validate the optional field `return_service_charges` (array)
          for (int i = 0; i < jsonArrayreturnServiceCharges.size(); i++) {
            OrderReturnServiceCharge.validateJsonElement(jsonArrayreturnServiceCharges.get(i));
          };
        }
      }
      if (jsonObj.get("return_taxes") != null && !jsonObj.get("return_taxes").isJsonNull()) {
        JsonArray jsonArrayreturnTaxes = jsonObj.getAsJsonArray("return_taxes");
        if (jsonArrayreturnTaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("return_taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `return_taxes` to be an array in the JSON string but got `%s`", jsonObj.get("return_taxes").toString()));
          }

          // validate the optional field `return_taxes` (array)
          for (int i = 0; i < jsonArrayreturnTaxes.size(); i++) {
            OrderReturnTax.validateJsonElement(jsonArrayreturnTaxes.get(i));
          };
        }
      }
      // validate the optional field `rounding_adjustment`
      if (jsonObj.get("rounding_adjustment") != null && !jsonObj.get("rounding_adjustment").isJsonNull()) {
        OrderRoundingAdjustment.validateJsonElement(jsonObj.get("rounding_adjustment"));
      }
      if ((jsonObj.get("source_order_id") != null && !jsonObj.get("source_order_id").isJsonNull()) && !jsonObj.get("source_order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_order_id").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderReturn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderReturn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderReturn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderReturn.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderReturn>() {
           @Override
           public void write(JsonWriter out, OrderReturn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderReturn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderReturn given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderReturn
   * @throws IOException if the JSON string is invalid with respect to OrderReturn
   */
  public static OrderReturn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderReturn.class);
  }

  /**
   * Convert an instance of OrderReturn to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

