/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SegmentFilter;
import org.openapitools.client.model.TimeRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A query filter to search for availabilities by.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchAvailabilityFilter {
  public static final String SERIALIZED_NAME_BOOKING_ID = "booking_id";
  @SerializedName(SERIALIZED_NAME_BOOKING_ID)
  private String bookingId;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_SEGMENT_FILTERS = "segment_filters";
  @SerializedName(SERIALIZED_NAME_SEGMENT_FILTERS)
  private List<SegmentFilter> segmentFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_AT_RANGE = "start_at_range";
  @SerializedName(SERIALIZED_NAME_START_AT_RANGE)
  private TimeRange startAtRange;

  public SearchAvailabilityFilter() {
  }

  public SearchAvailabilityFilter bookingId(String bookingId) {
    this.bookingId = bookingId;
    return this;
  }

  /**
   * The query expression to search for availabilities for an existing booking by matching the specified &#x60;booking_id&#x60; value. This is commonly used to reschedule an appointment. If this expression is specified, the &#x60;location_id&#x60; and &#x60;segment_filters&#x60; expressions are not allowed.
   * @return bookingId
   */
  @javax.annotation.Nullable
  public String getBookingId() {
    return bookingId;
  }

  public void setBookingId(String bookingId) {
    this.bookingId = bookingId;
  }


  public SearchAvailabilityFilter locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The query expression to search for availabilities matching the specified seller location IDs. This query expression is not applicable when &#x60;booking_id&#x60; is present.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public SearchAvailabilityFilter segmentFilters(List<SegmentFilter> segmentFilters) {
    this.segmentFilters = segmentFilters;
    return this;
  }

  public SearchAvailabilityFilter addSegmentFiltersItem(SegmentFilter segmentFiltersItem) {
    if (this.segmentFilters == null) {
      this.segmentFilters = new ArrayList<>();
    }
    this.segmentFilters.add(segmentFiltersItem);
    return this;
  }

  /**
   * The list of segment filters to apply. A query with &#x60;n&#x60; segment filters returns availabilities with &#x60;n&#x60; segments per availability. It is not applicable when &#x60;booking_id&#x60; is present.
   * @return segmentFilters
   */
  @javax.annotation.Nullable
  public List<SegmentFilter> getSegmentFilters() {
    return segmentFilters;
  }

  public void setSegmentFilters(List<SegmentFilter> segmentFilters) {
    this.segmentFilters = segmentFilters;
  }


  public SearchAvailabilityFilter startAtRange(TimeRange startAtRange) {
    this.startAtRange = startAtRange;
    return this;
  }

  /**
   * Get startAtRange
   * @return startAtRange
   */
  @javax.annotation.Nonnull
  public TimeRange getStartAtRange() {
    return startAtRange;
  }

  public void setStartAtRange(TimeRange startAtRange) {
    this.startAtRange = startAtRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchAvailabilityFilter searchAvailabilityFilter = (SearchAvailabilityFilter) o;
    return Objects.equals(this.bookingId, searchAvailabilityFilter.bookingId) &&
        Objects.equals(this.locationId, searchAvailabilityFilter.locationId) &&
        Objects.equals(this.segmentFilters, searchAvailabilityFilter.segmentFilters) &&
        Objects.equals(this.startAtRange, searchAvailabilityFilter.startAtRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bookingId, locationId, segmentFilters, startAtRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchAvailabilityFilter {\n");
    sb.append("    bookingId: ").append(toIndentedString(bookingId)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    segmentFilters: ").append(toIndentedString(segmentFilters)).append("\n");
    sb.append("    startAtRange: ").append(toIndentedString(startAtRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("booking_id");
    openapiFields.add("location_id");
    openapiFields.add("segment_filters");
    openapiFields.add("start_at_range");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("start_at_range");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchAvailabilityFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchAvailabilityFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchAvailabilityFilter is not found in the empty JSON string", SearchAvailabilityFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchAvailabilityFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchAvailabilityFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchAvailabilityFilter.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("booking_id") != null && !jsonObj.get("booking_id").isJsonNull()) && !jsonObj.get("booking_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `booking_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("booking_id").toString()));
      }
      if ((jsonObj.get("location_id") != null && !jsonObj.get("location_id").isJsonNull()) && !jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      if (jsonObj.get("segment_filters") != null && !jsonObj.get("segment_filters").isJsonNull()) {
        JsonArray jsonArraysegmentFilters = jsonObj.getAsJsonArray("segment_filters");
        if (jsonArraysegmentFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("segment_filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `segment_filters` to be an array in the JSON string but got `%s`", jsonObj.get("segment_filters").toString()));
          }

          // validate the optional field `segment_filters` (array)
          for (int i = 0; i < jsonArraysegmentFilters.size(); i++) {
            SegmentFilter.validateJsonElement(jsonArraysegmentFilters.get(i));
          };
        }
      }
      // validate the required field `start_at_range`
      TimeRange.validateJsonElement(jsonObj.get("start_at_range"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchAvailabilityFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchAvailabilityFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchAvailabilityFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchAvailabilityFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchAvailabilityFilter>() {
           @Override
           public void write(JsonWriter out, SearchAvailabilityFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchAvailabilityFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchAvailabilityFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchAvailabilityFilter
   * @throws IOException if the JSON string is invalid with respect to SearchAvailabilityFilter
   */
  public static SearchAvailabilityFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchAvailabilityFilter.class);
  }

  /**
   * Convert an instance of SearchAvailabilityFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

