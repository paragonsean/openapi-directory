/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A collection of various money amounts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderMoneyAmounts {
  public static final String SERIALIZED_NAME_DISCOUNT_MONEY = "discount_money";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_MONEY)
  private Money discountMoney;

  public static final String SERIALIZED_NAME_SERVICE_CHARGE_MONEY = "service_charge_money";
  @SerializedName(SERIALIZED_NAME_SERVICE_CHARGE_MONEY)
  private Money serviceChargeMoney;

  public static final String SERIALIZED_NAME_TAX_MONEY = "tax_money";
  @SerializedName(SERIALIZED_NAME_TAX_MONEY)
  private Money taxMoney;

  public static final String SERIALIZED_NAME_TIP_MONEY = "tip_money";
  @SerializedName(SERIALIZED_NAME_TIP_MONEY)
  private Money tipMoney;

  public static final String SERIALIZED_NAME_TOTAL_MONEY = "total_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_MONEY)
  private Money totalMoney;

  public OrderMoneyAmounts() {
  }

  public OrderMoneyAmounts discountMoney(Money discountMoney) {
    this.discountMoney = discountMoney;
    return this;
  }

  /**
   * Get discountMoney
   * @return discountMoney
   */
  @javax.annotation.Nullable
  public Money getDiscountMoney() {
    return discountMoney;
  }

  public void setDiscountMoney(Money discountMoney) {
    this.discountMoney = discountMoney;
  }


  public OrderMoneyAmounts serviceChargeMoney(Money serviceChargeMoney) {
    this.serviceChargeMoney = serviceChargeMoney;
    return this;
  }

  /**
   * Get serviceChargeMoney
   * @return serviceChargeMoney
   */
  @javax.annotation.Nullable
  public Money getServiceChargeMoney() {
    return serviceChargeMoney;
  }

  public void setServiceChargeMoney(Money serviceChargeMoney) {
    this.serviceChargeMoney = serviceChargeMoney;
  }


  public OrderMoneyAmounts taxMoney(Money taxMoney) {
    this.taxMoney = taxMoney;
    return this;
  }

  /**
   * Get taxMoney
   * @return taxMoney
   */
  @javax.annotation.Nullable
  public Money getTaxMoney() {
    return taxMoney;
  }

  public void setTaxMoney(Money taxMoney) {
    this.taxMoney = taxMoney;
  }


  public OrderMoneyAmounts tipMoney(Money tipMoney) {
    this.tipMoney = tipMoney;
    return this;
  }

  /**
   * Get tipMoney
   * @return tipMoney
   */
  @javax.annotation.Nullable
  public Money getTipMoney() {
    return tipMoney;
  }

  public void setTipMoney(Money tipMoney) {
    this.tipMoney = tipMoney;
  }


  public OrderMoneyAmounts totalMoney(Money totalMoney) {
    this.totalMoney = totalMoney;
    return this;
  }

  /**
   * Get totalMoney
   * @return totalMoney
   */
  @javax.annotation.Nullable
  public Money getTotalMoney() {
    return totalMoney;
  }

  public void setTotalMoney(Money totalMoney) {
    this.totalMoney = totalMoney;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderMoneyAmounts orderMoneyAmounts = (OrderMoneyAmounts) o;
    return Objects.equals(this.discountMoney, orderMoneyAmounts.discountMoney) &&
        Objects.equals(this.serviceChargeMoney, orderMoneyAmounts.serviceChargeMoney) &&
        Objects.equals(this.taxMoney, orderMoneyAmounts.taxMoney) &&
        Objects.equals(this.tipMoney, orderMoneyAmounts.tipMoney) &&
        Objects.equals(this.totalMoney, orderMoneyAmounts.totalMoney);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discountMoney, serviceChargeMoney, taxMoney, tipMoney, totalMoney);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderMoneyAmounts {\n");
    sb.append("    discountMoney: ").append(toIndentedString(discountMoney)).append("\n");
    sb.append("    serviceChargeMoney: ").append(toIndentedString(serviceChargeMoney)).append("\n");
    sb.append("    taxMoney: ").append(toIndentedString(taxMoney)).append("\n");
    sb.append("    tipMoney: ").append(toIndentedString(tipMoney)).append("\n");
    sb.append("    totalMoney: ").append(toIndentedString(totalMoney)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("discount_money");
    openapiFields.add("service_charge_money");
    openapiFields.add("tax_money");
    openapiFields.add("tip_money");
    openapiFields.add("total_money");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderMoneyAmounts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderMoneyAmounts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderMoneyAmounts is not found in the empty JSON string", OrderMoneyAmounts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderMoneyAmounts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderMoneyAmounts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `discount_money`
      if (jsonObj.get("discount_money") != null && !jsonObj.get("discount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("discount_money"));
      }
      // validate the optional field `service_charge_money`
      if (jsonObj.get("service_charge_money") != null && !jsonObj.get("service_charge_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("service_charge_money"));
      }
      // validate the optional field `tax_money`
      if (jsonObj.get("tax_money") != null && !jsonObj.get("tax_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("tax_money"));
      }
      // validate the optional field `tip_money`
      if (jsonObj.get("tip_money") != null && !jsonObj.get("tip_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("tip_money"));
      }
      // validate the optional field `total_money`
      if (jsonObj.get("total_money") != null && !jsonObj.get("total_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_money"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderMoneyAmounts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderMoneyAmounts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderMoneyAmounts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderMoneyAmounts.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderMoneyAmounts>() {
           @Override
           public void write(JsonWriter out, OrderMoneyAmounts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderMoneyAmounts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderMoneyAmounts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderMoneyAmounts
   * @throws IOException if the JSON string is invalid with respect to OrderMoneyAmounts
   */
  public static OrderMoneyAmounts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderMoneyAmounts.class);
  }

  /**
   * Convert an instance of OrderMoneyAmounts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

