/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CashDrawerDevice;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This model gives the details of a cash drawer shift. The cash_payment_money, cash_refund_money, cash_paid_in_money, and cash_paid_out_money fields are all computed by summing their respective event types.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CashDrawerShift {
  public static final String SERIALIZED_NAME_CASH_PAID_IN_MONEY = "cash_paid_in_money";
  @SerializedName(SERIALIZED_NAME_CASH_PAID_IN_MONEY)
  private Money cashPaidInMoney;

  public static final String SERIALIZED_NAME_CASH_PAID_OUT_MONEY = "cash_paid_out_money";
  @SerializedName(SERIALIZED_NAME_CASH_PAID_OUT_MONEY)
  private Money cashPaidOutMoney;

  public static final String SERIALIZED_NAME_CASH_PAYMENT_MONEY = "cash_payment_money";
  @SerializedName(SERIALIZED_NAME_CASH_PAYMENT_MONEY)
  private Money cashPaymentMoney;

  public static final String SERIALIZED_NAME_CASH_REFUNDS_MONEY = "cash_refunds_money";
  @SerializedName(SERIALIZED_NAME_CASH_REFUNDS_MONEY)
  private Money cashRefundsMoney;

  public static final String SERIALIZED_NAME_CLOSED_AT = "closed_at";
  @SerializedName(SERIALIZED_NAME_CLOSED_AT)
  private String closedAt;

  public static final String SERIALIZED_NAME_CLOSED_CASH_MONEY = "closed_cash_money";
  @SerializedName(SERIALIZED_NAME_CLOSED_CASH_MONEY)
  private Money closedCashMoney;

  public static final String SERIALIZED_NAME_CLOSING_EMPLOYEE_ID = "closing_employee_id";
  @SerializedName(SERIALIZED_NAME_CLOSING_EMPLOYEE_ID)
  private String closingEmployeeId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private CashDrawerDevice device;

  public static final String SERIALIZED_NAME_EMPLOYEE_IDS = "employee_ids";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_IDS)
  private List<String> employeeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENDED_AT = "ended_at";
  @SerializedName(SERIALIZED_NAME_ENDED_AT)
  private String endedAt;

  public static final String SERIALIZED_NAME_ENDING_EMPLOYEE_ID = "ending_employee_id";
  @SerializedName(SERIALIZED_NAME_ENDING_EMPLOYEE_ID)
  private String endingEmployeeId;

  public static final String SERIALIZED_NAME_EXPECTED_CASH_MONEY = "expected_cash_money";
  @SerializedName(SERIALIZED_NAME_EXPECTED_CASH_MONEY)
  private Money expectedCashMoney;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OPENED_AT = "opened_at";
  @SerializedName(SERIALIZED_NAME_OPENED_AT)
  private String openedAt;

  public static final String SERIALIZED_NAME_OPENED_CASH_MONEY = "opened_cash_money";
  @SerializedName(SERIALIZED_NAME_OPENED_CASH_MONEY)
  private Money openedCashMoney;

  public static final String SERIALIZED_NAME_OPENING_EMPLOYEE_ID = "opening_employee_id";
  @SerializedName(SERIALIZED_NAME_OPENING_EMPLOYEE_ID)
  private String openingEmployeeId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public CashDrawerShift() {
  }

  public CashDrawerShift cashPaidInMoney(Money cashPaidInMoney) {
    this.cashPaidInMoney = cashPaidInMoney;
    return this;
  }

  /**
   * Get cashPaidInMoney
   * @return cashPaidInMoney
   */
  @javax.annotation.Nullable
  public Money getCashPaidInMoney() {
    return cashPaidInMoney;
  }

  public void setCashPaidInMoney(Money cashPaidInMoney) {
    this.cashPaidInMoney = cashPaidInMoney;
  }


  public CashDrawerShift cashPaidOutMoney(Money cashPaidOutMoney) {
    this.cashPaidOutMoney = cashPaidOutMoney;
    return this;
  }

  /**
   * Get cashPaidOutMoney
   * @return cashPaidOutMoney
   */
  @javax.annotation.Nullable
  public Money getCashPaidOutMoney() {
    return cashPaidOutMoney;
  }

  public void setCashPaidOutMoney(Money cashPaidOutMoney) {
    this.cashPaidOutMoney = cashPaidOutMoney;
  }


  public CashDrawerShift cashPaymentMoney(Money cashPaymentMoney) {
    this.cashPaymentMoney = cashPaymentMoney;
    return this;
  }

  /**
   * Get cashPaymentMoney
   * @return cashPaymentMoney
   */
  @javax.annotation.Nullable
  public Money getCashPaymentMoney() {
    return cashPaymentMoney;
  }

  public void setCashPaymentMoney(Money cashPaymentMoney) {
    this.cashPaymentMoney = cashPaymentMoney;
  }


  public CashDrawerShift cashRefundsMoney(Money cashRefundsMoney) {
    this.cashRefundsMoney = cashRefundsMoney;
    return this;
  }

  /**
   * Get cashRefundsMoney
   * @return cashRefundsMoney
   */
  @javax.annotation.Nullable
  public Money getCashRefundsMoney() {
    return cashRefundsMoney;
  }

  public void setCashRefundsMoney(Money cashRefundsMoney) {
    this.cashRefundsMoney = cashRefundsMoney;
  }


  public CashDrawerShift closedAt(String closedAt) {
    this.closedAt = closedAt;
    return this;
  }

  /**
   * The time when the shift was closed, in ISO 8601 format.
   * @return closedAt
   */
  @javax.annotation.Nullable
  public String getClosedAt() {
    return closedAt;
  }

  public void setClosedAt(String closedAt) {
    this.closedAt = closedAt;
  }


  public CashDrawerShift closedCashMoney(Money closedCashMoney) {
    this.closedCashMoney = closedCashMoney;
    return this;
  }

  /**
   * Get closedCashMoney
   * @return closedCashMoney
   */
  @javax.annotation.Nullable
  public Money getClosedCashMoney() {
    return closedCashMoney;
  }

  public void setClosedCashMoney(Money closedCashMoney) {
    this.closedCashMoney = closedCashMoney;
  }


  public CashDrawerShift closingEmployeeId(String closingEmployeeId) {
    this.closingEmployeeId = closingEmployeeId;
    return this;
  }

  /**
   * The ID of the employee that closed the cash drawer shift by auditing the cash drawer contents.
   * @return closingEmployeeId
   */
  @javax.annotation.Nullable
  public String getClosingEmployeeId() {
    return closingEmployeeId;
  }

  public void setClosingEmployeeId(String closingEmployeeId) {
    this.closingEmployeeId = closingEmployeeId;
  }


  public CashDrawerShift description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The free-form text description of a cash drawer by an employee.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CashDrawerShift device(CashDrawerDevice device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device
   */
  @javax.annotation.Nullable
  public CashDrawerDevice getDevice() {
    return device;
  }

  public void setDevice(CashDrawerDevice device) {
    this.device = device;
  }


  public CashDrawerShift employeeIds(List<String> employeeIds) {
    this.employeeIds = employeeIds;
    return this;
  }

  public CashDrawerShift addEmployeeIdsItem(String employeeIdsItem) {
    if (this.employeeIds == null) {
      this.employeeIds = new ArrayList<>();
    }
    this.employeeIds.add(employeeIdsItem);
    return this;
  }

  /**
   * The IDs of all employees that were logged into Square Point of Sale at any point while the cash drawer shift was open.
   * @return employeeIds
   */
  @javax.annotation.Nullable
  public List<String> getEmployeeIds() {
    return employeeIds;
  }

  public void setEmployeeIds(List<String> employeeIds) {
    this.employeeIds = employeeIds;
  }


  public CashDrawerShift endedAt(String endedAt) {
    this.endedAt = endedAt;
    return this;
  }

  /**
   * The time when the shift ended, in ISO 8601 format.
   * @return endedAt
   */
  @javax.annotation.Nullable
  public String getEndedAt() {
    return endedAt;
  }

  public void setEndedAt(String endedAt) {
    this.endedAt = endedAt;
  }


  public CashDrawerShift endingEmployeeId(String endingEmployeeId) {
    this.endingEmployeeId = endingEmployeeId;
    return this;
  }

  /**
   * The ID of the employee that ended the cash drawer shift.
   * @return endingEmployeeId
   */
  @javax.annotation.Nullable
  public String getEndingEmployeeId() {
    return endingEmployeeId;
  }

  public void setEndingEmployeeId(String endingEmployeeId) {
    this.endingEmployeeId = endingEmployeeId;
  }


  public CashDrawerShift expectedCashMoney(Money expectedCashMoney) {
    this.expectedCashMoney = expectedCashMoney;
    return this;
  }

  /**
   * Get expectedCashMoney
   * @return expectedCashMoney
   */
  @javax.annotation.Nullable
  public Money getExpectedCashMoney() {
    return expectedCashMoney;
  }

  public void setExpectedCashMoney(Money expectedCashMoney) {
    this.expectedCashMoney = expectedCashMoney;
  }


  public CashDrawerShift id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The shift unique ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CashDrawerShift openedAt(String openedAt) {
    this.openedAt = openedAt;
    return this;
  }

  /**
   * The time when the shift began, in ISO 8601 format.
   * @return openedAt
   */
  @javax.annotation.Nullable
  public String getOpenedAt() {
    return openedAt;
  }

  public void setOpenedAt(String openedAt) {
    this.openedAt = openedAt;
  }


  public CashDrawerShift openedCashMoney(Money openedCashMoney) {
    this.openedCashMoney = openedCashMoney;
    return this;
  }

  /**
   * Get openedCashMoney
   * @return openedCashMoney
   */
  @javax.annotation.Nullable
  public Money getOpenedCashMoney() {
    return openedCashMoney;
  }

  public void setOpenedCashMoney(Money openedCashMoney) {
    this.openedCashMoney = openedCashMoney;
  }


  public CashDrawerShift openingEmployeeId(String openingEmployeeId) {
    this.openingEmployeeId = openingEmployeeId;
    return this;
  }

  /**
   * The ID of the employee that started the cash drawer shift.
   * @return openingEmployeeId
   */
  @javax.annotation.Nullable
  public String getOpeningEmployeeId() {
    return openingEmployeeId;
  }

  public void setOpeningEmployeeId(String openingEmployeeId) {
    this.openingEmployeeId = openingEmployeeId;
  }


  public CashDrawerShift state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The shift current state.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashDrawerShift cashDrawerShift = (CashDrawerShift) o;
    return Objects.equals(this.cashPaidInMoney, cashDrawerShift.cashPaidInMoney) &&
        Objects.equals(this.cashPaidOutMoney, cashDrawerShift.cashPaidOutMoney) &&
        Objects.equals(this.cashPaymentMoney, cashDrawerShift.cashPaymentMoney) &&
        Objects.equals(this.cashRefundsMoney, cashDrawerShift.cashRefundsMoney) &&
        Objects.equals(this.closedAt, cashDrawerShift.closedAt) &&
        Objects.equals(this.closedCashMoney, cashDrawerShift.closedCashMoney) &&
        Objects.equals(this.closingEmployeeId, cashDrawerShift.closingEmployeeId) &&
        Objects.equals(this.description, cashDrawerShift.description) &&
        Objects.equals(this.device, cashDrawerShift.device) &&
        Objects.equals(this.employeeIds, cashDrawerShift.employeeIds) &&
        Objects.equals(this.endedAt, cashDrawerShift.endedAt) &&
        Objects.equals(this.endingEmployeeId, cashDrawerShift.endingEmployeeId) &&
        Objects.equals(this.expectedCashMoney, cashDrawerShift.expectedCashMoney) &&
        Objects.equals(this.id, cashDrawerShift.id) &&
        Objects.equals(this.openedAt, cashDrawerShift.openedAt) &&
        Objects.equals(this.openedCashMoney, cashDrawerShift.openedCashMoney) &&
        Objects.equals(this.openingEmployeeId, cashDrawerShift.openingEmployeeId) &&
        Objects.equals(this.state, cashDrawerShift.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cashPaidInMoney, cashPaidOutMoney, cashPaymentMoney, cashRefundsMoney, closedAt, closedCashMoney, closingEmployeeId, description, device, employeeIds, endedAt, endingEmployeeId, expectedCashMoney, id, openedAt, openedCashMoney, openingEmployeeId, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashDrawerShift {\n");
    sb.append("    cashPaidInMoney: ").append(toIndentedString(cashPaidInMoney)).append("\n");
    sb.append("    cashPaidOutMoney: ").append(toIndentedString(cashPaidOutMoney)).append("\n");
    sb.append("    cashPaymentMoney: ").append(toIndentedString(cashPaymentMoney)).append("\n");
    sb.append("    cashRefundsMoney: ").append(toIndentedString(cashRefundsMoney)).append("\n");
    sb.append("    closedAt: ").append(toIndentedString(closedAt)).append("\n");
    sb.append("    closedCashMoney: ").append(toIndentedString(closedCashMoney)).append("\n");
    sb.append("    closingEmployeeId: ").append(toIndentedString(closingEmployeeId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    employeeIds: ").append(toIndentedString(employeeIds)).append("\n");
    sb.append("    endedAt: ").append(toIndentedString(endedAt)).append("\n");
    sb.append("    endingEmployeeId: ").append(toIndentedString(endingEmployeeId)).append("\n");
    sb.append("    expectedCashMoney: ").append(toIndentedString(expectedCashMoney)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    openedAt: ").append(toIndentedString(openedAt)).append("\n");
    sb.append("    openedCashMoney: ").append(toIndentedString(openedCashMoney)).append("\n");
    sb.append("    openingEmployeeId: ").append(toIndentedString(openingEmployeeId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cash_paid_in_money");
    openapiFields.add("cash_paid_out_money");
    openapiFields.add("cash_payment_money");
    openapiFields.add("cash_refunds_money");
    openapiFields.add("closed_at");
    openapiFields.add("closed_cash_money");
    openapiFields.add("closing_employee_id");
    openapiFields.add("description");
    openapiFields.add("device");
    openapiFields.add("employee_ids");
    openapiFields.add("ended_at");
    openapiFields.add("ending_employee_id");
    openapiFields.add("expected_cash_money");
    openapiFields.add("id");
    openapiFields.add("opened_at");
    openapiFields.add("opened_cash_money");
    openapiFields.add("opening_employee_id");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CashDrawerShift
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CashDrawerShift.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CashDrawerShift is not found in the empty JSON string", CashDrawerShift.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CashDrawerShift.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CashDrawerShift` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cash_paid_in_money`
      if (jsonObj.get("cash_paid_in_money") != null && !jsonObj.get("cash_paid_in_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("cash_paid_in_money"));
      }
      // validate the optional field `cash_paid_out_money`
      if (jsonObj.get("cash_paid_out_money") != null && !jsonObj.get("cash_paid_out_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("cash_paid_out_money"));
      }
      // validate the optional field `cash_payment_money`
      if (jsonObj.get("cash_payment_money") != null && !jsonObj.get("cash_payment_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("cash_payment_money"));
      }
      // validate the optional field `cash_refunds_money`
      if (jsonObj.get("cash_refunds_money") != null && !jsonObj.get("cash_refunds_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("cash_refunds_money"));
      }
      if ((jsonObj.get("closed_at") != null && !jsonObj.get("closed_at").isJsonNull()) && !jsonObj.get("closed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closed_at").toString()));
      }
      // validate the optional field `closed_cash_money`
      if (jsonObj.get("closed_cash_money") != null && !jsonObj.get("closed_cash_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("closed_cash_money"));
      }
      if ((jsonObj.get("closing_employee_id") != null && !jsonObj.get("closing_employee_id").isJsonNull()) && !jsonObj.get("closing_employee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closing_employee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closing_employee_id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `device`
      if (jsonObj.get("device") != null && !jsonObj.get("device").isJsonNull()) {
        CashDrawerDevice.validateJsonElement(jsonObj.get("device"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("employee_ids") != null && !jsonObj.get("employee_ids").isJsonNull() && !jsonObj.get("employee_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_ids` to be an array in the JSON string but got `%s`", jsonObj.get("employee_ids").toString()));
      }
      if ((jsonObj.get("ended_at") != null && !jsonObj.get("ended_at").isJsonNull()) && !jsonObj.get("ended_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ended_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ended_at").toString()));
      }
      if ((jsonObj.get("ending_employee_id") != null && !jsonObj.get("ending_employee_id").isJsonNull()) && !jsonObj.get("ending_employee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ending_employee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ending_employee_id").toString()));
      }
      // validate the optional field `expected_cash_money`
      if (jsonObj.get("expected_cash_money") != null && !jsonObj.get("expected_cash_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("expected_cash_money"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("opened_at") != null && !jsonObj.get("opened_at").isJsonNull()) && !jsonObj.get("opened_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `opened_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("opened_at").toString()));
      }
      // validate the optional field `opened_cash_money`
      if (jsonObj.get("opened_cash_money") != null && !jsonObj.get("opened_cash_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("opened_cash_money"));
      }
      if ((jsonObj.get("opening_employee_id") != null && !jsonObj.get("opening_employee_id").isJsonNull()) && !jsonObj.get("opening_employee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `opening_employee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("opening_employee_id").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CashDrawerShift.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CashDrawerShift' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CashDrawerShift> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CashDrawerShift.class));

       return (TypeAdapter<T>) new TypeAdapter<CashDrawerShift>() {
           @Override
           public void write(JsonWriter out, CashDrawerShift value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CashDrawerShift read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CashDrawerShift given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CashDrawerShift
   * @throws IOException if the JSON string is invalid with respect to CashDrawerShift
   */
  public static CashDrawerShift fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CashDrawerShift.class);
  }

  /**
   * Convert an instance of CashDrawerShift to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

