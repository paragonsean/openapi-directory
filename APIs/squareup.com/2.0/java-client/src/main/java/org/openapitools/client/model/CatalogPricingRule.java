/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines how discounts are automatically applied to a set of items that match the pricing rule during the active time period.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogPricingRule {
  public static final String SERIALIZED_NAME_APPLY_PRODUCTS_ID = "apply_products_id";
  @SerializedName(SERIALIZED_NAME_APPLY_PRODUCTS_ID)
  private String applyProductsId;

  public static final String SERIALIZED_NAME_CUSTOMER_GROUP_IDS_ANY = "customer_group_ids_any";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_GROUP_IDS_ANY)
  private List<String> customerGroupIdsAny = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISCOUNT_ID = "discount_id";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_ID)
  private String discountId;

  public static final String SERIALIZED_NAME_EXCLUDE_PRODUCTS_ID = "exclude_products_id";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_PRODUCTS_ID)
  private String excludeProductsId;

  public static final String SERIALIZED_NAME_EXCLUDE_STRATEGY = "exclude_strategy";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_STRATEGY)
  private String excludeStrategy;

  public static final String SERIALIZED_NAME_MATCH_PRODUCTS_ID = "match_products_id";
  @SerializedName(SERIALIZED_NAME_MATCH_PRODUCTS_ID)
  private String matchProductsId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TIME_PERIOD_IDS = "time_period_ids";
  @SerializedName(SERIALIZED_NAME_TIME_PERIOD_IDS)
  private List<String> timePeriodIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALID_FROM_DATE = "valid_from_date";
  @SerializedName(SERIALIZED_NAME_VALID_FROM_DATE)
  private String validFromDate;

  public static final String SERIALIZED_NAME_VALID_FROM_LOCAL_TIME = "valid_from_local_time";
  @SerializedName(SERIALIZED_NAME_VALID_FROM_LOCAL_TIME)
  private String validFromLocalTime;

  public static final String SERIALIZED_NAME_VALID_UNTIL_DATE = "valid_until_date";
  @SerializedName(SERIALIZED_NAME_VALID_UNTIL_DATE)
  private String validUntilDate;

  public static final String SERIALIZED_NAME_VALID_UNTIL_LOCAL_TIME = "valid_until_local_time";
  @SerializedName(SERIALIZED_NAME_VALID_UNTIL_LOCAL_TIME)
  private String validUntilLocalTime;

  public CatalogPricingRule() {
  }

  public CatalogPricingRule applyProductsId(String applyProductsId) {
    this.applyProductsId = applyProductsId;
    return this;
  }

  /**
   * __Deprecated__: Please use the &#x60;exclude_products_id&#x60; field to apply an exclude set instead. Exclude sets allow better control over quantity ranges and offer more flexibility for which matched items receive a discount.  &#x60;CatalogProductSet&#x60; to apply the pricing to. An apply rule matches within the subset of the cart that fits the match rules (the match set). An apply rule can only match once in the match set. If not supplied, the pricing will be applied to all products in the match set. Other products retain their base price, or a price generated by other rules.
   * @return applyProductsId
   */
  @javax.annotation.Nullable
  public String getApplyProductsId() {
    return applyProductsId;
  }

  public void setApplyProductsId(String applyProductsId) {
    this.applyProductsId = applyProductsId;
  }


  public CatalogPricingRule customerGroupIdsAny(List<String> customerGroupIdsAny) {
    this.customerGroupIdsAny = customerGroupIdsAny;
    return this;
  }

  public CatalogPricingRule addCustomerGroupIdsAnyItem(String customerGroupIdsAnyItem) {
    if (this.customerGroupIdsAny == null) {
      this.customerGroupIdsAny = new ArrayList<>();
    }
    this.customerGroupIdsAny.add(customerGroupIdsAnyItem);
    return this;
  }

  /**
   * A list of IDs of customer groups, the members of which are eligible for discounts specified in this pricing rule. Notice that a group ID is generated by the Customers API. If this field is not set, the specified discount applies to matched products sold to anyone whether the buyer has a customer profile created or not. If this &#x60;customer_group_ids_any&#x60; field is set, the specified discount applies only to matched products sold to customers belonging to the specified customer groups.
   * @return customerGroupIdsAny
   */
  @javax.annotation.Nullable
  public List<String> getCustomerGroupIdsAny() {
    return customerGroupIdsAny;
  }

  public void setCustomerGroupIdsAny(List<String> customerGroupIdsAny) {
    this.customerGroupIdsAny = customerGroupIdsAny;
  }


  public CatalogPricingRule discountId(String discountId) {
    this.discountId = discountId;
    return this;
  }

  /**
   * Unique ID for the &#x60;CatalogDiscount&#x60; to take off the price of all matched items.
   * @return discountId
   */
  @javax.annotation.Nullable
  public String getDiscountId() {
    return discountId;
  }

  public void setDiscountId(String discountId) {
    this.discountId = discountId;
  }


  public CatalogPricingRule excludeProductsId(String excludeProductsId) {
    this.excludeProductsId = excludeProductsId;
    return this;
  }

  /**
   * &#x60;CatalogProductSet&#x60; to exclude from the pricing rule. An exclude rule matches within the subset of the cart that fits the match rules (the match set). An exclude rule can only match once in the match set. If not supplied, the pricing will be applied to all products in the match set. Other products retain their base price, or a price generated by other rules.
   * @return excludeProductsId
   */
  @javax.annotation.Nullable
  public String getExcludeProductsId() {
    return excludeProductsId;
  }

  public void setExcludeProductsId(String excludeProductsId) {
    this.excludeProductsId = excludeProductsId;
  }


  public CatalogPricingRule excludeStrategy(String excludeStrategy) {
    this.excludeStrategy = excludeStrategy;
    return this;
  }

  /**
   * If an &#x60;exclude_products_id&#x60; was given, controls which subset of matched products is excluded from any discounts.  Default value: &#x60;LEAST_EXPENSIVE&#x60;
   * @return excludeStrategy
   */
  @javax.annotation.Nullable
  public String getExcludeStrategy() {
    return excludeStrategy;
  }

  public void setExcludeStrategy(String excludeStrategy) {
    this.excludeStrategy = excludeStrategy;
  }


  public CatalogPricingRule matchProductsId(String matchProductsId) {
    this.matchProductsId = matchProductsId;
    return this;
  }

  /**
   * Unique ID for the &#x60;CatalogProductSet&#x60; that will be matched by this rule. A match rule matches within the entire cart, and can match multiple times. This field will always be set.
   * @return matchProductsId
   */
  @javax.annotation.Nullable
  public String getMatchProductsId() {
    return matchProductsId;
  }

  public void setMatchProductsId(String matchProductsId) {
    this.matchProductsId = matchProductsId;
  }


  public CatalogPricingRule name(String name) {
    this.name = name;
    return this;
  }

  /**
   * User-defined name for the pricing rule. For example, \&quot;Buy one get one free\&quot; or \&quot;10% off\&quot;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CatalogPricingRule timePeriodIds(List<String> timePeriodIds) {
    this.timePeriodIds = timePeriodIds;
    return this;
  }

  public CatalogPricingRule addTimePeriodIdsItem(String timePeriodIdsItem) {
    if (this.timePeriodIds == null) {
      this.timePeriodIds = new ArrayList<>();
    }
    this.timePeriodIds.add(timePeriodIdsItem);
    return this;
  }

  /**
   * A list of unique IDs for the catalog time periods when this pricing rule is in effect. If left unset, the pricing rule is always in effect.
   * @return timePeriodIds
   */
  @javax.annotation.Nullable
  public List<String> getTimePeriodIds() {
    return timePeriodIds;
  }

  public void setTimePeriodIds(List<String> timePeriodIds) {
    this.timePeriodIds = timePeriodIds;
  }


  public CatalogPricingRule validFromDate(String validFromDate) {
    this.validFromDate = validFromDate;
    return this;
  }

  /**
   * Represents the date the Pricing Rule is valid from. Represented in RFC 3339 full-date format (YYYY-MM-DD).
   * @return validFromDate
   */
  @javax.annotation.Nullable
  public String getValidFromDate() {
    return validFromDate;
  }

  public void setValidFromDate(String validFromDate) {
    this.validFromDate = validFromDate;
  }


  public CatalogPricingRule validFromLocalTime(String validFromLocalTime) {
    this.validFromLocalTime = validFromLocalTime;
    return this;
  }

  /**
   * Represents the local time the pricing rule should be valid from. Represented in RFC 3339 partial-time format (HH:MM:SS). Partial seconds will be truncated.
   * @return validFromLocalTime
   */
  @javax.annotation.Nullable
  public String getValidFromLocalTime() {
    return validFromLocalTime;
  }

  public void setValidFromLocalTime(String validFromLocalTime) {
    this.validFromLocalTime = validFromLocalTime;
  }


  public CatalogPricingRule validUntilDate(String validUntilDate) {
    this.validUntilDate = validUntilDate;
    return this;
  }

  /**
   * Represents the date the Pricing Rule is valid until. Represented in RFC 3339 full-date format (YYYY-MM-DD).
   * @return validUntilDate
   */
  @javax.annotation.Nullable
  public String getValidUntilDate() {
    return validUntilDate;
  }

  public void setValidUntilDate(String validUntilDate) {
    this.validUntilDate = validUntilDate;
  }


  public CatalogPricingRule validUntilLocalTime(String validUntilLocalTime) {
    this.validUntilLocalTime = validUntilLocalTime;
    return this;
  }

  /**
   * Represents the local time the pricing rule should be valid until. Represented in RFC 3339 partial-time format (HH:MM:SS). Partial seconds will be truncated.
   * @return validUntilLocalTime
   */
  @javax.annotation.Nullable
  public String getValidUntilLocalTime() {
    return validUntilLocalTime;
  }

  public void setValidUntilLocalTime(String validUntilLocalTime) {
    this.validUntilLocalTime = validUntilLocalTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogPricingRule catalogPricingRule = (CatalogPricingRule) o;
    return Objects.equals(this.applyProductsId, catalogPricingRule.applyProductsId) &&
        Objects.equals(this.customerGroupIdsAny, catalogPricingRule.customerGroupIdsAny) &&
        Objects.equals(this.discountId, catalogPricingRule.discountId) &&
        Objects.equals(this.excludeProductsId, catalogPricingRule.excludeProductsId) &&
        Objects.equals(this.excludeStrategy, catalogPricingRule.excludeStrategy) &&
        Objects.equals(this.matchProductsId, catalogPricingRule.matchProductsId) &&
        Objects.equals(this.name, catalogPricingRule.name) &&
        Objects.equals(this.timePeriodIds, catalogPricingRule.timePeriodIds) &&
        Objects.equals(this.validFromDate, catalogPricingRule.validFromDate) &&
        Objects.equals(this.validFromLocalTime, catalogPricingRule.validFromLocalTime) &&
        Objects.equals(this.validUntilDate, catalogPricingRule.validUntilDate) &&
        Objects.equals(this.validUntilLocalTime, catalogPricingRule.validUntilLocalTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applyProductsId, customerGroupIdsAny, discountId, excludeProductsId, excludeStrategy, matchProductsId, name, timePeriodIds, validFromDate, validFromLocalTime, validUntilDate, validUntilLocalTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogPricingRule {\n");
    sb.append("    applyProductsId: ").append(toIndentedString(applyProductsId)).append("\n");
    sb.append("    customerGroupIdsAny: ").append(toIndentedString(customerGroupIdsAny)).append("\n");
    sb.append("    discountId: ").append(toIndentedString(discountId)).append("\n");
    sb.append("    excludeProductsId: ").append(toIndentedString(excludeProductsId)).append("\n");
    sb.append("    excludeStrategy: ").append(toIndentedString(excludeStrategy)).append("\n");
    sb.append("    matchProductsId: ").append(toIndentedString(matchProductsId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    timePeriodIds: ").append(toIndentedString(timePeriodIds)).append("\n");
    sb.append("    validFromDate: ").append(toIndentedString(validFromDate)).append("\n");
    sb.append("    validFromLocalTime: ").append(toIndentedString(validFromLocalTime)).append("\n");
    sb.append("    validUntilDate: ").append(toIndentedString(validUntilDate)).append("\n");
    sb.append("    validUntilLocalTime: ").append(toIndentedString(validUntilLocalTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apply_products_id");
    openapiFields.add("customer_group_ids_any");
    openapiFields.add("discount_id");
    openapiFields.add("exclude_products_id");
    openapiFields.add("exclude_strategy");
    openapiFields.add("match_products_id");
    openapiFields.add("name");
    openapiFields.add("time_period_ids");
    openapiFields.add("valid_from_date");
    openapiFields.add("valid_from_local_time");
    openapiFields.add("valid_until_date");
    openapiFields.add("valid_until_local_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogPricingRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogPricingRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogPricingRule is not found in the empty JSON string", CatalogPricingRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogPricingRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogPricingRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apply_products_id") != null && !jsonObj.get("apply_products_id").isJsonNull()) && !jsonObj.get("apply_products_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apply_products_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apply_products_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customer_group_ids_any") != null && !jsonObj.get("customer_group_ids_any").isJsonNull() && !jsonObj.get("customer_group_ids_any").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_group_ids_any` to be an array in the JSON string but got `%s`", jsonObj.get("customer_group_ids_any").toString()));
      }
      if ((jsonObj.get("discount_id") != null && !jsonObj.get("discount_id").isJsonNull()) && !jsonObj.get("discount_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discount_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discount_id").toString()));
      }
      if ((jsonObj.get("exclude_products_id") != null && !jsonObj.get("exclude_products_id").isJsonNull()) && !jsonObj.get("exclude_products_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclude_products_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exclude_products_id").toString()));
      }
      if ((jsonObj.get("exclude_strategy") != null && !jsonObj.get("exclude_strategy").isJsonNull()) && !jsonObj.get("exclude_strategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclude_strategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exclude_strategy").toString()));
      }
      if ((jsonObj.get("match_products_id") != null && !jsonObj.get("match_products_id").isJsonNull()) && !jsonObj.get("match_products_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `match_products_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("match_products_id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("time_period_ids") != null && !jsonObj.get("time_period_ids").isJsonNull() && !jsonObj.get("time_period_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_period_ids` to be an array in the JSON string but got `%s`", jsonObj.get("time_period_ids").toString()));
      }
      if ((jsonObj.get("valid_from_date") != null && !jsonObj.get("valid_from_date").isJsonNull()) && !jsonObj.get("valid_from_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valid_from_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valid_from_date").toString()));
      }
      if ((jsonObj.get("valid_from_local_time") != null && !jsonObj.get("valid_from_local_time").isJsonNull()) && !jsonObj.get("valid_from_local_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valid_from_local_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valid_from_local_time").toString()));
      }
      if ((jsonObj.get("valid_until_date") != null && !jsonObj.get("valid_until_date").isJsonNull()) && !jsonObj.get("valid_until_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valid_until_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valid_until_date").toString()));
      }
      if ((jsonObj.get("valid_until_local_time") != null && !jsonObj.get("valid_until_local_time").isJsonNull()) && !jsonObj.get("valid_until_local_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valid_until_local_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valid_until_local_time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogPricingRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogPricingRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogPricingRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogPricingRule.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogPricingRule>() {
           @Override
           public void write(JsonWriter out, CatalogPricingRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogPricingRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogPricingRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogPricingRule
   * @throws IOException if the JSON string is invalid with respect to CatalogPricingRule
   */
  public static CatalogPricingRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogPricingRule.class);
  }

  /**
   * Convert an instance of CatalogPricingRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

