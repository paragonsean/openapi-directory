/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateCardRequest;
import org.openapitools.client.model.CreateCardResponse;
import org.openapitools.client.model.DisableCardResponse;
import org.openapitools.client.model.ListCardsResponse;
import org.openapitools.client.model.RetrieveCardResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CardsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CardsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CardsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCard
     * @param createCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCardCall(CreateCardRequest createCardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCardRequest;

        // create path and map variables
        String localVarPath = "/v2/cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCardValidateBeforeCall(CreateCardRequest createCardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCardRequest' is set
        if (createCardRequest == null) {
            throw new ApiException("Missing the required parameter 'createCardRequest' when calling createCard(Async)");
        }

        return createCardCall(createCardRequest, _callback);

    }

    /**
     * CreateCard
     * Adds a card on file to an existing merchant.
     * @param createCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return CreateCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateCardResponse createCard(CreateCardRequest createCardRequest) throws ApiException {
        ApiResponse<CreateCardResponse> localVarResp = createCardWithHttpInfo(createCardRequest);
        return localVarResp.getData();
    }

    /**
     * CreateCard
     * Adds a card on file to an existing merchant.
     * @param createCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;CreateCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCardResponse> createCardWithHttpInfo(CreateCardRequest createCardRequest) throws ApiException {
        okhttp3.Call localVarCall = createCardValidateBeforeCall(createCardRequest, null);
        Type localVarReturnType = new TypeToken<CreateCardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateCard (asynchronously)
     * Adds a card on file to an existing merchant.
     * @param createCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCardAsync(CreateCardRequest createCardRequest, final ApiCallback<CreateCardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCardValidateBeforeCall(createCardRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateCardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableCard
     * @param cardId Unique ID for the desired Card. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableCardCall(String cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cards/{card_id}/disable"
            .replace("{" + "card_id" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableCardValidateBeforeCall(String cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling disableCard(Async)");
        }

        return disableCardCall(cardId, _callback);

    }

    /**
     * DisableCard
     * Disables the card, preventing any further updates or charges. Disabling an already disabled card is allowed but has no effect.
     * @param cardId Unique ID for the desired Card. (required)
     * @return DisableCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DisableCardResponse disableCard(String cardId) throws ApiException {
        ApiResponse<DisableCardResponse> localVarResp = disableCardWithHttpInfo(cardId);
        return localVarResp.getData();
    }

    /**
     * DisableCard
     * Disables the card, preventing any further updates or charges. Disabling an already disabled card is allowed but has no effect.
     * @param cardId Unique ID for the desired Card. (required)
     * @return ApiResponse&lt;DisableCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisableCardResponse> disableCardWithHttpInfo(String cardId) throws ApiException {
        okhttp3.Call localVarCall = disableCardValidateBeforeCall(cardId, null);
        Type localVarReturnType = new TypeToken<DisableCardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DisableCard (asynchronously)
     * Disables the card, preventing any further updates or charges. Disabling an already disabled card is allowed but has no effect.
     * @param cardId Unique ID for the desired Card. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableCardAsync(String cardId, final ApiCallback<DisableCardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableCardValidateBeforeCall(cardId, _callback);
        Type localVarReturnType = new TypeToken<DisableCardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCards
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)
     * @param customerId Limit results to cards associated with the customer supplied. By default, all cards owned by the merchant are returned. (optional)
     * @param includeDisabled Includes disabled cards. By default, all enabled cards owned by the merchant are returned. (optional)
     * @param referenceId Limit results to cards associated with the reference_id supplied. (optional)
     * @param sortOrder Sorts the returned list by when the card was created with the specified order. This field defaults to ASC. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCardsCall(String cursor, String customerId, Boolean includeDisabled, String referenceId, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_id", customerId));
        }

        if (includeDisabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_disabled", includeDisabled));
        }

        if (referenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference_id", referenceId));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCardsValidateBeforeCall(String cursor, String customerId, Boolean includeDisabled, String referenceId, String sortOrder, final ApiCallback _callback) throws ApiException {
        return listCardsCall(cursor, customerId, includeDisabled, referenceId, sortOrder, _callback);

    }

    /**
     * ListCards
     * Retrieves a list of cards owned by the account making the request. A max of 25 cards will be returned.
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)
     * @param customerId Limit results to cards associated with the customer supplied. By default, all cards owned by the merchant are returned. (optional)
     * @param includeDisabled Includes disabled cards. By default, all enabled cards owned by the merchant are returned. (optional)
     * @param referenceId Limit results to cards associated with the reference_id supplied. (optional)
     * @param sortOrder Sorts the returned list by when the card was created with the specified order. This field defaults to ASC. (optional)
     * @return ListCardsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListCardsResponse listCards(String cursor, String customerId, Boolean includeDisabled, String referenceId, String sortOrder) throws ApiException {
        ApiResponse<ListCardsResponse> localVarResp = listCardsWithHttpInfo(cursor, customerId, includeDisabled, referenceId, sortOrder);
        return localVarResp.getData();
    }

    /**
     * ListCards
     * Retrieves a list of cards owned by the account making the request. A max of 25 cards will be returned.
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)
     * @param customerId Limit results to cards associated with the customer supplied. By default, all cards owned by the merchant are returned. (optional)
     * @param includeDisabled Includes disabled cards. By default, all enabled cards owned by the merchant are returned. (optional)
     * @param referenceId Limit results to cards associated with the reference_id supplied. (optional)
     * @param sortOrder Sorts the returned list by when the card was created with the specified order. This field defaults to ASC. (optional)
     * @return ApiResponse&lt;ListCardsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCardsResponse> listCardsWithHttpInfo(String cursor, String customerId, Boolean includeDisabled, String referenceId, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listCardsValidateBeforeCall(cursor, customerId, includeDisabled, referenceId, sortOrder, null);
        Type localVarReturnType = new TypeToken<ListCardsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListCards (asynchronously)
     * Retrieves a list of cards owned by the account making the request. A max of 25 cards will be returned.
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)
     * @param customerId Limit results to cards associated with the customer supplied. By default, all cards owned by the merchant are returned. (optional)
     * @param includeDisabled Includes disabled cards. By default, all enabled cards owned by the merchant are returned. (optional)
     * @param referenceId Limit results to cards associated with the reference_id supplied. (optional)
     * @param sortOrder Sorts the returned list by when the card was created with the specified order. This field defaults to ASC. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCardsAsync(String cursor, String customerId, Boolean includeDisabled, String referenceId, String sortOrder, final ApiCallback<ListCardsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCardsValidateBeforeCall(cursor, customerId, includeDisabled, referenceId, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<ListCardsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveCard
     * @param cardId Unique ID for the desired Card. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveCardCall(String cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cards/{card_id}"
            .replace("{" + "card_id" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveCardValidateBeforeCall(String cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling retrieveCard(Async)");
        }

        return retrieveCardCall(cardId, _callback);

    }

    /**
     * RetrieveCard
     * Retrieves details for a specific Card.
     * @param cardId Unique ID for the desired Card. (required)
     * @return RetrieveCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveCardResponse retrieveCard(String cardId) throws ApiException {
        ApiResponse<RetrieveCardResponse> localVarResp = retrieveCardWithHttpInfo(cardId);
        return localVarResp.getData();
    }

    /**
     * RetrieveCard
     * Retrieves details for a specific Card.
     * @param cardId Unique ID for the desired Card. (required)
     * @return ApiResponse&lt;RetrieveCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveCardResponse> retrieveCardWithHttpInfo(String cardId) throws ApiException {
        okhttp3.Call localVarCall = retrieveCardValidateBeforeCall(cardId, null);
        Type localVarReturnType = new TypeToken<RetrieveCardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveCard (asynchronously)
     * Retrieves details for a specific Card.
     * @param cardId Unique ID for the desired Card. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveCardAsync(String cardId, final ApiCallback<RetrieveCardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveCardValidateBeforeCall(cardId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveCardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
