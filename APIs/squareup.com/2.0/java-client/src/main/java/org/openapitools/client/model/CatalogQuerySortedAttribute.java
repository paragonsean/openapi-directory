/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The query expression to specify the key to sort search results.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogQuerySortedAttribute {
  public static final String SERIALIZED_NAME_ATTRIBUTE_NAME = "attribute_name";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_NAME)
  private String attributeName;

  public static final String SERIALIZED_NAME_INITIAL_ATTRIBUTE_VALUE = "initial_attribute_value";
  @SerializedName(SERIALIZED_NAME_INITIAL_ATTRIBUTE_VALUE)
  private String initialAttributeValue;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sort_order";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private String sortOrder;

  public CatalogQuerySortedAttribute() {
  }

  public CatalogQuerySortedAttribute attributeName(String attributeName) {
    this.attributeName = attributeName;
    return this;
  }

  /**
   * The attribute whose value is used as the sort key.
   * @return attributeName
   */
  @javax.annotation.Nonnull
  public String getAttributeName() {
    return attributeName;
  }

  public void setAttributeName(String attributeName) {
    this.attributeName = attributeName;
  }


  public CatalogQuerySortedAttribute initialAttributeValue(String initialAttributeValue) {
    this.initialAttributeValue = initialAttributeValue;
    return this;
  }

  /**
   * The first attribute value to be returned by the query. Ascending sorts will return only objects with this value or greater, while descending sorts will return only objects with this value or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).
   * @return initialAttributeValue
   */
  @javax.annotation.Nullable
  public String getInitialAttributeValue() {
    return initialAttributeValue;
  }

  public void setInitialAttributeValue(String initialAttributeValue) {
    this.initialAttributeValue = initialAttributeValue;
  }


  public CatalogQuerySortedAttribute sortOrder(String sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * The desired sort order, &#x60;\&quot;ASC\&quot;&#x60; (ascending) or &#x60;\&quot;DESC\&quot;&#x60; (descending).
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public String getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(String sortOrder) {
    this.sortOrder = sortOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogQuerySortedAttribute catalogQuerySortedAttribute = (CatalogQuerySortedAttribute) o;
    return Objects.equals(this.attributeName, catalogQuerySortedAttribute.attributeName) &&
        Objects.equals(this.initialAttributeValue, catalogQuerySortedAttribute.initialAttributeValue) &&
        Objects.equals(this.sortOrder, catalogQuerySortedAttribute.sortOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeName, initialAttributeValue, sortOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogQuerySortedAttribute {\n");
    sb.append("    attributeName: ").append(toIndentedString(attributeName)).append("\n");
    sb.append("    initialAttributeValue: ").append(toIndentedString(initialAttributeValue)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attribute_name");
    openapiFields.add("initial_attribute_value");
    openapiFields.add("sort_order");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attribute_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogQuerySortedAttribute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogQuerySortedAttribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogQuerySortedAttribute is not found in the empty JSON string", CatalogQuerySortedAttribute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogQuerySortedAttribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogQuerySortedAttribute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogQuerySortedAttribute.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("attribute_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute_name").toString()));
      }
      if ((jsonObj.get("initial_attribute_value") != null && !jsonObj.get("initial_attribute_value").isJsonNull()) && !jsonObj.get("initial_attribute_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initial_attribute_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initial_attribute_value").toString()));
      }
      if ((jsonObj.get("sort_order") != null && !jsonObj.get("sort_order").isJsonNull()) && !jsonObj.get("sort_order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort_order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort_order").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogQuerySortedAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogQuerySortedAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogQuerySortedAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogQuerySortedAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogQuerySortedAttribute>() {
           @Override
           public void write(JsonWriter out, CatalogQuerySortedAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogQuerySortedAttribute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogQuerySortedAttribute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogQuerySortedAttribute
   * @throws IOException if the JSON string is invalid with respect to CatalogQuerySortedAttribute
   */
  public static CatalogQuerySortedAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogQuerySortedAttribute.class);
  }

  /**
   * Convert an instance of CatalogQuerySortedAttribute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

