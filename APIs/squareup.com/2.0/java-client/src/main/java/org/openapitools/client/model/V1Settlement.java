/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.V1Money;
import org.openapitools.client.model.V1SettlementEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V1Settlement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V1Settlement {
  public static final String SERIALIZED_NAME_BANK_ACCOUNT_ID = "bank_account_id";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_ID)
  private String bankAccountId;

  public static final String SERIALIZED_NAME_ENTRIES = "entries";
  @SerializedName(SERIALIZED_NAME_ENTRIES)
  private List<V1SettlementEntry> entries = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INITIATED_AT = "initiated_at";
  @SerializedName(SERIALIZED_NAME_INITIATED_AT)
  private String initiatedAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TOTAL_MONEY = "total_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_MONEY)
  private V1Money totalMoney;

  public V1Settlement() {
  }

  public V1Settlement bankAccountId(String bankAccountId) {
    this.bankAccountId = bankAccountId;
    return this;
  }

  /**
   * The Square-issued unique identifier for the bank account associated with the settlement.
   * @return bankAccountId
   */
  @javax.annotation.Nullable
  public String getBankAccountId() {
    return bankAccountId;
  }

  public void setBankAccountId(String bankAccountId) {
    this.bankAccountId = bankAccountId;
  }


  public V1Settlement entries(List<V1SettlementEntry> entries) {
    this.entries = entries;
    return this;
  }

  public V1Settlement addEntriesItem(V1SettlementEntry entriesItem) {
    if (this.entries == null) {
      this.entries = new ArrayList<>();
    }
    this.entries.add(entriesItem);
    return this;
  }

  /**
   * The entries included in this settlement.
   * @return entries
   */
  @javax.annotation.Nullable
  public List<V1SettlementEntry> getEntries() {
    return entries;
  }

  public void setEntries(List<V1SettlementEntry> entries) {
    this.entries = entries;
  }


  public V1Settlement id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The settlement&#39;s unique identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public V1Settlement initiatedAt(String initiatedAt) {
    this.initiatedAt = initiatedAt;
    return this;
  }

  /**
   * The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format.
   * @return initiatedAt
   */
  @javax.annotation.Nullable
  public String getInitiatedAt() {
    return initiatedAt;
  }

  public void setInitiatedAt(String initiatedAt) {
    this.initiatedAt = initiatedAt;
  }


  public V1Settlement status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The settlement&#39;s current status.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public V1Settlement totalMoney(V1Money totalMoney) {
    this.totalMoney = totalMoney;
    return this;
  }

  /**
   * Get totalMoney
   * @return totalMoney
   */
  @javax.annotation.Nullable
  public V1Money getTotalMoney() {
    return totalMoney;
  }

  public void setTotalMoney(V1Money totalMoney) {
    this.totalMoney = totalMoney;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1Settlement v1Settlement = (V1Settlement) o;
    return Objects.equals(this.bankAccountId, v1Settlement.bankAccountId) &&
        Objects.equals(this.entries, v1Settlement.entries) &&
        Objects.equals(this.id, v1Settlement.id) &&
        Objects.equals(this.initiatedAt, v1Settlement.initiatedAt) &&
        Objects.equals(this.status, v1Settlement.status) &&
        Objects.equals(this.totalMoney, v1Settlement.totalMoney);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bankAccountId, entries, id, initiatedAt, status, totalMoney);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1Settlement {\n");
    sb.append("    bankAccountId: ").append(toIndentedString(bankAccountId)).append("\n");
    sb.append("    entries: ").append(toIndentedString(entries)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    initiatedAt: ").append(toIndentedString(initiatedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalMoney: ").append(toIndentedString(totalMoney)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bank_account_id");
    openapiFields.add("entries");
    openapiFields.add("id");
    openapiFields.add("initiated_at");
    openapiFields.add("status");
    openapiFields.add("total_money");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1Settlement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1Settlement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1Settlement is not found in the empty JSON string", V1Settlement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1Settlement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1Settlement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bank_account_id") != null && !jsonObj.get("bank_account_id").isJsonNull()) && !jsonObj.get("bank_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_account_id").toString()));
      }
      if (jsonObj.get("entries") != null && !jsonObj.get("entries").isJsonNull()) {
        JsonArray jsonArrayentries = jsonObj.getAsJsonArray("entries");
        if (jsonArrayentries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entries` to be an array in the JSON string but got `%s`", jsonObj.get("entries").toString()));
          }

          // validate the optional field `entries` (array)
          for (int i = 0; i < jsonArrayentries.size(); i++) {
            V1SettlementEntry.validateJsonElement(jsonArrayentries.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("initiated_at") != null && !jsonObj.get("initiated_at").isJsonNull()) && !jsonObj.get("initiated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initiated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initiated_at").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `total_money`
      if (jsonObj.get("total_money") != null && !jsonObj.get("total_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("total_money"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1Settlement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1Settlement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1Settlement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1Settlement.class));

       return (TypeAdapter<T>) new TypeAdapter<V1Settlement>() {
           @Override
           public void write(JsonWriter out, V1Settlement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1Settlement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1Settlement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1Settlement
   * @throws IOException if the JSON string is invalid with respect to V1Settlement
   */
  public static V1Settlement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1Settlement.class);
  }

  /**
   * Convert an instance of V1Settlement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

