/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Filter based on [order fulfillment](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillment) information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchOrdersFulfillmentFilter {
  public static final String SERIALIZED_NAME_FULFILLMENT_STATES = "fulfillment_states";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_STATES)
  private List<String> fulfillmentStates = new ArrayList<>();

  public static final String SERIALIZED_NAME_FULFILLMENT_TYPES = "fulfillment_types";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_TYPES)
  private List<String> fulfillmentTypes = new ArrayList<>();

  public SearchOrdersFulfillmentFilter() {
  }

  public SearchOrdersFulfillmentFilter fulfillmentStates(List<String> fulfillmentStates) {
    this.fulfillmentStates = fulfillmentStates;
    return this;
  }

  public SearchOrdersFulfillmentFilter addFulfillmentStatesItem(String fulfillmentStatesItem) {
    if (this.fulfillmentStates == null) {
      this.fulfillmentStates = new ArrayList<>();
    }
    this.fulfillmentStates.add(fulfillmentStatesItem);
    return this;
  }

  /**
   * A list of [fulfillment states](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillmentState) to filter for. The list returns orders if any of its fulfillments match any of the fulfillment states listed in this field.
   * @return fulfillmentStates
   */
  @javax.annotation.Nullable
  public List<String> getFulfillmentStates() {
    return fulfillmentStates;
  }

  public void setFulfillmentStates(List<String> fulfillmentStates) {
    this.fulfillmentStates = fulfillmentStates;
  }


  public SearchOrdersFulfillmentFilter fulfillmentTypes(List<String> fulfillmentTypes) {
    this.fulfillmentTypes = fulfillmentTypes;
    return this;
  }

  public SearchOrdersFulfillmentFilter addFulfillmentTypesItem(String fulfillmentTypesItem) {
    if (this.fulfillmentTypes == null) {
      this.fulfillmentTypes = new ArrayList<>();
    }
    this.fulfillmentTypes.add(fulfillmentTypesItem);
    return this;
  }

  /**
   * A list of [fulfillment types](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderFulfillmentType) to filter for. The list returns orders if any of its fulfillments match any of the fulfillment types listed in this field.
   * @return fulfillmentTypes
   */
  @javax.annotation.Nullable
  public List<String> getFulfillmentTypes() {
    return fulfillmentTypes;
  }

  public void setFulfillmentTypes(List<String> fulfillmentTypes) {
    this.fulfillmentTypes = fulfillmentTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchOrdersFulfillmentFilter searchOrdersFulfillmentFilter = (SearchOrdersFulfillmentFilter) o;
    return Objects.equals(this.fulfillmentStates, searchOrdersFulfillmentFilter.fulfillmentStates) &&
        Objects.equals(this.fulfillmentTypes, searchOrdersFulfillmentFilter.fulfillmentTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fulfillmentStates, fulfillmentTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchOrdersFulfillmentFilter {\n");
    sb.append("    fulfillmentStates: ").append(toIndentedString(fulfillmentStates)).append("\n");
    sb.append("    fulfillmentTypes: ").append(toIndentedString(fulfillmentTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fulfillment_states");
    openapiFields.add("fulfillment_types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchOrdersFulfillmentFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchOrdersFulfillmentFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchOrdersFulfillmentFilter is not found in the empty JSON string", SearchOrdersFulfillmentFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchOrdersFulfillmentFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchOrdersFulfillmentFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("fulfillment_states") != null && !jsonObj.get("fulfillment_states").isJsonNull() && !jsonObj.get("fulfillment_states").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillment_states` to be an array in the JSON string but got `%s`", jsonObj.get("fulfillment_states").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fulfillment_types") != null && !jsonObj.get("fulfillment_types").isJsonNull() && !jsonObj.get("fulfillment_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillment_types` to be an array in the JSON string but got `%s`", jsonObj.get("fulfillment_types").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchOrdersFulfillmentFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchOrdersFulfillmentFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchOrdersFulfillmentFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchOrdersFulfillmentFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchOrdersFulfillmentFilter>() {
           @Override
           public void write(JsonWriter out, SearchOrdersFulfillmentFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchOrdersFulfillmentFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchOrdersFulfillmentFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchOrdersFulfillmentFilter
   * @throws IOException if the JSON string is invalid with respect to SearchOrdersFulfillmentFilter
   */
  public static SearchOrdersFulfillmentFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchOrdersFulfillmentFilter.class);
  }

  /**
   * Convert an instance of SearchOrdersFulfillmentFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

