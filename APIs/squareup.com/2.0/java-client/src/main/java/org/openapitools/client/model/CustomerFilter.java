/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CustomerCreationSourceFilter;
import org.openapitools.client.model.CustomerTextFilter;
import org.openapitools.client.model.FilterValue;
import org.openapitools.client.model.TimeRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a set of &#x60;CustomerQuery&#x60; filters used to limit the set of customers returned by the [SearchCustomers](https://developer.squareup.com/reference/square_2021-08-18/customers-api/search-customers) endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomerFilter {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private TimeRange createdAt;

  public static final String SERIALIZED_NAME_CREATION_SOURCE = "creation_source";
  @SerializedName(SERIALIZED_NAME_CREATION_SOURCE)
  private CustomerCreationSourceFilter creationSource;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "email_address";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private CustomerTextFilter emailAddress;

  public static final String SERIALIZED_NAME_GROUP_IDS = "group_ids";
  @SerializedName(SERIALIZED_NAME_GROUP_IDS)
  private FilterValue groupIds;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phone_number";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private CustomerTextFilter phoneNumber;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "reference_id";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private CustomerTextFilter referenceId;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private TimeRange updatedAt;

  public CustomerFilter() {
  }

  public CustomerFilter createdAt(TimeRange createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public TimeRange getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(TimeRange createdAt) {
    this.createdAt = createdAt;
  }


  public CustomerFilter creationSource(CustomerCreationSourceFilter creationSource) {
    this.creationSource = creationSource;
    return this;
  }

  /**
   * Get creationSource
   * @return creationSource
   */
  @javax.annotation.Nullable
  public CustomerCreationSourceFilter getCreationSource() {
    return creationSource;
  }

  public void setCreationSource(CustomerCreationSourceFilter creationSource) {
    this.creationSource = creationSource;
  }


  public CustomerFilter emailAddress(CustomerTextFilter emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * Get emailAddress
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public CustomerTextFilter getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(CustomerTextFilter emailAddress) {
    this.emailAddress = emailAddress;
  }


  public CustomerFilter groupIds(FilterValue groupIds) {
    this.groupIds = groupIds;
    return this;
  }

  /**
   * Get groupIds
   * @return groupIds
   */
  @javax.annotation.Nullable
  public FilterValue getGroupIds() {
    return groupIds;
  }

  public void setGroupIds(FilterValue groupIds) {
    this.groupIds = groupIds;
  }


  public CustomerFilter phoneNumber(CustomerTextFilter phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public CustomerTextFilter getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(CustomerTextFilter phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public CustomerFilter referenceId(CustomerTextFilter referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @javax.annotation.Nullable
  public CustomerTextFilter getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(CustomerTextFilter referenceId) {
    this.referenceId = referenceId;
  }


  public CustomerFilter updatedAt(TimeRange updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public TimeRange getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(TimeRange updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerFilter customerFilter = (CustomerFilter) o;
    return Objects.equals(this.createdAt, customerFilter.createdAt) &&
        Objects.equals(this.creationSource, customerFilter.creationSource) &&
        Objects.equals(this.emailAddress, customerFilter.emailAddress) &&
        Objects.equals(this.groupIds, customerFilter.groupIds) &&
        Objects.equals(this.phoneNumber, customerFilter.phoneNumber) &&
        Objects.equals(this.referenceId, customerFilter.referenceId) &&
        Objects.equals(this.updatedAt, customerFilter.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, creationSource, emailAddress, groupIds, phoneNumber, referenceId, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerFilter {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    creationSource: ").append(toIndentedString(creationSource)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    groupIds: ").append(toIndentedString(groupIds)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("creation_source");
    openapiFields.add("email_address");
    openapiFields.add("group_ids");
    openapiFields.add("phone_number");
    openapiFields.add("reference_id");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerFilter is not found in the empty JSON string", CustomerFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `created_at`
      if (jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) {
        TimeRange.validateJsonElement(jsonObj.get("created_at"));
      }
      // validate the optional field `creation_source`
      if (jsonObj.get("creation_source") != null && !jsonObj.get("creation_source").isJsonNull()) {
        CustomerCreationSourceFilter.validateJsonElement(jsonObj.get("creation_source"));
      }
      // validate the optional field `email_address`
      if (jsonObj.get("email_address") != null && !jsonObj.get("email_address").isJsonNull()) {
        CustomerTextFilter.validateJsonElement(jsonObj.get("email_address"));
      }
      // validate the optional field `group_ids`
      if (jsonObj.get("group_ids") != null && !jsonObj.get("group_ids").isJsonNull()) {
        FilterValue.validateJsonElement(jsonObj.get("group_ids"));
      }
      // validate the optional field `phone_number`
      if (jsonObj.get("phone_number") != null && !jsonObj.get("phone_number").isJsonNull()) {
        CustomerTextFilter.validateJsonElement(jsonObj.get("phone_number"));
      }
      // validate the optional field `reference_id`
      if (jsonObj.get("reference_id") != null && !jsonObj.get("reference_id").isJsonNull()) {
        CustomerTextFilter.validateJsonElement(jsonObj.get("reference_id"));
      }
      // validate the optional field `updated_at`
      if (jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) {
        TimeRange.validateJsonElement(jsonObj.get("updated_at"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerFilter>() {
           @Override
           public void write(JsonWriter out, CustomerFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerFilter
   * @throws IOException if the JSON string is invalid with respect to CustomerFilter
   */
  public static CustomerFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerFilter.class);
  }

  /**
   * Convert an instance of CustomerFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

