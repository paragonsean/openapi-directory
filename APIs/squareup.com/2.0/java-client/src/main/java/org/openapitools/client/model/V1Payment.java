/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.V1Money;
import org.openapitools.client.model.V1PaymentItemization;
import org.openapitools.client.model.V1PaymentSurcharge;
import org.openapitools.client.model.V1PaymentTax;
import org.openapitools.client.model.V1Refund;
import org.openapitools.client.model.V1Tender;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A payment represents a paid transaction between a Square merchant and a customer. Payment details are usually available from Connect API endpoints within a few minutes after the transaction completes.  Each Payment object includes several fields that end in &#x60;_money&#x60;. These fields describe the various amounts of money that contribute to the payment total:  &lt;ul&gt; &lt;li&gt; Monetary values are &lt;b&gt;positive&lt;/b&gt; if they represent an &lt;em&gt;increase&lt;/em&gt; in the amount of money the merchant receives (e.g., &lt;code&gt;tax_money&lt;/code&gt;, &lt;code&gt;tip_money&lt;/code&gt;). &lt;/li&gt; &lt;li&gt; Monetary values are &lt;b&gt;negative&lt;/b&gt; if they represent an &lt;em&gt;decrease&lt;/em&gt; in the amount of money the merchant receives (e.g., &lt;code&gt;discount_money&lt;/code&gt;, &lt;code&gt;refunded_money&lt;/code&gt;). &lt;/li&gt; &lt;/ul&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V1Payment {
  public static final String SERIALIZED_NAME_ADDITIVE_TAX = "additive_tax";
  @SerializedName(SERIALIZED_NAME_ADDITIVE_TAX)
  private List<V1PaymentTax> additiveTax = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIVE_TAX_MONEY = "additive_tax_money";
  @SerializedName(SERIALIZED_NAME_ADDITIVE_TAX_MONEY)
  private V1Money additiveTaxMoney;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CREATOR_ID = "creator_id";
  @SerializedName(SERIALIZED_NAME_CREATOR_ID)
  private String creatorId;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private Device device;

  public static final String SERIALIZED_NAME_DISCOUNT_MONEY = "discount_money";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_MONEY)
  private V1Money discountMoney;

  public static final String SERIALIZED_NAME_GROSS_SALES_MONEY = "gross_sales_money";
  @SerializedName(SERIALIZED_NAME_GROSS_SALES_MONEY)
  private V1Money grossSalesMoney;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INCLUSIVE_TAX = "inclusive_tax";
  @SerializedName(SERIALIZED_NAME_INCLUSIVE_TAX)
  private List<V1PaymentTax> inclusiveTax = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUSIVE_TAX_MONEY = "inclusive_tax_money";
  @SerializedName(SERIALIZED_NAME_INCLUSIVE_TAX_MONEY)
  private V1Money inclusiveTaxMoney;

  public static final String SERIALIZED_NAME_IS_PARTIAL = "is_partial";
  @SerializedName(SERIALIZED_NAME_IS_PARTIAL)
  private Boolean isPartial;

  public static final String SERIALIZED_NAME_ITEMIZATIONS = "itemizations";
  @SerializedName(SERIALIZED_NAME_ITEMIZATIONS)
  private List<V1PaymentItemization> itemizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_NET_SALES_MONEY = "net_sales_money";
  @SerializedName(SERIALIZED_NAME_NET_SALES_MONEY)
  private V1Money netSalesMoney;

  public static final String SERIALIZED_NAME_NET_TOTAL_MONEY = "net_total_money";
  @SerializedName(SERIALIZED_NAME_NET_TOTAL_MONEY)
  private V1Money netTotalMoney;

  public static final String SERIALIZED_NAME_PAYMENT_URL = "payment_url";
  @SerializedName(SERIALIZED_NAME_PAYMENT_URL)
  private String paymentUrl;

  public static final String SERIALIZED_NAME_PROCESSING_FEE_MONEY = "processing_fee_money";
  @SerializedName(SERIALIZED_NAME_PROCESSING_FEE_MONEY)
  private V1Money processingFeeMoney;

  public static final String SERIALIZED_NAME_RECEIPT_URL = "receipt_url";
  @SerializedName(SERIALIZED_NAME_RECEIPT_URL)
  private String receiptUrl;

  public static final String SERIALIZED_NAME_REFUNDED_MONEY = "refunded_money";
  @SerializedName(SERIALIZED_NAME_REFUNDED_MONEY)
  private V1Money refundedMoney;

  public static final String SERIALIZED_NAME_REFUNDS = "refunds";
  @SerializedName(SERIALIZED_NAME_REFUNDS)
  private List<V1Refund> refunds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SURCHARGE_MONEY = "surcharge_money";
  @SerializedName(SERIALIZED_NAME_SURCHARGE_MONEY)
  private V1Money surchargeMoney;

  public static final String SERIALIZED_NAME_SURCHARGES = "surcharges";
  @SerializedName(SERIALIZED_NAME_SURCHARGES)
  private List<V1PaymentSurcharge> surcharges = new ArrayList<>();

  public static final String SERIALIZED_NAME_SWEDISH_ROUNDING_MONEY = "swedish_rounding_money";
  @SerializedName(SERIALIZED_NAME_SWEDISH_ROUNDING_MONEY)
  private V1Money swedishRoundingMoney;

  public static final String SERIALIZED_NAME_TAX_MONEY = "tax_money";
  @SerializedName(SERIALIZED_NAME_TAX_MONEY)
  private V1Money taxMoney;

  public static final String SERIALIZED_NAME_TENDER = "tender";
  @SerializedName(SERIALIZED_NAME_TENDER)
  private List<V1Tender> tender = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIP_MONEY = "tip_money";
  @SerializedName(SERIALIZED_NAME_TIP_MONEY)
  private V1Money tipMoney;

  public static final String SERIALIZED_NAME_TOTAL_COLLECTED_MONEY = "total_collected_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_COLLECTED_MONEY)
  private V1Money totalCollectedMoney;

  public V1Payment() {
  }

  public V1Payment additiveTax(List<V1PaymentTax> additiveTax) {
    this.additiveTax = additiveTax;
    return this;
  }

  public V1Payment addAdditiveTaxItem(V1PaymentTax additiveTaxItem) {
    if (this.additiveTax == null) {
      this.additiveTax = new ArrayList<>();
    }
    this.additiveTax.add(additiveTaxItem);
    return this;
  }

  /**
   * All of the additive taxes associated with the payment.
   * @return additiveTax
   */
  @javax.annotation.Nullable
  public List<V1PaymentTax> getAdditiveTax() {
    return additiveTax;
  }

  public void setAdditiveTax(List<V1PaymentTax> additiveTax) {
    this.additiveTax = additiveTax;
  }


  public V1Payment additiveTaxMoney(V1Money additiveTaxMoney) {
    this.additiveTaxMoney = additiveTaxMoney;
    return this;
  }

  /**
   * Get additiveTaxMoney
   * @return additiveTaxMoney
   */
  @javax.annotation.Nullable
  public V1Money getAdditiveTaxMoney() {
    return additiveTaxMoney;
  }

  public void setAdditiveTaxMoney(V1Money additiveTaxMoney) {
    this.additiveTaxMoney = additiveTaxMoney;
  }


  public V1Payment createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The time when the payment was created, in ISO 8601 format. Reflects the time of the first payment if the object represents an incomplete partial payment, and the time of the last or complete payment otherwise.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public V1Payment creatorId(String creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  /**
   * The unique identifier of the Square account that took the payment.
   * @return creatorId
   */
  @javax.annotation.Nullable
  public String getCreatorId() {
    return creatorId;
  }

  public void setCreatorId(String creatorId) {
    this.creatorId = creatorId;
  }


  public V1Payment device(Device device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device
   */
  @javax.annotation.Nullable
  public Device getDevice() {
    return device;
  }

  public void setDevice(Device device) {
    this.device = device;
  }


  public V1Payment discountMoney(V1Money discountMoney) {
    this.discountMoney = discountMoney;
    return this;
  }

  /**
   * Get discountMoney
   * @return discountMoney
   */
  @javax.annotation.Nullable
  public V1Money getDiscountMoney() {
    return discountMoney;
  }

  public void setDiscountMoney(V1Money discountMoney) {
    this.discountMoney = discountMoney;
  }


  public V1Payment grossSalesMoney(V1Money grossSalesMoney) {
    this.grossSalesMoney = grossSalesMoney;
    return this;
  }

  /**
   * Get grossSalesMoney
   * @return grossSalesMoney
   */
  @javax.annotation.Nullable
  public V1Money getGrossSalesMoney() {
    return grossSalesMoney;
  }

  public void setGrossSalesMoney(V1Money grossSalesMoney) {
    this.grossSalesMoney = grossSalesMoney;
  }


  public V1Payment id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The payment&#39;s unique identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public V1Payment inclusiveTax(List<V1PaymentTax> inclusiveTax) {
    this.inclusiveTax = inclusiveTax;
    return this;
  }

  public V1Payment addInclusiveTaxItem(V1PaymentTax inclusiveTaxItem) {
    if (this.inclusiveTax == null) {
      this.inclusiveTax = new ArrayList<>();
    }
    this.inclusiveTax.add(inclusiveTaxItem);
    return this;
  }

  /**
   * All of the inclusive taxes associated with the payment.
   * @return inclusiveTax
   */
  @javax.annotation.Nullable
  public List<V1PaymentTax> getInclusiveTax() {
    return inclusiveTax;
  }

  public void setInclusiveTax(List<V1PaymentTax> inclusiveTax) {
    this.inclusiveTax = inclusiveTax;
  }


  public V1Payment inclusiveTaxMoney(V1Money inclusiveTaxMoney) {
    this.inclusiveTaxMoney = inclusiveTaxMoney;
    return this;
  }

  /**
   * Get inclusiveTaxMoney
   * @return inclusiveTaxMoney
   */
  @javax.annotation.Nullable
  public V1Money getInclusiveTaxMoney() {
    return inclusiveTaxMoney;
  }

  public void setInclusiveTaxMoney(V1Money inclusiveTaxMoney) {
    this.inclusiveTaxMoney = inclusiveTaxMoney;
  }


  public V1Payment isPartial(Boolean isPartial) {
    this.isPartial = isPartial;
    return this;
  }

  /**
   * Indicates whether or not the payment is only partially paid for. If true, this payment will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
   * @return isPartial
   */
  @javax.annotation.Nullable
  public Boolean getIsPartial() {
    return isPartial;
  }

  public void setIsPartial(Boolean isPartial) {
    this.isPartial = isPartial;
  }


  public V1Payment itemizations(List<V1PaymentItemization> itemizations) {
    this.itemizations = itemizations;
    return this;
  }

  public V1Payment addItemizationsItem(V1PaymentItemization itemizationsItem) {
    if (this.itemizations == null) {
      this.itemizations = new ArrayList<>();
    }
    this.itemizations.add(itemizationsItem);
    return this;
  }

  /**
   * The items purchased in the payment.
   * @return itemizations
   */
  @javax.annotation.Nullable
  public List<V1PaymentItemization> getItemizations() {
    return itemizations;
  }

  public void setItemizations(List<V1PaymentItemization> itemizations) {
    this.itemizations = itemizations;
  }


  public V1Payment merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  /**
   * The unique identifier of the merchant that took the payment.
   * @return merchantId
   */
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public V1Payment netSalesMoney(V1Money netSalesMoney) {
    this.netSalesMoney = netSalesMoney;
    return this;
  }

  /**
   * Get netSalesMoney
   * @return netSalesMoney
   */
  @javax.annotation.Nullable
  public V1Money getNetSalesMoney() {
    return netSalesMoney;
  }

  public void setNetSalesMoney(V1Money netSalesMoney) {
    this.netSalesMoney = netSalesMoney;
  }


  public V1Payment netTotalMoney(V1Money netTotalMoney) {
    this.netTotalMoney = netTotalMoney;
    return this;
  }

  /**
   * Get netTotalMoney
   * @return netTotalMoney
   */
  @javax.annotation.Nullable
  public V1Money getNetTotalMoney() {
    return netTotalMoney;
  }

  public void setNetTotalMoney(V1Money netTotalMoney) {
    this.netTotalMoney = netTotalMoney;
  }


  public V1Payment paymentUrl(String paymentUrl) {
    this.paymentUrl = paymentUrl;
    return this;
  }

  /**
   * The URL of the payment&#39;s detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page.
   * @return paymentUrl
   */
  @javax.annotation.Nullable
  public String getPaymentUrl() {
    return paymentUrl;
  }

  public void setPaymentUrl(String paymentUrl) {
    this.paymentUrl = paymentUrl;
  }


  public V1Payment processingFeeMoney(V1Money processingFeeMoney) {
    this.processingFeeMoney = processingFeeMoney;
    return this;
  }

  /**
   * Get processingFeeMoney
   * @return processingFeeMoney
   */
  @javax.annotation.Nullable
  public V1Money getProcessingFeeMoney() {
    return processingFeeMoney;
  }

  public void setProcessingFeeMoney(V1Money processingFeeMoney) {
    this.processingFeeMoney = processingFeeMoney;
  }


  public V1Payment receiptUrl(String receiptUrl) {
    this.receiptUrl = receiptUrl;
    return this;
  }

  /**
   * The URL of the receipt for the payment. Note that for split tender payments, this URL corresponds to the receipt for the first tender listed in the payment&#39;s tender field. Each Tender object has its own receipt_url field you can use to get the other receipts associated with a split tender payment.
   * @return receiptUrl
   */
  @javax.annotation.Nullable
  public String getReceiptUrl() {
    return receiptUrl;
  }

  public void setReceiptUrl(String receiptUrl) {
    this.receiptUrl = receiptUrl;
  }


  public V1Payment refundedMoney(V1Money refundedMoney) {
    this.refundedMoney = refundedMoney;
    return this;
  }

  /**
   * Get refundedMoney
   * @return refundedMoney
   */
  @javax.annotation.Nullable
  public V1Money getRefundedMoney() {
    return refundedMoney;
  }

  public void setRefundedMoney(V1Money refundedMoney) {
    this.refundedMoney = refundedMoney;
  }


  public V1Payment refunds(List<V1Refund> refunds) {
    this.refunds = refunds;
    return this;
  }

  public V1Payment addRefundsItem(V1Refund refundsItem) {
    if (this.refunds == null) {
      this.refunds = new ArrayList<>();
    }
    this.refunds.add(refundsItem);
    return this;
  }

  /**
   * All of the refunds applied to the payment. Note that the value of all refunds on a payment can exceed the value of all tenders if a merchant chooses to refund money to a tender after previously accepting returned goods as part of an exchange.
   * @return refunds
   */
  @javax.annotation.Nullable
  public List<V1Refund> getRefunds() {
    return refunds;
  }

  public void setRefunds(List<V1Refund> refunds) {
    this.refunds = refunds;
  }


  public V1Payment surchargeMoney(V1Money surchargeMoney) {
    this.surchargeMoney = surchargeMoney;
    return this;
  }

  /**
   * Get surchargeMoney
   * @return surchargeMoney
   */
  @javax.annotation.Nullable
  public V1Money getSurchargeMoney() {
    return surchargeMoney;
  }

  public void setSurchargeMoney(V1Money surchargeMoney) {
    this.surchargeMoney = surchargeMoney;
  }


  public V1Payment surcharges(List<V1PaymentSurcharge> surcharges) {
    this.surcharges = surcharges;
    return this;
  }

  public V1Payment addSurchargesItem(V1PaymentSurcharge surchargesItem) {
    if (this.surcharges == null) {
      this.surcharges = new ArrayList<>();
    }
    this.surcharges.add(surchargesItem);
    return this;
  }

  /**
   * A list of all surcharges associated with the payment.
   * @return surcharges
   */
  @javax.annotation.Nullable
  public List<V1PaymentSurcharge> getSurcharges() {
    return surcharges;
  }

  public void setSurcharges(List<V1PaymentSurcharge> surcharges) {
    this.surcharges = surcharges;
  }


  public V1Payment swedishRoundingMoney(V1Money swedishRoundingMoney) {
    this.swedishRoundingMoney = swedishRoundingMoney;
    return this;
  }

  /**
   * Get swedishRoundingMoney
   * @return swedishRoundingMoney
   */
  @javax.annotation.Nullable
  public V1Money getSwedishRoundingMoney() {
    return swedishRoundingMoney;
  }

  public void setSwedishRoundingMoney(V1Money swedishRoundingMoney) {
    this.swedishRoundingMoney = swedishRoundingMoney;
  }


  public V1Payment taxMoney(V1Money taxMoney) {
    this.taxMoney = taxMoney;
    return this;
  }

  /**
   * Get taxMoney
   * @return taxMoney
   */
  @javax.annotation.Nullable
  public V1Money getTaxMoney() {
    return taxMoney;
  }

  public void setTaxMoney(V1Money taxMoney) {
    this.taxMoney = taxMoney;
  }


  public V1Payment tender(List<V1Tender> tender) {
    this.tender = tender;
    return this;
  }

  public V1Payment addTenderItem(V1Tender tenderItem) {
    if (this.tender == null) {
      this.tender = new ArrayList<>();
    }
    this.tender.add(tenderItem);
    return this;
  }

  /**
   * All of the tenders associated with the payment.
   * @return tender
   */
  @javax.annotation.Nullable
  public List<V1Tender> getTender() {
    return tender;
  }

  public void setTender(List<V1Tender> tender) {
    this.tender = tender;
  }


  public V1Payment tipMoney(V1Money tipMoney) {
    this.tipMoney = tipMoney;
    return this;
  }

  /**
   * Get tipMoney
   * @return tipMoney
   */
  @javax.annotation.Nullable
  public V1Money getTipMoney() {
    return tipMoney;
  }

  public void setTipMoney(V1Money tipMoney) {
    this.tipMoney = tipMoney;
  }


  public V1Payment totalCollectedMoney(V1Money totalCollectedMoney) {
    this.totalCollectedMoney = totalCollectedMoney;
    return this;
  }

  /**
   * Get totalCollectedMoney
   * @return totalCollectedMoney
   */
  @javax.annotation.Nullable
  public V1Money getTotalCollectedMoney() {
    return totalCollectedMoney;
  }

  public void setTotalCollectedMoney(V1Money totalCollectedMoney) {
    this.totalCollectedMoney = totalCollectedMoney;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1Payment v1Payment = (V1Payment) o;
    return Objects.equals(this.additiveTax, v1Payment.additiveTax) &&
        Objects.equals(this.additiveTaxMoney, v1Payment.additiveTaxMoney) &&
        Objects.equals(this.createdAt, v1Payment.createdAt) &&
        Objects.equals(this.creatorId, v1Payment.creatorId) &&
        Objects.equals(this.device, v1Payment.device) &&
        Objects.equals(this.discountMoney, v1Payment.discountMoney) &&
        Objects.equals(this.grossSalesMoney, v1Payment.grossSalesMoney) &&
        Objects.equals(this.id, v1Payment.id) &&
        Objects.equals(this.inclusiveTax, v1Payment.inclusiveTax) &&
        Objects.equals(this.inclusiveTaxMoney, v1Payment.inclusiveTaxMoney) &&
        Objects.equals(this.isPartial, v1Payment.isPartial) &&
        Objects.equals(this.itemizations, v1Payment.itemizations) &&
        Objects.equals(this.merchantId, v1Payment.merchantId) &&
        Objects.equals(this.netSalesMoney, v1Payment.netSalesMoney) &&
        Objects.equals(this.netTotalMoney, v1Payment.netTotalMoney) &&
        Objects.equals(this.paymentUrl, v1Payment.paymentUrl) &&
        Objects.equals(this.processingFeeMoney, v1Payment.processingFeeMoney) &&
        Objects.equals(this.receiptUrl, v1Payment.receiptUrl) &&
        Objects.equals(this.refundedMoney, v1Payment.refundedMoney) &&
        Objects.equals(this.refunds, v1Payment.refunds) &&
        Objects.equals(this.surchargeMoney, v1Payment.surchargeMoney) &&
        Objects.equals(this.surcharges, v1Payment.surcharges) &&
        Objects.equals(this.swedishRoundingMoney, v1Payment.swedishRoundingMoney) &&
        Objects.equals(this.taxMoney, v1Payment.taxMoney) &&
        Objects.equals(this.tender, v1Payment.tender) &&
        Objects.equals(this.tipMoney, v1Payment.tipMoney) &&
        Objects.equals(this.totalCollectedMoney, v1Payment.totalCollectedMoney);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additiveTax, additiveTaxMoney, createdAt, creatorId, device, discountMoney, grossSalesMoney, id, inclusiveTax, inclusiveTaxMoney, isPartial, itemizations, merchantId, netSalesMoney, netTotalMoney, paymentUrl, processingFeeMoney, receiptUrl, refundedMoney, refunds, surchargeMoney, surcharges, swedishRoundingMoney, taxMoney, tender, tipMoney, totalCollectedMoney);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1Payment {\n");
    sb.append("    additiveTax: ").append(toIndentedString(additiveTax)).append("\n");
    sb.append("    additiveTaxMoney: ").append(toIndentedString(additiveTaxMoney)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    discountMoney: ").append(toIndentedString(discountMoney)).append("\n");
    sb.append("    grossSalesMoney: ").append(toIndentedString(grossSalesMoney)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inclusiveTax: ").append(toIndentedString(inclusiveTax)).append("\n");
    sb.append("    inclusiveTaxMoney: ").append(toIndentedString(inclusiveTaxMoney)).append("\n");
    sb.append("    isPartial: ").append(toIndentedString(isPartial)).append("\n");
    sb.append("    itemizations: ").append(toIndentedString(itemizations)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    netSalesMoney: ").append(toIndentedString(netSalesMoney)).append("\n");
    sb.append("    netTotalMoney: ").append(toIndentedString(netTotalMoney)).append("\n");
    sb.append("    paymentUrl: ").append(toIndentedString(paymentUrl)).append("\n");
    sb.append("    processingFeeMoney: ").append(toIndentedString(processingFeeMoney)).append("\n");
    sb.append("    receiptUrl: ").append(toIndentedString(receiptUrl)).append("\n");
    sb.append("    refundedMoney: ").append(toIndentedString(refundedMoney)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("    surchargeMoney: ").append(toIndentedString(surchargeMoney)).append("\n");
    sb.append("    surcharges: ").append(toIndentedString(surcharges)).append("\n");
    sb.append("    swedishRoundingMoney: ").append(toIndentedString(swedishRoundingMoney)).append("\n");
    sb.append("    taxMoney: ").append(toIndentedString(taxMoney)).append("\n");
    sb.append("    tender: ").append(toIndentedString(tender)).append("\n");
    sb.append("    tipMoney: ").append(toIndentedString(tipMoney)).append("\n");
    sb.append("    totalCollectedMoney: ").append(toIndentedString(totalCollectedMoney)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additive_tax");
    openapiFields.add("additive_tax_money");
    openapiFields.add("created_at");
    openapiFields.add("creator_id");
    openapiFields.add("device");
    openapiFields.add("discount_money");
    openapiFields.add("gross_sales_money");
    openapiFields.add("id");
    openapiFields.add("inclusive_tax");
    openapiFields.add("inclusive_tax_money");
    openapiFields.add("is_partial");
    openapiFields.add("itemizations");
    openapiFields.add("merchant_id");
    openapiFields.add("net_sales_money");
    openapiFields.add("net_total_money");
    openapiFields.add("payment_url");
    openapiFields.add("processing_fee_money");
    openapiFields.add("receipt_url");
    openapiFields.add("refunded_money");
    openapiFields.add("refunds");
    openapiFields.add("surcharge_money");
    openapiFields.add("surcharges");
    openapiFields.add("swedish_rounding_money");
    openapiFields.add("tax_money");
    openapiFields.add("tender");
    openapiFields.add("tip_money");
    openapiFields.add("total_collected_money");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1Payment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1Payment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1Payment is not found in the empty JSON string", V1Payment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1Payment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1Payment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additive_tax") != null && !jsonObj.get("additive_tax").isJsonNull()) {
        JsonArray jsonArrayadditiveTax = jsonObj.getAsJsonArray("additive_tax");
        if (jsonArrayadditiveTax != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additive_tax").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additive_tax` to be an array in the JSON string but got `%s`", jsonObj.get("additive_tax").toString()));
          }

          // validate the optional field `additive_tax` (array)
          for (int i = 0; i < jsonArrayadditiveTax.size(); i++) {
            V1PaymentTax.validateJsonElement(jsonArrayadditiveTax.get(i));
          };
        }
      }
      // validate the optional field `additive_tax_money`
      if (jsonObj.get("additive_tax_money") != null && !jsonObj.get("additive_tax_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("additive_tax_money"));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("creator_id") != null && !jsonObj.get("creator_id").isJsonNull()) && !jsonObj.get("creator_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator_id").toString()));
      }
      // validate the optional field `device`
      if (jsonObj.get("device") != null && !jsonObj.get("device").isJsonNull()) {
        Device.validateJsonElement(jsonObj.get("device"));
      }
      // validate the optional field `discount_money`
      if (jsonObj.get("discount_money") != null && !jsonObj.get("discount_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("discount_money"));
      }
      // validate the optional field `gross_sales_money`
      if (jsonObj.get("gross_sales_money") != null && !jsonObj.get("gross_sales_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("gross_sales_money"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("inclusive_tax") != null && !jsonObj.get("inclusive_tax").isJsonNull()) {
        JsonArray jsonArrayinclusiveTax = jsonObj.getAsJsonArray("inclusive_tax");
        if (jsonArrayinclusiveTax != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inclusive_tax").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inclusive_tax` to be an array in the JSON string but got `%s`", jsonObj.get("inclusive_tax").toString()));
          }

          // validate the optional field `inclusive_tax` (array)
          for (int i = 0; i < jsonArrayinclusiveTax.size(); i++) {
            V1PaymentTax.validateJsonElement(jsonArrayinclusiveTax.get(i));
          };
        }
      }
      // validate the optional field `inclusive_tax_money`
      if (jsonObj.get("inclusive_tax_money") != null && !jsonObj.get("inclusive_tax_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("inclusive_tax_money"));
      }
      if (jsonObj.get("itemizations") != null && !jsonObj.get("itemizations").isJsonNull()) {
        JsonArray jsonArrayitemizations = jsonObj.getAsJsonArray("itemizations");
        if (jsonArrayitemizations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("itemizations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `itemizations` to be an array in the JSON string but got `%s`", jsonObj.get("itemizations").toString()));
          }

          // validate the optional field `itemizations` (array)
          for (int i = 0; i < jsonArrayitemizations.size(); i++) {
            V1PaymentItemization.validateJsonElement(jsonArrayitemizations.get(i));
          };
        }
      }
      if ((jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonNull()) && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      // validate the optional field `net_sales_money`
      if (jsonObj.get("net_sales_money") != null && !jsonObj.get("net_sales_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("net_sales_money"));
      }
      // validate the optional field `net_total_money`
      if (jsonObj.get("net_total_money") != null && !jsonObj.get("net_total_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("net_total_money"));
      }
      if ((jsonObj.get("payment_url") != null && !jsonObj.get("payment_url").isJsonNull()) && !jsonObj.get("payment_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_url").toString()));
      }
      // validate the optional field `processing_fee_money`
      if (jsonObj.get("processing_fee_money") != null && !jsonObj.get("processing_fee_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("processing_fee_money"));
      }
      if ((jsonObj.get("receipt_url") != null && !jsonObj.get("receipt_url").isJsonNull()) && !jsonObj.get("receipt_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receipt_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receipt_url").toString()));
      }
      // validate the optional field `refunded_money`
      if (jsonObj.get("refunded_money") != null && !jsonObj.get("refunded_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("refunded_money"));
      }
      if (jsonObj.get("refunds") != null && !jsonObj.get("refunds").isJsonNull()) {
        JsonArray jsonArrayrefunds = jsonObj.getAsJsonArray("refunds");
        if (jsonArrayrefunds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refunds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refunds` to be an array in the JSON string but got `%s`", jsonObj.get("refunds").toString()));
          }

          // validate the optional field `refunds` (array)
          for (int i = 0; i < jsonArrayrefunds.size(); i++) {
            V1Refund.validateJsonElement(jsonArrayrefunds.get(i));
          };
        }
      }
      // validate the optional field `surcharge_money`
      if (jsonObj.get("surcharge_money") != null && !jsonObj.get("surcharge_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("surcharge_money"));
      }
      if (jsonObj.get("surcharges") != null && !jsonObj.get("surcharges").isJsonNull()) {
        JsonArray jsonArraysurcharges = jsonObj.getAsJsonArray("surcharges");
        if (jsonArraysurcharges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("surcharges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `surcharges` to be an array in the JSON string but got `%s`", jsonObj.get("surcharges").toString()));
          }

          // validate the optional field `surcharges` (array)
          for (int i = 0; i < jsonArraysurcharges.size(); i++) {
            V1PaymentSurcharge.validateJsonElement(jsonArraysurcharges.get(i));
          };
        }
      }
      // validate the optional field `swedish_rounding_money`
      if (jsonObj.get("swedish_rounding_money") != null && !jsonObj.get("swedish_rounding_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("swedish_rounding_money"));
      }
      // validate the optional field `tax_money`
      if (jsonObj.get("tax_money") != null && !jsonObj.get("tax_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("tax_money"));
      }
      if (jsonObj.get("tender") != null && !jsonObj.get("tender").isJsonNull()) {
        JsonArray jsonArraytender = jsonObj.getAsJsonArray("tender");
        if (jsonArraytender != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tender").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tender` to be an array in the JSON string but got `%s`", jsonObj.get("tender").toString()));
          }

          // validate the optional field `tender` (array)
          for (int i = 0; i < jsonArraytender.size(); i++) {
            V1Tender.validateJsonElement(jsonArraytender.get(i));
          };
        }
      }
      // validate the optional field `tip_money`
      if (jsonObj.get("tip_money") != null && !jsonObj.get("tip_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("tip_money"));
      }
      // validate the optional field `total_collected_money`
      if (jsonObj.get("total_collected_money") != null && !jsonObj.get("total_collected_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("total_collected_money"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1Payment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1Payment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1Payment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1Payment.class));

       return (TypeAdapter<T>) new TypeAdapter<V1Payment>() {
           @Override
           public void write(JsonWriter out, V1Payment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1Payment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1Payment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1Payment
   * @throws IOException if the JSON string is invalid with respect to V1Payment
   */
  public static V1Payment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1Payment.class);
  }

  /**
   * Convert an instance of V1Payment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

