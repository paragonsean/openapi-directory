/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchRetrieveInventoryCountsRequest {
  public static final String SERIALIZED_NAME_CATALOG_OBJECT_IDS = "catalog_object_ids";
  @SerializedName(SERIALIZED_NAME_CATALOG_OBJECT_IDS)
  private List<String> catalogObjectIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURSOR = "cursor";
  @SerializedName(SERIALIZED_NAME_CURSOR)
  private String cursor;

  public static final String SERIALIZED_NAME_LOCATION_IDS = "location_ids";
  @SerializedName(SERIALIZED_NAME_LOCATION_IDS)
  private List<String> locationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATES = "states";
  @SerializedName(SERIALIZED_NAME_STATES)
  private List<String> states = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_AFTER = "updated_after";
  @SerializedName(SERIALIZED_NAME_UPDATED_AFTER)
  private String updatedAfter;

  public BatchRetrieveInventoryCountsRequest() {
  }

  public BatchRetrieveInventoryCountsRequest catalogObjectIds(List<String> catalogObjectIds) {
    this.catalogObjectIds = catalogObjectIds;
    return this;
  }

  public BatchRetrieveInventoryCountsRequest addCatalogObjectIdsItem(String catalogObjectIdsItem) {
    if (this.catalogObjectIds == null) {
      this.catalogObjectIds = new ArrayList<>();
    }
    this.catalogObjectIds.add(catalogObjectIdsItem);
    return this;
  }

  /**
   * The filter to return results by &#x60;CatalogObject&#x60; ID. The filter is applicable only when set.  The default is null.
   * @return catalogObjectIds
   */
  @javax.annotation.Nullable
  public List<String> getCatalogObjectIds() {
    return catalogObjectIds;
  }

  public void setCatalogObjectIds(List<String> catalogObjectIds) {
    this.catalogObjectIds = catalogObjectIds;
  }


  public BatchRetrieveInventoryCountsRequest cursor(String cursor) {
    this.cursor = cursor;
    return this;
  }

  /**
   * A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
   * @return cursor
   */
  @javax.annotation.Nullable
  public String getCursor() {
    return cursor;
  }

  public void setCursor(String cursor) {
    this.cursor = cursor;
  }


  public BatchRetrieveInventoryCountsRequest locationIds(List<String> locationIds) {
    this.locationIds = locationIds;
    return this;
  }

  public BatchRetrieveInventoryCountsRequest addLocationIdsItem(String locationIdsItem) {
    if (this.locationIds == null) {
      this.locationIds = new ArrayList<>();
    }
    this.locationIds.add(locationIdsItem);
    return this;
  }

  /**
   * The filter to return results by &#x60;Location&#x60; ID.  This filter is applicable only when set. The default is null.
   * @return locationIds
   */
  @javax.annotation.Nullable
  public List<String> getLocationIds() {
    return locationIds;
  }

  public void setLocationIds(List<String> locationIds) {
    this.locationIds = locationIds;
  }


  public BatchRetrieveInventoryCountsRequest states(List<String> states) {
    this.states = states;
    return this;
  }

  public BatchRetrieveInventoryCountsRequest addStatesItem(String statesItem) {
    if (this.states == null) {
      this.states = new ArrayList<>();
    }
    this.states.add(statesItem);
    return this;
  }

  /**
   * The filter to return results by &#x60;InventoryState&#x60;. The filter is only applicable when set. Ignored are untracked states of &#x60;NONE&#x60;, &#x60;SOLD&#x60;, and &#x60;UNLINKED_RETURN&#x60;. The default is null.
   * @return states
   */
  @javax.annotation.Nullable
  public List<String> getStates() {
    return states;
  }

  public void setStates(List<String> states) {
    this.states = states;
  }


  public BatchRetrieveInventoryCountsRequest updatedAfter(String updatedAfter) {
    this.updatedAfter = updatedAfter;
    return this;
  }

  /**
   * The filter to return results with their &#x60;calculated_at&#x60; value  after the given time as specified in an RFC 3339 timestamp.  The default value is the UNIX epoch of (&#x60;1970-01-01T00:00:00Z&#x60;).
   * @return updatedAfter
   */
  @javax.annotation.Nullable
  public String getUpdatedAfter() {
    return updatedAfter;
  }

  public void setUpdatedAfter(String updatedAfter) {
    this.updatedAfter = updatedAfter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchRetrieveInventoryCountsRequest batchRetrieveInventoryCountsRequest = (BatchRetrieveInventoryCountsRequest) o;
    return Objects.equals(this.catalogObjectIds, batchRetrieveInventoryCountsRequest.catalogObjectIds) &&
        Objects.equals(this.cursor, batchRetrieveInventoryCountsRequest.cursor) &&
        Objects.equals(this.locationIds, batchRetrieveInventoryCountsRequest.locationIds) &&
        Objects.equals(this.states, batchRetrieveInventoryCountsRequest.states) &&
        Objects.equals(this.updatedAfter, batchRetrieveInventoryCountsRequest.updatedAfter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalogObjectIds, cursor, locationIds, states, updatedAfter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchRetrieveInventoryCountsRequest {\n");
    sb.append("    catalogObjectIds: ").append(toIndentedString(catalogObjectIds)).append("\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("    locationIds: ").append(toIndentedString(locationIds)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    updatedAfter: ").append(toIndentedString(updatedAfter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("catalog_object_ids");
    openapiFields.add("cursor");
    openapiFields.add("location_ids");
    openapiFields.add("states");
    openapiFields.add("updated_after");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchRetrieveInventoryCountsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchRetrieveInventoryCountsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchRetrieveInventoryCountsRequest is not found in the empty JSON string", BatchRetrieveInventoryCountsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchRetrieveInventoryCountsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchRetrieveInventoryCountsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("catalog_object_ids") != null && !jsonObj.get("catalog_object_ids").isJsonNull() && !jsonObj.get("catalog_object_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalog_object_ids` to be an array in the JSON string but got `%s`", jsonObj.get("catalog_object_ids").toString()));
      }
      if ((jsonObj.get("cursor") != null && !jsonObj.get("cursor").isJsonNull()) && !jsonObj.get("cursor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cursor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cursor").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("location_ids") != null && !jsonObj.get("location_ids").isJsonNull() && !jsonObj.get("location_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_ids` to be an array in the JSON string but got `%s`", jsonObj.get("location_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("states") != null && !jsonObj.get("states").isJsonNull() && !jsonObj.get("states").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `states` to be an array in the JSON string but got `%s`", jsonObj.get("states").toString()));
      }
      if ((jsonObj.get("updated_after") != null && !jsonObj.get("updated_after").isJsonNull()) && !jsonObj.get("updated_after").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_after` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_after").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchRetrieveInventoryCountsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchRetrieveInventoryCountsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchRetrieveInventoryCountsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchRetrieveInventoryCountsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchRetrieveInventoryCountsRequest>() {
           @Override
           public void write(JsonWriter out, BatchRetrieveInventoryCountsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchRetrieveInventoryCountsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchRetrieveInventoryCountsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchRetrieveInventoryCountsRequest
   * @throws IOException if the JSON string is invalid with respect to BatchRetrieveInventoryCountsRequest
   */
  public static BatchRetrieveInventoryCountsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchRetrieveInventoryCountsRequest.class);
  }

  /**
   * Convert an instance of BatchRetrieveInventoryCountsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

