/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InvoicePaymentReminder;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a payment request for an [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice). Invoices can specify a maximum of 13 payment requests, with up to 12 &#x60;INSTALLMENT&#x60; request types. For more information,  see [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).  Adding &#x60;INSTALLMENT&#x60; payment requests to an invoice requires an  [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvoicePaymentRequest {
  public static final String SERIALIZED_NAME_AUTOMATIC_PAYMENT_SOURCE = "automatic_payment_source";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC_PAYMENT_SOURCE)
  private String automaticPaymentSource;

  public static final String SERIALIZED_NAME_CARD_ID = "card_id";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  public static final String SERIALIZED_NAME_COMPUTED_AMOUNT_MONEY = "computed_amount_money";
  @SerializedName(SERIALIZED_NAME_COMPUTED_AMOUNT_MONEY)
  private Money computedAmountMoney;

  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private String dueDate;

  public static final String SERIALIZED_NAME_FIXED_AMOUNT_REQUESTED_MONEY = "fixed_amount_requested_money";
  @SerializedName(SERIALIZED_NAME_FIXED_AMOUNT_REQUESTED_MONEY)
  private Money fixedAmountRequestedMoney;

  public static final String SERIALIZED_NAME_PERCENTAGE_REQUESTED = "percentage_requested";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_REQUESTED)
  private String percentageRequested;

  public static final String SERIALIZED_NAME_REMINDERS = "reminders";
  @SerializedName(SERIALIZED_NAME_REMINDERS)
  private List<InvoicePaymentReminder> reminders = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST_METHOD = "request_method";
  @SerializedName(SERIALIZED_NAME_REQUEST_METHOD)
  private String requestMethod;

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "request_type";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  private String requestType;

  public static final String SERIALIZED_NAME_ROUNDING_ADJUSTMENT_INCLUDED_MONEY = "rounding_adjustment_included_money";
  @SerializedName(SERIALIZED_NAME_ROUNDING_ADJUSTMENT_INCLUDED_MONEY)
  private Money roundingAdjustmentIncludedMoney;

  public static final String SERIALIZED_NAME_TIPPING_ENABLED = "tipping_enabled";
  @SerializedName(SERIALIZED_NAME_TIPPING_ENABLED)
  private Boolean tippingEnabled;

  public static final String SERIALIZED_NAME_TOTAL_COMPLETED_AMOUNT_MONEY = "total_completed_amount_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_COMPLETED_AMOUNT_MONEY)
  private Money totalCompletedAmountMoney;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public InvoicePaymentRequest() {
  }

  public InvoicePaymentRequest automaticPaymentSource(String automaticPaymentSource) {
    this.automaticPaymentSource = automaticPaymentSource;
    return this;
  }

  /**
   * The payment method for an automatic payment.  The default value is &#x60;NONE&#x60;.
   * @return automaticPaymentSource
   */
  @javax.annotation.Nullable
  public String getAutomaticPaymentSource() {
    return automaticPaymentSource;
  }

  public void setAutomaticPaymentSource(String automaticPaymentSource) {
    this.automaticPaymentSource = automaticPaymentSource;
  }


  public InvoicePaymentRequest cardId(String cardId) {
    this.cardId = cardId;
    return this;
  }

  /**
   * The ID of the credit or debit card on file to charge for the payment request. To get the cards on file for a customer, call [ListCards](https://developer.squareup.com/reference/square_2021-08-18/cards-api/list-cards) and include the &#x60;customer_id&#x60; of the invoice recipient.
   * @return cardId
   */
  @javax.annotation.Nullable
  public String getCardId() {
    return cardId;
  }

  public void setCardId(String cardId) {
    this.cardId = cardId;
  }


  public InvoicePaymentRequest computedAmountMoney(Money computedAmountMoney) {
    this.computedAmountMoney = computedAmountMoney;
    return this;
  }

  /**
   * Get computedAmountMoney
   * @return computedAmountMoney
   */
  @javax.annotation.Nullable
  public Money getComputedAmountMoney() {
    return computedAmountMoney;
  }

  public void setComputedAmountMoney(Money computedAmountMoney) {
    this.computedAmountMoney = computedAmountMoney;
  }


  public InvoicePaymentRequest dueDate(String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * The due date (in the invoice&#39;s time zone) for the payment request, in &#x60;YYYY-MM-DD&#x60; format. This field is required to create a payment request.  After this date, the invoice becomes overdue. For example, a payment &#x60;due_date&#x60; of 2021-03-09 with a &#x60;timezone&#x60; of America/Los\\_Angeles becomes overdue at midnight on March 9 in America/Los\\_Angeles (which equals a UTC timestamp of 2021-03-10T08:00:00Z).
   * @return dueDate
   */
  @javax.annotation.Nullable
  public String getDueDate() {
    return dueDate;
  }

  public void setDueDate(String dueDate) {
    this.dueDate = dueDate;
  }


  public InvoicePaymentRequest fixedAmountRequestedMoney(Money fixedAmountRequestedMoney) {
    this.fixedAmountRequestedMoney = fixedAmountRequestedMoney;
    return this;
  }

  /**
   * Get fixedAmountRequestedMoney
   * @return fixedAmountRequestedMoney
   */
  @javax.annotation.Nullable
  public Money getFixedAmountRequestedMoney() {
    return fixedAmountRequestedMoney;
  }

  public void setFixedAmountRequestedMoney(Money fixedAmountRequestedMoney) {
    this.fixedAmountRequestedMoney = fixedAmountRequestedMoney;
  }


  public InvoicePaymentRequest percentageRequested(String percentageRequested) {
    this.percentageRequested = percentageRequested;
    return this;
  }

  /**
   * Specifies the amount for the payment request in percentage:  - When the payment &#x60;request_type&#x60; is &#x60;DEPOSIT&#x60;, it is the percentage of the order&#39;s total amount. - When the payment &#x60;request_type&#x60; is &#x60;INSTALLMENT&#x60;, it is the percentage of the order&#39;s total less  the deposit, if requested. The sum of the &#x60;percentage_requested&#x60; in all installment  payment requests must be equal to 100.  You cannot specify this when the payment &#x60;request_type&#x60; is &#x60;BALANCE&#x60; or when the  payment request specifies the &#x60;fixed_amount_requested_money&#x60; field.
   * @return percentageRequested
   */
  @javax.annotation.Nullable
  public String getPercentageRequested() {
    return percentageRequested;
  }

  public void setPercentageRequested(String percentageRequested) {
    this.percentageRequested = percentageRequested;
  }


  public InvoicePaymentRequest reminders(List<InvoicePaymentReminder> reminders) {
    this.reminders = reminders;
    return this;
  }

  public InvoicePaymentRequest addRemindersItem(InvoicePaymentReminder remindersItem) {
    if (this.reminders == null) {
      this.reminders = new ArrayList<>();
    }
    this.reminders.add(remindersItem);
    return this;
  }

  /**
   * A list of one or more reminders to send for the payment request.
   * @return reminders
   */
  @javax.annotation.Nullable
  public List<InvoicePaymentReminder> getReminders() {
    return reminders;
  }

  public void setReminders(List<InvoicePaymentReminder> reminders) {
    this.reminders = reminders;
  }


  public InvoicePaymentRequest requestMethod(String requestMethod) {
    this.requestMethod = requestMethod;
    return this;
  }

  /**
   * Indicates how Square processes the payment request. DEPRECATED at version 2021-01-21. Replaced by the &#x60;Invoice.delivery_method&#x60; and &#x60;InvoicePaymentRequest.automatic_payment_source&#x60; fields.  One of the following is required when creating an invoice: - (Recommended) The &#x60;delivery_method&#x60; field of the invoice. To configure an automatic payment, the &#x60;automatic_payment_source&#x60; field of the payment request is also required. - This &#x60;request_method&#x60; field. Note that &#x60;invoice&#x60; objects returned in responses do not include &#x60;request_method&#x60;.
   * @return requestMethod
   */
  @javax.annotation.Nullable
  public String getRequestMethod() {
    return requestMethod;
  }

  public void setRequestMethod(String requestMethod) {
    this.requestMethod = requestMethod;
  }


  public InvoicePaymentRequest requestType(String requestType) {
    this.requestType = requestType;
    return this;
  }

  /**
   * Identifies the payment request type. This type defines how the payment request amount is determined.  This field is required to create a payment request.
   * @return requestType
   */
  @javax.annotation.Nullable
  public String getRequestType() {
    return requestType;
  }

  public void setRequestType(String requestType) {
    this.requestType = requestType;
  }


  public InvoicePaymentRequest roundingAdjustmentIncludedMoney(Money roundingAdjustmentIncludedMoney) {
    this.roundingAdjustmentIncludedMoney = roundingAdjustmentIncludedMoney;
    return this;
  }

  /**
   * Get roundingAdjustmentIncludedMoney
   * @return roundingAdjustmentIncludedMoney
   */
  @javax.annotation.Nullable
  public Money getRoundingAdjustmentIncludedMoney() {
    return roundingAdjustmentIncludedMoney;
  }

  public void setRoundingAdjustmentIncludedMoney(Money roundingAdjustmentIncludedMoney) {
    this.roundingAdjustmentIncludedMoney = roundingAdjustmentIncludedMoney;
  }


  public InvoicePaymentRequest tippingEnabled(Boolean tippingEnabled) {
    this.tippingEnabled = tippingEnabled;
    return this;
  }

  /**
   * If set to true, the Square-hosted invoice page (the &#x60;public_url&#x60; field of the invoice)  provides a place for the customer to pay a tip.   This field is allowed only on the final payment request   and the payment &#x60;request_type&#x60; must be &#x60;BALANCE&#x60; or &#x60;INSTALLMENT&#x60;.
   * @return tippingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTippingEnabled() {
    return tippingEnabled;
  }

  public void setTippingEnabled(Boolean tippingEnabled) {
    this.tippingEnabled = tippingEnabled;
  }


  public InvoicePaymentRequest totalCompletedAmountMoney(Money totalCompletedAmountMoney) {
    this.totalCompletedAmountMoney = totalCompletedAmountMoney;
    return this;
  }

  /**
   * Get totalCompletedAmountMoney
   * @return totalCompletedAmountMoney
   */
  @javax.annotation.Nullable
  public Money getTotalCompletedAmountMoney() {
    return totalCompletedAmountMoney;
  }

  public void setTotalCompletedAmountMoney(Money totalCompletedAmountMoney) {
    this.totalCompletedAmountMoney = totalCompletedAmountMoney;
  }


  public InvoicePaymentRequest uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * The Square-generated ID of the payment request in an [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice).
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoicePaymentRequest invoicePaymentRequest = (InvoicePaymentRequest) o;
    return Objects.equals(this.automaticPaymentSource, invoicePaymentRequest.automaticPaymentSource) &&
        Objects.equals(this.cardId, invoicePaymentRequest.cardId) &&
        Objects.equals(this.computedAmountMoney, invoicePaymentRequest.computedAmountMoney) &&
        Objects.equals(this.dueDate, invoicePaymentRequest.dueDate) &&
        Objects.equals(this.fixedAmountRequestedMoney, invoicePaymentRequest.fixedAmountRequestedMoney) &&
        Objects.equals(this.percentageRequested, invoicePaymentRequest.percentageRequested) &&
        Objects.equals(this.reminders, invoicePaymentRequest.reminders) &&
        Objects.equals(this.requestMethod, invoicePaymentRequest.requestMethod) &&
        Objects.equals(this.requestType, invoicePaymentRequest.requestType) &&
        Objects.equals(this.roundingAdjustmentIncludedMoney, invoicePaymentRequest.roundingAdjustmentIncludedMoney) &&
        Objects.equals(this.tippingEnabled, invoicePaymentRequest.tippingEnabled) &&
        Objects.equals(this.totalCompletedAmountMoney, invoicePaymentRequest.totalCompletedAmountMoney) &&
        Objects.equals(this.uid, invoicePaymentRequest.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automaticPaymentSource, cardId, computedAmountMoney, dueDate, fixedAmountRequestedMoney, percentageRequested, reminders, requestMethod, requestType, roundingAdjustmentIncludedMoney, tippingEnabled, totalCompletedAmountMoney, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoicePaymentRequest {\n");
    sb.append("    automaticPaymentSource: ").append(toIndentedString(automaticPaymentSource)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    computedAmountMoney: ").append(toIndentedString(computedAmountMoney)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    fixedAmountRequestedMoney: ").append(toIndentedString(fixedAmountRequestedMoney)).append("\n");
    sb.append("    percentageRequested: ").append(toIndentedString(percentageRequested)).append("\n");
    sb.append("    reminders: ").append(toIndentedString(reminders)).append("\n");
    sb.append("    requestMethod: ").append(toIndentedString(requestMethod)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    roundingAdjustmentIncludedMoney: ").append(toIndentedString(roundingAdjustmentIncludedMoney)).append("\n");
    sb.append("    tippingEnabled: ").append(toIndentedString(tippingEnabled)).append("\n");
    sb.append("    totalCompletedAmountMoney: ").append(toIndentedString(totalCompletedAmountMoney)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("automatic_payment_source");
    openapiFields.add("card_id");
    openapiFields.add("computed_amount_money");
    openapiFields.add("due_date");
    openapiFields.add("fixed_amount_requested_money");
    openapiFields.add("percentage_requested");
    openapiFields.add("reminders");
    openapiFields.add("request_method");
    openapiFields.add("request_type");
    openapiFields.add("rounding_adjustment_included_money");
    openapiFields.add("tipping_enabled");
    openapiFields.add("total_completed_amount_money");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoicePaymentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoicePaymentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoicePaymentRequest is not found in the empty JSON string", InvoicePaymentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoicePaymentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoicePaymentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("automatic_payment_source") != null && !jsonObj.get("automatic_payment_source").isJsonNull()) && !jsonObj.get("automatic_payment_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `automatic_payment_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("automatic_payment_source").toString()));
      }
      if ((jsonObj.get("card_id") != null && !jsonObj.get("card_id").isJsonNull()) && !jsonObj.get("card_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_id").toString()));
      }
      // validate the optional field `computed_amount_money`
      if (jsonObj.get("computed_amount_money") != null && !jsonObj.get("computed_amount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("computed_amount_money"));
      }
      if ((jsonObj.get("due_date") != null && !jsonObj.get("due_date").isJsonNull()) && !jsonObj.get("due_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `due_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("due_date").toString()));
      }
      // validate the optional field `fixed_amount_requested_money`
      if (jsonObj.get("fixed_amount_requested_money") != null && !jsonObj.get("fixed_amount_requested_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("fixed_amount_requested_money"));
      }
      if ((jsonObj.get("percentage_requested") != null && !jsonObj.get("percentage_requested").isJsonNull()) && !jsonObj.get("percentage_requested").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentage_requested` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentage_requested").toString()));
      }
      if (jsonObj.get("reminders") != null && !jsonObj.get("reminders").isJsonNull()) {
        JsonArray jsonArrayreminders = jsonObj.getAsJsonArray("reminders");
        if (jsonArrayreminders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reminders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reminders` to be an array in the JSON string but got `%s`", jsonObj.get("reminders").toString()));
          }

          // validate the optional field `reminders` (array)
          for (int i = 0; i < jsonArrayreminders.size(); i++) {
            InvoicePaymentReminder.validateJsonElement(jsonArrayreminders.get(i));
          };
        }
      }
      if ((jsonObj.get("request_method") != null && !jsonObj.get("request_method").isJsonNull()) && !jsonObj.get("request_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_method").toString()));
      }
      if ((jsonObj.get("request_type") != null && !jsonObj.get("request_type").isJsonNull()) && !jsonObj.get("request_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_type").toString()));
      }
      // validate the optional field `rounding_adjustment_included_money`
      if (jsonObj.get("rounding_adjustment_included_money") != null && !jsonObj.get("rounding_adjustment_included_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("rounding_adjustment_included_money"));
      }
      // validate the optional field `total_completed_amount_money`
      if (jsonObj.get("total_completed_amount_money") != null && !jsonObj.get("total_completed_amount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_completed_amount_money"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoicePaymentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoicePaymentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoicePaymentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoicePaymentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoicePaymentRequest>() {
           @Override
           public void write(JsonWriter out, InvoicePaymentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoicePaymentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoicePaymentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoicePaymentRequest
   * @throws IOException if the JSON string is invalid with respect to InvoicePaymentRequest
   */
  public static InvoicePaymentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoicePaymentRequest.class);
  }

  /**
   * Convert an instance of InvoicePaymentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

