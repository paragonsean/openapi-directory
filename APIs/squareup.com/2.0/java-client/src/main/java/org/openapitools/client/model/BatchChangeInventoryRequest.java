/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InventoryChange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchChangeInventoryRequest {
  public static final String SERIALIZED_NAME_CHANGES = "changes";
  @SerializedName(SERIALIZED_NAME_CHANGES)
  private List<InventoryChange> changes = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDEMPOTENCY_KEY = "idempotency_key";
  @SerializedName(SERIALIZED_NAME_IDEMPOTENCY_KEY)
  private String idempotencyKey;

  public static final String SERIALIZED_NAME_IGNORE_UNCHANGED_COUNTS = "ignore_unchanged_counts";
  @SerializedName(SERIALIZED_NAME_IGNORE_UNCHANGED_COUNTS)
  private Boolean ignoreUnchangedCounts;

  public BatchChangeInventoryRequest() {
  }

  public BatchChangeInventoryRequest changes(List<InventoryChange> changes) {
    this.changes = changes;
    return this;
  }

  public BatchChangeInventoryRequest addChangesItem(InventoryChange changesItem) {
    if (this.changes == null) {
      this.changes = new ArrayList<>();
    }
    this.changes.add(changesItem);
    return this;
  }

  /**
   * The set of physical counts and inventory adjustments to be made. Changes are applied based on the client-supplied timestamp and may be sent out of order.
   * @return changes
   */
  @javax.annotation.Nullable
  public List<InventoryChange> getChanges() {
    return changes;
  }

  public void setChanges(List<InventoryChange> changes) {
    this.changes = changes;
  }


  public BatchChangeInventoryRequest idempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
    return this;
  }

  /**
   * A client-supplied, universally unique identifier (UUID) for the request.  See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) in the [API Development 101](https://developer.squareup.com/docs/basics/api101/overview) section for more information.
   * @return idempotencyKey
   */
  @javax.annotation.Nonnull
  public String getIdempotencyKey() {
    return idempotencyKey;
  }

  public void setIdempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
  }


  public BatchChangeInventoryRequest ignoreUnchangedCounts(Boolean ignoreUnchangedCounts) {
    this.ignoreUnchangedCounts = ignoreUnchangedCounts;
    return this;
  }

  /**
   * Indicates whether the current physical count should be ignored if the quantity is unchanged since the last physical count. Default: &#x60;true&#x60;.
   * @return ignoreUnchangedCounts
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreUnchangedCounts() {
    return ignoreUnchangedCounts;
  }

  public void setIgnoreUnchangedCounts(Boolean ignoreUnchangedCounts) {
    this.ignoreUnchangedCounts = ignoreUnchangedCounts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchChangeInventoryRequest batchChangeInventoryRequest = (BatchChangeInventoryRequest) o;
    return Objects.equals(this.changes, batchChangeInventoryRequest.changes) &&
        Objects.equals(this.idempotencyKey, batchChangeInventoryRequest.idempotencyKey) &&
        Objects.equals(this.ignoreUnchangedCounts, batchChangeInventoryRequest.ignoreUnchangedCounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changes, idempotencyKey, ignoreUnchangedCounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchChangeInventoryRequest {\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("    idempotencyKey: ").append(toIndentedString(idempotencyKey)).append("\n");
    sb.append("    ignoreUnchangedCounts: ").append(toIndentedString(ignoreUnchangedCounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changes");
    openapiFields.add("idempotency_key");
    openapiFields.add("ignore_unchanged_counts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("idempotency_key");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchChangeInventoryRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchChangeInventoryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchChangeInventoryRequest is not found in the empty JSON string", BatchChangeInventoryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchChangeInventoryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchChangeInventoryRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchChangeInventoryRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("changes") != null && !jsonObj.get("changes").isJsonNull()) {
        JsonArray jsonArraychanges = jsonObj.getAsJsonArray("changes");
        if (jsonArraychanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("changes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `changes` to be an array in the JSON string but got `%s`", jsonObj.get("changes").toString()));
          }

          // validate the optional field `changes` (array)
          for (int i = 0; i < jsonArraychanges.size(); i++) {
            InventoryChange.validateJsonElement(jsonArraychanges.get(i));
          };
        }
      }
      if (!jsonObj.get("idempotency_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idempotency_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idempotency_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchChangeInventoryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchChangeInventoryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchChangeInventoryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchChangeInventoryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchChangeInventoryRequest>() {
           @Override
           public void write(JsonWriter out, BatchChangeInventoryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchChangeInventoryRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchChangeInventoryRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchChangeInventoryRequest
   * @throws IOException if the JSON string is invalid with respect to BatchChangeInventoryRequest
   */
  public static BatchChangeInventoryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchChangeInventoryRequest.class);
  }

  /**
   * Convert an instance of BatchChangeInventoryRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

