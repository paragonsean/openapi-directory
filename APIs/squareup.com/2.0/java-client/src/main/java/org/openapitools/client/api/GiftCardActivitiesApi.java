/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateGiftCardActivityRequest;
import org.openapitools.client.model.CreateGiftCardActivityResponse;
import org.openapitools.client.model.ListGiftCardActivitiesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GiftCardActivitiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GiftCardActivitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GiftCardActivitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createGiftCardActivity
     * @param createGiftCardActivityRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGiftCardActivityCall(CreateGiftCardActivityRequest createGiftCardActivityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGiftCardActivityRequest;

        // create path and map variables
        String localVarPath = "/v2/gift-cards/activities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGiftCardActivityValidateBeforeCall(CreateGiftCardActivityRequest createGiftCardActivityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createGiftCardActivityRequest' is set
        if (createGiftCardActivityRequest == null) {
            throw new ApiException("Missing the required parameter 'createGiftCardActivityRequest' when calling createGiftCardActivity(Async)");
        }

        return createGiftCardActivityCall(createGiftCardActivityRequest, _callback);

    }

    /**
     * CreateGiftCardActivity
     * Creates a gift card activity. For more information, see  [GiftCardActivity](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#giftcardactivity) and  [Using activated gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#using-activated-gift-cards).
     * @param createGiftCardActivityRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return CreateGiftCardActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateGiftCardActivityResponse createGiftCardActivity(CreateGiftCardActivityRequest createGiftCardActivityRequest) throws ApiException {
        ApiResponse<CreateGiftCardActivityResponse> localVarResp = createGiftCardActivityWithHttpInfo(createGiftCardActivityRequest);
        return localVarResp.getData();
    }

    /**
     * CreateGiftCardActivity
     * Creates a gift card activity. For more information, see  [GiftCardActivity](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#giftcardactivity) and  [Using activated gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#using-activated-gift-cards).
     * @param createGiftCardActivityRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;CreateGiftCardActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGiftCardActivityResponse> createGiftCardActivityWithHttpInfo(CreateGiftCardActivityRequest createGiftCardActivityRequest) throws ApiException {
        okhttp3.Call localVarCall = createGiftCardActivityValidateBeforeCall(createGiftCardActivityRequest, null);
        Type localVarReturnType = new TypeToken<CreateGiftCardActivityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateGiftCardActivity (asynchronously)
     * Creates a gift card activity. For more information, see  [GiftCardActivity](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#giftcardactivity) and  [Using activated gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#using-activated-gift-cards).
     * @param createGiftCardActivityRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGiftCardActivityAsync(CreateGiftCardActivityRequest createGiftCardActivityRequest, final ApiCallback<CreateGiftCardActivityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGiftCardActivityValidateBeforeCall(createGiftCardActivityRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateGiftCardActivityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listGiftCardActivities
     * @param giftCardId If you provide a gift card ID, the endpoint returns activities that belong  to the specified gift card. Otherwise, the endpoint returns all gift card activities for  the seller. (optional)
     * @param type If you provide a type, the endpoint returns gift card activities of this type.  Otherwise, the endpoint returns all types of gift card activities. (optional)
     * @param locationId If you provide a location ID, the endpoint returns gift card activities for that location.  Otherwise, the endpoint returns gift card activities for all locations. (optional)
     * @param beginTime The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year. (optional)
     * @param endTime The timestamp for the end of the reporting period, in RFC 3339 format. Inclusive. Default: The current time. (optional)
     * @param limit If you provide a limit value, the endpoint returns the specified number  of results (or less) per page. A maximum value is 100. The default value is 50. (optional)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If you do not provide the cursor, the call returns the first page of the results. (optional)
     * @param sortOrder The order in which the endpoint returns the activities, based on &#x60;created_at&#x60;. - &#x60;ASC&#x60; - Oldest to newest. - &#x60;DESC&#x60; - Newest to oldest (default). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGiftCardActivitiesCall(String giftCardId, String type, String locationId, String beginTime, String endTime, Integer limit, String cursor, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/gift-cards/activities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (giftCardId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gift_card_id", giftCardId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (beginTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("begin_time", beginTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGiftCardActivitiesValidateBeforeCall(String giftCardId, String type, String locationId, String beginTime, String endTime, Integer limit, String cursor, String sortOrder, final ApiCallback _callback) throws ApiException {
        return listGiftCardActivitiesCall(giftCardId, type, locationId, beginTime, endTime, limit, cursor, sortOrder, _callback);

    }

    /**
     * ListGiftCardActivities
     * Lists gift card activities. By default, you get gift card activities for all gift cards in the seller&#39;s account. You can optionally specify query parameters to filter the list. For example, you can get a list of gift card activities for a gift card, for all gift cards in a specific region, or for activities within a time window.
     * @param giftCardId If you provide a gift card ID, the endpoint returns activities that belong  to the specified gift card. Otherwise, the endpoint returns all gift card activities for  the seller. (optional)
     * @param type If you provide a type, the endpoint returns gift card activities of this type.  Otherwise, the endpoint returns all types of gift card activities. (optional)
     * @param locationId If you provide a location ID, the endpoint returns gift card activities for that location.  Otherwise, the endpoint returns gift card activities for all locations. (optional)
     * @param beginTime The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year. (optional)
     * @param endTime The timestamp for the end of the reporting period, in RFC 3339 format. Inclusive. Default: The current time. (optional)
     * @param limit If you provide a limit value, the endpoint returns the specified number  of results (or less) per page. A maximum value is 100. The default value is 50. (optional)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If you do not provide the cursor, the call returns the first page of the results. (optional)
     * @param sortOrder The order in which the endpoint returns the activities, based on &#x60;created_at&#x60;. - &#x60;ASC&#x60; - Oldest to newest. - &#x60;DESC&#x60; - Newest to oldest (default). (optional)
     * @return ListGiftCardActivitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListGiftCardActivitiesResponse listGiftCardActivities(String giftCardId, String type, String locationId, String beginTime, String endTime, Integer limit, String cursor, String sortOrder) throws ApiException {
        ApiResponse<ListGiftCardActivitiesResponse> localVarResp = listGiftCardActivitiesWithHttpInfo(giftCardId, type, locationId, beginTime, endTime, limit, cursor, sortOrder);
        return localVarResp.getData();
    }

    /**
     * ListGiftCardActivities
     * Lists gift card activities. By default, you get gift card activities for all gift cards in the seller&#39;s account. You can optionally specify query parameters to filter the list. For example, you can get a list of gift card activities for a gift card, for all gift cards in a specific region, or for activities within a time window.
     * @param giftCardId If you provide a gift card ID, the endpoint returns activities that belong  to the specified gift card. Otherwise, the endpoint returns all gift card activities for  the seller. (optional)
     * @param type If you provide a type, the endpoint returns gift card activities of this type.  Otherwise, the endpoint returns all types of gift card activities. (optional)
     * @param locationId If you provide a location ID, the endpoint returns gift card activities for that location.  Otherwise, the endpoint returns gift card activities for all locations. (optional)
     * @param beginTime The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year. (optional)
     * @param endTime The timestamp for the end of the reporting period, in RFC 3339 format. Inclusive. Default: The current time. (optional)
     * @param limit If you provide a limit value, the endpoint returns the specified number  of results (or less) per page. A maximum value is 100. The default value is 50. (optional)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If you do not provide the cursor, the call returns the first page of the results. (optional)
     * @param sortOrder The order in which the endpoint returns the activities, based on &#x60;created_at&#x60;. - &#x60;ASC&#x60; - Oldest to newest. - &#x60;DESC&#x60; - Newest to oldest (default). (optional)
     * @return ApiResponse&lt;ListGiftCardActivitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListGiftCardActivitiesResponse> listGiftCardActivitiesWithHttpInfo(String giftCardId, String type, String locationId, String beginTime, String endTime, Integer limit, String cursor, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listGiftCardActivitiesValidateBeforeCall(giftCardId, type, locationId, beginTime, endTime, limit, cursor, sortOrder, null);
        Type localVarReturnType = new TypeToken<ListGiftCardActivitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListGiftCardActivities (asynchronously)
     * Lists gift card activities. By default, you get gift card activities for all gift cards in the seller&#39;s account. You can optionally specify query parameters to filter the list. For example, you can get a list of gift card activities for a gift card, for all gift cards in a specific region, or for activities within a time window.
     * @param giftCardId If you provide a gift card ID, the endpoint returns activities that belong  to the specified gift card. Otherwise, the endpoint returns all gift card activities for  the seller. (optional)
     * @param type If you provide a type, the endpoint returns gift card activities of this type.  Otherwise, the endpoint returns all types of gift card activities. (optional)
     * @param locationId If you provide a location ID, the endpoint returns gift card activities for that location.  Otherwise, the endpoint returns gift card activities for all locations. (optional)
     * @param beginTime The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year. (optional)
     * @param endTime The timestamp for the end of the reporting period, in RFC 3339 format. Inclusive. Default: The current time. (optional)
     * @param limit If you provide a limit value, the endpoint returns the specified number  of results (or less) per page. A maximum value is 100. The default value is 50. (optional)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If you do not provide the cursor, the call returns the first page of the results. (optional)
     * @param sortOrder The order in which the endpoint returns the activities, based on &#x60;created_at&#x60;. - &#x60;ASC&#x60; - Oldest to newest. - &#x60;DESC&#x60; - Newest to oldest (default). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGiftCardActivitiesAsync(String giftCardId, String type, String locationId, String beginTime, String endTime, Integer limit, String cursor, String sortOrder, final ApiCallback<ListGiftCardActivitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGiftCardActivitiesValidateBeforeCall(giftCardId, type, locationId, beginTime, endTime, limit, cursor, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<ListGiftCardActivitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
