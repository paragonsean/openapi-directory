/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CatalogMeasurementUnit;
import org.openapitools.client.model.InventoryAdjustment;
import org.openapitools.client.model.InventoryPhysicalCount;
import org.openapitools.client.model.InventoryTransfer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a single physical count, inventory, adjustment, or transfer that is part of the history of inventory changes for a particular [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InventoryChange {
  public static final String SERIALIZED_NAME_ADJUSTMENT = "adjustment";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT)
  private InventoryAdjustment adjustment;

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT = "measurement_unit";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT)
  private CatalogMeasurementUnit measurementUnit;

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT_ID = "measurement_unit_id";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT_ID)
  private String measurementUnitId;

  public static final String SERIALIZED_NAME_PHYSICAL_COUNT = "physical_count";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_COUNT)
  private InventoryPhysicalCount physicalCount;

  public static final String SERIALIZED_NAME_TRANSFER = "transfer";
  @SerializedName(SERIALIZED_NAME_TRANSFER)
  private InventoryTransfer transfer;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public InventoryChange() {
  }

  public InventoryChange adjustment(InventoryAdjustment adjustment) {
    this.adjustment = adjustment;
    return this;
  }

  /**
   * Get adjustment
   * @return adjustment
   */
  @javax.annotation.Nullable
  public InventoryAdjustment getAdjustment() {
    return adjustment;
  }

  public void setAdjustment(InventoryAdjustment adjustment) {
    this.adjustment = adjustment;
  }


  public InventoryChange measurementUnit(CatalogMeasurementUnit measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

  /**
   * Get measurementUnit
   * @return measurementUnit
   */
  @javax.annotation.Nullable
  public CatalogMeasurementUnit getMeasurementUnit() {
    return measurementUnit;
  }

  public void setMeasurementUnit(CatalogMeasurementUnit measurementUnit) {
    this.measurementUnit = measurementUnit;
  }


  public InventoryChange measurementUnitId(String measurementUnitId) {
    this.measurementUnitId = measurementUnitId;
    return this;
  }

  /**
   * The ID of the [CatalogMeasurementUnit](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogMeasurementUnit) object representing the catalog measurement unit associated with the inventory change.
   * @return measurementUnitId
   */
  @javax.annotation.Nullable
  public String getMeasurementUnitId() {
    return measurementUnitId;
  }

  public void setMeasurementUnitId(String measurementUnitId) {
    this.measurementUnitId = measurementUnitId;
  }


  public InventoryChange physicalCount(InventoryPhysicalCount physicalCount) {
    this.physicalCount = physicalCount;
    return this;
  }

  /**
   * Get physicalCount
   * @return physicalCount
   */
  @javax.annotation.Nullable
  public InventoryPhysicalCount getPhysicalCount() {
    return physicalCount;
  }

  public void setPhysicalCount(InventoryPhysicalCount physicalCount) {
    this.physicalCount = physicalCount;
  }


  public InventoryChange transfer(InventoryTransfer transfer) {
    this.transfer = transfer;
    return this;
  }

  /**
   * Get transfer
   * @return transfer
   */
  @javax.annotation.Nullable
  public InventoryTransfer getTransfer() {
    return transfer;
  }

  public void setTransfer(InventoryTransfer transfer) {
    this.transfer = transfer;
  }


  public InventoryChange type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Indicates how the inventory change is applied. See [InventoryChangeType](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryChangeType) for all possible values.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventoryChange inventoryChange = (InventoryChange) o;
    return Objects.equals(this.adjustment, inventoryChange.adjustment) &&
        Objects.equals(this.measurementUnit, inventoryChange.measurementUnit) &&
        Objects.equals(this.measurementUnitId, inventoryChange.measurementUnitId) &&
        Objects.equals(this.physicalCount, inventoryChange.physicalCount) &&
        Objects.equals(this.transfer, inventoryChange.transfer) &&
        Objects.equals(this.type, inventoryChange.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adjustment, measurementUnit, measurementUnitId, physicalCount, transfer, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventoryChange {\n");
    sb.append("    adjustment: ").append(toIndentedString(adjustment)).append("\n");
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    measurementUnitId: ").append(toIndentedString(measurementUnitId)).append("\n");
    sb.append("    physicalCount: ").append(toIndentedString(physicalCount)).append("\n");
    sb.append("    transfer: ").append(toIndentedString(transfer)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adjustment");
    openapiFields.add("measurement_unit");
    openapiFields.add("measurement_unit_id");
    openapiFields.add("physical_count");
    openapiFields.add("transfer");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InventoryChange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InventoryChange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InventoryChange is not found in the empty JSON string", InventoryChange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InventoryChange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InventoryChange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adjustment`
      if (jsonObj.get("adjustment") != null && !jsonObj.get("adjustment").isJsonNull()) {
        InventoryAdjustment.validateJsonElement(jsonObj.get("adjustment"));
      }
      // validate the optional field `measurement_unit`
      if (jsonObj.get("measurement_unit") != null && !jsonObj.get("measurement_unit").isJsonNull()) {
        CatalogMeasurementUnit.validateJsonElement(jsonObj.get("measurement_unit"));
      }
      if ((jsonObj.get("measurement_unit_id") != null && !jsonObj.get("measurement_unit_id").isJsonNull()) && !jsonObj.get("measurement_unit_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurement_unit_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurement_unit_id").toString()));
      }
      // validate the optional field `physical_count`
      if (jsonObj.get("physical_count") != null && !jsonObj.get("physical_count").isJsonNull()) {
        InventoryPhysicalCount.validateJsonElement(jsonObj.get("physical_count"));
      }
      // validate the optional field `transfer`
      if (jsonObj.get("transfer") != null && !jsonObj.get("transfer").isJsonNull()) {
        InventoryTransfer.validateJsonElement(jsonObj.get("transfer"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InventoryChange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InventoryChange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InventoryChange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InventoryChange.class));

       return (TypeAdapter<T>) new TypeAdapter<InventoryChange>() {
           @Override
           public void write(JsonWriter out, InventoryChange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InventoryChange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InventoryChange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InventoryChange
   * @throws IOException if the JSON string is invalid with respect to InventoryChange
   */
  public static InventoryChange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InventoryChange.class);
  }

  /**
   * Convert an instance of InventoryChange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

