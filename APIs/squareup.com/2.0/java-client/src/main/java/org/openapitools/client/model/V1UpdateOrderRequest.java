/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V1UpdateOrderRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V1UpdateOrderRequest {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_CANCELED_NOTE = "canceled_note";
  @SerializedName(SERIALIZED_NAME_CANCELED_NOTE)
  private String canceledNote;

  public static final String SERIALIZED_NAME_COMPLETED_NOTE = "completed_note";
  @SerializedName(SERIALIZED_NAME_COMPLETED_NOTE)
  private String completedNote;

  public static final String SERIALIZED_NAME_REFUNDED_NOTE = "refunded_note";
  @SerializedName(SERIALIZED_NAME_REFUNDED_NOTE)
  private String refundedNote;

  public static final String SERIALIZED_NAME_SHIPPED_TRACKING_NUMBER = "shipped_tracking_number";
  @SerializedName(SERIALIZED_NAME_SHIPPED_TRACKING_NUMBER)
  private String shippedTrackingNumber;

  public V1UpdateOrderRequest() {
  }

  public V1UpdateOrderRequest action(String action) {
    this.action = action;
    return this;
  }

  /**
   * The action to perform on the order (COMPLETE, CANCEL, or REFUND).
   * @return action
   */
  @javax.annotation.Nonnull
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public V1UpdateOrderRequest canceledNote(String canceledNote) {
    this.canceledNote = canceledNote;
    return this;
  }

  /**
   * A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.
   * @return canceledNote
   */
  @javax.annotation.Nullable
  public String getCanceledNote() {
    return canceledNote;
  }

  public void setCanceledNote(String canceledNote) {
    this.canceledNote = canceledNote;
  }


  public V1UpdateOrderRequest completedNote(String completedNote) {
    this.completedNote = completedNote;
    return this;
  }

  /**
   * A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.
   * @return completedNote
   */
  @javax.annotation.Nullable
  public String getCompletedNote() {
    return completedNote;
  }

  public void setCompletedNote(String completedNote) {
    this.completedNote = completedNote;
  }


  public V1UpdateOrderRequest refundedNote(String refundedNote) {
    this.refundedNote = refundedNote;
    return this;
  }

  /**
   * A merchant-specified note about the refunding of the order. Only valid if action is REFUND.
   * @return refundedNote
   */
  @javax.annotation.Nullable
  public String getRefundedNote() {
    return refundedNote;
  }

  public void setRefundedNote(String refundedNote) {
    this.refundedNote = refundedNote;
  }


  public V1UpdateOrderRequest shippedTrackingNumber(String shippedTrackingNumber) {
    this.shippedTrackingNumber = shippedTrackingNumber;
    return this;
  }

  /**
   * The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.
   * @return shippedTrackingNumber
   */
  @javax.annotation.Nullable
  public String getShippedTrackingNumber() {
    return shippedTrackingNumber;
  }

  public void setShippedTrackingNumber(String shippedTrackingNumber) {
    this.shippedTrackingNumber = shippedTrackingNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1UpdateOrderRequest v1UpdateOrderRequest = (V1UpdateOrderRequest) o;
    return Objects.equals(this.action, v1UpdateOrderRequest.action) &&
        Objects.equals(this.canceledNote, v1UpdateOrderRequest.canceledNote) &&
        Objects.equals(this.completedNote, v1UpdateOrderRequest.completedNote) &&
        Objects.equals(this.refundedNote, v1UpdateOrderRequest.refundedNote) &&
        Objects.equals(this.shippedTrackingNumber, v1UpdateOrderRequest.shippedTrackingNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, canceledNote, completedNote, refundedNote, shippedTrackingNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1UpdateOrderRequest {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    canceledNote: ").append(toIndentedString(canceledNote)).append("\n");
    sb.append("    completedNote: ").append(toIndentedString(completedNote)).append("\n");
    sb.append("    refundedNote: ").append(toIndentedString(refundedNote)).append("\n");
    sb.append("    shippedTrackingNumber: ").append(toIndentedString(shippedTrackingNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("canceled_note");
    openapiFields.add("completed_note");
    openapiFields.add("refunded_note");
    openapiFields.add("shipped_tracking_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1UpdateOrderRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1UpdateOrderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1UpdateOrderRequest is not found in the empty JSON string", V1UpdateOrderRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1UpdateOrderRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1UpdateOrderRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1UpdateOrderRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("canceled_note") != null && !jsonObj.get("canceled_note").isJsonNull()) && !jsonObj.get("canceled_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canceled_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canceled_note").toString()));
      }
      if ((jsonObj.get("completed_note") != null && !jsonObj.get("completed_note").isJsonNull()) && !jsonObj.get("completed_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completed_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completed_note").toString()));
      }
      if ((jsonObj.get("refunded_note") != null && !jsonObj.get("refunded_note").isJsonNull()) && !jsonObj.get("refunded_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refunded_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refunded_note").toString()));
      }
      if ((jsonObj.get("shipped_tracking_number") != null && !jsonObj.get("shipped_tracking_number").isJsonNull()) && !jsonObj.get("shipped_tracking_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipped_tracking_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipped_tracking_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1UpdateOrderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1UpdateOrderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1UpdateOrderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1UpdateOrderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<V1UpdateOrderRequest>() {
           @Override
           public void write(JsonWriter out, V1UpdateOrderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1UpdateOrderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1UpdateOrderRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1UpdateOrderRequest
   * @throws IOException if the JSON string is invalid with respect to V1UpdateOrderRequest
   */
  public static V1UpdateOrderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1UpdateOrderRequest.class);
  }

  /**
   * Convert an instance of V1UpdateOrderRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

