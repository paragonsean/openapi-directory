/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LoyaltyAccountExpiringPointDeadline;
import org.openapitools.client.model.LoyaltyAccountMapping;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a loyalty account. For more information, see [Manage Loyalty Accounts Using the Loyalty API](https://developer.squareup.com/docs/loyalty-api/overview).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoyaltyAccount {
  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Integer balance;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_ENROLLED_AT = "enrolled_at";
  @SerializedName(SERIALIZED_NAME_ENROLLED_AT)
  private String enrolledAt;

  public static final String SERIALIZED_NAME_EXPIRING_POINT_DEADLINES = "expiring_point_deadlines";
  @SerializedName(SERIALIZED_NAME_EXPIRING_POINT_DEADLINES)
  private List<LoyaltyAccountExpiringPointDeadline> expiringPointDeadlines = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LIFETIME_POINTS = "lifetime_points";
  @SerializedName(SERIALIZED_NAME_LIFETIME_POINTS)
  private Integer lifetimePoints;

  public static final String SERIALIZED_NAME_MAPPING = "mapping";
  @SerializedName(SERIALIZED_NAME_MAPPING)
  private LoyaltyAccountMapping mapping;

  public static final String SERIALIZED_NAME_PROGRAM_ID = "program_id";
  @SerializedName(SERIALIZED_NAME_PROGRAM_ID)
  private String programId;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public LoyaltyAccount() {
  }

  public LoyaltyAccount balance(Integer balance) {
    this.balance = balance;
    return this;
  }

  /**
   * The available point balance in the loyalty account. If points are scheduled to expire, they are listed in the &#x60;expiring_point_deadlines&#x60; field.  Your application should be able to handle loyalty accounts that have a negative point balance (&#x60;balance&#x60; is less than 0). This might occur if a seller makes a manual adjustment or as a result of a refund or exchange.
   * @return balance
   */
  @javax.annotation.Nullable
  public Integer getBalance() {
    return balance;
  }

  public void setBalance(Integer balance) {
    this.balance = balance;
  }


  public LoyaltyAccount createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The timestamp when the loyalty account was created, in RFC 3339 format.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public LoyaltyAccount customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * The Square-assigned ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) that is associated with the account.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public LoyaltyAccount enrolledAt(String enrolledAt) {
    this.enrolledAt = enrolledAt;
    return this;
  }

  /**
   * The timestamp when enrollment occurred, in RFC 3339 format.
   * @return enrolledAt
   */
  @javax.annotation.Nullable
  public String getEnrolledAt() {
    return enrolledAt;
  }

  public void setEnrolledAt(String enrolledAt) {
    this.enrolledAt = enrolledAt;
  }


  public LoyaltyAccount expiringPointDeadlines(List<LoyaltyAccountExpiringPointDeadline> expiringPointDeadlines) {
    this.expiringPointDeadlines = expiringPointDeadlines;
    return this;
  }

  public LoyaltyAccount addExpiringPointDeadlinesItem(LoyaltyAccountExpiringPointDeadline expiringPointDeadlinesItem) {
    if (this.expiringPointDeadlines == null) {
      this.expiringPointDeadlines = new ArrayList<>();
    }
    this.expiringPointDeadlines.add(expiringPointDeadlinesItem);
    return this;
  }

  /**
   * The schedule for when points expire in the loyalty account balance. This field is present only if the account has points that are scheduled to expire.   The total number of points in this field equals the number of points in the &#x60;balance&#x60; field.
   * @return expiringPointDeadlines
   */
  @javax.annotation.Nullable
  public List<LoyaltyAccountExpiringPointDeadline> getExpiringPointDeadlines() {
    return expiringPointDeadlines;
  }

  public void setExpiringPointDeadlines(List<LoyaltyAccountExpiringPointDeadline> expiringPointDeadlines) {
    this.expiringPointDeadlines = expiringPointDeadlines;
  }


  public LoyaltyAccount id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Square-assigned ID of the loyalty account.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public LoyaltyAccount lifetimePoints(Integer lifetimePoints) {
    this.lifetimePoints = lifetimePoints;
    return this;
  }

  /**
   * The total points accrued during the lifetime of the account.
   * minimum: 0
   * @return lifetimePoints
   */
  @javax.annotation.Nullable
  public Integer getLifetimePoints() {
    return lifetimePoints;
  }

  public void setLifetimePoints(Integer lifetimePoints) {
    this.lifetimePoints = lifetimePoints;
  }


  public LoyaltyAccount mapping(LoyaltyAccountMapping mapping) {
    this.mapping = mapping;
    return this;
  }

  /**
   * Get mapping
   * @return mapping
   */
  @javax.annotation.Nullable
  public LoyaltyAccountMapping getMapping() {
    return mapping;
  }

  public void setMapping(LoyaltyAccountMapping mapping) {
    this.mapping = mapping;
  }


  public LoyaltyAccount programId(String programId) {
    this.programId = programId;
    return this;
  }

  /**
   * The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) to which the account belongs.
   * @return programId
   */
  @javax.annotation.Nonnull
  public String getProgramId() {
    return programId;
  }

  public void setProgramId(String programId) {
    this.programId = programId;
  }


  public LoyaltyAccount updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The timestamp when the loyalty account was last updated, in RFC 3339 format.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoyaltyAccount loyaltyAccount = (LoyaltyAccount) o;
    return Objects.equals(this.balance, loyaltyAccount.balance) &&
        Objects.equals(this.createdAt, loyaltyAccount.createdAt) &&
        Objects.equals(this.customerId, loyaltyAccount.customerId) &&
        Objects.equals(this.enrolledAt, loyaltyAccount.enrolledAt) &&
        Objects.equals(this.expiringPointDeadlines, loyaltyAccount.expiringPointDeadlines) &&
        Objects.equals(this.id, loyaltyAccount.id) &&
        Objects.equals(this.lifetimePoints, loyaltyAccount.lifetimePoints) &&
        Objects.equals(this.mapping, loyaltyAccount.mapping) &&
        Objects.equals(this.programId, loyaltyAccount.programId) &&
        Objects.equals(this.updatedAt, loyaltyAccount.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balance, createdAt, customerId, enrolledAt, expiringPointDeadlines, id, lifetimePoints, mapping, programId, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoyaltyAccount {\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    enrolledAt: ").append(toIndentedString(enrolledAt)).append("\n");
    sb.append("    expiringPointDeadlines: ").append(toIndentedString(expiringPointDeadlines)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lifetimePoints: ").append(toIndentedString(lifetimePoints)).append("\n");
    sb.append("    mapping: ").append(toIndentedString(mapping)).append("\n");
    sb.append("    programId: ").append(toIndentedString(programId)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balance");
    openapiFields.add("created_at");
    openapiFields.add("customer_id");
    openapiFields.add("enrolled_at");
    openapiFields.add("expiring_point_deadlines");
    openapiFields.add("id");
    openapiFields.add("lifetime_points");
    openapiFields.add("mapping");
    openapiFields.add("program_id");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("program_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoyaltyAccount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoyaltyAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoyaltyAccount is not found in the empty JSON string", LoyaltyAccount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoyaltyAccount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoyaltyAccount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LoyaltyAccount.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if ((jsonObj.get("enrolled_at") != null && !jsonObj.get("enrolled_at").isJsonNull()) && !jsonObj.get("enrolled_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrolled_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrolled_at").toString()));
      }
      if (jsonObj.get("expiring_point_deadlines") != null && !jsonObj.get("expiring_point_deadlines").isJsonNull()) {
        JsonArray jsonArrayexpiringPointDeadlines = jsonObj.getAsJsonArray("expiring_point_deadlines");
        if (jsonArrayexpiringPointDeadlines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("expiring_point_deadlines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `expiring_point_deadlines` to be an array in the JSON string but got `%s`", jsonObj.get("expiring_point_deadlines").toString()));
          }

          // validate the optional field `expiring_point_deadlines` (array)
          for (int i = 0; i < jsonArrayexpiringPointDeadlines.size(); i++) {
            LoyaltyAccountExpiringPointDeadline.validateJsonElement(jsonArrayexpiringPointDeadlines.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `mapping`
      if (jsonObj.get("mapping") != null && !jsonObj.get("mapping").isJsonNull()) {
        LoyaltyAccountMapping.validateJsonElement(jsonObj.get("mapping"));
      }
      if (!jsonObj.get("program_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `program_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("program_id").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoyaltyAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoyaltyAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoyaltyAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoyaltyAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<LoyaltyAccount>() {
           @Override
           public void write(JsonWriter out, LoyaltyAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoyaltyAccount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoyaltyAccount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoyaltyAccount
   * @throws IOException if the JSON string is invalid with respect to LoyaltyAccount
   */
  public static LoyaltyAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoyaltyAccount.class);
  }

  /**
   * Convert an instance of LoyaltyAccount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

