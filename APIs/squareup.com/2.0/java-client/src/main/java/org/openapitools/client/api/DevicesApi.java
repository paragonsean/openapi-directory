/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateDeviceCodeRequest;
import org.openapitools.client.model.CreateDeviceCodeResponse;
import org.openapitools.client.model.GetDeviceCodeResponse;
import org.openapitools.client.model.ListDeviceCodesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DevicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DevicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DevicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDeviceCode
     * @param createDeviceCodeRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeviceCodeCall(CreateDeviceCodeRequest createDeviceCodeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDeviceCodeRequest;

        // create path and map variables
        String localVarPath = "/v2/devices/codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDeviceCodeValidateBeforeCall(CreateDeviceCodeRequest createDeviceCodeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDeviceCodeRequest' is set
        if (createDeviceCodeRequest == null) {
            throw new ApiException("Missing the required parameter 'createDeviceCodeRequest' when calling createDeviceCode(Async)");
        }

        return createDeviceCodeCall(createDeviceCodeRequest, _callback);

    }

    /**
     * CreateDeviceCode
     * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
     * @param createDeviceCodeRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return CreateDeviceCodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateDeviceCodeResponse createDeviceCode(CreateDeviceCodeRequest createDeviceCodeRequest) throws ApiException {
        ApiResponse<CreateDeviceCodeResponse> localVarResp = createDeviceCodeWithHttpInfo(createDeviceCodeRequest);
        return localVarResp.getData();
    }

    /**
     * CreateDeviceCode
     * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
     * @param createDeviceCodeRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;CreateDeviceCodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDeviceCodeResponse> createDeviceCodeWithHttpInfo(CreateDeviceCodeRequest createDeviceCodeRequest) throws ApiException {
        okhttp3.Call localVarCall = createDeviceCodeValidateBeforeCall(createDeviceCodeRequest, null);
        Type localVarReturnType = new TypeToken<CreateDeviceCodeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateDeviceCode (asynchronously)
     * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
     * @param createDeviceCodeRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeviceCodeAsync(CreateDeviceCodeRequest createDeviceCodeRequest, final ApiCallback<CreateDeviceCodeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDeviceCodeValidateBeforeCall(createDeviceCodeRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateDeviceCodeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeviceCode
     * @param id The unique identifier for the device code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCodeCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/devices/codes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceCodeValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDeviceCode(Async)");
        }

        return getDeviceCodeCall(id, _callback);

    }

    /**
     * GetDeviceCode
     * Retrieves DeviceCode with the associated ID.
     * @param id The unique identifier for the device code. (required)
     * @return GetDeviceCodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceCodeResponse getDeviceCode(String id) throws ApiException {
        ApiResponse<GetDeviceCodeResponse> localVarResp = getDeviceCodeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * GetDeviceCode
     * Retrieves DeviceCode with the associated ID.
     * @param id The unique identifier for the device code. (required)
     * @return ApiResponse&lt;GetDeviceCodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceCodeResponse> getDeviceCodeWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getDeviceCodeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetDeviceCodeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetDeviceCode (asynchronously)
     * Retrieves DeviceCode with the associated ID.
     * @param id The unique identifier for the device code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCodeAsync(String id, final ApiCallback<GetDeviceCodeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceCodeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceCodeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDeviceCodes
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information. (optional)
     * @param locationId If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty. (optional)
     * @param productType If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty. (optional)
     * @param status If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDeviceCodesCall(String cursor, String locationId, String productType, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/devices/codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_type", productType));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDeviceCodesValidateBeforeCall(String cursor, String locationId, String productType, String status, final ApiCallback _callback) throws ApiException {
        return listDeviceCodesCall(cursor, locationId, productType, status, _callback);

    }

    /**
     * ListDeviceCodes
     * Lists all DeviceCodes associated with the merchant.
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information. (optional)
     * @param locationId If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty. (optional)
     * @param productType If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty. (optional)
     * @param status If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty. (optional)
     * @return ListDeviceCodesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListDeviceCodesResponse listDeviceCodes(String cursor, String locationId, String productType, String status) throws ApiException {
        ApiResponse<ListDeviceCodesResponse> localVarResp = listDeviceCodesWithHttpInfo(cursor, locationId, productType, status);
        return localVarResp.getData();
    }

    /**
     * ListDeviceCodes
     * Lists all DeviceCodes associated with the merchant.
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information. (optional)
     * @param locationId If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty. (optional)
     * @param productType If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty. (optional)
     * @param status If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty. (optional)
     * @return ApiResponse&lt;ListDeviceCodesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDeviceCodesResponse> listDeviceCodesWithHttpInfo(String cursor, String locationId, String productType, String status) throws ApiException {
        okhttp3.Call localVarCall = listDeviceCodesValidateBeforeCall(cursor, locationId, productType, status, null);
        Type localVarReturnType = new TypeToken<ListDeviceCodesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListDeviceCodes (asynchronously)
     * Lists all DeviceCodes associated with the merchant.
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information. (optional)
     * @param locationId If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty. (optional)
     * @param productType If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty. (optional)
     * @param status If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDeviceCodesAsync(String cursor, String locationId, String productType, String status, final ApiCallback<ListDeviceCodesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDeviceCodesValidateBeforeCall(cursor, locationId, productType, status, _callback);
        Type localVarReturnType = new TypeToken<ListDeviceCodesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
