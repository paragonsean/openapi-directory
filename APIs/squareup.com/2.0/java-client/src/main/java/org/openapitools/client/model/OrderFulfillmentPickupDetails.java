/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OrderFulfillmentPickupDetailsCurbsidePickupDetails;
import org.openapitools.client.model.OrderFulfillmentRecipient;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains details necessary to fulfill a pickup order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderFulfillmentPickupDetails {
  public static final String SERIALIZED_NAME_ACCEPTED_AT = "accepted_at";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_AT)
  private String acceptedAt;

  public static final String SERIALIZED_NAME_AUTO_COMPLETE_DURATION = "auto_complete_duration";
  @SerializedName(SERIALIZED_NAME_AUTO_COMPLETE_DURATION)
  private String autoCompleteDuration;

  public static final String SERIALIZED_NAME_CANCEL_REASON = "cancel_reason";
  @SerializedName(SERIALIZED_NAME_CANCEL_REASON)
  private String cancelReason;

  public static final String SERIALIZED_NAME_CANCELED_AT = "canceled_at";
  @SerializedName(SERIALIZED_NAME_CANCELED_AT)
  private String canceledAt;

  public static final String SERIALIZED_NAME_CURBSIDE_PICKUP_DETAILS = "curbside_pickup_details";
  @SerializedName(SERIALIZED_NAME_CURBSIDE_PICKUP_DETAILS)
  private OrderFulfillmentPickupDetailsCurbsidePickupDetails curbsidePickupDetails;

  public static final String SERIALIZED_NAME_EXPIRED_AT = "expired_at";
  @SerializedName(SERIALIZED_NAME_EXPIRED_AT)
  private String expiredAt;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_IS_CURBSIDE_PICKUP = "is_curbside_pickup";
  @SerializedName(SERIALIZED_NAME_IS_CURBSIDE_PICKUP)
  private Boolean isCurbsidePickup;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_PICKED_UP_AT = "picked_up_at";
  @SerializedName(SERIALIZED_NAME_PICKED_UP_AT)
  private String pickedUpAt;

  public static final String SERIALIZED_NAME_PICKUP_AT = "pickup_at";
  @SerializedName(SERIALIZED_NAME_PICKUP_AT)
  private String pickupAt;

  public static final String SERIALIZED_NAME_PICKUP_WINDOW_DURATION = "pickup_window_duration";
  @SerializedName(SERIALIZED_NAME_PICKUP_WINDOW_DURATION)
  private String pickupWindowDuration;

  public static final String SERIALIZED_NAME_PLACED_AT = "placed_at";
  @SerializedName(SERIALIZED_NAME_PLACED_AT)
  private String placedAt;

  public static final String SERIALIZED_NAME_PREP_TIME_DURATION = "prep_time_duration";
  @SerializedName(SERIALIZED_NAME_PREP_TIME_DURATION)
  private String prepTimeDuration;

  public static final String SERIALIZED_NAME_READY_AT = "ready_at";
  @SerializedName(SERIALIZED_NAME_READY_AT)
  private String readyAt;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private OrderFulfillmentRecipient recipient;

  public static final String SERIALIZED_NAME_REJECTED_AT = "rejected_at";
  @SerializedName(SERIALIZED_NAME_REJECTED_AT)
  private String rejectedAt;

  public static final String SERIALIZED_NAME_SCHEDULE_TYPE = "schedule_type";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TYPE)
  private String scheduleType;

  public OrderFulfillmentPickupDetails() {
  }

  public OrderFulfillmentPickupDetails acceptedAt(String acceptedAt) {
    this.acceptedAt = acceptedAt;
    return this;
  }

  /**
   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)  indicating when the fulfillment was accepted. The timestamp must be in RFC 3339 format (for example, \&quot;2016-09-04T23:59:33.123Z\&quot;).
   * @return acceptedAt
   */
  @javax.annotation.Nullable
  public String getAcceptedAt() {
    return acceptedAt;
  }

  public void setAcceptedAt(String acceptedAt) {
    this.acceptedAt = acceptedAt;
  }


  public OrderFulfillmentPickupDetails autoCompleteDuration(String autoCompleteDuration) {
    this.autoCompleteDuration = autoCompleteDuration;
    return this;
  }

  /**
   * The duration of time after which an open and accepted pickup fulfillment is automatically moved to the &#x60;COMPLETED&#x60; state. The duration must be in RFC 3339 format (for example, \&quot;P1W3D\&quot;).  If not set, this pickup fulfillment remains accepted until it is canceled or completed.
   * @return autoCompleteDuration
   */
  @javax.annotation.Nullable
  public String getAutoCompleteDuration() {
    return autoCompleteDuration;
  }

  public void setAutoCompleteDuration(String autoCompleteDuration) {
    this.autoCompleteDuration = autoCompleteDuration;
  }


  public OrderFulfillmentPickupDetails cancelReason(String cancelReason) {
    this.cancelReason = cancelReason;
    return this;
  }

  /**
   * A description of why the pickup was canceled. The maximum length: 100 characters.
   * @return cancelReason
   */
  @javax.annotation.Nullable
  public String getCancelReason() {
    return cancelReason;
  }

  public void setCancelReason(String cancelReason) {
    this.cancelReason = cancelReason;
  }


  public OrderFulfillmentPickupDetails canceledAt(String canceledAt) {
    this.canceledAt = canceledAt;
    return this;
  }

  /**
   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)  indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format (for example, \&quot;2016-09-04T23:59:33.123Z\&quot;).
   * @return canceledAt
   */
  @javax.annotation.Nullable
  public String getCanceledAt() {
    return canceledAt;
  }

  public void setCanceledAt(String canceledAt) {
    this.canceledAt = canceledAt;
  }


  public OrderFulfillmentPickupDetails curbsidePickupDetails(OrderFulfillmentPickupDetailsCurbsidePickupDetails curbsidePickupDetails) {
    this.curbsidePickupDetails = curbsidePickupDetails;
    return this;
  }

  /**
   * Get curbsidePickupDetails
   * @return curbsidePickupDetails
   */
  @javax.annotation.Nullable
  public OrderFulfillmentPickupDetailsCurbsidePickupDetails getCurbsidePickupDetails() {
    return curbsidePickupDetails;
  }

  public void setCurbsidePickupDetails(OrderFulfillmentPickupDetailsCurbsidePickupDetails curbsidePickupDetails) {
    this.curbsidePickupDetails = curbsidePickupDetails;
  }


  public OrderFulfillmentPickupDetails expiredAt(String expiredAt) {
    this.expiredAt = expiredAt;
    return this;
  }

  /**
   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) indicating when the fulfillment expired. The timestamp must be in RFC 3339 format (for example, \&quot;2016-09-04T23:59:33.123Z\&quot;).
   * @return expiredAt
   */
  @javax.annotation.Nullable
  public String getExpiredAt() {
    return expiredAt;
  }

  public void setExpiredAt(String expiredAt) {
    this.expiredAt = expiredAt;
  }


  public OrderFulfillmentPickupDetails expiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)  indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format (for example, \&quot;2016-09-04T23:59:33.123Z\&quot;). The expiration time can only be set up to 7 days in the future. If &#x60;expires_at&#x60; is not set, this pickup fulfillment is automatically accepted when  placed.
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public String getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public OrderFulfillmentPickupDetails isCurbsidePickup(Boolean isCurbsidePickup) {
    this.isCurbsidePickup = isCurbsidePickup;
    return this;
  }

  /**
   * If set to &#x60;true&#x60;, indicates that this pickup order is for curbside pickup, not in-store pickup.
   * @return isCurbsidePickup
   */
  @javax.annotation.Nullable
  public Boolean getIsCurbsidePickup() {
    return isCurbsidePickup;
  }

  public void setIsCurbsidePickup(Boolean isCurbsidePickup) {
    this.isCurbsidePickup = isCurbsidePickup;
  }


  public OrderFulfillmentPickupDetails note(String note) {
    this.note = note;
    return this;
  }

  /**
   * A note meant to provide additional instructions about the pickup fulfillment displayed in the Square Point of Sale application and set by the API.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public OrderFulfillmentPickupDetails pickedUpAt(String pickedUpAt) {
    this.pickedUpAt = pickedUpAt;
    return this;
  }

  /**
   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format (for example, \&quot;2016-09-04T23:59:33.123Z\&quot;).
   * @return pickedUpAt
   */
  @javax.annotation.Nullable
  public String getPickedUpAt() {
    return pickedUpAt;
  }

  public void setPickedUpAt(String pickedUpAt) {
    this.pickedUpAt = pickedUpAt;
  }


  public OrderFulfillmentPickupDetails pickupAt(String pickupAt) {
    this.pickupAt = pickupAt;
    return this;
  }

  /**
   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)  that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g.,  \&quot;2016-09-04T23:59:33.123Z\&quot;.  For fulfillments with the schedule type &#x60;ASAP&#x60;, this is automatically set to the current time plus the expected duration to prepare the fulfillment.
   * @return pickupAt
   */
  @javax.annotation.Nullable
  public String getPickupAt() {
    return pickupAt;
  }

  public void setPickupAt(String pickupAt) {
    this.pickupAt = pickupAt;
  }


  public OrderFulfillmentPickupDetails pickupWindowDuration(String pickupWindowDuration) {
    this.pickupWindowDuration = pickupWindowDuration;
    return this;
  }

  /**
   * The window of time in which the order should be picked up after the &#x60;pickup_at&#x60; timestamp. Must be in RFC 3339 duration format, e.g., \&quot;P1W3D\&quot;. Can be used as an informational guideline for merchants.
   * @return pickupWindowDuration
   */
  @javax.annotation.Nullable
  public String getPickupWindowDuration() {
    return pickupWindowDuration;
  }

  public void setPickupWindowDuration(String pickupWindowDuration) {
    this.pickupWindowDuration = pickupWindowDuration;
  }


  public OrderFulfillmentPickupDetails placedAt(String placedAt) {
    this.placedAt = placedAt;
    return this;
  }

  /**
   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)  indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format (for example, \&quot;2016-09-04T23:59:33.123Z\&quot;).
   * @return placedAt
   */
  @javax.annotation.Nullable
  public String getPlacedAt() {
    return placedAt;
  }

  public void setPlacedAt(String placedAt) {
    this.placedAt = placedAt;
  }


  public OrderFulfillmentPickupDetails prepTimeDuration(String prepTimeDuration) {
    this.prepTimeDuration = prepTimeDuration;
    return this;
  }

  /**
   * The duration of time it takes to prepare this fulfillment. The duration must be in RFC 3339 format (for example, \&quot;P1W3D\&quot;).
   * @return prepTimeDuration
   */
  @javax.annotation.Nullable
  public String getPrepTimeDuration() {
    return prepTimeDuration;
  }

  public void setPrepTimeDuration(String prepTimeDuration) {
    this.prepTimeDuration = prepTimeDuration;
  }


  public OrderFulfillmentPickupDetails readyAt(String readyAt) {
    this.readyAt = readyAt;
    return this;
  }

  /**
   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)  indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format (for example, \&quot;2016-09-04T23:59:33.123Z\&quot;).
   * @return readyAt
   */
  @javax.annotation.Nullable
  public String getReadyAt() {
    return readyAt;
  }

  public void setReadyAt(String readyAt) {
    this.readyAt = readyAt;
  }


  public OrderFulfillmentPickupDetails recipient(OrderFulfillmentRecipient recipient) {
    this.recipient = recipient;
    return this;
  }

  /**
   * Get recipient
   * @return recipient
   */
  @javax.annotation.Nullable
  public OrderFulfillmentRecipient getRecipient() {
    return recipient;
  }

  public void setRecipient(OrderFulfillmentRecipient recipient) {
    this.recipient = recipient;
  }


  public OrderFulfillmentPickupDetails rejectedAt(String rejectedAt) {
    this.rejectedAt = rejectedAt;
    return this;
  }

  /**
   * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)  indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format (for example, \&quot;2016-09-04T23:59:33.123Z\&quot;).
   * @return rejectedAt
   */
  @javax.annotation.Nullable
  public String getRejectedAt() {
    return rejectedAt;
  }

  public void setRejectedAt(String rejectedAt) {
    this.rejectedAt = rejectedAt;
  }


  public OrderFulfillmentPickupDetails scheduleType(String scheduleType) {
    this.scheduleType = scheduleType;
    return this;
  }

  /**
   * The schedule type of the pickup fulfillment. Defaults to &#x60;SCHEDULED&#x60;.
   * @return scheduleType
   */
  @javax.annotation.Nullable
  public String getScheduleType() {
    return scheduleType;
  }

  public void setScheduleType(String scheduleType) {
    this.scheduleType = scheduleType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderFulfillmentPickupDetails orderFulfillmentPickupDetails = (OrderFulfillmentPickupDetails) o;
    return Objects.equals(this.acceptedAt, orderFulfillmentPickupDetails.acceptedAt) &&
        Objects.equals(this.autoCompleteDuration, orderFulfillmentPickupDetails.autoCompleteDuration) &&
        Objects.equals(this.cancelReason, orderFulfillmentPickupDetails.cancelReason) &&
        Objects.equals(this.canceledAt, orderFulfillmentPickupDetails.canceledAt) &&
        Objects.equals(this.curbsidePickupDetails, orderFulfillmentPickupDetails.curbsidePickupDetails) &&
        Objects.equals(this.expiredAt, orderFulfillmentPickupDetails.expiredAt) &&
        Objects.equals(this.expiresAt, orderFulfillmentPickupDetails.expiresAt) &&
        Objects.equals(this.isCurbsidePickup, orderFulfillmentPickupDetails.isCurbsidePickup) &&
        Objects.equals(this.note, orderFulfillmentPickupDetails.note) &&
        Objects.equals(this.pickedUpAt, orderFulfillmentPickupDetails.pickedUpAt) &&
        Objects.equals(this.pickupAt, orderFulfillmentPickupDetails.pickupAt) &&
        Objects.equals(this.pickupWindowDuration, orderFulfillmentPickupDetails.pickupWindowDuration) &&
        Objects.equals(this.placedAt, orderFulfillmentPickupDetails.placedAt) &&
        Objects.equals(this.prepTimeDuration, orderFulfillmentPickupDetails.prepTimeDuration) &&
        Objects.equals(this.readyAt, orderFulfillmentPickupDetails.readyAt) &&
        Objects.equals(this.recipient, orderFulfillmentPickupDetails.recipient) &&
        Objects.equals(this.rejectedAt, orderFulfillmentPickupDetails.rejectedAt) &&
        Objects.equals(this.scheduleType, orderFulfillmentPickupDetails.scheduleType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedAt, autoCompleteDuration, cancelReason, canceledAt, curbsidePickupDetails, expiredAt, expiresAt, isCurbsidePickup, note, pickedUpAt, pickupAt, pickupWindowDuration, placedAt, prepTimeDuration, readyAt, recipient, rejectedAt, scheduleType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderFulfillmentPickupDetails {\n");
    sb.append("    acceptedAt: ").append(toIndentedString(acceptedAt)).append("\n");
    sb.append("    autoCompleteDuration: ").append(toIndentedString(autoCompleteDuration)).append("\n");
    sb.append("    cancelReason: ").append(toIndentedString(cancelReason)).append("\n");
    sb.append("    canceledAt: ").append(toIndentedString(canceledAt)).append("\n");
    sb.append("    curbsidePickupDetails: ").append(toIndentedString(curbsidePickupDetails)).append("\n");
    sb.append("    expiredAt: ").append(toIndentedString(expiredAt)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    isCurbsidePickup: ").append(toIndentedString(isCurbsidePickup)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    pickedUpAt: ").append(toIndentedString(pickedUpAt)).append("\n");
    sb.append("    pickupAt: ").append(toIndentedString(pickupAt)).append("\n");
    sb.append("    pickupWindowDuration: ").append(toIndentedString(pickupWindowDuration)).append("\n");
    sb.append("    placedAt: ").append(toIndentedString(placedAt)).append("\n");
    sb.append("    prepTimeDuration: ").append(toIndentedString(prepTimeDuration)).append("\n");
    sb.append("    readyAt: ").append(toIndentedString(readyAt)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    rejectedAt: ").append(toIndentedString(rejectedAt)).append("\n");
    sb.append("    scheduleType: ").append(toIndentedString(scheduleType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accepted_at");
    openapiFields.add("auto_complete_duration");
    openapiFields.add("cancel_reason");
    openapiFields.add("canceled_at");
    openapiFields.add("curbside_pickup_details");
    openapiFields.add("expired_at");
    openapiFields.add("expires_at");
    openapiFields.add("is_curbside_pickup");
    openapiFields.add("note");
    openapiFields.add("picked_up_at");
    openapiFields.add("pickup_at");
    openapiFields.add("pickup_window_duration");
    openapiFields.add("placed_at");
    openapiFields.add("prep_time_duration");
    openapiFields.add("ready_at");
    openapiFields.add("recipient");
    openapiFields.add("rejected_at");
    openapiFields.add("schedule_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderFulfillmentPickupDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderFulfillmentPickupDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderFulfillmentPickupDetails is not found in the empty JSON string", OrderFulfillmentPickupDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderFulfillmentPickupDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderFulfillmentPickupDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accepted_at") != null && !jsonObj.get("accepted_at").isJsonNull()) && !jsonObj.get("accepted_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accepted_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accepted_at").toString()));
      }
      if ((jsonObj.get("auto_complete_duration") != null && !jsonObj.get("auto_complete_duration").isJsonNull()) && !jsonObj.get("auto_complete_duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto_complete_duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auto_complete_duration").toString()));
      }
      if ((jsonObj.get("cancel_reason") != null && !jsonObj.get("cancel_reason").isJsonNull()) && !jsonObj.get("cancel_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancel_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancel_reason").toString()));
      }
      if ((jsonObj.get("canceled_at") != null && !jsonObj.get("canceled_at").isJsonNull()) && !jsonObj.get("canceled_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canceled_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canceled_at").toString()));
      }
      // validate the optional field `curbside_pickup_details`
      if (jsonObj.get("curbside_pickup_details") != null && !jsonObj.get("curbside_pickup_details").isJsonNull()) {
        OrderFulfillmentPickupDetailsCurbsidePickupDetails.validateJsonElement(jsonObj.get("curbside_pickup_details"));
      }
      if ((jsonObj.get("expired_at") != null && !jsonObj.get("expired_at").isJsonNull()) && !jsonObj.get("expired_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expired_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expired_at").toString()));
      }
      if ((jsonObj.get("expires_at") != null && !jsonObj.get("expires_at").isJsonNull()) && !jsonObj.get("expires_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_at").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("picked_up_at") != null && !jsonObj.get("picked_up_at").isJsonNull()) && !jsonObj.get("picked_up_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `picked_up_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("picked_up_at").toString()));
      }
      if ((jsonObj.get("pickup_at") != null && !jsonObj.get("pickup_at").isJsonNull()) && !jsonObj.get("pickup_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickup_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickup_at").toString()));
      }
      if ((jsonObj.get("pickup_window_duration") != null && !jsonObj.get("pickup_window_duration").isJsonNull()) && !jsonObj.get("pickup_window_duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickup_window_duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickup_window_duration").toString()));
      }
      if ((jsonObj.get("placed_at") != null && !jsonObj.get("placed_at").isJsonNull()) && !jsonObj.get("placed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placed_at").toString()));
      }
      if ((jsonObj.get("prep_time_duration") != null && !jsonObj.get("prep_time_duration").isJsonNull()) && !jsonObj.get("prep_time_duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prep_time_duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prep_time_duration").toString()));
      }
      if ((jsonObj.get("ready_at") != null && !jsonObj.get("ready_at").isJsonNull()) && !jsonObj.get("ready_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ready_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ready_at").toString()));
      }
      // validate the optional field `recipient`
      if (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonNull()) {
        OrderFulfillmentRecipient.validateJsonElement(jsonObj.get("recipient"));
      }
      if ((jsonObj.get("rejected_at") != null && !jsonObj.get("rejected_at").isJsonNull()) && !jsonObj.get("rejected_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejected_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rejected_at").toString()));
      }
      if ((jsonObj.get("schedule_type") != null && !jsonObj.get("schedule_type").isJsonNull()) && !jsonObj.get("schedule_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderFulfillmentPickupDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderFulfillmentPickupDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderFulfillmentPickupDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderFulfillmentPickupDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderFulfillmentPickupDetails>() {
           @Override
           public void write(JsonWriter out, OrderFulfillmentPickupDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderFulfillmentPickupDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderFulfillmentPickupDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderFulfillmentPickupDetails
   * @throws IOException if the JSON string is invalid with respect to OrderFulfillmentPickupDetails
   */
  public static OrderFulfillmentPickupDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderFulfillmentPickupDetails.class);
  }

  /**
   * Convert an instance of OrderFulfillmentPickupDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

