/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListCashDrawerShiftEventsResponse;
import org.openapitools.client.model.ListCashDrawerShiftsResponse;
import org.openapitools.client.model.RetrieveCashDrawerShiftResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CashDrawersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CashDrawersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CashDrawersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listCashDrawerShiftEvents
     * @param locationId The ID of the location to list cash drawer shifts for. (required)
     * @param shiftId The shift ID. (required)
     * @param limit Number of resources to be returned in a page of results (200 by default, 1000 max). (optional)
     * @param cursor Opaque cursor for fetching the next page of results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCashDrawerShiftEventsCall(String locationId, String shiftId, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cash-drawers/shifts/{shift_id}/events"
            .replace("{" + "shift_id" + "}", localVarApiClient.escapeString(shiftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCashDrawerShiftEventsValidateBeforeCall(String locationId, String shiftId, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling listCashDrawerShiftEvents(Async)");
        }

        // verify the required parameter 'shiftId' is set
        if (shiftId == null) {
            throw new ApiException("Missing the required parameter 'shiftId' when calling listCashDrawerShiftEvents(Async)");
        }

        return listCashDrawerShiftEventsCall(locationId, shiftId, limit, cursor, _callback);

    }

    /**
     * ListCashDrawerShiftEvents
     * Provides a paginated list of events for a single cash drawer shift.
     * @param locationId The ID of the location to list cash drawer shifts for. (required)
     * @param shiftId The shift ID. (required)
     * @param limit Number of resources to be returned in a page of results (200 by default, 1000 max). (optional)
     * @param cursor Opaque cursor for fetching the next page of results. (optional)
     * @return ListCashDrawerShiftEventsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListCashDrawerShiftEventsResponse listCashDrawerShiftEvents(String locationId, String shiftId, Integer limit, String cursor) throws ApiException {
        ApiResponse<ListCashDrawerShiftEventsResponse> localVarResp = listCashDrawerShiftEventsWithHttpInfo(locationId, shiftId, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * ListCashDrawerShiftEvents
     * Provides a paginated list of events for a single cash drawer shift.
     * @param locationId The ID of the location to list cash drawer shifts for. (required)
     * @param shiftId The shift ID. (required)
     * @param limit Number of resources to be returned in a page of results (200 by default, 1000 max). (optional)
     * @param cursor Opaque cursor for fetching the next page of results. (optional)
     * @return ApiResponse&lt;ListCashDrawerShiftEventsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCashDrawerShiftEventsResponse> listCashDrawerShiftEventsWithHttpInfo(String locationId, String shiftId, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listCashDrawerShiftEventsValidateBeforeCall(locationId, shiftId, limit, cursor, null);
        Type localVarReturnType = new TypeToken<ListCashDrawerShiftEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListCashDrawerShiftEvents (asynchronously)
     * Provides a paginated list of events for a single cash drawer shift.
     * @param locationId The ID of the location to list cash drawer shifts for. (required)
     * @param shiftId The shift ID. (required)
     * @param limit Number of resources to be returned in a page of results (200 by default, 1000 max). (optional)
     * @param cursor Opaque cursor for fetching the next page of results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCashDrawerShiftEventsAsync(String locationId, String shiftId, Integer limit, String cursor, final ApiCallback<ListCashDrawerShiftEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCashDrawerShiftEventsValidateBeforeCall(locationId, shiftId, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<ListCashDrawerShiftEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCashDrawerShifts
     * @param locationId The ID of the location to query for a list of cash drawer shifts. (required)
     * @param sortOrder The order in which cash drawer shifts are listed in the response, based on their opened_at field. Default value: ASC (optional)
     * @param beginTime The inclusive start time of the query on opened_at, in ISO 8601 format. (optional)
     * @param endTime The exclusive end date of the query on opened_at, in ISO 8601 format. (optional)
     * @param limit Number of cash drawer shift events in a page of results (200 by default, 1000 max). (optional)
     * @param cursor Opaque cursor for fetching the next page of results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCashDrawerShiftsCall(String locationId, String sortOrder, String beginTime, String endTime, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cash-drawers/shifts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (beginTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("begin_time", beginTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCashDrawerShiftsValidateBeforeCall(String locationId, String sortOrder, String beginTime, String endTime, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling listCashDrawerShifts(Async)");
        }

        return listCashDrawerShiftsCall(locationId, sortOrder, beginTime, endTime, limit, cursor, _callback);

    }

    /**
     * ListCashDrawerShifts
     * Provides the details for all of the cash drawer shifts for a location in a date range.
     * @param locationId The ID of the location to query for a list of cash drawer shifts. (required)
     * @param sortOrder The order in which cash drawer shifts are listed in the response, based on their opened_at field. Default value: ASC (optional)
     * @param beginTime The inclusive start time of the query on opened_at, in ISO 8601 format. (optional)
     * @param endTime The exclusive end date of the query on opened_at, in ISO 8601 format. (optional)
     * @param limit Number of cash drawer shift events in a page of results (200 by default, 1000 max). (optional)
     * @param cursor Opaque cursor for fetching the next page of results. (optional)
     * @return ListCashDrawerShiftsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListCashDrawerShiftsResponse listCashDrawerShifts(String locationId, String sortOrder, String beginTime, String endTime, Integer limit, String cursor) throws ApiException {
        ApiResponse<ListCashDrawerShiftsResponse> localVarResp = listCashDrawerShiftsWithHttpInfo(locationId, sortOrder, beginTime, endTime, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * ListCashDrawerShifts
     * Provides the details for all of the cash drawer shifts for a location in a date range.
     * @param locationId The ID of the location to query for a list of cash drawer shifts. (required)
     * @param sortOrder The order in which cash drawer shifts are listed in the response, based on their opened_at field. Default value: ASC (optional)
     * @param beginTime The inclusive start time of the query on opened_at, in ISO 8601 format. (optional)
     * @param endTime The exclusive end date of the query on opened_at, in ISO 8601 format. (optional)
     * @param limit Number of cash drawer shift events in a page of results (200 by default, 1000 max). (optional)
     * @param cursor Opaque cursor for fetching the next page of results. (optional)
     * @return ApiResponse&lt;ListCashDrawerShiftsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCashDrawerShiftsResponse> listCashDrawerShiftsWithHttpInfo(String locationId, String sortOrder, String beginTime, String endTime, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listCashDrawerShiftsValidateBeforeCall(locationId, sortOrder, beginTime, endTime, limit, cursor, null);
        Type localVarReturnType = new TypeToken<ListCashDrawerShiftsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListCashDrawerShifts (asynchronously)
     * Provides the details for all of the cash drawer shifts for a location in a date range.
     * @param locationId The ID of the location to query for a list of cash drawer shifts. (required)
     * @param sortOrder The order in which cash drawer shifts are listed in the response, based on their opened_at field. Default value: ASC (optional)
     * @param beginTime The inclusive start time of the query on opened_at, in ISO 8601 format. (optional)
     * @param endTime The exclusive end date of the query on opened_at, in ISO 8601 format. (optional)
     * @param limit Number of cash drawer shift events in a page of results (200 by default, 1000 max). (optional)
     * @param cursor Opaque cursor for fetching the next page of results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCashDrawerShiftsAsync(String locationId, String sortOrder, String beginTime, String endTime, Integer limit, String cursor, final ApiCallback<ListCashDrawerShiftsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCashDrawerShiftsValidateBeforeCall(locationId, sortOrder, beginTime, endTime, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<ListCashDrawerShiftsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveCashDrawerShift
     * @param locationId The ID of the location to retrieve cash drawer shifts from. (required)
     * @param shiftId The shift ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveCashDrawerShiftCall(String locationId, String shiftId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cash-drawers/shifts/{shift_id}"
            .replace("{" + "shift_id" + "}", localVarApiClient.escapeString(shiftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveCashDrawerShiftValidateBeforeCall(String locationId, String shiftId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling retrieveCashDrawerShift(Async)");
        }

        // verify the required parameter 'shiftId' is set
        if (shiftId == null) {
            throw new ApiException("Missing the required parameter 'shiftId' when calling retrieveCashDrawerShift(Async)");
        }

        return retrieveCashDrawerShiftCall(locationId, shiftId, _callback);

    }

    /**
     * RetrieveCashDrawerShift
     * Provides the summary details for a single cash drawer shift. See [ListCashDrawerShiftEvents](https://developer.squareup.com/reference/square_2021-08-18/cash-drawers-api/list-cash-drawer-shift-events) for a list of cash drawer shift events.
     * @param locationId The ID of the location to retrieve cash drawer shifts from. (required)
     * @param shiftId The shift ID. (required)
     * @return RetrieveCashDrawerShiftResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveCashDrawerShiftResponse retrieveCashDrawerShift(String locationId, String shiftId) throws ApiException {
        ApiResponse<RetrieveCashDrawerShiftResponse> localVarResp = retrieveCashDrawerShiftWithHttpInfo(locationId, shiftId);
        return localVarResp.getData();
    }

    /**
     * RetrieveCashDrawerShift
     * Provides the summary details for a single cash drawer shift. See [ListCashDrawerShiftEvents](https://developer.squareup.com/reference/square_2021-08-18/cash-drawers-api/list-cash-drawer-shift-events) for a list of cash drawer shift events.
     * @param locationId The ID of the location to retrieve cash drawer shifts from. (required)
     * @param shiftId The shift ID. (required)
     * @return ApiResponse&lt;RetrieveCashDrawerShiftResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveCashDrawerShiftResponse> retrieveCashDrawerShiftWithHttpInfo(String locationId, String shiftId) throws ApiException {
        okhttp3.Call localVarCall = retrieveCashDrawerShiftValidateBeforeCall(locationId, shiftId, null);
        Type localVarReturnType = new TypeToken<RetrieveCashDrawerShiftResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveCashDrawerShift (asynchronously)
     * Provides the summary details for a single cash drawer shift. See [ListCashDrawerShiftEvents](https://developer.squareup.com/reference/square_2021-08-18/cash-drawers-api/list-cash-drawer-shift-events) for a list of cash drawer shift events.
     * @param locationId The ID of the location to retrieve cash drawer shifts from. (required)
     * @param shiftId The shift ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveCashDrawerShiftAsync(String locationId, String shiftId, final ApiCallback<RetrieveCashDrawerShiftResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveCashDrawerShiftValidateBeforeCall(locationId, shiftId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveCashDrawerShiftResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
