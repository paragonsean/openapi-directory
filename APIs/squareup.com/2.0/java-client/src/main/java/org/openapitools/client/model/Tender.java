/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdditionalRecipient;
import org.openapitools.client.model.Money;
import org.openapitools.client.model.TenderCardDetails;
import org.openapitools.client.model.TenderCashDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a tender (i.e., a method of payment) used in a Square transaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Tender {
  public static final String SERIALIZED_NAME_ADDITIONAL_RECIPIENTS = "additional_recipients";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_RECIPIENTS)
  private List<AdditionalRecipient> additionalRecipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_AMOUNT_MONEY = "amount_money";
  @SerializedName(SERIALIZED_NAME_AMOUNT_MONEY)
  private Money amountMoney;

  public static final String SERIALIZED_NAME_CARD_DETAILS = "card_details";
  @SerializedName(SERIALIZED_NAME_CARD_DETAILS)
  private TenderCardDetails cardDetails;

  public static final String SERIALIZED_NAME_CASH_DETAILS = "cash_details";
  @SerializedName(SERIALIZED_NAME_CASH_DETAILS)
  private TenderCashDetails cashDetails;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_PAYMENT_ID = "payment_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  private String paymentId;

  public static final String SERIALIZED_NAME_PROCESSING_FEE_MONEY = "processing_fee_money";
  @SerializedName(SERIALIZED_NAME_PROCESSING_FEE_MONEY)
  private Money processingFeeMoney;

  public static final String SERIALIZED_NAME_TIP_MONEY = "tip_money";
  @SerializedName(SERIALIZED_NAME_TIP_MONEY)
  private Money tipMoney;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Tender() {
  }

  public Tender additionalRecipients(List<AdditionalRecipient> additionalRecipients) {
    this.additionalRecipients = additionalRecipients;
    return this;
  }

  public Tender addAdditionalRecipientsItem(AdditionalRecipient additionalRecipientsItem) {
    if (this.additionalRecipients == null) {
      this.additionalRecipients = new ArrayList<>();
    }
    this.additionalRecipients.add(additionalRecipientsItem);
    return this;
  }

  /**
   * Additional recipients (other than the merchant) receiving a portion of this tender. For example, fees assessed on the purchase by a third party integration.
   * @return additionalRecipients
   */
  @javax.annotation.Nullable
  public List<AdditionalRecipient> getAdditionalRecipients() {
    return additionalRecipients;
  }

  public void setAdditionalRecipients(List<AdditionalRecipient> additionalRecipients) {
    this.additionalRecipients = additionalRecipients;
  }


  public Tender amountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
    return this;
  }

  /**
   * Get amountMoney
   * @return amountMoney
   */
  @javax.annotation.Nullable
  public Money getAmountMoney() {
    return amountMoney;
  }

  public void setAmountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
  }


  public Tender cardDetails(TenderCardDetails cardDetails) {
    this.cardDetails = cardDetails;
    return this;
  }

  /**
   * Get cardDetails
   * @return cardDetails
   */
  @javax.annotation.Nullable
  public TenderCardDetails getCardDetails() {
    return cardDetails;
  }

  public void setCardDetails(TenderCardDetails cardDetails) {
    this.cardDetails = cardDetails;
  }


  public Tender cashDetails(TenderCashDetails cashDetails) {
    this.cashDetails = cashDetails;
    return this;
  }

  /**
   * Get cashDetails
   * @return cashDetails
   */
  @javax.annotation.Nullable
  public TenderCashDetails getCashDetails() {
    return cashDetails;
  }

  public void setCashDetails(TenderCashDetails cashDetails) {
    this.cashDetails = cashDetails;
  }


  public Tender createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The timestamp for when the tender was created, in RFC 3339 format.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Tender customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * If the tender is associated with a customer or represents a customer&#39;s card on file, this is the ID of the associated customer.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public Tender id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The tender&#39;s unique ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Tender locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The ID of the transaction&#39;s associated location.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public Tender note(String note) {
    this.note = note;
    return this;
  }

  /**
   * An optional note associated with the tender at the time of payment.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public Tender paymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  /**
   * The ID of the [Payment](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) that corresponds to this tender. This value is only present for payments created with the v2 Payments API.
   * @return paymentId
   */
  @javax.annotation.Nullable
  public String getPaymentId() {
    return paymentId;
  }

  public void setPaymentId(String paymentId) {
    this.paymentId = paymentId;
  }


  public Tender processingFeeMoney(Money processingFeeMoney) {
    this.processingFeeMoney = processingFeeMoney;
    return this;
  }

  /**
   * Get processingFeeMoney
   * @return processingFeeMoney
   */
  @javax.annotation.Nullable
  public Money getProcessingFeeMoney() {
    return processingFeeMoney;
  }

  public void setProcessingFeeMoney(Money processingFeeMoney) {
    this.processingFeeMoney = processingFeeMoney;
  }


  public Tender tipMoney(Money tipMoney) {
    this.tipMoney = tipMoney;
    return this;
  }

  /**
   * Get tipMoney
   * @return tipMoney
   */
  @javax.annotation.Nullable
  public Money getTipMoney() {
    return tipMoney;
  }

  public void setTipMoney(Money tipMoney) {
    this.tipMoney = tipMoney;
  }


  public Tender transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * The ID of the tender&#39;s associated transaction.
   * @return transactionId
   */
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public Tender type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of tender, such as &#x60;CARD&#x60; or &#x60;CASH&#x60;.
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tender tender = (Tender) o;
    return Objects.equals(this.additionalRecipients, tender.additionalRecipients) &&
        Objects.equals(this.amountMoney, tender.amountMoney) &&
        Objects.equals(this.cardDetails, tender.cardDetails) &&
        Objects.equals(this.cashDetails, tender.cashDetails) &&
        Objects.equals(this.createdAt, tender.createdAt) &&
        Objects.equals(this.customerId, tender.customerId) &&
        Objects.equals(this.id, tender.id) &&
        Objects.equals(this.locationId, tender.locationId) &&
        Objects.equals(this.note, tender.note) &&
        Objects.equals(this.paymentId, tender.paymentId) &&
        Objects.equals(this.processingFeeMoney, tender.processingFeeMoney) &&
        Objects.equals(this.tipMoney, tender.tipMoney) &&
        Objects.equals(this.transactionId, tender.transactionId) &&
        Objects.equals(this.type, tender.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalRecipients, amountMoney, cardDetails, cashDetails, createdAt, customerId, id, locationId, note, paymentId, processingFeeMoney, tipMoney, transactionId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tender {\n");
    sb.append("    additionalRecipients: ").append(toIndentedString(additionalRecipients)).append("\n");
    sb.append("    amountMoney: ").append(toIndentedString(amountMoney)).append("\n");
    sb.append("    cardDetails: ").append(toIndentedString(cardDetails)).append("\n");
    sb.append("    cashDetails: ").append(toIndentedString(cashDetails)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    processingFeeMoney: ").append(toIndentedString(processingFeeMoney)).append("\n");
    sb.append("    tipMoney: ").append(toIndentedString(tipMoney)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_recipients");
    openapiFields.add("amount_money");
    openapiFields.add("card_details");
    openapiFields.add("cash_details");
    openapiFields.add("created_at");
    openapiFields.add("customer_id");
    openapiFields.add("id");
    openapiFields.add("location_id");
    openapiFields.add("note");
    openapiFields.add("payment_id");
    openapiFields.add("processing_fee_money");
    openapiFields.add("tip_money");
    openapiFields.add("transaction_id");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Tender
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Tender.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Tender is not found in the empty JSON string", Tender.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Tender.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Tender` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Tender.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additional_recipients") != null && !jsonObj.get("additional_recipients").isJsonNull()) {
        JsonArray jsonArrayadditionalRecipients = jsonObj.getAsJsonArray("additional_recipients");
        if (jsonArrayadditionalRecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additional_recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additional_recipients` to be an array in the JSON string but got `%s`", jsonObj.get("additional_recipients").toString()));
          }

          // validate the optional field `additional_recipients` (array)
          for (int i = 0; i < jsonArrayadditionalRecipients.size(); i++) {
            AdditionalRecipient.validateJsonElement(jsonArrayadditionalRecipients.get(i));
          };
        }
      }
      // validate the optional field `amount_money`
      if (jsonObj.get("amount_money") != null && !jsonObj.get("amount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("amount_money"));
      }
      // validate the optional field `card_details`
      if (jsonObj.get("card_details") != null && !jsonObj.get("card_details").isJsonNull()) {
        TenderCardDetails.validateJsonElement(jsonObj.get("card_details"));
      }
      // validate the optional field `cash_details`
      if (jsonObj.get("cash_details") != null && !jsonObj.get("cash_details").isJsonNull()) {
        TenderCashDetails.validateJsonElement(jsonObj.get("cash_details"));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("location_id") != null && !jsonObj.get("location_id").isJsonNull()) && !jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("payment_id") != null && !jsonObj.get("payment_id").isJsonNull()) && !jsonObj.get("payment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_id").toString()));
      }
      // validate the optional field `processing_fee_money`
      if (jsonObj.get("processing_fee_money") != null && !jsonObj.get("processing_fee_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("processing_fee_money"));
      }
      // validate the optional field `tip_money`
      if (jsonObj.get("tip_money") != null && !jsonObj.get("tip_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("tip_money"));
      }
      if ((jsonObj.get("transaction_id") != null && !jsonObj.get("transaction_id").isJsonNull()) && !jsonObj.get("transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Tender.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Tender' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Tender> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Tender.class));

       return (TypeAdapter<T>) new TypeAdapter<Tender>() {
           @Override
           public void write(JsonWriter out, Tender value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Tender read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Tender given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Tender
   * @throws IOException if the JSON string is invalid with respect to Tender
   */
  public static Tender fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Tender.class);
  }

  /**
   * Convert an instance of Tender to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

