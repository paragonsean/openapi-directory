/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ACH-specific details about &#x60;BANK_ACCOUNT&#x60; type payments with the &#x60;transfer_type&#x60; of &#x60;ACH&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ACHDetails {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER_SUFFIX = "account_number_suffix";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER_SUFFIX)
  private String accountNumberSuffix;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "account_type";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routing_number";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  public ACHDetails() {
  }

  public ACHDetails accountNumberSuffix(String accountNumberSuffix) {
    this.accountNumberSuffix = accountNumberSuffix;
    return this;
  }

  /**
   * The last few digits of the bank account number.
   * @return accountNumberSuffix
   */
  @javax.annotation.Nullable
  public String getAccountNumberSuffix() {
    return accountNumberSuffix;
  }

  public void setAccountNumberSuffix(String accountNumberSuffix) {
    this.accountNumberSuffix = accountNumberSuffix;
  }


  public ACHDetails accountType(String accountType) {
    this.accountType = accountType;
    return this;
  }

  /**
   * The type of the bank account performing the transfer. The account type can be &#x60;CHECKING&#x60;, &#x60;SAVINGS&#x60;, or &#x60;UNKNOWN&#x60;.
   * @return accountType
   */
  @javax.annotation.Nullable
  public String getAccountType() {
    return accountType;
  }

  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }


  public ACHDetails routingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
    return this;
  }

  /**
   * The routing number for the bank account.
   * @return routingNumber
   */
  @javax.annotation.Nullable
  public String getRoutingNumber() {
    return routingNumber;
  }

  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ACHDetails acHDetails = (ACHDetails) o;
    return Objects.equals(this.accountNumberSuffix, acHDetails.accountNumberSuffix) &&
        Objects.equals(this.accountType, acHDetails.accountType) &&
        Objects.equals(this.routingNumber, acHDetails.routingNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumberSuffix, accountType, routingNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ACHDetails {\n");
    sb.append("    accountNumberSuffix: ").append(toIndentedString(accountNumberSuffix)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_number_suffix");
    openapiFields.add("account_type");
    openapiFields.add("routing_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ACHDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ACHDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ACHDetails is not found in the empty JSON string", ACHDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ACHDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ACHDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_number_suffix") != null && !jsonObj.get("account_number_suffix").isJsonNull()) && !jsonObj.get("account_number_suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number_suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number_suffix").toString()));
      }
      if ((jsonObj.get("account_type") != null && !jsonObj.get("account_type").isJsonNull()) && !jsonObj.get("account_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_type").toString()));
      }
      if ((jsonObj.get("routing_number") != null && !jsonObj.get("routing_number").isJsonNull()) && !jsonObj.get("routing_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routing_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routing_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ACHDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ACHDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ACHDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ACHDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ACHDetails>() {
           @Override
           public void write(JsonWriter out, ACHDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ACHDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ACHDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ACHDetails
   * @throws IOException if the JSON string is invalid with respect to ACHDetails
   */
  public static ACHDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ACHDetails.class);
  }

  /**
   * Convert an instance of ACHDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

