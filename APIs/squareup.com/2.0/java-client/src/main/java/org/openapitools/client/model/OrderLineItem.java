/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Money;
import org.openapitools.client.model.OrderLineItemAppliedDiscount;
import org.openapitools.client.model.OrderLineItemAppliedTax;
import org.openapitools.client.model.OrderLineItemModifier;
import org.openapitools.client.model.OrderLineItemPricingBlocklists;
import org.openapitools.client.model.OrderQuantityUnit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a line item in an order. Each line item describes a different product to purchase, with its own quantity and price details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderLineItem {
  public static final String SERIALIZED_NAME_APPLIED_DISCOUNTS = "applied_discounts";
  @SerializedName(SERIALIZED_NAME_APPLIED_DISCOUNTS)
  private List<OrderLineItemAppliedDiscount> appliedDiscounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPLIED_TAXES = "applied_taxes";
  @SerializedName(SERIALIZED_NAME_APPLIED_TAXES)
  private List<OrderLineItemAppliedTax> appliedTaxes = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASE_PRICE_MONEY = "base_price_money";
  @SerializedName(SERIALIZED_NAME_BASE_PRICE_MONEY)
  private Money basePriceMoney;

  public static final String SERIALIZED_NAME_CATALOG_OBJECT_ID = "catalog_object_id";
  @SerializedName(SERIALIZED_NAME_CATALOG_OBJECT_ID)
  private String catalogObjectId;

  public static final String SERIALIZED_NAME_CATALOG_VERSION = "catalog_version";
  @SerializedName(SERIALIZED_NAME_CATALOG_VERSION)
  private Long catalogVersion;

  public static final String SERIALIZED_NAME_GROSS_SALES_MONEY = "gross_sales_money";
  @SerializedName(SERIALIZED_NAME_GROSS_SALES_MONEY)
  private Money grossSalesMoney;

  public static final String SERIALIZED_NAME_ITEM_TYPE = "item_type";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private String itemType;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_MODIFIERS = "modifiers";
  @SerializedName(SERIALIZED_NAME_MODIFIERS)
  private List<OrderLineItemModifier> modifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_PRICING_BLOCKLISTS = "pricing_blocklists";
  @SerializedName(SERIALIZED_NAME_PRICING_BLOCKLISTS)
  private OrderLineItemPricingBlocklists pricingBlocklists;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private String quantity;

  public static final String SERIALIZED_NAME_QUANTITY_UNIT = "quantity_unit";
  @SerializedName(SERIALIZED_NAME_QUANTITY_UNIT)
  private OrderQuantityUnit quantityUnit;

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNT_MONEY = "total_discount_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNT_MONEY)
  private Money totalDiscountMoney;

  public static final String SERIALIZED_NAME_TOTAL_MONEY = "total_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_MONEY)
  private Money totalMoney;

  public static final String SERIALIZED_NAME_TOTAL_TAX_MONEY = "total_tax_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX_MONEY)
  private Money totalTaxMoney;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_VARIATION_NAME = "variation_name";
  @SerializedName(SERIALIZED_NAME_VARIATION_NAME)
  private String variationName;

  public static final String SERIALIZED_NAME_VARIATION_TOTAL_PRICE_MONEY = "variation_total_price_money";
  @SerializedName(SERIALIZED_NAME_VARIATION_TOTAL_PRICE_MONEY)
  private Money variationTotalPriceMoney;

  public OrderLineItem() {
  }

  public OrderLineItem appliedDiscounts(List<OrderLineItemAppliedDiscount> appliedDiscounts) {
    this.appliedDiscounts = appliedDiscounts;
    return this;
  }

  public OrderLineItem addAppliedDiscountsItem(OrderLineItemAppliedDiscount appliedDiscountsItem) {
    if (this.appliedDiscounts == null) {
      this.appliedDiscounts = new ArrayList<>();
    }
    this.appliedDiscounts.add(appliedDiscountsItem);
    return this;
  }

  /**
   * The list of references to discounts applied to this line item. Each &#x60;OrderLineItemAppliedDiscount&#x60; has a &#x60;discount_uid&#x60; that references the &#x60;uid&#x60; of a top-level &#x60;OrderLineItemDiscounts&#x60; applied to the line item. On reads, the amount applied is populated.  An &#x60;OrderLineItemAppliedDiscount&#x60; is automatically created on every line item for all &#x60;ORDER&#x60; scoped discounts that are added to the order. &#x60;OrderLineItemAppliedDiscount&#x60; records for &#x60;LINE_ITEM&#x60; scoped discounts must be added in requests for the discount to apply to any line items.  To change the amount of a discount, modify the referenced top-level discount.
   * @return appliedDiscounts
   */
  @javax.annotation.Nullable
  public List<OrderLineItemAppliedDiscount> getAppliedDiscounts() {
    return appliedDiscounts;
  }

  public void setAppliedDiscounts(List<OrderLineItemAppliedDiscount> appliedDiscounts) {
    this.appliedDiscounts = appliedDiscounts;
  }


  public OrderLineItem appliedTaxes(List<OrderLineItemAppliedTax> appliedTaxes) {
    this.appliedTaxes = appliedTaxes;
    return this;
  }

  public OrderLineItem addAppliedTaxesItem(OrderLineItemAppliedTax appliedTaxesItem) {
    if (this.appliedTaxes == null) {
      this.appliedTaxes = new ArrayList<>();
    }
    this.appliedTaxes.add(appliedTaxesItem);
    return this;
  }

  /**
   * The list of references to taxes applied to this line item. Each &#x60;OrderLineItemAppliedTax&#x60; has a &#x60;tax_uid&#x60; that references the &#x60;uid&#x60; of a top-level &#x60;OrderLineItemTax&#x60; applied to the line item. On reads, the amount applied is populated.  An &#x60;OrderLineItemAppliedTax&#x60; is automatically created on every line item for all &#x60;ORDER&#x60; scoped taxes added to the order. &#x60;OrderLineItemAppliedTax&#x60; records for &#x60;LINE_ITEM&#x60; scoped taxes must be added in requests for the tax to apply to any line items.  To change the amount of a tax, modify the referenced top-level tax.
   * @return appliedTaxes
   */
  @javax.annotation.Nullable
  public List<OrderLineItemAppliedTax> getAppliedTaxes() {
    return appliedTaxes;
  }

  public void setAppliedTaxes(List<OrderLineItemAppliedTax> appliedTaxes) {
    this.appliedTaxes = appliedTaxes;
  }


  public OrderLineItem basePriceMoney(Money basePriceMoney) {
    this.basePriceMoney = basePriceMoney;
    return this;
  }

  /**
   * Get basePriceMoney
   * @return basePriceMoney
   */
  @javax.annotation.Nullable
  public Money getBasePriceMoney() {
    return basePriceMoney;
  }

  public void setBasePriceMoney(Money basePriceMoney) {
    this.basePriceMoney = basePriceMoney;
  }


  public OrderLineItem catalogObjectId(String catalogObjectId) {
    this.catalogObjectId = catalogObjectId;
    return this;
  }

  /**
   * The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this line item.
   * @return catalogObjectId
   */
  @javax.annotation.Nullable
  public String getCatalogObjectId() {
    return catalogObjectId;
  }

  public void setCatalogObjectId(String catalogObjectId) {
    this.catalogObjectId = catalogObjectId;
  }


  public OrderLineItem catalogVersion(Long catalogVersion) {
    this.catalogVersion = catalogVersion;
    return this;
  }

  /**
   * The version of the catalog object that this line item references.
   * @return catalogVersion
   */
  @javax.annotation.Nullable
  public Long getCatalogVersion() {
    return catalogVersion;
  }

  public void setCatalogVersion(Long catalogVersion) {
    this.catalogVersion = catalogVersion;
  }


  public OrderLineItem grossSalesMoney(Money grossSalesMoney) {
    this.grossSalesMoney = grossSalesMoney;
    return this;
  }

  /**
   * Get grossSalesMoney
   * @return grossSalesMoney
   */
  @javax.annotation.Nullable
  public Money getGrossSalesMoney() {
    return grossSalesMoney;
  }

  public void setGrossSalesMoney(Money grossSalesMoney) {
    this.grossSalesMoney = grossSalesMoney;
  }


  public OrderLineItem itemType(String itemType) {
    this.itemType = itemType;
    return this;
  }

  /**
   * The type of line item: an itemized sale, a non-itemized sale (custom amount), or the activation or reloading of a gift card.
   * @return itemType
   */
  @javax.annotation.Nullable
  public String getItemType() {
    return itemType;
  }

  public void setItemType(String itemType) {
    this.itemType = itemType;
  }


  public OrderLineItem metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public OrderLineItem putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Application-defined data attached to this line item. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set &#x60;[a-zA-Z0-9_-]&#x60;. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a &#39;:&#39; character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public OrderLineItem modifiers(List<OrderLineItemModifier> modifiers) {
    this.modifiers = modifiers;
    return this;
  }

  public OrderLineItem addModifiersItem(OrderLineItemModifier modifiersItem) {
    if (this.modifiers == null) {
      this.modifiers = new ArrayList<>();
    }
    this.modifiers.add(modifiersItem);
    return this;
  }

  /**
   * The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item.
   * @return modifiers
   */
  @javax.annotation.Nullable
  public List<OrderLineItemModifier> getModifiers() {
    return modifiers;
  }

  public void setModifiers(List<OrderLineItemModifier> modifiers) {
    this.modifiers = modifiers;
  }


  public OrderLineItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the line item.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OrderLineItem note(String note) {
    this.note = note;
    return this;
  }

  /**
   * The note of the line item.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public OrderLineItem pricingBlocklists(OrderLineItemPricingBlocklists pricingBlocklists) {
    this.pricingBlocklists = pricingBlocklists;
    return this;
  }

  /**
   * Get pricingBlocklists
   * @return pricingBlocklists
   */
  @javax.annotation.Nullable
  public OrderLineItemPricingBlocklists getPricingBlocklists() {
    return pricingBlocklists;
  }

  public void setPricingBlocklists(OrderLineItemPricingBlocklists pricingBlocklists) {
    this.pricingBlocklists = pricingBlocklists;
  }


  public OrderLineItem quantity(String quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The quantity purchased, formatted as a decimal number. For example, &#x60;\&quot;3\&quot;&#x60;.  Line items with a quantity of &#x60;\&quot;0\&quot;&#x60; are automatically removed when paying for or otherwise completing the order.  Line items with a &#x60;quantity_unit&#x60; can have non-integer quantities. For example, &#x60;\&quot;1.70000\&quot;&#x60;.
   * @return quantity
   */
  @javax.annotation.Nonnull
  public String getQuantity() {
    return quantity;
  }

  public void setQuantity(String quantity) {
    this.quantity = quantity;
  }


  public OrderLineItem quantityUnit(OrderQuantityUnit quantityUnit) {
    this.quantityUnit = quantityUnit;
    return this;
  }

  /**
   * Get quantityUnit
   * @return quantityUnit
   */
  @javax.annotation.Nullable
  public OrderQuantityUnit getQuantityUnit() {
    return quantityUnit;
  }

  public void setQuantityUnit(OrderQuantityUnit quantityUnit) {
    this.quantityUnit = quantityUnit;
  }


  public OrderLineItem totalDiscountMoney(Money totalDiscountMoney) {
    this.totalDiscountMoney = totalDiscountMoney;
    return this;
  }

  /**
   * Get totalDiscountMoney
   * @return totalDiscountMoney
   */
  @javax.annotation.Nullable
  public Money getTotalDiscountMoney() {
    return totalDiscountMoney;
  }

  public void setTotalDiscountMoney(Money totalDiscountMoney) {
    this.totalDiscountMoney = totalDiscountMoney;
  }


  public OrderLineItem totalMoney(Money totalMoney) {
    this.totalMoney = totalMoney;
    return this;
  }

  /**
   * Get totalMoney
   * @return totalMoney
   */
  @javax.annotation.Nullable
  public Money getTotalMoney() {
    return totalMoney;
  }

  public void setTotalMoney(Money totalMoney) {
    this.totalMoney = totalMoney;
  }


  public OrderLineItem totalTaxMoney(Money totalTaxMoney) {
    this.totalTaxMoney = totalTaxMoney;
    return this;
  }

  /**
   * Get totalTaxMoney
   * @return totalTaxMoney
   */
  @javax.annotation.Nullable
  public Money getTotalTaxMoney() {
    return totalTaxMoney;
  }

  public void setTotalTaxMoney(Money totalTaxMoney) {
    this.totalTaxMoney = totalTaxMoney;
  }


  public OrderLineItem uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * A unique ID that identifies the line item only within this order.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }


  public OrderLineItem variationName(String variationName) {
    this.variationName = variationName;
    return this;
  }

  /**
   * The name of the variation applied to this line item.
   * @return variationName
   */
  @javax.annotation.Nullable
  public String getVariationName() {
    return variationName;
  }

  public void setVariationName(String variationName) {
    this.variationName = variationName;
  }


  public OrderLineItem variationTotalPriceMoney(Money variationTotalPriceMoney) {
    this.variationTotalPriceMoney = variationTotalPriceMoney;
    return this;
  }

  /**
   * Get variationTotalPriceMoney
   * @return variationTotalPriceMoney
   */
  @javax.annotation.Nullable
  public Money getVariationTotalPriceMoney() {
    return variationTotalPriceMoney;
  }

  public void setVariationTotalPriceMoney(Money variationTotalPriceMoney) {
    this.variationTotalPriceMoney = variationTotalPriceMoney;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderLineItem orderLineItem = (OrderLineItem) o;
    return Objects.equals(this.appliedDiscounts, orderLineItem.appliedDiscounts) &&
        Objects.equals(this.appliedTaxes, orderLineItem.appliedTaxes) &&
        Objects.equals(this.basePriceMoney, orderLineItem.basePriceMoney) &&
        Objects.equals(this.catalogObjectId, orderLineItem.catalogObjectId) &&
        Objects.equals(this.catalogVersion, orderLineItem.catalogVersion) &&
        Objects.equals(this.grossSalesMoney, orderLineItem.grossSalesMoney) &&
        Objects.equals(this.itemType, orderLineItem.itemType) &&
        Objects.equals(this.metadata, orderLineItem.metadata) &&
        Objects.equals(this.modifiers, orderLineItem.modifiers) &&
        Objects.equals(this.name, orderLineItem.name) &&
        Objects.equals(this.note, orderLineItem.note) &&
        Objects.equals(this.pricingBlocklists, orderLineItem.pricingBlocklists) &&
        Objects.equals(this.quantity, orderLineItem.quantity) &&
        Objects.equals(this.quantityUnit, orderLineItem.quantityUnit) &&
        Objects.equals(this.totalDiscountMoney, orderLineItem.totalDiscountMoney) &&
        Objects.equals(this.totalMoney, orderLineItem.totalMoney) &&
        Objects.equals(this.totalTaxMoney, orderLineItem.totalTaxMoney) &&
        Objects.equals(this.uid, orderLineItem.uid) &&
        Objects.equals(this.variationName, orderLineItem.variationName) &&
        Objects.equals(this.variationTotalPriceMoney, orderLineItem.variationTotalPriceMoney);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliedDiscounts, appliedTaxes, basePriceMoney, catalogObjectId, catalogVersion, grossSalesMoney, itemType, metadata, modifiers, name, note, pricingBlocklists, quantity, quantityUnit, totalDiscountMoney, totalMoney, totalTaxMoney, uid, variationName, variationTotalPriceMoney);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderLineItem {\n");
    sb.append("    appliedDiscounts: ").append(toIndentedString(appliedDiscounts)).append("\n");
    sb.append("    appliedTaxes: ").append(toIndentedString(appliedTaxes)).append("\n");
    sb.append("    basePriceMoney: ").append(toIndentedString(basePriceMoney)).append("\n");
    sb.append("    catalogObjectId: ").append(toIndentedString(catalogObjectId)).append("\n");
    sb.append("    catalogVersion: ").append(toIndentedString(catalogVersion)).append("\n");
    sb.append("    grossSalesMoney: ").append(toIndentedString(grossSalesMoney)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    modifiers: ").append(toIndentedString(modifiers)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    pricingBlocklists: ").append(toIndentedString(pricingBlocklists)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    quantityUnit: ").append(toIndentedString(quantityUnit)).append("\n");
    sb.append("    totalDiscountMoney: ").append(toIndentedString(totalDiscountMoney)).append("\n");
    sb.append("    totalMoney: ").append(toIndentedString(totalMoney)).append("\n");
    sb.append("    totalTaxMoney: ").append(toIndentedString(totalTaxMoney)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    variationName: ").append(toIndentedString(variationName)).append("\n");
    sb.append("    variationTotalPriceMoney: ").append(toIndentedString(variationTotalPriceMoney)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applied_discounts");
    openapiFields.add("applied_taxes");
    openapiFields.add("base_price_money");
    openapiFields.add("catalog_object_id");
    openapiFields.add("catalog_version");
    openapiFields.add("gross_sales_money");
    openapiFields.add("item_type");
    openapiFields.add("metadata");
    openapiFields.add("modifiers");
    openapiFields.add("name");
    openapiFields.add("note");
    openapiFields.add("pricing_blocklists");
    openapiFields.add("quantity");
    openapiFields.add("quantity_unit");
    openapiFields.add("total_discount_money");
    openapiFields.add("total_money");
    openapiFields.add("total_tax_money");
    openapiFields.add("uid");
    openapiFields.add("variation_name");
    openapiFields.add("variation_total_price_money");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("quantity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderLineItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderLineItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderLineItem is not found in the empty JSON string", OrderLineItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderLineItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderLineItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderLineItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("applied_discounts") != null && !jsonObj.get("applied_discounts").isJsonNull()) {
        JsonArray jsonArrayappliedDiscounts = jsonObj.getAsJsonArray("applied_discounts");
        if (jsonArrayappliedDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applied_discounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applied_discounts` to be an array in the JSON string but got `%s`", jsonObj.get("applied_discounts").toString()));
          }

          // validate the optional field `applied_discounts` (array)
          for (int i = 0; i < jsonArrayappliedDiscounts.size(); i++) {
            OrderLineItemAppliedDiscount.validateJsonElement(jsonArrayappliedDiscounts.get(i));
          };
        }
      }
      if (jsonObj.get("applied_taxes") != null && !jsonObj.get("applied_taxes").isJsonNull()) {
        JsonArray jsonArrayappliedTaxes = jsonObj.getAsJsonArray("applied_taxes");
        if (jsonArrayappliedTaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applied_taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applied_taxes` to be an array in the JSON string but got `%s`", jsonObj.get("applied_taxes").toString()));
          }

          // validate the optional field `applied_taxes` (array)
          for (int i = 0; i < jsonArrayappliedTaxes.size(); i++) {
            OrderLineItemAppliedTax.validateJsonElement(jsonArrayappliedTaxes.get(i));
          };
        }
      }
      // validate the optional field `base_price_money`
      if (jsonObj.get("base_price_money") != null && !jsonObj.get("base_price_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("base_price_money"));
      }
      if ((jsonObj.get("catalog_object_id") != null && !jsonObj.get("catalog_object_id").isJsonNull()) && !jsonObj.get("catalog_object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalog_object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalog_object_id").toString()));
      }
      // validate the optional field `gross_sales_money`
      if (jsonObj.get("gross_sales_money") != null && !jsonObj.get("gross_sales_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("gross_sales_money"));
      }
      if ((jsonObj.get("item_type") != null && !jsonObj.get("item_type").isJsonNull()) && !jsonObj.get("item_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_type").toString()));
      }
      if (jsonObj.get("modifiers") != null && !jsonObj.get("modifiers").isJsonNull()) {
        JsonArray jsonArraymodifiers = jsonObj.getAsJsonArray("modifiers");
        if (jsonArraymodifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("modifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `modifiers` to be an array in the JSON string but got `%s`", jsonObj.get("modifiers").toString()));
          }

          // validate the optional field `modifiers` (array)
          for (int i = 0; i < jsonArraymodifiers.size(); i++) {
            OrderLineItemModifier.validateJsonElement(jsonArraymodifiers.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      // validate the optional field `pricing_blocklists`
      if (jsonObj.get("pricing_blocklists") != null && !jsonObj.get("pricing_blocklists").isJsonNull()) {
        OrderLineItemPricingBlocklists.validateJsonElement(jsonObj.get("pricing_blocklists"));
      }
      if (!jsonObj.get("quantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantity").toString()));
      }
      // validate the optional field `quantity_unit`
      if (jsonObj.get("quantity_unit") != null && !jsonObj.get("quantity_unit").isJsonNull()) {
        OrderQuantityUnit.validateJsonElement(jsonObj.get("quantity_unit"));
      }
      // validate the optional field `total_discount_money`
      if (jsonObj.get("total_discount_money") != null && !jsonObj.get("total_discount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_discount_money"));
      }
      // validate the optional field `total_money`
      if (jsonObj.get("total_money") != null && !jsonObj.get("total_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_money"));
      }
      // validate the optional field `total_tax_money`
      if (jsonObj.get("total_tax_money") != null && !jsonObj.get("total_tax_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_tax_money"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("variation_name") != null && !jsonObj.get("variation_name").isJsonNull()) && !jsonObj.get("variation_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variation_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variation_name").toString()));
      }
      // validate the optional field `variation_total_price_money`
      if (jsonObj.get("variation_total_price_money") != null && !jsonObj.get("variation_total_price_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("variation_total_price_money"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderLineItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderLineItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderLineItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderLineItem.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderLineItem>() {
           @Override
           public void write(JsonWriter out, OrderLineItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderLineItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderLineItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderLineItem
   * @throws IOException if the JSON string is invalid with respect to OrderLineItem
   */
  public static OrderLineItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderLineItem.class);
  }

  /**
   * Convert an instance of OrderLineItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

