/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ACHDetails;
import org.openapitools.client.model.Error;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Additional details about BANK_ACCOUNT type payments.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BankAccountPaymentDetails {
  public static final String SERIALIZED_NAME_ACCOUNT_OWNERSHIP_TYPE = "account_ownership_type";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_OWNERSHIP_TYPE)
  private String accountOwnershipType;

  public static final String SERIALIZED_NAME_ACH_DETAILS = "ach_details";
  @SerializedName(SERIALIZED_NAME_ACH_DETAILS)
  private ACHDetails achDetails;

  public static final String SERIALIZED_NAME_BANK_NAME = "bank_name";
  @SerializedName(SERIALIZED_NAME_BANK_NAME)
  private String bankName;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Error> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_STATEMENT_DESCRIPTION = "statement_description";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DESCRIPTION)
  private String statementDescription;

  public static final String SERIALIZED_NAME_TRANSFER_TYPE = "transfer_type";
  @SerializedName(SERIALIZED_NAME_TRANSFER_TYPE)
  private String transferType;

  public BankAccountPaymentDetails() {
  }

  public BankAccountPaymentDetails accountOwnershipType(String accountOwnershipType) {
    this.accountOwnershipType = accountOwnershipType;
    return this;
  }

  /**
   * The ownership type of the bank account performing the transfer. The type can be &#x60;INDIVIDUAL&#x60;, &#x60;COMPANY&#x60;, or &#x60;UNKNOWN&#x60;.
   * @return accountOwnershipType
   */
  @javax.annotation.Nullable
  public String getAccountOwnershipType() {
    return accountOwnershipType;
  }

  public void setAccountOwnershipType(String accountOwnershipType) {
    this.accountOwnershipType = accountOwnershipType;
  }


  public BankAccountPaymentDetails achDetails(ACHDetails achDetails) {
    this.achDetails = achDetails;
    return this;
  }

  /**
   * Get achDetails
   * @return achDetails
   */
  @javax.annotation.Nullable
  public ACHDetails getAchDetails() {
    return achDetails;
  }

  public void setAchDetails(ACHDetails achDetails) {
    this.achDetails = achDetails;
  }


  public BankAccountPaymentDetails bankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  /**
   * The name of the bank associated with the bank account.
   * @return bankName
   */
  @javax.annotation.Nullable
  public String getBankName() {
    return bankName;
  }

  public void setBankName(String bankName) {
    this.bankName = bankName;
  }


  public BankAccountPaymentDetails country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The two-letter ISO code representing the country the bank account is located in.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public BankAccountPaymentDetails errors(List<Error> errors) {
    this.errors = errors;
    return this;
  }

  public BankAccountPaymentDetails addErrorsItem(Error errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Information about errors encountered during the request.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<Error> getErrors() {
    return errors;
  }

  public void setErrors(List<Error> errors) {
    this.errors = errors;
  }


  public BankAccountPaymentDetails fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * Uniquely identifies the bank account for this seller and can be used to determine if payments are from the same bank account.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public BankAccountPaymentDetails statementDescription(String statementDescription) {
    this.statementDescription = statementDescription;
    return this;
  }

  /**
   * The statement description as sent to the bank.
   * @return statementDescription
   */
  @javax.annotation.Nullable
  public String getStatementDescription() {
    return statementDescription;
  }

  public void setStatementDescription(String statementDescription) {
    this.statementDescription = statementDescription;
  }


  public BankAccountPaymentDetails transferType(String transferType) {
    this.transferType = transferType;
    return this;
  }

  /**
   * The type of the bank transfer. The type can be &#x60;ACH&#x60; or &#x60;UNKNOWN&#x60;.
   * @return transferType
   */
  @javax.annotation.Nullable
  public String getTransferType() {
    return transferType;
  }

  public void setTransferType(String transferType) {
    this.transferType = transferType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BankAccountPaymentDetails bankAccountPaymentDetails = (BankAccountPaymentDetails) o;
    return Objects.equals(this.accountOwnershipType, bankAccountPaymentDetails.accountOwnershipType) &&
        Objects.equals(this.achDetails, bankAccountPaymentDetails.achDetails) &&
        Objects.equals(this.bankName, bankAccountPaymentDetails.bankName) &&
        Objects.equals(this.country, bankAccountPaymentDetails.country) &&
        Objects.equals(this.errors, bankAccountPaymentDetails.errors) &&
        Objects.equals(this.fingerprint, bankAccountPaymentDetails.fingerprint) &&
        Objects.equals(this.statementDescription, bankAccountPaymentDetails.statementDescription) &&
        Objects.equals(this.transferType, bankAccountPaymentDetails.transferType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountOwnershipType, achDetails, bankName, country, errors, fingerprint, statementDescription, transferType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BankAccountPaymentDetails {\n");
    sb.append("    accountOwnershipType: ").append(toIndentedString(accountOwnershipType)).append("\n");
    sb.append("    achDetails: ").append(toIndentedString(achDetails)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    statementDescription: ").append(toIndentedString(statementDescription)).append("\n");
    sb.append("    transferType: ").append(toIndentedString(transferType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_ownership_type");
    openapiFields.add("ach_details");
    openapiFields.add("bank_name");
    openapiFields.add("country");
    openapiFields.add("errors");
    openapiFields.add("fingerprint");
    openapiFields.add("statement_description");
    openapiFields.add("transfer_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BankAccountPaymentDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BankAccountPaymentDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BankAccountPaymentDetails is not found in the empty JSON string", BankAccountPaymentDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BankAccountPaymentDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BankAccountPaymentDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_ownership_type") != null && !jsonObj.get("account_ownership_type").isJsonNull()) && !jsonObj.get("account_ownership_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_ownership_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_ownership_type").toString()));
      }
      // validate the optional field `ach_details`
      if (jsonObj.get("ach_details") != null && !jsonObj.get("ach_details").isJsonNull()) {
        ACHDetails.validateJsonElement(jsonObj.get("ach_details"));
      }
      if ((jsonObj.get("bank_name") != null && !jsonObj.get("bank_name").isJsonNull()) && !jsonObj.get("bank_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_name").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            Error.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("statement_description") != null && !jsonObj.get("statement_description").isJsonNull()) && !jsonObj.get("statement_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statement_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statement_description").toString()));
      }
      if ((jsonObj.get("transfer_type") != null && !jsonObj.get("transfer_type").isJsonNull()) && !jsonObj.get("transfer_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transfer_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transfer_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BankAccountPaymentDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BankAccountPaymentDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BankAccountPaymentDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BankAccountPaymentDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<BankAccountPaymentDetails>() {
           @Override
           public void write(JsonWriter out, BankAccountPaymentDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BankAccountPaymentDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BankAccountPaymentDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BankAccountPaymentDetails
   * @throws IOException if the JSON string is invalid with respect to BankAccountPaymentDetails
   */
  public static BankAccountPaymentDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BankAccountPaymentDetails.class);
  }

  /**
   * Convert an instance of BankAccountPaymentDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

