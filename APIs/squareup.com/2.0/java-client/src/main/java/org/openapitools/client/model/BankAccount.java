/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a bank account. For more information about  linking a bank account to a Square account, see  [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BankAccount {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER_SUFFIX = "account_number_suffix";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER_SUFFIX)
  private String accountNumberSuffix;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "account_type";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_BANK_NAME = "bank_name";
  @SerializedName(SERIALIZED_NAME_BANK_NAME)
  private String bankName;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CREDITABLE = "creditable";
  @SerializedName(SERIALIZED_NAME_CREDITABLE)
  private Boolean creditable;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DEBIT_MANDATE_REFERENCE_ID = "debit_mandate_reference_id";
  @SerializedName(SERIALIZED_NAME_DEBIT_MANDATE_REFERENCE_ID)
  private String debitMandateReferenceId;

  public static final String SERIALIZED_NAME_DEBITABLE = "debitable";
  @SerializedName(SERIALIZED_NAME_DEBITABLE)
  private Boolean debitable;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_HOLDER_NAME = "holder_name";
  @SerializedName(SERIALIZED_NAME_HOLDER_NAME)
  private String holderName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_PRIMARY_BANK_IDENTIFICATION_NUMBER = "primary_bank_identification_number";
  @SerializedName(SERIALIZED_NAME_PRIMARY_BANK_IDENTIFICATION_NUMBER)
  private String primaryBankIdentificationNumber;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "reference_id";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_SECONDARY_BANK_IDENTIFICATION_NUMBER = "secondary_bank_identification_number";
  @SerializedName(SERIALIZED_NAME_SECONDARY_BANK_IDENTIFICATION_NUMBER)
  private String secondaryBankIdentificationNumber;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public BankAccount() {
  }

  public BankAccount accountNumberSuffix(String accountNumberSuffix) {
    this.accountNumberSuffix = accountNumberSuffix;
    return this;
  }

  /**
   * The last few digits of the account number.
   * @return accountNumberSuffix
   */
  @javax.annotation.Nonnull
  public String getAccountNumberSuffix() {
    return accountNumberSuffix;
  }

  public void setAccountNumberSuffix(String accountNumberSuffix) {
    this.accountNumberSuffix = accountNumberSuffix;
  }


  public BankAccount accountType(String accountType) {
    this.accountType = accountType;
    return this;
  }

  /**
   * The financial purpose of the associated bank account.
   * @return accountType
   */
  @javax.annotation.Nonnull
  public String getAccountType() {
    return accountType;
  }

  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }


  public BankAccount bankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  /**
   * Read only. Name of actual financial institution.  For example \&quot;Bank of America\&quot;.
   * @return bankName
   */
  @javax.annotation.Nullable
  public String getBankName() {
    return bankName;
  }

  public void setBankName(String bankName) {
    this.bankName = bankName;
  }


  public BankAccount country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The ISO 3166 Alpha-2 country code where the bank account is based.
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public BankAccount creditable(Boolean creditable) {
    this.creditable = creditable;
    return this;
  }

  /**
   * Indicates whether it is possible for Square to send money to this bank account.
   * @return creditable
   */
  @javax.annotation.Nonnull
  public Boolean getCreditable() {
    return creditable;
  }

  public void setCreditable(Boolean creditable) {
    this.creditable = creditable;
  }


  public BankAccount currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The 3-character ISO 4217 currency code indicating the operating currency of the bank account. For example, the currency code for US dollars is &#x60;USD&#x60;.
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public BankAccount debitMandateReferenceId(String debitMandateReferenceId) {
    this.debitMandateReferenceId = debitMandateReferenceId;
    return this;
  }

  /**
   * Reference identifier that will be displayed to UK bank account owners when collecting direct debit authorization. Only required for UK bank accounts.
   * @return debitMandateReferenceId
   */
  @javax.annotation.Nullable
  public String getDebitMandateReferenceId() {
    return debitMandateReferenceId;
  }

  public void setDebitMandateReferenceId(String debitMandateReferenceId) {
    this.debitMandateReferenceId = debitMandateReferenceId;
  }


  public BankAccount debitable(Boolean debitable) {
    this.debitable = debitable;
    return this;
  }

  /**
   * Indicates whether it is possible for Square to take money from this  bank account.
   * @return debitable
   */
  @javax.annotation.Nonnull
  public Boolean getDebitable() {
    return debitable;
  }

  public void setDebitable(Boolean debitable) {
    this.debitable = debitable;
  }


  public BankAccount fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * A Square-assigned, unique identifier for the bank account based on the account information. The account fingerprint can be used to compare account entries and determine if the they represent the same real-world bank account.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public BankAccount holderName(String holderName) {
    this.holderName = holderName;
    return this;
  }

  /**
   * Name of the account holder. This name must match the name  on the targeted bank account record.
   * @return holderName
   */
  @javax.annotation.Nonnull
  public String getHolderName() {
    return holderName;
  }

  public void setHolderName(String holderName) {
    this.holderName = holderName;
  }


  public BankAccount id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique, Square-issued identifier for the bank account.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BankAccount locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The location to which the bank account belongs.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public BankAccount primaryBankIdentificationNumber(String primaryBankIdentificationNumber) {
    this.primaryBankIdentificationNumber = primaryBankIdentificationNumber;
    return this;
  }

  /**
   * Primary identifier for the bank. For more information, see  [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
   * @return primaryBankIdentificationNumber
   */
  @javax.annotation.Nonnull
  public String getPrimaryBankIdentificationNumber() {
    return primaryBankIdentificationNumber;
  }

  public void setPrimaryBankIdentificationNumber(String primaryBankIdentificationNumber) {
    this.primaryBankIdentificationNumber = primaryBankIdentificationNumber;
  }


  public BankAccount referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Client-provided identifier for linking the banking account to an entity in a third-party system (for example, a bank account number or a user identifier).
   * @return referenceId
   */
  @javax.annotation.Nullable
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public BankAccount secondaryBankIdentificationNumber(String secondaryBankIdentificationNumber) {
    this.secondaryBankIdentificationNumber = secondaryBankIdentificationNumber;
    return this;
  }

  /**
   * Secondary identifier for the bank. For more information, see  [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
   * @return secondaryBankIdentificationNumber
   */
  @javax.annotation.Nullable
  public String getSecondaryBankIdentificationNumber() {
    return secondaryBankIdentificationNumber;
  }

  public void setSecondaryBankIdentificationNumber(String secondaryBankIdentificationNumber) {
    this.secondaryBankIdentificationNumber = secondaryBankIdentificationNumber;
  }


  public BankAccount status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Read-only. The current verification status of this BankAccount object.
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public BankAccount version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * The current version of the &#x60;BankAccount&#x60;.
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BankAccount bankAccount = (BankAccount) o;
    return Objects.equals(this.accountNumberSuffix, bankAccount.accountNumberSuffix) &&
        Objects.equals(this.accountType, bankAccount.accountType) &&
        Objects.equals(this.bankName, bankAccount.bankName) &&
        Objects.equals(this.country, bankAccount.country) &&
        Objects.equals(this.creditable, bankAccount.creditable) &&
        Objects.equals(this.currency, bankAccount.currency) &&
        Objects.equals(this.debitMandateReferenceId, bankAccount.debitMandateReferenceId) &&
        Objects.equals(this.debitable, bankAccount.debitable) &&
        Objects.equals(this.fingerprint, bankAccount.fingerprint) &&
        Objects.equals(this.holderName, bankAccount.holderName) &&
        Objects.equals(this.id, bankAccount.id) &&
        Objects.equals(this.locationId, bankAccount.locationId) &&
        Objects.equals(this.primaryBankIdentificationNumber, bankAccount.primaryBankIdentificationNumber) &&
        Objects.equals(this.referenceId, bankAccount.referenceId) &&
        Objects.equals(this.secondaryBankIdentificationNumber, bankAccount.secondaryBankIdentificationNumber) &&
        Objects.equals(this.status, bankAccount.status) &&
        Objects.equals(this.version, bankAccount.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumberSuffix, accountType, bankName, country, creditable, currency, debitMandateReferenceId, debitable, fingerprint, holderName, id, locationId, primaryBankIdentificationNumber, referenceId, secondaryBankIdentificationNumber, status, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BankAccount {\n");
    sb.append("    accountNumberSuffix: ").append(toIndentedString(accountNumberSuffix)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    creditable: ").append(toIndentedString(creditable)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    debitMandateReferenceId: ").append(toIndentedString(debitMandateReferenceId)).append("\n");
    sb.append("    debitable: ").append(toIndentedString(debitable)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    holderName: ").append(toIndentedString(holderName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    primaryBankIdentificationNumber: ").append(toIndentedString(primaryBankIdentificationNumber)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    secondaryBankIdentificationNumber: ").append(toIndentedString(secondaryBankIdentificationNumber)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_number_suffix");
    openapiFields.add("account_type");
    openapiFields.add("bank_name");
    openapiFields.add("country");
    openapiFields.add("creditable");
    openapiFields.add("currency");
    openapiFields.add("debit_mandate_reference_id");
    openapiFields.add("debitable");
    openapiFields.add("fingerprint");
    openapiFields.add("holder_name");
    openapiFields.add("id");
    openapiFields.add("location_id");
    openapiFields.add("primary_bank_identification_number");
    openapiFields.add("reference_id");
    openapiFields.add("secondary_bank_identification_number");
    openapiFields.add("status");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_number_suffix");
    openapiRequiredFields.add("account_type");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("creditable");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("debitable");
    openapiRequiredFields.add("holder_name");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("primary_bank_identification_number");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BankAccount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BankAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BankAccount is not found in the empty JSON string", BankAccount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BankAccount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BankAccount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BankAccount.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_number_suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number_suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number_suffix").toString()));
      }
      if (!jsonObj.get("account_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_type").toString()));
      }
      if ((jsonObj.get("bank_name") != null && !jsonObj.get("bank_name").isJsonNull()) && !jsonObj.get("bank_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_name").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("debit_mandate_reference_id") != null && !jsonObj.get("debit_mandate_reference_id").isJsonNull()) && !jsonObj.get("debit_mandate_reference_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debit_mandate_reference_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debit_mandate_reference_id").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if (!jsonObj.get("holder_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holder_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holder_name").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("location_id") != null && !jsonObj.get("location_id").isJsonNull()) && !jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      if (!jsonObj.get("primary_bank_identification_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_bank_identification_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_bank_identification_number").toString()));
      }
      if ((jsonObj.get("reference_id") != null && !jsonObj.get("reference_id").isJsonNull()) && !jsonObj.get("reference_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference_id").toString()));
      }
      if ((jsonObj.get("secondary_bank_identification_number") != null && !jsonObj.get("secondary_bank_identification_number").isJsonNull()) && !jsonObj.get("secondary_bank_identification_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondary_bank_identification_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondary_bank_identification_number").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BankAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BankAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BankAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BankAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<BankAccount>() {
           @Override
           public void write(JsonWriter out, BankAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BankAccount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BankAccount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BankAccount
   * @throws IOException if the JSON string is invalid with respect to BankAccount
   */
  public static BankAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BankAccount.class);
  }

  /**
   * Convert an instance of BankAccount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

