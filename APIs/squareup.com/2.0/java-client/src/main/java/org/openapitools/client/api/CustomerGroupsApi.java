/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateCustomerGroupRequest;
import org.openapitools.client.model.CreateCustomerGroupResponse;
import org.openapitools.client.model.DeleteCustomerGroupResponse;
import org.openapitools.client.model.ListCustomerGroupsResponse;
import org.openapitools.client.model.RetrieveCustomerGroupResponse;
import org.openapitools.client.model.UpdateCustomerGroupRequest;
import org.openapitools.client.model.UpdateCustomerGroupResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerGroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomerGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerGroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCustomerGroup
     * @param createCustomerGroupRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerGroupCall(CreateCustomerGroupRequest createCustomerGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCustomerGroupRequest;

        // create path and map variables
        String localVarPath = "/v2/customers/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomerGroupValidateBeforeCall(CreateCustomerGroupRequest createCustomerGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCustomerGroupRequest' is set
        if (createCustomerGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createCustomerGroupRequest' when calling createCustomerGroup(Async)");
        }

        return createCustomerGroupCall(createCustomerGroupRequest, _callback);

    }

    /**
     * CreateCustomerGroup
     * Creates a new customer group for a business.  The request must include the &#x60;name&#x60; value of the group.
     * @param createCustomerGroupRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return CreateCustomerGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomerGroupResponse createCustomerGroup(CreateCustomerGroupRequest createCustomerGroupRequest) throws ApiException {
        ApiResponse<CreateCustomerGroupResponse> localVarResp = createCustomerGroupWithHttpInfo(createCustomerGroupRequest);
        return localVarResp.getData();
    }

    /**
     * CreateCustomerGroup
     * Creates a new customer group for a business.  The request must include the &#x60;name&#x60; value of the group.
     * @param createCustomerGroupRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;CreateCustomerGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCustomerGroupResponse> createCustomerGroupWithHttpInfo(CreateCustomerGroupRequest createCustomerGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = createCustomerGroupValidateBeforeCall(createCustomerGroupRequest, null);
        Type localVarReturnType = new TypeToken<CreateCustomerGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateCustomerGroup (asynchronously)
     * Creates a new customer group for a business.  The request must include the &#x60;name&#x60; value of the group.
     * @param createCustomerGroupRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerGroupAsync(CreateCustomerGroupRequest createCustomerGroupRequest, final ApiCallback<CreateCustomerGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomerGroupValidateBeforeCall(createCustomerGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateCustomerGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCustomerGroup
     * @param groupId The ID of the customer group to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerGroupCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomerGroupValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteCustomerGroup(Async)");
        }

        return deleteCustomerGroupCall(groupId, _callback);

    }

    /**
     * DeleteCustomerGroup
     * Deletes a customer group as identified by the &#x60;group_id&#x60; value.
     * @param groupId The ID of the customer group to delete. (required)
     * @return DeleteCustomerGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCustomerGroupResponse deleteCustomerGroup(String groupId) throws ApiException {
        ApiResponse<DeleteCustomerGroupResponse> localVarResp = deleteCustomerGroupWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * DeleteCustomerGroup
     * Deletes a customer group as identified by the &#x60;group_id&#x60; value.
     * @param groupId The ID of the customer group to delete. (required)
     * @return ApiResponse&lt;DeleteCustomerGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteCustomerGroupResponse> deleteCustomerGroupWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomerGroupValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<DeleteCustomerGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeleteCustomerGroup (asynchronously)
     * Deletes a customer group as identified by the &#x60;group_id&#x60; value.
     * @param groupId The ID of the customer group to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerGroupAsync(String groupId, final ApiCallback<DeleteCustomerGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomerGroupValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<DeleteCustomerGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCustomerGroups
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination). (optional)
     * @param limit The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.  The limit is ignored if it is less than 1 or greater than 50. The default value is 50.  For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomerGroupsCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomerGroupsValidateBeforeCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        return listCustomerGroupsCall(cursor, limit, _callback);

    }

    /**
     * ListCustomerGroups
     * Retrieves the list of customer groups of a business.
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination). (optional)
     * @param limit The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.  The limit is ignored if it is less than 1 or greater than 50. The default value is 50.  For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination). (optional)
     * @return ListCustomerGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListCustomerGroupsResponse listCustomerGroups(String cursor, Integer limit) throws ApiException {
        ApiResponse<ListCustomerGroupsResponse> localVarResp = listCustomerGroupsWithHttpInfo(cursor, limit);
        return localVarResp.getData();
    }

    /**
     * ListCustomerGroups
     * Retrieves the list of customer groups of a business.
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination). (optional)
     * @param limit The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.  The limit is ignored if it is less than 1 or greater than 50. The default value is 50.  For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination). (optional)
     * @return ApiResponse&lt;ListCustomerGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCustomerGroupsResponse> listCustomerGroupsWithHttpInfo(String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listCustomerGroupsValidateBeforeCall(cursor, limit, null);
        Type localVarReturnType = new TypeToken<ListCustomerGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListCustomerGroups (asynchronously)
     * Retrieves the list of customer groups of a business.
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination). (optional)
     * @param limit The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.  The limit is ignored if it is less than 1 or greater than 50. The default value is 50.  For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomerGroupsAsync(String cursor, Integer limit, final ApiCallback<ListCustomerGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomerGroupsValidateBeforeCall(cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<ListCustomerGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveCustomerGroup
     * @param groupId The ID of the customer group to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveCustomerGroupCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveCustomerGroupValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling retrieveCustomerGroup(Async)");
        }

        return retrieveCustomerGroupCall(groupId, _callback);

    }

    /**
     * RetrieveCustomerGroup
     * Retrieves a specific customer group as identified by the &#x60;group_id&#x60; value.
     * @param groupId The ID of the customer group to retrieve. (required)
     * @return RetrieveCustomerGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveCustomerGroupResponse retrieveCustomerGroup(String groupId) throws ApiException {
        ApiResponse<RetrieveCustomerGroupResponse> localVarResp = retrieveCustomerGroupWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * RetrieveCustomerGroup
     * Retrieves a specific customer group as identified by the &#x60;group_id&#x60; value.
     * @param groupId The ID of the customer group to retrieve. (required)
     * @return ApiResponse&lt;RetrieveCustomerGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveCustomerGroupResponse> retrieveCustomerGroupWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = retrieveCustomerGroupValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<RetrieveCustomerGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveCustomerGroup (asynchronously)
     * Retrieves a specific customer group as identified by the &#x60;group_id&#x60; value.
     * @param groupId The ID of the customer group to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveCustomerGroupAsync(String groupId, final ApiCallback<RetrieveCustomerGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveCustomerGroupValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveCustomerGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomerGroup
     * @param groupId The ID of the customer group to update. (required)
     * @param updateCustomerGroupRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerGroupCall(String groupId, UpdateCustomerGroupRequest updateCustomerGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCustomerGroupRequest;

        // create path and map variables
        String localVarPath = "/v2/customers/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomerGroupValidateBeforeCall(String groupId, UpdateCustomerGroupRequest updateCustomerGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateCustomerGroup(Async)");
        }

        // verify the required parameter 'updateCustomerGroupRequest' is set
        if (updateCustomerGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCustomerGroupRequest' when calling updateCustomerGroup(Async)");
        }

        return updateCustomerGroupCall(groupId, updateCustomerGroupRequest, _callback);

    }

    /**
     * UpdateCustomerGroup
     * Updates a customer group as identified by the &#x60;group_id&#x60; value.
     * @param groupId The ID of the customer group to update. (required)
     * @param updateCustomerGroupRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return UpdateCustomerGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCustomerGroupResponse updateCustomerGroup(String groupId, UpdateCustomerGroupRequest updateCustomerGroupRequest) throws ApiException {
        ApiResponse<UpdateCustomerGroupResponse> localVarResp = updateCustomerGroupWithHttpInfo(groupId, updateCustomerGroupRequest);
        return localVarResp.getData();
    }

    /**
     * UpdateCustomerGroup
     * Updates a customer group as identified by the &#x60;group_id&#x60; value.
     * @param groupId The ID of the customer group to update. (required)
     * @param updateCustomerGroupRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;UpdateCustomerGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateCustomerGroupResponse> updateCustomerGroupWithHttpInfo(String groupId, UpdateCustomerGroupRequest updateCustomerGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCustomerGroupValidateBeforeCall(groupId, updateCustomerGroupRequest, null);
        Type localVarReturnType = new TypeToken<UpdateCustomerGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateCustomerGroup (asynchronously)
     * Updates a customer group as identified by the &#x60;group_id&#x60; value.
     * @param groupId The ID of the customer group to update. (required)
     * @param updateCustomerGroupRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerGroupAsync(String groupId, UpdateCustomerGroupRequest updateCustomerGroupRequest, final ApiCallback<UpdateCustomerGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomerGroupValidateBeforeCall(groupId, updateCustomerGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateCustomerGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
