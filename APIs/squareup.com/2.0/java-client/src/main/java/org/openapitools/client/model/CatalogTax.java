/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A tax applicable to an item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogTax {
  public static final String SERIALIZED_NAME_APPLIES_TO_CUSTOM_AMOUNTS = "applies_to_custom_amounts";
  @SerializedName(SERIALIZED_NAME_APPLIES_TO_CUSTOM_AMOUNTS)
  private Boolean appliesToCustomAmounts;

  public static final String SERIALIZED_NAME_CALCULATION_PHASE = "calculation_phase";
  @SerializedName(SERIALIZED_NAME_CALCULATION_PHASE)
  private String calculationPhase;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_INCLUSION_TYPE = "inclusion_type";
  @SerializedName(SERIALIZED_NAME_INCLUSION_TYPE)
  private String inclusionType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private String percentage;

  public CatalogTax() {
  }

  public CatalogTax appliesToCustomAmounts(Boolean appliesToCustomAmounts) {
    this.appliesToCustomAmounts = appliesToCustomAmounts;
    return this;
  }

  /**
   * If &#x60;true&#x60;, the fee applies to custom amounts entered into the Square Point of Sale app that are not associated with a particular &#x60;CatalogItem&#x60;.
   * @return appliesToCustomAmounts
   */
  @javax.annotation.Nullable
  public Boolean getAppliesToCustomAmounts() {
    return appliesToCustomAmounts;
  }

  public void setAppliesToCustomAmounts(Boolean appliesToCustomAmounts) {
    this.appliesToCustomAmounts = appliesToCustomAmounts;
  }


  public CatalogTax calculationPhase(String calculationPhase) {
    this.calculationPhase = calculationPhase;
    return this;
  }

  /**
   * Whether the tax is calculated based on a payment&#39;s subtotal or total.
   * @return calculationPhase
   */
  @javax.annotation.Nullable
  public String getCalculationPhase() {
    return calculationPhase;
  }

  public void setCalculationPhase(String calculationPhase) {
    this.calculationPhase = calculationPhase;
  }


  public CatalogTax enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * A Boolean flag to indicate whether the tax is displayed as enabled (&#x60;true&#x60;) in the Square Point of Sale app or not (&#x60;false&#x60;).
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CatalogTax inclusionType(String inclusionType) {
    this.inclusionType = inclusionType;
    return this;
  }

  /**
   * Whether the tax is &#x60;ADDITIVE&#x60; or &#x60;INCLUSIVE&#x60;.
   * @return inclusionType
   */
  @javax.annotation.Nullable
  public String getInclusionType() {
    return inclusionType;
  }

  public void setInclusionType(String inclusionType) {
    this.inclusionType = inclusionType;
  }


  public CatalogTax name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The tax&#39;s name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CatalogTax percentage(String percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * The percentage of the tax in decimal form, using a &#x60;&#39;.&#39;&#x60; as the decimal separator and without a &#x60;&#39;%&#39;&#x60; sign. A value of &#x60;7.5&#x60; corresponds to 7.5%.
   * @return percentage
   */
  @javax.annotation.Nullable
  public String getPercentage() {
    return percentage;
  }

  public void setPercentage(String percentage) {
    this.percentage = percentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogTax catalogTax = (CatalogTax) o;
    return Objects.equals(this.appliesToCustomAmounts, catalogTax.appliesToCustomAmounts) &&
        Objects.equals(this.calculationPhase, catalogTax.calculationPhase) &&
        Objects.equals(this.enabled, catalogTax.enabled) &&
        Objects.equals(this.inclusionType, catalogTax.inclusionType) &&
        Objects.equals(this.name, catalogTax.name) &&
        Objects.equals(this.percentage, catalogTax.percentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliesToCustomAmounts, calculationPhase, enabled, inclusionType, name, percentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogTax {\n");
    sb.append("    appliesToCustomAmounts: ").append(toIndentedString(appliesToCustomAmounts)).append("\n");
    sb.append("    calculationPhase: ").append(toIndentedString(calculationPhase)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    inclusionType: ").append(toIndentedString(inclusionType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applies_to_custom_amounts");
    openapiFields.add("calculation_phase");
    openapiFields.add("enabled");
    openapiFields.add("inclusion_type");
    openapiFields.add("name");
    openapiFields.add("percentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogTax
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogTax.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogTax is not found in the empty JSON string", CatalogTax.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogTax.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogTax` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("calculation_phase") != null && !jsonObj.get("calculation_phase").isJsonNull()) && !jsonObj.get("calculation_phase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calculation_phase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calculation_phase").toString()));
      }
      if ((jsonObj.get("inclusion_type") != null && !jsonObj.get("inclusion_type").isJsonNull()) && !jsonObj.get("inclusion_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inclusion_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inclusion_type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("percentage") != null && !jsonObj.get("percentage").isJsonNull()) && !jsonObj.get("percentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogTax.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogTax' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogTax> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogTax.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogTax>() {
           @Override
           public void write(JsonWriter out, CatalogTax value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogTax read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogTax given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogTax
   * @throws IOException if the JSON string is invalid with respect to CatalogTax
   */
  public static CatalogTax fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogTax.class);
  }

  /**
   * Convert an instance of CatalogTax to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

