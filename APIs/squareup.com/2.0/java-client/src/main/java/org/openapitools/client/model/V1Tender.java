/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.V1Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A tender represents a discrete monetary exchange. Square represents this exchange as a money object with a specific currency and amount, where the amount is given in the smallest denomination of the given currency.  Square POS can accept more than one form of tender for a single payment (such as by splitting a bill between a credit card and a gift card). The &#x60;tender&#x60; field of the Payment object lists all forms of tender used for the payment.  Split tender payments behave slightly differently from single tender payments:  The receipt_url for a split tender corresponds only to the first tender listed in the tender field. To get the receipt URLs for the remaining tenders, use the receipt_url fields of the corresponding Tender objects.  *A note on gift cards**: when a customer purchases a Square gift card from a merchant, the merchant receives the full amount of the gift card in the associated payment.  When that gift card is used as a tender, the balance of the gift card is reduced and the merchant receives no funds. A &#x60;Tender&#x60; object with a type of &#x60;SQUARE_GIFT_CARD&#x60; indicates a gift card was used for some or all of the associated payment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V1Tender {
  public static final String SERIALIZED_NAME_CARD_BRAND = "card_brand";
  @SerializedName(SERIALIZED_NAME_CARD_BRAND)
  private String cardBrand;

  public static final String SERIALIZED_NAME_CHANGE_BACK_MONEY = "change_back_money";
  @SerializedName(SERIALIZED_NAME_CHANGE_BACK_MONEY)
  private V1Money changeBackMoney;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employee_id";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_ENTRY_METHOD = "entry_method";
  @SerializedName(SERIALIZED_NAME_ENTRY_METHOD)
  private String entryMethod;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_EXCHANGE = "is_exchange";
  @SerializedName(SERIALIZED_NAME_IS_EXCHANGE)
  private Boolean isExchange;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAN_SUFFIX = "pan_suffix";
  @SerializedName(SERIALIZED_NAME_PAN_SUFFIX)
  private String panSuffix;

  public static final String SERIALIZED_NAME_PAYMENT_NOTE = "payment_note";
  @SerializedName(SERIALIZED_NAME_PAYMENT_NOTE)
  private String paymentNote;

  public static final String SERIALIZED_NAME_RECEIPT_URL = "receipt_url";
  @SerializedName(SERIALIZED_NAME_RECEIPT_URL)
  private String receiptUrl;

  public static final String SERIALIZED_NAME_REFUNDED_MONEY = "refunded_money";
  @SerializedName(SERIALIZED_NAME_REFUNDED_MONEY)
  private V1Money refundedMoney;

  public static final String SERIALIZED_NAME_SETTLED_AT = "settled_at";
  @SerializedName(SERIALIZED_NAME_SETTLED_AT)
  private String settledAt;

  public static final String SERIALIZED_NAME_TENDERED_AT = "tendered_at";
  @SerializedName(SERIALIZED_NAME_TENDERED_AT)
  private String tenderedAt;

  public static final String SERIALIZED_NAME_TENDERED_MONEY = "tendered_money";
  @SerializedName(SERIALIZED_NAME_TENDERED_MONEY)
  private V1Money tenderedMoney;

  public static final String SERIALIZED_NAME_TOTAL_MONEY = "total_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_MONEY)
  private V1Money totalMoney;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public V1Tender() {
  }

  public V1Tender cardBrand(String cardBrand) {
    this.cardBrand = cardBrand;
    return this;
  }

  /**
   * The brand of credit card provided.
   * @return cardBrand
   */
  @javax.annotation.Nullable
  public String getCardBrand() {
    return cardBrand;
  }

  public void setCardBrand(String cardBrand) {
    this.cardBrand = cardBrand;
  }


  public V1Tender changeBackMoney(V1Money changeBackMoney) {
    this.changeBackMoney = changeBackMoney;
    return this;
  }

  /**
   * Get changeBackMoney
   * @return changeBackMoney
   */
  @javax.annotation.Nullable
  public V1Money getChangeBackMoney() {
    return changeBackMoney;
  }

  public void setChangeBackMoney(V1Money changeBackMoney) {
    this.changeBackMoney = changeBackMoney;
  }


  public V1Tender employeeId(String employeeId) {
    this.employeeId = employeeId;
    return this;
  }

  /**
   * The ID of the employee that processed the tender.
   * @return employeeId
   */
  @javax.annotation.Nullable
  public String getEmployeeId() {
    return employeeId;
  }

  public void setEmployeeId(String employeeId) {
    this.employeeId = employeeId;
  }


  public V1Tender entryMethod(String entryMethod) {
    this.entryMethod = entryMethod;
    return this;
  }

  /**
   * The tender&#39;s unique ID.
   * @return entryMethod
   */
  @javax.annotation.Nullable
  public String getEntryMethod() {
    return entryMethod;
  }

  public void setEntryMethod(String entryMethod) {
    this.entryMethod = entryMethod;
  }


  public V1Tender id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The tender&#39;s unique ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public V1Tender isExchange(Boolean isExchange) {
    this.isExchange = isExchange;
    return this;
  }

  /**
   * Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange.
   * @return isExchange
   */
  @javax.annotation.Nullable
  public Boolean getIsExchange() {
    return isExchange;
  }

  public void setIsExchange(Boolean isExchange) {
    this.isExchange = isExchange;
  }


  public V1Tender name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A human-readable description of the tender.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public V1Tender panSuffix(String panSuffix) {
    this.panSuffix = panSuffix;
    return this;
  }

  /**
   * The last four digits of the provided credit card&#39;s account number.
   * @return panSuffix
   */
  @javax.annotation.Nullable
  public String getPanSuffix() {
    return panSuffix;
  }

  public void setPanSuffix(String panSuffix) {
    this.panSuffix = panSuffix;
  }


  public V1Tender paymentNote(String paymentNote) {
    this.paymentNote = paymentNote;
    return this;
  }

  /**
   * Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER.
   * @return paymentNote
   */
  @javax.annotation.Nullable
  public String getPaymentNote() {
    return paymentNote;
  }

  public void setPaymentNote(String paymentNote) {
    this.paymentNote = paymentNote;
  }


  public V1Tender receiptUrl(String receiptUrl) {
    this.receiptUrl = receiptUrl;
    return this;
  }

  /**
   * The URL of the receipt for the tender.
   * @return receiptUrl
   */
  @javax.annotation.Nullable
  public String getReceiptUrl() {
    return receiptUrl;
  }

  public void setReceiptUrl(String receiptUrl) {
    this.receiptUrl = receiptUrl;
  }


  public V1Tender refundedMoney(V1Money refundedMoney) {
    this.refundedMoney = refundedMoney;
    return this;
  }

  /**
   * Get refundedMoney
   * @return refundedMoney
   */
  @javax.annotation.Nullable
  public V1Money getRefundedMoney() {
    return refundedMoney;
  }

  public void setRefundedMoney(V1Money refundedMoney) {
    this.refundedMoney = refundedMoney;
  }


  public V1Tender settledAt(String settledAt) {
    this.settledAt = settledAt;
    return this;
  }

  /**
   * The time when the tender was settled, in ISO 8601 format.
   * @return settledAt
   */
  @javax.annotation.Nullable
  public String getSettledAt() {
    return settledAt;
  }

  public void setSettledAt(String settledAt) {
    this.settledAt = settledAt;
  }


  public V1Tender tenderedAt(String tenderedAt) {
    this.tenderedAt = tenderedAt;
    return this;
  }

  /**
   * The time when the tender was created, in ISO 8601 format.
   * @return tenderedAt
   */
  @javax.annotation.Nullable
  public String getTenderedAt() {
    return tenderedAt;
  }

  public void setTenderedAt(String tenderedAt) {
    this.tenderedAt = tenderedAt;
  }


  public V1Tender tenderedMoney(V1Money tenderedMoney) {
    this.tenderedMoney = tenderedMoney;
    return this;
  }

  /**
   * Get tenderedMoney
   * @return tenderedMoney
   */
  @javax.annotation.Nullable
  public V1Money getTenderedMoney() {
    return tenderedMoney;
  }

  public void setTenderedMoney(V1Money tenderedMoney) {
    this.tenderedMoney = tenderedMoney;
  }


  public V1Tender totalMoney(V1Money totalMoney) {
    this.totalMoney = totalMoney;
    return this;
  }

  /**
   * Get totalMoney
   * @return totalMoney
   */
  @javax.annotation.Nullable
  public V1Money getTotalMoney() {
    return totalMoney;
  }

  public void setTotalMoney(V1Money totalMoney) {
    this.totalMoney = totalMoney;
  }


  public V1Tender type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of tender.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1Tender v1Tender = (V1Tender) o;
    return Objects.equals(this.cardBrand, v1Tender.cardBrand) &&
        Objects.equals(this.changeBackMoney, v1Tender.changeBackMoney) &&
        Objects.equals(this.employeeId, v1Tender.employeeId) &&
        Objects.equals(this.entryMethod, v1Tender.entryMethod) &&
        Objects.equals(this.id, v1Tender.id) &&
        Objects.equals(this.isExchange, v1Tender.isExchange) &&
        Objects.equals(this.name, v1Tender.name) &&
        Objects.equals(this.panSuffix, v1Tender.panSuffix) &&
        Objects.equals(this.paymentNote, v1Tender.paymentNote) &&
        Objects.equals(this.receiptUrl, v1Tender.receiptUrl) &&
        Objects.equals(this.refundedMoney, v1Tender.refundedMoney) &&
        Objects.equals(this.settledAt, v1Tender.settledAt) &&
        Objects.equals(this.tenderedAt, v1Tender.tenderedAt) &&
        Objects.equals(this.tenderedMoney, v1Tender.tenderedMoney) &&
        Objects.equals(this.totalMoney, v1Tender.totalMoney) &&
        Objects.equals(this.type, v1Tender.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardBrand, changeBackMoney, employeeId, entryMethod, id, isExchange, name, panSuffix, paymentNote, receiptUrl, refundedMoney, settledAt, tenderedAt, tenderedMoney, totalMoney, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1Tender {\n");
    sb.append("    cardBrand: ").append(toIndentedString(cardBrand)).append("\n");
    sb.append("    changeBackMoney: ").append(toIndentedString(changeBackMoney)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    entryMethod: ").append(toIndentedString(entryMethod)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isExchange: ").append(toIndentedString(isExchange)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    panSuffix: ").append(toIndentedString(panSuffix)).append("\n");
    sb.append("    paymentNote: ").append(toIndentedString(paymentNote)).append("\n");
    sb.append("    receiptUrl: ").append(toIndentedString(receiptUrl)).append("\n");
    sb.append("    refundedMoney: ").append(toIndentedString(refundedMoney)).append("\n");
    sb.append("    settledAt: ").append(toIndentedString(settledAt)).append("\n");
    sb.append("    tenderedAt: ").append(toIndentedString(tenderedAt)).append("\n");
    sb.append("    tenderedMoney: ").append(toIndentedString(tenderedMoney)).append("\n");
    sb.append("    totalMoney: ").append(toIndentedString(totalMoney)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("card_brand");
    openapiFields.add("change_back_money");
    openapiFields.add("employee_id");
    openapiFields.add("entry_method");
    openapiFields.add("id");
    openapiFields.add("is_exchange");
    openapiFields.add("name");
    openapiFields.add("pan_suffix");
    openapiFields.add("payment_note");
    openapiFields.add("receipt_url");
    openapiFields.add("refunded_money");
    openapiFields.add("settled_at");
    openapiFields.add("tendered_at");
    openapiFields.add("tendered_money");
    openapiFields.add("total_money");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1Tender
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1Tender.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1Tender is not found in the empty JSON string", V1Tender.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1Tender.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1Tender` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("card_brand") != null && !jsonObj.get("card_brand").isJsonNull()) && !jsonObj.get("card_brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_brand").toString()));
      }
      // validate the optional field `change_back_money`
      if (jsonObj.get("change_back_money") != null && !jsonObj.get("change_back_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("change_back_money"));
      }
      if ((jsonObj.get("employee_id") != null && !jsonObj.get("employee_id").isJsonNull()) && !jsonObj.get("employee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_id").toString()));
      }
      if ((jsonObj.get("entry_method") != null && !jsonObj.get("entry_method").isJsonNull()) && !jsonObj.get("entry_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entry_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entry_method").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pan_suffix") != null && !jsonObj.get("pan_suffix").isJsonNull()) && !jsonObj.get("pan_suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pan_suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pan_suffix").toString()));
      }
      if ((jsonObj.get("payment_note") != null && !jsonObj.get("payment_note").isJsonNull()) && !jsonObj.get("payment_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_note").toString()));
      }
      if ((jsonObj.get("receipt_url") != null && !jsonObj.get("receipt_url").isJsonNull()) && !jsonObj.get("receipt_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receipt_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receipt_url").toString()));
      }
      // validate the optional field `refunded_money`
      if (jsonObj.get("refunded_money") != null && !jsonObj.get("refunded_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("refunded_money"));
      }
      if ((jsonObj.get("settled_at") != null && !jsonObj.get("settled_at").isJsonNull()) && !jsonObj.get("settled_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settled_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settled_at").toString()));
      }
      if ((jsonObj.get("tendered_at") != null && !jsonObj.get("tendered_at").isJsonNull()) && !jsonObj.get("tendered_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tendered_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tendered_at").toString()));
      }
      // validate the optional field `tendered_money`
      if (jsonObj.get("tendered_money") != null && !jsonObj.get("tendered_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("tendered_money"));
      }
      // validate the optional field `total_money`
      if (jsonObj.get("total_money") != null && !jsonObj.get("total_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("total_money"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1Tender.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1Tender' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1Tender> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1Tender.class));

       return (TypeAdapter<T>) new TypeAdapter<V1Tender>() {
           @Override
           public void write(JsonWriter out, V1Tender value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1Tender read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1Tender given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1Tender
   * @throws IOException if the JSON string is invalid with respect to V1Tender
   */
  public static V1Tender fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1Tender.class);
  }

  /**
   * Convert an instance of V1Tender to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

