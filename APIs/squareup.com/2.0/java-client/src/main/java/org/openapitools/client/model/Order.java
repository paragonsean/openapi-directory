/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Money;
import org.openapitools.client.model.OrderFulfillment;
import org.openapitools.client.model.OrderLineItem;
import org.openapitools.client.model.OrderLineItemDiscount;
import org.openapitools.client.model.OrderLineItemTax;
import org.openapitools.client.model.OrderMoneyAmounts;
import org.openapitools.client.model.OrderPricingOptions;
import org.openapitools.client.model.OrderReturn;
import org.openapitools.client.model.OrderReward;
import org.openapitools.client.model.OrderRoundingAdjustment;
import org.openapitools.client.model.OrderServiceCharge;
import org.openapitools.client.model.OrderSource;
import org.openapitools.client.model.Refund;
import org.openapitools.client.model.Tender;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains all information related to a single order to process with Square, including line items that specify the products to purchase. &#x60;Order&#x60; objects also include information about any associated tenders, refunds, and returns.  All Connect V2 Transactions have all been converted to Orders including all associated itemization data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Order {
  public static final String SERIALIZED_NAME_CLOSED_AT = "closed_at";
  @SerializedName(SERIALIZED_NAME_CLOSED_AT)
  private String closedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_DISCOUNTS = "discounts";
  @SerializedName(SERIALIZED_NAME_DISCOUNTS)
  private List<OrderLineItemDiscount> discounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_FULFILLMENTS = "fulfillments";
  @SerializedName(SERIALIZED_NAME_FULFILLMENTS)
  private List<OrderFulfillment> fulfillments = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "line_items";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<OrderLineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_NET_AMOUNTS = "net_amounts";
  @SerializedName(SERIALIZED_NAME_NET_AMOUNTS)
  private OrderMoneyAmounts netAmounts;

  public static final String SERIALIZED_NAME_PRICING_OPTIONS = "pricing_options";
  @SerializedName(SERIALIZED_NAME_PRICING_OPTIONS)
  private OrderPricingOptions pricingOptions;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "reference_id";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_REFUNDS = "refunds";
  @SerializedName(SERIALIZED_NAME_REFUNDS)
  private List<Refund> refunds = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURN_AMOUNTS = "return_amounts";
  @SerializedName(SERIALIZED_NAME_RETURN_AMOUNTS)
  private OrderMoneyAmounts returnAmounts;

  public static final String SERIALIZED_NAME_RETURNS = "returns";
  @SerializedName(SERIALIZED_NAME_RETURNS)
  private List<OrderReturn> returns = new ArrayList<>();

  public static final String SERIALIZED_NAME_REWARDS = "rewards";
  @SerializedName(SERIALIZED_NAME_REWARDS)
  private List<OrderReward> rewards = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROUNDING_ADJUSTMENT = "rounding_adjustment";
  @SerializedName(SERIALIZED_NAME_ROUNDING_ADJUSTMENT)
  private OrderRoundingAdjustment roundingAdjustment;

  public static final String SERIALIZED_NAME_SERVICE_CHARGES = "service_charges";
  @SerializedName(SERIALIZED_NAME_SERVICE_CHARGES)
  private List<OrderServiceCharge> serviceCharges = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private OrderSource source;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private List<OrderLineItemTax> taxes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TENDERS = "tenders";
  @SerializedName(SERIALIZED_NAME_TENDERS)
  private List<Tender> tenders = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNT_MONEY = "total_discount_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNT_MONEY)
  private Money totalDiscountMoney;

  public static final String SERIALIZED_NAME_TOTAL_MONEY = "total_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_MONEY)
  private Money totalMoney;

  public static final String SERIALIZED_NAME_TOTAL_SERVICE_CHARGE_MONEY = "total_service_charge_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_SERVICE_CHARGE_MONEY)
  private Money totalServiceChargeMoney;

  public static final String SERIALIZED_NAME_TOTAL_TAX_MONEY = "total_tax_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX_MONEY)
  private Money totalTaxMoney;

  public static final String SERIALIZED_NAME_TOTAL_TIP_MONEY = "total_tip_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_TIP_MONEY)
  private Money totalTipMoney;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public Order() {
  }

  public Order closedAt(String closedAt) {
    this.closedAt = closedAt;
    return this;
  }

  /**
   * The timestamp for when the order reached a terminal [state](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderState), in RFC 3339 format (for example \&quot;2016-09-04T23:59:33.123Z\&quot;).
   * @return closedAt
   */
  @javax.annotation.Nullable
  public String getClosedAt() {
    return closedAt;
  }

  public void setClosedAt(String closedAt) {
    this.closedAt = closedAt;
  }


  public Order createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The timestamp for when the order was created, in RFC 3339 format (for example, \&quot;2016-09-04T23:59:33.123Z\&quot;).
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Order customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) associated with the order.  __IMPORTANT:__ You should specify a &#x60;customer_id&#x60; if you want the corresponding payment transactions to be explicitly linked to the customer in the Seller Dashboard. If this field is omitted, the  &#x60;customer_id&#x60; assigned to any underlying &#x60;Payment&#x60; objects is ignored and might result in the  creation of new [instant profiles](https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public Order discounts(List<OrderLineItemDiscount> discounts) {
    this.discounts = discounts;
    return this;
  }

  public Order addDiscountsItem(OrderLineItemDiscount discountsItem) {
    if (this.discounts == null) {
      this.discounts = new ArrayList<>();
    }
    this.discounts.add(discountsItem);
    return this;
  }

  /**
   * The list of all discounts associated with the order.  Discounts can be scoped to either &#x60;ORDER&#x60; or &#x60;LINE_ITEM&#x60;. For discounts scoped to &#x60;LINE_ITEM&#x60;, an &#x60;OrderLineItemAppliedDiscount&#x60; must be added to each line item that the discount applies to. For discounts with &#x60;ORDER&#x60; scope, the server generates an &#x60;OrderLineItemAppliedDiscount&#x60; for every line item.  __IMPORTANT__: If &#x60;LINE_ITEM&#x60; scope is set on any discounts in this field, using the deprecated &#x60;line_items.discounts&#x60; field results in an error. Use &#x60;line_items.applied_discounts&#x60; instead.
   * @return discounts
   */
  @javax.annotation.Nullable
  public List<OrderLineItemDiscount> getDiscounts() {
    return discounts;
  }

  public void setDiscounts(List<OrderLineItemDiscount> discounts) {
    this.discounts = discounts;
  }


  public Order fulfillments(List<OrderFulfillment> fulfillments) {
    this.fulfillments = fulfillments;
    return this;
  }

  public Order addFulfillmentsItem(OrderFulfillment fulfillmentsItem) {
    if (this.fulfillments == null) {
      this.fulfillments = new ArrayList<>();
    }
    this.fulfillments.add(fulfillmentsItem);
    return this;
  }

  /**
   * Details about order fulfillment.  Orders can only be created with at most one fulfillment. However, orders returned by the API might contain multiple fulfillments.
   * @return fulfillments
   */
  @javax.annotation.Nullable
  public List<OrderFulfillment> getFulfillments() {
    return fulfillments;
  }

  public void setFulfillments(List<OrderFulfillment> fulfillments) {
    this.fulfillments = fulfillments;
  }


  public Order id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The order&#39;s unique ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Order lineItems(List<OrderLineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public Order addLineItemsItem(OrderLineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * The line items included in the order.
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<OrderLineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<OrderLineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public Order locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The ID of the seller location that this order is associated with.
   * @return locationId
   */
  @javax.annotation.Nonnull
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public Order metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public Order putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Application-defined data attached to this order. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set &#x60;[a-zA-Z0-9_-]&#x60;. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a &#39;:&#39; character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public Order netAmounts(OrderMoneyAmounts netAmounts) {
    this.netAmounts = netAmounts;
    return this;
  }

  /**
   * Get netAmounts
   * @return netAmounts
   */
  @javax.annotation.Nullable
  public OrderMoneyAmounts getNetAmounts() {
    return netAmounts;
  }

  public void setNetAmounts(OrderMoneyAmounts netAmounts) {
    this.netAmounts = netAmounts;
  }


  public Order pricingOptions(OrderPricingOptions pricingOptions) {
    this.pricingOptions = pricingOptions;
    return this;
  }

  /**
   * Get pricingOptions
   * @return pricingOptions
   */
  @javax.annotation.Nullable
  public OrderPricingOptions getPricingOptions() {
    return pricingOptions;
  }

  public void setPricingOptions(OrderPricingOptions pricingOptions) {
    this.pricingOptions = pricingOptions;
  }


  public Order referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * A client-specified ID to associate an entity in another system with this order.
   * @return referenceId
   */
  @javax.annotation.Nullable
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public Order refunds(List<Refund> refunds) {
    this.refunds = refunds;
    return this;
  }

  public Order addRefundsItem(Refund refundsItem) {
    if (this.refunds == null) {
      this.refunds = new ArrayList<>();
    }
    this.refunds.add(refundsItem);
    return this;
  }

  /**
   * The refunds that are part of this order.
   * @return refunds
   */
  @javax.annotation.Nullable
  public List<Refund> getRefunds() {
    return refunds;
  }

  public void setRefunds(List<Refund> refunds) {
    this.refunds = refunds;
  }


  public Order returnAmounts(OrderMoneyAmounts returnAmounts) {
    this.returnAmounts = returnAmounts;
    return this;
  }

  /**
   * Get returnAmounts
   * @return returnAmounts
   */
  @javax.annotation.Nullable
  public OrderMoneyAmounts getReturnAmounts() {
    return returnAmounts;
  }

  public void setReturnAmounts(OrderMoneyAmounts returnAmounts) {
    this.returnAmounts = returnAmounts;
  }


  public Order returns(List<OrderReturn> returns) {
    this.returns = returns;
    return this;
  }

  public Order addReturnsItem(OrderReturn returnsItem) {
    if (this.returns == null) {
      this.returns = new ArrayList<>();
    }
    this.returns.add(returnsItem);
    return this;
  }

  /**
   * A collection of items from sale orders being returned in this one. Normally part of an itemized return or exchange. There is exactly one &#x60;Return&#x60; object per sale &#x60;Order&#x60; being referenced.
   * @return returns
   */
  @javax.annotation.Nullable
  public List<OrderReturn> getReturns() {
    return returns;
  }

  public void setReturns(List<OrderReturn> returns) {
    this.returns = returns;
  }


  public Order rewards(List<OrderReward> rewards) {
    this.rewards = rewards;
    return this;
  }

  public Order addRewardsItem(OrderReward rewardsItem) {
    if (this.rewards == null) {
      this.rewards = new ArrayList<>();
    }
    this.rewards.add(rewardsItem);
    return this;
  }

  /**
   * A set-like list of Rewards that have been added to the Order.
   * @return rewards
   */
  @javax.annotation.Nullable
  public List<OrderReward> getRewards() {
    return rewards;
  }

  public void setRewards(List<OrderReward> rewards) {
    this.rewards = rewards;
  }


  public Order roundingAdjustment(OrderRoundingAdjustment roundingAdjustment) {
    this.roundingAdjustment = roundingAdjustment;
    return this;
  }

  /**
   * Get roundingAdjustment
   * @return roundingAdjustment
   */
  @javax.annotation.Nullable
  public OrderRoundingAdjustment getRoundingAdjustment() {
    return roundingAdjustment;
  }

  public void setRoundingAdjustment(OrderRoundingAdjustment roundingAdjustment) {
    this.roundingAdjustment = roundingAdjustment;
  }


  public Order serviceCharges(List<OrderServiceCharge> serviceCharges) {
    this.serviceCharges = serviceCharges;
    return this;
  }

  public Order addServiceChargesItem(OrderServiceCharge serviceChargesItem) {
    if (this.serviceCharges == null) {
      this.serviceCharges = new ArrayList<>();
    }
    this.serviceCharges.add(serviceChargesItem);
    return this;
  }

  /**
   * A list of service charges applied to the order.
   * @return serviceCharges
   */
  @javax.annotation.Nullable
  public List<OrderServiceCharge> getServiceCharges() {
    return serviceCharges;
  }

  public void setServiceCharges(List<OrderServiceCharge> serviceCharges) {
    this.serviceCharges = serviceCharges;
  }


  public Order source(OrderSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public OrderSource getSource() {
    return source;
  }

  public void setSource(OrderSource source) {
    this.source = source;
  }


  public Order state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The current state of the order: &#x60;OPEN&#x60;, &#x60;COMPLETED&#x60;, or &#x60;CANCELED&#x60;.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Order taxes(List<OrderLineItemTax> taxes) {
    this.taxes = taxes;
    return this;
  }

  public Order addTaxesItem(OrderLineItemTax taxesItem) {
    if (this.taxes == null) {
      this.taxes = new ArrayList<>();
    }
    this.taxes.add(taxesItem);
    return this;
  }

  /**
   * The list of all taxes associated with the order.  Taxes can be scoped to either &#x60;ORDER&#x60; or &#x60;LINE_ITEM&#x60;. For taxes with &#x60;LINE_ITEM&#x60; scope, an &#x60;OrderLineItemAppliedTax&#x60; must be added to each line item that the tax applies to. For taxes with &#x60;ORDER&#x60; scope, the server generates an &#x60;OrderLineItemAppliedTax&#x60; for every line item.  On reads, each tax in the list includes the total amount of that tax applied to the order.  __IMPORTANT__: If &#x60;LINE_ITEM&#x60; scope is set on any taxes in this field, using the deprecated &#x60;line_items.taxes&#x60; field results in an error. Use &#x60;line_items.applied_taxes&#x60; instead.
   * @return taxes
   */
  @javax.annotation.Nullable
  public List<OrderLineItemTax> getTaxes() {
    return taxes;
  }

  public void setTaxes(List<OrderLineItemTax> taxes) {
    this.taxes = taxes;
  }


  public Order tenders(List<Tender> tenders) {
    this.tenders = tenders;
    return this;
  }

  public Order addTendersItem(Tender tendersItem) {
    if (this.tenders == null) {
      this.tenders = new ArrayList<>();
    }
    this.tenders.add(tendersItem);
    return this;
  }

  /**
   * The tenders that were used to pay for the order.
   * @return tenders
   */
  @javax.annotation.Nullable
  public List<Tender> getTenders() {
    return tenders;
  }

  public void setTenders(List<Tender> tenders) {
    this.tenders = tenders;
  }


  public Order totalDiscountMoney(Money totalDiscountMoney) {
    this.totalDiscountMoney = totalDiscountMoney;
    return this;
  }

  /**
   * Get totalDiscountMoney
   * @return totalDiscountMoney
   */
  @javax.annotation.Nullable
  public Money getTotalDiscountMoney() {
    return totalDiscountMoney;
  }

  public void setTotalDiscountMoney(Money totalDiscountMoney) {
    this.totalDiscountMoney = totalDiscountMoney;
  }


  public Order totalMoney(Money totalMoney) {
    this.totalMoney = totalMoney;
    return this;
  }

  /**
   * Get totalMoney
   * @return totalMoney
   */
  @javax.annotation.Nullable
  public Money getTotalMoney() {
    return totalMoney;
  }

  public void setTotalMoney(Money totalMoney) {
    this.totalMoney = totalMoney;
  }


  public Order totalServiceChargeMoney(Money totalServiceChargeMoney) {
    this.totalServiceChargeMoney = totalServiceChargeMoney;
    return this;
  }

  /**
   * Get totalServiceChargeMoney
   * @return totalServiceChargeMoney
   */
  @javax.annotation.Nullable
  public Money getTotalServiceChargeMoney() {
    return totalServiceChargeMoney;
  }

  public void setTotalServiceChargeMoney(Money totalServiceChargeMoney) {
    this.totalServiceChargeMoney = totalServiceChargeMoney;
  }


  public Order totalTaxMoney(Money totalTaxMoney) {
    this.totalTaxMoney = totalTaxMoney;
    return this;
  }

  /**
   * Get totalTaxMoney
   * @return totalTaxMoney
   */
  @javax.annotation.Nullable
  public Money getTotalTaxMoney() {
    return totalTaxMoney;
  }

  public void setTotalTaxMoney(Money totalTaxMoney) {
    this.totalTaxMoney = totalTaxMoney;
  }


  public Order totalTipMoney(Money totalTipMoney) {
    this.totalTipMoney = totalTipMoney;
    return this;
  }

  /**
   * Get totalTipMoney
   * @return totalTipMoney
   */
  @javax.annotation.Nullable
  public Money getTotalTipMoney() {
    return totalTipMoney;
  }

  public void setTotalTipMoney(Money totalTipMoney) {
    this.totalTipMoney = totalTipMoney;
  }


  public Order updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The timestamp for when the order was last updated, in RFC 3339 format (for example, \&quot;2016-09-04T23:59:33.123Z\&quot;).
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Order version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * The version number, which is incremented each time an update is committed to the order. Orders not created through the API do not include a version number and therefore cannot be updated.  [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.closedAt, order.closedAt) &&
        Objects.equals(this.createdAt, order.createdAt) &&
        Objects.equals(this.customerId, order.customerId) &&
        Objects.equals(this.discounts, order.discounts) &&
        Objects.equals(this.fulfillments, order.fulfillments) &&
        Objects.equals(this.id, order.id) &&
        Objects.equals(this.lineItems, order.lineItems) &&
        Objects.equals(this.locationId, order.locationId) &&
        Objects.equals(this.metadata, order.metadata) &&
        Objects.equals(this.netAmounts, order.netAmounts) &&
        Objects.equals(this.pricingOptions, order.pricingOptions) &&
        Objects.equals(this.referenceId, order.referenceId) &&
        Objects.equals(this.refunds, order.refunds) &&
        Objects.equals(this.returnAmounts, order.returnAmounts) &&
        Objects.equals(this.returns, order.returns) &&
        Objects.equals(this.rewards, order.rewards) &&
        Objects.equals(this.roundingAdjustment, order.roundingAdjustment) &&
        Objects.equals(this.serviceCharges, order.serviceCharges) &&
        Objects.equals(this.source, order.source) &&
        Objects.equals(this.state, order.state) &&
        Objects.equals(this.taxes, order.taxes) &&
        Objects.equals(this.tenders, order.tenders) &&
        Objects.equals(this.totalDiscountMoney, order.totalDiscountMoney) &&
        Objects.equals(this.totalMoney, order.totalMoney) &&
        Objects.equals(this.totalServiceChargeMoney, order.totalServiceChargeMoney) &&
        Objects.equals(this.totalTaxMoney, order.totalTaxMoney) &&
        Objects.equals(this.totalTipMoney, order.totalTipMoney) &&
        Objects.equals(this.updatedAt, order.updatedAt) &&
        Objects.equals(this.version, order.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closedAt, createdAt, customerId, discounts, fulfillments, id, lineItems, locationId, metadata, netAmounts, pricingOptions, referenceId, refunds, returnAmounts, returns, rewards, roundingAdjustment, serviceCharges, source, state, taxes, tenders, totalDiscountMoney, totalMoney, totalServiceChargeMoney, totalTaxMoney, totalTipMoney, updatedAt, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    closedAt: ").append(toIndentedString(closedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    discounts: ").append(toIndentedString(discounts)).append("\n");
    sb.append("    fulfillments: ").append(toIndentedString(fulfillments)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    netAmounts: ").append(toIndentedString(netAmounts)).append("\n");
    sb.append("    pricingOptions: ").append(toIndentedString(pricingOptions)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("    returnAmounts: ").append(toIndentedString(returnAmounts)).append("\n");
    sb.append("    returns: ").append(toIndentedString(returns)).append("\n");
    sb.append("    rewards: ").append(toIndentedString(rewards)).append("\n");
    sb.append("    roundingAdjustment: ").append(toIndentedString(roundingAdjustment)).append("\n");
    sb.append("    serviceCharges: ").append(toIndentedString(serviceCharges)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    tenders: ").append(toIndentedString(tenders)).append("\n");
    sb.append("    totalDiscountMoney: ").append(toIndentedString(totalDiscountMoney)).append("\n");
    sb.append("    totalMoney: ").append(toIndentedString(totalMoney)).append("\n");
    sb.append("    totalServiceChargeMoney: ").append(toIndentedString(totalServiceChargeMoney)).append("\n");
    sb.append("    totalTaxMoney: ").append(toIndentedString(totalTaxMoney)).append("\n");
    sb.append("    totalTipMoney: ").append(toIndentedString(totalTipMoney)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closed_at");
    openapiFields.add("created_at");
    openapiFields.add("customer_id");
    openapiFields.add("discounts");
    openapiFields.add("fulfillments");
    openapiFields.add("id");
    openapiFields.add("line_items");
    openapiFields.add("location_id");
    openapiFields.add("metadata");
    openapiFields.add("net_amounts");
    openapiFields.add("pricing_options");
    openapiFields.add("reference_id");
    openapiFields.add("refunds");
    openapiFields.add("return_amounts");
    openapiFields.add("returns");
    openapiFields.add("rewards");
    openapiFields.add("rounding_adjustment");
    openapiFields.add("service_charges");
    openapiFields.add("source");
    openapiFields.add("state");
    openapiFields.add("taxes");
    openapiFields.add("tenders");
    openapiFields.add("total_discount_money");
    openapiFields.add("total_money");
    openapiFields.add("total_service_charge_money");
    openapiFields.add("total_tax_money");
    openapiFields.add("total_tip_money");
    openapiFields.add("updated_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("location_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Order
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Order.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Order.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Order` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Order.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("closed_at") != null && !jsonObj.get("closed_at").isJsonNull()) && !jsonObj.get("closed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closed_at").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if (jsonObj.get("discounts") != null && !jsonObj.get("discounts").isJsonNull()) {
        JsonArray jsonArraydiscounts = jsonObj.getAsJsonArray("discounts");
        if (jsonArraydiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discounts` to be an array in the JSON string but got `%s`", jsonObj.get("discounts").toString()));
          }

          // validate the optional field `discounts` (array)
          for (int i = 0; i < jsonArraydiscounts.size(); i++) {
            OrderLineItemDiscount.validateJsonElement(jsonArraydiscounts.get(i));
          };
        }
      }
      if (jsonObj.get("fulfillments") != null && !jsonObj.get("fulfillments").isJsonNull()) {
        JsonArray jsonArrayfulfillments = jsonObj.getAsJsonArray("fulfillments");
        if (jsonArrayfulfillments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fulfillments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fulfillments` to be an array in the JSON string but got `%s`", jsonObj.get("fulfillments").toString()));
          }

          // validate the optional field `fulfillments` (array)
          for (int i = 0; i < jsonArrayfulfillments.size(); i++) {
            OrderFulfillment.validateJsonElement(jsonArrayfulfillments.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("line_items") != null && !jsonObj.get("line_items").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("line_items");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("line_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `line_items` to be an array in the JSON string but got `%s`", jsonObj.get("line_items").toString()));
          }

          // validate the optional field `line_items` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            OrderLineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      if (!jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      // validate the optional field `net_amounts`
      if (jsonObj.get("net_amounts") != null && !jsonObj.get("net_amounts").isJsonNull()) {
        OrderMoneyAmounts.validateJsonElement(jsonObj.get("net_amounts"));
      }
      // validate the optional field `pricing_options`
      if (jsonObj.get("pricing_options") != null && !jsonObj.get("pricing_options").isJsonNull()) {
        OrderPricingOptions.validateJsonElement(jsonObj.get("pricing_options"));
      }
      if ((jsonObj.get("reference_id") != null && !jsonObj.get("reference_id").isJsonNull()) && !jsonObj.get("reference_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference_id").toString()));
      }
      if (jsonObj.get("refunds") != null && !jsonObj.get("refunds").isJsonNull()) {
        JsonArray jsonArrayrefunds = jsonObj.getAsJsonArray("refunds");
        if (jsonArrayrefunds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refunds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refunds` to be an array in the JSON string but got `%s`", jsonObj.get("refunds").toString()));
          }

          // validate the optional field `refunds` (array)
          for (int i = 0; i < jsonArrayrefunds.size(); i++) {
            Refund.validateJsonElement(jsonArrayrefunds.get(i));
          };
        }
      }
      // validate the optional field `return_amounts`
      if (jsonObj.get("return_amounts") != null && !jsonObj.get("return_amounts").isJsonNull()) {
        OrderMoneyAmounts.validateJsonElement(jsonObj.get("return_amounts"));
      }
      if (jsonObj.get("returns") != null && !jsonObj.get("returns").isJsonNull()) {
        JsonArray jsonArrayreturns = jsonObj.getAsJsonArray("returns");
        if (jsonArrayreturns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("returns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `returns` to be an array in the JSON string but got `%s`", jsonObj.get("returns").toString()));
          }

          // validate the optional field `returns` (array)
          for (int i = 0; i < jsonArrayreturns.size(); i++) {
            OrderReturn.validateJsonElement(jsonArrayreturns.get(i));
          };
        }
      }
      if (jsonObj.get("rewards") != null && !jsonObj.get("rewards").isJsonNull()) {
        JsonArray jsonArrayrewards = jsonObj.getAsJsonArray("rewards");
        if (jsonArrayrewards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rewards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rewards` to be an array in the JSON string but got `%s`", jsonObj.get("rewards").toString()));
          }

          // validate the optional field `rewards` (array)
          for (int i = 0; i < jsonArrayrewards.size(); i++) {
            OrderReward.validateJsonElement(jsonArrayrewards.get(i));
          };
        }
      }
      // validate the optional field `rounding_adjustment`
      if (jsonObj.get("rounding_adjustment") != null && !jsonObj.get("rounding_adjustment").isJsonNull()) {
        OrderRoundingAdjustment.validateJsonElement(jsonObj.get("rounding_adjustment"));
      }
      if (jsonObj.get("service_charges") != null && !jsonObj.get("service_charges").isJsonNull()) {
        JsonArray jsonArrayserviceCharges = jsonObj.getAsJsonArray("service_charges");
        if (jsonArrayserviceCharges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("service_charges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `service_charges` to be an array in the JSON string but got `%s`", jsonObj.get("service_charges").toString()));
          }

          // validate the optional field `service_charges` (array)
          for (int i = 0; i < jsonArrayserviceCharges.size(); i++) {
            OrderServiceCharge.validateJsonElement(jsonArrayserviceCharges.get(i));
          };
        }
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        OrderSource.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (jsonObj.get("taxes") != null && !jsonObj.get("taxes").isJsonNull()) {
        JsonArray jsonArraytaxes = jsonObj.getAsJsonArray("taxes");
        if (jsonArraytaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxes` to be an array in the JSON string but got `%s`", jsonObj.get("taxes").toString()));
          }

          // validate the optional field `taxes` (array)
          for (int i = 0; i < jsonArraytaxes.size(); i++) {
            OrderLineItemTax.validateJsonElement(jsonArraytaxes.get(i));
          };
        }
      }
      if (jsonObj.get("tenders") != null && !jsonObj.get("tenders").isJsonNull()) {
        JsonArray jsonArraytenders = jsonObj.getAsJsonArray("tenders");
        if (jsonArraytenders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tenders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tenders` to be an array in the JSON string but got `%s`", jsonObj.get("tenders").toString()));
          }

          // validate the optional field `tenders` (array)
          for (int i = 0; i < jsonArraytenders.size(); i++) {
            Tender.validateJsonElement(jsonArraytenders.get(i));
          };
        }
      }
      // validate the optional field `total_discount_money`
      if (jsonObj.get("total_discount_money") != null && !jsonObj.get("total_discount_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_discount_money"));
      }
      // validate the optional field `total_money`
      if (jsonObj.get("total_money") != null && !jsonObj.get("total_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_money"));
      }
      // validate the optional field `total_service_charge_money`
      if (jsonObj.get("total_service_charge_money") != null && !jsonObj.get("total_service_charge_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_service_charge_money"));
      }
      // validate the optional field `total_tax_money`
      if (jsonObj.get("total_tax_money") != null && !jsonObj.get("total_tax_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_tax_money"));
      }
      // validate the optional field `total_tip_money`
      if (jsonObj.get("total_tip_money") != null && !jsonObj.get("total_tip_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("total_tip_money"));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Order given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Order
   * @throws IOException if the JSON string is invalid with respect to Order
   */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

  /**
   * Convert an instance of Order to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

