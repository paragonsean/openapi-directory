/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CatalogObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A list of modifiers applicable to items at the time of sale.  For example, a \&quot;Condiments\&quot; modifier list applicable to a \&quot;Hot Dog\&quot; item may contain \&quot;Ketchup\&quot;, \&quot;Mustard\&quot;, and \&quot;Relish\&quot; modifiers. Use the &#x60;selection_type&#x60; field to specify whether or not multiple selections from the modifier list are allowed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogModifierList {
  public static final String SERIALIZED_NAME_MODIFIERS = "modifiers";
  @SerializedName(SERIALIZED_NAME_MODIFIERS)
  private List<CatalogObject> modifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORDINAL = "ordinal";
  @SerializedName(SERIALIZED_NAME_ORDINAL)
  private Integer ordinal;

  public static final String SERIALIZED_NAME_SELECTION_TYPE = "selection_type";
  @SerializedName(SERIALIZED_NAME_SELECTION_TYPE)
  private String selectionType;

  public CatalogModifierList() {
  }

  public CatalogModifierList modifiers(List<CatalogObject> modifiers) {
    this.modifiers = modifiers;
    return this;
  }

  public CatalogModifierList addModifiersItem(CatalogObject modifiersItem) {
    if (this.modifiers == null) {
      this.modifiers = new ArrayList<>();
    }
    this.modifiers.add(modifiersItem);
    return this;
  }

  /**
   * The options included in the &#x60;CatalogModifierList&#x60;. You must include at least one &#x60;CatalogModifier&#x60;. Each CatalogObject must have type &#x60;MODIFIER&#x60; and contain &#x60;CatalogModifier&#x60; data.
   * @return modifiers
   */
  @javax.annotation.Nullable
  public List<CatalogObject> getModifiers() {
    return modifiers;
  }

  public void setModifiers(List<CatalogObject> modifiers) {
    this.modifiers = modifiers;
  }


  public CatalogModifierList name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name for the &#x60;CatalogModifierList&#x60; instance. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CatalogModifierList ordinal(Integer ordinal) {
    this.ordinal = ordinal;
    return this;
  }

  /**
   * Determines where this modifier list appears in a list of &#x60;CatalogModifierList&#x60; values.
   * @return ordinal
   */
  @javax.annotation.Nullable
  public Integer getOrdinal() {
    return ordinal;
  }

  public void setOrdinal(Integer ordinal) {
    this.ordinal = ordinal;
  }


  public CatalogModifierList selectionType(String selectionType) {
    this.selectionType = selectionType;
    return this;
  }

  /**
   * Indicates whether multiple options from the modifier list can be applied to a single &#x60;CatalogItem&#x60;.
   * @return selectionType
   */
  @javax.annotation.Nullable
  public String getSelectionType() {
    return selectionType;
  }

  public void setSelectionType(String selectionType) {
    this.selectionType = selectionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogModifierList catalogModifierList = (CatalogModifierList) o;
    return Objects.equals(this.modifiers, catalogModifierList.modifiers) &&
        Objects.equals(this.name, catalogModifierList.name) &&
        Objects.equals(this.ordinal, catalogModifierList.ordinal) &&
        Objects.equals(this.selectionType, catalogModifierList.selectionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modifiers, name, ordinal, selectionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogModifierList {\n");
    sb.append("    modifiers: ").append(toIndentedString(modifiers)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ordinal: ").append(toIndentedString(ordinal)).append("\n");
    sb.append("    selectionType: ").append(toIndentedString(selectionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("modifiers");
    openapiFields.add("name");
    openapiFields.add("ordinal");
    openapiFields.add("selection_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogModifierList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogModifierList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogModifierList is not found in the empty JSON string", CatalogModifierList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogModifierList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogModifierList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("modifiers") != null && !jsonObj.get("modifiers").isJsonNull()) {
        JsonArray jsonArraymodifiers = jsonObj.getAsJsonArray("modifiers");
        if (jsonArraymodifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("modifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `modifiers` to be an array in the JSON string but got `%s`", jsonObj.get("modifiers").toString()));
          }

          // validate the optional field `modifiers` (array)
          for (int i = 0; i < jsonArraymodifiers.size(); i++) {
            CatalogObject.validateJsonElement(jsonArraymodifiers.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("selection_type") != null && !jsonObj.get("selection_type").isJsonNull()) && !jsonObj.get("selection_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selection_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selection_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogModifierList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogModifierList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogModifierList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogModifierList.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogModifierList>() {
           @Override
           public void write(JsonWriter out, CatalogModifierList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogModifierList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogModifierList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogModifierList
   * @throws IOException if the JSON string is invalid with respect to CatalogModifierList
   */
  public static CatalogModifierList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogModifierList.class);
  }

  /**
   * Convert an instance of CatalogModifierList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

