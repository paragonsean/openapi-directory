/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The list of possible dispute states.
 */
@JsonAdapter(DisputeState.Adapter.class)
public enum DisputeState {
  
  UNKNOWN_STATE("UNKNOWN_STATE"),
  
  INQUIRY_EVIDENCE_REQUIRED("INQUIRY_EVIDENCE_REQUIRED"),
  
  INQUIRY_PROCESSING("INQUIRY_PROCESSING"),
  
  INQUIRY_CLOSED("INQUIRY_CLOSED"),
  
  EVIDENCE_REQUIRED("EVIDENCE_REQUIRED"),
  
  PROCESSING("PROCESSING"),
  
  WON("WON"),
  
  LOST("LOST"),
  
  ACCEPTED("ACCEPTED"),
  
  WAITING_THIRD_PARTY("WAITING_THIRD_PARTY");

  private String value;

  DisputeState(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DisputeState fromValue(String value) {
    for (DisputeState b : DisputeState.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<DisputeState> {
    @Override
    public void write(final JsonWriter jsonWriter, final DisputeState enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DisputeState read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return DisputeState.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    DisputeState.fromValue(value);
  }
}

