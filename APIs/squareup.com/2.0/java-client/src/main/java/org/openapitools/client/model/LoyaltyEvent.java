/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LoyaltyEventAccumulatePoints;
import org.openapitools.client.model.LoyaltyEventAdjustPoints;
import org.openapitools.client.model.LoyaltyEventCreateReward;
import org.openapitools.client.model.LoyaltyEventDeleteReward;
import org.openapitools.client.model.LoyaltyEventExpirePoints;
import org.openapitools.client.model.LoyaltyEventOther;
import org.openapitools.client.model.LoyaltyEventRedeemReward;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about a loyalty event.  For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoyaltyEvent {
  public static final String SERIALIZED_NAME_ACCUMULATE_POINTS = "accumulate_points";
  @SerializedName(SERIALIZED_NAME_ACCUMULATE_POINTS)
  private LoyaltyEventAccumulatePoints accumulatePoints;

  public static final String SERIALIZED_NAME_ADJUST_POINTS = "adjust_points";
  @SerializedName(SERIALIZED_NAME_ADJUST_POINTS)
  private LoyaltyEventAdjustPoints adjustPoints;

  public static final String SERIALIZED_NAME_CREATE_REWARD = "create_reward";
  @SerializedName(SERIALIZED_NAME_CREATE_REWARD)
  private LoyaltyEventCreateReward createReward;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DELETE_REWARD = "delete_reward";
  @SerializedName(SERIALIZED_NAME_DELETE_REWARD)
  private LoyaltyEventDeleteReward deleteReward;

  public static final String SERIALIZED_NAME_EXPIRE_POINTS = "expire_points";
  @SerializedName(SERIALIZED_NAME_EXPIRE_POINTS)
  private LoyaltyEventExpirePoints expirePoints;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_LOYALTY_ACCOUNT_ID = "loyalty_account_id";
  @SerializedName(SERIALIZED_NAME_LOYALTY_ACCOUNT_ID)
  private String loyaltyAccountId;

  public static final String SERIALIZED_NAME_OTHER_EVENT = "other_event";
  @SerializedName(SERIALIZED_NAME_OTHER_EVENT)
  private LoyaltyEventOther otherEvent;

  public static final String SERIALIZED_NAME_REDEEM_REWARD = "redeem_reward";
  @SerializedName(SERIALIZED_NAME_REDEEM_REWARD)
  private LoyaltyEventRedeemReward redeemReward;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public LoyaltyEvent() {
  }

  public LoyaltyEvent accumulatePoints(LoyaltyEventAccumulatePoints accumulatePoints) {
    this.accumulatePoints = accumulatePoints;
    return this;
  }

  /**
   * Get accumulatePoints
   * @return accumulatePoints
   */
  @javax.annotation.Nullable
  public LoyaltyEventAccumulatePoints getAccumulatePoints() {
    return accumulatePoints;
  }

  public void setAccumulatePoints(LoyaltyEventAccumulatePoints accumulatePoints) {
    this.accumulatePoints = accumulatePoints;
  }


  public LoyaltyEvent adjustPoints(LoyaltyEventAdjustPoints adjustPoints) {
    this.adjustPoints = adjustPoints;
    return this;
  }

  /**
   * Get adjustPoints
   * @return adjustPoints
   */
  @javax.annotation.Nullable
  public LoyaltyEventAdjustPoints getAdjustPoints() {
    return adjustPoints;
  }

  public void setAdjustPoints(LoyaltyEventAdjustPoints adjustPoints) {
    this.adjustPoints = adjustPoints;
  }


  public LoyaltyEvent createReward(LoyaltyEventCreateReward createReward) {
    this.createReward = createReward;
    return this;
  }

  /**
   * Get createReward
   * @return createReward
   */
  @javax.annotation.Nullable
  public LoyaltyEventCreateReward getCreateReward() {
    return createReward;
  }

  public void setCreateReward(LoyaltyEventCreateReward createReward) {
    this.createReward = createReward;
  }


  public LoyaltyEvent createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The timestamp when the event was created, in RFC 3339 format.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public LoyaltyEvent deleteReward(LoyaltyEventDeleteReward deleteReward) {
    this.deleteReward = deleteReward;
    return this;
  }

  /**
   * Get deleteReward
   * @return deleteReward
   */
  @javax.annotation.Nullable
  public LoyaltyEventDeleteReward getDeleteReward() {
    return deleteReward;
  }

  public void setDeleteReward(LoyaltyEventDeleteReward deleteReward) {
    this.deleteReward = deleteReward;
  }


  public LoyaltyEvent expirePoints(LoyaltyEventExpirePoints expirePoints) {
    this.expirePoints = expirePoints;
    return this;
  }

  /**
   * Get expirePoints
   * @return expirePoints
   */
  @javax.annotation.Nullable
  public LoyaltyEventExpirePoints getExpirePoints() {
    return expirePoints;
  }

  public void setExpirePoints(LoyaltyEventExpirePoints expirePoints) {
    this.expirePoints = expirePoints;
  }


  public LoyaltyEvent id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Square-assigned ID of the loyalty event.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public LoyaltyEvent locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The ID of the [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the event occurred.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public LoyaltyEvent loyaltyAccountId(String loyaltyAccountId) {
    this.loyaltyAccountId = loyaltyAccountId;
    return this;
  }

  /**
   * The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) in which the event occurred.
   * @return loyaltyAccountId
   */
  @javax.annotation.Nonnull
  public String getLoyaltyAccountId() {
    return loyaltyAccountId;
  }

  public void setLoyaltyAccountId(String loyaltyAccountId) {
    this.loyaltyAccountId = loyaltyAccountId;
  }


  public LoyaltyEvent otherEvent(LoyaltyEventOther otherEvent) {
    this.otherEvent = otherEvent;
    return this;
  }

  /**
   * Get otherEvent
   * @return otherEvent
   */
  @javax.annotation.Nullable
  public LoyaltyEventOther getOtherEvent() {
    return otherEvent;
  }

  public void setOtherEvent(LoyaltyEventOther otherEvent) {
    this.otherEvent = otherEvent;
  }


  public LoyaltyEvent redeemReward(LoyaltyEventRedeemReward redeemReward) {
    this.redeemReward = redeemReward;
    return this;
  }

  /**
   * Get redeemReward
   * @return redeemReward
   */
  @javax.annotation.Nullable
  public LoyaltyEventRedeemReward getRedeemReward() {
    return redeemReward;
  }

  public void setRedeemReward(LoyaltyEventRedeemReward redeemReward) {
    this.redeemReward = redeemReward;
  }


  public LoyaltyEvent source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Defines whether the event was generated by the Square Point of Sale.
   * @return source
   */
  @javax.annotation.Nonnull
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public LoyaltyEvent type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the loyalty event.
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoyaltyEvent loyaltyEvent = (LoyaltyEvent) o;
    return Objects.equals(this.accumulatePoints, loyaltyEvent.accumulatePoints) &&
        Objects.equals(this.adjustPoints, loyaltyEvent.adjustPoints) &&
        Objects.equals(this.createReward, loyaltyEvent.createReward) &&
        Objects.equals(this.createdAt, loyaltyEvent.createdAt) &&
        Objects.equals(this.deleteReward, loyaltyEvent.deleteReward) &&
        Objects.equals(this.expirePoints, loyaltyEvent.expirePoints) &&
        Objects.equals(this.id, loyaltyEvent.id) &&
        Objects.equals(this.locationId, loyaltyEvent.locationId) &&
        Objects.equals(this.loyaltyAccountId, loyaltyEvent.loyaltyAccountId) &&
        Objects.equals(this.otherEvent, loyaltyEvent.otherEvent) &&
        Objects.equals(this.redeemReward, loyaltyEvent.redeemReward) &&
        Objects.equals(this.source, loyaltyEvent.source) &&
        Objects.equals(this.type, loyaltyEvent.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accumulatePoints, adjustPoints, createReward, createdAt, deleteReward, expirePoints, id, locationId, loyaltyAccountId, otherEvent, redeemReward, source, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoyaltyEvent {\n");
    sb.append("    accumulatePoints: ").append(toIndentedString(accumulatePoints)).append("\n");
    sb.append("    adjustPoints: ").append(toIndentedString(adjustPoints)).append("\n");
    sb.append("    createReward: ").append(toIndentedString(createReward)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deleteReward: ").append(toIndentedString(deleteReward)).append("\n");
    sb.append("    expirePoints: ").append(toIndentedString(expirePoints)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    loyaltyAccountId: ").append(toIndentedString(loyaltyAccountId)).append("\n");
    sb.append("    otherEvent: ").append(toIndentedString(otherEvent)).append("\n");
    sb.append("    redeemReward: ").append(toIndentedString(redeemReward)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accumulate_points");
    openapiFields.add("adjust_points");
    openapiFields.add("create_reward");
    openapiFields.add("created_at");
    openapiFields.add("delete_reward");
    openapiFields.add("expire_points");
    openapiFields.add("id");
    openapiFields.add("location_id");
    openapiFields.add("loyalty_account_id");
    openapiFields.add("other_event");
    openapiFields.add("redeem_reward");
    openapiFields.add("source");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("loyalty_account_id");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoyaltyEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoyaltyEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoyaltyEvent is not found in the empty JSON string", LoyaltyEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoyaltyEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoyaltyEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LoyaltyEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accumulate_points`
      if (jsonObj.get("accumulate_points") != null && !jsonObj.get("accumulate_points").isJsonNull()) {
        LoyaltyEventAccumulatePoints.validateJsonElement(jsonObj.get("accumulate_points"));
      }
      // validate the optional field `adjust_points`
      if (jsonObj.get("adjust_points") != null && !jsonObj.get("adjust_points").isJsonNull()) {
        LoyaltyEventAdjustPoints.validateJsonElement(jsonObj.get("adjust_points"));
      }
      // validate the optional field `create_reward`
      if (jsonObj.get("create_reward") != null && !jsonObj.get("create_reward").isJsonNull()) {
        LoyaltyEventCreateReward.validateJsonElement(jsonObj.get("create_reward"));
      }
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      // validate the optional field `delete_reward`
      if (jsonObj.get("delete_reward") != null && !jsonObj.get("delete_reward").isJsonNull()) {
        LoyaltyEventDeleteReward.validateJsonElement(jsonObj.get("delete_reward"));
      }
      // validate the optional field `expire_points`
      if (jsonObj.get("expire_points") != null && !jsonObj.get("expire_points").isJsonNull()) {
        LoyaltyEventExpirePoints.validateJsonElement(jsonObj.get("expire_points"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("location_id") != null && !jsonObj.get("location_id").isJsonNull()) && !jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      if (!jsonObj.get("loyalty_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loyalty_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loyalty_account_id").toString()));
      }
      // validate the optional field `other_event`
      if (jsonObj.get("other_event") != null && !jsonObj.get("other_event").isJsonNull()) {
        LoyaltyEventOther.validateJsonElement(jsonObj.get("other_event"));
      }
      // validate the optional field `redeem_reward`
      if (jsonObj.get("redeem_reward") != null && !jsonObj.get("redeem_reward").isJsonNull()) {
        LoyaltyEventRedeemReward.validateJsonElement(jsonObj.get("redeem_reward"));
      }
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoyaltyEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoyaltyEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoyaltyEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoyaltyEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<LoyaltyEvent>() {
           @Override
           public void write(JsonWriter out, LoyaltyEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoyaltyEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoyaltyEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoyaltyEvent
   * @throws IOException if the JSON string is invalid with respect to LoyaltyEvent
   */
  public static LoyaltyEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoyaltyEvent.class);
  }

  /**
   * Convert an instance of LoyaltyEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

