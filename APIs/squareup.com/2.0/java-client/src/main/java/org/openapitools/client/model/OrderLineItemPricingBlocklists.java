/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderLineItemPricingBlocklistsBlockedDiscount;
import org.openapitools.client.model.OrderLineItemPricingBlocklistsBlockedTax;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes pricing adjustments that are blocked from manual and  automatic application to a line item. For more information, see  [Apply Taxes and Discounts](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderLineItemPricingBlocklists {
  public static final String SERIALIZED_NAME_BLOCKED_DISCOUNTS = "blocked_discounts";
  @SerializedName(SERIALIZED_NAME_BLOCKED_DISCOUNTS)
  private List<OrderLineItemPricingBlocklistsBlockedDiscount> blockedDiscounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLOCKED_TAXES = "blocked_taxes";
  @SerializedName(SERIALIZED_NAME_BLOCKED_TAXES)
  private List<OrderLineItemPricingBlocklistsBlockedTax> blockedTaxes = new ArrayList<>();

  public OrderLineItemPricingBlocklists() {
  }

  public OrderLineItemPricingBlocklists blockedDiscounts(List<OrderLineItemPricingBlocklistsBlockedDiscount> blockedDiscounts) {
    this.blockedDiscounts = blockedDiscounts;
    return this;
  }

  public OrderLineItemPricingBlocklists addBlockedDiscountsItem(OrderLineItemPricingBlocklistsBlockedDiscount blockedDiscountsItem) {
    if (this.blockedDiscounts == null) {
      this.blockedDiscounts = new ArrayList<>();
    }
    this.blockedDiscounts.add(blockedDiscountsItem);
    return this;
  }

  /**
   * A list of discounts blocked from applying to the line item.  Discounts can be blocked by the &#x60;discount_uid&#x60; (for ad hoc discounts) or  the &#x60;discount_catalog_object_id&#x60; (for catalog discounts).
   * @return blockedDiscounts
   */
  @javax.annotation.Nullable
  public List<OrderLineItemPricingBlocklistsBlockedDiscount> getBlockedDiscounts() {
    return blockedDiscounts;
  }

  public void setBlockedDiscounts(List<OrderLineItemPricingBlocklistsBlockedDiscount> blockedDiscounts) {
    this.blockedDiscounts = blockedDiscounts;
  }


  public OrderLineItemPricingBlocklists blockedTaxes(List<OrderLineItemPricingBlocklistsBlockedTax> blockedTaxes) {
    this.blockedTaxes = blockedTaxes;
    return this;
  }

  public OrderLineItemPricingBlocklists addBlockedTaxesItem(OrderLineItemPricingBlocklistsBlockedTax blockedTaxesItem) {
    if (this.blockedTaxes == null) {
      this.blockedTaxes = new ArrayList<>();
    }
    this.blockedTaxes.add(blockedTaxesItem);
    return this;
  }

  /**
   * A list of taxes blocked from applying to the line item.  Taxes can be blocked by the &#x60;tax_uid&#x60; (for ad hoc taxes) or  the &#x60;tax_catalog_object_id&#x60; (for catalog taxes).
   * @return blockedTaxes
   */
  @javax.annotation.Nullable
  public List<OrderLineItemPricingBlocklistsBlockedTax> getBlockedTaxes() {
    return blockedTaxes;
  }

  public void setBlockedTaxes(List<OrderLineItemPricingBlocklistsBlockedTax> blockedTaxes) {
    this.blockedTaxes = blockedTaxes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderLineItemPricingBlocklists orderLineItemPricingBlocklists = (OrderLineItemPricingBlocklists) o;
    return Objects.equals(this.blockedDiscounts, orderLineItemPricingBlocklists.blockedDiscounts) &&
        Objects.equals(this.blockedTaxes, orderLineItemPricingBlocklists.blockedTaxes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockedDiscounts, blockedTaxes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderLineItemPricingBlocklists {\n");
    sb.append("    blockedDiscounts: ").append(toIndentedString(blockedDiscounts)).append("\n");
    sb.append("    blockedTaxes: ").append(toIndentedString(blockedTaxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blocked_discounts");
    openapiFields.add("blocked_taxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderLineItemPricingBlocklists
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderLineItemPricingBlocklists.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderLineItemPricingBlocklists is not found in the empty JSON string", OrderLineItemPricingBlocklists.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderLineItemPricingBlocklists.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderLineItemPricingBlocklists` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("blocked_discounts") != null && !jsonObj.get("blocked_discounts").isJsonNull()) {
        JsonArray jsonArrayblockedDiscounts = jsonObj.getAsJsonArray("blocked_discounts");
        if (jsonArrayblockedDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("blocked_discounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `blocked_discounts` to be an array in the JSON string but got `%s`", jsonObj.get("blocked_discounts").toString()));
          }

          // validate the optional field `blocked_discounts` (array)
          for (int i = 0; i < jsonArrayblockedDiscounts.size(); i++) {
            OrderLineItemPricingBlocklistsBlockedDiscount.validateJsonElement(jsonArrayblockedDiscounts.get(i));
          };
        }
      }
      if (jsonObj.get("blocked_taxes") != null && !jsonObj.get("blocked_taxes").isJsonNull()) {
        JsonArray jsonArrayblockedTaxes = jsonObj.getAsJsonArray("blocked_taxes");
        if (jsonArrayblockedTaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("blocked_taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `blocked_taxes` to be an array in the JSON string but got `%s`", jsonObj.get("blocked_taxes").toString()));
          }

          // validate the optional field `blocked_taxes` (array)
          for (int i = 0; i < jsonArrayblockedTaxes.size(); i++) {
            OrderLineItemPricingBlocklistsBlockedTax.validateJsonElement(jsonArrayblockedTaxes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderLineItemPricingBlocklists.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderLineItemPricingBlocklists' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderLineItemPricingBlocklists> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderLineItemPricingBlocklists.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderLineItemPricingBlocklists>() {
           @Override
           public void write(JsonWriter out, OrderLineItemPricingBlocklists value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderLineItemPricingBlocklists read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderLineItemPricingBlocklists given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderLineItemPricingBlocklists
   * @throws IOException if the JSON string is invalid with respect to OrderLineItemPricingBlocklists
   */
  public static OrderLineItemPricingBlocklists fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderLineItemPricingBlocklists.class);
  }

  /**
   * Convert an instance of OrderLineItemPricingBlocklists to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

