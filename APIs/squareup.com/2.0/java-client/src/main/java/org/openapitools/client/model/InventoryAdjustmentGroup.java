/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InventoryAdjustmentGroup {
  public static final String SERIALIZED_NAME_FROM_STATE = "from_state";
  @SerializedName(SERIALIZED_NAME_FROM_STATE)
  private String fromState;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ROOT_ADJUSTMENT_ID = "root_adjustment_id";
  @SerializedName(SERIALIZED_NAME_ROOT_ADJUSTMENT_ID)
  private String rootAdjustmentId;

  public static final String SERIALIZED_NAME_TO_STATE = "to_state";
  @SerializedName(SERIALIZED_NAME_TO_STATE)
  private String toState;

  public InventoryAdjustmentGroup() {
  }

  public InventoryAdjustmentGroup fromState(String fromState) {
    this.fromState = fromState;
    return this;
  }

  /**
   * Representative &#x60;from_state&#x60; for adjustments within the group. For example, for a group adjustment from &#x60;IN_STOCK&#x60; to &#x60;SOLD&#x60;, there can be two component adjustments in the group: one from &#x60;IN_STOCK&#x60;to &#x60;COMPOSED&#x60; and the other one from &#x60;COMPOSED&#x60; to &#x60;SOLD&#x60;. Here, the representative &#x60;from_state&#x60; for the &#x60;InventoryAdjustmentGroup&#x60; is &#x60;IN_STOCK&#x60;.
   * @return fromState
   */
  @javax.annotation.Nullable
  public String getFromState() {
    return fromState;
  }

  public void setFromState(String fromState) {
    this.fromState = fromState;
  }


  public InventoryAdjustmentGroup id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique ID generated by Square for the &#x60;InventoryAdjustmentGroup&#x60;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public InventoryAdjustmentGroup rootAdjustmentId(String rootAdjustmentId) {
    this.rootAdjustmentId = rootAdjustmentId;
    return this;
  }

  /**
   * The inventory adjustment of the composed variation.
   * @return rootAdjustmentId
   */
  @javax.annotation.Nullable
  public String getRootAdjustmentId() {
    return rootAdjustmentId;
  }

  public void setRootAdjustmentId(String rootAdjustmentId) {
    this.rootAdjustmentId = rootAdjustmentId;
  }


  public InventoryAdjustmentGroup toState(String toState) {
    this.toState = toState;
    return this;
  }

  /**
   * Representative &#x60;to_state&#x60; for adjustments within group. For example, for a group adjustment from &#x60;IN_STOCK&#x60; to &#x60;SOLD&#x60;, the two component adjustments in the group can be from &#x60;IN_STOCK&#x60; to &#x60;COMPOSED&#x60; and from &#x60;COMPOSED&#x60; to &#x60;SOLD&#x60;.  Here, the representative &#x60;to_state&#x60; of the &#x60;InventoryAdjustmentGroup&#x60; is &#x60;SOLD&#x60;.
   * @return toState
   */
  @javax.annotation.Nullable
  public String getToState() {
    return toState;
  }

  public void setToState(String toState) {
    this.toState = toState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventoryAdjustmentGroup inventoryAdjustmentGroup = (InventoryAdjustmentGroup) o;
    return Objects.equals(this.fromState, inventoryAdjustmentGroup.fromState) &&
        Objects.equals(this.id, inventoryAdjustmentGroup.id) &&
        Objects.equals(this.rootAdjustmentId, inventoryAdjustmentGroup.rootAdjustmentId) &&
        Objects.equals(this.toState, inventoryAdjustmentGroup.toState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromState, id, rootAdjustmentId, toState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventoryAdjustmentGroup {\n");
    sb.append("    fromState: ").append(toIndentedString(fromState)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    rootAdjustmentId: ").append(toIndentedString(rootAdjustmentId)).append("\n");
    sb.append("    toState: ").append(toIndentedString(toState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("from_state");
    openapiFields.add("id");
    openapiFields.add("root_adjustment_id");
    openapiFields.add("to_state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InventoryAdjustmentGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InventoryAdjustmentGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InventoryAdjustmentGroup is not found in the empty JSON string", InventoryAdjustmentGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InventoryAdjustmentGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InventoryAdjustmentGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("from_state") != null && !jsonObj.get("from_state").isJsonNull()) && !jsonObj.get("from_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_state").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("root_adjustment_id") != null && !jsonObj.get("root_adjustment_id").isJsonNull()) && !jsonObj.get("root_adjustment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `root_adjustment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("root_adjustment_id").toString()));
      }
      if ((jsonObj.get("to_state") != null && !jsonObj.get("to_state").isJsonNull()) && !jsonObj.get("to_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InventoryAdjustmentGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InventoryAdjustmentGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InventoryAdjustmentGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InventoryAdjustmentGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<InventoryAdjustmentGroup>() {
           @Override
           public void write(JsonWriter out, InventoryAdjustmentGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InventoryAdjustmentGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InventoryAdjustmentGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InventoryAdjustmentGroup
   * @throws IOException if the JSON string is invalid with respect to InventoryAdjustmentGroup
   */
  public static InventoryAdjustmentGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InventoryAdjustmentGroup.class);
  }

  /**
   * Convert an instance of InventoryAdjustmentGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

