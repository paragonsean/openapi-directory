/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.V1Money;
import org.openapitools.client.model.V1OrderHistoryEntry;
import org.openapitools.client.model.V1Tender;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V1Order
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V1Order {
  public static final String SERIALIZED_NAME_BTC_PRICE_SATOSHI = "btc_price_satoshi";
  @SerializedName(SERIALIZED_NAME_BTC_PRICE_SATOSHI)
  private BigDecimal btcPriceSatoshi;

  public static final String SERIALIZED_NAME_BTC_RECEIVE_ADDRESS = "btc_receive_address";
  @SerializedName(SERIALIZED_NAME_BTC_RECEIVE_ADDRESS)
  private String btcReceiveAddress;

  public static final String SERIALIZED_NAME_BUYER_EMAIL = "buyer_email";
  @SerializedName(SERIALIZED_NAME_BUYER_EMAIL)
  private String buyerEmail;

  public static final String SERIALIZED_NAME_BUYER_NOTE = "buyer_note";
  @SerializedName(SERIALIZED_NAME_BUYER_NOTE)
  private String buyerNote;

  public static final String SERIALIZED_NAME_CANCELED_NOTE = "canceled_note";
  @SerializedName(SERIALIZED_NAME_CANCELED_NOTE)
  private String canceledNote;

  public static final String SERIALIZED_NAME_COMPLETED_NOTE = "completed_note";
  @SerializedName(SERIALIZED_NAME_COMPLETED_NOTE)
  private String completedNote;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Error> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ORDER_HISTORY = "order_history";
  @SerializedName(SERIALIZED_NAME_ORDER_HISTORY)
  private List<V1OrderHistoryEntry> orderHistory = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_ID = "payment_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  private String paymentId;

  public static final String SERIALIZED_NAME_PROMO_CODE = "promo_code";
  @SerializedName(SERIALIZED_NAME_PROMO_CODE)
  private String promoCode;

  public static final String SERIALIZED_NAME_RECIPIENT_NAME = "recipient_name";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NAME)
  private String recipientName;

  public static final String SERIALIZED_NAME_RECIPIENT_PHONE_NUMBER = "recipient_phone_number";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_PHONE_NUMBER)
  private String recipientPhoneNumber;

  public static final String SERIALIZED_NAME_REFUNDED_NOTE = "refunded_note";
  @SerializedName(SERIALIZED_NAME_REFUNDED_NOTE)
  private String refundedNote;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shipping_address";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private Address shippingAddress;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SUBTOTAL_MONEY = "subtotal_money";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL_MONEY)
  private V1Money subtotalMoney;

  public static final String SERIALIZED_NAME_TENDER = "tender";
  @SerializedName(SERIALIZED_NAME_TENDER)
  private V1Tender tender;

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNT_MONEY = "total_discount_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNT_MONEY)
  private V1Money totalDiscountMoney;

  public static final String SERIALIZED_NAME_TOTAL_PRICE_MONEY = "total_price_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRICE_MONEY)
  private V1Money totalPriceMoney;

  public static final String SERIALIZED_NAME_TOTAL_SHIPPING_MONEY = "total_shipping_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_SHIPPING_MONEY)
  private V1Money totalShippingMoney;

  public static final String SERIALIZED_NAME_TOTAL_TAX_MONEY = "total_tax_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX_MONEY)
  private V1Money totalTaxMoney;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public V1Order() {
  }

  public V1Order btcPriceSatoshi(BigDecimal btcPriceSatoshi) {
    this.btcPriceSatoshi = btcPriceSatoshi;
    return this;
  }

  /**
   * For Bitcoin transactions, the price of the buyer&#39;s order in satoshi (100 million satoshi equals 1 BTC).
   * @return btcPriceSatoshi
   */
  @javax.annotation.Nullable
  public BigDecimal getBtcPriceSatoshi() {
    return btcPriceSatoshi;
  }

  public void setBtcPriceSatoshi(BigDecimal btcPriceSatoshi) {
    this.btcPriceSatoshi = btcPriceSatoshi;
  }


  public V1Order btcReceiveAddress(String btcReceiveAddress) {
    this.btcReceiveAddress = btcReceiveAddress;
    return this;
  }

  /**
   * For Bitcoin transactions, the address that the buyer sent Bitcoin to.
   * @return btcReceiveAddress
   */
  @javax.annotation.Nullable
  public String getBtcReceiveAddress() {
    return btcReceiveAddress;
  }

  public void setBtcReceiveAddress(String btcReceiveAddress) {
    this.btcReceiveAddress = btcReceiveAddress;
  }


  public V1Order buyerEmail(String buyerEmail) {
    this.buyerEmail = buyerEmail;
    return this;
  }

  /**
   * The email address of the order&#39;s buyer.
   * @return buyerEmail
   */
  @javax.annotation.Nullable
  public String getBuyerEmail() {
    return buyerEmail;
  }

  public void setBuyerEmail(String buyerEmail) {
    this.buyerEmail = buyerEmail;
  }


  public V1Order buyerNote(String buyerNote) {
    this.buyerNote = buyerNote;
    return this;
  }

  /**
   * A note provided by the buyer when the order was created, if any.
   * @return buyerNote
   */
  @javax.annotation.Nullable
  public String getBuyerNote() {
    return buyerNote;
  }

  public void setBuyerNote(String buyerNote) {
    this.buyerNote = buyerNote;
  }


  public V1Order canceledNote(String canceledNote) {
    this.canceledNote = canceledNote;
    return this;
  }

  /**
   * A note provided by the merchant when the order&#39;s state was set to CANCELED, if any.
   * @return canceledNote
   */
  @javax.annotation.Nullable
  public String getCanceledNote() {
    return canceledNote;
  }

  public void setCanceledNote(String canceledNote) {
    this.canceledNote = canceledNote;
  }


  public V1Order completedNote(String completedNote) {
    this.completedNote = completedNote;
    return this;
  }

  /**
   * A note provided by the merchant when the order&#39;s state was set to COMPLETED, if any
   * @return completedNote
   */
  @javax.annotation.Nullable
  public String getCompletedNote() {
    return completedNote;
  }

  public void setCompletedNote(String completedNote) {
    this.completedNote = completedNote;
  }


  public V1Order createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The time when the order was created, in ISO 8601 format.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public V1Order errors(List<Error> errors) {
    this.errors = errors;
    return this;
  }

  public V1Order addErrorsItem(Error errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Any errors that occurred during the request.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<Error> getErrors() {
    return errors;
  }

  public void setErrors(List<Error> errors) {
    this.errors = errors;
  }


  public V1Order expiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * The time when the order expires if no action is taken, in ISO 8601 format.
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public String getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public V1Order id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The order&#39;s unique identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public V1Order orderHistory(List<V1OrderHistoryEntry> orderHistory) {
    this.orderHistory = orderHistory;
    return this;
  }

  public V1Order addOrderHistoryItem(V1OrderHistoryEntry orderHistoryItem) {
    if (this.orderHistory == null) {
      this.orderHistory = new ArrayList<>();
    }
    this.orderHistory.add(orderHistoryItem);
    return this;
  }

  /**
   * The history of actions associated with the order.
   * @return orderHistory
   */
  @javax.annotation.Nullable
  public List<V1OrderHistoryEntry> getOrderHistory() {
    return orderHistory;
  }

  public void setOrderHistory(List<V1OrderHistoryEntry> orderHistory) {
    this.orderHistory = orderHistory;
  }


  public V1Order paymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  /**
   * The unique identifier of the payment associated with the order.
   * @return paymentId
   */
  @javax.annotation.Nullable
  public String getPaymentId() {
    return paymentId;
  }

  public void setPaymentId(String paymentId) {
    this.paymentId = paymentId;
  }


  public V1Order promoCode(String promoCode) {
    this.promoCode = promoCode;
    return this;
  }

  /**
   * The promo code provided by the buyer, if any.
   * @return promoCode
   */
  @javax.annotation.Nullable
  public String getPromoCode() {
    return promoCode;
  }

  public void setPromoCode(String promoCode) {
    this.promoCode = promoCode;
  }


  public V1Order recipientName(String recipientName) {
    this.recipientName = recipientName;
    return this;
  }

  /**
   * The name of the order&#39;s buyer.
   * @return recipientName
   */
  @javax.annotation.Nullable
  public String getRecipientName() {
    return recipientName;
  }

  public void setRecipientName(String recipientName) {
    this.recipientName = recipientName;
  }


  public V1Order recipientPhoneNumber(String recipientPhoneNumber) {
    this.recipientPhoneNumber = recipientPhoneNumber;
    return this;
  }

  /**
   * The phone number to use for the order&#39;s delivery.
   * @return recipientPhoneNumber
   */
  @javax.annotation.Nullable
  public String getRecipientPhoneNumber() {
    return recipientPhoneNumber;
  }

  public void setRecipientPhoneNumber(String recipientPhoneNumber) {
    this.recipientPhoneNumber = recipientPhoneNumber;
  }


  public V1Order refundedNote(String refundedNote) {
    this.refundedNote = refundedNote;
    return this;
  }

  /**
   * A note provided by the merchant when the order&#39;s state was set to REFUNDED, if any.
   * @return refundedNote
   */
  @javax.annotation.Nullable
  public String getRefundedNote() {
    return refundedNote;
  }

  public void setRefundedNote(String refundedNote) {
    this.refundedNote = refundedNote;
  }


  public V1Order shippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

  /**
   * Get shippingAddress
   * @return shippingAddress
   */
  @javax.annotation.Nullable
  public Address getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  public V1Order state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public V1Order subtotalMoney(V1Money subtotalMoney) {
    this.subtotalMoney = subtotalMoney;
    return this;
  }

  /**
   * Get subtotalMoney
   * @return subtotalMoney
   */
  @javax.annotation.Nullable
  public V1Money getSubtotalMoney() {
    return subtotalMoney;
  }

  public void setSubtotalMoney(V1Money subtotalMoney) {
    this.subtotalMoney = subtotalMoney;
  }


  public V1Order tender(V1Tender tender) {
    this.tender = tender;
    return this;
  }

  /**
   * Get tender
   * @return tender
   */
  @javax.annotation.Nullable
  public V1Tender getTender() {
    return tender;
  }

  public void setTender(V1Tender tender) {
    this.tender = tender;
  }


  public V1Order totalDiscountMoney(V1Money totalDiscountMoney) {
    this.totalDiscountMoney = totalDiscountMoney;
    return this;
  }

  /**
   * Get totalDiscountMoney
   * @return totalDiscountMoney
   */
  @javax.annotation.Nullable
  public V1Money getTotalDiscountMoney() {
    return totalDiscountMoney;
  }

  public void setTotalDiscountMoney(V1Money totalDiscountMoney) {
    this.totalDiscountMoney = totalDiscountMoney;
  }


  public V1Order totalPriceMoney(V1Money totalPriceMoney) {
    this.totalPriceMoney = totalPriceMoney;
    return this;
  }

  /**
   * Get totalPriceMoney
   * @return totalPriceMoney
   */
  @javax.annotation.Nullable
  public V1Money getTotalPriceMoney() {
    return totalPriceMoney;
  }

  public void setTotalPriceMoney(V1Money totalPriceMoney) {
    this.totalPriceMoney = totalPriceMoney;
  }


  public V1Order totalShippingMoney(V1Money totalShippingMoney) {
    this.totalShippingMoney = totalShippingMoney;
    return this;
  }

  /**
   * Get totalShippingMoney
   * @return totalShippingMoney
   */
  @javax.annotation.Nullable
  public V1Money getTotalShippingMoney() {
    return totalShippingMoney;
  }

  public void setTotalShippingMoney(V1Money totalShippingMoney) {
    this.totalShippingMoney = totalShippingMoney;
  }


  public V1Order totalTaxMoney(V1Money totalTaxMoney) {
    this.totalTaxMoney = totalTaxMoney;
    return this;
  }

  /**
   * Get totalTaxMoney
   * @return totalTaxMoney
   */
  @javax.annotation.Nullable
  public V1Money getTotalTaxMoney() {
    return totalTaxMoney;
  }

  public void setTotalTaxMoney(V1Money totalTaxMoney) {
    this.totalTaxMoney = totalTaxMoney;
  }


  public V1Order updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The time when the order was last modified, in ISO 8601 format.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1Order v1Order = (V1Order) o;
    return Objects.equals(this.btcPriceSatoshi, v1Order.btcPriceSatoshi) &&
        Objects.equals(this.btcReceiveAddress, v1Order.btcReceiveAddress) &&
        Objects.equals(this.buyerEmail, v1Order.buyerEmail) &&
        Objects.equals(this.buyerNote, v1Order.buyerNote) &&
        Objects.equals(this.canceledNote, v1Order.canceledNote) &&
        Objects.equals(this.completedNote, v1Order.completedNote) &&
        Objects.equals(this.createdAt, v1Order.createdAt) &&
        Objects.equals(this.errors, v1Order.errors) &&
        Objects.equals(this.expiresAt, v1Order.expiresAt) &&
        Objects.equals(this.id, v1Order.id) &&
        Objects.equals(this.orderHistory, v1Order.orderHistory) &&
        Objects.equals(this.paymentId, v1Order.paymentId) &&
        Objects.equals(this.promoCode, v1Order.promoCode) &&
        Objects.equals(this.recipientName, v1Order.recipientName) &&
        Objects.equals(this.recipientPhoneNumber, v1Order.recipientPhoneNumber) &&
        Objects.equals(this.refundedNote, v1Order.refundedNote) &&
        Objects.equals(this.shippingAddress, v1Order.shippingAddress) &&
        Objects.equals(this.state, v1Order.state) &&
        Objects.equals(this.subtotalMoney, v1Order.subtotalMoney) &&
        Objects.equals(this.tender, v1Order.tender) &&
        Objects.equals(this.totalDiscountMoney, v1Order.totalDiscountMoney) &&
        Objects.equals(this.totalPriceMoney, v1Order.totalPriceMoney) &&
        Objects.equals(this.totalShippingMoney, v1Order.totalShippingMoney) &&
        Objects.equals(this.totalTaxMoney, v1Order.totalTaxMoney) &&
        Objects.equals(this.updatedAt, v1Order.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(btcPriceSatoshi, btcReceiveAddress, buyerEmail, buyerNote, canceledNote, completedNote, createdAt, errors, expiresAt, id, orderHistory, paymentId, promoCode, recipientName, recipientPhoneNumber, refundedNote, shippingAddress, state, subtotalMoney, tender, totalDiscountMoney, totalPriceMoney, totalShippingMoney, totalTaxMoney, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1Order {\n");
    sb.append("    btcPriceSatoshi: ").append(toIndentedString(btcPriceSatoshi)).append("\n");
    sb.append("    btcReceiveAddress: ").append(toIndentedString(btcReceiveAddress)).append("\n");
    sb.append("    buyerEmail: ").append(toIndentedString(buyerEmail)).append("\n");
    sb.append("    buyerNote: ").append(toIndentedString(buyerNote)).append("\n");
    sb.append("    canceledNote: ").append(toIndentedString(canceledNote)).append("\n");
    sb.append("    completedNote: ").append(toIndentedString(completedNote)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    orderHistory: ").append(toIndentedString(orderHistory)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    promoCode: ").append(toIndentedString(promoCode)).append("\n");
    sb.append("    recipientName: ").append(toIndentedString(recipientName)).append("\n");
    sb.append("    recipientPhoneNumber: ").append(toIndentedString(recipientPhoneNumber)).append("\n");
    sb.append("    refundedNote: ").append(toIndentedString(refundedNote)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    subtotalMoney: ").append(toIndentedString(subtotalMoney)).append("\n");
    sb.append("    tender: ").append(toIndentedString(tender)).append("\n");
    sb.append("    totalDiscountMoney: ").append(toIndentedString(totalDiscountMoney)).append("\n");
    sb.append("    totalPriceMoney: ").append(toIndentedString(totalPriceMoney)).append("\n");
    sb.append("    totalShippingMoney: ").append(toIndentedString(totalShippingMoney)).append("\n");
    sb.append("    totalTaxMoney: ").append(toIndentedString(totalTaxMoney)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("btc_price_satoshi");
    openapiFields.add("btc_receive_address");
    openapiFields.add("buyer_email");
    openapiFields.add("buyer_note");
    openapiFields.add("canceled_note");
    openapiFields.add("completed_note");
    openapiFields.add("created_at");
    openapiFields.add("errors");
    openapiFields.add("expires_at");
    openapiFields.add("id");
    openapiFields.add("order_history");
    openapiFields.add("payment_id");
    openapiFields.add("promo_code");
    openapiFields.add("recipient_name");
    openapiFields.add("recipient_phone_number");
    openapiFields.add("refunded_note");
    openapiFields.add("shipping_address");
    openapiFields.add("state");
    openapiFields.add("subtotal_money");
    openapiFields.add("tender");
    openapiFields.add("total_discount_money");
    openapiFields.add("total_price_money");
    openapiFields.add("total_shipping_money");
    openapiFields.add("total_tax_money");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1Order
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1Order.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1Order is not found in the empty JSON string", V1Order.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1Order.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1Order` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("btc_receive_address") != null && !jsonObj.get("btc_receive_address").isJsonNull()) && !jsonObj.get("btc_receive_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `btc_receive_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("btc_receive_address").toString()));
      }
      if ((jsonObj.get("buyer_email") != null && !jsonObj.get("buyer_email").isJsonNull()) && !jsonObj.get("buyer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_email").toString()));
      }
      if ((jsonObj.get("buyer_note") != null && !jsonObj.get("buyer_note").isJsonNull()) && !jsonObj.get("buyer_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_note").toString()));
      }
      if ((jsonObj.get("canceled_note") != null && !jsonObj.get("canceled_note").isJsonNull()) && !jsonObj.get("canceled_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canceled_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canceled_note").toString()));
      }
      if ((jsonObj.get("completed_note") != null && !jsonObj.get("completed_note").isJsonNull()) && !jsonObj.get("completed_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completed_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completed_note").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            Error.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("expires_at") != null && !jsonObj.get("expires_at").isJsonNull()) && !jsonObj.get("expires_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_at").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("order_history") != null && !jsonObj.get("order_history").isJsonNull()) {
        JsonArray jsonArrayorderHistory = jsonObj.getAsJsonArray("order_history");
        if (jsonArrayorderHistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("order_history").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `order_history` to be an array in the JSON string but got `%s`", jsonObj.get("order_history").toString()));
          }

          // validate the optional field `order_history` (array)
          for (int i = 0; i < jsonArrayorderHistory.size(); i++) {
            V1OrderHistoryEntry.validateJsonElement(jsonArrayorderHistory.get(i));
          };
        }
      }
      if ((jsonObj.get("payment_id") != null && !jsonObj.get("payment_id").isJsonNull()) && !jsonObj.get("payment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_id").toString()));
      }
      if ((jsonObj.get("promo_code") != null && !jsonObj.get("promo_code").isJsonNull()) && !jsonObj.get("promo_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promo_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promo_code").toString()));
      }
      if ((jsonObj.get("recipient_name") != null && !jsonObj.get("recipient_name").isJsonNull()) && !jsonObj.get("recipient_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_name").toString()));
      }
      if ((jsonObj.get("recipient_phone_number") != null && !jsonObj.get("recipient_phone_number").isJsonNull()) && !jsonObj.get("recipient_phone_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_phone_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_phone_number").toString()));
      }
      if ((jsonObj.get("refunded_note") != null && !jsonObj.get("refunded_note").isJsonNull()) && !jsonObj.get("refunded_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refunded_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refunded_note").toString()));
      }
      // validate the optional field `shipping_address`
      if (jsonObj.get("shipping_address") != null && !jsonObj.get("shipping_address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("shipping_address"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `subtotal_money`
      if (jsonObj.get("subtotal_money") != null && !jsonObj.get("subtotal_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("subtotal_money"));
      }
      // validate the optional field `tender`
      if (jsonObj.get("tender") != null && !jsonObj.get("tender").isJsonNull()) {
        V1Tender.validateJsonElement(jsonObj.get("tender"));
      }
      // validate the optional field `total_discount_money`
      if (jsonObj.get("total_discount_money") != null && !jsonObj.get("total_discount_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("total_discount_money"));
      }
      // validate the optional field `total_price_money`
      if (jsonObj.get("total_price_money") != null && !jsonObj.get("total_price_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("total_price_money"));
      }
      // validate the optional field `total_shipping_money`
      if (jsonObj.get("total_shipping_money") != null && !jsonObj.get("total_shipping_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("total_shipping_money"));
      }
      // validate the optional field `total_tax_money`
      if (jsonObj.get("total_tax_money") != null && !jsonObj.get("total_tax_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("total_tax_money"));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1Order.class));

       return (TypeAdapter<T>) new TypeAdapter<V1Order>() {
           @Override
           public void write(JsonWriter out, V1Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1Order read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1Order given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1Order
   * @throws IOException if the JSON string is invalid with respect to V1Order
   */
  public static V1Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1Order.class);
  }

  /**
   * Convert an instance of V1Order to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

