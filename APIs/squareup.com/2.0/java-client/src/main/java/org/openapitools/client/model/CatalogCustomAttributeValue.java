/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An instance of a custom attribute. Custom attributes can be defined and added to &#x60;ITEM&#x60; and &#x60;ITEM_VARIATION&#x60; type catalog objects. [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogCustomAttributeValue {
  public static final String SERIALIZED_NAME_BOOLEAN_VALUE = "boolean_value";
  @SerializedName(SERIALIZED_NAME_BOOLEAN_VALUE)
  private Boolean booleanValue;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTE_DEFINITION_ID = "custom_attribute_definition_id";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTE_DEFINITION_ID)
  private String customAttributeDefinitionId;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER_VALUE = "number_value";
  @SerializedName(SERIALIZED_NAME_NUMBER_VALUE)
  private String numberValue;

  public static final String SERIALIZED_NAME_SELECTION_UID_VALUES = "selection_uid_values";
  @SerializedName(SERIALIZED_NAME_SELECTION_UID_VALUES)
  private List<String> selectionUidValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_STRING_VALUE = "string_value";
  @SerializedName(SERIALIZED_NAME_STRING_VALUE)
  private String stringValue;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public CatalogCustomAttributeValue() {
  }

  public CatalogCustomAttributeValue booleanValue(Boolean booleanValue) {
    this.booleanValue = booleanValue;
    return this;
  }

  /**
   * A &#x60;true&#x60; or &#x60;false&#x60; value. Populated if &#x60;type&#x60; &#x3D; &#x60;BOOLEAN&#x60;.
   * @return booleanValue
   */
  @javax.annotation.Nullable
  public Boolean getBooleanValue() {
    return booleanValue;
  }

  public void setBooleanValue(Boolean booleanValue) {
    this.booleanValue = booleanValue;
  }


  public CatalogCustomAttributeValue customAttributeDefinitionId(String customAttributeDefinitionId) {
    this.customAttributeDefinitionId = customAttributeDefinitionId;
    return this;
  }

  /**
   * __Read-only.__ The id of the [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition) this value belongs to.
   * @return customAttributeDefinitionId
   */
  @javax.annotation.Nullable
  public String getCustomAttributeDefinitionId() {
    return customAttributeDefinitionId;
  }

  public void setCustomAttributeDefinitionId(String customAttributeDefinitionId) {
    this.customAttributeDefinitionId = customAttributeDefinitionId;
  }


  public CatalogCustomAttributeValue key(String key) {
    this.key = key;
    return this;
  }

  /**
   * __Read-only.__ A copy of key from the associated &#x60;CatalogCustomAttributeDefinition&#x60;.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public CatalogCustomAttributeValue name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the custom attribute.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CatalogCustomAttributeValue numberValue(String numberValue) {
    this.numberValue = numberValue;
    return this;
  }

  /**
   * Populated if &#x60;type&#x60; &#x3D; &#x60;NUMBER&#x60;. Contains a string representation of a decimal number, using a &#x60;.&#x60; as the decimal separator.
   * @return numberValue
   */
  @javax.annotation.Nullable
  public String getNumberValue() {
    return numberValue;
  }

  public void setNumberValue(String numberValue) {
    this.numberValue = numberValue;
  }


  public CatalogCustomAttributeValue selectionUidValues(List<String> selectionUidValues) {
    this.selectionUidValues = selectionUidValues;
    return this;
  }

  public CatalogCustomAttributeValue addSelectionUidValuesItem(String selectionUidValuesItem) {
    if (this.selectionUidValues == null) {
      this.selectionUidValues = new ArrayList<>();
    }
    this.selectionUidValues.add(selectionUidValuesItem);
    return this;
  }

  /**
   * One or more choices from &#x60;allowed_selections&#x60;. Populated if &#x60;type&#x60; &#x3D; &#x60;SELECTION&#x60;.
   * @return selectionUidValues
   */
  @javax.annotation.Nullable
  public List<String> getSelectionUidValues() {
    return selectionUidValues;
  }

  public void setSelectionUidValues(List<String> selectionUidValues) {
    this.selectionUidValues = selectionUidValues;
  }


  public CatalogCustomAttributeValue stringValue(String stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  /**
   * The string value of the custom attribute.  Populated if &#x60;type&#x60; &#x3D; &#x60;STRING&#x60;.
   * @return stringValue
   */
  @javax.annotation.Nullable
  public String getStringValue() {
    return stringValue;
  }

  public void setStringValue(String stringValue) {
    this.stringValue = stringValue;
  }


  public CatalogCustomAttributeValue type(String type) {
    this.type = type;
    return this;
  }

  /**
   * __Read-only.__ A copy of type from the associated &#x60;CatalogCustomAttributeDefinition&#x60;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogCustomAttributeValue catalogCustomAttributeValue = (CatalogCustomAttributeValue) o;
    return Objects.equals(this.booleanValue, catalogCustomAttributeValue.booleanValue) &&
        Objects.equals(this.customAttributeDefinitionId, catalogCustomAttributeValue.customAttributeDefinitionId) &&
        Objects.equals(this.key, catalogCustomAttributeValue.key) &&
        Objects.equals(this.name, catalogCustomAttributeValue.name) &&
        Objects.equals(this.numberValue, catalogCustomAttributeValue.numberValue) &&
        Objects.equals(this.selectionUidValues, catalogCustomAttributeValue.selectionUidValues) &&
        Objects.equals(this.stringValue, catalogCustomAttributeValue.stringValue) &&
        Objects.equals(this.type, catalogCustomAttributeValue.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(booleanValue, customAttributeDefinitionId, key, name, numberValue, selectionUidValues, stringValue, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogCustomAttributeValue {\n");
    sb.append("    booleanValue: ").append(toIndentedString(booleanValue)).append("\n");
    sb.append("    customAttributeDefinitionId: ").append(toIndentedString(customAttributeDefinitionId)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberValue: ").append(toIndentedString(numberValue)).append("\n");
    sb.append("    selectionUidValues: ").append(toIndentedString(selectionUidValues)).append("\n");
    sb.append("    stringValue: ").append(toIndentedString(stringValue)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boolean_value");
    openapiFields.add("custom_attribute_definition_id");
    openapiFields.add("key");
    openapiFields.add("name");
    openapiFields.add("number_value");
    openapiFields.add("selection_uid_values");
    openapiFields.add("string_value");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogCustomAttributeValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogCustomAttributeValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogCustomAttributeValue is not found in the empty JSON string", CatalogCustomAttributeValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogCustomAttributeValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogCustomAttributeValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("custom_attribute_definition_id") != null && !jsonObj.get("custom_attribute_definition_id").isJsonNull()) && !jsonObj.get("custom_attribute_definition_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_attribute_definition_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_attribute_definition_id").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("number_value") != null && !jsonObj.get("number_value").isJsonNull()) && !jsonObj.get("number_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number_value").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("selection_uid_values") != null && !jsonObj.get("selection_uid_values").isJsonNull() && !jsonObj.get("selection_uid_values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `selection_uid_values` to be an array in the JSON string but got `%s`", jsonObj.get("selection_uid_values").toString()));
      }
      if ((jsonObj.get("string_value") != null && !jsonObj.get("string_value").isJsonNull()) && !jsonObj.get("string_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `string_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("string_value").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogCustomAttributeValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogCustomAttributeValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogCustomAttributeValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogCustomAttributeValue.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogCustomAttributeValue>() {
           @Override
           public void write(JsonWriter out, CatalogCustomAttributeValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogCustomAttributeValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogCustomAttributeValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogCustomAttributeValue
   * @throws IOException if the JSON string is invalid with respect to CatalogCustomAttributeValue
   */
  public static CatalogCustomAttributeValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogCustomAttributeValue.class);
  }

  /**
   * Convert an instance of CatalogCustomAttributeValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

