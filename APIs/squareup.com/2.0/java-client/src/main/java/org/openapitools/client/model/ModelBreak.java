/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A record of an employee&#39;s break during a shift.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelBreak {
  public static final String SERIALIZED_NAME_BREAK_TYPE_ID = "break_type_id";
  @SerializedName(SERIALIZED_NAME_BREAK_TYPE_ID)
  private String breakTypeId;

  public static final String SERIALIZED_NAME_END_AT = "end_at";
  @SerializedName(SERIALIZED_NAME_END_AT)
  private String endAt;

  public static final String SERIALIZED_NAME_EXPECTED_DURATION = "expected_duration";
  @SerializedName(SERIALIZED_NAME_EXPECTED_DURATION)
  private String expectedDuration;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_PAID = "is_paid";
  @SerializedName(SERIALIZED_NAME_IS_PAID)
  private Boolean isPaid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_AT = "start_at";
  @SerializedName(SERIALIZED_NAME_START_AT)
  private String startAt;

  public ModelBreak() {
  }

  public ModelBreak breakTypeId(String breakTypeId) {
    this.breakTypeId = breakTypeId;
    return this;
  }

  /**
   * The &#x60;BreakType&#x60; that this &#x60;Break&#x60; was templated on.
   * @return breakTypeId
   */
  @javax.annotation.Nonnull
  public String getBreakTypeId() {
    return breakTypeId;
  }

  public void setBreakTypeId(String breakTypeId) {
    this.breakTypeId = breakTypeId;
  }


  public ModelBreak endAt(String endAt) {
    this.endAt = endAt;
    return this;
  }

  /**
   * RFC 3339; follows the same timezone information as &#x60;Shift&#x60;. Precision up to the minute is respected; seconds are truncated.
   * @return endAt
   */
  @javax.annotation.Nullable
  public String getEndAt() {
    return endAt;
  }

  public void setEndAt(String endAt) {
    this.endAt = endAt;
  }


  public ModelBreak expectedDuration(String expectedDuration) {
    this.expectedDuration = expectedDuration;
    return this;
  }

  /**
   * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of the break.
   * @return expectedDuration
   */
  @javax.annotation.Nonnull
  public String getExpectedDuration() {
    return expectedDuration;
  }

  public void setExpectedDuration(String expectedDuration) {
    this.expectedDuration = expectedDuration;
  }


  public ModelBreak id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The UUID for this object.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ModelBreak isPaid(Boolean isPaid) {
    this.isPaid = isPaid;
    return this;
  }

  /**
   * Whether this break counts towards time worked for compensation purposes.
   * @return isPaid
   */
  @javax.annotation.Nonnull
  public Boolean getIsPaid() {
    return isPaid;
  }

  public void setIsPaid(Boolean isPaid) {
    this.isPaid = isPaid;
  }


  public ModelBreak name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A human-readable name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ModelBreak startAt(String startAt) {
    this.startAt = startAt;
    return this;
  }

  /**
   * RFC 3339; follows the same timezone information as &#x60;Shift&#x60;. Precision up to the minute is respected; seconds are truncated.
   * @return startAt
   */
  @javax.annotation.Nonnull
  public String getStartAt() {
    return startAt;
  }

  public void setStartAt(String startAt) {
    this.startAt = startAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelBreak _break = (ModelBreak) o;
    return Objects.equals(this.breakTypeId, _break.breakTypeId) &&
        Objects.equals(this.endAt, _break.endAt) &&
        Objects.equals(this.expectedDuration, _break.expectedDuration) &&
        Objects.equals(this.id, _break.id) &&
        Objects.equals(this.isPaid, _break.isPaid) &&
        Objects.equals(this.name, _break.name) &&
        Objects.equals(this.startAt, _break.startAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(breakTypeId, endAt, expectedDuration, id, isPaid, name, startAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelBreak {\n");
    sb.append("    breakTypeId: ").append(toIndentedString(breakTypeId)).append("\n");
    sb.append("    endAt: ").append(toIndentedString(endAt)).append("\n");
    sb.append("    expectedDuration: ").append(toIndentedString(expectedDuration)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isPaid: ").append(toIndentedString(isPaid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("break_type_id");
    openapiFields.add("end_at");
    openapiFields.add("expected_duration");
    openapiFields.add("id");
    openapiFields.add("is_paid");
    openapiFields.add("name");
    openapiFields.add("start_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("break_type_id");
    openapiRequiredFields.add("expected_duration");
    openapiRequiredFields.add("is_paid");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("start_at");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelBreak
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelBreak.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelBreak is not found in the empty JSON string", ModelBreak.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelBreak.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelBreak` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelBreak.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("break_type_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `break_type_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("break_type_id").toString()));
      }
      if ((jsonObj.get("end_at") != null && !jsonObj.get("end_at").isJsonNull()) && !jsonObj.get("end_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_at").toString()));
      }
      if (!jsonObj.get("expected_duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expected_duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expected_duration").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("start_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelBreak.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelBreak' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelBreak> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelBreak.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelBreak>() {
           @Override
           public void write(JsonWriter out, ModelBreak value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelBreak read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelBreak given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelBreak
   * @throws IOException if the JSON string is invalid with respect to ModelBreak
   */
  public static ModelBreak fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelBreak.class);
  }

  /**
   * Convert an instance of ModelBreak to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

