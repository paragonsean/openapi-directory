/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchChangeInventoryRequest;
import org.openapitools.client.model.BatchChangeInventoryResponse;
import org.openapitools.client.model.BatchRetrieveInventoryChangesRequest;
import org.openapitools.client.model.BatchRetrieveInventoryChangesResponse;
import org.openapitools.client.model.BatchRetrieveInventoryCountsRequest;
import org.openapitools.client.model.BatchRetrieveInventoryCountsResponse;
import org.openapitools.client.model.RetrieveInventoryAdjustmentResponse;
import org.openapitools.client.model.RetrieveInventoryChangesResponse;
import org.openapitools.client.model.RetrieveInventoryCountResponse;
import org.openapitools.client.model.RetrieveInventoryPhysicalCountResponse;
import org.openapitools.client.model.RetrieveInventoryTransferResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InventoryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InventoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InventoryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchChangeInventory
     * @param batchChangeInventoryRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchChangeInventoryCall(BatchChangeInventoryRequest batchChangeInventoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchChangeInventoryRequest;

        // create path and map variables
        String localVarPath = "/v2/inventory/changes/batch-create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchChangeInventoryValidateBeforeCall(BatchChangeInventoryRequest batchChangeInventoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchChangeInventoryRequest' is set
        if (batchChangeInventoryRequest == null) {
            throw new ApiException("Missing the required parameter 'batchChangeInventoryRequest' when calling batchChangeInventory(Async)");
        }

        return batchChangeInventoryCall(batchChangeInventoryRequest, _callback);

    }

    /**
     * BatchChangeInventory
     * Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
     * @param batchChangeInventoryRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return BatchChangeInventoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BatchChangeInventoryResponse batchChangeInventory(BatchChangeInventoryRequest batchChangeInventoryRequest) throws ApiException {
        ApiResponse<BatchChangeInventoryResponse> localVarResp = batchChangeInventoryWithHttpInfo(batchChangeInventoryRequest);
        return localVarResp.getData();
    }

    /**
     * BatchChangeInventory
     * Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
     * @param batchChangeInventoryRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;BatchChangeInventoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchChangeInventoryResponse> batchChangeInventoryWithHttpInfo(BatchChangeInventoryRequest batchChangeInventoryRequest) throws ApiException {
        okhttp3.Call localVarCall = batchChangeInventoryValidateBeforeCall(batchChangeInventoryRequest, null);
        Type localVarReturnType = new TypeToken<BatchChangeInventoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BatchChangeInventory (asynchronously)
     * Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
     * @param batchChangeInventoryRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchChangeInventoryAsync(BatchChangeInventoryRequest batchChangeInventoryRequest, final ApiCallback<BatchChangeInventoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchChangeInventoryValidateBeforeCall(batchChangeInventoryRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchChangeInventoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchRetrieveInventoryChanges
     * @param batchRetrieveInventoryChangesRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchRetrieveInventoryChangesCall(BatchRetrieveInventoryChangesRequest batchRetrieveInventoryChangesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchRetrieveInventoryChangesRequest;

        // create path and map variables
        String localVarPath = "/v2/inventory/changes/batch-retrieve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchRetrieveInventoryChangesValidateBeforeCall(BatchRetrieveInventoryChangesRequest batchRetrieveInventoryChangesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchRetrieveInventoryChangesRequest' is set
        if (batchRetrieveInventoryChangesRequest == null) {
            throw new ApiException("Missing the required parameter 'batchRetrieveInventoryChangesRequest' when calling batchRetrieveInventoryChanges(Async)");
        }

        return batchRetrieveInventoryChangesCall(batchRetrieveInventoryChangesRequest, _callback);

    }

    /**
     * BatchRetrieveInventoryChanges
     * Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
     * @param batchRetrieveInventoryChangesRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return BatchRetrieveInventoryChangesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BatchRetrieveInventoryChangesResponse batchRetrieveInventoryChanges(BatchRetrieveInventoryChangesRequest batchRetrieveInventoryChangesRequest) throws ApiException {
        ApiResponse<BatchRetrieveInventoryChangesResponse> localVarResp = batchRetrieveInventoryChangesWithHttpInfo(batchRetrieveInventoryChangesRequest);
        return localVarResp.getData();
    }

    /**
     * BatchRetrieveInventoryChanges
     * Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
     * @param batchRetrieveInventoryChangesRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;BatchRetrieveInventoryChangesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchRetrieveInventoryChangesResponse> batchRetrieveInventoryChangesWithHttpInfo(BatchRetrieveInventoryChangesRequest batchRetrieveInventoryChangesRequest) throws ApiException {
        okhttp3.Call localVarCall = batchRetrieveInventoryChangesValidateBeforeCall(batchRetrieveInventoryChangesRequest, null);
        Type localVarReturnType = new TypeToken<BatchRetrieveInventoryChangesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BatchRetrieveInventoryChanges (asynchronously)
     * Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
     * @param batchRetrieveInventoryChangesRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchRetrieveInventoryChangesAsync(BatchRetrieveInventoryChangesRequest batchRetrieveInventoryChangesRequest, final ApiCallback<BatchRetrieveInventoryChangesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchRetrieveInventoryChangesValidateBeforeCall(batchRetrieveInventoryChangesRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchRetrieveInventoryChangesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchRetrieveInventoryCounts
     * @param batchRetrieveInventoryCountsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchRetrieveInventoryCountsCall(BatchRetrieveInventoryCountsRequest batchRetrieveInventoryCountsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchRetrieveInventoryCountsRequest;

        // create path and map variables
        String localVarPath = "/v2/inventory/counts/batch-retrieve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchRetrieveInventoryCountsValidateBeforeCall(BatchRetrieveInventoryCountsRequest batchRetrieveInventoryCountsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchRetrieveInventoryCountsRequest' is set
        if (batchRetrieveInventoryCountsRequest == null) {
            throw new ApiException("Missing the required parameter 'batchRetrieveInventoryCountsRequest' when calling batchRetrieveInventoryCounts(Async)");
        }

        return batchRetrieveInventoryCountsCall(batchRetrieveInventoryCountsRequest, _callback);

    }

    /**
     * BatchRetrieveInventoryCounts
     * Returns current counts for the provided [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s at the requested [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
     * @param batchRetrieveInventoryCountsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return BatchRetrieveInventoryCountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BatchRetrieveInventoryCountsResponse batchRetrieveInventoryCounts(BatchRetrieveInventoryCountsRequest batchRetrieveInventoryCountsRequest) throws ApiException {
        ApiResponse<BatchRetrieveInventoryCountsResponse> localVarResp = batchRetrieveInventoryCountsWithHttpInfo(batchRetrieveInventoryCountsRequest);
        return localVarResp.getData();
    }

    /**
     * BatchRetrieveInventoryCounts
     * Returns current counts for the provided [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s at the requested [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
     * @param batchRetrieveInventoryCountsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;BatchRetrieveInventoryCountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchRetrieveInventoryCountsResponse> batchRetrieveInventoryCountsWithHttpInfo(BatchRetrieveInventoryCountsRequest batchRetrieveInventoryCountsRequest) throws ApiException {
        okhttp3.Call localVarCall = batchRetrieveInventoryCountsValidateBeforeCall(batchRetrieveInventoryCountsRequest, null);
        Type localVarReturnType = new TypeToken<BatchRetrieveInventoryCountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BatchRetrieveInventoryCounts (asynchronously)
     * Returns current counts for the provided [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s at the requested [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
     * @param batchRetrieveInventoryCountsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchRetrieveInventoryCountsAsync(BatchRetrieveInventoryCountsRequest batchRetrieveInventoryCountsRequest, final ApiCallback<BatchRetrieveInventoryCountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchRetrieveInventoryCountsValidateBeforeCall(batchRetrieveInventoryCountsRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchRetrieveInventoryCountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deprecatedBatchChangeInventory
     * @param batchChangeInventoryRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deprecatedBatchChangeInventoryCall(BatchChangeInventoryRequest batchChangeInventoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchChangeInventoryRequest;

        // create path and map variables
        String localVarPath = "/v2/inventory/batch-change";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deprecatedBatchChangeInventoryValidateBeforeCall(BatchChangeInventoryRequest batchChangeInventoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchChangeInventoryRequest' is set
        if (batchChangeInventoryRequest == null) {
            throw new ApiException("Missing the required parameter 'batchChangeInventoryRequest' when calling deprecatedBatchChangeInventory(Async)");
        }

        return deprecatedBatchChangeInventoryCall(batchChangeInventoryRequest, _callback);

    }

    /**
     * DeprecatedBatchChangeInventory
     * Deprecated version of [BatchChangeInventory](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-change-inventory) after the endpoint URL  is updated to conform to the standard convention.
     * @param batchChangeInventoryRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return BatchChangeInventoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BatchChangeInventoryResponse deprecatedBatchChangeInventory(BatchChangeInventoryRequest batchChangeInventoryRequest) throws ApiException {
        ApiResponse<BatchChangeInventoryResponse> localVarResp = deprecatedBatchChangeInventoryWithHttpInfo(batchChangeInventoryRequest);
        return localVarResp.getData();
    }

    /**
     * DeprecatedBatchChangeInventory
     * Deprecated version of [BatchChangeInventory](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-change-inventory) after the endpoint URL  is updated to conform to the standard convention.
     * @param batchChangeInventoryRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;BatchChangeInventoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchChangeInventoryResponse> deprecatedBatchChangeInventoryWithHttpInfo(BatchChangeInventoryRequest batchChangeInventoryRequest) throws ApiException {
        okhttp3.Call localVarCall = deprecatedBatchChangeInventoryValidateBeforeCall(batchChangeInventoryRequest, null);
        Type localVarReturnType = new TypeToken<BatchChangeInventoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeprecatedBatchChangeInventory (asynchronously)
     * Deprecated version of [BatchChangeInventory](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-change-inventory) after the endpoint URL  is updated to conform to the standard convention.
     * @param batchChangeInventoryRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deprecatedBatchChangeInventoryAsync(BatchChangeInventoryRequest batchChangeInventoryRequest, final ApiCallback<BatchChangeInventoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deprecatedBatchChangeInventoryValidateBeforeCall(batchChangeInventoryRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchChangeInventoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deprecatedBatchRetrieveInventoryChanges
     * @param batchRetrieveInventoryChangesRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deprecatedBatchRetrieveInventoryChangesCall(BatchRetrieveInventoryChangesRequest batchRetrieveInventoryChangesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchRetrieveInventoryChangesRequest;

        // create path and map variables
        String localVarPath = "/v2/inventory/batch-retrieve-changes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deprecatedBatchRetrieveInventoryChangesValidateBeforeCall(BatchRetrieveInventoryChangesRequest batchRetrieveInventoryChangesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchRetrieveInventoryChangesRequest' is set
        if (batchRetrieveInventoryChangesRequest == null) {
            throw new ApiException("Missing the required parameter 'batchRetrieveInventoryChangesRequest' when calling deprecatedBatchRetrieveInventoryChanges(Async)");
        }

        return deprecatedBatchRetrieveInventoryChangesCall(batchRetrieveInventoryChangesRequest, _callback);

    }

    /**
     * DeprecatedBatchRetrieveInventoryChanges
     * Deprecated version of [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes) after the endpoint URL  is updated to conform to the standard convention.
     * @param batchRetrieveInventoryChangesRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return BatchRetrieveInventoryChangesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BatchRetrieveInventoryChangesResponse deprecatedBatchRetrieveInventoryChanges(BatchRetrieveInventoryChangesRequest batchRetrieveInventoryChangesRequest) throws ApiException {
        ApiResponse<BatchRetrieveInventoryChangesResponse> localVarResp = deprecatedBatchRetrieveInventoryChangesWithHttpInfo(batchRetrieveInventoryChangesRequest);
        return localVarResp.getData();
    }

    /**
     * DeprecatedBatchRetrieveInventoryChanges
     * Deprecated version of [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes) after the endpoint URL  is updated to conform to the standard convention.
     * @param batchRetrieveInventoryChangesRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;BatchRetrieveInventoryChangesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchRetrieveInventoryChangesResponse> deprecatedBatchRetrieveInventoryChangesWithHttpInfo(BatchRetrieveInventoryChangesRequest batchRetrieveInventoryChangesRequest) throws ApiException {
        okhttp3.Call localVarCall = deprecatedBatchRetrieveInventoryChangesValidateBeforeCall(batchRetrieveInventoryChangesRequest, null);
        Type localVarReturnType = new TypeToken<BatchRetrieveInventoryChangesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeprecatedBatchRetrieveInventoryChanges (asynchronously)
     * Deprecated version of [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes) after the endpoint URL  is updated to conform to the standard convention.
     * @param batchRetrieveInventoryChangesRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deprecatedBatchRetrieveInventoryChangesAsync(BatchRetrieveInventoryChangesRequest batchRetrieveInventoryChangesRequest, final ApiCallback<BatchRetrieveInventoryChangesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deprecatedBatchRetrieveInventoryChangesValidateBeforeCall(batchRetrieveInventoryChangesRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchRetrieveInventoryChangesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deprecatedBatchRetrieveInventoryCounts
     * @param batchRetrieveInventoryCountsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deprecatedBatchRetrieveInventoryCountsCall(BatchRetrieveInventoryCountsRequest batchRetrieveInventoryCountsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchRetrieveInventoryCountsRequest;

        // create path and map variables
        String localVarPath = "/v2/inventory/batch-retrieve-counts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deprecatedBatchRetrieveInventoryCountsValidateBeforeCall(BatchRetrieveInventoryCountsRequest batchRetrieveInventoryCountsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchRetrieveInventoryCountsRequest' is set
        if (batchRetrieveInventoryCountsRequest == null) {
            throw new ApiException("Missing the required parameter 'batchRetrieveInventoryCountsRequest' when calling deprecatedBatchRetrieveInventoryCounts(Async)");
        }

        return deprecatedBatchRetrieveInventoryCountsCall(batchRetrieveInventoryCountsRequest, _callback);

    }

    /**
     * DeprecatedBatchRetrieveInventoryCounts
     * Deprecated version of [BatchRetrieveInventoryCounts](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-counts) after the endpoint URL  is updated to conform to the standard convention.
     * @param batchRetrieveInventoryCountsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return BatchRetrieveInventoryCountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BatchRetrieveInventoryCountsResponse deprecatedBatchRetrieveInventoryCounts(BatchRetrieveInventoryCountsRequest batchRetrieveInventoryCountsRequest) throws ApiException {
        ApiResponse<BatchRetrieveInventoryCountsResponse> localVarResp = deprecatedBatchRetrieveInventoryCountsWithHttpInfo(batchRetrieveInventoryCountsRequest);
        return localVarResp.getData();
    }

    /**
     * DeprecatedBatchRetrieveInventoryCounts
     * Deprecated version of [BatchRetrieveInventoryCounts](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-counts) after the endpoint URL  is updated to conform to the standard convention.
     * @param batchRetrieveInventoryCountsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @return ApiResponse&lt;BatchRetrieveInventoryCountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchRetrieveInventoryCountsResponse> deprecatedBatchRetrieveInventoryCountsWithHttpInfo(BatchRetrieveInventoryCountsRequest batchRetrieveInventoryCountsRequest) throws ApiException {
        okhttp3.Call localVarCall = deprecatedBatchRetrieveInventoryCountsValidateBeforeCall(batchRetrieveInventoryCountsRequest, null);
        Type localVarReturnType = new TypeToken<BatchRetrieveInventoryCountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeprecatedBatchRetrieveInventoryCounts (asynchronously)
     * Deprecated version of [BatchRetrieveInventoryCounts](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-counts) after the endpoint URL  is updated to conform to the standard convention.
     * @param batchRetrieveInventoryCountsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deprecatedBatchRetrieveInventoryCountsAsync(BatchRetrieveInventoryCountsRequest batchRetrieveInventoryCountsRequest, final ApiCallback<BatchRetrieveInventoryCountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deprecatedBatchRetrieveInventoryCountsValidateBeforeCall(batchRetrieveInventoryCountsRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchRetrieveInventoryCountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deprecatedRetrieveInventoryAdjustment
     * @param adjustmentId ID of the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deprecatedRetrieveInventoryAdjustmentCall(String adjustmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/inventory/adjustment/{adjustment_id}"
            .replace("{" + "adjustment_id" + "}", localVarApiClient.escapeString(adjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deprecatedRetrieveInventoryAdjustmentValidateBeforeCall(String adjustmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adjustmentId' is set
        if (adjustmentId == null) {
            throw new ApiException("Missing the required parameter 'adjustmentId' when calling deprecatedRetrieveInventoryAdjustment(Async)");
        }

        return deprecatedRetrieveInventoryAdjustmentCall(adjustmentId, _callback);

    }

    /**
     * DeprecatedRetrieveInventoryAdjustment
     * Deprecated version of [RetrieveInventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-adjustment) after the endpoint URL  is updated to conform to the standard convention.
     * @param adjustmentId ID of the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) to retrieve. (required)
     * @return RetrieveInventoryAdjustmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveInventoryAdjustmentResponse deprecatedRetrieveInventoryAdjustment(String adjustmentId) throws ApiException {
        ApiResponse<RetrieveInventoryAdjustmentResponse> localVarResp = deprecatedRetrieveInventoryAdjustmentWithHttpInfo(adjustmentId);
        return localVarResp.getData();
    }

    /**
     * DeprecatedRetrieveInventoryAdjustment
     * Deprecated version of [RetrieveInventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-adjustment) after the endpoint URL  is updated to conform to the standard convention.
     * @param adjustmentId ID of the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) to retrieve. (required)
     * @return ApiResponse&lt;RetrieveInventoryAdjustmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveInventoryAdjustmentResponse> deprecatedRetrieveInventoryAdjustmentWithHttpInfo(String adjustmentId) throws ApiException {
        okhttp3.Call localVarCall = deprecatedRetrieveInventoryAdjustmentValidateBeforeCall(adjustmentId, null);
        Type localVarReturnType = new TypeToken<RetrieveInventoryAdjustmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeprecatedRetrieveInventoryAdjustment (asynchronously)
     * Deprecated version of [RetrieveInventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-adjustment) after the endpoint URL  is updated to conform to the standard convention.
     * @param adjustmentId ID of the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deprecatedRetrieveInventoryAdjustmentAsync(String adjustmentId, final ApiCallback<RetrieveInventoryAdjustmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deprecatedRetrieveInventoryAdjustmentValidateBeforeCall(adjustmentId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveInventoryAdjustmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deprecatedRetrieveInventoryPhysicalCount
     * @param physicalCountId ID of the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deprecatedRetrieveInventoryPhysicalCountCall(String physicalCountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/inventory/physical-count/{physical_count_id}"
            .replace("{" + "physical_count_id" + "}", localVarApiClient.escapeString(physicalCountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deprecatedRetrieveInventoryPhysicalCountValidateBeforeCall(String physicalCountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'physicalCountId' is set
        if (physicalCountId == null) {
            throw new ApiException("Missing the required parameter 'physicalCountId' when calling deprecatedRetrieveInventoryPhysicalCount(Async)");
        }

        return deprecatedRetrieveInventoryPhysicalCountCall(physicalCountId, _callback);

    }

    /**
     * DeprecatedRetrieveInventoryPhysicalCount
     * Deprecated version of [RetrieveInventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-physical-count) after the endpoint URL  is updated to conform to the standard convention.
     * @param physicalCountId ID of the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to retrieve. (required)
     * @return RetrieveInventoryPhysicalCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveInventoryPhysicalCountResponse deprecatedRetrieveInventoryPhysicalCount(String physicalCountId) throws ApiException {
        ApiResponse<RetrieveInventoryPhysicalCountResponse> localVarResp = deprecatedRetrieveInventoryPhysicalCountWithHttpInfo(physicalCountId);
        return localVarResp.getData();
    }

    /**
     * DeprecatedRetrieveInventoryPhysicalCount
     * Deprecated version of [RetrieveInventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-physical-count) after the endpoint URL  is updated to conform to the standard convention.
     * @param physicalCountId ID of the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to retrieve. (required)
     * @return ApiResponse&lt;RetrieveInventoryPhysicalCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveInventoryPhysicalCountResponse> deprecatedRetrieveInventoryPhysicalCountWithHttpInfo(String physicalCountId) throws ApiException {
        okhttp3.Call localVarCall = deprecatedRetrieveInventoryPhysicalCountValidateBeforeCall(physicalCountId, null);
        Type localVarReturnType = new TypeToken<RetrieveInventoryPhysicalCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeprecatedRetrieveInventoryPhysicalCount (asynchronously)
     * Deprecated version of [RetrieveInventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-physical-count) after the endpoint URL  is updated to conform to the standard convention.
     * @param physicalCountId ID of the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deprecatedRetrieveInventoryPhysicalCountAsync(String physicalCountId, final ApiCallback<RetrieveInventoryPhysicalCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deprecatedRetrieveInventoryPhysicalCountValidateBeforeCall(physicalCountId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveInventoryPhysicalCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveInventoryAdjustment
     * @param adjustmentId ID of the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveInventoryAdjustmentCall(String adjustmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/inventory/adjustments/{adjustment_id}"
            .replace("{" + "adjustment_id" + "}", localVarApiClient.escapeString(adjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveInventoryAdjustmentValidateBeforeCall(String adjustmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adjustmentId' is set
        if (adjustmentId == null) {
            throw new ApiException("Missing the required parameter 'adjustmentId' when calling retrieveInventoryAdjustment(Async)");
        }

        return retrieveInventoryAdjustmentCall(adjustmentId, _callback);

    }

    /**
     * RetrieveInventoryAdjustment
     * Returns the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) object with the provided &#x60;adjustment_id&#x60;.
     * @param adjustmentId ID of the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) to retrieve. (required)
     * @return RetrieveInventoryAdjustmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveInventoryAdjustmentResponse retrieveInventoryAdjustment(String adjustmentId) throws ApiException {
        ApiResponse<RetrieveInventoryAdjustmentResponse> localVarResp = retrieveInventoryAdjustmentWithHttpInfo(adjustmentId);
        return localVarResp.getData();
    }

    /**
     * RetrieveInventoryAdjustment
     * Returns the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) object with the provided &#x60;adjustment_id&#x60;.
     * @param adjustmentId ID of the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) to retrieve. (required)
     * @return ApiResponse&lt;RetrieveInventoryAdjustmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveInventoryAdjustmentResponse> retrieveInventoryAdjustmentWithHttpInfo(String adjustmentId) throws ApiException {
        okhttp3.Call localVarCall = retrieveInventoryAdjustmentValidateBeforeCall(adjustmentId, null);
        Type localVarReturnType = new TypeToken<RetrieveInventoryAdjustmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveInventoryAdjustment (asynchronously)
     * Returns the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) object with the provided &#x60;adjustment_id&#x60;.
     * @param adjustmentId ID of the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveInventoryAdjustmentAsync(String adjustmentId, final ApiCallback<RetrieveInventoryAdjustmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveInventoryAdjustmentValidateBeforeCall(adjustmentId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveInventoryAdjustmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveInventoryChanges
     * @param catalogObjectId ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) to retrieve. (required)
     * @param locationIds The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveInventoryChangesCall(String catalogObjectId, String locationIds, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/inventory/{catalog_object_id}/changes"
            .replace("{" + "catalog_object_id" + "}", localVarApiClient.escapeString(catalogObjectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_ids", locationIds));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveInventoryChangesValidateBeforeCall(String catalogObjectId, String locationIds, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalogObjectId' is set
        if (catalogObjectId == null) {
            throw new ApiException("Missing the required parameter 'catalogObjectId' when calling retrieveInventoryChanges(Async)");
        }

        return retrieveInventoryChangesCall(catalogObjectId, locationIds, cursor, _callback);

    }

    /**
     * RetrieveInventoryChanges
     * Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) at the requested [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s.   You can achieve the same result by calling [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes)  and having the &#x60;catalog_object_ids&#x60; list contain a single element of the &#x60;CatalogObject&#x60; ID.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint can be  used to display recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
     * @param catalogObjectId ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) to retrieve. (required)
     * @param locationIds The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information. (optional)
     * @return RetrieveInventoryChangesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveInventoryChangesResponse retrieveInventoryChanges(String catalogObjectId, String locationIds, String cursor) throws ApiException {
        ApiResponse<RetrieveInventoryChangesResponse> localVarResp = retrieveInventoryChangesWithHttpInfo(catalogObjectId, locationIds, cursor);
        return localVarResp.getData();
    }

    /**
     * RetrieveInventoryChanges
     * Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) at the requested [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s.   You can achieve the same result by calling [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes)  and having the &#x60;catalog_object_ids&#x60; list contain a single element of the &#x60;CatalogObject&#x60; ID.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint can be  used to display recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
     * @param catalogObjectId ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) to retrieve. (required)
     * @param locationIds The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information. (optional)
     * @return ApiResponse&lt;RetrieveInventoryChangesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveInventoryChangesResponse> retrieveInventoryChangesWithHttpInfo(String catalogObjectId, String locationIds, String cursor) throws ApiException {
        okhttp3.Call localVarCall = retrieveInventoryChangesValidateBeforeCall(catalogObjectId, locationIds, cursor, null);
        Type localVarReturnType = new TypeToken<RetrieveInventoryChangesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveInventoryChanges (asynchronously)
     * Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) at the requested [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s.   You can achieve the same result by calling [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes)  and having the &#x60;catalog_object_ids&#x60; list contain a single element of the &#x60;CatalogObject&#x60; ID.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint can be  used to display recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
     * @param catalogObjectId ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) to retrieve. (required)
     * @param locationIds The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveInventoryChangesAsync(String catalogObjectId, String locationIds, String cursor, final ApiCallback<RetrieveInventoryChangesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveInventoryChangesValidateBeforeCall(catalogObjectId, locationIds, cursor, _callback);
        Type localVarReturnType = new TypeToken<RetrieveInventoryChangesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveInventoryCount
     * @param catalogObjectId ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) to retrieve. (required)
     * @param locationIds The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveInventoryCountCall(String catalogObjectId, String locationIds, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/inventory/{catalog_object_id}"
            .replace("{" + "catalog_object_id" + "}", localVarApiClient.escapeString(catalogObjectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_ids", locationIds));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveInventoryCountValidateBeforeCall(String catalogObjectId, String locationIds, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalogObjectId' is set
        if (catalogObjectId == null) {
            throw new ApiException("Missing the required parameter 'catalogObjectId' when calling retrieveInventoryCount(Async)");
        }

        return retrieveInventoryCountCall(catalogObjectId, locationIds, cursor, _callback);

    }

    /**
     * RetrieveInventoryCount
     * Retrieves the current calculated stock count for a given [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) at a given set of [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
     * @param catalogObjectId ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) to retrieve. (required)
     * @param locationIds The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information. (optional)
     * @return RetrieveInventoryCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveInventoryCountResponse retrieveInventoryCount(String catalogObjectId, String locationIds, String cursor) throws ApiException {
        ApiResponse<RetrieveInventoryCountResponse> localVarResp = retrieveInventoryCountWithHttpInfo(catalogObjectId, locationIds, cursor);
        return localVarResp.getData();
    }

    /**
     * RetrieveInventoryCount
     * Retrieves the current calculated stock count for a given [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) at a given set of [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
     * @param catalogObjectId ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) to retrieve. (required)
     * @param locationIds The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information. (optional)
     * @return ApiResponse&lt;RetrieveInventoryCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveInventoryCountResponse> retrieveInventoryCountWithHttpInfo(String catalogObjectId, String locationIds, String cursor) throws ApiException {
        okhttp3.Call localVarCall = retrieveInventoryCountValidateBeforeCall(catalogObjectId, locationIds, cursor, null);
        Type localVarReturnType = new TypeToken<RetrieveInventoryCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveInventoryCount (asynchronously)
     * Retrieves the current calculated stock count for a given [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) at a given set of [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
     * @param catalogObjectId ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) to retrieve. (required)
     * @param locationIds The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated list. An empty list queries all locations. (optional)
     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveInventoryCountAsync(String catalogObjectId, String locationIds, String cursor, final ApiCallback<RetrieveInventoryCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveInventoryCountValidateBeforeCall(catalogObjectId, locationIds, cursor, _callback);
        Type localVarReturnType = new TypeToken<RetrieveInventoryCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveInventoryPhysicalCount
     * @param physicalCountId ID of the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveInventoryPhysicalCountCall(String physicalCountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/inventory/physical-counts/{physical_count_id}"
            .replace("{" + "physical_count_id" + "}", localVarApiClient.escapeString(physicalCountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveInventoryPhysicalCountValidateBeforeCall(String physicalCountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'physicalCountId' is set
        if (physicalCountId == null) {
            throw new ApiException("Missing the required parameter 'physicalCountId' when calling retrieveInventoryPhysicalCount(Async)");
        }

        return retrieveInventoryPhysicalCountCall(physicalCountId, _callback);

    }

    /**
     * RetrieveInventoryPhysicalCount
     * Returns the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) object with the provided &#x60;physical_count_id&#x60;.
     * @param physicalCountId ID of the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to retrieve. (required)
     * @return RetrieveInventoryPhysicalCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveInventoryPhysicalCountResponse retrieveInventoryPhysicalCount(String physicalCountId) throws ApiException {
        ApiResponse<RetrieveInventoryPhysicalCountResponse> localVarResp = retrieveInventoryPhysicalCountWithHttpInfo(physicalCountId);
        return localVarResp.getData();
    }

    /**
     * RetrieveInventoryPhysicalCount
     * Returns the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) object with the provided &#x60;physical_count_id&#x60;.
     * @param physicalCountId ID of the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to retrieve. (required)
     * @return ApiResponse&lt;RetrieveInventoryPhysicalCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveInventoryPhysicalCountResponse> retrieveInventoryPhysicalCountWithHttpInfo(String physicalCountId) throws ApiException {
        okhttp3.Call localVarCall = retrieveInventoryPhysicalCountValidateBeforeCall(physicalCountId, null);
        Type localVarReturnType = new TypeToken<RetrieveInventoryPhysicalCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveInventoryPhysicalCount (asynchronously)
     * Returns the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) object with the provided &#x60;physical_count_id&#x60;.
     * @param physicalCountId ID of the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveInventoryPhysicalCountAsync(String physicalCountId, final ApiCallback<RetrieveInventoryPhysicalCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveInventoryPhysicalCountValidateBeforeCall(physicalCountId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveInventoryPhysicalCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveInventoryTransfer
     * @param transferId ID of the [InventoryTransfer](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryTransfer) to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveInventoryTransferCall(String transferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/inventory/transfers/{transfer_id}"
            .replace("{" + "transfer_id" + "}", localVarApiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveInventoryTransferValidateBeforeCall(String transferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling retrieveInventoryTransfer(Async)");
        }

        return retrieveInventoryTransferCall(transferId, _callback);

    }

    /**
     * RetrieveInventoryTransfer
     * Returns the [InventoryTransfer](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryTransfer) object with the provided &#x60;transfer_id&#x60;.
     * @param transferId ID of the [InventoryTransfer](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryTransfer) to retrieve. (required)
     * @return RetrieveInventoryTransferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveInventoryTransferResponse retrieveInventoryTransfer(String transferId) throws ApiException {
        ApiResponse<RetrieveInventoryTransferResponse> localVarResp = retrieveInventoryTransferWithHttpInfo(transferId);
        return localVarResp.getData();
    }

    /**
     * RetrieveInventoryTransfer
     * Returns the [InventoryTransfer](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryTransfer) object with the provided &#x60;transfer_id&#x60;.
     * @param transferId ID of the [InventoryTransfer](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryTransfer) to retrieve. (required)
     * @return ApiResponse&lt;RetrieveInventoryTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveInventoryTransferResponse> retrieveInventoryTransferWithHttpInfo(String transferId) throws ApiException {
        okhttp3.Call localVarCall = retrieveInventoryTransferValidateBeforeCall(transferId, null);
        Type localVarReturnType = new TypeToken<RetrieveInventoryTransferResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RetrieveInventoryTransfer (asynchronously)
     * Returns the [InventoryTransfer](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryTransfer) object with the provided &#x60;transfer_id&#x60;.
     * @param transferId ID of the [InventoryTransfer](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryTransfer) to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveInventoryTransferAsync(String transferId, final ApiCallback<RetrieveInventoryTransferResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveInventoryTransferValidateBeforeCall(transferId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveInventoryTransferResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
