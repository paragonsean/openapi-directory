/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.V1Money;
import org.openapitools.client.model.V1PaymentTax;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V1PaymentSurcharge
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V1PaymentSurcharge {
  public static final String SERIALIZED_NAME_AMOUNT_MONEY = "amount_money";
  @SerializedName(SERIALIZED_NAME_AMOUNT_MONEY)
  private V1Money amountMoney;

  public static final String SERIALIZED_NAME_APPLIED_MONEY = "applied_money";
  @SerializedName(SERIALIZED_NAME_APPLIED_MONEY)
  private V1Money appliedMoney;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private String rate;

  public static final String SERIALIZED_NAME_SURCHARGE_ID = "surcharge_id";
  @SerializedName(SERIALIZED_NAME_SURCHARGE_ID)
  private String surchargeId;

  public static final String SERIALIZED_NAME_TAXABLE = "taxable";
  @SerializedName(SERIALIZED_NAME_TAXABLE)
  private Boolean taxable;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private List<V1PaymentTax> taxes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public V1PaymentSurcharge() {
  }

  public V1PaymentSurcharge amountMoney(V1Money amountMoney) {
    this.amountMoney = amountMoney;
    return this;
  }

  /**
   * Get amountMoney
   * @return amountMoney
   */
  @javax.annotation.Nullable
  public V1Money getAmountMoney() {
    return amountMoney;
  }

  public void setAmountMoney(V1Money amountMoney) {
    this.amountMoney = amountMoney;
  }


  public V1PaymentSurcharge appliedMoney(V1Money appliedMoney) {
    this.appliedMoney = appliedMoney;
    return this;
  }

  /**
   * Get appliedMoney
   * @return appliedMoney
   */
  @javax.annotation.Nullable
  public V1Money getAppliedMoney() {
    return appliedMoney;
  }

  public void setAppliedMoney(V1Money appliedMoney) {
    this.appliedMoney = appliedMoney;
  }


  public V1PaymentSurcharge name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the surcharge.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public V1PaymentSurcharge rate(String rate) {
    this.rate = rate;
    return this;
  }

  /**
   * The amount of the surcharge as a percentage. The percentage is provided as a string representing the decimal equivalent of the percentage. For example, \&quot;0.7\&quot; corresponds to a 7% surcharge. Exactly one of rate or amount_money should be set.
   * @return rate
   */
  @javax.annotation.Nullable
  public String getRate() {
    return rate;
  }

  public void setRate(String rate) {
    this.rate = rate;
  }


  public V1PaymentSurcharge surchargeId(String surchargeId) {
    this.surchargeId = surchargeId;
    return this;
  }

  /**
   * A Square-issued unique identifier associated with the surcharge.
   * @return surchargeId
   */
  @javax.annotation.Nullable
  public String getSurchargeId() {
    return surchargeId;
  }

  public void setSurchargeId(String surchargeId) {
    this.surchargeId = surchargeId;
  }


  public V1PaymentSurcharge taxable(Boolean taxable) {
    this.taxable = taxable;
    return this;
  }

  /**
   * Indicates whether the surcharge is taxable.
   * @return taxable
   */
  @javax.annotation.Nullable
  public Boolean getTaxable() {
    return taxable;
  }

  public void setTaxable(Boolean taxable) {
    this.taxable = taxable;
  }


  public V1PaymentSurcharge taxes(List<V1PaymentTax> taxes) {
    this.taxes = taxes;
    return this;
  }

  public V1PaymentSurcharge addTaxesItem(V1PaymentTax taxesItem) {
    if (this.taxes == null) {
      this.taxes = new ArrayList<>();
    }
    this.taxes.add(taxesItem);
    return this;
  }

  /**
   * The list of taxes that should be applied to the surcharge.
   * @return taxes
   */
  @javax.annotation.Nullable
  public List<V1PaymentTax> getTaxes() {
    return taxes;
  }

  public void setTaxes(List<V1PaymentTax> taxes) {
    this.taxes = taxes;
  }


  public V1PaymentSurcharge type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Indicates the source of the surcharge. For example, if it was applied as an automatic gratuity for a large group.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PaymentSurcharge v1PaymentSurcharge = (V1PaymentSurcharge) o;
    return Objects.equals(this.amountMoney, v1PaymentSurcharge.amountMoney) &&
        Objects.equals(this.appliedMoney, v1PaymentSurcharge.appliedMoney) &&
        Objects.equals(this.name, v1PaymentSurcharge.name) &&
        Objects.equals(this.rate, v1PaymentSurcharge.rate) &&
        Objects.equals(this.surchargeId, v1PaymentSurcharge.surchargeId) &&
        Objects.equals(this.taxable, v1PaymentSurcharge.taxable) &&
        Objects.equals(this.taxes, v1PaymentSurcharge.taxes) &&
        Objects.equals(this.type, v1PaymentSurcharge.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountMoney, appliedMoney, name, rate, surchargeId, taxable, taxes, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PaymentSurcharge {\n");
    sb.append("    amountMoney: ").append(toIndentedString(amountMoney)).append("\n");
    sb.append("    appliedMoney: ").append(toIndentedString(appliedMoney)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    surchargeId: ").append(toIndentedString(surchargeId)).append("\n");
    sb.append("    taxable: ").append(toIndentedString(taxable)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount_money");
    openapiFields.add("applied_money");
    openapiFields.add("name");
    openapiFields.add("rate");
    openapiFields.add("surcharge_id");
    openapiFields.add("taxable");
    openapiFields.add("taxes");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1PaymentSurcharge
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1PaymentSurcharge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PaymentSurcharge is not found in the empty JSON string", V1PaymentSurcharge.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1PaymentSurcharge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PaymentSurcharge` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amount_money`
      if (jsonObj.get("amount_money") != null && !jsonObj.get("amount_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("amount_money"));
      }
      // validate the optional field `applied_money`
      if (jsonObj.get("applied_money") != null && !jsonObj.get("applied_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("applied_money"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("rate") != null && !jsonObj.get("rate").isJsonNull()) && !jsonObj.get("rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate").toString()));
      }
      if ((jsonObj.get("surcharge_id") != null && !jsonObj.get("surcharge_id").isJsonNull()) && !jsonObj.get("surcharge_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surcharge_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surcharge_id").toString()));
      }
      if (jsonObj.get("taxes") != null && !jsonObj.get("taxes").isJsonNull()) {
        JsonArray jsonArraytaxes = jsonObj.getAsJsonArray("taxes");
        if (jsonArraytaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxes` to be an array in the JSON string but got `%s`", jsonObj.get("taxes").toString()));
          }

          // validate the optional field `taxes` (array)
          for (int i = 0; i < jsonArraytaxes.size(); i++) {
            V1PaymentTax.validateJsonElement(jsonArraytaxes.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PaymentSurcharge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PaymentSurcharge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PaymentSurcharge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PaymentSurcharge.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PaymentSurcharge>() {
           @Override
           public void write(JsonWriter out, V1PaymentSurcharge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PaymentSurcharge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1PaymentSurcharge given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1PaymentSurcharge
   * @throws IOException if the JSON string is invalid with respect to V1PaymentSurcharge
   */
  public static V1PaymentSurcharge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PaymentSurcharge.class);
  }

  /**
   * Convert an instance of V1PaymentSurcharge to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

