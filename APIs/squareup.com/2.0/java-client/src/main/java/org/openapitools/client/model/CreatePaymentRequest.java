/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.CashPaymentDetails;
import org.openapitools.client.model.ExternalPaymentDetails;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a request to create a payment using  [CreatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequest {
  public static final String SERIALIZED_NAME_ACCEPT_PARTIAL_AUTHORIZATION = "accept_partial_authorization";
  @SerializedName(SERIALIZED_NAME_ACCEPT_PARTIAL_AUTHORIZATION)
  private Boolean acceptPartialAuthorization;

  public static final String SERIALIZED_NAME_AMOUNT_MONEY = "amount_money";
  @SerializedName(SERIALIZED_NAME_AMOUNT_MONEY)
  private Money amountMoney;

  public static final String SERIALIZED_NAME_APP_FEE_MONEY = "app_fee_money";
  @SerializedName(SERIALIZED_NAME_APP_FEE_MONEY)
  private Money appFeeMoney;

  public static final String SERIALIZED_NAME_AUTOCOMPLETE = "autocomplete";
  @SerializedName(SERIALIZED_NAME_AUTOCOMPLETE)
  private Boolean autocomplete;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billing_address";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private Address billingAddress;

  public static final String SERIALIZED_NAME_BUYER_EMAIL_ADDRESS = "buyer_email_address";
  @SerializedName(SERIALIZED_NAME_BUYER_EMAIL_ADDRESS)
  private String buyerEmailAddress;

  public static final String SERIALIZED_NAME_CASH_DETAILS = "cash_details";
  @SerializedName(SERIALIZED_NAME_CASH_DETAILS)
  private CashPaymentDetails cashDetails;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_DELAY_DURATION = "delay_duration";
  @SerializedName(SERIALIZED_NAME_DELAY_DURATION)
  private String delayDuration;

  public static final String SERIALIZED_NAME_EXTERNAL_DETAILS = "external_details";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DETAILS)
  private ExternalPaymentDetails externalDetails;

  public static final String SERIALIZED_NAME_IDEMPOTENCY_KEY = "idempotency_key";
  @SerializedName(SERIALIZED_NAME_IDEMPOTENCY_KEY)
  private String idempotencyKey;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "reference_id";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shipping_address";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private Address shippingAddress;

  public static final String SERIALIZED_NAME_SOURCE_ID = "source_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_STATEMENT_DESCRIPTION_IDENTIFIER = "statement_description_identifier";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DESCRIPTION_IDENTIFIER)
  private String statementDescriptionIdentifier;

  public static final String SERIALIZED_NAME_TIP_MONEY = "tip_money";
  @SerializedName(SERIALIZED_NAME_TIP_MONEY)
  private Money tipMoney;

  public static final String SERIALIZED_NAME_VERIFICATION_TOKEN = "verification_token";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_TOKEN)
  private String verificationToken;

  public CreatePaymentRequest() {
  }

  public CreatePaymentRequest acceptPartialAuthorization(Boolean acceptPartialAuthorization) {
    this.acceptPartialAuthorization = acceptPartialAuthorization;
    return this;
  }

  /**
   * If set to &#x60;true&#x60; and charging a Square Gift Card, a payment might be returned with &#x60;amount_money&#x60; equal to less than what was requested. For example, a request for $20 when charging a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card payment. This field cannot be &#x60;true&#x60; when &#x60;autocomplete &#x3D; true&#x60;.  For more information, see [Partial amount with Square Gift Cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).  Default: false
   * @return acceptPartialAuthorization
   */
  @javax.annotation.Nullable
  public Boolean getAcceptPartialAuthorization() {
    return acceptPartialAuthorization;
  }

  public void setAcceptPartialAuthorization(Boolean acceptPartialAuthorization) {
    this.acceptPartialAuthorization = acceptPartialAuthorization;
  }


  public CreatePaymentRequest amountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
    return this;
  }

  /**
   * Get amountMoney
   * @return amountMoney
   */
  @javax.annotation.Nonnull
  public Money getAmountMoney() {
    return amountMoney;
  }

  public void setAmountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
  }


  public CreatePaymentRequest appFeeMoney(Money appFeeMoney) {
    this.appFeeMoney = appFeeMoney;
    return this;
  }

  /**
   * Get appFeeMoney
   * @return appFeeMoney
   */
  @javax.annotation.Nullable
  public Money getAppFeeMoney() {
    return appFeeMoney;
  }

  public void setAppFeeMoney(Money appFeeMoney) {
    this.appFeeMoney = appFeeMoney;
  }


  public CreatePaymentRequest autocomplete(Boolean autocomplete) {
    this.autocomplete = autocomplete;
    return this;
  }

  /**
   * If set to &#x60;true&#x60;, this payment will be completed when possible. If set to &#x60;false&#x60;, this payment is held in an approved state until either explicitly completed (captured) or canceled (voided). For more information, see [Delayed capture](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).  Default: true
   * @return autocomplete
   */
  @javax.annotation.Nullable
  public Boolean getAutocomplete() {
    return autocomplete;
  }

  public void setAutocomplete(Boolean autocomplete) {
    this.autocomplete = autocomplete;
  }


  public CreatePaymentRequest billingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }


  public CreatePaymentRequest buyerEmailAddress(String buyerEmailAddress) {
    this.buyerEmailAddress = buyerEmailAddress;
    return this;
  }

  /**
   * The buyer&#39;s email address.
   * @return buyerEmailAddress
   */
  @javax.annotation.Nullable
  public String getBuyerEmailAddress() {
    return buyerEmailAddress;
  }

  public void setBuyerEmailAddress(String buyerEmailAddress) {
    this.buyerEmailAddress = buyerEmailAddress;
  }


  public CreatePaymentRequest cashDetails(CashPaymentDetails cashDetails) {
    this.cashDetails = cashDetails;
    return this;
  }

  /**
   * Get cashDetails
   * @return cashDetails
   */
  @javax.annotation.Nullable
  public CashPaymentDetails getCashDetails() {
    return cashDetails;
  }

  public void setCashDetails(CashPaymentDetails cashDetails) {
    this.cashDetails = cashDetails;
  }


  public CreatePaymentRequest customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.  This is required if the &#x60;source_id&#x60; refers to a card on file created using the Customers API.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public CreatePaymentRequest delayDuration(String delayDuration) {
    this.delayDuration = delayDuration;
    return this;
  }

  /**
   * The duration of time after the payment&#39;s creation when Square automatically cancels the payment. This automatic cancellation applies only to payments that do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the &#x60;delay_duration&#x60; time period.  This parameter should be specified as a time duration, in RFC 3339 format, with a minimum value of 1 minute.  Note: This feature is only supported for card payments. This parameter can only be set for a delayed capture payment (&#x60;autocomplete&#x3D;false&#x60;).  Default:  - Card-present payments: \&quot;PT36H\&quot; (36 hours) from the creation time. - Card-not-present payments: \&quot;P7D\&quot; (7 days) from the creation time.
   * @return delayDuration
   */
  @javax.annotation.Nullable
  public String getDelayDuration() {
    return delayDuration;
  }

  public void setDelayDuration(String delayDuration) {
    this.delayDuration = delayDuration;
  }


  public CreatePaymentRequest externalDetails(ExternalPaymentDetails externalDetails) {
    this.externalDetails = externalDetails;
    return this;
  }

  /**
   * Get externalDetails
   * @return externalDetails
   */
  @javax.annotation.Nullable
  public ExternalPaymentDetails getExternalDetails() {
    return externalDetails;
  }

  public void setExternalDetails(ExternalPaymentDetails externalDetails) {
    this.externalDetails = externalDetails;
  }


  public CreatePaymentRequest idempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
    return this;
  }

  /**
   * A unique string that identifies this &#x60;CreatePayment&#x60; request. Keys can be any valid string but must be unique for every &#x60;CreatePayment&#x60; request.  Max: 45 characters  Note: The number of allowed characters might be less than the stated maximum, if multi-byte characters are used.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
   * @return idempotencyKey
   */
  @javax.annotation.Nonnull
  public String getIdempotencyKey() {
    return idempotencyKey;
  }

  public void setIdempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
  }


  public CreatePaymentRequest locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The location ID to associate with the payment. If not specified, the default location is used.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public CreatePaymentRequest note(String note) {
    this.note = note;
    return this;
  }

  /**
   * An optional note to be entered by the developer when creating a payment.  Limit 500 characters.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public CreatePaymentRequest orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Associates a previously created order with this payment.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public CreatePaymentRequest referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * A user-defined ID to associate with the payment.  You can use this field to associate the payment to an entity in an external system  (for example, you might specify an order ID that is generated by a third-party shopping cart).  Limit 40 characters.
   * @return referenceId
   */
  @javax.annotation.Nullable
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public CreatePaymentRequest shippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

  /**
   * Get shippingAddress
   * @return shippingAddress
   */
  @javax.annotation.Nullable
  public Address getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  public CreatePaymentRequest sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  /**
   * The ID for the source of funds for this payment. This can be a payment token  (card nonce) generated by the Square payment form or a card on file made with the  Customers API. If recording a payment that the seller  received outside of Square, specify either \&quot;CASH\&quot; or \&quot;EXTERNAL\&quot;.  For more information, see  [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).
   * @return sourceId
   */
  @javax.annotation.Nonnull
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public CreatePaymentRequest statementDescriptionIdentifier(String statementDescriptionIdentifier) {
    this.statementDescriptionIdentifier = statementDescriptionIdentifier;
    return this;
  }

  /**
   * Optional additional payment information to include on the customer&#39;s card statement as part of the statement description. This can be, for example, an invoice number, ticket number, or short description that uniquely identifies the purchase.  Note that the &#x60;statement_description_identifier&#x60; might get truncated on the statement description to fit the required information including the Square identifier (SQ *) and name of the seller taking the payment.
   * @return statementDescriptionIdentifier
   */
  @javax.annotation.Nullable
  public String getStatementDescriptionIdentifier() {
    return statementDescriptionIdentifier;
  }

  public void setStatementDescriptionIdentifier(String statementDescriptionIdentifier) {
    this.statementDescriptionIdentifier = statementDescriptionIdentifier;
  }


  public CreatePaymentRequest tipMoney(Money tipMoney) {
    this.tipMoney = tipMoney;
    return this;
  }

  /**
   * Get tipMoney
   * @return tipMoney
   */
  @javax.annotation.Nullable
  public Money getTipMoney() {
    return tipMoney;
  }

  public void setTipMoney(Money tipMoney) {
    this.tipMoney = tipMoney;
  }


  public CreatePaymentRequest verificationToken(String verificationToken) {
    this.verificationToken = verificationToken;
    return this;
  }

  /**
   * An identifying token generated by [payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer). Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.  For more information, see [SCA Overview](https://developer.squareup.com/docs/sca-overview).
   * @return verificationToken
   */
  @javax.annotation.Nullable
  public String getVerificationToken() {
    return verificationToken;
  }

  public void setVerificationToken(String verificationToken) {
    this.verificationToken = verificationToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequest createPaymentRequest = (CreatePaymentRequest) o;
    return Objects.equals(this.acceptPartialAuthorization, createPaymentRequest.acceptPartialAuthorization) &&
        Objects.equals(this.amountMoney, createPaymentRequest.amountMoney) &&
        Objects.equals(this.appFeeMoney, createPaymentRequest.appFeeMoney) &&
        Objects.equals(this.autocomplete, createPaymentRequest.autocomplete) &&
        Objects.equals(this.billingAddress, createPaymentRequest.billingAddress) &&
        Objects.equals(this.buyerEmailAddress, createPaymentRequest.buyerEmailAddress) &&
        Objects.equals(this.cashDetails, createPaymentRequest.cashDetails) &&
        Objects.equals(this.customerId, createPaymentRequest.customerId) &&
        Objects.equals(this.delayDuration, createPaymentRequest.delayDuration) &&
        Objects.equals(this.externalDetails, createPaymentRequest.externalDetails) &&
        Objects.equals(this.idempotencyKey, createPaymentRequest.idempotencyKey) &&
        Objects.equals(this.locationId, createPaymentRequest.locationId) &&
        Objects.equals(this.note, createPaymentRequest.note) &&
        Objects.equals(this.orderId, createPaymentRequest.orderId) &&
        Objects.equals(this.referenceId, createPaymentRequest.referenceId) &&
        Objects.equals(this.shippingAddress, createPaymentRequest.shippingAddress) &&
        Objects.equals(this.sourceId, createPaymentRequest.sourceId) &&
        Objects.equals(this.statementDescriptionIdentifier, createPaymentRequest.statementDescriptionIdentifier) &&
        Objects.equals(this.tipMoney, createPaymentRequest.tipMoney) &&
        Objects.equals(this.verificationToken, createPaymentRequest.verificationToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptPartialAuthorization, amountMoney, appFeeMoney, autocomplete, billingAddress, buyerEmailAddress, cashDetails, customerId, delayDuration, externalDetails, idempotencyKey, locationId, note, orderId, referenceId, shippingAddress, sourceId, statementDescriptionIdentifier, tipMoney, verificationToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequest {\n");
    sb.append("    acceptPartialAuthorization: ").append(toIndentedString(acceptPartialAuthorization)).append("\n");
    sb.append("    amountMoney: ").append(toIndentedString(amountMoney)).append("\n");
    sb.append("    appFeeMoney: ").append(toIndentedString(appFeeMoney)).append("\n");
    sb.append("    autocomplete: ").append(toIndentedString(autocomplete)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    buyerEmailAddress: ").append(toIndentedString(buyerEmailAddress)).append("\n");
    sb.append("    cashDetails: ").append(toIndentedString(cashDetails)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    delayDuration: ").append(toIndentedString(delayDuration)).append("\n");
    sb.append("    externalDetails: ").append(toIndentedString(externalDetails)).append("\n");
    sb.append("    idempotencyKey: ").append(toIndentedString(idempotencyKey)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    statementDescriptionIdentifier: ").append(toIndentedString(statementDescriptionIdentifier)).append("\n");
    sb.append("    tipMoney: ").append(toIndentedString(tipMoney)).append("\n");
    sb.append("    verificationToken: ").append(toIndentedString(verificationToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accept_partial_authorization");
    openapiFields.add("amount_money");
    openapiFields.add("app_fee_money");
    openapiFields.add("autocomplete");
    openapiFields.add("billing_address");
    openapiFields.add("buyer_email_address");
    openapiFields.add("cash_details");
    openapiFields.add("customer_id");
    openapiFields.add("delay_duration");
    openapiFields.add("external_details");
    openapiFields.add("idempotency_key");
    openapiFields.add("location_id");
    openapiFields.add("note");
    openapiFields.add("order_id");
    openapiFields.add("reference_id");
    openapiFields.add("shipping_address");
    openapiFields.add("source_id");
    openapiFields.add("statement_description_identifier");
    openapiFields.add("tip_money");
    openapiFields.add("verification_token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount_money");
    openapiRequiredFields.add("idempotency_key");
    openapiRequiredFields.add("source_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreatePaymentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreatePaymentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePaymentRequest is not found in the empty JSON string", CreatePaymentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreatePaymentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreatePaymentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreatePaymentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `amount_money`
      Money.validateJsonElement(jsonObj.get("amount_money"));
      // validate the optional field `app_fee_money`
      if (jsonObj.get("app_fee_money") != null && !jsonObj.get("app_fee_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("app_fee_money"));
      }
      // validate the optional field `billing_address`
      if (jsonObj.get("billing_address") != null && !jsonObj.get("billing_address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("billing_address"));
      }
      if ((jsonObj.get("buyer_email_address") != null && !jsonObj.get("buyer_email_address").isJsonNull()) && !jsonObj.get("buyer_email_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_email_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_email_address").toString()));
      }
      // validate the optional field `cash_details`
      if (jsonObj.get("cash_details") != null && !jsonObj.get("cash_details").isJsonNull()) {
        CashPaymentDetails.validateJsonElement(jsonObj.get("cash_details"));
      }
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if ((jsonObj.get("delay_duration") != null && !jsonObj.get("delay_duration").isJsonNull()) && !jsonObj.get("delay_duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delay_duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delay_duration").toString()));
      }
      // validate the optional field `external_details`
      if (jsonObj.get("external_details") != null && !jsonObj.get("external_details").isJsonNull()) {
        ExternalPaymentDetails.validateJsonElement(jsonObj.get("external_details"));
      }
      if (!jsonObj.get("idempotency_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idempotency_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idempotency_key").toString()));
      }
      if ((jsonObj.get("location_id") != null && !jsonObj.get("location_id").isJsonNull()) && !jsonObj.get("location_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_id").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("order_id") != null && !jsonObj.get("order_id").isJsonNull()) && !jsonObj.get("order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_id").toString()));
      }
      if ((jsonObj.get("reference_id") != null && !jsonObj.get("reference_id").isJsonNull()) && !jsonObj.get("reference_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference_id").toString()));
      }
      // validate the optional field `shipping_address`
      if (jsonObj.get("shipping_address") != null && !jsonObj.get("shipping_address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("shipping_address"));
      }
      if (!jsonObj.get("source_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_id").toString()));
      }
      if ((jsonObj.get("statement_description_identifier") != null && !jsonObj.get("statement_description_identifier").isJsonNull()) && !jsonObj.get("statement_description_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statement_description_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statement_description_identifier").toString()));
      }
      // validate the optional field `tip_money`
      if (jsonObj.get("tip_money") != null && !jsonObj.get("tip_money").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("tip_money"));
      }
      if ((jsonObj.get("verification_token") != null && !jsonObj.get("verification_token").isJsonNull()) && !jsonObj.get("verification_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePaymentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePaymentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePaymentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePaymentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePaymentRequest>() {
           @Override
           public void write(JsonWriter out, CreatePaymentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePaymentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreatePaymentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreatePaymentRequest
   * @throws IOException if the JSON string is invalid with respect to CreatePaymentRequest
   */
  public static CreatePaymentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePaymentRequest.class);
  }

  /**
   * Convert an instance of CreatePaymentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

