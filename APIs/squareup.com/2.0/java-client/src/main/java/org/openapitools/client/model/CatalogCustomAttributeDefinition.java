/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CatalogCustomAttributeDefinitionNumberConfig;
import org.openapitools.client.model.CatalogCustomAttributeDefinitionSelectionConfig;
import org.openapitools.client.model.CatalogCustomAttributeDefinitionStringConfig;
import org.openapitools.client.model.SourceApplication;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information defining a custom attribute. Custom attributes are intended to store additional information about a catalog object or to associate a catalog object with an entity in another system. Do not use custom attributes to store any sensitive information (personally identifiable information, card details, etc.). [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogCustomAttributeDefinition {
  public static final String SERIALIZED_NAME_ALLOWED_OBJECT_TYPES = "allowed_object_types";
  @SerializedName(SERIALIZED_NAME_ALLOWED_OBJECT_TYPES)
  private List<String> allowedObjectTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_APP_VISIBILITY = "app_visibility";
  @SerializedName(SERIALIZED_NAME_APP_VISIBILITY)
  private String appVisibility;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTE_USAGE_COUNT = "custom_attribute_usage_count";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTE_USAGE_COUNT)
  private Integer customAttributeUsageCount;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER_CONFIG = "number_config";
  @SerializedName(SERIALIZED_NAME_NUMBER_CONFIG)
  private CatalogCustomAttributeDefinitionNumberConfig numberConfig;

  public static final String SERIALIZED_NAME_SELECTION_CONFIG = "selection_config";
  @SerializedName(SERIALIZED_NAME_SELECTION_CONFIG)
  private CatalogCustomAttributeDefinitionSelectionConfig selectionConfig;

  public static final String SERIALIZED_NAME_SELLER_VISIBILITY = "seller_visibility";
  @SerializedName(SERIALIZED_NAME_SELLER_VISIBILITY)
  private String sellerVisibility;

  public static final String SERIALIZED_NAME_SOURCE_APPLICATION = "source_application";
  @SerializedName(SERIALIZED_NAME_SOURCE_APPLICATION)
  private SourceApplication sourceApplication;

  public static final String SERIALIZED_NAME_STRING_CONFIG = "string_config";
  @SerializedName(SERIALIZED_NAME_STRING_CONFIG)
  private CatalogCustomAttributeDefinitionStringConfig stringConfig;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public CatalogCustomAttributeDefinition() {
  }

  public CatalogCustomAttributeDefinition allowedObjectTypes(List<String> allowedObjectTypes) {
    this.allowedObjectTypes = allowedObjectTypes;
    return this;
  }

  public CatalogCustomAttributeDefinition addAllowedObjectTypesItem(String allowedObjectTypesItem) {
    if (this.allowedObjectTypes == null) {
      this.allowedObjectTypes = new ArrayList<>();
    }
    this.allowedObjectTypes.add(allowedObjectTypesItem);
    return this;
  }

  /**
   * The set of Catalog Object Types that this Custom Attribute may be applied to. Currently, only &#x60;ITEM&#x60; and &#x60;ITEM_VARIATION&#x60; are allowed. At least one type must be included.
   * @return allowedObjectTypes
   */
  @javax.annotation.Nonnull
  public List<String> getAllowedObjectTypes() {
    return allowedObjectTypes;
  }

  public void setAllowedObjectTypes(List<String> allowedObjectTypes) {
    this.allowedObjectTypes = allowedObjectTypes;
  }


  public CatalogCustomAttributeDefinition appVisibility(String appVisibility) {
    this.appVisibility = appVisibility;
    return this;
  }

  /**
   * The visibility of a custom attribute to applications other than the application that created the attribute.
   * @return appVisibility
   */
  @javax.annotation.Nullable
  public String getAppVisibility() {
    return appVisibility;
  }

  public void setAppVisibility(String appVisibility) {
    this.appVisibility = appVisibility;
  }


  public CatalogCustomAttributeDefinition customAttributeUsageCount(Integer customAttributeUsageCount) {
    this.customAttributeUsageCount = customAttributeUsageCount;
    return this;
  }

  /**
   * __Read-only.__ The number of custom attributes that reference this custom attribute definition. Set by the server in response to a ListCatalog request with &#x60;include_counts&#x60; set to &#x60;true&#x60;.  If the actual count is greater than 100, &#x60;custom_attribute_usage_count&#x60; will be set to &#x60;100&#x60;.
   * @return customAttributeUsageCount
   */
  @javax.annotation.Nullable
  public Integer getCustomAttributeUsageCount() {
    return customAttributeUsageCount;
  }

  public void setCustomAttributeUsageCount(Integer customAttributeUsageCount) {
    this.customAttributeUsageCount = customAttributeUsageCount;
  }


  public CatalogCustomAttributeDefinition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Seller-oriented description of the meaning of this Custom Attribute, any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CatalogCustomAttributeDefinition key(String key) {
    this.key = key;
    return this;
  }

  /**
   * The name of the desired custom attribute key that can be used to access the custom attribute value on catalog objects. Cannot be modified after the custom attribute definition has been created. Must be between 1 and 60 characters, and may only contain the characters &#x60;[a-zA-Z0-9_-]&#x60;.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public CatalogCustomAttributeDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   *  The name of this definition for API and seller-facing UI purposes. The name must be unique within the (merchant, application) pair. Required. May not be empty and may not exceed 255 characters. Can be modified after creation.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CatalogCustomAttributeDefinition numberConfig(CatalogCustomAttributeDefinitionNumberConfig numberConfig) {
    this.numberConfig = numberConfig;
    return this;
  }

  /**
   * Get numberConfig
   * @return numberConfig
   */
  @javax.annotation.Nullable
  public CatalogCustomAttributeDefinitionNumberConfig getNumberConfig() {
    return numberConfig;
  }

  public void setNumberConfig(CatalogCustomAttributeDefinitionNumberConfig numberConfig) {
    this.numberConfig = numberConfig;
  }


  public CatalogCustomAttributeDefinition selectionConfig(CatalogCustomAttributeDefinitionSelectionConfig selectionConfig) {
    this.selectionConfig = selectionConfig;
    return this;
  }

  /**
   * Get selectionConfig
   * @return selectionConfig
   */
  @javax.annotation.Nullable
  public CatalogCustomAttributeDefinitionSelectionConfig getSelectionConfig() {
    return selectionConfig;
  }

  public void setSelectionConfig(CatalogCustomAttributeDefinitionSelectionConfig selectionConfig) {
    this.selectionConfig = selectionConfig;
  }


  public CatalogCustomAttributeDefinition sellerVisibility(String sellerVisibility) {
    this.sellerVisibility = sellerVisibility;
    return this;
  }

  /**
   * The visibility of a custom attribute in seller-facing UIs (including Square Point of Sale applications and Square Dashboard). May be modified.
   * @return sellerVisibility
   */
  @javax.annotation.Nullable
  public String getSellerVisibility() {
    return sellerVisibility;
  }

  public void setSellerVisibility(String sellerVisibility) {
    this.sellerVisibility = sellerVisibility;
  }


  public CatalogCustomAttributeDefinition sourceApplication(SourceApplication sourceApplication) {
    this.sourceApplication = sourceApplication;
    return this;
  }

  /**
   * Get sourceApplication
   * @return sourceApplication
   */
  @javax.annotation.Nullable
  public SourceApplication getSourceApplication() {
    return sourceApplication;
  }

  public void setSourceApplication(SourceApplication sourceApplication) {
    this.sourceApplication = sourceApplication;
  }


  public CatalogCustomAttributeDefinition stringConfig(CatalogCustomAttributeDefinitionStringConfig stringConfig) {
    this.stringConfig = stringConfig;
    return this;
  }

  /**
   * Get stringConfig
   * @return stringConfig
   */
  @javax.annotation.Nullable
  public CatalogCustomAttributeDefinitionStringConfig getStringConfig() {
    return stringConfig;
  }

  public void setStringConfig(CatalogCustomAttributeDefinitionStringConfig stringConfig) {
    this.stringConfig = stringConfig;
  }


  public CatalogCustomAttributeDefinition type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of this custom attribute. Cannot be modified after creation. Required.
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogCustomAttributeDefinition catalogCustomAttributeDefinition = (CatalogCustomAttributeDefinition) o;
    return Objects.equals(this.allowedObjectTypes, catalogCustomAttributeDefinition.allowedObjectTypes) &&
        Objects.equals(this.appVisibility, catalogCustomAttributeDefinition.appVisibility) &&
        Objects.equals(this.customAttributeUsageCount, catalogCustomAttributeDefinition.customAttributeUsageCount) &&
        Objects.equals(this.description, catalogCustomAttributeDefinition.description) &&
        Objects.equals(this.key, catalogCustomAttributeDefinition.key) &&
        Objects.equals(this.name, catalogCustomAttributeDefinition.name) &&
        Objects.equals(this.numberConfig, catalogCustomAttributeDefinition.numberConfig) &&
        Objects.equals(this.selectionConfig, catalogCustomAttributeDefinition.selectionConfig) &&
        Objects.equals(this.sellerVisibility, catalogCustomAttributeDefinition.sellerVisibility) &&
        Objects.equals(this.sourceApplication, catalogCustomAttributeDefinition.sourceApplication) &&
        Objects.equals(this.stringConfig, catalogCustomAttributeDefinition.stringConfig) &&
        Objects.equals(this.type, catalogCustomAttributeDefinition.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedObjectTypes, appVisibility, customAttributeUsageCount, description, key, name, numberConfig, selectionConfig, sellerVisibility, sourceApplication, stringConfig, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogCustomAttributeDefinition {\n");
    sb.append("    allowedObjectTypes: ").append(toIndentedString(allowedObjectTypes)).append("\n");
    sb.append("    appVisibility: ").append(toIndentedString(appVisibility)).append("\n");
    sb.append("    customAttributeUsageCount: ").append(toIndentedString(customAttributeUsageCount)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberConfig: ").append(toIndentedString(numberConfig)).append("\n");
    sb.append("    selectionConfig: ").append(toIndentedString(selectionConfig)).append("\n");
    sb.append("    sellerVisibility: ").append(toIndentedString(sellerVisibility)).append("\n");
    sb.append("    sourceApplication: ").append(toIndentedString(sourceApplication)).append("\n");
    sb.append("    stringConfig: ").append(toIndentedString(stringConfig)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_object_types");
    openapiFields.add("app_visibility");
    openapiFields.add("custom_attribute_usage_count");
    openapiFields.add("description");
    openapiFields.add("key");
    openapiFields.add("name");
    openapiFields.add("number_config");
    openapiFields.add("selection_config");
    openapiFields.add("seller_visibility");
    openapiFields.add("source_application");
    openapiFields.add("string_config");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allowed_object_types");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogCustomAttributeDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogCustomAttributeDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogCustomAttributeDefinition is not found in the empty JSON string", CatalogCustomAttributeDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogCustomAttributeDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogCustomAttributeDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogCustomAttributeDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("allowed_object_types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowed_object_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_object_types` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_object_types").toString()));
      }
      if ((jsonObj.get("app_visibility") != null && !jsonObj.get("app_visibility").isJsonNull()) && !jsonObj.get("app_visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_visibility").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `number_config`
      if (jsonObj.get("number_config") != null && !jsonObj.get("number_config").isJsonNull()) {
        CatalogCustomAttributeDefinitionNumberConfig.validateJsonElement(jsonObj.get("number_config"));
      }
      // validate the optional field `selection_config`
      if (jsonObj.get("selection_config") != null && !jsonObj.get("selection_config").isJsonNull()) {
        CatalogCustomAttributeDefinitionSelectionConfig.validateJsonElement(jsonObj.get("selection_config"));
      }
      if ((jsonObj.get("seller_visibility") != null && !jsonObj.get("seller_visibility").isJsonNull()) && !jsonObj.get("seller_visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller_visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_visibility").toString()));
      }
      // validate the optional field `source_application`
      if (jsonObj.get("source_application") != null && !jsonObj.get("source_application").isJsonNull()) {
        SourceApplication.validateJsonElement(jsonObj.get("source_application"));
      }
      // validate the optional field `string_config`
      if (jsonObj.get("string_config") != null && !jsonObj.get("string_config").isJsonNull()) {
        CatalogCustomAttributeDefinitionStringConfig.validateJsonElement(jsonObj.get("string_config"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogCustomAttributeDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogCustomAttributeDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogCustomAttributeDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogCustomAttributeDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogCustomAttributeDefinition>() {
           @Override
           public void write(JsonWriter out, CatalogCustomAttributeDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogCustomAttributeDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogCustomAttributeDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogCustomAttributeDefinition
   * @throws IOException if the JSON string is invalid with respect to CatalogCustomAttributeDefinition
   */
  public static CatalogCustomAttributeDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogCustomAttributeDefinition.class);
  }

  /**
   * Convert an instance of CatalogCustomAttributeDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

