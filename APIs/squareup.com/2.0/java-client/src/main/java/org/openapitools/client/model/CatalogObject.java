/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CatalogCategory;
import org.openapitools.client.model.CatalogCustomAttributeDefinition;
import org.openapitools.client.model.CatalogCustomAttributeValue;
import org.openapitools.client.model.CatalogDiscount;
import org.openapitools.client.model.CatalogImage;
import org.openapitools.client.model.CatalogItem;
import org.openapitools.client.model.CatalogItemOption;
import org.openapitools.client.model.CatalogItemOptionValue;
import org.openapitools.client.model.CatalogItemVariation;
import org.openapitools.client.model.CatalogMeasurementUnit;
import org.openapitools.client.model.CatalogModifier;
import org.openapitools.client.model.CatalogModifierList;
import org.openapitools.client.model.CatalogPricingRule;
import org.openapitools.client.model.CatalogProductSet;
import org.openapitools.client.model.CatalogQuickAmountsSettings;
import org.openapitools.client.model.CatalogSubscriptionPlan;
import org.openapitools.client.model.CatalogTax;
import org.openapitools.client.model.CatalogTimePeriod;
import org.openapitools.client.model.CatalogV1Id;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The wrapper object for the Catalog entries of a given object type.  The type of a particular &#x60;CatalogObject&#x60; is determined by the value of the &#x60;type&#x60; attribute and only the corresponding data attribute can be set on the &#x60;CatalogObject&#x60; instance. For example, the following list shows some instances of &#x60;CatalogObject&#x60; of a given &#x60;type&#x60; and their corresponding data attribute that can be set: - For a &#x60;CatalogObject&#x60; of the &#x60;ITEM&#x60; type, set the &#x60;item_data&#x60; attribute to yield the &#x60;CatalogItem&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;ITEM_VARIATION&#x60; type, set the &#x60;item_variation_data&#x60; attribute to yield the &#x60;CatalogItemVariation&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;MODIFIER&#x60; type, set the &#x60;modifier_data&#x60; attribute to yield the &#x60;CatalogModifier&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;MODIFIER_LIST&#x60; type, set the &#x60;modifier_list_data&#x60; attribute to yield the &#x60;CatalogModifierList&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;CATEGORY&#x60; type, set the &#x60;category_data&#x60; attribute to yield the &#x60;CatalogCategory&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;DISCOUNT&#x60; type, set the &#x60;discount_data&#x60; attribute to yield the &#x60;CatalogDiscount&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;TAX&#x60; type, set the &#x60;tax_data&#x60; attribute to yield the &#x60;CatalogTax&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;IMAGE&#x60; type, set the &#x60;image_data&#x60; attribute to yield the &#x60;CatalogImageData&#x60;  object. - For a &#x60;CatalogObject&#x60; of the &#x60;QUICK_AMOUNTS_SETTINGS&#x60; type, set the &#x60;quick_amounts_settings_data&#x60; attribute to yield the &#x60;CatalogQuickAmountsSettings&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;PRICING_RULE&#x60; type, set the &#x60;pricing_rule_data&#x60; attribute to yield the &#x60;CatalogPricingRule&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;TIME_PERIOD&#x60; type, set the &#x60;time_period_data&#x60; attribute to yield the &#x60;CatalogTimePeriod&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;PRODUCT_SET&#x60; type, set the &#x60;product_set_data&#x60; attribute to yield the &#x60;CatalogProductSet&#x60;  object. - For a &#x60;CatalogObject&#x60; of the &#x60;SUBSCRIPTION_PLAN&#x60; type, set the &#x60;subscription_plan_data&#x60; attribute to yield the &#x60;CatalogSubscriptionPlan&#x60; object.   For a more detailed discussion of the Catalog data model, please see the [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogObject {
  public static final String SERIALIZED_NAME_ABSENT_AT_LOCATION_IDS = "absent_at_location_ids";
  @SerializedName(SERIALIZED_NAME_ABSENT_AT_LOCATION_IDS)
  private List<String> absentAtLocationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATALOG_V1_IDS = "catalog_v1_ids";
  @SerializedName(SERIALIZED_NAME_CATALOG_V1_IDS)
  private List<CatalogV1Id> catalogV1Ids = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_DATA = "category_data";
  @SerializedName(SERIALIZED_NAME_CATEGORY_DATA)
  private CatalogCategory categoryData;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTE_DEFINITION_DATA = "custom_attribute_definition_data";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTE_DEFINITION_DATA)
  private CatalogCustomAttributeDefinition customAttributeDefinitionData;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTE_VALUES = "custom_attribute_values";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTE_VALUES)
  private Map<String, CatalogCustomAttributeValue> customAttributeValues = new HashMap<>();

  public static final String SERIALIZED_NAME_DISCOUNT_DATA = "discount_data";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_DATA)
  private CatalogDiscount discountData;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_DATA = "image_data";
  @SerializedName(SERIALIZED_NAME_IMAGE_DATA)
  private CatalogImage imageData;

  public static final String SERIALIZED_NAME_IMAGE_ID = "image_id";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_IS_DELETED = "is_deleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  private Boolean isDeleted;

  public static final String SERIALIZED_NAME_ITEM_DATA = "item_data";
  @SerializedName(SERIALIZED_NAME_ITEM_DATA)
  private CatalogItem itemData;

  public static final String SERIALIZED_NAME_ITEM_OPTION_DATA = "item_option_data";
  @SerializedName(SERIALIZED_NAME_ITEM_OPTION_DATA)
  private CatalogItemOption itemOptionData;

  public static final String SERIALIZED_NAME_ITEM_OPTION_VALUE_DATA = "item_option_value_data";
  @SerializedName(SERIALIZED_NAME_ITEM_OPTION_VALUE_DATA)
  private CatalogItemOptionValue itemOptionValueData;

  public static final String SERIALIZED_NAME_ITEM_VARIATION_DATA = "item_variation_data";
  @SerializedName(SERIALIZED_NAME_ITEM_VARIATION_DATA)
  private CatalogItemVariation itemVariationData;

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT_DATA = "measurement_unit_data";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT_DATA)
  private CatalogMeasurementUnit measurementUnitData;

  public static final String SERIALIZED_NAME_MODIFIER_DATA = "modifier_data";
  @SerializedName(SERIALIZED_NAME_MODIFIER_DATA)
  private CatalogModifier modifierData;

  public static final String SERIALIZED_NAME_MODIFIER_LIST_DATA = "modifier_list_data";
  @SerializedName(SERIALIZED_NAME_MODIFIER_LIST_DATA)
  private CatalogModifierList modifierListData;

  public static final String SERIALIZED_NAME_PRESENT_AT_ALL_LOCATIONS = "present_at_all_locations";
  @SerializedName(SERIALIZED_NAME_PRESENT_AT_ALL_LOCATIONS)
  private Boolean presentAtAllLocations;

  public static final String SERIALIZED_NAME_PRESENT_AT_LOCATION_IDS = "present_at_location_ids";
  @SerializedName(SERIALIZED_NAME_PRESENT_AT_LOCATION_IDS)
  private List<String> presentAtLocationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICING_RULE_DATA = "pricing_rule_data";
  @SerializedName(SERIALIZED_NAME_PRICING_RULE_DATA)
  private CatalogPricingRule pricingRuleData;

  public static final String SERIALIZED_NAME_PRODUCT_SET_DATA = "product_set_data";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SET_DATA)
  private CatalogProductSet productSetData;

  public static final String SERIALIZED_NAME_QUICK_AMOUNTS_SETTINGS_DATA = "quick_amounts_settings_data";
  @SerializedName(SERIALIZED_NAME_QUICK_AMOUNTS_SETTINGS_DATA)
  private CatalogQuickAmountsSettings quickAmountsSettingsData;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_PLAN_DATA = "subscription_plan_data";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_PLAN_DATA)
  private CatalogSubscriptionPlan subscriptionPlanData;

  public static final String SERIALIZED_NAME_TAX_DATA = "tax_data";
  @SerializedName(SERIALIZED_NAME_TAX_DATA)
  private CatalogTax taxData;

  public static final String SERIALIZED_NAME_TIME_PERIOD_DATA = "time_period_data";
  @SerializedName(SERIALIZED_NAME_TIME_PERIOD_DATA)
  private CatalogTimePeriod timePeriodData;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Long version;

  public CatalogObject() {
  }

  public CatalogObject absentAtLocationIds(List<String> absentAtLocationIds) {
    this.absentAtLocationIds = absentAtLocationIds;
    return this;
  }

  public CatalogObject addAbsentAtLocationIdsItem(String absentAtLocationIdsItem) {
    if (this.absentAtLocationIds == null) {
      this.absentAtLocationIds = new ArrayList<>();
    }
    this.absentAtLocationIds.add(absentAtLocationIdsItem);
    return this;
  }

  /**
   * A list of locations where the object is not present, even if &#x60;present_at_all_locations&#x60; is &#x60;true&#x60;. This can include locations that are deactivated.
   * @return absentAtLocationIds
   */
  @javax.annotation.Nullable
  public List<String> getAbsentAtLocationIds() {
    return absentAtLocationIds;
  }

  public void setAbsentAtLocationIds(List<String> absentAtLocationIds) {
    this.absentAtLocationIds = absentAtLocationIds;
  }


  public CatalogObject catalogV1Ids(List<CatalogV1Id> catalogV1Ids) {
    this.catalogV1Ids = catalogV1Ids;
    return this;
  }

  public CatalogObject addCatalogV1IdsItem(CatalogV1Id catalogV1IdsItem) {
    if (this.catalogV1Ids == null) {
      this.catalogV1Ids = new ArrayList<>();
    }
    this.catalogV1Ids.add(catalogV1IdsItem);
    return this;
  }

  /**
   * The Connect v1 IDs for this object at each location where it is present, where they differ from the object&#39;s Connect V2 ID. The field will only be present for objects that have been created or modified by legacy APIs.
   * @return catalogV1Ids
   */
  @javax.annotation.Nullable
  public List<CatalogV1Id> getCatalogV1Ids() {
    return catalogV1Ids;
  }

  public void setCatalogV1Ids(List<CatalogV1Id> catalogV1Ids) {
    this.catalogV1Ids = catalogV1Ids;
  }


  public CatalogObject categoryData(CatalogCategory categoryData) {
    this.categoryData = categoryData;
    return this;
  }

  /**
   * Get categoryData
   * @return categoryData
   */
  @javax.annotation.Nullable
  public CatalogCategory getCategoryData() {
    return categoryData;
  }

  public void setCategoryData(CatalogCategory categoryData) {
    this.categoryData = categoryData;
  }


  public CatalogObject customAttributeDefinitionData(CatalogCustomAttributeDefinition customAttributeDefinitionData) {
    this.customAttributeDefinitionData = customAttributeDefinitionData;
    return this;
  }

  /**
   * Get customAttributeDefinitionData
   * @return customAttributeDefinitionData
   */
  @javax.annotation.Nullable
  public CatalogCustomAttributeDefinition getCustomAttributeDefinitionData() {
    return customAttributeDefinitionData;
  }

  public void setCustomAttributeDefinitionData(CatalogCustomAttributeDefinition customAttributeDefinitionData) {
    this.customAttributeDefinitionData = customAttributeDefinitionData;
  }


  public CatalogObject customAttributeValues(Map<String, CatalogCustomAttributeValue> customAttributeValues) {
    this.customAttributeValues = customAttributeValues;
    return this;
  }

  public CatalogObject putCustomAttributeValuesItem(String key, CatalogCustomAttributeValue customAttributeValuesItem) {
    if (this.customAttributeValues == null) {
      this.customAttributeValues = new HashMap<>();
    }
    this.customAttributeValues.put(key, customAttributeValuesItem);
    return this;
  }

  /**
   * A map (key-value pairs) of application-defined custom attribute values. The value of a key-value pair is a [CatalogCustomAttributeValue](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeValue) object. The key is the &#x60;key&#x60; attribute value defined in the associated [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition) object defined by the application making the request.  If the &#x60;CatalogCustomAttributeDefinition&#x60; object is defined by another application, the &#x60;CatalogCustomAttributeDefinition&#x60;&#39;s key attribute value is prefixed by the defining application ID. For example, if the &#x60;CatalogCustomAttributeDefinition&#x60; has a &#x60;key&#x60; attribute of &#x60;\&quot;cocoa_brand\&quot;&#x60; and the defining application ID is &#x60;\&quot;abcd1234\&quot;&#x60;, the key in the map is &#x60;\&quot;abcd1234:cocoa_brand\&quot;&#x60; if the application making the request is different from the application defining the custom attribute definition. Otherwise, the key used in the map is simply &#x60;\&quot;cocoa_brand\&quot;&#x60;.  Application-defined custom attributes that are set at a global (location-independent) level. Custom attribute values are intended to store additional information about a catalog object or associations with an entity in another system. Do not use custom attributes to store any sensitive information (personally identifiable information, card details, etc.).
   * @return customAttributeValues
   */
  @javax.annotation.Nullable
  public Map<String, CatalogCustomAttributeValue> getCustomAttributeValues() {
    return customAttributeValues;
  }

  public void setCustomAttributeValues(Map<String, CatalogCustomAttributeValue> customAttributeValues) {
    this.customAttributeValues = customAttributeValues;
  }


  public CatalogObject discountData(CatalogDiscount discountData) {
    this.discountData = discountData;
    return this;
  }

  /**
   * Get discountData
   * @return discountData
   */
  @javax.annotation.Nullable
  public CatalogDiscount getDiscountData() {
    return discountData;
  }

  public void setDiscountData(CatalogDiscount discountData) {
    this.discountData = discountData;
  }


  public CatalogObject id(String id) {
    this.id = id;
    return this;
  }

  /**
   * An identifier to reference this object in the catalog. When a new &#x60;CatalogObject&#x60; is inserted, the client should set the id to a temporary identifier starting with a \&quot;&#x60;#&#x60;\&quot; character. Other objects being inserted or updated within the same request may use this identifier to refer to the new object.  When the server receives the new object, it will supply a unique identifier that replaces the temporary identifier for all future references.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CatalogObject imageData(CatalogImage imageData) {
    this.imageData = imageData;
    return this;
  }

  /**
   * Get imageData
   * @return imageData
   */
  @javax.annotation.Nullable
  public CatalogImage getImageData() {
    return imageData;
  }

  public void setImageData(CatalogImage imageData) {
    this.imageData = imageData;
  }


  public CatalogObject imageId(String imageId) {
    this.imageId = imageId;
    return this;
  }

  /**
   * Identifies the &#x60;CatalogImage&#x60; attached to this &#x60;CatalogObject&#x60;.
   * @return imageId
   */
  @javax.annotation.Nullable
  public String getImageId() {
    return imageId;
  }

  public void setImageId(String imageId) {
    this.imageId = imageId;
  }


  public CatalogObject isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * If &#x60;true&#x60;, the object has been deleted from the database. Must be &#x60;false&#x60; for new objects being inserted. When deleted, the &#x60;updated_at&#x60; field will equal the deletion time.
   * @return isDeleted
   */
  @javax.annotation.Nullable
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public CatalogObject itemData(CatalogItem itemData) {
    this.itemData = itemData;
    return this;
  }

  /**
   * Get itemData
   * @return itemData
   */
  @javax.annotation.Nullable
  public CatalogItem getItemData() {
    return itemData;
  }

  public void setItemData(CatalogItem itemData) {
    this.itemData = itemData;
  }


  public CatalogObject itemOptionData(CatalogItemOption itemOptionData) {
    this.itemOptionData = itemOptionData;
    return this;
  }

  /**
   * Get itemOptionData
   * @return itemOptionData
   */
  @javax.annotation.Nullable
  public CatalogItemOption getItemOptionData() {
    return itemOptionData;
  }

  public void setItemOptionData(CatalogItemOption itemOptionData) {
    this.itemOptionData = itemOptionData;
  }


  public CatalogObject itemOptionValueData(CatalogItemOptionValue itemOptionValueData) {
    this.itemOptionValueData = itemOptionValueData;
    return this;
  }

  /**
   * Get itemOptionValueData
   * @return itemOptionValueData
   */
  @javax.annotation.Nullable
  public CatalogItemOptionValue getItemOptionValueData() {
    return itemOptionValueData;
  }

  public void setItemOptionValueData(CatalogItemOptionValue itemOptionValueData) {
    this.itemOptionValueData = itemOptionValueData;
  }


  public CatalogObject itemVariationData(CatalogItemVariation itemVariationData) {
    this.itemVariationData = itemVariationData;
    return this;
  }

  /**
   * Get itemVariationData
   * @return itemVariationData
   */
  @javax.annotation.Nullable
  public CatalogItemVariation getItemVariationData() {
    return itemVariationData;
  }

  public void setItemVariationData(CatalogItemVariation itemVariationData) {
    this.itemVariationData = itemVariationData;
  }


  public CatalogObject measurementUnitData(CatalogMeasurementUnit measurementUnitData) {
    this.measurementUnitData = measurementUnitData;
    return this;
  }

  /**
   * Get measurementUnitData
   * @return measurementUnitData
   */
  @javax.annotation.Nullable
  public CatalogMeasurementUnit getMeasurementUnitData() {
    return measurementUnitData;
  }

  public void setMeasurementUnitData(CatalogMeasurementUnit measurementUnitData) {
    this.measurementUnitData = measurementUnitData;
  }


  public CatalogObject modifierData(CatalogModifier modifierData) {
    this.modifierData = modifierData;
    return this;
  }

  /**
   * Get modifierData
   * @return modifierData
   */
  @javax.annotation.Nullable
  public CatalogModifier getModifierData() {
    return modifierData;
  }

  public void setModifierData(CatalogModifier modifierData) {
    this.modifierData = modifierData;
  }


  public CatalogObject modifierListData(CatalogModifierList modifierListData) {
    this.modifierListData = modifierListData;
    return this;
  }

  /**
   * Get modifierListData
   * @return modifierListData
   */
  @javax.annotation.Nullable
  public CatalogModifierList getModifierListData() {
    return modifierListData;
  }

  public void setModifierListData(CatalogModifierList modifierListData) {
    this.modifierListData = modifierListData;
  }


  public CatalogObject presentAtAllLocations(Boolean presentAtAllLocations) {
    this.presentAtAllLocations = presentAtAllLocations;
    return this;
  }

  /**
   * If &#x60;true&#x60;, this object is present at all locations (including future locations), except where specified in the &#x60;absent_at_location_ids&#x60; field. If &#x60;false&#x60;, this object is not present at any locations (including future locations), except where specified in the &#x60;present_at_location_ids&#x60; field. If not specified, defaults to &#x60;true&#x60;.
   * @return presentAtAllLocations
   */
  @javax.annotation.Nullable
  public Boolean getPresentAtAllLocations() {
    return presentAtAllLocations;
  }

  public void setPresentAtAllLocations(Boolean presentAtAllLocations) {
    this.presentAtAllLocations = presentAtAllLocations;
  }


  public CatalogObject presentAtLocationIds(List<String> presentAtLocationIds) {
    this.presentAtLocationIds = presentAtLocationIds;
    return this;
  }

  public CatalogObject addPresentAtLocationIdsItem(String presentAtLocationIdsItem) {
    if (this.presentAtLocationIds == null) {
      this.presentAtLocationIds = new ArrayList<>();
    }
    this.presentAtLocationIds.add(presentAtLocationIdsItem);
    return this;
  }

  /**
   * A list of locations where the object is present, even if &#x60;present_at_all_locations&#x60; is &#x60;false&#x60;. This can include locations that are deactivated.
   * @return presentAtLocationIds
   */
  @javax.annotation.Nullable
  public List<String> getPresentAtLocationIds() {
    return presentAtLocationIds;
  }

  public void setPresentAtLocationIds(List<String> presentAtLocationIds) {
    this.presentAtLocationIds = presentAtLocationIds;
  }


  public CatalogObject pricingRuleData(CatalogPricingRule pricingRuleData) {
    this.pricingRuleData = pricingRuleData;
    return this;
  }

  /**
   * Get pricingRuleData
   * @return pricingRuleData
   */
  @javax.annotation.Nullable
  public CatalogPricingRule getPricingRuleData() {
    return pricingRuleData;
  }

  public void setPricingRuleData(CatalogPricingRule pricingRuleData) {
    this.pricingRuleData = pricingRuleData;
  }


  public CatalogObject productSetData(CatalogProductSet productSetData) {
    this.productSetData = productSetData;
    return this;
  }

  /**
   * Get productSetData
   * @return productSetData
   */
  @javax.annotation.Nullable
  public CatalogProductSet getProductSetData() {
    return productSetData;
  }

  public void setProductSetData(CatalogProductSet productSetData) {
    this.productSetData = productSetData;
  }


  public CatalogObject quickAmountsSettingsData(CatalogQuickAmountsSettings quickAmountsSettingsData) {
    this.quickAmountsSettingsData = quickAmountsSettingsData;
    return this;
  }

  /**
   * Get quickAmountsSettingsData
   * @return quickAmountsSettingsData
   */
  @javax.annotation.Nullable
  public CatalogQuickAmountsSettings getQuickAmountsSettingsData() {
    return quickAmountsSettingsData;
  }

  public void setQuickAmountsSettingsData(CatalogQuickAmountsSettings quickAmountsSettingsData) {
    this.quickAmountsSettingsData = quickAmountsSettingsData;
  }


  public CatalogObject subscriptionPlanData(CatalogSubscriptionPlan subscriptionPlanData) {
    this.subscriptionPlanData = subscriptionPlanData;
    return this;
  }

  /**
   * Get subscriptionPlanData
   * @return subscriptionPlanData
   */
  @javax.annotation.Nullable
  public CatalogSubscriptionPlan getSubscriptionPlanData() {
    return subscriptionPlanData;
  }

  public void setSubscriptionPlanData(CatalogSubscriptionPlan subscriptionPlanData) {
    this.subscriptionPlanData = subscriptionPlanData;
  }


  public CatalogObject taxData(CatalogTax taxData) {
    this.taxData = taxData;
    return this;
  }

  /**
   * Get taxData
   * @return taxData
   */
  @javax.annotation.Nullable
  public CatalogTax getTaxData() {
    return taxData;
  }

  public void setTaxData(CatalogTax taxData) {
    this.taxData = taxData;
  }


  public CatalogObject timePeriodData(CatalogTimePeriod timePeriodData) {
    this.timePeriodData = timePeriodData;
    return this;
  }

  /**
   * Get timePeriodData
   * @return timePeriodData
   */
  @javax.annotation.Nullable
  public CatalogTimePeriod getTimePeriodData() {
    return timePeriodData;
  }

  public void setTimePeriodData(CatalogTimePeriod timePeriodData) {
    this.timePeriodData = timePeriodData;
  }


  public CatalogObject type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of this object. Each object type has expected properties expressed in a structured format within its corresponding &#x60;*_data&#x60; field below.
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public CatalogObject updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Last modification [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) in RFC 3339 format, e.g., &#x60;\&quot;2016-08-15T23:59:33.123Z\&quot;&#x60; would indicate the UTC time (denoted by &#x60;Z&#x60;) of August 15, 2016 at 23:59:33 and 123 milliseconds.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public CatalogObject version(Long version) {
    this.version = version;
    return this;
  }

  /**
   * The version of the object. When updating an object, the version supplied must match the version in the database, otherwise the write will be rejected as conflicting.
   * @return version
   */
  @javax.annotation.Nullable
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogObject catalogObject = (CatalogObject) o;
    return Objects.equals(this.absentAtLocationIds, catalogObject.absentAtLocationIds) &&
        Objects.equals(this.catalogV1Ids, catalogObject.catalogV1Ids) &&
        Objects.equals(this.categoryData, catalogObject.categoryData) &&
        Objects.equals(this.customAttributeDefinitionData, catalogObject.customAttributeDefinitionData) &&
        Objects.equals(this.customAttributeValues, catalogObject.customAttributeValues) &&
        Objects.equals(this.discountData, catalogObject.discountData) &&
        Objects.equals(this.id, catalogObject.id) &&
        Objects.equals(this.imageData, catalogObject.imageData) &&
        Objects.equals(this.imageId, catalogObject.imageId) &&
        Objects.equals(this.isDeleted, catalogObject.isDeleted) &&
        Objects.equals(this.itemData, catalogObject.itemData) &&
        Objects.equals(this.itemOptionData, catalogObject.itemOptionData) &&
        Objects.equals(this.itemOptionValueData, catalogObject.itemOptionValueData) &&
        Objects.equals(this.itemVariationData, catalogObject.itemVariationData) &&
        Objects.equals(this.measurementUnitData, catalogObject.measurementUnitData) &&
        Objects.equals(this.modifierData, catalogObject.modifierData) &&
        Objects.equals(this.modifierListData, catalogObject.modifierListData) &&
        Objects.equals(this.presentAtAllLocations, catalogObject.presentAtAllLocations) &&
        Objects.equals(this.presentAtLocationIds, catalogObject.presentAtLocationIds) &&
        Objects.equals(this.pricingRuleData, catalogObject.pricingRuleData) &&
        Objects.equals(this.productSetData, catalogObject.productSetData) &&
        Objects.equals(this.quickAmountsSettingsData, catalogObject.quickAmountsSettingsData) &&
        Objects.equals(this.subscriptionPlanData, catalogObject.subscriptionPlanData) &&
        Objects.equals(this.taxData, catalogObject.taxData) &&
        Objects.equals(this.timePeriodData, catalogObject.timePeriodData) &&
        Objects.equals(this.type, catalogObject.type) &&
        Objects.equals(this.updatedAt, catalogObject.updatedAt) &&
        Objects.equals(this.version, catalogObject.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absentAtLocationIds, catalogV1Ids, categoryData, customAttributeDefinitionData, customAttributeValues, discountData, id, imageData, imageId, isDeleted, itemData, itemOptionData, itemOptionValueData, itemVariationData, measurementUnitData, modifierData, modifierListData, presentAtAllLocations, presentAtLocationIds, pricingRuleData, productSetData, quickAmountsSettingsData, subscriptionPlanData, taxData, timePeriodData, type, updatedAt, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogObject {\n");
    sb.append("    absentAtLocationIds: ").append(toIndentedString(absentAtLocationIds)).append("\n");
    sb.append("    catalogV1Ids: ").append(toIndentedString(catalogV1Ids)).append("\n");
    sb.append("    categoryData: ").append(toIndentedString(categoryData)).append("\n");
    sb.append("    customAttributeDefinitionData: ").append(toIndentedString(customAttributeDefinitionData)).append("\n");
    sb.append("    customAttributeValues: ").append(toIndentedString(customAttributeValues)).append("\n");
    sb.append("    discountData: ").append(toIndentedString(discountData)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageData: ").append(toIndentedString(imageData)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    itemData: ").append(toIndentedString(itemData)).append("\n");
    sb.append("    itemOptionData: ").append(toIndentedString(itemOptionData)).append("\n");
    sb.append("    itemOptionValueData: ").append(toIndentedString(itemOptionValueData)).append("\n");
    sb.append("    itemVariationData: ").append(toIndentedString(itemVariationData)).append("\n");
    sb.append("    measurementUnitData: ").append(toIndentedString(measurementUnitData)).append("\n");
    sb.append("    modifierData: ").append(toIndentedString(modifierData)).append("\n");
    sb.append("    modifierListData: ").append(toIndentedString(modifierListData)).append("\n");
    sb.append("    presentAtAllLocations: ").append(toIndentedString(presentAtAllLocations)).append("\n");
    sb.append("    presentAtLocationIds: ").append(toIndentedString(presentAtLocationIds)).append("\n");
    sb.append("    pricingRuleData: ").append(toIndentedString(pricingRuleData)).append("\n");
    sb.append("    productSetData: ").append(toIndentedString(productSetData)).append("\n");
    sb.append("    quickAmountsSettingsData: ").append(toIndentedString(quickAmountsSettingsData)).append("\n");
    sb.append("    subscriptionPlanData: ").append(toIndentedString(subscriptionPlanData)).append("\n");
    sb.append("    taxData: ").append(toIndentedString(taxData)).append("\n");
    sb.append("    timePeriodData: ").append(toIndentedString(timePeriodData)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absent_at_location_ids");
    openapiFields.add("catalog_v1_ids");
    openapiFields.add("category_data");
    openapiFields.add("custom_attribute_definition_data");
    openapiFields.add("custom_attribute_values");
    openapiFields.add("discount_data");
    openapiFields.add("id");
    openapiFields.add("image_data");
    openapiFields.add("image_id");
    openapiFields.add("is_deleted");
    openapiFields.add("item_data");
    openapiFields.add("item_option_data");
    openapiFields.add("item_option_value_data");
    openapiFields.add("item_variation_data");
    openapiFields.add("measurement_unit_data");
    openapiFields.add("modifier_data");
    openapiFields.add("modifier_list_data");
    openapiFields.add("present_at_all_locations");
    openapiFields.add("present_at_location_ids");
    openapiFields.add("pricing_rule_data");
    openapiFields.add("product_set_data");
    openapiFields.add("quick_amounts_settings_data");
    openapiFields.add("subscription_plan_data");
    openapiFields.add("tax_data");
    openapiFields.add("time_period_data");
    openapiFields.add("type");
    openapiFields.add("updated_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogObject is not found in the empty JSON string", CatalogObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("absent_at_location_ids") != null && !jsonObj.get("absent_at_location_ids").isJsonNull() && !jsonObj.get("absent_at_location_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `absent_at_location_ids` to be an array in the JSON string but got `%s`", jsonObj.get("absent_at_location_ids").toString()));
      }
      if (jsonObj.get("catalog_v1_ids") != null && !jsonObj.get("catalog_v1_ids").isJsonNull()) {
        JsonArray jsonArraycatalogV1Ids = jsonObj.getAsJsonArray("catalog_v1_ids");
        if (jsonArraycatalogV1Ids != null) {
          // ensure the json data is an array
          if (!jsonObj.get("catalog_v1_ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `catalog_v1_ids` to be an array in the JSON string but got `%s`", jsonObj.get("catalog_v1_ids").toString()));
          }

          // validate the optional field `catalog_v1_ids` (array)
          for (int i = 0; i < jsonArraycatalogV1Ids.size(); i++) {
            CatalogV1Id.validateJsonElement(jsonArraycatalogV1Ids.get(i));
          };
        }
      }
      // validate the optional field `category_data`
      if (jsonObj.get("category_data") != null && !jsonObj.get("category_data").isJsonNull()) {
        CatalogCategory.validateJsonElement(jsonObj.get("category_data"));
      }
      // validate the optional field `custom_attribute_definition_data`
      if (jsonObj.get("custom_attribute_definition_data") != null && !jsonObj.get("custom_attribute_definition_data").isJsonNull()) {
        CatalogCustomAttributeDefinition.validateJsonElement(jsonObj.get("custom_attribute_definition_data"));
      }
      // validate the optional field `discount_data`
      if (jsonObj.get("discount_data") != null && !jsonObj.get("discount_data").isJsonNull()) {
        CatalogDiscount.validateJsonElement(jsonObj.get("discount_data"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `image_data`
      if (jsonObj.get("image_data") != null && !jsonObj.get("image_data").isJsonNull()) {
        CatalogImage.validateJsonElement(jsonObj.get("image_data"));
      }
      if ((jsonObj.get("image_id") != null && !jsonObj.get("image_id").isJsonNull()) && !jsonObj.get("image_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_id").toString()));
      }
      // validate the optional field `item_data`
      if (jsonObj.get("item_data") != null && !jsonObj.get("item_data").isJsonNull()) {
        CatalogItem.validateJsonElement(jsonObj.get("item_data"));
      }
      // validate the optional field `item_option_data`
      if (jsonObj.get("item_option_data") != null && !jsonObj.get("item_option_data").isJsonNull()) {
        CatalogItemOption.validateJsonElement(jsonObj.get("item_option_data"));
      }
      // validate the optional field `item_option_value_data`
      if (jsonObj.get("item_option_value_data") != null && !jsonObj.get("item_option_value_data").isJsonNull()) {
        CatalogItemOptionValue.validateJsonElement(jsonObj.get("item_option_value_data"));
      }
      // validate the optional field `item_variation_data`
      if (jsonObj.get("item_variation_data") != null && !jsonObj.get("item_variation_data").isJsonNull()) {
        CatalogItemVariation.validateJsonElement(jsonObj.get("item_variation_data"));
      }
      // validate the optional field `measurement_unit_data`
      if (jsonObj.get("measurement_unit_data") != null && !jsonObj.get("measurement_unit_data").isJsonNull()) {
        CatalogMeasurementUnit.validateJsonElement(jsonObj.get("measurement_unit_data"));
      }
      // validate the optional field `modifier_data`
      if (jsonObj.get("modifier_data") != null && !jsonObj.get("modifier_data").isJsonNull()) {
        CatalogModifier.validateJsonElement(jsonObj.get("modifier_data"));
      }
      // validate the optional field `modifier_list_data`
      if (jsonObj.get("modifier_list_data") != null && !jsonObj.get("modifier_list_data").isJsonNull()) {
        CatalogModifierList.validateJsonElement(jsonObj.get("modifier_list_data"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("present_at_location_ids") != null && !jsonObj.get("present_at_location_ids").isJsonNull() && !jsonObj.get("present_at_location_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `present_at_location_ids` to be an array in the JSON string but got `%s`", jsonObj.get("present_at_location_ids").toString()));
      }
      // validate the optional field `pricing_rule_data`
      if (jsonObj.get("pricing_rule_data") != null && !jsonObj.get("pricing_rule_data").isJsonNull()) {
        CatalogPricingRule.validateJsonElement(jsonObj.get("pricing_rule_data"));
      }
      // validate the optional field `product_set_data`
      if (jsonObj.get("product_set_data") != null && !jsonObj.get("product_set_data").isJsonNull()) {
        CatalogProductSet.validateJsonElement(jsonObj.get("product_set_data"));
      }
      // validate the optional field `quick_amounts_settings_data`
      if (jsonObj.get("quick_amounts_settings_data") != null && !jsonObj.get("quick_amounts_settings_data").isJsonNull()) {
        CatalogQuickAmountsSettings.validateJsonElement(jsonObj.get("quick_amounts_settings_data"));
      }
      // validate the optional field `subscription_plan_data`
      if (jsonObj.get("subscription_plan_data") != null && !jsonObj.get("subscription_plan_data").isJsonNull()) {
        CatalogSubscriptionPlan.validateJsonElement(jsonObj.get("subscription_plan_data"));
      }
      // validate the optional field `tax_data`
      if (jsonObj.get("tax_data") != null && !jsonObj.get("tax_data").isJsonNull()) {
        CatalogTax.validateJsonElement(jsonObj.get("tax_data"));
      }
      // validate the optional field `time_period_data`
      if (jsonObj.get("time_period_data") != null && !jsonObj.get("time_period_data").isJsonNull()) {
        CatalogTimePeriod.validateJsonElement(jsonObj.get("time_period_data"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogObject.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogObject>() {
           @Override
           public void write(JsonWriter out, CatalogObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogObject
   * @throws IOException if the JSON string is invalid with respect to CatalogObject
   */
  public static CatalogObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogObject.class);
  }

  /**
   * Convert an instance of CatalogObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

