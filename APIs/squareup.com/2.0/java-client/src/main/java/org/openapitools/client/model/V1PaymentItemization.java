/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.V1Money;
import org.openapitools.client.model.V1PaymentDiscount;
import org.openapitools.client.model.V1PaymentItemDetail;
import org.openapitools.client.model.V1PaymentModifier;
import org.openapitools.client.model.V1PaymentTax;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payment include an&#x60; itemizations&#x60; field that lists the items purchased, along with associated fees, modifiers, and discounts. Each itemization has an &#x60;itemization_type&#x60; field that indicates which of the following the itemization represents:  &lt;ul&gt; &lt;li&gt;An item variation from the merchant&#39;s item library&lt;/li&gt; &lt;li&gt;A custom monetary amount&lt;/li&gt; &lt;li&gt; An action performed on a Square gift card, such as activating or reloading it. &lt;/li&gt; &lt;/ul&gt;  *Note**: itemization information included in a &#x60;Payment&#x60; object reflects details collected **at the time of the payment**. Details such as the name or price of items might have changed since the payment was processed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.300629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V1PaymentItemization {
  public static final String SERIALIZED_NAME_DISCOUNT_MONEY = "discount_money";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_MONEY)
  private V1Money discountMoney;

  public static final String SERIALIZED_NAME_DISCOUNTS = "discounts";
  @SerializedName(SERIALIZED_NAME_DISCOUNTS)
  private List<V1PaymentDiscount> discounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROSS_SALES_MONEY = "gross_sales_money";
  @SerializedName(SERIALIZED_NAME_GROSS_SALES_MONEY)
  private V1Money grossSalesMoney;

  public static final String SERIALIZED_NAME_ITEM_DETAIL = "item_detail";
  @SerializedName(SERIALIZED_NAME_ITEM_DETAIL)
  private V1PaymentItemDetail itemDetail;

  public static final String SERIALIZED_NAME_ITEM_VARIATION_NAME = "item_variation_name";
  @SerializedName(SERIALIZED_NAME_ITEM_VARIATION_NAME)
  private String itemVariationName;

  public static final String SERIALIZED_NAME_ITEMIZATION_TYPE = "itemization_type";
  @SerializedName(SERIALIZED_NAME_ITEMIZATION_TYPE)
  private String itemizationType;

  public static final String SERIALIZED_NAME_MODIFIERS = "modifiers";
  @SerializedName(SERIALIZED_NAME_MODIFIERS)
  private List<V1PaymentModifier> modifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NET_SALES_MONEY = "net_sales_money";
  @SerializedName(SERIALIZED_NAME_NET_SALES_MONEY)
  private V1Money netSalesMoney;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_SINGLE_QUANTITY_MONEY = "single_quantity_money";
  @SerializedName(SERIALIZED_NAME_SINGLE_QUANTITY_MONEY)
  private V1Money singleQuantityMoney;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private List<V1PaymentTax> taxes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_MONEY = "total_money";
  @SerializedName(SERIALIZED_NAME_TOTAL_MONEY)
  private V1Money totalMoney;

  public V1PaymentItemization() {
  }

  public V1PaymentItemization discountMoney(V1Money discountMoney) {
    this.discountMoney = discountMoney;
    return this;
  }

  /**
   * Get discountMoney
   * @return discountMoney
   */
  @javax.annotation.Nullable
  public V1Money getDiscountMoney() {
    return discountMoney;
  }

  public void setDiscountMoney(V1Money discountMoney) {
    this.discountMoney = discountMoney;
  }


  public V1PaymentItemization discounts(List<V1PaymentDiscount> discounts) {
    this.discounts = discounts;
    return this;
  }

  public V1PaymentItemization addDiscountsItem(V1PaymentDiscount discountsItem) {
    if (this.discounts == null) {
      this.discounts = new ArrayList<>();
    }
    this.discounts.add(discountsItem);
    return this;
  }

  /**
   * All discounts applied to this itemization.
   * @return discounts
   */
  @javax.annotation.Nullable
  public List<V1PaymentDiscount> getDiscounts() {
    return discounts;
  }

  public void setDiscounts(List<V1PaymentDiscount> discounts) {
    this.discounts = discounts;
  }


  public V1PaymentItemization grossSalesMoney(V1Money grossSalesMoney) {
    this.grossSalesMoney = grossSalesMoney;
    return this;
  }

  /**
   * Get grossSalesMoney
   * @return grossSalesMoney
   */
  @javax.annotation.Nullable
  public V1Money getGrossSalesMoney() {
    return grossSalesMoney;
  }

  public void setGrossSalesMoney(V1Money grossSalesMoney) {
    this.grossSalesMoney = grossSalesMoney;
  }


  public V1PaymentItemization itemDetail(V1PaymentItemDetail itemDetail) {
    this.itemDetail = itemDetail;
    return this;
  }

  /**
   * Get itemDetail
   * @return itemDetail
   */
  @javax.annotation.Nullable
  public V1PaymentItemDetail getItemDetail() {
    return itemDetail;
  }

  public void setItemDetail(V1PaymentItemDetail itemDetail) {
    this.itemDetail = itemDetail;
  }


  public V1PaymentItemization itemVariationName(String itemVariationName) {
    this.itemVariationName = itemVariationName;
    return this;
  }

  /**
   * The name of the item variation purchased, if any.
   * @return itemVariationName
   */
  @javax.annotation.Nullable
  public String getItemVariationName() {
    return itemVariationName;
  }

  public void setItemVariationName(String itemVariationName) {
    this.itemVariationName = itemVariationName;
  }


  public V1PaymentItemization itemizationType(String itemizationType) {
    this.itemizationType = itemizationType;
    return this;
  }

  /**
   * The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT
   * @return itemizationType
   */
  @javax.annotation.Nullable
  public String getItemizationType() {
    return itemizationType;
  }

  public void setItemizationType(String itemizationType) {
    this.itemizationType = itemizationType;
  }


  public V1PaymentItemization modifiers(List<V1PaymentModifier> modifiers) {
    this.modifiers = modifiers;
    return this;
  }

  public V1PaymentItemization addModifiersItem(V1PaymentModifier modifiersItem) {
    if (this.modifiers == null) {
      this.modifiers = new ArrayList<>();
    }
    this.modifiers.add(modifiersItem);
    return this;
  }

  /**
   * All modifier options applied to this itemization.
   * @return modifiers
   */
  @javax.annotation.Nullable
  public List<V1PaymentModifier> getModifiers() {
    return modifiers;
  }

  public void setModifiers(List<V1PaymentModifier> modifiers) {
    this.modifiers = modifiers;
  }


  public V1PaymentItemization name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The item&#39;s name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public V1PaymentItemization netSalesMoney(V1Money netSalesMoney) {
    this.netSalesMoney = netSalesMoney;
    return this;
  }

  /**
   * Get netSalesMoney
   * @return netSalesMoney
   */
  @javax.annotation.Nullable
  public V1Money getNetSalesMoney() {
    return netSalesMoney;
  }

  public void setNetSalesMoney(V1Money netSalesMoney) {
    this.netSalesMoney = netSalesMoney;
  }


  public V1PaymentItemization notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Notes entered by the merchant about the item at the time of payment, if any.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public V1PaymentItemization quantity(BigDecimal quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The quantity of the item purchased. This can be a decimal value.
   * @return quantity
   */
  @javax.annotation.Nullable
  public BigDecimal getQuantity() {
    return quantity;
  }

  public void setQuantity(BigDecimal quantity) {
    this.quantity = quantity;
  }


  public V1PaymentItemization singleQuantityMoney(V1Money singleQuantityMoney) {
    this.singleQuantityMoney = singleQuantityMoney;
    return this;
  }

  /**
   * Get singleQuantityMoney
   * @return singleQuantityMoney
   */
  @javax.annotation.Nullable
  public V1Money getSingleQuantityMoney() {
    return singleQuantityMoney;
  }

  public void setSingleQuantityMoney(V1Money singleQuantityMoney) {
    this.singleQuantityMoney = singleQuantityMoney;
  }


  public V1PaymentItemization taxes(List<V1PaymentTax> taxes) {
    this.taxes = taxes;
    return this;
  }

  public V1PaymentItemization addTaxesItem(V1PaymentTax taxesItem) {
    if (this.taxes == null) {
      this.taxes = new ArrayList<>();
    }
    this.taxes.add(taxesItem);
    return this;
  }

  /**
   * All taxes applied to this itemization.
   * @return taxes
   */
  @javax.annotation.Nullable
  public List<V1PaymentTax> getTaxes() {
    return taxes;
  }

  public void setTaxes(List<V1PaymentTax> taxes) {
    this.taxes = taxes;
  }


  public V1PaymentItemization totalMoney(V1Money totalMoney) {
    this.totalMoney = totalMoney;
    return this;
  }

  /**
   * Get totalMoney
   * @return totalMoney
   */
  @javax.annotation.Nullable
  public V1Money getTotalMoney() {
    return totalMoney;
  }

  public void setTotalMoney(V1Money totalMoney) {
    this.totalMoney = totalMoney;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PaymentItemization v1PaymentItemization = (V1PaymentItemization) o;
    return Objects.equals(this.discountMoney, v1PaymentItemization.discountMoney) &&
        Objects.equals(this.discounts, v1PaymentItemization.discounts) &&
        Objects.equals(this.grossSalesMoney, v1PaymentItemization.grossSalesMoney) &&
        Objects.equals(this.itemDetail, v1PaymentItemization.itemDetail) &&
        Objects.equals(this.itemVariationName, v1PaymentItemization.itemVariationName) &&
        Objects.equals(this.itemizationType, v1PaymentItemization.itemizationType) &&
        Objects.equals(this.modifiers, v1PaymentItemization.modifiers) &&
        Objects.equals(this.name, v1PaymentItemization.name) &&
        Objects.equals(this.netSalesMoney, v1PaymentItemization.netSalesMoney) &&
        Objects.equals(this.notes, v1PaymentItemization.notes) &&
        Objects.equals(this.quantity, v1PaymentItemization.quantity) &&
        Objects.equals(this.singleQuantityMoney, v1PaymentItemization.singleQuantityMoney) &&
        Objects.equals(this.taxes, v1PaymentItemization.taxes) &&
        Objects.equals(this.totalMoney, v1PaymentItemization.totalMoney);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discountMoney, discounts, grossSalesMoney, itemDetail, itemVariationName, itemizationType, modifiers, name, netSalesMoney, notes, quantity, singleQuantityMoney, taxes, totalMoney);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PaymentItemization {\n");
    sb.append("    discountMoney: ").append(toIndentedString(discountMoney)).append("\n");
    sb.append("    discounts: ").append(toIndentedString(discounts)).append("\n");
    sb.append("    grossSalesMoney: ").append(toIndentedString(grossSalesMoney)).append("\n");
    sb.append("    itemDetail: ").append(toIndentedString(itemDetail)).append("\n");
    sb.append("    itemVariationName: ").append(toIndentedString(itemVariationName)).append("\n");
    sb.append("    itemizationType: ").append(toIndentedString(itemizationType)).append("\n");
    sb.append("    modifiers: ").append(toIndentedString(modifiers)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    netSalesMoney: ").append(toIndentedString(netSalesMoney)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    singleQuantityMoney: ").append(toIndentedString(singleQuantityMoney)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    totalMoney: ").append(toIndentedString(totalMoney)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("discount_money");
    openapiFields.add("discounts");
    openapiFields.add("gross_sales_money");
    openapiFields.add("item_detail");
    openapiFields.add("item_variation_name");
    openapiFields.add("itemization_type");
    openapiFields.add("modifiers");
    openapiFields.add("name");
    openapiFields.add("net_sales_money");
    openapiFields.add("notes");
    openapiFields.add("quantity");
    openapiFields.add("single_quantity_money");
    openapiFields.add("taxes");
    openapiFields.add("total_money");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1PaymentItemization
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1PaymentItemization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PaymentItemization is not found in the empty JSON string", V1PaymentItemization.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1PaymentItemization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PaymentItemization` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `discount_money`
      if (jsonObj.get("discount_money") != null && !jsonObj.get("discount_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("discount_money"));
      }
      if (jsonObj.get("discounts") != null && !jsonObj.get("discounts").isJsonNull()) {
        JsonArray jsonArraydiscounts = jsonObj.getAsJsonArray("discounts");
        if (jsonArraydiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discounts` to be an array in the JSON string but got `%s`", jsonObj.get("discounts").toString()));
          }

          // validate the optional field `discounts` (array)
          for (int i = 0; i < jsonArraydiscounts.size(); i++) {
            V1PaymentDiscount.validateJsonElement(jsonArraydiscounts.get(i));
          };
        }
      }
      // validate the optional field `gross_sales_money`
      if (jsonObj.get("gross_sales_money") != null && !jsonObj.get("gross_sales_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("gross_sales_money"));
      }
      // validate the optional field `item_detail`
      if (jsonObj.get("item_detail") != null && !jsonObj.get("item_detail").isJsonNull()) {
        V1PaymentItemDetail.validateJsonElement(jsonObj.get("item_detail"));
      }
      if ((jsonObj.get("item_variation_name") != null && !jsonObj.get("item_variation_name").isJsonNull()) && !jsonObj.get("item_variation_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_variation_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_variation_name").toString()));
      }
      if ((jsonObj.get("itemization_type") != null && !jsonObj.get("itemization_type").isJsonNull()) && !jsonObj.get("itemization_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemization_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemization_type").toString()));
      }
      if (jsonObj.get("modifiers") != null && !jsonObj.get("modifiers").isJsonNull()) {
        JsonArray jsonArraymodifiers = jsonObj.getAsJsonArray("modifiers");
        if (jsonArraymodifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("modifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `modifiers` to be an array in the JSON string but got `%s`", jsonObj.get("modifiers").toString()));
          }

          // validate the optional field `modifiers` (array)
          for (int i = 0; i < jsonArraymodifiers.size(); i++) {
            V1PaymentModifier.validateJsonElement(jsonArraymodifiers.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `net_sales_money`
      if (jsonObj.get("net_sales_money") != null && !jsonObj.get("net_sales_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("net_sales_money"));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      // validate the optional field `single_quantity_money`
      if (jsonObj.get("single_quantity_money") != null && !jsonObj.get("single_quantity_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("single_quantity_money"));
      }
      if (jsonObj.get("taxes") != null && !jsonObj.get("taxes").isJsonNull()) {
        JsonArray jsonArraytaxes = jsonObj.getAsJsonArray("taxes");
        if (jsonArraytaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxes` to be an array in the JSON string but got `%s`", jsonObj.get("taxes").toString()));
          }

          // validate the optional field `taxes` (array)
          for (int i = 0; i < jsonArraytaxes.size(); i++) {
            V1PaymentTax.validateJsonElement(jsonArraytaxes.get(i));
          };
        }
      }
      // validate the optional field `total_money`
      if (jsonObj.get("total_money") != null && !jsonObj.get("total_money").isJsonNull()) {
        V1Money.validateJsonElement(jsonObj.get("total_money"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PaymentItemization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PaymentItemization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PaymentItemization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PaymentItemization.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PaymentItemization>() {
           @Override
           public void write(JsonWriter out, V1PaymentItemization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PaymentItemization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1PaymentItemization given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1PaymentItemization
   * @throws IOException if the JSON string is invalid with respect to V1PaymentItemization
   */
  public static V1PaymentItemization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PaymentItemization.class);
  }

  /**
   * Convert an instance of V1PaymentItemization to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

