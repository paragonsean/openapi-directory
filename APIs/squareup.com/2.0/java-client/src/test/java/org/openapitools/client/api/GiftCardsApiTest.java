/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateGiftCardRequest;
import org.openapitools.client.model.CreateGiftCardResponse;
import org.openapitools.client.model.LinkCustomerToGiftCardRequest;
import org.openapitools.client.model.LinkCustomerToGiftCardResponse;
import org.openapitools.client.model.ListGiftCardsResponse;
import org.openapitools.client.model.RetrieveGiftCardFromGANRequest;
import org.openapitools.client.model.RetrieveGiftCardFromGANResponse;
import org.openapitools.client.model.RetrieveGiftCardFromNonceRequest;
import org.openapitools.client.model.RetrieveGiftCardFromNonceResponse;
import org.openapitools.client.model.RetrieveGiftCardResponse;
import org.openapitools.client.model.UnlinkCustomerFromGiftCardRequest;
import org.openapitools.client.model.UnlinkCustomerFromGiftCardResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GiftCardsApi
 */
@Disabled
public class GiftCardsApiTest {

    private final GiftCardsApi api = new GiftCardsApi();

    /**
     * CreateGiftCard
     *
     * Creates a digital gift card or registers a physical (plastic) gift card. You must activate the gift card before  it can be used for payment. For more information, see  [Selling gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#selling-square-gift-cards).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGiftCardTest() throws ApiException {
        CreateGiftCardRequest createGiftCardRequest = null;
        CreateGiftCardResponse response = api.createGiftCard(createGiftCardRequest);
        // TODO: test validations
    }

    /**
     * LinkCustomerToGiftCard
     *
     * Links a customer to a gift card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void linkCustomerToGiftCardTest() throws ApiException {
        String giftCardId = null;
        LinkCustomerToGiftCardRequest linkCustomerToGiftCardRequest = null;
        LinkCustomerToGiftCardResponse response = api.linkCustomerToGiftCard(giftCardId, linkCustomerToGiftCardRequest);
        // TODO: test validations
    }

    /**
     * ListGiftCards
     *
     * Lists all gift cards. You can specify optional filters to retrieve  a subset of the gift cards.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGiftCardsTest() throws ApiException {
        String type = null;
        String state = null;
        Integer limit = null;
        String cursor = null;
        String customerId = null;
        ListGiftCardsResponse response = api.listGiftCards(type, state, limit, cursor, customerId);
        // TODO: test validations
    }

    /**
     * RetrieveGiftCard
     *
     * Retrieves a gift card using its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveGiftCardTest() throws ApiException {
        String id = null;
        RetrieveGiftCardResponse response = api.retrieveGiftCard(id);
        // TODO: test validations
    }

    /**
     * RetrieveGiftCardFromGAN
     *
     * Retrieves a gift card using the gift card account number (GAN).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveGiftCardFromGANTest() throws ApiException {
        RetrieveGiftCardFromGANRequest retrieveGiftCardFromGANRequest = null;
        RetrieveGiftCardFromGANResponse response = api.retrieveGiftCardFromGAN(retrieveGiftCardFromGANRequest);
        // TODO: test validations
    }

    /**
     * RetrieveGiftCardFromNonce
     *
     * Retrieves a gift card using a nonce (a secure token) that represents the gift card.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveGiftCardFromNonceTest() throws ApiException {
        RetrieveGiftCardFromNonceRequest retrieveGiftCardFromNonceRequest = null;
        RetrieveGiftCardFromNonceResponse response = api.retrieveGiftCardFromNonce(retrieveGiftCardFromNonceRequest);
        // TODO: test validations
    }

    /**
     * UnlinkCustomerFromGiftCard
     *
     * Unlinks a customer from a gift card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unlinkCustomerFromGiftCardTest() throws ApiException {
        String giftCardId = null;
        UnlinkCustomerFromGiftCardRequest unlinkCustomerFromGiftCardRequest = null;
        UnlinkCustomerFromGiftCardResponse response = api.unlinkCustomerFromGiftCard(giftCardId, unlinkCustomerFromGiftCardRequest);
        // TODO: test validations
    }

}
