/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchRetrieveOrdersRequest;
import org.openapitools.client.model.BatchRetrieveOrdersResponse;
import org.openapitools.client.model.CalculateOrderRequest;
import org.openapitools.client.model.CalculateOrderResponse;
import org.openapitools.client.model.CreateOrderRequest;
import org.openapitools.client.model.CreateOrderResponse;
import org.openapitools.client.model.PayOrderRequest;
import org.openapitools.client.model.PayOrderResponse;
import org.openapitools.client.model.RetrieveOrderResponse;
import org.openapitools.client.model.SearchOrdersRequest;
import org.openapitools.client.model.SearchOrdersResponse;
import org.openapitools.client.model.UpdateOrderRequest;
import org.openapitools.client.model.UpdateOrderResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrdersApi
 */
@Disabled
public class OrdersApiTest {

    private final OrdersApi api = new OrdersApi();

    /**
     * BatchRetrieveOrders
     *
     * Retrieves a set of [orders](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by their IDs.  If a given order ID does not exist, the ID is ignored instead of generating an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchRetrieveOrdersTest() throws ApiException {
        BatchRetrieveOrdersRequest batchRetrieveOrdersRequest = null;
        BatchRetrieveOrdersResponse response = api.batchRetrieveOrders(batchRetrieveOrdersRequest);
        // TODO: test validations
    }

    /**
     * CalculateOrder
     *
     * Enables applications to preview order pricing without creating an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calculateOrderTest() throws ApiException {
        CalculateOrderRequest calculateOrderRequest = null;
        CalculateOrderResponse response = api.calculateOrder(calculateOrderRequest);
        // TODO: test validations
    }

    /**
     * CreateOrder
     *
     * Creates a new [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that can include information about products for purchase and settings to apply to the purchase.  To pay for a created order, see  [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).  You can modify open orders using the [UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrderTest() throws ApiException {
        CreateOrderRequest createOrderRequest = null;
        CreateOrderResponse response = api.createOrder(createOrderRequest);
        // TODO: test validations
    }

    /**
     * PayOrder
     *
     * Pay for an [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) using one or more approved [payments](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) or settle an order with a total of &#x60;0&#x60;.  The total of the &#x60;payment_ids&#x60; listed in the request must be equal to the order total. Orders with a total amount of &#x60;0&#x60; can be marked as paid by specifying an empty array of &#x60;payment_ids&#x60; in the request.  To be used with &#x60;PayOrder&#x60;, a payment must:  - Reference the order by specifying the &#x60;order_id&#x60; when [creating the payment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment). Any approved payments that reference the same &#x60;order_id&#x60; not specified in the &#x60;payment_ids&#x60; is canceled. - Be approved with [delayed capture](https://developer.squareup.com/docs/payments-api/take-payments#delayed-capture). Using a delayed capture payment with &#x60;PayOrder&#x60; completes the approved payment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void payOrderTest() throws ApiException {
        String orderId = null;
        PayOrderRequest payOrderRequest = null;
        PayOrderResponse response = api.payOrder(orderId, payOrderRequest);
        // TODO: test validations
    }

    /**
     * SearchOrders
     *
     * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square ecosystem (such as Point of Sale, Invoices, and Connect APIs).  &#x60;SearchOrders&#x60; requests need to specify which locations to search and define a [SearchOrdersQuery](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersQuery) object that controls how to sort or filter the results. Your &#x60;SearchOrdersQuery&#x60; can:    Set filter criteria.   Set the sort order.   Determine whether to return results as complete &#x60;Order&#x60; objects or as [OrderEntry](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode might not be transmitted to Square for up to 72 hours. Offline orders have a &#x60;created_at&#x60; value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchOrdersTest() throws ApiException {
        SearchOrdersRequest searchOrdersRequest = null;
        SearchOrdersResponse response = api.searchOrders(searchOrdersRequest);
        // TODO: test validations
    }

    /**
     * RetrieveOrder
     *
     * Retrieves an [Order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2OrdersOrderIdGetTest() throws ApiException {
        String orderId = null;
        RetrieveOrderResponse response = api.v2OrdersOrderIdGet(orderId);
        // TODO: test validations
    }

    /**
     * UpdateOrder
     *
     * Updates an open [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by adding, replacing, or deleting fields. Orders with a &#x60;COMPLETED&#x60; or &#x60;CANCELED&#x60; state cannot be updated.  An &#x60;UpdateOrder&#x60; request requires the following:  - The &#x60;order_id&#x60; in the endpoint path, identifying the order to update. - The latest &#x60;version&#x60; of the order to update. - The [sparse order](https://developer.squareup.com/docs/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version to which the update is being applied. - If deleting fields, the [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation) identifying the fields to clear.  To pay for an order, see  [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2OrdersOrderIdPutTest() throws ApiException {
        String orderId = null;
        UpdateOrderRequest updateOrderRequest = null;
        UpdateOrderResponse response = api.v2OrdersOrderIdPut(orderId, updateOrderRequest);
        // TODO: test validations
    }

}
