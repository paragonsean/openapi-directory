/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ObtainTokenRequest;
import org.openapitools.client.model.ObtainTokenResponse;
import org.openapitools.client.model.RenewTokenRequest;
import org.openapitools.client.model.RenewTokenResponse;
import org.openapitools.client.model.RevokeTokenRequest;
import org.openapitools.client.model.RevokeTokenResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OAuthApi
 */
@Disabled
public class OAuthApiTest {

    private final OAuthApi api = new OAuthApi();

    /**
     * ObtainToken
     *
     * Returns an OAuth access token.  The endpoint supports distinct methods of obtaining OAuth access tokens. Applications specify a method by adding the &#x60;grant_type&#x60; parameter in the request and also provide relevant information.  __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and a refresh token in the response.  __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void obtainTokenTest() throws ApiException {
        ObtainTokenRequest obtainTokenRequest = null;
        ObtainTokenResponse response = api.obtainToken(obtainTokenRequest);
        // TODO: test validations
    }

    /**
     * RenewToken
     *
     * &#x60;RenewToken&#x60; is deprecated. For information about refreshing OAuth access tokens, see [Migrate from Renew to Refresh OAuth Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application&#39;s personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the Credentials page in the [developer dashboard](https://developer.squareup.com/apps).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renewTokenTest() throws ApiException {
        String clientId = null;
        RenewTokenRequest renewTokenRequest = null;
        RenewTokenResponse response = api.renewToken(clientId, renewTokenRequest);
        // TODO: test validations
    }

    /**
     * RevokeToken
     *
     * Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The &#x60;Authorization&#x60; header for this endpoint must have the following format:  &#x60;&#x60;&#x60; Authorization: Client APPLICATION_SECRET &#x60;&#x60;&#x60;  Replace &#x60;APPLICATION_SECRET&#x60; with the application secret on the OAuth page in the [developer dashboard](https://developer.squareup.com/apps).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeTokenTest() throws ApiException {
        RevokeTokenRequest revokeTokenRequest = null;
        RevokeTokenResponse response = api.revokeToken(revokeTokenRequest);
        // TODO: test validations
    }

}
