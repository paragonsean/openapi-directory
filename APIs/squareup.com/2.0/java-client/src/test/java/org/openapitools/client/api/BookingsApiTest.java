/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CancelBookingRequest;
import org.openapitools.client.model.CancelBookingResponse;
import org.openapitools.client.model.CreateBookingRequest;
import org.openapitools.client.model.CreateBookingResponse;
import org.openapitools.client.model.ListTeamMemberBookingProfilesResponse;
import org.openapitools.client.model.RetrieveBookingResponse;
import org.openapitools.client.model.RetrieveBusinessBookingProfileResponse;
import org.openapitools.client.model.RetrieveTeamMemberBookingProfileResponse;
import org.openapitools.client.model.SearchAvailabilityRequest;
import org.openapitools.client.model.SearchAvailabilityResponse;
import org.openapitools.client.model.UpdateBookingRequest;
import org.openapitools.client.model.UpdateBookingResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BookingsApi
 */
@Disabled
public class BookingsApiTest {

    private final BookingsApi api = new BookingsApi();

    /**
     * CancelBooking
     *
     * Cancels an existing booking.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelBookingTest() throws ApiException {
        String bookingId = null;
        CancelBookingRequest cancelBookingRequest = null;
        CancelBookingResponse response = api.cancelBooking(bookingId, cancelBookingRequest);
        // TODO: test validations
    }

    /**
     * CreateBooking
     *
     * Creates a booking.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBookingTest() throws ApiException {
        CreateBookingRequest createBookingRequest = null;
        CreateBookingResponse response = api.createBooking(createBookingRequest);
        // TODO: test validations
    }

    /**
     * ListTeamMemberBookingProfiles
     *
     * Lists booking profiles for team members.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeamMemberBookingProfilesTest() throws ApiException {
        Boolean bookableOnly = null;
        Integer limit = null;
        String cursor = null;
        String locationId = null;
        ListTeamMemberBookingProfilesResponse response = api.listTeamMemberBookingProfiles(bookableOnly, limit, cursor, locationId);
        // TODO: test validations
    }

    /**
     * RetrieveBooking
     *
     * Retrieves a booking.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveBookingTest() throws ApiException {
        String bookingId = null;
        RetrieveBookingResponse response = api.retrieveBooking(bookingId);
        // TODO: test validations
    }

    /**
     * RetrieveBusinessBookingProfile
     *
     * Retrieves a seller&#39;s booking profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveBusinessBookingProfileTest() throws ApiException {
        RetrieveBusinessBookingProfileResponse response = api.retrieveBusinessBookingProfile();
        // TODO: test validations
    }

    /**
     * RetrieveTeamMemberBookingProfile
     *
     * Retrieves a team member&#39;s booking profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveTeamMemberBookingProfileTest() throws ApiException {
        String teamMemberId = null;
        RetrieveTeamMemberBookingProfileResponse response = api.retrieveTeamMemberBookingProfile(teamMemberId);
        // TODO: test validations
    }

    /**
     * SearchAvailability
     *
     * Searches for availabilities for booking.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchAvailabilityTest() throws ApiException {
        SearchAvailabilityRequest searchAvailabilityRequest = null;
        SearchAvailabilityResponse response = api.searchAvailability(searchAvailabilityRequest);
        // TODO: test validations
    }

    /**
     * UpdateBooking
     *
     * Updates a booking.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBookingTest() throws ApiException {
        String bookingId = null;
        UpdateBookingRequest updateBookingRequest = null;
        UpdateBookingResponse response = api.updateBooking(bookingId, updateBookingRequest);
        // TODO: test validations
    }

}
