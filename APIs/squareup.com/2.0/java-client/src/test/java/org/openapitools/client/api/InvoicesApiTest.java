/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CancelInvoiceRequest;
import org.openapitools.client.model.CancelInvoiceResponse;
import org.openapitools.client.model.CreateInvoiceRequest;
import org.openapitools.client.model.CreateInvoiceResponse;
import org.openapitools.client.model.DeleteInvoiceResponse;
import org.openapitools.client.model.GetInvoiceResponse;
import org.openapitools.client.model.ListInvoicesResponse;
import org.openapitools.client.model.PublishInvoiceRequest;
import org.openapitools.client.model.PublishInvoiceResponse;
import org.openapitools.client.model.SearchInvoicesRequest;
import org.openapitools.client.model.SearchInvoicesResponse;
import org.openapitools.client.model.UpdateInvoiceRequest;
import org.openapitools.client.model.UpdateInvoiceResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InvoicesApi
 */
@Disabled
public class InvoicesApiTest {

    private final InvoicesApi api = new InvoicesApi();

    /**
     * CancelInvoice
     *
     * Cancels an invoice. The seller cannot collect payments for  the canceled invoice.  You cannot cancel an invoice in the &#x60;DRAFT&#x60; state or in a terminal state: &#x60;PAID&#x60;, &#x60;REFUNDED&#x60;, &#x60;CANCELED&#x60;, or &#x60;FAILED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelInvoiceTest() throws ApiException {
        String invoiceId = null;
        CancelInvoiceRequest cancelInvoiceRequest = null;
        CancelInvoiceResponse response = api.cancelInvoice(invoiceId, cancelInvoiceRequest);
        // TODO: test validations
    }

    /**
     * CreateInvoice
     *
     * Creates a draft [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice)  for an order created using the Orders API.  A draft invoice remains in your account and no action is taken.  You must publish the invoice before Square can process it (send it to the customer&#39;s email address or charge the customerâ€™s card on file).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInvoiceTest() throws ApiException {
        CreateInvoiceRequest createInvoiceRequest = null;
        CreateInvoiceResponse response = api.createInvoice(createInvoiceRequest);
        // TODO: test validations
    }

    /**
     * DeleteInvoice
     *
     * Deletes the specified invoice. When an invoice is deleted, the  associated order status changes to CANCELED. You can only delete a draft  invoice (you cannot delete a published invoice, including one that is scheduled for processing).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInvoiceTest() throws ApiException {
        String invoiceId = null;
        Integer version = null;
        DeleteInvoiceResponse response = api.deleteInvoice(invoiceId, version);
        // TODO: test validations
    }

    /**
     * GetInvoice
     *
     * Retrieves an invoice by invoice ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvoiceTest() throws ApiException {
        String invoiceId = null;
        GetInvoiceResponse response = api.getInvoice(invoiceId);
        // TODO: test validations
    }

    /**
     * ListInvoices
     *
     * Returns a list of invoices for a given location. The response  is paginated. If truncated, the response includes a &#x60;cursor&#x60; that you     use in a subsequent request to retrieve the next set of invoices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInvoicesTest() throws ApiException {
        String locationId = null;
        String cursor = null;
        Integer limit = null;
        ListInvoicesResponse response = api.listInvoices(locationId, cursor, limit);
        // TODO: test validations
    }

    /**
     * PublishInvoice
     *
     * Publishes the specified draft invoice.   After an invoice is published, Square  follows up based on the invoice configuration. For example, Square  sends the invoice to the customer&#39;s email address, charges the customer&#39;s card on file, or does  nothing. Square also makes the invoice available on a Square-hosted invoice page.   The invoice &#x60;status&#x60; also changes from &#x60;DRAFT&#x60; to a status  based on the invoice configuration. For example, the status changes to &#x60;UNPAID&#x60; if  Square emails the invoice or &#x60;PARTIALLY_PAID&#x60; if Square charge a card on file for a portion of the  invoice amount.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishInvoiceTest() throws ApiException {
        String invoiceId = null;
        PublishInvoiceRequest publishInvoiceRequest = null;
        PublishInvoiceResponse response = api.publishInvoice(invoiceId, publishInvoiceRequest);
        // TODO: test validations
    }

    /**
     * SearchInvoices
     *
     * Searches for invoices from a location specified in  the filter. You can optionally specify customers in the filter for whom to  retrieve invoices. In the current implementation, you can only specify one location and  optionally one customer.  The response is paginated. If truncated, the response includes a &#x60;cursor&#x60;  that you use in a subsequent request to retrieve the next set of invoices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchInvoicesTest() throws ApiException {
        SearchInvoicesRequest searchInvoicesRequest = null;
        SearchInvoicesResponse response = api.searchInvoices(searchInvoicesRequest);
        // TODO: test validations
    }

    /**
     * UpdateInvoice
     *
     * Updates an invoice by modifying fields, clearing fields, or both. For most updates, you can use a sparse  &#x60;Invoice&#x60; object to add fields or change values and use the &#x60;fields_to_clear&#x60; field to specify fields to clear.  However, some restrictions apply. For example, you cannot change the &#x60;order_id&#x60; or &#x60;location_id&#x60; field and you  must provide the complete &#x60;custom_fields&#x60; list to update a custom field. Published invoices have additional restrictions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInvoiceTest() throws ApiException {
        String invoiceId = null;
        UpdateInvoiceRequest updateInvoiceRequest = null;
        UpdateInvoiceResponse response = api.updateInvoice(invoiceId, updateInvoiceRequest);
        // TODO: test validations
    }

}
