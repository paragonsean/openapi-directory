/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.V1CreateRefundRequest;
import org.openapitools.client.model.V1Order;
import org.openapitools.client.model.V1Payment;
import org.openapitools.client.model.V1Refund;
import org.openapitools.client.model.V1Settlement;
import org.openapitools.client.model.V1UpdateOrderRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V1TransactionsApi
 */
@Disabled
public class V1TransactionsApiTest {

    private final V1TransactionsApi api = new V1TransactionsApi();

    /**
     * CreateRefund
     *
     * Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRefundTest() throws ApiException {
        String locationId = null;
        V1CreateRefundRequest v1CreateRefundRequest = null;
        V1Refund response = api.createRefund(locationId, v1CreateRefundRequest);
        // TODO: test validations
    }

    /**
     * ListOrders
     *
     * Provides summary information for a merchant&#39;s online store orders.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrdersTest() throws ApiException {
        String locationId = null;
        String order = null;
        Integer limit = null;
        String batchToken = null;
        List<V1Order> response = api.listOrders(locationId, order, limit, batchToken);
        // TODO: test validations
    }

    /**
     * ListPayments
     *
     * Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPaymentsTest() throws ApiException {
        String locationId = null;
        String order = null;
        String beginTime = null;
        String endTime = null;
        Integer limit = null;
        String batchToken = null;
        Boolean includePartial = null;
        List<V1Payment> response = api.listPayments(locationId, order, beginTime, endTime, limit, batchToken, includePartial);
        // TODO: test validations
    }

    /**
     * ListRefunds
     *
     * Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRefundsTest() throws ApiException {
        String locationId = null;
        String order = null;
        String beginTime = null;
        String endTime = null;
        Integer limit = null;
        String batchToken = null;
        List<V1Refund> response = api.listRefunds(locationId, order, beginTime, endTime, limit, batchToken);
        // TODO: test validations
    }

    /**
     * ListSettlements
     *
     * Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSettlementsTest() throws ApiException {
        String locationId = null;
        String order = null;
        String beginTime = null;
        String endTime = null;
        Integer limit = null;
        String status = null;
        String batchToken = null;
        List<V1Settlement> response = api.listSettlements(locationId, order, beginTime, endTime, limit, status, batchToken);
        // TODO: test validations
    }

    /**
     * RetrieveOrder
     *
     * Provides comprehensive information for a single online store order, including the order&#39;s history.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveOrderTest() throws ApiException {
        String locationId = null;
        String orderId = null;
        V1Order response = api.retrieveOrder(locationId, orderId);
        // TODO: test validations
    }

    /**
     * RetrievePayment
     *
     * Provides comprehensive information for a single payment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrievePaymentTest() throws ApiException {
        String locationId = null;
        String paymentId = null;
        V1Payment response = api.retrievePayment(locationId, paymentId);
        // TODO: test validations
    }

    /**
     * RetrieveSettlement
     *
     * Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveSettlementTest() throws ApiException {
        String locationId = null;
        String settlementId = null;
        V1Settlement response = api.retrieveSettlement(locationId, settlementId);
        // TODO: test validations
    }

    /**
     * UpdateOrder
     *
     * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderTest() throws ApiException {
        String locationId = null;
        String orderId = null;
        V1UpdateOrderRequest v1UpdateOrderRequest = null;
        V1Order response = api.updateOrder(locationId, orderId, v1UpdateOrderRequest);
        // TODO: test validations
    }

}
