/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CaptureTransactionResponse;
import org.openapitools.client.model.ChargeRequest;
import org.openapitools.client.model.ChargeResponse;
import org.openapitools.client.model.CreateRefundRequest;
import org.openapitools.client.model.CreateRefundResponse;
import org.openapitools.client.model.ListRefundsResponse;
import org.openapitools.client.model.ListTransactionsResponse;
import org.openapitools.client.model.RetrieveTransactionResponse;
import org.openapitools.client.model.VoidTransactionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Disabled
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    /**
     * CaptureTransaction
     *
     * Captures a transaction that was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.   See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void captureTransactionTest() throws ApiException {
        String locationId = null;
        String transactionId = null;
        CaptureTransactionResponse response = api.captureTransaction(locationId, transactionId);
        // TODO: test validations
    }

    /**
     * Charge
     *
     * Charges a card represented by a card nonce or a customer&#39;s card on file.  Your request to this endpoint must include _either_:  - A value for the &#x60;card_nonce&#x60; parameter (to charge a card payment token generated with the Web Payments SDK) - Values for the &#x60;customer_card_id&#x60; and &#x60;customer_id&#x60; parameters (to charge a customer&#39;s card on file)  In order for an eCommerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - &#x60;buyer_email_address&#x60; - At least one of &#x60;billing_address&#x60; or &#x60;shipping_address&#x60;  When this response is returned, the amount of Square&#39;s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/retrieve-transaction). See the &#x60;processing_fee_money&#x60; field of each [Tender included](https://developer.squareup.com/reference/square_2021-08-18/objects/Tender) in the transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chargeTest() throws ApiException {
        String locationId = null;
        ChargeRequest chargeRequest = null;
        ChargeResponse response = api.charge(locationId, chargeRequest);
        // TODO: test validations
    }

    /**
     * ListTransactions
     *
     * Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTransactionsTest() throws ApiException {
        String locationId = null;
        String beginTime = null;
        String endTime = null;
        String sortOrder = null;
        String cursor = null;
        ListTransactionsResponse response = api.listTransactions(locationId, beginTime, endTime, sortOrder, cursor);
        // TODO: test validations
    }

    /**
     * RetrieveTransaction
     *
     * Retrieves details for a single transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveTransactionTest() throws ApiException {
        String locationId = null;
        String transactionId = null;
        RetrieveTransactionResponse response = api.retrieveTransaction(locationId, transactionId);
        // TODO: test validations
    }

    /**
     * ListRefunds
     *
     * Lists refunds for one of a business&#39;s locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square&#39;s Point of Sale applications.  Refunds with a &#x60;status&#x60; of &#x60;PENDING&#x60; are not currently included in this endpoint&#39;s response.  Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2LocationsLocationIdRefundsGetTest() throws ApiException {
        String locationId = null;
        String beginTime = null;
        String endTime = null;
        String sortOrder = null;
        String cursor = null;
        ListRefundsResponse response = api.v2LocationsLocationIdRefundsGet(locationId, beginTime, endTime, sortOrder, cursor);
        // TODO: test validations
    }

    /**
     * CreateRefund
     *
     * Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2LocationsLocationIdTransactionsTransactionIdRefundPostTest() throws ApiException {
        String locationId = null;
        String transactionId = null;
        CreateRefundRequest createRefundRequest = null;
        CreateRefundResponse response = api.v2LocationsLocationIdTransactionsTransactionIdRefundPost(locationId, transactionId, createRefundRequest);
        // TODO: test validations
    }

    /**
     * VoidTransaction
     *
     * Cancels a transaction that was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.   See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void voidTransactionTest() throws ApiException {
        String locationId = null;
        String transactionId = null;
        VoidTransactionResponse response = api.voidTransaction(locationId, transactionId);
        // TODO: test validations
    }

}
