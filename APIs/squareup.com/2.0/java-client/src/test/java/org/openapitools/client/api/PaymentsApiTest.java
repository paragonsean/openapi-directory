/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CancelPaymentByIdempotencyKeyRequest;
import org.openapitools.client.model.CancelPaymentByIdempotencyKeyResponse;
import org.openapitools.client.model.CancelPaymentResponse;
import org.openapitools.client.model.CompletePaymentResponse;
import org.openapitools.client.model.CreatePaymentRequest;
import org.openapitools.client.model.CreatePaymentResponse;
import org.openapitools.client.model.GetPaymentResponse;
import org.openapitools.client.model.ListPaymentsResponse;
import org.openapitools.client.model.UpdatePaymentRequest;
import org.openapitools.client.model.UpdatePaymentResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentsApi
 */
@Disabled
public class PaymentsApiTest {

    private final PaymentsApi api = new PaymentsApi();

    /**
     * CancelPayment
     *
     * Cancels (voids) a payment. You can use this endpoint to cancel a payment with  the APPROVED &#x60;status&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelPaymentTest() throws ApiException {
        String paymentId = null;
        CancelPaymentResponse response = api.cancelPayment(paymentId);
        // TODO: test validations
    }

    /**
     * CancelPaymentByIdempotencyKey
     *
     * Cancels (voids) a payment identified by the idempotency key that is specified in the request.  Use this method when the status of a &#x60;CreatePayment&#x60; request is unknown (for example, after you send a &#x60;CreatePayment&#x60; request, a network error occurs and you do not get a response). In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your &#x60;CreatePayment&#x60; request that you want to cancel. After canceling the payment, you can submit your &#x60;CreatePayment&#x60; request again.  Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint returns successfully.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelPaymentByIdempotencyKeyTest() throws ApiException {
        CancelPaymentByIdempotencyKeyRequest cancelPaymentByIdempotencyKeyRequest = null;
        CancelPaymentByIdempotencyKeyResponse response = api.cancelPaymentByIdempotencyKey(cancelPaymentByIdempotencyKeyRequest);
        // TODO: test validations
    }

    /**
     * CompletePayment
     *
     * Completes (captures) a payment. By default, payments are set to complete immediately after they are created.  You can use this endpoint to complete a payment with the APPROVED &#x60;status&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completePaymentTest() throws ApiException {
        String paymentId = null;
        CompletePaymentResponse response = api.completePayment(paymentId);
        // TODO: test validations
    }

    /**
     * CreatePayment
     *
     * Creates a payment using the provided source. You can use this endpoint  to charge a card (credit/debit card or     Square gift card) or record a payment that the seller received outside of Square  (cash payment from a buyer or a payment that an external entity  processed on behalf of the seller).  The endpoint creates a  &#x60;Payment&#x60; object and returns it in the response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentTest() throws ApiException {
        CreatePaymentRequest createPaymentRequest = null;
        CreatePaymentResponse response = api.createPayment(createPaymentRequest);
        // TODO: test validations
    }

    /**
     * GetPayment
     *
     * Retrieves details for a specific payment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentTest() throws ApiException {
        String paymentId = null;
        GetPaymentResponse response = api.getPayment(paymentId);
        // TODO: test validations
    }

    /**
     * UpdatePayment
     *
     * Updates a payment with the APPROVED status. You can update the &#x60;amount_money&#x60; and &#x60;tip_money&#x60; using this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentTest() throws ApiException {
        String paymentId = null;
        UpdatePaymentRequest updatePaymentRequest = null;
        UpdatePaymentResponse response = api.updatePayment(paymentId, updatePaymentRequest);
        // TODO: test validations
    }

    /**
     * ListPayments
     *
     * Retrieves a list of payments taken by the account making the request.  Results are eventually consistent, and new payments or changes to payments might take several seconds to appear.  The maximum results per page is 100.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2PaymentsGetTest() throws ApiException {
        String beginTime = null;
        String endTime = null;
        String sortOrder = null;
        String cursor = null;
        String locationId = null;
        Long total = null;
        String last4 = null;
        String cardBrand = null;
        Integer limit = null;
        ListPaymentsResponse response = api.v2PaymentsGet(beginTime, endTime, sortOrder, cursor, locationId, total, last4, cardBrand, limit);
        // TODO: test validations
    }

}
