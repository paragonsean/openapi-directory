/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CancelSubscriptionResponse;
import org.openapitools.client.model.CreateSubscriptionRequest;
import org.openapitools.client.model.CreateSubscriptionResponse;
import org.openapitools.client.model.ListSubscriptionEventsResponse;
import org.openapitools.client.model.ResumeSubscriptionResponse;
import org.openapitools.client.model.RetrieveSubscriptionResponse;
import org.openapitools.client.model.SearchSubscriptionsRequest;
import org.openapitools.client.model.SearchSubscriptionsResponse;
import org.openapitools.client.model.UpdateSubscriptionRequest;
import org.openapitools.client.model.UpdateSubscriptionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubscriptionsApi
 */
@Disabled
public class SubscriptionsApiTest {

    private final SubscriptionsApi api = new SubscriptionsApi();

    /**
     * CancelSubscription
     *
     * Sets the &#x60;canceled_date&#x60; field to the end of the active billing period. After this date, the status changes from ACTIVE to CANCELED.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelSubscriptionTest() throws ApiException {
        String subscriptionId = null;
        CancelSubscriptionResponse response = api.cancelSubscription(subscriptionId);
        // TODO: test validations
    }

    /**
     * CreateSubscription
     *
     * Creates a subscription for a customer to a subscription plan.  If you provide a card on file in the request, Square charges the card for the subscription. Otherwise, Square bills an invoice to the customer&#39;s email address. The subscription starts immediately, unless the request includes the optional &#x60;start_date&#x60;. Each individual subscription is associated with a particular location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubscriptionTest() throws ApiException {
        CreateSubscriptionRequest createSubscriptionRequest = null;
        CreateSubscriptionResponse response = api.createSubscription(createSubscriptionRequest);
        // TODO: test validations
    }

    /**
     * ListSubscriptionEvents
     *
     * Lists all events for a specific subscription. In the current implementation, only &#x60;START_SUBSCRIPTION&#x60; and &#x60;STOP_SUBSCRIPTION&#x60; (when the subscription was canceled) events are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSubscriptionEventsTest() throws ApiException {
        String subscriptionId = null;
        String cursor = null;
        Integer limit = null;
        ListSubscriptionEventsResponse response = api.listSubscriptionEvents(subscriptionId, cursor, limit);
        // TODO: test validations
    }

    /**
     * ResumeSubscription
     *
     * Resumes a deactivated subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeSubscriptionTest() throws ApiException {
        String subscriptionId = null;
        ResumeSubscriptionResponse response = api.resumeSubscription(subscriptionId);
        // TODO: test validations
    }

    /**
     * RetrieveSubscription
     *
     * Retrieves a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveSubscriptionTest() throws ApiException {
        String subscriptionId = null;
        RetrieveSubscriptionResponse response = api.retrieveSubscription(subscriptionId);
        // TODO: test validations
    }

    /**
     * SearchSubscriptions
     *
     * Searches for subscriptions. Results are ordered chronologically by subscription creation date. If the request specifies more than one location ID, the endpoint orders the result by location ID, and then by creation date within each location. If no locations are given in the query, all locations are searched.  You can also optionally specify &#x60;customer_ids&#x60; to search by customer. If left unset, all customers associated with the specified locations are returned. If the request specifies customer IDs, the endpoint orders results first by location, within location by customer ID, and within customer by subscription creation date.  For more information, see [Retrieve subscriptions](https://developer.squareup.com/docs/subscriptions-api/overview#retrieve-subscriptions).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchSubscriptionsTest() throws ApiException {
        SearchSubscriptionsRequest searchSubscriptionsRequest = null;
        SearchSubscriptionsResponse response = api.searchSubscriptions(searchSubscriptionsRequest);
        // TODO: test validations
    }

    /**
     * UpdateSubscription
     *
     * Updates a subscription. You can set, modify, and clear the &#x60;subscription&#x60; field values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionTest() throws ApiException {
        String subscriptionId = null;
        UpdateSubscriptionRequest updateSubscriptionRequest = null;
        UpdateSubscriptionResponse response = api.updateSubscription(subscriptionId, updateSubscriptionRequest);
        // TODO: test validations
    }

}
