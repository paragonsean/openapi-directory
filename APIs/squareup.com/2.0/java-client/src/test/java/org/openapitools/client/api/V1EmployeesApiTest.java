/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.V1Employee;
import org.openapitools.client.model.V1EmployeeRole;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V1EmployeesApi
 */
@Disabled
public class V1EmployeesApiTest {

    private final V1EmployeesApi api = new V1EmployeesApi();

    /**
     * CreateEmployee
     *
     *  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmployeeTest() throws ApiException {
        V1Employee v1Employee = null;
        V1Employee response = api.createEmployee(v1Employee);
        // TODO: test validations
    }

    /**
     * CreateEmployeeRole
     *
     * Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](https://developer.squareup.com/reference/square_2021-08-18/v1-employees-api/update-employee-role) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmployeeRoleTest() throws ApiException {
        V1EmployeeRole v1EmployeeRole = null;
        V1EmployeeRole response = api.createEmployeeRole(v1EmployeeRole);
        // TODO: test validations
    }

    /**
     * ListEmployeeRoles
     *
     * Provides summary information for all of a business&#39;s employee roles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEmployeeRolesTest() throws ApiException {
        String order = null;
        Integer limit = null;
        String batchToken = null;
        List<V1EmployeeRole> response = api.listEmployeeRoles(order, limit, batchToken);
        // TODO: test validations
    }

    /**
     * ListEmployees
     *
     * Provides summary information for all of a business&#39;s employees.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEmployeesTest() throws ApiException {
        String order = null;
        String beginUpdatedAt = null;
        String endUpdatedAt = null;
        String beginCreatedAt = null;
        String endCreatedAt = null;
        String status = null;
        String externalId = null;
        Integer limit = null;
        String batchToken = null;
        List<V1Employee> response = api.listEmployees(order, beginUpdatedAt, endUpdatedAt, beginCreatedAt, endCreatedAt, status, externalId, limit, batchToken);
        // TODO: test validations
    }

    /**
     * RetrieveEmployee
     *
     * Provides the details for a single employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveEmployeeTest() throws ApiException {
        String employeeId = null;
        V1Employee response = api.retrieveEmployee(employeeId);
        // TODO: test validations
    }

    /**
     * RetrieveEmployeeRole
     *
     * Provides the details for a single employee role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveEmployeeRoleTest() throws ApiException {
        String roleId = null;
        V1EmployeeRole response = api.retrieveEmployeeRole(roleId);
        // TODO: test validations
    }

    /**
     * UpdateEmployee
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmployeeTest() throws ApiException {
        String employeeId = null;
        V1Employee v1Employee = null;
        V1Employee response = api.updateEmployee(employeeId, v1Employee);
        // TODO: test validations
    }

    /**
     * UpdateEmployeeRole
     *
     * Modifies the details of an employee role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmployeeRoleTest() throws ApiException {
        String roleId = null;
        V1EmployeeRole v1EmployeeRole = null;
        V1EmployeeRole response = api.updateEmployeeRole(roleId, v1EmployeeRole);
        // TODO: test validations
    }

}
