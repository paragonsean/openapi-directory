/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogQuickAmountsSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogQuickAmountsSettings::OAICatalogQuickAmountsSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogQuickAmountsSettings::OAICatalogQuickAmountsSettings() {
    this->initializeModel();
}

OAICatalogQuickAmountsSettings::~OAICatalogQuickAmountsSettings() {}

void OAICatalogQuickAmountsSettings::initializeModel() {

    m_amounts_isSet = false;
    m_amounts_isValid = false;

    m_eligible_for_auto_amounts_isSet = false;
    m_eligible_for_auto_amounts_isValid = false;

    m_option_isSet = false;
    m_option_isValid = false;
}

void OAICatalogQuickAmountsSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogQuickAmountsSettings::fromJsonObject(QJsonObject json) {

    m_amounts_isValid = ::OpenAPI::fromJsonValue(m_amounts, json[QString("amounts")]);
    m_amounts_isSet = !json[QString("amounts")].isNull() && m_amounts_isValid;

    m_eligible_for_auto_amounts_isValid = ::OpenAPI::fromJsonValue(m_eligible_for_auto_amounts, json[QString("eligible_for_auto_amounts")]);
    m_eligible_for_auto_amounts_isSet = !json[QString("eligible_for_auto_amounts")].isNull() && m_eligible_for_auto_amounts_isValid;

    m_option_isValid = ::OpenAPI::fromJsonValue(m_option, json[QString("option")]);
    m_option_isSet = !json[QString("option")].isNull() && m_option_isValid;
}

QString OAICatalogQuickAmountsSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogQuickAmountsSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_amounts.size() > 0) {
        obj.insert(QString("amounts"), ::OpenAPI::toJsonValue(m_amounts));
    }
    if (m_eligible_for_auto_amounts_isSet) {
        obj.insert(QString("eligible_for_auto_amounts"), ::OpenAPI::toJsonValue(m_eligible_for_auto_amounts));
    }
    if (m_option_isSet) {
        obj.insert(QString("option"), ::OpenAPI::toJsonValue(m_option));
    }
    return obj;
}

QList<OAICatalogQuickAmount> OAICatalogQuickAmountsSettings::getAmounts() const {
    return m_amounts;
}
void OAICatalogQuickAmountsSettings::setAmounts(const QList<OAICatalogQuickAmount> &amounts) {
    m_amounts = amounts;
    m_amounts_isSet = true;
}

bool OAICatalogQuickAmountsSettings::is_amounts_Set() const{
    return m_amounts_isSet;
}

bool OAICatalogQuickAmountsSettings::is_amounts_Valid() const{
    return m_amounts_isValid;
}

bool OAICatalogQuickAmountsSettings::isEligibleForAutoAmounts() const {
    return m_eligible_for_auto_amounts;
}
void OAICatalogQuickAmountsSettings::setEligibleForAutoAmounts(const bool &eligible_for_auto_amounts) {
    m_eligible_for_auto_amounts = eligible_for_auto_amounts;
    m_eligible_for_auto_amounts_isSet = true;
}

bool OAICatalogQuickAmountsSettings::is_eligible_for_auto_amounts_Set() const{
    return m_eligible_for_auto_amounts_isSet;
}

bool OAICatalogQuickAmountsSettings::is_eligible_for_auto_amounts_Valid() const{
    return m_eligible_for_auto_amounts_isValid;
}

QString OAICatalogQuickAmountsSettings::getOption() const {
    return m_option;
}
void OAICatalogQuickAmountsSettings::setOption(const QString &option) {
    m_option = option;
    m_option_isSet = true;
}

bool OAICatalogQuickAmountsSettings::is_option_Set() const{
    return m_option_isSet;
}

bool OAICatalogQuickAmountsSettings::is_option_Valid() const{
    return m_option_isValid;
}

bool OAICatalogQuickAmountsSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_eligible_for_auto_amounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogQuickAmountsSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_option_isValid && true;
}

} // namespace OpenAPI
