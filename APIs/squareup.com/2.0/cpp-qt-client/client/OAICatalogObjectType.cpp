/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogObjectType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogObjectType::OAICatalogObjectType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogObjectType::OAICatalogObjectType() {
    this->initializeModel();
}

OAICatalogObjectType::~OAICatalogObjectType() {}

void OAICatalogObjectType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICatalogObjectType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICatalogObjectType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ITEM", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::ITEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::IMAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CATEGORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::CATEGORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_VARIATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::ITEM_VARIATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAX", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::TAX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISCOUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::DISCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MODIFIER_LIST", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::MODIFIER_LIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MODIFIER", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::MODIFIER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PRICING_RULE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::PRICING_RULE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PRODUCT_SET", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::PRODUCT_SET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIME_PERIOD", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::TIME_PERIOD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEASUREMENT_UNIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::MEASUREMENT_UNIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBSCRIPTION_PLAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::SUBSCRIPTION_PLAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_OPTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::ITEM_OPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_OPTION_VAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::ITEM_OPTION_VAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOM_ATTRIBUTE_DEFINITION", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::CUSTOM_ATTRIBUTE_DEFINITION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUICK_AMOUNTS_SETTINGS", Qt::CaseInsensitive) == 0) {
        m_value = eOAICatalogObjectType::QUICK_AMOUNTS_SETTINGS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICatalogObjectType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICatalogObjectType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICatalogObjectType::ITEM:
            val = "ITEM";
            break;
        case eOAICatalogObjectType::IMAGE:
            val = "IMAGE";
            break;
        case eOAICatalogObjectType::CATEGORY:
            val = "CATEGORY";
            break;
        case eOAICatalogObjectType::ITEM_VARIATION:
            val = "ITEM_VARIATION";
            break;
        case eOAICatalogObjectType::TAX:
            val = "TAX";
            break;
        case eOAICatalogObjectType::DISCOUNT:
            val = "DISCOUNT";
            break;
        case eOAICatalogObjectType::MODIFIER_LIST:
            val = "MODIFIER_LIST";
            break;
        case eOAICatalogObjectType::MODIFIER:
            val = "MODIFIER";
            break;
        case eOAICatalogObjectType::PRICING_RULE:
            val = "PRICING_RULE";
            break;
        case eOAICatalogObjectType::PRODUCT_SET:
            val = "PRODUCT_SET";
            break;
        case eOAICatalogObjectType::TIME_PERIOD:
            val = "TIME_PERIOD";
            break;
        case eOAICatalogObjectType::MEASUREMENT_UNIT:
            val = "MEASUREMENT_UNIT";
            break;
        case eOAICatalogObjectType::SUBSCRIPTION_PLAN:
            val = "SUBSCRIPTION_PLAN";
            break;
        case eOAICatalogObjectType::ITEM_OPTION:
            val = "ITEM_OPTION";
            break;
        case eOAICatalogObjectType::ITEM_OPTION_VAL:
            val = "ITEM_OPTION_VAL";
            break;
        case eOAICatalogObjectType::CUSTOM_ATTRIBUTE_DEFINITION:
            val = "CUSTOM_ATTRIBUTE_DEFINITION";
            break;
        case eOAICatalogObjectType::QUICK_AMOUNTS_SETTINGS:
            val = "QUICK_AMOUNTS_SETTINGS";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICatalogObjectType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICatalogObjectType::eOAICatalogObjectType OAICatalogObjectType::getValue() const {
    return m_value;
}

void OAICatalogObjectType::setValue(const OAICatalogObjectType::eOAICatalogObjectType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICatalogObjectType::isSet() const {
    
    return m_value_isSet;
}

bool OAICatalogObjectType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
