/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceCode::OAIDeviceCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceCode::OAIDeviceCode() {
    this->initializeModel();
}

OAIDeviceCode::~OAIDeviceCode() {}

void OAIDeviceCode::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pair_by_isSet = false;
    m_pair_by_isValid = false;

    m_paired_at_isSet = false;
    m_paired_at_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_changed_at_isSet = false;
    m_status_changed_at_isValid = false;
}

void OAIDeviceCode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceCode::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("device_id")]);
    m_device_id_isSet = !json[QString("device_id")].isNull() && m_device_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pair_by_isValid = ::OpenAPI::fromJsonValue(m_pair_by, json[QString("pair_by")]);
    m_pair_by_isSet = !json[QString("pair_by")].isNull() && m_pair_by_isValid;

    m_paired_at_isValid = ::OpenAPI::fromJsonValue(m_paired_at, json[QString("paired_at")]);
    m_paired_at_isSet = !json[QString("paired_at")].isNull() && m_paired_at_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("product_type")]);
    m_product_type_isSet = !json[QString("product_type")].isNull() && m_product_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_changed_at_isValid = ::OpenAPI::fromJsonValue(m_status_changed_at, json[QString("status_changed_at")]);
    m_status_changed_at_isSet = !json[QString("status_changed_at")].isNull() && m_status_changed_at_isValid;
}

QString OAIDeviceCode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceCode::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("device_id"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pair_by_isSet) {
        obj.insert(QString("pair_by"), ::OpenAPI::toJsonValue(m_pair_by));
    }
    if (m_paired_at_isSet) {
        obj.insert(QString("paired_at"), ::OpenAPI::toJsonValue(m_paired_at));
    }
    if (m_product_type_isSet) {
        obj.insert(QString("product_type"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_changed_at_isSet) {
        obj.insert(QString("status_changed_at"), ::OpenAPI::toJsonValue(m_status_changed_at));
    }
    return obj;
}

QString OAIDeviceCode::getCode() const {
    return m_code;
}
void OAIDeviceCode::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIDeviceCode::is_code_Set() const{
    return m_code_isSet;
}

bool OAIDeviceCode::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIDeviceCode::getCreatedAt() const {
    return m_created_at;
}
void OAIDeviceCode::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDeviceCode::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDeviceCode::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDeviceCode::getDeviceId() const {
    return m_device_id;
}
void OAIDeviceCode::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIDeviceCode::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIDeviceCode::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIDeviceCode::getId() const {
    return m_id;
}
void OAIDeviceCode::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeviceCode::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeviceCode::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeviceCode::getLocationId() const {
    return m_location_id;
}
void OAIDeviceCode::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIDeviceCode::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIDeviceCode::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIDeviceCode::getName() const {
    return m_name;
}
void OAIDeviceCode::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeviceCode::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeviceCode::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDeviceCode::getPairBy() const {
    return m_pair_by;
}
void OAIDeviceCode::setPairBy(const QString &pair_by) {
    m_pair_by = pair_by;
    m_pair_by_isSet = true;
}

bool OAIDeviceCode::is_pair_by_Set() const{
    return m_pair_by_isSet;
}

bool OAIDeviceCode::is_pair_by_Valid() const{
    return m_pair_by_isValid;
}

QString OAIDeviceCode::getPairedAt() const {
    return m_paired_at;
}
void OAIDeviceCode::setPairedAt(const QString &paired_at) {
    m_paired_at = paired_at;
    m_paired_at_isSet = true;
}

bool OAIDeviceCode::is_paired_at_Set() const{
    return m_paired_at_isSet;
}

bool OAIDeviceCode::is_paired_at_Valid() const{
    return m_paired_at_isValid;
}

QString OAIDeviceCode::getProductType() const {
    return m_product_type;
}
void OAIDeviceCode::setProductType(const QString &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAIDeviceCode::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAIDeviceCode::is_product_type_Valid() const{
    return m_product_type_isValid;
}

QString OAIDeviceCode::getStatus() const {
    return m_status;
}
void OAIDeviceCode::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeviceCode::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeviceCode::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDeviceCode::getStatusChangedAt() const {
    return m_status_changed_at;
}
void OAIDeviceCode::setStatusChangedAt(const QString &status_changed_at) {
    m_status_changed_at = status_changed_at;
    m_status_changed_at_isSet = true;
}

bool OAIDeviceCode::is_status_changed_at_Set() const{
    return m_status_changed_at_isSet;
}

bool OAIDeviceCode::is_status_changed_at_Valid() const{
    return m_status_changed_at_isValid;
}

bool OAIDeviceCode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pair_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paired_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_changed_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_product_type_isValid && true;
}

} // namespace OpenAPI
