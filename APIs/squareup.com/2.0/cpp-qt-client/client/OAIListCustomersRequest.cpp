/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCustomersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCustomersRequest::OAIListCustomersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCustomersRequest::OAIListCustomersRequest() {
    this->initializeModel();
}

OAIListCustomersRequest::~OAIListCustomersRequest() {}

void OAIListCustomersRequest::initializeModel() {

    m_cursor_isSet = false;
    m_cursor_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_sort_field_isSet = false;
    m_sort_field_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIListCustomersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCustomersRequest::fromJsonObject(QJsonObject json) {

    m_cursor_isValid = ::OpenAPI::fromJsonValue(m_cursor, json[QString("cursor")]);
    m_cursor_isSet = !json[QString("cursor")].isNull() && m_cursor_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_sort_field_isValid = ::OpenAPI::fromJsonValue(m_sort_field, json[QString("sort_field")]);
    m_sort_field_isSet = !json[QString("sort_field")].isNull() && m_sort_field_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;
}

QString OAIListCustomersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCustomersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cursor_isSet) {
        obj.insert(QString("cursor"), ::OpenAPI::toJsonValue(m_cursor));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_sort_field_isSet) {
        obj.insert(QString("sort_field"), ::OpenAPI::toJsonValue(m_sort_field));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

QString OAIListCustomersRequest::getCursor() const {
    return m_cursor;
}
void OAIListCustomersRequest::setCursor(const QString &cursor) {
    m_cursor = cursor;
    m_cursor_isSet = true;
}

bool OAIListCustomersRequest::is_cursor_Set() const{
    return m_cursor_isSet;
}

bool OAIListCustomersRequest::is_cursor_Valid() const{
    return m_cursor_isValid;
}

qint32 OAIListCustomersRequest::getLimit() const {
    return m_limit;
}
void OAIListCustomersRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIListCustomersRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIListCustomersRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIListCustomersRequest::getSortField() const {
    return m_sort_field;
}
void OAIListCustomersRequest::setSortField(const QString &sort_field) {
    m_sort_field = sort_field;
    m_sort_field_isSet = true;
}

bool OAIListCustomersRequest::is_sort_field_Set() const{
    return m_sort_field_isSet;
}

bool OAIListCustomersRequest::is_sort_field_Valid() const{
    return m_sort_field_isValid;
}

QString OAIListCustomersRequest::getSortOrder() const {
    return m_sort_order;
}
void OAIListCustomersRequest::setSortOrder(const QString &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListCustomersRequest::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListCustomersRequest::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIListCustomersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCustomersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
