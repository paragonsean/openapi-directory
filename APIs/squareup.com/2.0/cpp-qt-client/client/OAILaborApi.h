/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILaborApi_H
#define OAI_OAILaborApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateBreakTypeRequest.h"
#include "OAICreateBreakTypeResponse.h"
#include "OAICreateShiftRequest.h"
#include "OAICreateShiftResponse.h"
#include "OAIDeleteBreakTypeResponse.h"
#include "OAIDeleteShiftResponse.h"
#include "OAIGetBreakTypeResponse.h"
#include "OAIGetEmployeeWageResponse.h"
#include "OAIGetShiftResponse.h"
#include "OAIGetTeamMemberWageResponse.h"
#include "OAIListBreakTypesResponse.h"
#include "OAIListEmployeeWagesResponse.h"
#include "OAIListTeamMemberWagesResponse.h"
#include "OAIListWorkweekConfigsResponse.h"
#include "OAISearchShiftsRequest.h"
#include "OAISearchShiftsResponse.h"
#include "OAIUpdateBreakTypeRequest.h"
#include "OAIUpdateBreakTypeResponse.h"
#include "OAIUpdateShiftRequest.h"
#include "OAIUpdateShiftResponse.h"
#include "OAIUpdateWorkweekConfigRequest.h"
#include "OAIUpdateWorkweekConfigResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILaborApi : public QObject {
    Q_OBJECT

public:
    OAILaborApi(const int timeOut = 0);
    ~OAILaborApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_break_type_request OAICreateBreakTypeRequest [required]
    */
    virtual void createBreakType(const OAICreateBreakTypeRequest &oai_create_break_type_request);

    /**
    * @param[in]  oai_create_shift_request OAICreateShiftRequest [required]
    */
    virtual void createShift(const OAICreateShiftRequest &oai_create_shift_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteBreakType(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteShift(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getBreakType(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getEmployeeWage(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getShift(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getTeamMemberWage(const QString &id);

    /**
    * @param[in]  location_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void listBreakTypes(const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employee_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void listEmployeeWages(const ::OpenAPI::OptionalParam<QString> &employee_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_member_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void listTeamMemberWages(const ::OpenAPI::OptionalParam<QString> &team_member_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void listWorkweekConfigs(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_search_shifts_request OAISearchShiftsRequest [required]
    */
    virtual void searchShifts(const OAISearchShiftsRequest &oai_search_shifts_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_break_type_request OAIUpdateBreakTypeRequest [required]
    */
    virtual void updateBreakType(const QString &id, const OAIUpdateBreakTypeRequest &oai_update_break_type_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_shift_request OAIUpdateShiftRequest [required]
    */
    virtual void updateShift(const QString &id, const OAIUpdateShiftRequest &oai_update_shift_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_workweek_config_request OAIUpdateWorkweekConfigRequest [required]
    */
    virtual void updateWorkweekConfig(const QString &id, const OAIUpdateWorkweekConfigRequest &oai_update_workweek_config_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createBreakTypeCallback(OAIHttpRequestWorker *worker);
    void createShiftCallback(OAIHttpRequestWorker *worker);
    void deleteBreakTypeCallback(OAIHttpRequestWorker *worker);
    void deleteShiftCallback(OAIHttpRequestWorker *worker);
    void getBreakTypeCallback(OAIHttpRequestWorker *worker);
    void getEmployeeWageCallback(OAIHttpRequestWorker *worker);
    void getShiftCallback(OAIHttpRequestWorker *worker);
    void getTeamMemberWageCallback(OAIHttpRequestWorker *worker);
    void listBreakTypesCallback(OAIHttpRequestWorker *worker);
    void listEmployeeWagesCallback(OAIHttpRequestWorker *worker);
    void listTeamMemberWagesCallback(OAIHttpRequestWorker *worker);
    void listWorkweekConfigsCallback(OAIHttpRequestWorker *worker);
    void searchShiftsCallback(OAIHttpRequestWorker *worker);
    void updateBreakTypeCallback(OAIHttpRequestWorker *worker);
    void updateShiftCallback(OAIHttpRequestWorker *worker);
    void updateWorkweekConfigCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createBreakTypeSignal(OAICreateBreakTypeResponse summary);
    void createShiftSignal(OAICreateShiftResponse summary);
    void deleteBreakTypeSignal(OAIDeleteBreakTypeResponse summary);
    void deleteShiftSignal(OAIDeleteShiftResponse summary);
    void getBreakTypeSignal(OAIGetBreakTypeResponse summary);
    void getEmployeeWageSignal(OAIGetEmployeeWageResponse summary);
    void getShiftSignal(OAIGetShiftResponse summary);
    void getTeamMemberWageSignal(OAIGetTeamMemberWageResponse summary);
    void listBreakTypesSignal(OAIListBreakTypesResponse summary);
    void listEmployeeWagesSignal(OAIListEmployeeWagesResponse summary);
    void listTeamMemberWagesSignal(OAIListTeamMemberWagesResponse summary);
    void listWorkweekConfigsSignal(OAIListWorkweekConfigsResponse summary);
    void searchShiftsSignal(OAISearchShiftsResponse summary);
    void updateBreakTypeSignal(OAIUpdateBreakTypeResponse summary);
    void updateShiftSignal(OAIUpdateShiftResponse summary);
    void updateWorkweekConfigSignal(OAIUpdateWorkweekConfigResponse summary);


    void createBreakTypeSignalFull(OAIHttpRequestWorker *worker, OAICreateBreakTypeResponse summary);
    void createShiftSignalFull(OAIHttpRequestWorker *worker, OAICreateShiftResponse summary);
    void deleteBreakTypeSignalFull(OAIHttpRequestWorker *worker, OAIDeleteBreakTypeResponse summary);
    void deleteShiftSignalFull(OAIHttpRequestWorker *worker, OAIDeleteShiftResponse summary);
    void getBreakTypeSignalFull(OAIHttpRequestWorker *worker, OAIGetBreakTypeResponse summary);
    void getEmployeeWageSignalFull(OAIHttpRequestWorker *worker, OAIGetEmployeeWageResponse summary);
    void getShiftSignalFull(OAIHttpRequestWorker *worker, OAIGetShiftResponse summary);
    void getTeamMemberWageSignalFull(OAIHttpRequestWorker *worker, OAIGetTeamMemberWageResponse summary);
    void listBreakTypesSignalFull(OAIHttpRequestWorker *worker, OAIListBreakTypesResponse summary);
    void listEmployeeWagesSignalFull(OAIHttpRequestWorker *worker, OAIListEmployeeWagesResponse summary);
    void listTeamMemberWagesSignalFull(OAIHttpRequestWorker *worker, OAIListTeamMemberWagesResponse summary);
    void listWorkweekConfigsSignalFull(OAIHttpRequestWorker *worker, OAIListWorkweekConfigsResponse summary);
    void searchShiftsSignalFull(OAIHttpRequestWorker *worker, OAISearchShiftsResponse summary);
    void updateBreakTypeSignalFull(OAIHttpRequestWorker *worker, OAIUpdateBreakTypeResponse summary);
    void updateShiftSignalFull(OAIHttpRequestWorker *worker, OAIUpdateShiftResponse summary);
    void updateWorkweekConfigSignalFull(OAIHttpRequestWorker *worker, OAIUpdateWorkweekConfigResponse summary);

    Q_DECL_DEPRECATED_X("Use createBreakTypeSignalError() instead")
    void createBreakTypeSignalE(OAICreateBreakTypeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBreakTypeSignalError(OAICreateBreakTypeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createShiftSignalError() instead")
    void createShiftSignalE(OAICreateShiftResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createShiftSignalError(OAICreateShiftResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBreakTypeSignalError() instead")
    void deleteBreakTypeSignalE(OAIDeleteBreakTypeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBreakTypeSignalError(OAIDeleteBreakTypeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteShiftSignalError() instead")
    void deleteShiftSignalE(OAIDeleteShiftResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteShiftSignalError(OAIDeleteShiftResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBreakTypeSignalError() instead")
    void getBreakTypeSignalE(OAIGetBreakTypeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBreakTypeSignalError(OAIGetBreakTypeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeWageSignalError() instead")
    void getEmployeeWageSignalE(OAIGetEmployeeWageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeWageSignalError(OAIGetEmployeeWageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShiftSignalError() instead")
    void getShiftSignalE(OAIGetShiftResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getShiftSignalError(OAIGetShiftResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMemberWageSignalError() instead")
    void getTeamMemberWageSignalE(OAIGetTeamMemberWageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMemberWageSignalError(OAIGetTeamMemberWageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBreakTypesSignalError() instead")
    void listBreakTypesSignalE(OAIListBreakTypesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBreakTypesSignalError(OAIListBreakTypesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEmployeeWagesSignalError() instead")
    void listEmployeeWagesSignalE(OAIListEmployeeWagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEmployeeWagesSignalError(OAIListEmployeeWagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTeamMemberWagesSignalError() instead")
    void listTeamMemberWagesSignalE(OAIListTeamMemberWagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTeamMemberWagesSignalError(OAIListTeamMemberWagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWorkweekConfigsSignalError() instead")
    void listWorkweekConfigsSignalE(OAIListWorkweekConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listWorkweekConfigsSignalError(OAIListWorkweekConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchShiftsSignalError() instead")
    void searchShiftsSignalE(OAISearchShiftsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchShiftsSignalError(OAISearchShiftsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBreakTypeSignalError() instead")
    void updateBreakTypeSignalE(OAIUpdateBreakTypeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBreakTypeSignalError(OAIUpdateBreakTypeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateShiftSignalError() instead")
    void updateShiftSignalE(OAIUpdateShiftResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateShiftSignalError(OAIUpdateShiftResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkweekConfigSignalError() instead")
    void updateWorkweekConfigSignalE(OAIUpdateWorkweekConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkweekConfigSignalError(OAIUpdateWorkweekConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createBreakTypeSignalErrorFull() instead")
    void createBreakTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBreakTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createShiftSignalErrorFull() instead")
    void createShiftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createShiftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBreakTypeSignalErrorFull() instead")
    void deleteBreakTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBreakTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteShiftSignalErrorFull() instead")
    void deleteShiftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteShiftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBreakTypeSignalErrorFull() instead")
    void getBreakTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBreakTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeWageSignalErrorFull() instead")
    void getEmployeeWageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeWageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShiftSignalErrorFull() instead")
    void getShiftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getShiftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMemberWageSignalErrorFull() instead")
    void getTeamMemberWageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMemberWageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBreakTypesSignalErrorFull() instead")
    void listBreakTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBreakTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEmployeeWagesSignalErrorFull() instead")
    void listEmployeeWagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEmployeeWagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTeamMemberWagesSignalErrorFull() instead")
    void listTeamMemberWagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTeamMemberWagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWorkweekConfigsSignalErrorFull() instead")
    void listWorkweekConfigsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listWorkweekConfigsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchShiftsSignalErrorFull() instead")
    void searchShiftsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchShiftsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBreakTypeSignalErrorFull() instead")
    void updateBreakTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBreakTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateShiftSignalErrorFull() instead")
    void updateShiftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateShiftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkweekConfigSignalErrorFull() instead")
    void updateWorkweekConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkweekConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
