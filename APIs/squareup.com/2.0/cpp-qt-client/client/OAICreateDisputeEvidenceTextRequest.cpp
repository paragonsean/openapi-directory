/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDisputeEvidenceTextRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDisputeEvidenceTextRequest::OAICreateDisputeEvidenceTextRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDisputeEvidenceTextRequest::OAICreateDisputeEvidenceTextRequest() {
    this->initializeModel();
}

OAICreateDisputeEvidenceTextRequest::~OAICreateDisputeEvidenceTextRequest() {}

void OAICreateDisputeEvidenceTextRequest::initializeModel() {

    m_evidence_text_isSet = false;
    m_evidence_text_isValid = false;

    m_evidence_type_isSet = false;
    m_evidence_type_isValid = false;

    m_idempotency_key_isSet = false;
    m_idempotency_key_isValid = false;
}

void OAICreateDisputeEvidenceTextRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDisputeEvidenceTextRequest::fromJsonObject(QJsonObject json) {

    m_evidence_text_isValid = ::OpenAPI::fromJsonValue(m_evidence_text, json[QString("evidence_text")]);
    m_evidence_text_isSet = !json[QString("evidence_text")].isNull() && m_evidence_text_isValid;

    m_evidence_type_isValid = ::OpenAPI::fromJsonValue(m_evidence_type, json[QString("evidence_type")]);
    m_evidence_type_isSet = !json[QString("evidence_type")].isNull() && m_evidence_type_isValid;

    m_idempotency_key_isValid = ::OpenAPI::fromJsonValue(m_idempotency_key, json[QString("idempotency_key")]);
    m_idempotency_key_isSet = !json[QString("idempotency_key")].isNull() && m_idempotency_key_isValid;
}

QString OAICreateDisputeEvidenceTextRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDisputeEvidenceTextRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_evidence_text_isSet) {
        obj.insert(QString("evidence_text"), ::OpenAPI::toJsonValue(m_evidence_text));
    }
    if (m_evidence_type_isSet) {
        obj.insert(QString("evidence_type"), ::OpenAPI::toJsonValue(m_evidence_type));
    }
    if (m_idempotency_key_isSet) {
        obj.insert(QString("idempotency_key"), ::OpenAPI::toJsonValue(m_idempotency_key));
    }
    return obj;
}

QString OAICreateDisputeEvidenceTextRequest::getEvidenceText() const {
    return m_evidence_text;
}
void OAICreateDisputeEvidenceTextRequest::setEvidenceText(const QString &evidence_text) {
    m_evidence_text = evidence_text;
    m_evidence_text_isSet = true;
}

bool OAICreateDisputeEvidenceTextRequest::is_evidence_text_Set() const{
    return m_evidence_text_isSet;
}

bool OAICreateDisputeEvidenceTextRequest::is_evidence_text_Valid() const{
    return m_evidence_text_isValid;
}

QString OAICreateDisputeEvidenceTextRequest::getEvidenceType() const {
    return m_evidence_type;
}
void OAICreateDisputeEvidenceTextRequest::setEvidenceType(const QString &evidence_type) {
    m_evidence_type = evidence_type;
    m_evidence_type_isSet = true;
}

bool OAICreateDisputeEvidenceTextRequest::is_evidence_type_Set() const{
    return m_evidence_type_isSet;
}

bool OAICreateDisputeEvidenceTextRequest::is_evidence_type_Valid() const{
    return m_evidence_type_isValid;
}

QString OAICreateDisputeEvidenceTextRequest::getIdempotencyKey() const {
    return m_idempotency_key;
}
void OAICreateDisputeEvidenceTextRequest::setIdempotencyKey(const QString &idempotency_key) {
    m_idempotency_key = idempotency_key;
    m_idempotency_key_isSet = true;
}

bool OAICreateDisputeEvidenceTextRequest::is_idempotency_key_Set() const{
    return m_idempotency_key_isSet;
}

bool OAICreateDisputeEvidenceTextRequest::is_idempotency_key_Valid() const{
    return m_idempotency_key_isValid;
}

bool OAICreateDisputeEvidenceTextRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evidence_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDisputeEvidenceTextRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_evidence_text_isValid && m_idempotency_key_isValid && true;
}

} // namespace OpenAPI
