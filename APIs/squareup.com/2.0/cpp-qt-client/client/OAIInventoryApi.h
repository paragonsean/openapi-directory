/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInventoryApi_H
#define OAI_OAIInventoryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchChangeInventoryRequest.h"
#include "OAIBatchChangeInventoryResponse.h"
#include "OAIBatchRetrieveInventoryChangesRequest.h"
#include "OAIBatchRetrieveInventoryChangesResponse.h"
#include "OAIBatchRetrieveInventoryCountsRequest.h"
#include "OAIBatchRetrieveInventoryCountsResponse.h"
#include "OAIRetrieveInventoryAdjustmentResponse.h"
#include "OAIRetrieveInventoryChangesResponse.h"
#include "OAIRetrieveInventoryCountResponse.h"
#include "OAIRetrieveInventoryPhysicalCountResponse.h"
#include "OAIRetrieveInventoryTransferResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInventoryApi : public QObject {
    Q_OBJECT

public:
    OAIInventoryApi(const int timeOut = 0);
    ~OAIInventoryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_batch_change_inventory_request OAIBatchChangeInventoryRequest [required]
    */
    virtual void batchChangeInventory(const OAIBatchChangeInventoryRequest &oai_batch_change_inventory_request);

    /**
    * @param[in]  oai_batch_retrieve_inventory_changes_request OAIBatchRetrieveInventoryChangesRequest [required]
    */
    virtual void batchRetrieveInventoryChanges(const OAIBatchRetrieveInventoryChangesRequest &oai_batch_retrieve_inventory_changes_request);

    /**
    * @param[in]  oai_batch_retrieve_inventory_counts_request OAIBatchRetrieveInventoryCountsRequest [required]
    */
    virtual void batchRetrieveInventoryCounts(const OAIBatchRetrieveInventoryCountsRequest &oai_batch_retrieve_inventory_counts_request);

    /**
    * @param[in]  oai_batch_change_inventory_request OAIBatchChangeInventoryRequest [required]
    */
    virtual void deprecatedBatchChangeInventory(const OAIBatchChangeInventoryRequest &oai_batch_change_inventory_request);

    /**
    * @param[in]  oai_batch_retrieve_inventory_changes_request OAIBatchRetrieveInventoryChangesRequest [required]
    */
    virtual void deprecatedBatchRetrieveInventoryChanges(const OAIBatchRetrieveInventoryChangesRequest &oai_batch_retrieve_inventory_changes_request);

    /**
    * @param[in]  oai_batch_retrieve_inventory_counts_request OAIBatchRetrieveInventoryCountsRequest [required]
    */
    virtual void deprecatedBatchRetrieveInventoryCounts(const OAIBatchRetrieveInventoryCountsRequest &oai_batch_retrieve_inventory_counts_request);

    /**
    * @param[in]  adjustment_id QString [required]
    */
    virtual void deprecatedRetrieveInventoryAdjustment(const QString &adjustment_id);

    /**
    * @param[in]  physical_count_id QString [required]
    */
    virtual void deprecatedRetrieveInventoryPhysicalCount(const QString &physical_count_id);

    /**
    * @param[in]  adjustment_id QString [required]
    */
    virtual void retrieveInventoryAdjustment(const QString &adjustment_id);

    /**
    * @param[in]  catalog_object_id QString [required]
    * @param[in]  location_ids QString [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void retrieveInventoryChanges(const QString &catalog_object_id, const ::OpenAPI::OptionalParam<QString> &location_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  catalog_object_id QString [required]
    * @param[in]  location_ids QString [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void retrieveInventoryCount(const QString &catalog_object_id, const ::OpenAPI::OptionalParam<QString> &location_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  physical_count_id QString [required]
    */
    virtual void retrieveInventoryPhysicalCount(const QString &physical_count_id);

    /**
    * @param[in]  transfer_id QString [required]
    */
    virtual void retrieveInventoryTransfer(const QString &transfer_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void batchChangeInventoryCallback(OAIHttpRequestWorker *worker);
    void batchRetrieveInventoryChangesCallback(OAIHttpRequestWorker *worker);
    void batchRetrieveInventoryCountsCallback(OAIHttpRequestWorker *worker);
    void deprecatedBatchChangeInventoryCallback(OAIHttpRequestWorker *worker);
    void deprecatedBatchRetrieveInventoryChangesCallback(OAIHttpRequestWorker *worker);
    void deprecatedBatchRetrieveInventoryCountsCallback(OAIHttpRequestWorker *worker);
    void deprecatedRetrieveInventoryAdjustmentCallback(OAIHttpRequestWorker *worker);
    void deprecatedRetrieveInventoryPhysicalCountCallback(OAIHttpRequestWorker *worker);
    void retrieveInventoryAdjustmentCallback(OAIHttpRequestWorker *worker);
    void retrieveInventoryChangesCallback(OAIHttpRequestWorker *worker);
    void retrieveInventoryCountCallback(OAIHttpRequestWorker *worker);
    void retrieveInventoryPhysicalCountCallback(OAIHttpRequestWorker *worker);
    void retrieveInventoryTransferCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void batchChangeInventorySignal(OAIBatchChangeInventoryResponse summary);
    void batchRetrieveInventoryChangesSignal(OAIBatchRetrieveInventoryChangesResponse summary);
    void batchRetrieveInventoryCountsSignal(OAIBatchRetrieveInventoryCountsResponse summary);
    void deprecatedBatchChangeInventorySignal(OAIBatchChangeInventoryResponse summary);
    void deprecatedBatchRetrieveInventoryChangesSignal(OAIBatchRetrieveInventoryChangesResponse summary);
    void deprecatedBatchRetrieveInventoryCountsSignal(OAIBatchRetrieveInventoryCountsResponse summary);
    void deprecatedRetrieveInventoryAdjustmentSignal(OAIRetrieveInventoryAdjustmentResponse summary);
    void deprecatedRetrieveInventoryPhysicalCountSignal(OAIRetrieveInventoryPhysicalCountResponse summary);
    void retrieveInventoryAdjustmentSignal(OAIRetrieveInventoryAdjustmentResponse summary);
    void retrieveInventoryChangesSignal(OAIRetrieveInventoryChangesResponse summary);
    void retrieveInventoryCountSignal(OAIRetrieveInventoryCountResponse summary);
    void retrieveInventoryPhysicalCountSignal(OAIRetrieveInventoryPhysicalCountResponse summary);
    void retrieveInventoryTransferSignal(OAIRetrieveInventoryTransferResponse summary);


    void batchChangeInventorySignalFull(OAIHttpRequestWorker *worker, OAIBatchChangeInventoryResponse summary);
    void batchRetrieveInventoryChangesSignalFull(OAIHttpRequestWorker *worker, OAIBatchRetrieveInventoryChangesResponse summary);
    void batchRetrieveInventoryCountsSignalFull(OAIHttpRequestWorker *worker, OAIBatchRetrieveInventoryCountsResponse summary);
    void deprecatedBatchChangeInventorySignalFull(OAIHttpRequestWorker *worker, OAIBatchChangeInventoryResponse summary);
    void deprecatedBatchRetrieveInventoryChangesSignalFull(OAIHttpRequestWorker *worker, OAIBatchRetrieveInventoryChangesResponse summary);
    void deprecatedBatchRetrieveInventoryCountsSignalFull(OAIHttpRequestWorker *worker, OAIBatchRetrieveInventoryCountsResponse summary);
    void deprecatedRetrieveInventoryAdjustmentSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveInventoryAdjustmentResponse summary);
    void deprecatedRetrieveInventoryPhysicalCountSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveInventoryPhysicalCountResponse summary);
    void retrieveInventoryAdjustmentSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveInventoryAdjustmentResponse summary);
    void retrieveInventoryChangesSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveInventoryChangesResponse summary);
    void retrieveInventoryCountSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveInventoryCountResponse summary);
    void retrieveInventoryPhysicalCountSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveInventoryPhysicalCountResponse summary);
    void retrieveInventoryTransferSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveInventoryTransferResponse summary);

    Q_DECL_DEPRECATED_X("Use batchChangeInventorySignalError() instead")
    void batchChangeInventorySignalE(OAIBatchChangeInventoryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchChangeInventorySignalError(OAIBatchChangeInventoryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchRetrieveInventoryChangesSignalError() instead")
    void batchRetrieveInventoryChangesSignalE(OAIBatchRetrieveInventoryChangesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchRetrieveInventoryChangesSignalError(OAIBatchRetrieveInventoryChangesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchRetrieveInventoryCountsSignalError() instead")
    void batchRetrieveInventoryCountsSignalE(OAIBatchRetrieveInventoryCountsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchRetrieveInventoryCountsSignalError(OAIBatchRetrieveInventoryCountsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deprecatedBatchChangeInventorySignalError() instead")
    void deprecatedBatchChangeInventorySignalE(OAIBatchChangeInventoryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deprecatedBatchChangeInventorySignalError(OAIBatchChangeInventoryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deprecatedBatchRetrieveInventoryChangesSignalError() instead")
    void deprecatedBatchRetrieveInventoryChangesSignalE(OAIBatchRetrieveInventoryChangesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deprecatedBatchRetrieveInventoryChangesSignalError(OAIBatchRetrieveInventoryChangesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deprecatedBatchRetrieveInventoryCountsSignalError() instead")
    void deprecatedBatchRetrieveInventoryCountsSignalE(OAIBatchRetrieveInventoryCountsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deprecatedBatchRetrieveInventoryCountsSignalError(OAIBatchRetrieveInventoryCountsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deprecatedRetrieveInventoryAdjustmentSignalError() instead")
    void deprecatedRetrieveInventoryAdjustmentSignalE(OAIRetrieveInventoryAdjustmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deprecatedRetrieveInventoryAdjustmentSignalError(OAIRetrieveInventoryAdjustmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deprecatedRetrieveInventoryPhysicalCountSignalError() instead")
    void deprecatedRetrieveInventoryPhysicalCountSignalE(OAIRetrieveInventoryPhysicalCountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deprecatedRetrieveInventoryPhysicalCountSignalError(OAIRetrieveInventoryPhysicalCountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveInventoryAdjustmentSignalError() instead")
    void retrieveInventoryAdjustmentSignalE(OAIRetrieveInventoryAdjustmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveInventoryAdjustmentSignalError(OAIRetrieveInventoryAdjustmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveInventoryChangesSignalError() instead")
    void retrieveInventoryChangesSignalE(OAIRetrieveInventoryChangesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveInventoryChangesSignalError(OAIRetrieveInventoryChangesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveInventoryCountSignalError() instead")
    void retrieveInventoryCountSignalE(OAIRetrieveInventoryCountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveInventoryCountSignalError(OAIRetrieveInventoryCountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveInventoryPhysicalCountSignalError() instead")
    void retrieveInventoryPhysicalCountSignalE(OAIRetrieveInventoryPhysicalCountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveInventoryPhysicalCountSignalError(OAIRetrieveInventoryPhysicalCountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveInventoryTransferSignalError() instead")
    void retrieveInventoryTransferSignalE(OAIRetrieveInventoryTransferResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveInventoryTransferSignalError(OAIRetrieveInventoryTransferResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use batchChangeInventorySignalErrorFull() instead")
    void batchChangeInventorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchChangeInventorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchRetrieveInventoryChangesSignalErrorFull() instead")
    void batchRetrieveInventoryChangesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchRetrieveInventoryChangesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchRetrieveInventoryCountsSignalErrorFull() instead")
    void batchRetrieveInventoryCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchRetrieveInventoryCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deprecatedBatchChangeInventorySignalErrorFull() instead")
    void deprecatedBatchChangeInventorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deprecatedBatchChangeInventorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deprecatedBatchRetrieveInventoryChangesSignalErrorFull() instead")
    void deprecatedBatchRetrieveInventoryChangesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deprecatedBatchRetrieveInventoryChangesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deprecatedBatchRetrieveInventoryCountsSignalErrorFull() instead")
    void deprecatedBatchRetrieveInventoryCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deprecatedBatchRetrieveInventoryCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deprecatedRetrieveInventoryAdjustmentSignalErrorFull() instead")
    void deprecatedRetrieveInventoryAdjustmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deprecatedRetrieveInventoryAdjustmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deprecatedRetrieveInventoryPhysicalCountSignalErrorFull() instead")
    void deprecatedRetrieveInventoryPhysicalCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deprecatedRetrieveInventoryPhysicalCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveInventoryAdjustmentSignalErrorFull() instead")
    void retrieveInventoryAdjustmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveInventoryAdjustmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveInventoryChangesSignalErrorFull() instead")
    void retrieveInventoryChangesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveInventoryChangesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveInventoryCountSignalErrorFull() instead")
    void retrieveInventoryCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveInventoryCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveInventoryPhysicalCountSignalErrorFull() instead")
    void retrieveInventoryPhysicalCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveInventoryPhysicalCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveInventoryTransferSignalErrorFull() instead")
    void retrieveInventoryTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveInventoryTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
