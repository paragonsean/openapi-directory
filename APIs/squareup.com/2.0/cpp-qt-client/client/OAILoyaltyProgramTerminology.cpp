/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyProgramTerminology.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyProgramTerminology::OAILoyaltyProgramTerminology(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyProgramTerminology::OAILoyaltyProgramTerminology() {
    this->initializeModel();
}

OAILoyaltyProgramTerminology::~OAILoyaltyProgramTerminology() {}

void OAILoyaltyProgramTerminology::initializeModel() {

    m_one_isSet = false;
    m_one_isValid = false;

    m_other_isSet = false;
    m_other_isValid = false;
}

void OAILoyaltyProgramTerminology::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyProgramTerminology::fromJsonObject(QJsonObject json) {

    m_one_isValid = ::OpenAPI::fromJsonValue(m_one, json[QString("one")]);
    m_one_isSet = !json[QString("one")].isNull() && m_one_isValid;

    m_other_isValid = ::OpenAPI::fromJsonValue(m_other, json[QString("other")]);
    m_other_isSet = !json[QString("other")].isNull() && m_other_isValid;
}

QString OAILoyaltyProgramTerminology::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyProgramTerminology::asJsonObject() const {
    QJsonObject obj;
    if (m_one_isSet) {
        obj.insert(QString("one"), ::OpenAPI::toJsonValue(m_one));
    }
    if (m_other_isSet) {
        obj.insert(QString("other"), ::OpenAPI::toJsonValue(m_other));
    }
    return obj;
}

QString OAILoyaltyProgramTerminology::getOne() const {
    return m_one;
}
void OAILoyaltyProgramTerminology::setOne(const QString &one) {
    m_one = one;
    m_one_isSet = true;
}

bool OAILoyaltyProgramTerminology::is_one_Set() const{
    return m_one_isSet;
}

bool OAILoyaltyProgramTerminology::is_one_Valid() const{
    return m_one_isValid;
}

QString OAILoyaltyProgramTerminology::getOther() const {
    return m_other;
}
void OAILoyaltyProgramTerminology::setOther(const QString &other) {
    m_other = other;
    m_other_isSet = true;
}

bool OAILoyaltyProgramTerminology::is_other_Set() const{
    return m_other_isSet;
}

bool OAILoyaltyProgramTerminology::is_other_Valid() const{
    return m_other_isValid;
}

bool OAILoyaltyProgramTerminology::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_one_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyProgramTerminology::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_one_isValid && m_other_isValid && true;
}

} // namespace OpenAPI
