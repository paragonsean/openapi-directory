/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCardRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCardRequest::OAICreateCardRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCardRequest::OAICreateCardRequest() {
    this->initializeModel();
}

OAICreateCardRequest::~OAICreateCardRequest() {}

void OAICreateCardRequest::initializeModel() {

    m_card_isSet = false;
    m_card_isValid = false;

    m_idempotency_key_isSet = false;
    m_idempotency_key_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_verification_token_isSet = false;
    m_verification_token_isValid = false;
}

void OAICreateCardRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCardRequest::fromJsonObject(QJsonObject json) {

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_idempotency_key_isValid = ::OpenAPI::fromJsonValue(m_idempotency_key, json[QString("idempotency_key")]);
    m_idempotency_key_isSet = !json[QString("idempotency_key")].isNull() && m_idempotency_key_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_verification_token_isValid = ::OpenAPI::fromJsonValue(m_verification_token, json[QString("verification_token")]);
    m_verification_token_isSet = !json[QString("verification_token")].isNull() && m_verification_token_isValid;
}

QString OAICreateCardRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCardRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_card.isSet()) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_idempotency_key_isSet) {
        obj.insert(QString("idempotency_key"), ::OpenAPI::toJsonValue(m_idempotency_key));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_verification_token_isSet) {
        obj.insert(QString("verification_token"), ::OpenAPI::toJsonValue(m_verification_token));
    }
    return obj;
}

OAICard OAICreateCardRequest::getCard() const {
    return m_card;
}
void OAICreateCardRequest::setCard(const OAICard &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAICreateCardRequest::is_card_Set() const{
    return m_card_isSet;
}

bool OAICreateCardRequest::is_card_Valid() const{
    return m_card_isValid;
}

QString OAICreateCardRequest::getIdempotencyKey() const {
    return m_idempotency_key;
}
void OAICreateCardRequest::setIdempotencyKey(const QString &idempotency_key) {
    m_idempotency_key = idempotency_key;
    m_idempotency_key_isSet = true;
}

bool OAICreateCardRequest::is_idempotency_key_Set() const{
    return m_idempotency_key_isSet;
}

bool OAICreateCardRequest::is_idempotency_key_Valid() const{
    return m_idempotency_key_isValid;
}

QString OAICreateCardRequest::getSourceId() const {
    return m_source_id;
}
void OAICreateCardRequest::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAICreateCardRequest::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAICreateCardRequest::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAICreateCardRequest::getVerificationToken() const {
    return m_verification_token;
}
void OAICreateCardRequest::setVerificationToken(const QString &verification_token) {
    m_verification_token = verification_token;
    m_verification_token_isSet = true;
}

bool OAICreateCardRequest::is_verification_token_Set() const{
    return m_verification_token_isSet;
}

bool OAICreateCardRequest::is_verification_token_Valid() const{
    return m_verification_token_isValid;
}

bool OAICreateCardRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCardRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_card_isValid && m_idempotency_key_isValid && m_source_id_isValid && true;
}

} // namespace OpenAPI
