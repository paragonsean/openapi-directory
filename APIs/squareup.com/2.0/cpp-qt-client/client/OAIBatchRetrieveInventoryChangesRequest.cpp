/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchRetrieveInventoryChangesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchRetrieveInventoryChangesRequest::OAIBatchRetrieveInventoryChangesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchRetrieveInventoryChangesRequest::OAIBatchRetrieveInventoryChangesRequest() {
    this->initializeModel();
}

OAIBatchRetrieveInventoryChangesRequest::~OAIBatchRetrieveInventoryChangesRequest() {}

void OAIBatchRetrieveInventoryChangesRequest::initializeModel() {

    m_catalog_object_ids_isSet = false;
    m_catalog_object_ids_isValid = false;

    m_cursor_isSet = false;
    m_cursor_isValid = false;

    m_location_ids_isSet = false;
    m_location_ids_isValid = false;

    m_states_isSet = false;
    m_states_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;

    m_updated_after_isSet = false;
    m_updated_after_isValid = false;

    m_updated_before_isSet = false;
    m_updated_before_isValid = false;
}

void OAIBatchRetrieveInventoryChangesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchRetrieveInventoryChangesRequest::fromJsonObject(QJsonObject json) {

    m_catalog_object_ids_isValid = ::OpenAPI::fromJsonValue(m_catalog_object_ids, json[QString("catalog_object_ids")]);
    m_catalog_object_ids_isSet = !json[QString("catalog_object_ids")].isNull() && m_catalog_object_ids_isValid;

    m_cursor_isValid = ::OpenAPI::fromJsonValue(m_cursor, json[QString("cursor")]);
    m_cursor_isSet = !json[QString("cursor")].isNull() && m_cursor_isValid;

    m_location_ids_isValid = ::OpenAPI::fromJsonValue(m_location_ids, json[QString("location_ids")]);
    m_location_ids_isSet = !json[QString("location_ids")].isNull() && m_location_ids_isValid;

    m_states_isValid = ::OpenAPI::fromJsonValue(m_states, json[QString("states")]);
    m_states_isSet = !json[QString("states")].isNull() && m_states_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_updated_after_isValid = ::OpenAPI::fromJsonValue(m_updated_after, json[QString("updated_after")]);
    m_updated_after_isSet = !json[QString("updated_after")].isNull() && m_updated_after_isValid;

    m_updated_before_isValid = ::OpenAPI::fromJsonValue(m_updated_before, json[QString("updated_before")]);
    m_updated_before_isSet = !json[QString("updated_before")].isNull() && m_updated_before_isValid;
}

QString OAIBatchRetrieveInventoryChangesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchRetrieveInventoryChangesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_object_ids.size() > 0) {
        obj.insert(QString("catalog_object_ids"), ::OpenAPI::toJsonValue(m_catalog_object_ids));
    }
    if (m_cursor_isSet) {
        obj.insert(QString("cursor"), ::OpenAPI::toJsonValue(m_cursor));
    }
    if (m_location_ids.size() > 0) {
        obj.insert(QString("location_ids"), ::OpenAPI::toJsonValue(m_location_ids));
    }
    if (m_states.size() > 0) {
        obj.insert(QString("states"), ::OpenAPI::toJsonValue(m_states));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_updated_after_isSet) {
        obj.insert(QString("updated_after"), ::OpenAPI::toJsonValue(m_updated_after));
    }
    if (m_updated_before_isSet) {
        obj.insert(QString("updated_before"), ::OpenAPI::toJsonValue(m_updated_before));
    }
    return obj;
}

QList<QString> OAIBatchRetrieveInventoryChangesRequest::getCatalogObjectIds() const {
    return m_catalog_object_ids;
}
void OAIBatchRetrieveInventoryChangesRequest::setCatalogObjectIds(const QList<QString> &catalog_object_ids) {
    m_catalog_object_ids = catalog_object_ids;
    m_catalog_object_ids_isSet = true;
}

bool OAIBatchRetrieveInventoryChangesRequest::is_catalog_object_ids_Set() const{
    return m_catalog_object_ids_isSet;
}

bool OAIBatchRetrieveInventoryChangesRequest::is_catalog_object_ids_Valid() const{
    return m_catalog_object_ids_isValid;
}

QString OAIBatchRetrieveInventoryChangesRequest::getCursor() const {
    return m_cursor;
}
void OAIBatchRetrieveInventoryChangesRequest::setCursor(const QString &cursor) {
    m_cursor = cursor;
    m_cursor_isSet = true;
}

bool OAIBatchRetrieveInventoryChangesRequest::is_cursor_Set() const{
    return m_cursor_isSet;
}

bool OAIBatchRetrieveInventoryChangesRequest::is_cursor_Valid() const{
    return m_cursor_isValid;
}

QList<QString> OAIBatchRetrieveInventoryChangesRequest::getLocationIds() const {
    return m_location_ids;
}
void OAIBatchRetrieveInventoryChangesRequest::setLocationIds(const QList<QString> &location_ids) {
    m_location_ids = location_ids;
    m_location_ids_isSet = true;
}

bool OAIBatchRetrieveInventoryChangesRequest::is_location_ids_Set() const{
    return m_location_ids_isSet;
}

bool OAIBatchRetrieveInventoryChangesRequest::is_location_ids_Valid() const{
    return m_location_ids_isValid;
}

QList<QString> OAIBatchRetrieveInventoryChangesRequest::getStates() const {
    return m_states;
}
void OAIBatchRetrieveInventoryChangesRequest::setStates(const QList<QString> &states) {
    m_states = states;
    m_states_isSet = true;
}

bool OAIBatchRetrieveInventoryChangesRequest::is_states_Set() const{
    return m_states_isSet;
}

bool OAIBatchRetrieveInventoryChangesRequest::is_states_Valid() const{
    return m_states_isValid;
}

QList<QString> OAIBatchRetrieveInventoryChangesRequest::getTypes() const {
    return m_types;
}
void OAIBatchRetrieveInventoryChangesRequest::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIBatchRetrieveInventoryChangesRequest::is_types_Set() const{
    return m_types_isSet;
}

bool OAIBatchRetrieveInventoryChangesRequest::is_types_Valid() const{
    return m_types_isValid;
}

QString OAIBatchRetrieveInventoryChangesRequest::getUpdatedAfter() const {
    return m_updated_after;
}
void OAIBatchRetrieveInventoryChangesRequest::setUpdatedAfter(const QString &updated_after) {
    m_updated_after = updated_after;
    m_updated_after_isSet = true;
}

bool OAIBatchRetrieveInventoryChangesRequest::is_updated_after_Set() const{
    return m_updated_after_isSet;
}

bool OAIBatchRetrieveInventoryChangesRequest::is_updated_after_Valid() const{
    return m_updated_after_isValid;
}

QString OAIBatchRetrieveInventoryChangesRequest::getUpdatedBefore() const {
    return m_updated_before;
}
void OAIBatchRetrieveInventoryChangesRequest::setUpdatedBefore(const QString &updated_before) {
    m_updated_before = updated_before;
    m_updated_before_isSet = true;
}

bool OAIBatchRetrieveInventoryChangesRequest::is_updated_before_Set() const{
    return m_updated_before_isSet;
}

bool OAIBatchRetrieveInventoryChangesRequest::is_updated_before_Valid() const{
    return m_updated_before_isValid;
}

bool OAIBatchRetrieveInventoryChangesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_object_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_before_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchRetrieveInventoryChangesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
