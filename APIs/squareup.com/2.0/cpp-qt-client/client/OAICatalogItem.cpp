/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogItem::OAICatalogItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogItem::OAICatalogItem() {
    this->initializeModel();
}

OAICatalogItem::~OAICatalogItem() {}

void OAICatalogItem::initializeModel() {

    m_abbreviation_isSet = false;
    m_abbreviation_isValid = false;

    m_available_electronically_isSet = false;
    m_available_electronically_isValid = false;

    m_available_for_pickup_isSet = false;
    m_available_for_pickup_isValid = false;

    m_available_online_isSet = false;
    m_available_online_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_item_options_isSet = false;
    m_item_options_isValid = false;

    m_label_color_isSet = false;
    m_label_color_isValid = false;

    m_modifier_list_info_isSet = false;
    m_modifier_list_info_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_skip_modifier_screen_isSet = false;
    m_skip_modifier_screen_isValid = false;

    m_sort_name_isSet = false;
    m_sort_name_isValid = false;

    m_tax_ids_isSet = false;
    m_tax_ids_isValid = false;

    m_variations_isSet = false;
    m_variations_isValid = false;
}

void OAICatalogItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogItem::fromJsonObject(QJsonObject json) {

    m_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_abbreviation, json[QString("abbreviation")]);
    m_abbreviation_isSet = !json[QString("abbreviation")].isNull() && m_abbreviation_isValid;

    m_available_electronically_isValid = ::OpenAPI::fromJsonValue(m_available_electronically, json[QString("available_electronically")]);
    m_available_electronically_isSet = !json[QString("available_electronically")].isNull() && m_available_electronically_isValid;

    m_available_for_pickup_isValid = ::OpenAPI::fromJsonValue(m_available_for_pickup, json[QString("available_for_pickup")]);
    m_available_for_pickup_isSet = !json[QString("available_for_pickup")].isNull() && m_available_for_pickup_isValid;

    m_available_online_isValid = ::OpenAPI::fromJsonValue(m_available_online, json[QString("available_online")]);
    m_available_online_isSet = !json[QString("available_online")].isNull() && m_available_online_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_item_options_isValid = ::OpenAPI::fromJsonValue(m_item_options, json[QString("item_options")]);
    m_item_options_isSet = !json[QString("item_options")].isNull() && m_item_options_isValid;

    m_label_color_isValid = ::OpenAPI::fromJsonValue(m_label_color, json[QString("label_color")]);
    m_label_color_isSet = !json[QString("label_color")].isNull() && m_label_color_isValid;

    m_modifier_list_info_isValid = ::OpenAPI::fromJsonValue(m_modifier_list_info, json[QString("modifier_list_info")]);
    m_modifier_list_info_isSet = !json[QString("modifier_list_info")].isNull() && m_modifier_list_info_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("product_type")]);
    m_product_type_isSet = !json[QString("product_type")].isNull() && m_product_type_isValid;

    m_skip_modifier_screen_isValid = ::OpenAPI::fromJsonValue(m_skip_modifier_screen, json[QString("skip_modifier_screen")]);
    m_skip_modifier_screen_isSet = !json[QString("skip_modifier_screen")].isNull() && m_skip_modifier_screen_isValid;

    m_sort_name_isValid = ::OpenAPI::fromJsonValue(m_sort_name, json[QString("sort_name")]);
    m_sort_name_isSet = !json[QString("sort_name")].isNull() && m_sort_name_isValid;

    m_tax_ids_isValid = ::OpenAPI::fromJsonValue(m_tax_ids, json[QString("tax_ids")]);
    m_tax_ids_isSet = !json[QString("tax_ids")].isNull() && m_tax_ids_isValid;

    m_variations_isValid = ::OpenAPI::fromJsonValue(m_variations, json[QString("variations")]);
    m_variations_isSet = !json[QString("variations")].isNull() && m_variations_isValid;
}

QString OAICatalogItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogItem::asJsonObject() const {
    QJsonObject obj;
    if (m_abbreviation_isSet) {
        obj.insert(QString("abbreviation"), ::OpenAPI::toJsonValue(m_abbreviation));
    }
    if (m_available_electronically_isSet) {
        obj.insert(QString("available_electronically"), ::OpenAPI::toJsonValue(m_available_electronically));
    }
    if (m_available_for_pickup_isSet) {
        obj.insert(QString("available_for_pickup"), ::OpenAPI::toJsonValue(m_available_for_pickup));
    }
    if (m_available_online_isSet) {
        obj.insert(QString("available_online"), ::OpenAPI::toJsonValue(m_available_online));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_item_options.size() > 0) {
        obj.insert(QString("item_options"), ::OpenAPI::toJsonValue(m_item_options));
    }
    if (m_label_color_isSet) {
        obj.insert(QString("label_color"), ::OpenAPI::toJsonValue(m_label_color));
    }
    if (m_modifier_list_info.size() > 0) {
        obj.insert(QString("modifier_list_info"), ::OpenAPI::toJsonValue(m_modifier_list_info));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_product_type_isSet) {
        obj.insert(QString("product_type"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_skip_modifier_screen_isSet) {
        obj.insert(QString("skip_modifier_screen"), ::OpenAPI::toJsonValue(m_skip_modifier_screen));
    }
    if (m_sort_name_isSet) {
        obj.insert(QString("sort_name"), ::OpenAPI::toJsonValue(m_sort_name));
    }
    if (m_tax_ids.size() > 0) {
        obj.insert(QString("tax_ids"), ::OpenAPI::toJsonValue(m_tax_ids));
    }
    if (m_variations.size() > 0) {
        obj.insert(QString("variations"), ::OpenAPI::toJsonValue(m_variations));
    }
    return obj;
}

QString OAICatalogItem::getAbbreviation() const {
    return m_abbreviation;
}
void OAICatalogItem::setAbbreviation(const QString &abbreviation) {
    m_abbreviation = abbreviation;
    m_abbreviation_isSet = true;
}

bool OAICatalogItem::is_abbreviation_Set() const{
    return m_abbreviation_isSet;
}

bool OAICatalogItem::is_abbreviation_Valid() const{
    return m_abbreviation_isValid;
}

bool OAICatalogItem::isAvailableElectronically() const {
    return m_available_electronically;
}
void OAICatalogItem::setAvailableElectronically(const bool &available_electronically) {
    m_available_electronically = available_electronically;
    m_available_electronically_isSet = true;
}

bool OAICatalogItem::is_available_electronically_Set() const{
    return m_available_electronically_isSet;
}

bool OAICatalogItem::is_available_electronically_Valid() const{
    return m_available_electronically_isValid;
}

bool OAICatalogItem::isAvailableForPickup() const {
    return m_available_for_pickup;
}
void OAICatalogItem::setAvailableForPickup(const bool &available_for_pickup) {
    m_available_for_pickup = available_for_pickup;
    m_available_for_pickup_isSet = true;
}

bool OAICatalogItem::is_available_for_pickup_Set() const{
    return m_available_for_pickup_isSet;
}

bool OAICatalogItem::is_available_for_pickup_Valid() const{
    return m_available_for_pickup_isValid;
}

bool OAICatalogItem::isAvailableOnline() const {
    return m_available_online;
}
void OAICatalogItem::setAvailableOnline(const bool &available_online) {
    m_available_online = available_online;
    m_available_online_isSet = true;
}

bool OAICatalogItem::is_available_online_Set() const{
    return m_available_online_isSet;
}

bool OAICatalogItem::is_available_online_Valid() const{
    return m_available_online_isValid;
}

QString OAICatalogItem::getCategoryId() const {
    return m_category_id;
}
void OAICatalogItem::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAICatalogItem::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAICatalogItem::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAICatalogItem::getDescription() const {
    return m_description;
}
void OAICatalogItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICatalogItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAICatalogItem::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAICatalogItemOptionForItem> OAICatalogItem::getItemOptions() const {
    return m_item_options;
}
void OAICatalogItem::setItemOptions(const QList<OAICatalogItemOptionForItem> &item_options) {
    m_item_options = item_options;
    m_item_options_isSet = true;
}

bool OAICatalogItem::is_item_options_Set() const{
    return m_item_options_isSet;
}

bool OAICatalogItem::is_item_options_Valid() const{
    return m_item_options_isValid;
}

QString OAICatalogItem::getLabelColor() const {
    return m_label_color;
}
void OAICatalogItem::setLabelColor(const QString &label_color) {
    m_label_color = label_color;
    m_label_color_isSet = true;
}

bool OAICatalogItem::is_label_color_Set() const{
    return m_label_color_isSet;
}

bool OAICatalogItem::is_label_color_Valid() const{
    return m_label_color_isValid;
}

QList<OAICatalogItemModifierListInfo> OAICatalogItem::getModifierListInfo() const {
    return m_modifier_list_info;
}
void OAICatalogItem::setModifierListInfo(const QList<OAICatalogItemModifierListInfo> &modifier_list_info) {
    m_modifier_list_info = modifier_list_info;
    m_modifier_list_info_isSet = true;
}

bool OAICatalogItem::is_modifier_list_info_Set() const{
    return m_modifier_list_info_isSet;
}

bool OAICatalogItem::is_modifier_list_info_Valid() const{
    return m_modifier_list_info_isValid;
}

QString OAICatalogItem::getName() const {
    return m_name;
}
void OAICatalogItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICatalogItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalogItem::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICatalogItem::getProductType() const {
    return m_product_type;
}
void OAICatalogItem::setProductType(const QString &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAICatalogItem::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAICatalogItem::is_product_type_Valid() const{
    return m_product_type_isValid;
}

bool OAICatalogItem::isSkipModifierScreen() const {
    return m_skip_modifier_screen;
}
void OAICatalogItem::setSkipModifierScreen(const bool &skip_modifier_screen) {
    m_skip_modifier_screen = skip_modifier_screen;
    m_skip_modifier_screen_isSet = true;
}

bool OAICatalogItem::is_skip_modifier_screen_Set() const{
    return m_skip_modifier_screen_isSet;
}

bool OAICatalogItem::is_skip_modifier_screen_Valid() const{
    return m_skip_modifier_screen_isValid;
}

QString OAICatalogItem::getSortName() const {
    return m_sort_name;
}
void OAICatalogItem::setSortName(const QString &sort_name) {
    m_sort_name = sort_name;
    m_sort_name_isSet = true;
}

bool OAICatalogItem::is_sort_name_Set() const{
    return m_sort_name_isSet;
}

bool OAICatalogItem::is_sort_name_Valid() const{
    return m_sort_name_isValid;
}

QList<QString> OAICatalogItem::getTaxIds() const {
    return m_tax_ids;
}
void OAICatalogItem::setTaxIds(const QList<QString> &tax_ids) {
    m_tax_ids = tax_ids;
    m_tax_ids_isSet = true;
}

bool OAICatalogItem::is_tax_ids_Set() const{
    return m_tax_ids_isSet;
}

bool OAICatalogItem::is_tax_ids_Valid() const{
    return m_tax_ids_isValid;
}

QList<OAICatalogObject> OAICatalogItem::getVariations() const {
    return m_variations;
}
void OAICatalogItem::setVariations(const QList<OAICatalogObject> &variations) {
    m_variations = variations;
    m_variations_isSet = true;
}

bool OAICatalogItem::is_variations_Set() const{
    return m_variations_isSet;
}

bool OAICatalogItem::is_variations_Valid() const{
    return m_variations_isValid;
}

bool OAICatalogItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_electronically_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_for_pickup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_online_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modifier_list_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_modifier_screen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_variations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
