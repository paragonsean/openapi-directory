/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogQuickAmount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogQuickAmount::OAICatalogQuickAmount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogQuickAmount::OAICatalogQuickAmount() {
    this->initializeModel();
}

OAICatalogQuickAmount::~OAICatalogQuickAmount() {}

void OAICatalogQuickAmount::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_ordinal_isSet = false;
    m_ordinal_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICatalogQuickAmount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogQuickAmount::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_ordinal_isValid = ::OpenAPI::fromJsonValue(m_ordinal, json[QString("ordinal")]);
    m_ordinal_isSet = !json[QString("ordinal")].isNull() && m_ordinal_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICatalogQuickAmount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogQuickAmount::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_ordinal_isSet) {
        obj.insert(QString("ordinal"), ::OpenAPI::toJsonValue(m_ordinal));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIMoney OAICatalogQuickAmount::getAmount() const {
    return m_amount;
}
void OAICatalogQuickAmount::setAmount(const OAIMoney &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICatalogQuickAmount::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICatalogQuickAmount::is_amount_Valid() const{
    return m_amount_isValid;
}

qint64 OAICatalogQuickAmount::getOrdinal() const {
    return m_ordinal;
}
void OAICatalogQuickAmount::setOrdinal(const qint64 &ordinal) {
    m_ordinal = ordinal;
    m_ordinal_isSet = true;
}

bool OAICatalogQuickAmount::is_ordinal_Set() const{
    return m_ordinal_isSet;
}

bool OAICatalogQuickAmount::is_ordinal_Valid() const{
    return m_ordinal_isValid;
}

qint64 OAICatalogQuickAmount::getScore() const {
    return m_score;
}
void OAICatalogQuickAmount::setScore(const qint64 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAICatalogQuickAmount::is_score_Set() const{
    return m_score_isSet;
}

bool OAICatalogQuickAmount::is_score_Valid() const{
    return m_score_isValid;
}

QString OAICatalogQuickAmount::getType() const {
    return m_type;
}
void OAICatalogQuickAmount::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICatalogQuickAmount::is_type_Set() const{
    return m_type_isSet;
}

bool OAICatalogQuickAmount::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICatalogQuickAmount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordinal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogQuickAmount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
