/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogInfoResponseLimits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogInfoResponseLimits::OAICatalogInfoResponseLimits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogInfoResponseLimits::OAICatalogInfoResponseLimits() {
    this->initializeModel();
}

OAICatalogInfoResponseLimits::~OAICatalogInfoResponseLimits() {}

void OAICatalogInfoResponseLimits::initializeModel() {

    m_batch_delete_max_object_ids_isSet = false;
    m_batch_delete_max_object_ids_isValid = false;

    m_batch_retrieve_max_object_ids_isSet = false;
    m_batch_retrieve_max_object_ids_isValid = false;

    m_batch_upsert_max_objects_per_batch_isSet = false;
    m_batch_upsert_max_objects_per_batch_isValid = false;

    m_batch_upsert_max_total_objects_isSet = false;
    m_batch_upsert_max_total_objects_isValid = false;

    m_search_max_page_limit_isSet = false;
    m_search_max_page_limit_isValid = false;

    m_update_item_modifier_lists_max_item_ids_isSet = false;
    m_update_item_modifier_lists_max_item_ids_isValid = false;

    m_update_item_modifier_lists_max_modifier_lists_to_disable_isSet = false;
    m_update_item_modifier_lists_max_modifier_lists_to_disable_isValid = false;

    m_update_item_modifier_lists_max_modifier_lists_to_enable_isSet = false;
    m_update_item_modifier_lists_max_modifier_lists_to_enable_isValid = false;

    m_update_item_taxes_max_item_ids_isSet = false;
    m_update_item_taxes_max_item_ids_isValid = false;

    m_update_item_taxes_max_taxes_to_disable_isSet = false;
    m_update_item_taxes_max_taxes_to_disable_isValid = false;

    m_update_item_taxes_max_taxes_to_enable_isSet = false;
    m_update_item_taxes_max_taxes_to_enable_isValid = false;
}

void OAICatalogInfoResponseLimits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogInfoResponseLimits::fromJsonObject(QJsonObject json) {

    m_batch_delete_max_object_ids_isValid = ::OpenAPI::fromJsonValue(m_batch_delete_max_object_ids, json[QString("batch_delete_max_object_ids")]);
    m_batch_delete_max_object_ids_isSet = !json[QString("batch_delete_max_object_ids")].isNull() && m_batch_delete_max_object_ids_isValid;

    m_batch_retrieve_max_object_ids_isValid = ::OpenAPI::fromJsonValue(m_batch_retrieve_max_object_ids, json[QString("batch_retrieve_max_object_ids")]);
    m_batch_retrieve_max_object_ids_isSet = !json[QString("batch_retrieve_max_object_ids")].isNull() && m_batch_retrieve_max_object_ids_isValid;

    m_batch_upsert_max_objects_per_batch_isValid = ::OpenAPI::fromJsonValue(m_batch_upsert_max_objects_per_batch, json[QString("batch_upsert_max_objects_per_batch")]);
    m_batch_upsert_max_objects_per_batch_isSet = !json[QString("batch_upsert_max_objects_per_batch")].isNull() && m_batch_upsert_max_objects_per_batch_isValid;

    m_batch_upsert_max_total_objects_isValid = ::OpenAPI::fromJsonValue(m_batch_upsert_max_total_objects, json[QString("batch_upsert_max_total_objects")]);
    m_batch_upsert_max_total_objects_isSet = !json[QString("batch_upsert_max_total_objects")].isNull() && m_batch_upsert_max_total_objects_isValid;

    m_search_max_page_limit_isValid = ::OpenAPI::fromJsonValue(m_search_max_page_limit, json[QString("search_max_page_limit")]);
    m_search_max_page_limit_isSet = !json[QString("search_max_page_limit")].isNull() && m_search_max_page_limit_isValid;

    m_update_item_modifier_lists_max_item_ids_isValid = ::OpenAPI::fromJsonValue(m_update_item_modifier_lists_max_item_ids, json[QString("update_item_modifier_lists_max_item_ids")]);
    m_update_item_modifier_lists_max_item_ids_isSet = !json[QString("update_item_modifier_lists_max_item_ids")].isNull() && m_update_item_modifier_lists_max_item_ids_isValid;

    m_update_item_modifier_lists_max_modifier_lists_to_disable_isValid = ::OpenAPI::fromJsonValue(m_update_item_modifier_lists_max_modifier_lists_to_disable, json[QString("update_item_modifier_lists_max_modifier_lists_to_disable")]);
    m_update_item_modifier_lists_max_modifier_lists_to_disable_isSet = !json[QString("update_item_modifier_lists_max_modifier_lists_to_disable")].isNull() && m_update_item_modifier_lists_max_modifier_lists_to_disable_isValid;

    m_update_item_modifier_lists_max_modifier_lists_to_enable_isValid = ::OpenAPI::fromJsonValue(m_update_item_modifier_lists_max_modifier_lists_to_enable, json[QString("update_item_modifier_lists_max_modifier_lists_to_enable")]);
    m_update_item_modifier_lists_max_modifier_lists_to_enable_isSet = !json[QString("update_item_modifier_lists_max_modifier_lists_to_enable")].isNull() && m_update_item_modifier_lists_max_modifier_lists_to_enable_isValid;

    m_update_item_taxes_max_item_ids_isValid = ::OpenAPI::fromJsonValue(m_update_item_taxes_max_item_ids, json[QString("update_item_taxes_max_item_ids")]);
    m_update_item_taxes_max_item_ids_isSet = !json[QString("update_item_taxes_max_item_ids")].isNull() && m_update_item_taxes_max_item_ids_isValid;

    m_update_item_taxes_max_taxes_to_disable_isValid = ::OpenAPI::fromJsonValue(m_update_item_taxes_max_taxes_to_disable, json[QString("update_item_taxes_max_taxes_to_disable")]);
    m_update_item_taxes_max_taxes_to_disable_isSet = !json[QString("update_item_taxes_max_taxes_to_disable")].isNull() && m_update_item_taxes_max_taxes_to_disable_isValid;

    m_update_item_taxes_max_taxes_to_enable_isValid = ::OpenAPI::fromJsonValue(m_update_item_taxes_max_taxes_to_enable, json[QString("update_item_taxes_max_taxes_to_enable")]);
    m_update_item_taxes_max_taxes_to_enable_isSet = !json[QString("update_item_taxes_max_taxes_to_enable")].isNull() && m_update_item_taxes_max_taxes_to_enable_isValid;
}

QString OAICatalogInfoResponseLimits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogInfoResponseLimits::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_delete_max_object_ids_isSet) {
        obj.insert(QString("batch_delete_max_object_ids"), ::OpenAPI::toJsonValue(m_batch_delete_max_object_ids));
    }
    if (m_batch_retrieve_max_object_ids_isSet) {
        obj.insert(QString("batch_retrieve_max_object_ids"), ::OpenAPI::toJsonValue(m_batch_retrieve_max_object_ids));
    }
    if (m_batch_upsert_max_objects_per_batch_isSet) {
        obj.insert(QString("batch_upsert_max_objects_per_batch"), ::OpenAPI::toJsonValue(m_batch_upsert_max_objects_per_batch));
    }
    if (m_batch_upsert_max_total_objects_isSet) {
        obj.insert(QString("batch_upsert_max_total_objects"), ::OpenAPI::toJsonValue(m_batch_upsert_max_total_objects));
    }
    if (m_search_max_page_limit_isSet) {
        obj.insert(QString("search_max_page_limit"), ::OpenAPI::toJsonValue(m_search_max_page_limit));
    }
    if (m_update_item_modifier_lists_max_item_ids_isSet) {
        obj.insert(QString("update_item_modifier_lists_max_item_ids"), ::OpenAPI::toJsonValue(m_update_item_modifier_lists_max_item_ids));
    }
    if (m_update_item_modifier_lists_max_modifier_lists_to_disable_isSet) {
        obj.insert(QString("update_item_modifier_lists_max_modifier_lists_to_disable"), ::OpenAPI::toJsonValue(m_update_item_modifier_lists_max_modifier_lists_to_disable));
    }
    if (m_update_item_modifier_lists_max_modifier_lists_to_enable_isSet) {
        obj.insert(QString("update_item_modifier_lists_max_modifier_lists_to_enable"), ::OpenAPI::toJsonValue(m_update_item_modifier_lists_max_modifier_lists_to_enable));
    }
    if (m_update_item_taxes_max_item_ids_isSet) {
        obj.insert(QString("update_item_taxes_max_item_ids"), ::OpenAPI::toJsonValue(m_update_item_taxes_max_item_ids));
    }
    if (m_update_item_taxes_max_taxes_to_disable_isSet) {
        obj.insert(QString("update_item_taxes_max_taxes_to_disable"), ::OpenAPI::toJsonValue(m_update_item_taxes_max_taxes_to_disable));
    }
    if (m_update_item_taxes_max_taxes_to_enable_isSet) {
        obj.insert(QString("update_item_taxes_max_taxes_to_enable"), ::OpenAPI::toJsonValue(m_update_item_taxes_max_taxes_to_enable));
    }
    return obj;
}

qint32 OAICatalogInfoResponseLimits::getBatchDeleteMaxObjectIds() const {
    return m_batch_delete_max_object_ids;
}
void OAICatalogInfoResponseLimits::setBatchDeleteMaxObjectIds(const qint32 &batch_delete_max_object_ids) {
    m_batch_delete_max_object_ids = batch_delete_max_object_ids;
    m_batch_delete_max_object_ids_isSet = true;
}

bool OAICatalogInfoResponseLimits::is_batch_delete_max_object_ids_Set() const{
    return m_batch_delete_max_object_ids_isSet;
}

bool OAICatalogInfoResponseLimits::is_batch_delete_max_object_ids_Valid() const{
    return m_batch_delete_max_object_ids_isValid;
}

qint32 OAICatalogInfoResponseLimits::getBatchRetrieveMaxObjectIds() const {
    return m_batch_retrieve_max_object_ids;
}
void OAICatalogInfoResponseLimits::setBatchRetrieveMaxObjectIds(const qint32 &batch_retrieve_max_object_ids) {
    m_batch_retrieve_max_object_ids = batch_retrieve_max_object_ids;
    m_batch_retrieve_max_object_ids_isSet = true;
}

bool OAICatalogInfoResponseLimits::is_batch_retrieve_max_object_ids_Set() const{
    return m_batch_retrieve_max_object_ids_isSet;
}

bool OAICatalogInfoResponseLimits::is_batch_retrieve_max_object_ids_Valid() const{
    return m_batch_retrieve_max_object_ids_isValid;
}

qint32 OAICatalogInfoResponseLimits::getBatchUpsertMaxObjectsPerBatch() const {
    return m_batch_upsert_max_objects_per_batch;
}
void OAICatalogInfoResponseLimits::setBatchUpsertMaxObjectsPerBatch(const qint32 &batch_upsert_max_objects_per_batch) {
    m_batch_upsert_max_objects_per_batch = batch_upsert_max_objects_per_batch;
    m_batch_upsert_max_objects_per_batch_isSet = true;
}

bool OAICatalogInfoResponseLimits::is_batch_upsert_max_objects_per_batch_Set() const{
    return m_batch_upsert_max_objects_per_batch_isSet;
}

bool OAICatalogInfoResponseLimits::is_batch_upsert_max_objects_per_batch_Valid() const{
    return m_batch_upsert_max_objects_per_batch_isValid;
}

qint32 OAICatalogInfoResponseLimits::getBatchUpsertMaxTotalObjects() const {
    return m_batch_upsert_max_total_objects;
}
void OAICatalogInfoResponseLimits::setBatchUpsertMaxTotalObjects(const qint32 &batch_upsert_max_total_objects) {
    m_batch_upsert_max_total_objects = batch_upsert_max_total_objects;
    m_batch_upsert_max_total_objects_isSet = true;
}

bool OAICatalogInfoResponseLimits::is_batch_upsert_max_total_objects_Set() const{
    return m_batch_upsert_max_total_objects_isSet;
}

bool OAICatalogInfoResponseLimits::is_batch_upsert_max_total_objects_Valid() const{
    return m_batch_upsert_max_total_objects_isValid;
}

qint32 OAICatalogInfoResponseLimits::getSearchMaxPageLimit() const {
    return m_search_max_page_limit;
}
void OAICatalogInfoResponseLimits::setSearchMaxPageLimit(const qint32 &search_max_page_limit) {
    m_search_max_page_limit = search_max_page_limit;
    m_search_max_page_limit_isSet = true;
}

bool OAICatalogInfoResponseLimits::is_search_max_page_limit_Set() const{
    return m_search_max_page_limit_isSet;
}

bool OAICatalogInfoResponseLimits::is_search_max_page_limit_Valid() const{
    return m_search_max_page_limit_isValid;
}

qint32 OAICatalogInfoResponseLimits::getUpdateItemModifierListsMaxItemIds() const {
    return m_update_item_modifier_lists_max_item_ids;
}
void OAICatalogInfoResponseLimits::setUpdateItemModifierListsMaxItemIds(const qint32 &update_item_modifier_lists_max_item_ids) {
    m_update_item_modifier_lists_max_item_ids = update_item_modifier_lists_max_item_ids;
    m_update_item_modifier_lists_max_item_ids_isSet = true;
}

bool OAICatalogInfoResponseLimits::is_update_item_modifier_lists_max_item_ids_Set() const{
    return m_update_item_modifier_lists_max_item_ids_isSet;
}

bool OAICatalogInfoResponseLimits::is_update_item_modifier_lists_max_item_ids_Valid() const{
    return m_update_item_modifier_lists_max_item_ids_isValid;
}

qint32 OAICatalogInfoResponseLimits::getUpdateItemModifierListsMaxModifierListsToDisable() const {
    return m_update_item_modifier_lists_max_modifier_lists_to_disable;
}
void OAICatalogInfoResponseLimits::setUpdateItemModifierListsMaxModifierListsToDisable(const qint32 &update_item_modifier_lists_max_modifier_lists_to_disable) {
    m_update_item_modifier_lists_max_modifier_lists_to_disable = update_item_modifier_lists_max_modifier_lists_to_disable;
    m_update_item_modifier_lists_max_modifier_lists_to_disable_isSet = true;
}

bool OAICatalogInfoResponseLimits::is_update_item_modifier_lists_max_modifier_lists_to_disable_Set() const{
    return m_update_item_modifier_lists_max_modifier_lists_to_disable_isSet;
}

bool OAICatalogInfoResponseLimits::is_update_item_modifier_lists_max_modifier_lists_to_disable_Valid() const{
    return m_update_item_modifier_lists_max_modifier_lists_to_disable_isValid;
}

qint32 OAICatalogInfoResponseLimits::getUpdateItemModifierListsMaxModifierListsToEnable() const {
    return m_update_item_modifier_lists_max_modifier_lists_to_enable;
}
void OAICatalogInfoResponseLimits::setUpdateItemModifierListsMaxModifierListsToEnable(const qint32 &update_item_modifier_lists_max_modifier_lists_to_enable) {
    m_update_item_modifier_lists_max_modifier_lists_to_enable = update_item_modifier_lists_max_modifier_lists_to_enable;
    m_update_item_modifier_lists_max_modifier_lists_to_enable_isSet = true;
}

bool OAICatalogInfoResponseLimits::is_update_item_modifier_lists_max_modifier_lists_to_enable_Set() const{
    return m_update_item_modifier_lists_max_modifier_lists_to_enable_isSet;
}

bool OAICatalogInfoResponseLimits::is_update_item_modifier_lists_max_modifier_lists_to_enable_Valid() const{
    return m_update_item_modifier_lists_max_modifier_lists_to_enable_isValid;
}

qint32 OAICatalogInfoResponseLimits::getUpdateItemTaxesMaxItemIds() const {
    return m_update_item_taxes_max_item_ids;
}
void OAICatalogInfoResponseLimits::setUpdateItemTaxesMaxItemIds(const qint32 &update_item_taxes_max_item_ids) {
    m_update_item_taxes_max_item_ids = update_item_taxes_max_item_ids;
    m_update_item_taxes_max_item_ids_isSet = true;
}

bool OAICatalogInfoResponseLimits::is_update_item_taxes_max_item_ids_Set() const{
    return m_update_item_taxes_max_item_ids_isSet;
}

bool OAICatalogInfoResponseLimits::is_update_item_taxes_max_item_ids_Valid() const{
    return m_update_item_taxes_max_item_ids_isValid;
}

qint32 OAICatalogInfoResponseLimits::getUpdateItemTaxesMaxTaxesToDisable() const {
    return m_update_item_taxes_max_taxes_to_disable;
}
void OAICatalogInfoResponseLimits::setUpdateItemTaxesMaxTaxesToDisable(const qint32 &update_item_taxes_max_taxes_to_disable) {
    m_update_item_taxes_max_taxes_to_disable = update_item_taxes_max_taxes_to_disable;
    m_update_item_taxes_max_taxes_to_disable_isSet = true;
}

bool OAICatalogInfoResponseLimits::is_update_item_taxes_max_taxes_to_disable_Set() const{
    return m_update_item_taxes_max_taxes_to_disable_isSet;
}

bool OAICatalogInfoResponseLimits::is_update_item_taxes_max_taxes_to_disable_Valid() const{
    return m_update_item_taxes_max_taxes_to_disable_isValid;
}

qint32 OAICatalogInfoResponseLimits::getUpdateItemTaxesMaxTaxesToEnable() const {
    return m_update_item_taxes_max_taxes_to_enable;
}
void OAICatalogInfoResponseLimits::setUpdateItemTaxesMaxTaxesToEnable(const qint32 &update_item_taxes_max_taxes_to_enable) {
    m_update_item_taxes_max_taxes_to_enable = update_item_taxes_max_taxes_to_enable;
    m_update_item_taxes_max_taxes_to_enable_isSet = true;
}

bool OAICatalogInfoResponseLimits::is_update_item_taxes_max_taxes_to_enable_Set() const{
    return m_update_item_taxes_max_taxes_to_enable_isSet;
}

bool OAICatalogInfoResponseLimits::is_update_item_taxes_max_taxes_to_enable_Valid() const{
    return m_update_item_taxes_max_taxes_to_enable_isValid;
}

bool OAICatalogInfoResponseLimits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_delete_max_object_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_retrieve_max_object_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_upsert_max_objects_per_batch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_upsert_max_total_objects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_max_page_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_item_modifier_lists_max_item_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_item_modifier_lists_max_modifier_lists_to_disable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_item_modifier_lists_max_modifier_lists_to_enable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_item_taxes_max_item_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_item_taxes_max_taxes_to_disable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_item_taxes_max_taxes_to_enable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogInfoResponseLimits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
