/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGiftCardActivityType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGiftCardActivityType::OAIGiftCardActivityType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGiftCardActivityType::OAIGiftCardActivityType() {
    this->initializeModel();
}

OAIGiftCardActivityType::~OAIGiftCardActivityType() {}

void OAIGiftCardActivityType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIGiftCardActivityType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIGiftCardActivityType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ACTIVATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGiftCardActivityType::ACTIVATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOAD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGiftCardActivityType::LOAD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REDEEM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGiftCardActivityType::REDEEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CLEAR_BALANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGiftCardActivityType::CLEAR_BALANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEACTIVATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGiftCardActivityType::DEACTIVATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADJUST_INCREMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGiftCardActivityType::ADJUST_INCREMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADJUST_DECREMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGiftCardActivityType::ADJUST_DECREMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REFUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGiftCardActivityType::REFUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNLINKED_ACTIVITY_REFUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGiftCardActivityType::UNLINKED_ACTIVITY_REFUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGiftCardActivityType::IMPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BLOCK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGiftCardActivityType::BLOCK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNBLOCK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGiftCardActivityType::UNBLOCK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPORT_REVERSAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGiftCardActivityType::IMPORT_REVERSAL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIGiftCardActivityType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIGiftCardActivityType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIGiftCardActivityType::ACTIVATE:
            val = "ACTIVATE";
            break;
        case eOAIGiftCardActivityType::LOAD:
            val = "LOAD";
            break;
        case eOAIGiftCardActivityType::REDEEM:
            val = "REDEEM";
            break;
        case eOAIGiftCardActivityType::CLEAR_BALANCE:
            val = "CLEAR_BALANCE";
            break;
        case eOAIGiftCardActivityType::DEACTIVATE:
            val = "DEACTIVATE";
            break;
        case eOAIGiftCardActivityType::ADJUST_INCREMENT:
            val = "ADJUST_INCREMENT";
            break;
        case eOAIGiftCardActivityType::ADJUST_DECREMENT:
            val = "ADJUST_DECREMENT";
            break;
        case eOAIGiftCardActivityType::REFUND:
            val = "REFUND";
            break;
        case eOAIGiftCardActivityType::UNLINKED_ACTIVITY_REFUND:
            val = "UNLINKED_ACTIVITY_REFUND";
            break;
        case eOAIGiftCardActivityType::IMPORT:
            val = "IMPORT";
            break;
        case eOAIGiftCardActivityType::BLOCK:
            val = "BLOCK";
            break;
        case eOAIGiftCardActivityType::UNBLOCK:
            val = "UNBLOCK";
            break;
        case eOAIGiftCardActivityType::IMPORT_REVERSAL:
            val = "IMPORT_REVERSAL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIGiftCardActivityType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIGiftCardActivityType::eOAIGiftCardActivityType OAIGiftCardActivityType::getValue() const {
    return m_value;
}

void OAIGiftCardActivityType::setValue(const OAIGiftCardActivityType::eOAIGiftCardActivityType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIGiftCardActivityType::isSet() const {
    
    return m_value_isSet;
}

bool OAIGiftCardActivityType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
