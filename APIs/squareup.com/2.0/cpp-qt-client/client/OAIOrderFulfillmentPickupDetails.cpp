/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderFulfillmentPickupDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderFulfillmentPickupDetails::OAIOrderFulfillmentPickupDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderFulfillmentPickupDetails::OAIOrderFulfillmentPickupDetails() {
    this->initializeModel();
}

OAIOrderFulfillmentPickupDetails::~OAIOrderFulfillmentPickupDetails() {}

void OAIOrderFulfillmentPickupDetails::initializeModel() {

    m_accepted_at_isSet = false;
    m_accepted_at_isValid = false;

    m_auto_complete_duration_isSet = false;
    m_auto_complete_duration_isValid = false;

    m_cancel_reason_isSet = false;
    m_cancel_reason_isValid = false;

    m_canceled_at_isSet = false;
    m_canceled_at_isValid = false;

    m_curbside_pickup_details_isSet = false;
    m_curbside_pickup_details_isValid = false;

    m_expired_at_isSet = false;
    m_expired_at_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_is_curbside_pickup_isSet = false;
    m_is_curbside_pickup_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_picked_up_at_isSet = false;
    m_picked_up_at_isValid = false;

    m_pickup_at_isSet = false;
    m_pickup_at_isValid = false;

    m_pickup_window_duration_isSet = false;
    m_pickup_window_duration_isValid = false;

    m_placed_at_isSet = false;
    m_placed_at_isValid = false;

    m_prep_time_duration_isSet = false;
    m_prep_time_duration_isValid = false;

    m_ready_at_isSet = false;
    m_ready_at_isValid = false;

    m_recipient_isSet = false;
    m_recipient_isValid = false;

    m_rejected_at_isSet = false;
    m_rejected_at_isValid = false;

    m_schedule_type_isSet = false;
    m_schedule_type_isValid = false;
}

void OAIOrderFulfillmentPickupDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderFulfillmentPickupDetails::fromJsonObject(QJsonObject json) {

    m_accepted_at_isValid = ::OpenAPI::fromJsonValue(m_accepted_at, json[QString("accepted_at")]);
    m_accepted_at_isSet = !json[QString("accepted_at")].isNull() && m_accepted_at_isValid;

    m_auto_complete_duration_isValid = ::OpenAPI::fromJsonValue(m_auto_complete_duration, json[QString("auto_complete_duration")]);
    m_auto_complete_duration_isSet = !json[QString("auto_complete_duration")].isNull() && m_auto_complete_duration_isValid;

    m_cancel_reason_isValid = ::OpenAPI::fromJsonValue(m_cancel_reason, json[QString("cancel_reason")]);
    m_cancel_reason_isSet = !json[QString("cancel_reason")].isNull() && m_cancel_reason_isValid;

    m_canceled_at_isValid = ::OpenAPI::fromJsonValue(m_canceled_at, json[QString("canceled_at")]);
    m_canceled_at_isSet = !json[QString("canceled_at")].isNull() && m_canceled_at_isValid;

    m_curbside_pickup_details_isValid = ::OpenAPI::fromJsonValue(m_curbside_pickup_details, json[QString("curbside_pickup_details")]);
    m_curbside_pickup_details_isSet = !json[QString("curbside_pickup_details")].isNull() && m_curbside_pickup_details_isValid;

    m_expired_at_isValid = ::OpenAPI::fromJsonValue(m_expired_at, json[QString("expired_at")]);
    m_expired_at_isSet = !json[QString("expired_at")].isNull() && m_expired_at_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_is_curbside_pickup_isValid = ::OpenAPI::fromJsonValue(m_is_curbside_pickup, json[QString("is_curbside_pickup")]);
    m_is_curbside_pickup_isSet = !json[QString("is_curbside_pickup")].isNull() && m_is_curbside_pickup_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_picked_up_at_isValid = ::OpenAPI::fromJsonValue(m_picked_up_at, json[QString("picked_up_at")]);
    m_picked_up_at_isSet = !json[QString("picked_up_at")].isNull() && m_picked_up_at_isValid;

    m_pickup_at_isValid = ::OpenAPI::fromJsonValue(m_pickup_at, json[QString("pickup_at")]);
    m_pickup_at_isSet = !json[QString("pickup_at")].isNull() && m_pickup_at_isValid;

    m_pickup_window_duration_isValid = ::OpenAPI::fromJsonValue(m_pickup_window_duration, json[QString("pickup_window_duration")]);
    m_pickup_window_duration_isSet = !json[QString("pickup_window_duration")].isNull() && m_pickup_window_duration_isValid;

    m_placed_at_isValid = ::OpenAPI::fromJsonValue(m_placed_at, json[QString("placed_at")]);
    m_placed_at_isSet = !json[QString("placed_at")].isNull() && m_placed_at_isValid;

    m_prep_time_duration_isValid = ::OpenAPI::fromJsonValue(m_prep_time_duration, json[QString("prep_time_duration")]);
    m_prep_time_duration_isSet = !json[QString("prep_time_duration")].isNull() && m_prep_time_duration_isValid;

    m_ready_at_isValid = ::OpenAPI::fromJsonValue(m_ready_at, json[QString("ready_at")]);
    m_ready_at_isSet = !json[QString("ready_at")].isNull() && m_ready_at_isValid;

    m_recipient_isValid = ::OpenAPI::fromJsonValue(m_recipient, json[QString("recipient")]);
    m_recipient_isSet = !json[QString("recipient")].isNull() && m_recipient_isValid;

    m_rejected_at_isValid = ::OpenAPI::fromJsonValue(m_rejected_at, json[QString("rejected_at")]);
    m_rejected_at_isSet = !json[QString("rejected_at")].isNull() && m_rejected_at_isValid;

    m_schedule_type_isValid = ::OpenAPI::fromJsonValue(m_schedule_type, json[QString("schedule_type")]);
    m_schedule_type_isSet = !json[QString("schedule_type")].isNull() && m_schedule_type_isValid;
}

QString OAIOrderFulfillmentPickupDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderFulfillmentPickupDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_at_isSet) {
        obj.insert(QString("accepted_at"), ::OpenAPI::toJsonValue(m_accepted_at));
    }
    if (m_auto_complete_duration_isSet) {
        obj.insert(QString("auto_complete_duration"), ::OpenAPI::toJsonValue(m_auto_complete_duration));
    }
    if (m_cancel_reason_isSet) {
        obj.insert(QString("cancel_reason"), ::OpenAPI::toJsonValue(m_cancel_reason));
    }
    if (m_canceled_at_isSet) {
        obj.insert(QString("canceled_at"), ::OpenAPI::toJsonValue(m_canceled_at));
    }
    if (m_curbside_pickup_details.isSet()) {
        obj.insert(QString("curbside_pickup_details"), ::OpenAPI::toJsonValue(m_curbside_pickup_details));
    }
    if (m_expired_at_isSet) {
        obj.insert(QString("expired_at"), ::OpenAPI::toJsonValue(m_expired_at));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_is_curbside_pickup_isSet) {
        obj.insert(QString("is_curbside_pickup"), ::OpenAPI::toJsonValue(m_is_curbside_pickup));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_picked_up_at_isSet) {
        obj.insert(QString("picked_up_at"), ::OpenAPI::toJsonValue(m_picked_up_at));
    }
    if (m_pickup_at_isSet) {
        obj.insert(QString("pickup_at"), ::OpenAPI::toJsonValue(m_pickup_at));
    }
    if (m_pickup_window_duration_isSet) {
        obj.insert(QString("pickup_window_duration"), ::OpenAPI::toJsonValue(m_pickup_window_duration));
    }
    if (m_placed_at_isSet) {
        obj.insert(QString("placed_at"), ::OpenAPI::toJsonValue(m_placed_at));
    }
    if (m_prep_time_duration_isSet) {
        obj.insert(QString("prep_time_duration"), ::OpenAPI::toJsonValue(m_prep_time_duration));
    }
    if (m_ready_at_isSet) {
        obj.insert(QString("ready_at"), ::OpenAPI::toJsonValue(m_ready_at));
    }
    if (m_recipient.isSet()) {
        obj.insert(QString("recipient"), ::OpenAPI::toJsonValue(m_recipient));
    }
    if (m_rejected_at_isSet) {
        obj.insert(QString("rejected_at"), ::OpenAPI::toJsonValue(m_rejected_at));
    }
    if (m_schedule_type_isSet) {
        obj.insert(QString("schedule_type"), ::OpenAPI::toJsonValue(m_schedule_type));
    }
    return obj;
}

QString OAIOrderFulfillmentPickupDetails::getAcceptedAt() const {
    return m_accepted_at;
}
void OAIOrderFulfillmentPickupDetails::setAcceptedAt(const QString &accepted_at) {
    m_accepted_at = accepted_at;
    m_accepted_at_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_accepted_at_Set() const{
    return m_accepted_at_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_accepted_at_Valid() const{
    return m_accepted_at_isValid;
}

QString OAIOrderFulfillmentPickupDetails::getAutoCompleteDuration() const {
    return m_auto_complete_duration;
}
void OAIOrderFulfillmentPickupDetails::setAutoCompleteDuration(const QString &auto_complete_duration) {
    m_auto_complete_duration = auto_complete_duration;
    m_auto_complete_duration_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_auto_complete_duration_Set() const{
    return m_auto_complete_duration_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_auto_complete_duration_Valid() const{
    return m_auto_complete_duration_isValid;
}

QString OAIOrderFulfillmentPickupDetails::getCancelReason() const {
    return m_cancel_reason;
}
void OAIOrderFulfillmentPickupDetails::setCancelReason(const QString &cancel_reason) {
    m_cancel_reason = cancel_reason;
    m_cancel_reason_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_cancel_reason_Set() const{
    return m_cancel_reason_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_cancel_reason_Valid() const{
    return m_cancel_reason_isValid;
}

QString OAIOrderFulfillmentPickupDetails::getCanceledAt() const {
    return m_canceled_at;
}
void OAIOrderFulfillmentPickupDetails::setCanceledAt(const QString &canceled_at) {
    m_canceled_at = canceled_at;
    m_canceled_at_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_canceled_at_Set() const{
    return m_canceled_at_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_canceled_at_Valid() const{
    return m_canceled_at_isValid;
}

OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails OAIOrderFulfillmentPickupDetails::getCurbsidePickupDetails() const {
    return m_curbside_pickup_details;
}
void OAIOrderFulfillmentPickupDetails::setCurbsidePickupDetails(const OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails &curbside_pickup_details) {
    m_curbside_pickup_details = curbside_pickup_details;
    m_curbside_pickup_details_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_curbside_pickup_details_Set() const{
    return m_curbside_pickup_details_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_curbside_pickup_details_Valid() const{
    return m_curbside_pickup_details_isValid;
}

QString OAIOrderFulfillmentPickupDetails::getExpiredAt() const {
    return m_expired_at;
}
void OAIOrderFulfillmentPickupDetails::setExpiredAt(const QString &expired_at) {
    m_expired_at = expired_at;
    m_expired_at_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_expired_at_Set() const{
    return m_expired_at_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_expired_at_Valid() const{
    return m_expired_at_isValid;
}

QString OAIOrderFulfillmentPickupDetails::getExpiresAt() const {
    return m_expires_at;
}
void OAIOrderFulfillmentPickupDetails::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

bool OAIOrderFulfillmentPickupDetails::isIsCurbsidePickup() const {
    return m_is_curbside_pickup;
}
void OAIOrderFulfillmentPickupDetails::setIsCurbsidePickup(const bool &is_curbside_pickup) {
    m_is_curbside_pickup = is_curbside_pickup;
    m_is_curbside_pickup_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_is_curbside_pickup_Set() const{
    return m_is_curbside_pickup_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_is_curbside_pickup_Valid() const{
    return m_is_curbside_pickup_isValid;
}

QString OAIOrderFulfillmentPickupDetails::getNote() const {
    return m_note;
}
void OAIOrderFulfillmentPickupDetails::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_note_Set() const{
    return m_note_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIOrderFulfillmentPickupDetails::getPickedUpAt() const {
    return m_picked_up_at;
}
void OAIOrderFulfillmentPickupDetails::setPickedUpAt(const QString &picked_up_at) {
    m_picked_up_at = picked_up_at;
    m_picked_up_at_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_picked_up_at_Set() const{
    return m_picked_up_at_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_picked_up_at_Valid() const{
    return m_picked_up_at_isValid;
}

QString OAIOrderFulfillmentPickupDetails::getPickupAt() const {
    return m_pickup_at;
}
void OAIOrderFulfillmentPickupDetails::setPickupAt(const QString &pickup_at) {
    m_pickup_at = pickup_at;
    m_pickup_at_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_pickup_at_Set() const{
    return m_pickup_at_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_pickup_at_Valid() const{
    return m_pickup_at_isValid;
}

QString OAIOrderFulfillmentPickupDetails::getPickupWindowDuration() const {
    return m_pickup_window_duration;
}
void OAIOrderFulfillmentPickupDetails::setPickupWindowDuration(const QString &pickup_window_duration) {
    m_pickup_window_duration = pickup_window_duration;
    m_pickup_window_duration_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_pickup_window_duration_Set() const{
    return m_pickup_window_duration_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_pickup_window_duration_Valid() const{
    return m_pickup_window_duration_isValid;
}

QString OAIOrderFulfillmentPickupDetails::getPlacedAt() const {
    return m_placed_at;
}
void OAIOrderFulfillmentPickupDetails::setPlacedAt(const QString &placed_at) {
    m_placed_at = placed_at;
    m_placed_at_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_placed_at_Set() const{
    return m_placed_at_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_placed_at_Valid() const{
    return m_placed_at_isValid;
}

QString OAIOrderFulfillmentPickupDetails::getPrepTimeDuration() const {
    return m_prep_time_duration;
}
void OAIOrderFulfillmentPickupDetails::setPrepTimeDuration(const QString &prep_time_duration) {
    m_prep_time_duration = prep_time_duration;
    m_prep_time_duration_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_prep_time_duration_Set() const{
    return m_prep_time_duration_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_prep_time_duration_Valid() const{
    return m_prep_time_duration_isValid;
}

QString OAIOrderFulfillmentPickupDetails::getReadyAt() const {
    return m_ready_at;
}
void OAIOrderFulfillmentPickupDetails::setReadyAt(const QString &ready_at) {
    m_ready_at = ready_at;
    m_ready_at_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_ready_at_Set() const{
    return m_ready_at_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_ready_at_Valid() const{
    return m_ready_at_isValid;
}

OAIOrderFulfillmentRecipient OAIOrderFulfillmentPickupDetails::getRecipient() const {
    return m_recipient;
}
void OAIOrderFulfillmentPickupDetails::setRecipient(const OAIOrderFulfillmentRecipient &recipient) {
    m_recipient = recipient;
    m_recipient_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_recipient_Set() const{
    return m_recipient_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_recipient_Valid() const{
    return m_recipient_isValid;
}

QString OAIOrderFulfillmentPickupDetails::getRejectedAt() const {
    return m_rejected_at;
}
void OAIOrderFulfillmentPickupDetails::setRejectedAt(const QString &rejected_at) {
    m_rejected_at = rejected_at;
    m_rejected_at_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_rejected_at_Set() const{
    return m_rejected_at_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_rejected_at_Valid() const{
    return m_rejected_at_isValid;
}

QString OAIOrderFulfillmentPickupDetails::getScheduleType() const {
    return m_schedule_type;
}
void OAIOrderFulfillmentPickupDetails::setScheduleType(const QString &schedule_type) {
    m_schedule_type = schedule_type;
    m_schedule_type_isSet = true;
}

bool OAIOrderFulfillmentPickupDetails::is_schedule_type_Set() const{
    return m_schedule_type_isSet;
}

bool OAIOrderFulfillmentPickupDetails::is_schedule_type_Valid() const{
    return m_schedule_type_isValid;
}

bool OAIOrderFulfillmentPickupDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_complete_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curbside_pickup_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_curbside_pickup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_picked_up_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_window_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prep_time_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ready_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejected_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderFulfillmentPickupDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
