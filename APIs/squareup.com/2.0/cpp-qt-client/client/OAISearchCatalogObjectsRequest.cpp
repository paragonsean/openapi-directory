/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchCatalogObjectsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchCatalogObjectsRequest::OAISearchCatalogObjectsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchCatalogObjectsRequest::OAISearchCatalogObjectsRequest() {
    this->initializeModel();
}

OAISearchCatalogObjectsRequest::~OAISearchCatalogObjectsRequest() {}

void OAISearchCatalogObjectsRequest::initializeModel() {

    m_begin_time_isSet = false;
    m_begin_time_isValid = false;

    m_cursor_isSet = false;
    m_cursor_isValid = false;

    m_include_deleted_objects_isSet = false;
    m_include_deleted_objects_isValid = false;

    m_include_related_objects_isSet = false;
    m_include_related_objects_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_object_types_isSet = false;
    m_object_types_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAISearchCatalogObjectsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchCatalogObjectsRequest::fromJsonObject(QJsonObject json) {

    m_begin_time_isValid = ::OpenAPI::fromJsonValue(m_begin_time, json[QString("begin_time")]);
    m_begin_time_isSet = !json[QString("begin_time")].isNull() && m_begin_time_isValid;

    m_cursor_isValid = ::OpenAPI::fromJsonValue(m_cursor, json[QString("cursor")]);
    m_cursor_isSet = !json[QString("cursor")].isNull() && m_cursor_isValid;

    m_include_deleted_objects_isValid = ::OpenAPI::fromJsonValue(m_include_deleted_objects, json[QString("include_deleted_objects")]);
    m_include_deleted_objects_isSet = !json[QString("include_deleted_objects")].isNull() && m_include_deleted_objects_isValid;

    m_include_related_objects_isValid = ::OpenAPI::fromJsonValue(m_include_related_objects, json[QString("include_related_objects")]);
    m_include_related_objects_isSet = !json[QString("include_related_objects")].isNull() && m_include_related_objects_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_object_types_isValid = ::OpenAPI::fromJsonValue(m_object_types, json[QString("object_types")]);
    m_object_types_isSet = !json[QString("object_types")].isNull() && m_object_types_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAISearchCatalogObjectsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchCatalogObjectsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_begin_time_isSet) {
        obj.insert(QString("begin_time"), ::OpenAPI::toJsonValue(m_begin_time));
    }
    if (m_cursor_isSet) {
        obj.insert(QString("cursor"), ::OpenAPI::toJsonValue(m_cursor));
    }
    if (m_include_deleted_objects_isSet) {
        obj.insert(QString("include_deleted_objects"), ::OpenAPI::toJsonValue(m_include_deleted_objects));
    }
    if (m_include_related_objects_isSet) {
        obj.insert(QString("include_related_objects"), ::OpenAPI::toJsonValue(m_include_related_objects));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_object_types.size() > 0) {
        obj.insert(QString("object_types"), ::OpenAPI::toJsonValue(m_object_types));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

QString OAISearchCatalogObjectsRequest::getBeginTime() const {
    return m_begin_time;
}
void OAISearchCatalogObjectsRequest::setBeginTime(const QString &begin_time) {
    m_begin_time = begin_time;
    m_begin_time_isSet = true;
}

bool OAISearchCatalogObjectsRequest::is_begin_time_Set() const{
    return m_begin_time_isSet;
}

bool OAISearchCatalogObjectsRequest::is_begin_time_Valid() const{
    return m_begin_time_isValid;
}

QString OAISearchCatalogObjectsRequest::getCursor() const {
    return m_cursor;
}
void OAISearchCatalogObjectsRequest::setCursor(const QString &cursor) {
    m_cursor = cursor;
    m_cursor_isSet = true;
}

bool OAISearchCatalogObjectsRequest::is_cursor_Set() const{
    return m_cursor_isSet;
}

bool OAISearchCatalogObjectsRequest::is_cursor_Valid() const{
    return m_cursor_isValid;
}

bool OAISearchCatalogObjectsRequest::isIncludeDeletedObjects() const {
    return m_include_deleted_objects;
}
void OAISearchCatalogObjectsRequest::setIncludeDeletedObjects(const bool &include_deleted_objects) {
    m_include_deleted_objects = include_deleted_objects;
    m_include_deleted_objects_isSet = true;
}

bool OAISearchCatalogObjectsRequest::is_include_deleted_objects_Set() const{
    return m_include_deleted_objects_isSet;
}

bool OAISearchCatalogObjectsRequest::is_include_deleted_objects_Valid() const{
    return m_include_deleted_objects_isValid;
}

bool OAISearchCatalogObjectsRequest::isIncludeRelatedObjects() const {
    return m_include_related_objects;
}
void OAISearchCatalogObjectsRequest::setIncludeRelatedObjects(const bool &include_related_objects) {
    m_include_related_objects = include_related_objects;
    m_include_related_objects_isSet = true;
}

bool OAISearchCatalogObjectsRequest::is_include_related_objects_Set() const{
    return m_include_related_objects_isSet;
}

bool OAISearchCatalogObjectsRequest::is_include_related_objects_Valid() const{
    return m_include_related_objects_isValid;
}

qint32 OAISearchCatalogObjectsRequest::getLimit() const {
    return m_limit;
}
void OAISearchCatalogObjectsRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAISearchCatalogObjectsRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAISearchCatalogObjectsRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

QList<QString> OAISearchCatalogObjectsRequest::getObjectTypes() const {
    return m_object_types;
}
void OAISearchCatalogObjectsRequest::setObjectTypes(const QList<QString> &object_types) {
    m_object_types = object_types;
    m_object_types_isSet = true;
}

bool OAISearchCatalogObjectsRequest::is_object_types_Set() const{
    return m_object_types_isSet;
}

bool OAISearchCatalogObjectsRequest::is_object_types_Valid() const{
    return m_object_types_isValid;
}

OAICatalogQuery OAISearchCatalogObjectsRequest::getQuery() const {
    return m_query;
}
void OAISearchCatalogObjectsRequest::setQuery(const OAICatalogQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISearchCatalogObjectsRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAISearchCatalogObjectsRequest::is_query_Valid() const{
    return m_query_isValid;
}

bool OAISearchCatalogObjectsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_begin_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_deleted_objects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_related_objects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchCatalogObjectsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
