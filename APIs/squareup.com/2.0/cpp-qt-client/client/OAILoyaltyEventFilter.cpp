/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyEventFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyEventFilter::OAILoyaltyEventFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyEventFilter::OAILoyaltyEventFilter() {
    this->initializeModel();
}

OAILoyaltyEventFilter::~OAILoyaltyEventFilter() {}

void OAILoyaltyEventFilter::initializeModel() {

    m_date_time_filter_isSet = false;
    m_date_time_filter_isValid = false;

    m_location_filter_isSet = false;
    m_location_filter_isValid = false;

    m_loyalty_account_filter_isSet = false;
    m_loyalty_account_filter_isValid = false;

    m_order_filter_isSet = false;
    m_order_filter_isValid = false;

    m_type_filter_isSet = false;
    m_type_filter_isValid = false;
}

void OAILoyaltyEventFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyEventFilter::fromJsonObject(QJsonObject json) {

    m_date_time_filter_isValid = ::OpenAPI::fromJsonValue(m_date_time_filter, json[QString("date_time_filter")]);
    m_date_time_filter_isSet = !json[QString("date_time_filter")].isNull() && m_date_time_filter_isValid;

    m_location_filter_isValid = ::OpenAPI::fromJsonValue(m_location_filter, json[QString("location_filter")]);
    m_location_filter_isSet = !json[QString("location_filter")].isNull() && m_location_filter_isValid;

    m_loyalty_account_filter_isValid = ::OpenAPI::fromJsonValue(m_loyalty_account_filter, json[QString("loyalty_account_filter")]);
    m_loyalty_account_filter_isSet = !json[QString("loyalty_account_filter")].isNull() && m_loyalty_account_filter_isValid;

    m_order_filter_isValid = ::OpenAPI::fromJsonValue(m_order_filter, json[QString("order_filter")]);
    m_order_filter_isSet = !json[QString("order_filter")].isNull() && m_order_filter_isValid;

    m_type_filter_isValid = ::OpenAPI::fromJsonValue(m_type_filter, json[QString("type_filter")]);
    m_type_filter_isSet = !json[QString("type_filter")].isNull() && m_type_filter_isValid;
}

QString OAILoyaltyEventFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyEventFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_date_time_filter.isSet()) {
        obj.insert(QString("date_time_filter"), ::OpenAPI::toJsonValue(m_date_time_filter));
    }
    if (m_location_filter.isSet()) {
        obj.insert(QString("location_filter"), ::OpenAPI::toJsonValue(m_location_filter));
    }
    if (m_loyalty_account_filter.isSet()) {
        obj.insert(QString("loyalty_account_filter"), ::OpenAPI::toJsonValue(m_loyalty_account_filter));
    }
    if (m_order_filter.isSet()) {
        obj.insert(QString("order_filter"), ::OpenAPI::toJsonValue(m_order_filter));
    }
    if (m_type_filter.isSet()) {
        obj.insert(QString("type_filter"), ::OpenAPI::toJsonValue(m_type_filter));
    }
    return obj;
}

OAILoyaltyEventDateTimeFilter OAILoyaltyEventFilter::getDateTimeFilter() const {
    return m_date_time_filter;
}
void OAILoyaltyEventFilter::setDateTimeFilter(const OAILoyaltyEventDateTimeFilter &date_time_filter) {
    m_date_time_filter = date_time_filter;
    m_date_time_filter_isSet = true;
}

bool OAILoyaltyEventFilter::is_date_time_filter_Set() const{
    return m_date_time_filter_isSet;
}

bool OAILoyaltyEventFilter::is_date_time_filter_Valid() const{
    return m_date_time_filter_isValid;
}

OAILoyaltyEventLocationFilter OAILoyaltyEventFilter::getLocationFilter() const {
    return m_location_filter;
}
void OAILoyaltyEventFilter::setLocationFilter(const OAILoyaltyEventLocationFilter &location_filter) {
    m_location_filter = location_filter;
    m_location_filter_isSet = true;
}

bool OAILoyaltyEventFilter::is_location_filter_Set() const{
    return m_location_filter_isSet;
}

bool OAILoyaltyEventFilter::is_location_filter_Valid() const{
    return m_location_filter_isValid;
}

OAILoyaltyEventLoyaltyAccountFilter OAILoyaltyEventFilter::getLoyaltyAccountFilter() const {
    return m_loyalty_account_filter;
}
void OAILoyaltyEventFilter::setLoyaltyAccountFilter(const OAILoyaltyEventLoyaltyAccountFilter &loyalty_account_filter) {
    m_loyalty_account_filter = loyalty_account_filter;
    m_loyalty_account_filter_isSet = true;
}

bool OAILoyaltyEventFilter::is_loyalty_account_filter_Set() const{
    return m_loyalty_account_filter_isSet;
}

bool OAILoyaltyEventFilter::is_loyalty_account_filter_Valid() const{
    return m_loyalty_account_filter_isValid;
}

OAILoyaltyEventOrderFilter OAILoyaltyEventFilter::getOrderFilter() const {
    return m_order_filter;
}
void OAILoyaltyEventFilter::setOrderFilter(const OAILoyaltyEventOrderFilter &order_filter) {
    m_order_filter = order_filter;
    m_order_filter_isSet = true;
}

bool OAILoyaltyEventFilter::is_order_filter_Set() const{
    return m_order_filter_isSet;
}

bool OAILoyaltyEventFilter::is_order_filter_Valid() const{
    return m_order_filter_isValid;
}

OAILoyaltyEventTypeFilter OAILoyaltyEventFilter::getTypeFilter() const {
    return m_type_filter;
}
void OAILoyaltyEventFilter::setTypeFilter(const OAILoyaltyEventTypeFilter &type_filter) {
    m_type_filter = type_filter;
    m_type_filter_isSet = true;
}

bool OAILoyaltyEventFilter::is_type_filter_Set() const{
    return m_type_filter_isSet;
}

bool OAILoyaltyEventFilter::is_type_filter_Valid() const{
    return m_type_filter_isValid;
}

bool OAILoyaltyEventFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_time_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_account_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyEventFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
