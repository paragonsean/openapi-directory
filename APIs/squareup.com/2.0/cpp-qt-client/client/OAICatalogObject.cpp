/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogObject::OAICatalogObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogObject::OAICatalogObject() {
    this->initializeModel();
}

OAICatalogObject::~OAICatalogObject() {}

void OAICatalogObject::initializeModel() {

    m_absent_at_location_ids_isSet = false;
    m_absent_at_location_ids_isValid = false;

    m_catalog_v1_ids_isSet = false;
    m_catalog_v1_ids_isValid = false;

    m_category_data_isSet = false;
    m_category_data_isValid = false;

    m_custom_attribute_definition_data_isSet = false;
    m_custom_attribute_definition_data_isValid = false;

    m_custom_attribute_values_isSet = false;
    m_custom_attribute_values_isValid = false;

    m_discount_data_isSet = false;
    m_discount_data_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_data_isSet = false;
    m_image_data_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_is_deleted_isSet = false;
    m_is_deleted_isValid = false;

    m_item_data_isSet = false;
    m_item_data_isValid = false;

    m_item_option_data_isSet = false;
    m_item_option_data_isValid = false;

    m_item_option_value_data_isSet = false;
    m_item_option_value_data_isValid = false;

    m_item_variation_data_isSet = false;
    m_item_variation_data_isValid = false;

    m_measurement_unit_data_isSet = false;
    m_measurement_unit_data_isValid = false;

    m_modifier_data_isSet = false;
    m_modifier_data_isValid = false;

    m_modifier_list_data_isSet = false;
    m_modifier_list_data_isValid = false;

    m_present_at_all_locations_isSet = false;
    m_present_at_all_locations_isValid = false;

    m_present_at_location_ids_isSet = false;
    m_present_at_location_ids_isValid = false;

    m_pricing_rule_data_isSet = false;
    m_pricing_rule_data_isValid = false;

    m_product_set_data_isSet = false;
    m_product_set_data_isValid = false;

    m_quick_amounts_settings_data_isSet = false;
    m_quick_amounts_settings_data_isValid = false;

    m_subscription_plan_data_isSet = false;
    m_subscription_plan_data_isValid = false;

    m_tax_data_isSet = false;
    m_tax_data_isValid = false;

    m_time_period_data_isSet = false;
    m_time_period_data_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAICatalogObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogObject::fromJsonObject(QJsonObject json) {

    m_absent_at_location_ids_isValid = ::OpenAPI::fromJsonValue(m_absent_at_location_ids, json[QString("absent_at_location_ids")]);
    m_absent_at_location_ids_isSet = !json[QString("absent_at_location_ids")].isNull() && m_absent_at_location_ids_isValid;

    m_catalog_v1_ids_isValid = ::OpenAPI::fromJsonValue(m_catalog_v1_ids, json[QString("catalog_v1_ids")]);
    m_catalog_v1_ids_isSet = !json[QString("catalog_v1_ids")].isNull() && m_catalog_v1_ids_isValid;

    m_category_data_isValid = ::OpenAPI::fromJsonValue(m_category_data, json[QString("category_data")]);
    m_category_data_isSet = !json[QString("category_data")].isNull() && m_category_data_isValid;

    m_custom_attribute_definition_data_isValid = ::OpenAPI::fromJsonValue(m_custom_attribute_definition_data, json[QString("custom_attribute_definition_data")]);
    m_custom_attribute_definition_data_isSet = !json[QString("custom_attribute_definition_data")].isNull() && m_custom_attribute_definition_data_isValid;

    m_custom_attribute_values_isValid = ::OpenAPI::fromJsonValue(m_custom_attribute_values, json[QString("custom_attribute_values")]);
    m_custom_attribute_values_isSet = !json[QString("custom_attribute_values")].isNull() && m_custom_attribute_values_isValid;

    m_discount_data_isValid = ::OpenAPI::fromJsonValue(m_discount_data, json[QString("discount_data")]);
    m_discount_data_isSet = !json[QString("discount_data")].isNull() && m_discount_data_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_data_isValid = ::OpenAPI::fromJsonValue(m_image_data, json[QString("image_data")]);
    m_image_data_isSet = !json[QString("image_data")].isNull() && m_image_data_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("image_id")]);
    m_image_id_isSet = !json[QString("image_id")].isNull() && m_image_id_isValid;

    m_is_deleted_isValid = ::OpenAPI::fromJsonValue(m_is_deleted, json[QString("is_deleted")]);
    m_is_deleted_isSet = !json[QString("is_deleted")].isNull() && m_is_deleted_isValid;

    m_item_data_isValid = ::OpenAPI::fromJsonValue(m_item_data, json[QString("item_data")]);
    m_item_data_isSet = !json[QString("item_data")].isNull() && m_item_data_isValid;

    m_item_option_data_isValid = ::OpenAPI::fromJsonValue(m_item_option_data, json[QString("item_option_data")]);
    m_item_option_data_isSet = !json[QString("item_option_data")].isNull() && m_item_option_data_isValid;

    m_item_option_value_data_isValid = ::OpenAPI::fromJsonValue(m_item_option_value_data, json[QString("item_option_value_data")]);
    m_item_option_value_data_isSet = !json[QString("item_option_value_data")].isNull() && m_item_option_value_data_isValid;

    m_item_variation_data_isValid = ::OpenAPI::fromJsonValue(m_item_variation_data, json[QString("item_variation_data")]);
    m_item_variation_data_isSet = !json[QString("item_variation_data")].isNull() && m_item_variation_data_isValid;

    m_measurement_unit_data_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit_data, json[QString("measurement_unit_data")]);
    m_measurement_unit_data_isSet = !json[QString("measurement_unit_data")].isNull() && m_measurement_unit_data_isValid;

    m_modifier_data_isValid = ::OpenAPI::fromJsonValue(m_modifier_data, json[QString("modifier_data")]);
    m_modifier_data_isSet = !json[QString("modifier_data")].isNull() && m_modifier_data_isValid;

    m_modifier_list_data_isValid = ::OpenAPI::fromJsonValue(m_modifier_list_data, json[QString("modifier_list_data")]);
    m_modifier_list_data_isSet = !json[QString("modifier_list_data")].isNull() && m_modifier_list_data_isValid;

    m_present_at_all_locations_isValid = ::OpenAPI::fromJsonValue(m_present_at_all_locations, json[QString("present_at_all_locations")]);
    m_present_at_all_locations_isSet = !json[QString("present_at_all_locations")].isNull() && m_present_at_all_locations_isValid;

    m_present_at_location_ids_isValid = ::OpenAPI::fromJsonValue(m_present_at_location_ids, json[QString("present_at_location_ids")]);
    m_present_at_location_ids_isSet = !json[QString("present_at_location_ids")].isNull() && m_present_at_location_ids_isValid;

    m_pricing_rule_data_isValid = ::OpenAPI::fromJsonValue(m_pricing_rule_data, json[QString("pricing_rule_data")]);
    m_pricing_rule_data_isSet = !json[QString("pricing_rule_data")].isNull() && m_pricing_rule_data_isValid;

    m_product_set_data_isValid = ::OpenAPI::fromJsonValue(m_product_set_data, json[QString("product_set_data")]);
    m_product_set_data_isSet = !json[QString("product_set_data")].isNull() && m_product_set_data_isValid;

    m_quick_amounts_settings_data_isValid = ::OpenAPI::fromJsonValue(m_quick_amounts_settings_data, json[QString("quick_amounts_settings_data")]);
    m_quick_amounts_settings_data_isSet = !json[QString("quick_amounts_settings_data")].isNull() && m_quick_amounts_settings_data_isValid;

    m_subscription_plan_data_isValid = ::OpenAPI::fromJsonValue(m_subscription_plan_data, json[QString("subscription_plan_data")]);
    m_subscription_plan_data_isSet = !json[QString("subscription_plan_data")].isNull() && m_subscription_plan_data_isValid;

    m_tax_data_isValid = ::OpenAPI::fromJsonValue(m_tax_data, json[QString("tax_data")]);
    m_tax_data_isSet = !json[QString("tax_data")].isNull() && m_tax_data_isValid;

    m_time_period_data_isValid = ::OpenAPI::fromJsonValue(m_time_period_data, json[QString("time_period_data")]);
    m_time_period_data_isSet = !json[QString("time_period_data")].isNull() && m_time_period_data_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAICatalogObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogObject::asJsonObject() const {
    QJsonObject obj;
    if (m_absent_at_location_ids.size() > 0) {
        obj.insert(QString("absent_at_location_ids"), ::OpenAPI::toJsonValue(m_absent_at_location_ids));
    }
    if (m_catalog_v1_ids.size() > 0) {
        obj.insert(QString("catalog_v1_ids"), ::OpenAPI::toJsonValue(m_catalog_v1_ids));
    }
    if (m_category_data.isSet()) {
        obj.insert(QString("category_data"), ::OpenAPI::toJsonValue(m_category_data));
    }
    if (m_custom_attribute_definition_data.isSet()) {
        obj.insert(QString("custom_attribute_definition_data"), ::OpenAPI::toJsonValue(m_custom_attribute_definition_data));
    }
    if (m_custom_attribute_values.size() > 0) {
        obj.insert(QString("custom_attribute_values"), ::OpenAPI::toJsonValue(m_custom_attribute_values));
    }
    if (m_discount_data.isSet()) {
        obj.insert(QString("discount_data"), ::OpenAPI::toJsonValue(m_discount_data));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_data.isSet()) {
        obj.insert(QString("image_data"), ::OpenAPI::toJsonValue(m_image_data));
    }
    if (m_image_id_isSet) {
        obj.insert(QString("image_id"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_is_deleted_isSet) {
        obj.insert(QString("is_deleted"), ::OpenAPI::toJsonValue(m_is_deleted));
    }
    if (m_item_data.isSet()) {
        obj.insert(QString("item_data"), ::OpenAPI::toJsonValue(m_item_data));
    }
    if (m_item_option_data.isSet()) {
        obj.insert(QString("item_option_data"), ::OpenAPI::toJsonValue(m_item_option_data));
    }
    if (m_item_option_value_data.isSet()) {
        obj.insert(QString("item_option_value_data"), ::OpenAPI::toJsonValue(m_item_option_value_data));
    }
    if (m_item_variation_data.isSet()) {
        obj.insert(QString("item_variation_data"), ::OpenAPI::toJsonValue(m_item_variation_data));
    }
    if (m_measurement_unit_data.isSet()) {
        obj.insert(QString("measurement_unit_data"), ::OpenAPI::toJsonValue(m_measurement_unit_data));
    }
    if (m_modifier_data.isSet()) {
        obj.insert(QString("modifier_data"), ::OpenAPI::toJsonValue(m_modifier_data));
    }
    if (m_modifier_list_data.isSet()) {
        obj.insert(QString("modifier_list_data"), ::OpenAPI::toJsonValue(m_modifier_list_data));
    }
    if (m_present_at_all_locations_isSet) {
        obj.insert(QString("present_at_all_locations"), ::OpenAPI::toJsonValue(m_present_at_all_locations));
    }
    if (m_present_at_location_ids.size() > 0) {
        obj.insert(QString("present_at_location_ids"), ::OpenAPI::toJsonValue(m_present_at_location_ids));
    }
    if (m_pricing_rule_data.isSet()) {
        obj.insert(QString("pricing_rule_data"), ::OpenAPI::toJsonValue(m_pricing_rule_data));
    }
    if (m_product_set_data.isSet()) {
        obj.insert(QString("product_set_data"), ::OpenAPI::toJsonValue(m_product_set_data));
    }
    if (m_quick_amounts_settings_data.isSet()) {
        obj.insert(QString("quick_amounts_settings_data"), ::OpenAPI::toJsonValue(m_quick_amounts_settings_data));
    }
    if (m_subscription_plan_data.isSet()) {
        obj.insert(QString("subscription_plan_data"), ::OpenAPI::toJsonValue(m_subscription_plan_data));
    }
    if (m_tax_data.isSet()) {
        obj.insert(QString("tax_data"), ::OpenAPI::toJsonValue(m_tax_data));
    }
    if (m_time_period_data.isSet()) {
        obj.insert(QString("time_period_data"), ::OpenAPI::toJsonValue(m_time_period_data));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<QString> OAICatalogObject::getAbsentAtLocationIds() const {
    return m_absent_at_location_ids;
}
void OAICatalogObject::setAbsentAtLocationIds(const QList<QString> &absent_at_location_ids) {
    m_absent_at_location_ids = absent_at_location_ids;
    m_absent_at_location_ids_isSet = true;
}

bool OAICatalogObject::is_absent_at_location_ids_Set() const{
    return m_absent_at_location_ids_isSet;
}

bool OAICatalogObject::is_absent_at_location_ids_Valid() const{
    return m_absent_at_location_ids_isValid;
}

QList<OAICatalogV1Id> OAICatalogObject::getCatalogV1Ids() const {
    return m_catalog_v1_ids;
}
void OAICatalogObject::setCatalogV1Ids(const QList<OAICatalogV1Id> &catalog_v1_ids) {
    m_catalog_v1_ids = catalog_v1_ids;
    m_catalog_v1_ids_isSet = true;
}

bool OAICatalogObject::is_catalog_v1_ids_Set() const{
    return m_catalog_v1_ids_isSet;
}

bool OAICatalogObject::is_catalog_v1_ids_Valid() const{
    return m_catalog_v1_ids_isValid;
}

OAICatalogCategory OAICatalogObject::getCategoryData() const {
    return m_category_data;
}
void OAICatalogObject::setCategoryData(const OAICatalogCategory &category_data) {
    m_category_data = category_data;
    m_category_data_isSet = true;
}

bool OAICatalogObject::is_category_data_Set() const{
    return m_category_data_isSet;
}

bool OAICatalogObject::is_category_data_Valid() const{
    return m_category_data_isValid;
}

OAICatalogCustomAttributeDefinition OAICatalogObject::getCustomAttributeDefinitionData() const {
    return m_custom_attribute_definition_data;
}
void OAICatalogObject::setCustomAttributeDefinitionData(const OAICatalogCustomAttributeDefinition &custom_attribute_definition_data) {
    m_custom_attribute_definition_data = custom_attribute_definition_data;
    m_custom_attribute_definition_data_isSet = true;
}

bool OAICatalogObject::is_custom_attribute_definition_data_Set() const{
    return m_custom_attribute_definition_data_isSet;
}

bool OAICatalogObject::is_custom_attribute_definition_data_Valid() const{
    return m_custom_attribute_definition_data_isValid;
}

QMap<QString, OAICatalogCustomAttributeValue> OAICatalogObject::getCustomAttributeValues() const {
    return m_custom_attribute_values;
}
void OAICatalogObject::setCustomAttributeValues(const QMap<QString, OAICatalogCustomAttributeValue> &custom_attribute_values) {
    m_custom_attribute_values = custom_attribute_values;
    m_custom_attribute_values_isSet = true;
}

bool OAICatalogObject::is_custom_attribute_values_Set() const{
    return m_custom_attribute_values_isSet;
}

bool OAICatalogObject::is_custom_attribute_values_Valid() const{
    return m_custom_attribute_values_isValid;
}

OAICatalogDiscount OAICatalogObject::getDiscountData() const {
    return m_discount_data;
}
void OAICatalogObject::setDiscountData(const OAICatalogDiscount &discount_data) {
    m_discount_data = discount_data;
    m_discount_data_isSet = true;
}

bool OAICatalogObject::is_discount_data_Set() const{
    return m_discount_data_isSet;
}

bool OAICatalogObject::is_discount_data_Valid() const{
    return m_discount_data_isValid;
}

QString OAICatalogObject::getId() const {
    return m_id;
}
void OAICatalogObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICatalogObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAICatalogObject::is_id_Valid() const{
    return m_id_isValid;
}

OAICatalogImage OAICatalogObject::getImageData() const {
    return m_image_data;
}
void OAICatalogObject::setImageData(const OAICatalogImage &image_data) {
    m_image_data = image_data;
    m_image_data_isSet = true;
}

bool OAICatalogObject::is_image_data_Set() const{
    return m_image_data_isSet;
}

bool OAICatalogObject::is_image_data_Valid() const{
    return m_image_data_isValid;
}

QString OAICatalogObject::getImageId() const {
    return m_image_id;
}
void OAICatalogObject::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAICatalogObject::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAICatalogObject::is_image_id_Valid() const{
    return m_image_id_isValid;
}

bool OAICatalogObject::isIsDeleted() const {
    return m_is_deleted;
}
void OAICatalogObject::setIsDeleted(const bool &is_deleted) {
    m_is_deleted = is_deleted;
    m_is_deleted_isSet = true;
}

bool OAICatalogObject::is_is_deleted_Set() const{
    return m_is_deleted_isSet;
}

bool OAICatalogObject::is_is_deleted_Valid() const{
    return m_is_deleted_isValid;
}

OAICatalogItem OAICatalogObject::getItemData() const {
    return m_item_data;
}
void OAICatalogObject::setItemData(const OAICatalogItem &item_data) {
    m_item_data = item_data;
    m_item_data_isSet = true;
}

bool OAICatalogObject::is_item_data_Set() const{
    return m_item_data_isSet;
}

bool OAICatalogObject::is_item_data_Valid() const{
    return m_item_data_isValid;
}

OAICatalogItemOption OAICatalogObject::getItemOptionData() const {
    return m_item_option_data;
}
void OAICatalogObject::setItemOptionData(const OAICatalogItemOption &item_option_data) {
    m_item_option_data = item_option_data;
    m_item_option_data_isSet = true;
}

bool OAICatalogObject::is_item_option_data_Set() const{
    return m_item_option_data_isSet;
}

bool OAICatalogObject::is_item_option_data_Valid() const{
    return m_item_option_data_isValid;
}

OAICatalogItemOptionValue OAICatalogObject::getItemOptionValueData() const {
    return m_item_option_value_data;
}
void OAICatalogObject::setItemOptionValueData(const OAICatalogItemOptionValue &item_option_value_data) {
    m_item_option_value_data = item_option_value_data;
    m_item_option_value_data_isSet = true;
}

bool OAICatalogObject::is_item_option_value_data_Set() const{
    return m_item_option_value_data_isSet;
}

bool OAICatalogObject::is_item_option_value_data_Valid() const{
    return m_item_option_value_data_isValid;
}

OAICatalogItemVariation OAICatalogObject::getItemVariationData() const {
    return m_item_variation_data;
}
void OAICatalogObject::setItemVariationData(const OAICatalogItemVariation &item_variation_data) {
    m_item_variation_data = item_variation_data;
    m_item_variation_data_isSet = true;
}

bool OAICatalogObject::is_item_variation_data_Set() const{
    return m_item_variation_data_isSet;
}

bool OAICatalogObject::is_item_variation_data_Valid() const{
    return m_item_variation_data_isValid;
}

OAICatalogMeasurementUnit OAICatalogObject::getMeasurementUnitData() const {
    return m_measurement_unit_data;
}
void OAICatalogObject::setMeasurementUnitData(const OAICatalogMeasurementUnit &measurement_unit_data) {
    m_measurement_unit_data = measurement_unit_data;
    m_measurement_unit_data_isSet = true;
}

bool OAICatalogObject::is_measurement_unit_data_Set() const{
    return m_measurement_unit_data_isSet;
}

bool OAICatalogObject::is_measurement_unit_data_Valid() const{
    return m_measurement_unit_data_isValid;
}

OAICatalogModifier OAICatalogObject::getModifierData() const {
    return m_modifier_data;
}
void OAICatalogObject::setModifierData(const OAICatalogModifier &modifier_data) {
    m_modifier_data = modifier_data;
    m_modifier_data_isSet = true;
}

bool OAICatalogObject::is_modifier_data_Set() const{
    return m_modifier_data_isSet;
}

bool OAICatalogObject::is_modifier_data_Valid() const{
    return m_modifier_data_isValid;
}

OAICatalogModifierList OAICatalogObject::getModifierListData() const {
    return m_modifier_list_data;
}
void OAICatalogObject::setModifierListData(const OAICatalogModifierList &modifier_list_data) {
    m_modifier_list_data = modifier_list_data;
    m_modifier_list_data_isSet = true;
}

bool OAICatalogObject::is_modifier_list_data_Set() const{
    return m_modifier_list_data_isSet;
}

bool OAICatalogObject::is_modifier_list_data_Valid() const{
    return m_modifier_list_data_isValid;
}

bool OAICatalogObject::isPresentAtAllLocations() const {
    return m_present_at_all_locations;
}
void OAICatalogObject::setPresentAtAllLocations(const bool &present_at_all_locations) {
    m_present_at_all_locations = present_at_all_locations;
    m_present_at_all_locations_isSet = true;
}

bool OAICatalogObject::is_present_at_all_locations_Set() const{
    return m_present_at_all_locations_isSet;
}

bool OAICatalogObject::is_present_at_all_locations_Valid() const{
    return m_present_at_all_locations_isValid;
}

QList<QString> OAICatalogObject::getPresentAtLocationIds() const {
    return m_present_at_location_ids;
}
void OAICatalogObject::setPresentAtLocationIds(const QList<QString> &present_at_location_ids) {
    m_present_at_location_ids = present_at_location_ids;
    m_present_at_location_ids_isSet = true;
}

bool OAICatalogObject::is_present_at_location_ids_Set() const{
    return m_present_at_location_ids_isSet;
}

bool OAICatalogObject::is_present_at_location_ids_Valid() const{
    return m_present_at_location_ids_isValid;
}

OAICatalogPricingRule OAICatalogObject::getPricingRuleData() const {
    return m_pricing_rule_data;
}
void OAICatalogObject::setPricingRuleData(const OAICatalogPricingRule &pricing_rule_data) {
    m_pricing_rule_data = pricing_rule_data;
    m_pricing_rule_data_isSet = true;
}

bool OAICatalogObject::is_pricing_rule_data_Set() const{
    return m_pricing_rule_data_isSet;
}

bool OAICatalogObject::is_pricing_rule_data_Valid() const{
    return m_pricing_rule_data_isValid;
}

OAICatalogProductSet OAICatalogObject::getProductSetData() const {
    return m_product_set_data;
}
void OAICatalogObject::setProductSetData(const OAICatalogProductSet &product_set_data) {
    m_product_set_data = product_set_data;
    m_product_set_data_isSet = true;
}

bool OAICatalogObject::is_product_set_data_Set() const{
    return m_product_set_data_isSet;
}

bool OAICatalogObject::is_product_set_data_Valid() const{
    return m_product_set_data_isValid;
}

OAICatalogQuickAmountsSettings OAICatalogObject::getQuickAmountsSettingsData() const {
    return m_quick_amounts_settings_data;
}
void OAICatalogObject::setQuickAmountsSettingsData(const OAICatalogQuickAmountsSettings &quick_amounts_settings_data) {
    m_quick_amounts_settings_data = quick_amounts_settings_data;
    m_quick_amounts_settings_data_isSet = true;
}

bool OAICatalogObject::is_quick_amounts_settings_data_Set() const{
    return m_quick_amounts_settings_data_isSet;
}

bool OAICatalogObject::is_quick_amounts_settings_data_Valid() const{
    return m_quick_amounts_settings_data_isValid;
}

OAICatalogSubscriptionPlan OAICatalogObject::getSubscriptionPlanData() const {
    return m_subscription_plan_data;
}
void OAICatalogObject::setSubscriptionPlanData(const OAICatalogSubscriptionPlan &subscription_plan_data) {
    m_subscription_plan_data = subscription_plan_data;
    m_subscription_plan_data_isSet = true;
}

bool OAICatalogObject::is_subscription_plan_data_Set() const{
    return m_subscription_plan_data_isSet;
}

bool OAICatalogObject::is_subscription_plan_data_Valid() const{
    return m_subscription_plan_data_isValid;
}

OAICatalogTax OAICatalogObject::getTaxData() const {
    return m_tax_data;
}
void OAICatalogObject::setTaxData(const OAICatalogTax &tax_data) {
    m_tax_data = tax_data;
    m_tax_data_isSet = true;
}

bool OAICatalogObject::is_tax_data_Set() const{
    return m_tax_data_isSet;
}

bool OAICatalogObject::is_tax_data_Valid() const{
    return m_tax_data_isValid;
}

OAICatalogTimePeriod OAICatalogObject::getTimePeriodData() const {
    return m_time_period_data;
}
void OAICatalogObject::setTimePeriodData(const OAICatalogTimePeriod &time_period_data) {
    m_time_period_data = time_period_data;
    m_time_period_data_isSet = true;
}

bool OAICatalogObject::is_time_period_data_Set() const{
    return m_time_period_data_isSet;
}

bool OAICatalogObject::is_time_period_data_Valid() const{
    return m_time_period_data_isValid;
}

QString OAICatalogObject::getType() const {
    return m_type;
}
void OAICatalogObject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICatalogObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAICatalogObject::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICatalogObject::getUpdatedAt() const {
    return m_updated_at;
}
void OAICatalogObject::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICatalogObject::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICatalogObject::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

qint64 OAICatalogObject::getVersion() const {
    return m_version;
}
void OAICatalogObject::setVersion(const qint64 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICatalogObject::is_version_Set() const{
    return m_version_isSet;
}

bool OAICatalogObject::is_version_Valid() const{
    return m_version_isValid;
}

bool OAICatalogObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absent_at_location_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_v1_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attribute_definition_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attribute_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_option_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_option_value_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_variation_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modifier_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modifier_list_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_present_at_all_locations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_present_at_location_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_rule_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_set_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quick_amounts_settings_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_plan_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_period_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
