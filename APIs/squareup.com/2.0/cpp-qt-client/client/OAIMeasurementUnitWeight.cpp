/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeasurementUnitWeight.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeasurementUnitWeight::OAIMeasurementUnitWeight(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeasurementUnitWeight::OAIMeasurementUnitWeight() {
    this->initializeModel();
}

OAIMeasurementUnitWeight::~OAIMeasurementUnitWeight() {}

void OAIMeasurementUnitWeight::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMeasurementUnitWeight::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMeasurementUnitWeight::fromJson(QString jsonString) {
    
    if ( jsonString.compare("IMPERIAL_WEIGHT_OUNCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitWeight::IMPERIAL_WEIGHT_OUNCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPERIAL_POUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitWeight::IMPERIAL_POUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPERIAL_STONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitWeight::IMPERIAL_STONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METRIC_MILLIGRAM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitWeight::METRIC_MILLIGRAM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METRIC_GRAM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitWeight::METRIC_GRAM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METRIC_KILOGRAM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitWeight::METRIC_KILOGRAM;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMeasurementUnitWeight::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMeasurementUnitWeight::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMeasurementUnitWeight::IMPERIAL_WEIGHT_OUNCE:
            val = "IMPERIAL_WEIGHT_OUNCE";
            break;
        case eOAIMeasurementUnitWeight::IMPERIAL_POUND:
            val = "IMPERIAL_POUND";
            break;
        case eOAIMeasurementUnitWeight::IMPERIAL_STONE:
            val = "IMPERIAL_STONE";
            break;
        case eOAIMeasurementUnitWeight::METRIC_MILLIGRAM:
            val = "METRIC_MILLIGRAM";
            break;
        case eOAIMeasurementUnitWeight::METRIC_GRAM:
            val = "METRIC_GRAM";
            break;
        case eOAIMeasurementUnitWeight::METRIC_KILOGRAM:
            val = "METRIC_KILOGRAM";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMeasurementUnitWeight::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMeasurementUnitWeight::eOAIMeasurementUnitWeight OAIMeasurementUnitWeight::getValue() const {
    return m_value;
}

void OAIMeasurementUnitWeight::setValue(const OAIMeasurementUnitWeight::eOAIMeasurementUnitWeight& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMeasurementUnitWeight::isSet() const {
    
    return m_value_isSet;
}

bool OAIMeasurementUnitWeight::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
