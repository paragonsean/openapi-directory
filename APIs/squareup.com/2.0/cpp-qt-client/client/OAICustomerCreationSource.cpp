/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerCreationSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerCreationSource::OAICustomerCreationSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerCreationSource::OAICustomerCreationSource() {
    this->initializeModel();
}

OAICustomerCreationSource::~OAICustomerCreationSource() {}

void OAICustomerCreationSource::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICustomerCreationSource::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICustomerCreationSource::fromJson(QString jsonString) {
    
    if ( jsonString.compare("OTHER", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPOINTMENTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::APPOINTMENTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COUPON", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::COUPON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETION_RECOVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::DELETION_RECOVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIRECTORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::DIRECTORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EGIFTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::EGIFTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EMAIL_COLLECTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::EMAIL_COLLECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FEEDBACK", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::FEEDBACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::IMPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVOICES", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::INVOICES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOYALTY", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::LOYALTY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MARKETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::MARKETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MERGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::MERGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ONLINE_STORE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::ONLINE_STORE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSTANT_PROFILE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::INSTANT_PROFILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TERMINAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::TERMINAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("THIRD_PARTY", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::THIRD_PARTY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("THIRD_PARTY_IMPORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::THIRD_PARTY_IMPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNMERGE_RECOVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomerCreationSource::UNMERGE_RECOVERY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICustomerCreationSource::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICustomerCreationSource::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICustomerCreationSource::OTHER:
            val = "OTHER";
            break;
        case eOAICustomerCreationSource::APPOINTMENTS:
            val = "APPOINTMENTS";
            break;
        case eOAICustomerCreationSource::COUPON:
            val = "COUPON";
            break;
        case eOAICustomerCreationSource::DELETION_RECOVERY:
            val = "DELETION_RECOVERY";
            break;
        case eOAICustomerCreationSource::DIRECTORY:
            val = "DIRECTORY";
            break;
        case eOAICustomerCreationSource::EGIFTING:
            val = "EGIFTING";
            break;
        case eOAICustomerCreationSource::EMAIL_COLLECTION:
            val = "EMAIL_COLLECTION";
            break;
        case eOAICustomerCreationSource::FEEDBACK:
            val = "FEEDBACK";
            break;
        case eOAICustomerCreationSource::IMPORT:
            val = "IMPORT";
            break;
        case eOAICustomerCreationSource::INVOICES:
            val = "INVOICES";
            break;
        case eOAICustomerCreationSource::LOYALTY:
            val = "LOYALTY";
            break;
        case eOAICustomerCreationSource::MARKETING:
            val = "MARKETING";
            break;
        case eOAICustomerCreationSource::MERGE:
            val = "MERGE";
            break;
        case eOAICustomerCreationSource::ONLINE_STORE:
            val = "ONLINE_STORE";
            break;
        case eOAICustomerCreationSource::INSTANT_PROFILE:
            val = "INSTANT_PROFILE";
            break;
        case eOAICustomerCreationSource::TERMINAL:
            val = "TERMINAL";
            break;
        case eOAICustomerCreationSource::THIRD_PARTY:
            val = "THIRD_PARTY";
            break;
        case eOAICustomerCreationSource::THIRD_PARTY_IMPORT:
            val = "THIRD_PARTY_IMPORT";
            break;
        case eOAICustomerCreationSource::UNMERGE_RECOVERY:
            val = "UNMERGE_RECOVERY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICustomerCreationSource::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICustomerCreationSource::eOAICustomerCreationSource OAICustomerCreationSource::getValue() const {
    return m_value;
}

void OAICustomerCreationSource::setValue(const OAICustomerCreationSource::eOAICustomerCreationSource& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICustomerCreationSource::isSet() const {
    
    return m_value_isSet;
}

bool OAICustomerCreationSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
