/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerFilter::OAICustomerFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerFilter::OAICustomerFilter() {
    this->initializeModel();
}

OAICustomerFilter::~OAICustomerFilter() {}

void OAICustomerFilter::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creation_source_isSet = false;
    m_creation_source_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_group_ids_isSet = false;
    m_group_ids_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAICustomerFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerFilter::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_creation_source_isValid = ::OpenAPI::fromJsonValue(m_creation_source, json[QString("creation_source")]);
    m_creation_source_isSet = !json[QString("creation_source")].isNull() && m_creation_source_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("email_address")]);
    m_email_address_isSet = !json[QString("email_address")].isNull() && m_email_address_isValid;

    m_group_ids_isValid = ::OpenAPI::fromJsonValue(m_group_ids, json[QString("group_ids")]);
    m_group_ids_isSet = !json[QString("group_ids")].isNull() && m_group_ids_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phone_number")]);
    m_phone_number_isSet = !json[QString("phone_number")].isNull() && m_phone_number_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("reference_id")]);
    m_reference_id_isSet = !json[QString("reference_id")].isNull() && m_reference_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAICustomerFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at.isSet()) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creation_source.isSet()) {
        obj.insert(QString("creation_source"), ::OpenAPI::toJsonValue(m_creation_source));
    }
    if (m_email_address.isSet()) {
        obj.insert(QString("email_address"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_group_ids.isSet()) {
        obj.insert(QString("group_ids"), ::OpenAPI::toJsonValue(m_group_ids));
    }
    if (m_phone_number.isSet()) {
        obj.insert(QString("phone_number"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_reference_id.isSet()) {
        obj.insert(QString("reference_id"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_updated_at.isSet()) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAITimeRange OAICustomerFilter::getCreatedAt() const {
    return m_created_at;
}
void OAICustomerFilter::setCreatedAt(const OAITimeRange &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICustomerFilter::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICustomerFilter::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAICustomerCreationSourceFilter OAICustomerFilter::getCreationSource() const {
    return m_creation_source;
}
void OAICustomerFilter::setCreationSource(const OAICustomerCreationSourceFilter &creation_source) {
    m_creation_source = creation_source;
    m_creation_source_isSet = true;
}

bool OAICustomerFilter::is_creation_source_Set() const{
    return m_creation_source_isSet;
}

bool OAICustomerFilter::is_creation_source_Valid() const{
    return m_creation_source_isValid;
}

OAICustomerTextFilter OAICustomerFilter::getEmailAddress() const {
    return m_email_address;
}
void OAICustomerFilter::setEmailAddress(const OAICustomerTextFilter &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAICustomerFilter::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAICustomerFilter::is_email_address_Valid() const{
    return m_email_address_isValid;
}

OAIFilterValue OAICustomerFilter::getGroupIds() const {
    return m_group_ids;
}
void OAICustomerFilter::setGroupIds(const OAIFilterValue &group_ids) {
    m_group_ids = group_ids;
    m_group_ids_isSet = true;
}

bool OAICustomerFilter::is_group_ids_Set() const{
    return m_group_ids_isSet;
}

bool OAICustomerFilter::is_group_ids_Valid() const{
    return m_group_ids_isValid;
}

OAICustomerTextFilter OAICustomerFilter::getPhoneNumber() const {
    return m_phone_number;
}
void OAICustomerFilter::setPhoneNumber(const OAICustomerTextFilter &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAICustomerFilter::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAICustomerFilter::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

OAICustomerTextFilter OAICustomerFilter::getReferenceId() const {
    return m_reference_id;
}
void OAICustomerFilter::setReferenceId(const OAICustomerTextFilter &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAICustomerFilter::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAICustomerFilter::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

OAITimeRange OAICustomerFilter::getUpdatedAt() const {
    return m_updated_at;
}
void OAICustomerFilter::setUpdatedAt(const OAITimeRange &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICustomerFilter::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICustomerFilter::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAICustomerFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
