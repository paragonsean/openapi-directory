/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogQueryPrefix.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogQueryPrefix::OAICatalogQueryPrefix(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogQueryPrefix::OAICatalogQueryPrefix() {
    this->initializeModel();
}

OAICatalogQueryPrefix::~OAICatalogQueryPrefix() {}

void OAICatalogQueryPrefix::initializeModel() {

    m_attribute_name_isSet = false;
    m_attribute_name_isValid = false;

    m_attribute_prefix_isSet = false;
    m_attribute_prefix_isValid = false;
}

void OAICatalogQueryPrefix::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogQueryPrefix::fromJsonObject(QJsonObject json) {

    m_attribute_name_isValid = ::OpenAPI::fromJsonValue(m_attribute_name, json[QString("attribute_name")]);
    m_attribute_name_isSet = !json[QString("attribute_name")].isNull() && m_attribute_name_isValid;

    m_attribute_prefix_isValid = ::OpenAPI::fromJsonValue(m_attribute_prefix, json[QString("attribute_prefix")]);
    m_attribute_prefix_isSet = !json[QString("attribute_prefix")].isNull() && m_attribute_prefix_isValid;
}

QString OAICatalogQueryPrefix::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogQueryPrefix::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_name_isSet) {
        obj.insert(QString("attribute_name"), ::OpenAPI::toJsonValue(m_attribute_name));
    }
    if (m_attribute_prefix_isSet) {
        obj.insert(QString("attribute_prefix"), ::OpenAPI::toJsonValue(m_attribute_prefix));
    }
    return obj;
}

QString OAICatalogQueryPrefix::getAttributeName() const {
    return m_attribute_name;
}
void OAICatalogQueryPrefix::setAttributeName(const QString &attribute_name) {
    m_attribute_name = attribute_name;
    m_attribute_name_isSet = true;
}

bool OAICatalogQueryPrefix::is_attribute_name_Set() const{
    return m_attribute_name_isSet;
}

bool OAICatalogQueryPrefix::is_attribute_name_Valid() const{
    return m_attribute_name_isValid;
}

QString OAICatalogQueryPrefix::getAttributePrefix() const {
    return m_attribute_prefix;
}
void OAICatalogQueryPrefix::setAttributePrefix(const QString &attribute_prefix) {
    m_attribute_prefix = attribute_prefix;
    m_attribute_prefix_isSet = true;
}

bool OAICatalogQueryPrefix::is_attribute_prefix_Set() const{
    return m_attribute_prefix_isSet;
}

bool OAICatalogQueryPrefix::is_attribute_prefix_Valid() const{
    return m_attribute_prefix_isValid;
}

bool OAICatalogQueryPrefix::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogQueryPrefix::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attribute_name_isValid && m_attribute_prefix_isValid && true;
}

} // namespace OpenAPI
