/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogCustomAttributeDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogCustomAttributeDefinition::OAICatalogCustomAttributeDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogCustomAttributeDefinition::OAICatalogCustomAttributeDefinition() {
    this->initializeModel();
}

OAICatalogCustomAttributeDefinition::~OAICatalogCustomAttributeDefinition() {}

void OAICatalogCustomAttributeDefinition::initializeModel() {

    m_allowed_object_types_isSet = false;
    m_allowed_object_types_isValid = false;

    m_app_visibility_isSet = false;
    m_app_visibility_isValid = false;

    m_custom_attribute_usage_count_isSet = false;
    m_custom_attribute_usage_count_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_config_isSet = false;
    m_number_config_isValid = false;

    m_selection_config_isSet = false;
    m_selection_config_isValid = false;

    m_seller_visibility_isSet = false;
    m_seller_visibility_isValid = false;

    m_source_application_isSet = false;
    m_source_application_isValid = false;

    m_string_config_isSet = false;
    m_string_config_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICatalogCustomAttributeDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogCustomAttributeDefinition::fromJsonObject(QJsonObject json) {

    m_allowed_object_types_isValid = ::OpenAPI::fromJsonValue(m_allowed_object_types, json[QString("allowed_object_types")]);
    m_allowed_object_types_isSet = !json[QString("allowed_object_types")].isNull() && m_allowed_object_types_isValid;

    m_app_visibility_isValid = ::OpenAPI::fromJsonValue(m_app_visibility, json[QString("app_visibility")]);
    m_app_visibility_isSet = !json[QString("app_visibility")].isNull() && m_app_visibility_isValid;

    m_custom_attribute_usage_count_isValid = ::OpenAPI::fromJsonValue(m_custom_attribute_usage_count, json[QString("custom_attribute_usage_count")]);
    m_custom_attribute_usage_count_isSet = !json[QString("custom_attribute_usage_count")].isNull() && m_custom_attribute_usage_count_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_config_isValid = ::OpenAPI::fromJsonValue(m_number_config, json[QString("number_config")]);
    m_number_config_isSet = !json[QString("number_config")].isNull() && m_number_config_isValid;

    m_selection_config_isValid = ::OpenAPI::fromJsonValue(m_selection_config, json[QString("selection_config")]);
    m_selection_config_isSet = !json[QString("selection_config")].isNull() && m_selection_config_isValid;

    m_seller_visibility_isValid = ::OpenAPI::fromJsonValue(m_seller_visibility, json[QString("seller_visibility")]);
    m_seller_visibility_isSet = !json[QString("seller_visibility")].isNull() && m_seller_visibility_isValid;

    m_source_application_isValid = ::OpenAPI::fromJsonValue(m_source_application, json[QString("source_application")]);
    m_source_application_isSet = !json[QString("source_application")].isNull() && m_source_application_isValid;

    m_string_config_isValid = ::OpenAPI::fromJsonValue(m_string_config, json[QString("string_config")]);
    m_string_config_isSet = !json[QString("string_config")].isNull() && m_string_config_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICatalogCustomAttributeDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogCustomAttributeDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_object_types.size() > 0) {
        obj.insert(QString("allowed_object_types"), ::OpenAPI::toJsonValue(m_allowed_object_types));
    }
    if (m_app_visibility_isSet) {
        obj.insert(QString("app_visibility"), ::OpenAPI::toJsonValue(m_app_visibility));
    }
    if (m_custom_attribute_usage_count_isSet) {
        obj.insert(QString("custom_attribute_usage_count"), ::OpenAPI::toJsonValue(m_custom_attribute_usage_count));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_config.isSet()) {
        obj.insert(QString("number_config"), ::OpenAPI::toJsonValue(m_number_config));
    }
    if (m_selection_config.isSet()) {
        obj.insert(QString("selection_config"), ::OpenAPI::toJsonValue(m_selection_config));
    }
    if (m_seller_visibility_isSet) {
        obj.insert(QString("seller_visibility"), ::OpenAPI::toJsonValue(m_seller_visibility));
    }
    if (m_source_application.isSet()) {
        obj.insert(QString("source_application"), ::OpenAPI::toJsonValue(m_source_application));
    }
    if (m_string_config.isSet()) {
        obj.insert(QString("string_config"), ::OpenAPI::toJsonValue(m_string_config));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAICatalogCustomAttributeDefinition::getAllowedObjectTypes() const {
    return m_allowed_object_types;
}
void OAICatalogCustomAttributeDefinition::setAllowedObjectTypes(const QList<QString> &allowed_object_types) {
    m_allowed_object_types = allowed_object_types;
    m_allowed_object_types_isSet = true;
}

bool OAICatalogCustomAttributeDefinition::is_allowed_object_types_Set() const{
    return m_allowed_object_types_isSet;
}

bool OAICatalogCustomAttributeDefinition::is_allowed_object_types_Valid() const{
    return m_allowed_object_types_isValid;
}

QString OAICatalogCustomAttributeDefinition::getAppVisibility() const {
    return m_app_visibility;
}
void OAICatalogCustomAttributeDefinition::setAppVisibility(const QString &app_visibility) {
    m_app_visibility = app_visibility;
    m_app_visibility_isSet = true;
}

bool OAICatalogCustomAttributeDefinition::is_app_visibility_Set() const{
    return m_app_visibility_isSet;
}

bool OAICatalogCustomAttributeDefinition::is_app_visibility_Valid() const{
    return m_app_visibility_isValid;
}

qint32 OAICatalogCustomAttributeDefinition::getCustomAttributeUsageCount() const {
    return m_custom_attribute_usage_count;
}
void OAICatalogCustomAttributeDefinition::setCustomAttributeUsageCount(const qint32 &custom_attribute_usage_count) {
    m_custom_attribute_usage_count = custom_attribute_usage_count;
    m_custom_attribute_usage_count_isSet = true;
}

bool OAICatalogCustomAttributeDefinition::is_custom_attribute_usage_count_Set() const{
    return m_custom_attribute_usage_count_isSet;
}

bool OAICatalogCustomAttributeDefinition::is_custom_attribute_usage_count_Valid() const{
    return m_custom_attribute_usage_count_isValid;
}

QString OAICatalogCustomAttributeDefinition::getDescription() const {
    return m_description;
}
void OAICatalogCustomAttributeDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICatalogCustomAttributeDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAICatalogCustomAttributeDefinition::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICatalogCustomAttributeDefinition::getKey() const {
    return m_key;
}
void OAICatalogCustomAttributeDefinition::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICatalogCustomAttributeDefinition::is_key_Set() const{
    return m_key_isSet;
}

bool OAICatalogCustomAttributeDefinition::is_key_Valid() const{
    return m_key_isValid;
}

QString OAICatalogCustomAttributeDefinition::getName() const {
    return m_name;
}
void OAICatalogCustomAttributeDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICatalogCustomAttributeDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalogCustomAttributeDefinition::is_name_Valid() const{
    return m_name_isValid;
}

OAICatalogCustomAttributeDefinitionNumberConfig OAICatalogCustomAttributeDefinition::getNumberConfig() const {
    return m_number_config;
}
void OAICatalogCustomAttributeDefinition::setNumberConfig(const OAICatalogCustomAttributeDefinitionNumberConfig &number_config) {
    m_number_config = number_config;
    m_number_config_isSet = true;
}

bool OAICatalogCustomAttributeDefinition::is_number_config_Set() const{
    return m_number_config_isSet;
}

bool OAICatalogCustomAttributeDefinition::is_number_config_Valid() const{
    return m_number_config_isValid;
}

OAICatalogCustomAttributeDefinitionSelectionConfig OAICatalogCustomAttributeDefinition::getSelectionConfig() const {
    return m_selection_config;
}
void OAICatalogCustomAttributeDefinition::setSelectionConfig(const OAICatalogCustomAttributeDefinitionSelectionConfig &selection_config) {
    m_selection_config = selection_config;
    m_selection_config_isSet = true;
}

bool OAICatalogCustomAttributeDefinition::is_selection_config_Set() const{
    return m_selection_config_isSet;
}

bool OAICatalogCustomAttributeDefinition::is_selection_config_Valid() const{
    return m_selection_config_isValid;
}

QString OAICatalogCustomAttributeDefinition::getSellerVisibility() const {
    return m_seller_visibility;
}
void OAICatalogCustomAttributeDefinition::setSellerVisibility(const QString &seller_visibility) {
    m_seller_visibility = seller_visibility;
    m_seller_visibility_isSet = true;
}

bool OAICatalogCustomAttributeDefinition::is_seller_visibility_Set() const{
    return m_seller_visibility_isSet;
}

bool OAICatalogCustomAttributeDefinition::is_seller_visibility_Valid() const{
    return m_seller_visibility_isValid;
}

OAISourceApplication OAICatalogCustomAttributeDefinition::getSourceApplication() const {
    return m_source_application;
}
void OAICatalogCustomAttributeDefinition::setSourceApplication(const OAISourceApplication &source_application) {
    m_source_application = source_application;
    m_source_application_isSet = true;
}

bool OAICatalogCustomAttributeDefinition::is_source_application_Set() const{
    return m_source_application_isSet;
}

bool OAICatalogCustomAttributeDefinition::is_source_application_Valid() const{
    return m_source_application_isValid;
}

OAICatalogCustomAttributeDefinitionStringConfig OAICatalogCustomAttributeDefinition::getStringConfig() const {
    return m_string_config;
}
void OAICatalogCustomAttributeDefinition::setStringConfig(const OAICatalogCustomAttributeDefinitionStringConfig &string_config) {
    m_string_config = string_config;
    m_string_config_isSet = true;
}

bool OAICatalogCustomAttributeDefinition::is_string_config_Set() const{
    return m_string_config_isSet;
}

bool OAICatalogCustomAttributeDefinition::is_string_config_Valid() const{
    return m_string_config_isValid;
}

QString OAICatalogCustomAttributeDefinition::getType() const {
    return m_type;
}
void OAICatalogCustomAttributeDefinition::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICatalogCustomAttributeDefinition::is_type_Set() const{
    return m_type_isSet;
}

bool OAICatalogCustomAttributeDefinition::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICatalogCustomAttributeDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_object_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attribute_usage_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_application.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogCustomAttributeDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allowed_object_types_isValid && m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
