/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIV1TransactionsApi_H
#define OAI_OAIV1TransactionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIV1CreateRefundRequest.h"
#include "OAIV1Order.h"
#include "OAIV1Payment.h"
#include "OAIV1Refund.h"
#include "OAIV1Settlement.h"
#include "OAIV1UpdateOrderRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIV1TransactionsApi : public QObject {
    Q_OBJECT

public:
    OAIV1TransactionsApi(const int timeOut = 0);
    ~OAIV1TransactionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  oaiv1_create_refund_request OAIV1CreateRefundRequest [required]
    */
    virtual void createRefund(const QString &location_id, const OAIV1CreateRefundRequest &oaiv1_create_refund_request);

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  batch_token QString [optional]
    */
    virtual void listOrders(const QString &location_id, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &batch_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  begin_time QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  batch_token QString [optional]
    * @param[in]  include_partial bool [optional]
    */
    virtual void listPayments(const QString &location_id, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &begin_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &batch_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_partial = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  begin_time QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  batch_token QString [optional]
    */
    virtual void listRefunds(const QString &location_id, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &begin_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &batch_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  begin_time QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  status QString [optional]
    * @param[in]  batch_token QString [optional]
    */
    virtual void listSettlements(const QString &location_id, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &begin_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &batch_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void retrieveOrder(const QString &location_id, const QString &order_id);

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  payment_id QString [required]
    */
    virtual void retrievePayment(const QString &location_id, const QString &payment_id);

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  settlement_id QString [required]
    */
    virtual void retrieveSettlement(const QString &location_id, const QString &settlement_id);

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  oaiv1_update_order_request OAIV1UpdateOrderRequest [required]
    */
    virtual void updateOrder(const QString &location_id, const QString &order_id, const OAIV1UpdateOrderRequest &oaiv1_update_order_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createRefundCallback(OAIHttpRequestWorker *worker);
    void listOrdersCallback(OAIHttpRequestWorker *worker);
    void listPaymentsCallback(OAIHttpRequestWorker *worker);
    void listRefundsCallback(OAIHttpRequestWorker *worker);
    void listSettlementsCallback(OAIHttpRequestWorker *worker);
    void retrieveOrderCallback(OAIHttpRequestWorker *worker);
    void retrievePaymentCallback(OAIHttpRequestWorker *worker);
    void retrieveSettlementCallback(OAIHttpRequestWorker *worker);
    void updateOrderCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createRefundSignal(OAIV1Refund summary);
    void listOrdersSignal(QList<OAIV1Order> summary);
    void listPaymentsSignal(QList<OAIV1Payment> summary);
    void listRefundsSignal(QList<OAIV1Refund> summary);
    void listSettlementsSignal(QList<OAIV1Settlement> summary);
    void retrieveOrderSignal(OAIV1Order summary);
    void retrievePaymentSignal(OAIV1Payment summary);
    void retrieveSettlementSignal(OAIV1Settlement summary);
    void updateOrderSignal(OAIV1Order summary);


    void createRefundSignalFull(OAIHttpRequestWorker *worker, OAIV1Refund summary);
    void listOrdersSignalFull(OAIHttpRequestWorker *worker, QList<OAIV1Order> summary);
    void listPaymentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIV1Payment> summary);
    void listRefundsSignalFull(OAIHttpRequestWorker *worker, QList<OAIV1Refund> summary);
    void listSettlementsSignalFull(OAIHttpRequestWorker *worker, QList<OAIV1Settlement> summary);
    void retrieveOrderSignalFull(OAIHttpRequestWorker *worker, OAIV1Order summary);
    void retrievePaymentSignalFull(OAIHttpRequestWorker *worker, OAIV1Payment summary);
    void retrieveSettlementSignalFull(OAIHttpRequestWorker *worker, OAIV1Settlement summary);
    void updateOrderSignalFull(OAIHttpRequestWorker *worker, OAIV1Order summary);

    Q_DECL_DEPRECATED_X("Use createRefundSignalError() instead")
    void createRefundSignalE(OAIV1Refund summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRefundSignalError(OAIV1Refund summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOrdersSignalError() instead")
    void listOrdersSignalE(QList<OAIV1Order> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listOrdersSignalError(QList<OAIV1Order> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPaymentsSignalError() instead")
    void listPaymentsSignalE(QList<OAIV1Payment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPaymentsSignalError(QList<OAIV1Payment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRefundsSignalError() instead")
    void listRefundsSignalE(QList<OAIV1Refund> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRefundsSignalError(QList<OAIV1Refund> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSettlementsSignalError() instead")
    void listSettlementsSignalE(QList<OAIV1Settlement> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSettlementsSignalError(QList<OAIV1Settlement> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveOrderSignalError() instead")
    void retrieveOrderSignalE(OAIV1Order summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveOrderSignalError(OAIV1Order summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrievePaymentSignalError() instead")
    void retrievePaymentSignalE(OAIV1Payment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievePaymentSignalError(OAIV1Payment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveSettlementSignalError() instead")
    void retrieveSettlementSignalE(OAIV1Settlement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveSettlementSignalError(OAIV1Settlement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderSignalError() instead")
    void updateOrderSignalE(OAIV1Order summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderSignalError(OAIV1Order summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createRefundSignalErrorFull() instead")
    void createRefundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRefundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOrdersSignalErrorFull() instead")
    void listOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPaymentsSignalErrorFull() instead")
    void listPaymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPaymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRefundsSignalErrorFull() instead")
    void listRefundsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRefundsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSettlementsSignalErrorFull() instead")
    void listSettlementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSettlementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveOrderSignalErrorFull() instead")
    void retrieveOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrievePaymentSignalErrorFull() instead")
    void retrievePaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievePaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveSettlementSignalErrorFull() instead")
    void retrieveSettlementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveSettlementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderSignalErrorFull() instead")
    void updateOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
