/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChargeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChargeRequest::OAIChargeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChargeRequest::OAIChargeRequest() {
    this->initializeModel();
}

OAIChargeRequest::~OAIChargeRequest() {}

void OAIChargeRequest::initializeModel() {

    m_additional_recipients_isSet = false;
    m_additional_recipients_isValid = false;

    m_amount_money_isSet = false;
    m_amount_money_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_buyer_email_address_isSet = false;
    m_buyer_email_address_isValid = false;

    m_card_nonce_isSet = false;
    m_card_nonce_isValid = false;

    m_customer_card_id_isSet = false;
    m_customer_card_id_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_delay_capture_isSet = false;
    m_delay_capture_isValid = false;

    m_idempotency_key_isSet = false;
    m_idempotency_key_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_shipping_address_isSet = false;
    m_shipping_address_isValid = false;

    m_verification_token_isSet = false;
    m_verification_token_isValid = false;
}

void OAIChargeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChargeRequest::fromJsonObject(QJsonObject json) {

    m_additional_recipients_isValid = ::OpenAPI::fromJsonValue(m_additional_recipients, json[QString("additional_recipients")]);
    m_additional_recipients_isSet = !json[QString("additional_recipients")].isNull() && m_additional_recipients_isValid;

    m_amount_money_isValid = ::OpenAPI::fromJsonValue(m_amount_money, json[QString("amount_money")]);
    m_amount_money_isSet = !json[QString("amount_money")].isNull() && m_amount_money_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billing_address")]);
    m_billing_address_isSet = !json[QString("billing_address")].isNull() && m_billing_address_isValid;

    m_buyer_email_address_isValid = ::OpenAPI::fromJsonValue(m_buyer_email_address, json[QString("buyer_email_address")]);
    m_buyer_email_address_isSet = !json[QString("buyer_email_address")].isNull() && m_buyer_email_address_isValid;

    m_card_nonce_isValid = ::OpenAPI::fromJsonValue(m_card_nonce, json[QString("card_nonce")]);
    m_card_nonce_isSet = !json[QString("card_nonce")].isNull() && m_card_nonce_isValid;

    m_customer_card_id_isValid = ::OpenAPI::fromJsonValue(m_customer_card_id, json[QString("customer_card_id")]);
    m_customer_card_id_isSet = !json[QString("customer_card_id")].isNull() && m_customer_card_id_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_delay_capture_isValid = ::OpenAPI::fromJsonValue(m_delay_capture, json[QString("delay_capture")]);
    m_delay_capture_isSet = !json[QString("delay_capture")].isNull() && m_delay_capture_isValid;

    m_idempotency_key_isValid = ::OpenAPI::fromJsonValue(m_idempotency_key, json[QString("idempotency_key")]);
    m_idempotency_key_isSet = !json[QString("idempotency_key")].isNull() && m_idempotency_key_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("reference_id")]);
    m_reference_id_isSet = !json[QString("reference_id")].isNull() && m_reference_id_isValid;

    m_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_shipping_address, json[QString("shipping_address")]);
    m_shipping_address_isSet = !json[QString("shipping_address")].isNull() && m_shipping_address_isValid;

    m_verification_token_isValid = ::OpenAPI::fromJsonValue(m_verification_token, json[QString("verification_token")]);
    m_verification_token_isSet = !json[QString("verification_token")].isNull() && m_verification_token_isValid;
}

QString OAIChargeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChargeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_recipients.size() > 0) {
        obj.insert(QString("additional_recipients"), ::OpenAPI::toJsonValue(m_additional_recipients));
    }
    if (m_amount_money.isSet()) {
        obj.insert(QString("amount_money"), ::OpenAPI::toJsonValue(m_amount_money));
    }
    if (m_billing_address.isSet()) {
        obj.insert(QString("billing_address"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_buyer_email_address_isSet) {
        obj.insert(QString("buyer_email_address"), ::OpenAPI::toJsonValue(m_buyer_email_address));
    }
    if (m_card_nonce_isSet) {
        obj.insert(QString("card_nonce"), ::OpenAPI::toJsonValue(m_card_nonce));
    }
    if (m_customer_card_id_isSet) {
        obj.insert(QString("customer_card_id"), ::OpenAPI::toJsonValue(m_customer_card_id));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_delay_capture_isSet) {
        obj.insert(QString("delay_capture"), ::OpenAPI::toJsonValue(m_delay_capture));
    }
    if (m_idempotency_key_isSet) {
        obj.insert(QString("idempotency_key"), ::OpenAPI::toJsonValue(m_idempotency_key));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("reference_id"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_shipping_address.isSet()) {
        obj.insert(QString("shipping_address"), ::OpenAPI::toJsonValue(m_shipping_address));
    }
    if (m_verification_token_isSet) {
        obj.insert(QString("verification_token"), ::OpenAPI::toJsonValue(m_verification_token));
    }
    return obj;
}

QList<OAIAdditionalRecipient> OAIChargeRequest::getAdditionalRecipients() const {
    return m_additional_recipients;
}
void OAIChargeRequest::setAdditionalRecipients(const QList<OAIAdditionalRecipient> &additional_recipients) {
    m_additional_recipients = additional_recipients;
    m_additional_recipients_isSet = true;
}

bool OAIChargeRequest::is_additional_recipients_Set() const{
    return m_additional_recipients_isSet;
}

bool OAIChargeRequest::is_additional_recipients_Valid() const{
    return m_additional_recipients_isValid;
}

OAIMoney OAIChargeRequest::getAmountMoney() const {
    return m_amount_money;
}
void OAIChargeRequest::setAmountMoney(const OAIMoney &amount_money) {
    m_amount_money = amount_money;
    m_amount_money_isSet = true;
}

bool OAIChargeRequest::is_amount_money_Set() const{
    return m_amount_money_isSet;
}

bool OAIChargeRequest::is_amount_money_Valid() const{
    return m_amount_money_isValid;
}

OAIAddress OAIChargeRequest::getBillingAddress() const {
    return m_billing_address;
}
void OAIChargeRequest::setBillingAddress(const OAIAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIChargeRequest::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIChargeRequest::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

QString OAIChargeRequest::getBuyerEmailAddress() const {
    return m_buyer_email_address;
}
void OAIChargeRequest::setBuyerEmailAddress(const QString &buyer_email_address) {
    m_buyer_email_address = buyer_email_address;
    m_buyer_email_address_isSet = true;
}

bool OAIChargeRequest::is_buyer_email_address_Set() const{
    return m_buyer_email_address_isSet;
}

bool OAIChargeRequest::is_buyer_email_address_Valid() const{
    return m_buyer_email_address_isValid;
}

QString OAIChargeRequest::getCardNonce() const {
    return m_card_nonce;
}
void OAIChargeRequest::setCardNonce(const QString &card_nonce) {
    m_card_nonce = card_nonce;
    m_card_nonce_isSet = true;
}

bool OAIChargeRequest::is_card_nonce_Set() const{
    return m_card_nonce_isSet;
}

bool OAIChargeRequest::is_card_nonce_Valid() const{
    return m_card_nonce_isValid;
}

QString OAIChargeRequest::getCustomerCardId() const {
    return m_customer_card_id;
}
void OAIChargeRequest::setCustomerCardId(const QString &customer_card_id) {
    m_customer_card_id = customer_card_id;
    m_customer_card_id_isSet = true;
}

bool OAIChargeRequest::is_customer_card_id_Set() const{
    return m_customer_card_id_isSet;
}

bool OAIChargeRequest::is_customer_card_id_Valid() const{
    return m_customer_card_id_isValid;
}

QString OAIChargeRequest::getCustomerId() const {
    return m_customer_id;
}
void OAIChargeRequest::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIChargeRequest::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIChargeRequest::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

bool OAIChargeRequest::isDelayCapture() const {
    return m_delay_capture;
}
void OAIChargeRequest::setDelayCapture(const bool &delay_capture) {
    m_delay_capture = delay_capture;
    m_delay_capture_isSet = true;
}

bool OAIChargeRequest::is_delay_capture_Set() const{
    return m_delay_capture_isSet;
}

bool OAIChargeRequest::is_delay_capture_Valid() const{
    return m_delay_capture_isValid;
}

QString OAIChargeRequest::getIdempotencyKey() const {
    return m_idempotency_key;
}
void OAIChargeRequest::setIdempotencyKey(const QString &idempotency_key) {
    m_idempotency_key = idempotency_key;
    m_idempotency_key_isSet = true;
}

bool OAIChargeRequest::is_idempotency_key_Set() const{
    return m_idempotency_key_isSet;
}

bool OAIChargeRequest::is_idempotency_key_Valid() const{
    return m_idempotency_key_isValid;
}

QString OAIChargeRequest::getNote() const {
    return m_note;
}
void OAIChargeRequest::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIChargeRequest::is_note_Set() const{
    return m_note_isSet;
}

bool OAIChargeRequest::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIChargeRequest::getOrderId() const {
    return m_order_id;
}
void OAIChargeRequest::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIChargeRequest::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIChargeRequest::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIChargeRequest::getReferenceId() const {
    return m_reference_id;
}
void OAIChargeRequest::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIChargeRequest::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIChargeRequest::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

OAIAddress OAIChargeRequest::getShippingAddress() const {
    return m_shipping_address;
}
void OAIChargeRequest::setShippingAddress(const OAIAddress &shipping_address) {
    m_shipping_address = shipping_address;
    m_shipping_address_isSet = true;
}

bool OAIChargeRequest::is_shipping_address_Set() const{
    return m_shipping_address_isSet;
}

bool OAIChargeRequest::is_shipping_address_Valid() const{
    return m_shipping_address_isValid;
}

QString OAIChargeRequest::getVerificationToken() const {
    return m_verification_token;
}
void OAIChargeRequest::setVerificationToken(const QString &verification_token) {
    m_verification_token = verification_token;
    m_verification_token_isSet = true;
}

bool OAIChargeRequest::is_verification_token_Set() const{
    return m_verification_token_isSet;
}

bool OAIChargeRequest::is_verification_token_Valid() const{
    return m_verification_token_isValid;
}

bool OAIChargeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_nonce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_capture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChargeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_money_isValid && m_idempotency_key_isValid && true;
}

} // namespace OpenAPI
