/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailability::OAIAvailability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailability::OAIAvailability() {
    this->initializeModel();
}

OAIAvailability::~OAIAvailability() {}

void OAIAvailability::initializeModel() {

    m_appointment_segments_isSet = false;
    m_appointment_segments_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_start_at_isSet = false;
    m_start_at_isValid = false;
}

void OAIAvailability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailability::fromJsonObject(QJsonObject json) {

    m_appointment_segments_isValid = ::OpenAPI::fromJsonValue(m_appointment_segments, json[QString("appointment_segments")]);
    m_appointment_segments_isSet = !json[QString("appointment_segments")].isNull() && m_appointment_segments_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_start_at_isValid = ::OpenAPI::fromJsonValue(m_start_at, json[QString("start_at")]);
    m_start_at_isSet = !json[QString("start_at")].isNull() && m_start_at_isValid;
}

QString OAIAvailability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailability::asJsonObject() const {
    QJsonObject obj;
    if (m_appointment_segments.size() > 0) {
        obj.insert(QString("appointment_segments"), ::OpenAPI::toJsonValue(m_appointment_segments));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_start_at_isSet) {
        obj.insert(QString("start_at"), ::OpenAPI::toJsonValue(m_start_at));
    }
    return obj;
}

QList<OAIAppointmentSegment> OAIAvailability::getAppointmentSegments() const {
    return m_appointment_segments;
}
void OAIAvailability::setAppointmentSegments(const QList<OAIAppointmentSegment> &appointment_segments) {
    m_appointment_segments = appointment_segments;
    m_appointment_segments_isSet = true;
}

bool OAIAvailability::is_appointment_segments_Set() const{
    return m_appointment_segments_isSet;
}

bool OAIAvailability::is_appointment_segments_Valid() const{
    return m_appointment_segments_isValid;
}

QString OAIAvailability::getLocationId() const {
    return m_location_id;
}
void OAIAvailability::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIAvailability::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIAvailability::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIAvailability::getStartAt() const {
    return m_start_at;
}
void OAIAvailability::setStartAt(const QString &start_at) {
    m_start_at = start_at;
    m_start_at_isSet = true;
}

bool OAIAvailability::is_start_at_Set() const{
    return m_start_at_isSet;
}

bool OAIAvailability::is_start_at_Valid() const{
    return m_start_at_isValid;
}

bool OAIAvailability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appointment_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
