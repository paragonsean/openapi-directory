/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDisputesApi_H
#define OAI_OAIDisputesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAcceptDisputeResponse.h"
#include "OAICreateDisputeEvidenceTextRequest.h"
#include "OAICreateDisputeEvidenceTextResponse.h"
#include "OAIDeleteDisputeEvidenceResponse.h"
#include "OAIListDisputeEvidenceResponse.h"
#include "OAIListDisputesResponse.h"
#include "OAIRetrieveDisputeEvidenceResponse.h"
#include "OAIRetrieveDisputeResponse.h"
#include "OAISubmitEvidenceResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDisputesApi : public QObject {
    Q_OBJECT

public:
    OAIDisputesApi(const int timeOut = 0);
    ~OAIDisputesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  dispute_id QString [required]
    */
    virtual void acceptDispute(const QString &dispute_id);

    /**
    * @param[in]  dispute_id QString [required]
    * @param[in]  oai_create_dispute_evidence_text_request OAICreateDisputeEvidenceTextRequest [required]
    */
    virtual void createDisputeEvidenceText(const QString &dispute_id, const OAICreateDisputeEvidenceTextRequest &oai_create_dispute_evidence_text_request);

    /**
    * @param[in]  dispute_id QString [required]
    * @param[in]  evidence_id QString [required]
    */
    virtual void deleteDisputeEvidence(const QString &dispute_id, const QString &evidence_id);

    /**
    * @param[in]  dispute_id QString [required]
    * @param[in]  cursor QString [optional]
    */
    virtual void listDisputeEvidence(const QString &dispute_id, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  states QString [optional]
    * @param[in]  location_id QString [optional]
    */
    virtual void listDisputes(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &states = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dispute_id QString [required]
    */
    virtual void retrieveDispute(const QString &dispute_id);

    /**
    * @param[in]  dispute_id QString [required]
    * @param[in]  evidence_id QString [required]
    */
    virtual void retrieveDisputeEvidence(const QString &dispute_id, const QString &evidence_id);

    /**
    * @param[in]  dispute_id QString [required]
    */
    virtual void submitEvidence(const QString &dispute_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void acceptDisputeCallback(OAIHttpRequestWorker *worker);
    void createDisputeEvidenceTextCallback(OAIHttpRequestWorker *worker);
    void deleteDisputeEvidenceCallback(OAIHttpRequestWorker *worker);
    void listDisputeEvidenceCallback(OAIHttpRequestWorker *worker);
    void listDisputesCallback(OAIHttpRequestWorker *worker);
    void retrieveDisputeCallback(OAIHttpRequestWorker *worker);
    void retrieveDisputeEvidenceCallback(OAIHttpRequestWorker *worker);
    void submitEvidenceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void acceptDisputeSignal(OAIAcceptDisputeResponse summary);
    void createDisputeEvidenceTextSignal(OAICreateDisputeEvidenceTextResponse summary);
    void deleteDisputeEvidenceSignal(OAIDeleteDisputeEvidenceResponse summary);
    void listDisputeEvidenceSignal(OAIListDisputeEvidenceResponse summary);
    void listDisputesSignal(OAIListDisputesResponse summary);
    void retrieveDisputeSignal(OAIRetrieveDisputeResponse summary);
    void retrieveDisputeEvidenceSignal(OAIRetrieveDisputeEvidenceResponse summary);
    void submitEvidenceSignal(OAISubmitEvidenceResponse summary);


    void acceptDisputeSignalFull(OAIHttpRequestWorker *worker, OAIAcceptDisputeResponse summary);
    void createDisputeEvidenceTextSignalFull(OAIHttpRequestWorker *worker, OAICreateDisputeEvidenceTextResponse summary);
    void deleteDisputeEvidenceSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDisputeEvidenceResponse summary);
    void listDisputeEvidenceSignalFull(OAIHttpRequestWorker *worker, OAIListDisputeEvidenceResponse summary);
    void listDisputesSignalFull(OAIHttpRequestWorker *worker, OAIListDisputesResponse summary);
    void retrieveDisputeSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveDisputeResponse summary);
    void retrieveDisputeEvidenceSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveDisputeEvidenceResponse summary);
    void submitEvidenceSignalFull(OAIHttpRequestWorker *worker, OAISubmitEvidenceResponse summary);

    Q_DECL_DEPRECATED_X("Use acceptDisputeSignalError() instead")
    void acceptDisputeSignalE(OAIAcceptDisputeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptDisputeSignalError(OAIAcceptDisputeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDisputeEvidenceTextSignalError() instead")
    void createDisputeEvidenceTextSignalE(OAICreateDisputeEvidenceTextResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDisputeEvidenceTextSignalError(OAICreateDisputeEvidenceTextResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDisputeEvidenceSignalError() instead")
    void deleteDisputeEvidenceSignalE(OAIDeleteDisputeEvidenceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDisputeEvidenceSignalError(OAIDeleteDisputeEvidenceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDisputeEvidenceSignalError() instead")
    void listDisputeEvidenceSignalE(OAIListDisputeEvidenceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDisputeEvidenceSignalError(OAIListDisputeEvidenceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDisputesSignalError() instead")
    void listDisputesSignalE(OAIListDisputesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDisputesSignalError(OAIListDisputesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveDisputeSignalError() instead")
    void retrieveDisputeSignalE(OAIRetrieveDisputeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveDisputeSignalError(OAIRetrieveDisputeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveDisputeEvidenceSignalError() instead")
    void retrieveDisputeEvidenceSignalE(OAIRetrieveDisputeEvidenceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveDisputeEvidenceSignalError(OAIRetrieveDisputeEvidenceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitEvidenceSignalError() instead")
    void submitEvidenceSignalE(OAISubmitEvidenceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void submitEvidenceSignalError(OAISubmitEvidenceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use acceptDisputeSignalErrorFull() instead")
    void acceptDisputeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptDisputeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDisputeEvidenceTextSignalErrorFull() instead")
    void createDisputeEvidenceTextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDisputeEvidenceTextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDisputeEvidenceSignalErrorFull() instead")
    void deleteDisputeEvidenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDisputeEvidenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDisputeEvidenceSignalErrorFull() instead")
    void listDisputeEvidenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDisputeEvidenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDisputesSignalErrorFull() instead")
    void listDisputesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDisputesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveDisputeSignalErrorFull() instead")
    void retrieveDisputeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveDisputeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveDisputeEvidenceSignalErrorFull() instead")
    void retrieveDisputeEvidenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveDisputeEvidenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitEvidenceSignalErrorFull() instead")
    void submitEvidenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void submitEvidenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
