/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderFulfillmentShipmentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderFulfillmentShipmentDetails::OAIOrderFulfillmentShipmentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderFulfillmentShipmentDetails::OAIOrderFulfillmentShipmentDetails() {
    this->initializeModel();
}

OAIOrderFulfillmentShipmentDetails::~OAIOrderFulfillmentShipmentDetails() {}

void OAIOrderFulfillmentShipmentDetails::initializeModel() {

    m_cancel_reason_isSet = false;
    m_cancel_reason_isValid = false;

    m_canceled_at_isSet = false;
    m_canceled_at_isValid = false;

    m_carrier_isSet = false;
    m_carrier_isValid = false;

    m_expected_shipped_at_isSet = false;
    m_expected_shipped_at_isValid = false;

    m_failed_at_isSet = false;
    m_failed_at_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_in_progress_at_isSet = false;
    m_in_progress_at_isValid = false;

    m_packaged_at_isSet = false;
    m_packaged_at_isValid = false;

    m_placed_at_isSet = false;
    m_placed_at_isValid = false;

    m_recipient_isSet = false;
    m_recipient_isValid = false;

    m_shipped_at_isSet = false;
    m_shipped_at_isValid = false;

    m_shipping_note_isSet = false;
    m_shipping_note_isValid = false;

    m_shipping_type_isSet = false;
    m_shipping_type_isValid = false;

    m_tracking_number_isSet = false;
    m_tracking_number_isValid = false;

    m_tracking_url_isSet = false;
    m_tracking_url_isValid = false;
}

void OAIOrderFulfillmentShipmentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderFulfillmentShipmentDetails::fromJsonObject(QJsonObject json) {

    m_cancel_reason_isValid = ::OpenAPI::fromJsonValue(m_cancel_reason, json[QString("cancel_reason")]);
    m_cancel_reason_isSet = !json[QString("cancel_reason")].isNull() && m_cancel_reason_isValid;

    m_canceled_at_isValid = ::OpenAPI::fromJsonValue(m_canceled_at, json[QString("canceled_at")]);
    m_canceled_at_isSet = !json[QString("canceled_at")].isNull() && m_canceled_at_isValid;

    m_carrier_isValid = ::OpenAPI::fromJsonValue(m_carrier, json[QString("carrier")]);
    m_carrier_isSet = !json[QString("carrier")].isNull() && m_carrier_isValid;

    m_expected_shipped_at_isValid = ::OpenAPI::fromJsonValue(m_expected_shipped_at, json[QString("expected_shipped_at")]);
    m_expected_shipped_at_isSet = !json[QString("expected_shipped_at")].isNull() && m_expected_shipped_at_isValid;

    m_failed_at_isValid = ::OpenAPI::fromJsonValue(m_failed_at, json[QString("failed_at")]);
    m_failed_at_isSet = !json[QString("failed_at")].isNull() && m_failed_at_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failure_reason")]);
    m_failure_reason_isSet = !json[QString("failure_reason")].isNull() && m_failure_reason_isValid;

    m_in_progress_at_isValid = ::OpenAPI::fromJsonValue(m_in_progress_at, json[QString("in_progress_at")]);
    m_in_progress_at_isSet = !json[QString("in_progress_at")].isNull() && m_in_progress_at_isValid;

    m_packaged_at_isValid = ::OpenAPI::fromJsonValue(m_packaged_at, json[QString("packaged_at")]);
    m_packaged_at_isSet = !json[QString("packaged_at")].isNull() && m_packaged_at_isValid;

    m_placed_at_isValid = ::OpenAPI::fromJsonValue(m_placed_at, json[QString("placed_at")]);
    m_placed_at_isSet = !json[QString("placed_at")].isNull() && m_placed_at_isValid;

    m_recipient_isValid = ::OpenAPI::fromJsonValue(m_recipient, json[QString("recipient")]);
    m_recipient_isSet = !json[QString("recipient")].isNull() && m_recipient_isValid;

    m_shipped_at_isValid = ::OpenAPI::fromJsonValue(m_shipped_at, json[QString("shipped_at")]);
    m_shipped_at_isSet = !json[QString("shipped_at")].isNull() && m_shipped_at_isValid;

    m_shipping_note_isValid = ::OpenAPI::fromJsonValue(m_shipping_note, json[QString("shipping_note")]);
    m_shipping_note_isSet = !json[QString("shipping_note")].isNull() && m_shipping_note_isValid;

    m_shipping_type_isValid = ::OpenAPI::fromJsonValue(m_shipping_type, json[QString("shipping_type")]);
    m_shipping_type_isSet = !json[QString("shipping_type")].isNull() && m_shipping_type_isValid;

    m_tracking_number_isValid = ::OpenAPI::fromJsonValue(m_tracking_number, json[QString("tracking_number")]);
    m_tracking_number_isSet = !json[QString("tracking_number")].isNull() && m_tracking_number_isValid;

    m_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_tracking_url, json[QString("tracking_url")]);
    m_tracking_url_isSet = !json[QString("tracking_url")].isNull() && m_tracking_url_isValid;
}

QString OAIOrderFulfillmentShipmentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderFulfillmentShipmentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_cancel_reason_isSet) {
        obj.insert(QString("cancel_reason"), ::OpenAPI::toJsonValue(m_cancel_reason));
    }
    if (m_canceled_at_isSet) {
        obj.insert(QString("canceled_at"), ::OpenAPI::toJsonValue(m_canceled_at));
    }
    if (m_carrier_isSet) {
        obj.insert(QString("carrier"), ::OpenAPI::toJsonValue(m_carrier));
    }
    if (m_expected_shipped_at_isSet) {
        obj.insert(QString("expected_shipped_at"), ::OpenAPI::toJsonValue(m_expected_shipped_at));
    }
    if (m_failed_at_isSet) {
        obj.insert(QString("failed_at"), ::OpenAPI::toJsonValue(m_failed_at));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failure_reason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_in_progress_at_isSet) {
        obj.insert(QString("in_progress_at"), ::OpenAPI::toJsonValue(m_in_progress_at));
    }
    if (m_packaged_at_isSet) {
        obj.insert(QString("packaged_at"), ::OpenAPI::toJsonValue(m_packaged_at));
    }
    if (m_placed_at_isSet) {
        obj.insert(QString("placed_at"), ::OpenAPI::toJsonValue(m_placed_at));
    }
    if (m_recipient.isSet()) {
        obj.insert(QString("recipient"), ::OpenAPI::toJsonValue(m_recipient));
    }
    if (m_shipped_at_isSet) {
        obj.insert(QString("shipped_at"), ::OpenAPI::toJsonValue(m_shipped_at));
    }
    if (m_shipping_note_isSet) {
        obj.insert(QString("shipping_note"), ::OpenAPI::toJsonValue(m_shipping_note));
    }
    if (m_shipping_type_isSet) {
        obj.insert(QString("shipping_type"), ::OpenAPI::toJsonValue(m_shipping_type));
    }
    if (m_tracking_number_isSet) {
        obj.insert(QString("tracking_number"), ::OpenAPI::toJsonValue(m_tracking_number));
    }
    if (m_tracking_url_isSet) {
        obj.insert(QString("tracking_url"), ::OpenAPI::toJsonValue(m_tracking_url));
    }
    return obj;
}

QString OAIOrderFulfillmentShipmentDetails::getCancelReason() const {
    return m_cancel_reason;
}
void OAIOrderFulfillmentShipmentDetails::setCancelReason(const QString &cancel_reason) {
    m_cancel_reason = cancel_reason;
    m_cancel_reason_isSet = true;
}

bool OAIOrderFulfillmentShipmentDetails::is_cancel_reason_Set() const{
    return m_cancel_reason_isSet;
}

bool OAIOrderFulfillmentShipmentDetails::is_cancel_reason_Valid() const{
    return m_cancel_reason_isValid;
}

QString OAIOrderFulfillmentShipmentDetails::getCanceledAt() const {
    return m_canceled_at;
}
void OAIOrderFulfillmentShipmentDetails::setCanceledAt(const QString &canceled_at) {
    m_canceled_at = canceled_at;
    m_canceled_at_isSet = true;
}

bool OAIOrderFulfillmentShipmentDetails::is_canceled_at_Set() const{
    return m_canceled_at_isSet;
}

bool OAIOrderFulfillmentShipmentDetails::is_canceled_at_Valid() const{
    return m_canceled_at_isValid;
}

QString OAIOrderFulfillmentShipmentDetails::getCarrier() const {
    return m_carrier;
}
void OAIOrderFulfillmentShipmentDetails::setCarrier(const QString &carrier) {
    m_carrier = carrier;
    m_carrier_isSet = true;
}

bool OAIOrderFulfillmentShipmentDetails::is_carrier_Set() const{
    return m_carrier_isSet;
}

bool OAIOrderFulfillmentShipmentDetails::is_carrier_Valid() const{
    return m_carrier_isValid;
}

QString OAIOrderFulfillmentShipmentDetails::getExpectedShippedAt() const {
    return m_expected_shipped_at;
}
void OAIOrderFulfillmentShipmentDetails::setExpectedShippedAt(const QString &expected_shipped_at) {
    m_expected_shipped_at = expected_shipped_at;
    m_expected_shipped_at_isSet = true;
}

bool OAIOrderFulfillmentShipmentDetails::is_expected_shipped_at_Set() const{
    return m_expected_shipped_at_isSet;
}

bool OAIOrderFulfillmentShipmentDetails::is_expected_shipped_at_Valid() const{
    return m_expected_shipped_at_isValid;
}

QString OAIOrderFulfillmentShipmentDetails::getFailedAt() const {
    return m_failed_at;
}
void OAIOrderFulfillmentShipmentDetails::setFailedAt(const QString &failed_at) {
    m_failed_at = failed_at;
    m_failed_at_isSet = true;
}

bool OAIOrderFulfillmentShipmentDetails::is_failed_at_Set() const{
    return m_failed_at_isSet;
}

bool OAIOrderFulfillmentShipmentDetails::is_failed_at_Valid() const{
    return m_failed_at_isValid;
}

QString OAIOrderFulfillmentShipmentDetails::getFailureReason() const {
    return m_failure_reason;
}
void OAIOrderFulfillmentShipmentDetails::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIOrderFulfillmentShipmentDetails::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIOrderFulfillmentShipmentDetails::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIOrderFulfillmentShipmentDetails::getInProgressAt() const {
    return m_in_progress_at;
}
void OAIOrderFulfillmentShipmentDetails::setInProgressAt(const QString &in_progress_at) {
    m_in_progress_at = in_progress_at;
    m_in_progress_at_isSet = true;
}

bool OAIOrderFulfillmentShipmentDetails::is_in_progress_at_Set() const{
    return m_in_progress_at_isSet;
}

bool OAIOrderFulfillmentShipmentDetails::is_in_progress_at_Valid() const{
    return m_in_progress_at_isValid;
}

QString OAIOrderFulfillmentShipmentDetails::getPackagedAt() const {
    return m_packaged_at;
}
void OAIOrderFulfillmentShipmentDetails::setPackagedAt(const QString &packaged_at) {
    m_packaged_at = packaged_at;
    m_packaged_at_isSet = true;
}

bool OAIOrderFulfillmentShipmentDetails::is_packaged_at_Set() const{
    return m_packaged_at_isSet;
}

bool OAIOrderFulfillmentShipmentDetails::is_packaged_at_Valid() const{
    return m_packaged_at_isValid;
}

QString OAIOrderFulfillmentShipmentDetails::getPlacedAt() const {
    return m_placed_at;
}
void OAIOrderFulfillmentShipmentDetails::setPlacedAt(const QString &placed_at) {
    m_placed_at = placed_at;
    m_placed_at_isSet = true;
}

bool OAIOrderFulfillmentShipmentDetails::is_placed_at_Set() const{
    return m_placed_at_isSet;
}

bool OAIOrderFulfillmentShipmentDetails::is_placed_at_Valid() const{
    return m_placed_at_isValid;
}

OAIOrderFulfillmentRecipient OAIOrderFulfillmentShipmentDetails::getRecipient() const {
    return m_recipient;
}
void OAIOrderFulfillmentShipmentDetails::setRecipient(const OAIOrderFulfillmentRecipient &recipient) {
    m_recipient = recipient;
    m_recipient_isSet = true;
}

bool OAIOrderFulfillmentShipmentDetails::is_recipient_Set() const{
    return m_recipient_isSet;
}

bool OAIOrderFulfillmentShipmentDetails::is_recipient_Valid() const{
    return m_recipient_isValid;
}

QString OAIOrderFulfillmentShipmentDetails::getShippedAt() const {
    return m_shipped_at;
}
void OAIOrderFulfillmentShipmentDetails::setShippedAt(const QString &shipped_at) {
    m_shipped_at = shipped_at;
    m_shipped_at_isSet = true;
}

bool OAIOrderFulfillmentShipmentDetails::is_shipped_at_Set() const{
    return m_shipped_at_isSet;
}

bool OAIOrderFulfillmentShipmentDetails::is_shipped_at_Valid() const{
    return m_shipped_at_isValid;
}

QString OAIOrderFulfillmentShipmentDetails::getShippingNote() const {
    return m_shipping_note;
}
void OAIOrderFulfillmentShipmentDetails::setShippingNote(const QString &shipping_note) {
    m_shipping_note = shipping_note;
    m_shipping_note_isSet = true;
}

bool OAIOrderFulfillmentShipmentDetails::is_shipping_note_Set() const{
    return m_shipping_note_isSet;
}

bool OAIOrderFulfillmentShipmentDetails::is_shipping_note_Valid() const{
    return m_shipping_note_isValid;
}

QString OAIOrderFulfillmentShipmentDetails::getShippingType() const {
    return m_shipping_type;
}
void OAIOrderFulfillmentShipmentDetails::setShippingType(const QString &shipping_type) {
    m_shipping_type = shipping_type;
    m_shipping_type_isSet = true;
}

bool OAIOrderFulfillmentShipmentDetails::is_shipping_type_Set() const{
    return m_shipping_type_isSet;
}

bool OAIOrderFulfillmentShipmentDetails::is_shipping_type_Valid() const{
    return m_shipping_type_isValid;
}

QString OAIOrderFulfillmentShipmentDetails::getTrackingNumber() const {
    return m_tracking_number;
}
void OAIOrderFulfillmentShipmentDetails::setTrackingNumber(const QString &tracking_number) {
    m_tracking_number = tracking_number;
    m_tracking_number_isSet = true;
}

bool OAIOrderFulfillmentShipmentDetails::is_tracking_number_Set() const{
    return m_tracking_number_isSet;
}

bool OAIOrderFulfillmentShipmentDetails::is_tracking_number_Valid() const{
    return m_tracking_number_isValid;
}

QString OAIOrderFulfillmentShipmentDetails::getTrackingUrl() const {
    return m_tracking_url;
}
void OAIOrderFulfillmentShipmentDetails::setTrackingUrl(const QString &tracking_url) {
    m_tracking_url = tracking_url;
    m_tracking_url_isSet = true;
}

bool OAIOrderFulfillmentShipmentDetails::is_tracking_url_Set() const{
    return m_tracking_url_isSet;
}

bool OAIOrderFulfillmentShipmentDetails::is_tracking_url_Valid() const{
    return m_tracking_url_isValid;
}

bool OAIOrderFulfillmentShipmentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancel_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_shipped_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packaged_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipped_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderFulfillmentShipmentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
