/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_business_email_isSet = false;
    m_business_email_isValid = false;

    m_business_hours_isSet = false;
    m_business_hours_isValid = false;

    m_business_name_isSet = false;
    m_business_name_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_coordinates_isSet = false;
    m_coordinates_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_facebook_url_isSet = false;
    m_facebook_url_isValid = false;

    m_full_format_logo_url_isSet = false;
    m_full_format_logo_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instagram_username_isSet = false;
    m_instagram_username_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_mcc_isSet = false;
    m_mcc_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_pos_background_url_isSet = false;
    m_pos_background_url_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tax_ids_isSet = false;
    m_tax_ids_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_twitter_username_isSet = false;
    m_twitter_username_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_business_email_isValid = ::OpenAPI::fromJsonValue(m_business_email, json[QString("business_email")]);
    m_business_email_isSet = !json[QString("business_email")].isNull() && m_business_email_isValid;

    m_business_hours_isValid = ::OpenAPI::fromJsonValue(m_business_hours, json[QString("business_hours")]);
    m_business_hours_isSet = !json[QString("business_hours")].isNull() && m_business_hours_isValid;

    m_business_name_isValid = ::OpenAPI::fromJsonValue(m_business_name, json[QString("business_name")]);
    m_business_name_isSet = !json[QString("business_name")].isNull() && m_business_name_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_coordinates_isValid = ::OpenAPI::fromJsonValue(m_coordinates, json[QString("coordinates")]);
    m_coordinates_isSet = !json[QString("coordinates")].isNull() && m_coordinates_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_facebook_url_isValid = ::OpenAPI::fromJsonValue(m_facebook_url, json[QString("facebook_url")]);
    m_facebook_url_isSet = !json[QString("facebook_url")].isNull() && m_facebook_url_isValid;

    m_full_format_logo_url_isValid = ::OpenAPI::fromJsonValue(m_full_format_logo_url, json[QString("full_format_logo_url")]);
    m_full_format_logo_url_isSet = !json[QString("full_format_logo_url")].isNull() && m_full_format_logo_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instagram_username_isValid = ::OpenAPI::fromJsonValue(m_instagram_username, json[QString("instagram_username")]);
    m_instagram_username_isSet = !json[QString("instagram_username")].isNull() && m_instagram_username_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("language_code")]);
    m_language_code_isSet = !json[QString("language_code")].isNull() && m_language_code_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logo_url")]);
    m_logo_url_isSet = !json[QString("logo_url")].isNull() && m_logo_url_isValid;

    m_mcc_isValid = ::OpenAPI::fromJsonValue(m_mcc, json[QString("mcc")]);
    m_mcc_isSet = !json[QString("mcc")].isNull() && m_mcc_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("merchant_id")]);
    m_merchant_id_isSet = !json[QString("merchant_id")].isNull() && m_merchant_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phone_number")]);
    m_phone_number_isSet = !json[QString("phone_number")].isNull() && m_phone_number_isValid;

    m_pos_background_url_isValid = ::OpenAPI::fromJsonValue(m_pos_background_url, json[QString("pos_background_url")]);
    m_pos_background_url_isSet = !json[QString("pos_background_url")].isNull() && m_pos_background_url_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tax_ids_isValid = ::OpenAPI::fromJsonValue(m_tax_ids, json[QString("tax_ids")]);
    m_tax_ids_isSet = !json[QString("tax_ids")].isNull() && m_tax_ids_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_twitter_username_isValid = ::OpenAPI::fromJsonValue(m_twitter_username, json[QString("twitter_username")]);
    m_twitter_username_isSet = !json[QString("twitter_username")].isNull() && m_twitter_username_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("website_url")]);
    m_website_url_isSet = !json[QString("website_url")].isNull() && m_website_url_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_business_email_isSet) {
        obj.insert(QString("business_email"), ::OpenAPI::toJsonValue(m_business_email));
    }
    if (m_business_hours.isSet()) {
        obj.insert(QString("business_hours"), ::OpenAPI::toJsonValue(m_business_hours));
    }
    if (m_business_name_isSet) {
        obj.insert(QString("business_name"), ::OpenAPI::toJsonValue(m_business_name));
    }
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_coordinates.isSet()) {
        obj.insert(QString("coordinates"), ::OpenAPI::toJsonValue(m_coordinates));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_facebook_url_isSet) {
        obj.insert(QString("facebook_url"), ::OpenAPI::toJsonValue(m_facebook_url));
    }
    if (m_full_format_logo_url_isSet) {
        obj.insert(QString("full_format_logo_url"), ::OpenAPI::toJsonValue(m_full_format_logo_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instagram_username_isSet) {
        obj.insert(QString("instagram_username"), ::OpenAPI::toJsonValue(m_instagram_username));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("language_code"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logo_url"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_mcc_isSet) {
        obj.insert(QString("mcc"), ::OpenAPI::toJsonValue(m_mcc));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("merchant_id"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phone_number"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_pos_background_url_isSet) {
        obj.insert(QString("pos_background_url"), ::OpenAPI::toJsonValue(m_pos_background_url));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tax_ids.isSet()) {
        obj.insert(QString("tax_ids"), ::OpenAPI::toJsonValue(m_tax_ids));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_twitter_username_isSet) {
        obj.insert(QString("twitter_username"), ::OpenAPI::toJsonValue(m_twitter_username));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("website_url"), ::OpenAPI::toJsonValue(m_website_url));
    }
    return obj;
}

OAIAddress OAILocation::getAddress() const {
    return m_address;
}
void OAILocation::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAILocation::is_address_Set() const{
    return m_address_isSet;
}

bool OAILocation::is_address_Valid() const{
    return m_address_isValid;
}

QString OAILocation::getBusinessEmail() const {
    return m_business_email;
}
void OAILocation::setBusinessEmail(const QString &business_email) {
    m_business_email = business_email;
    m_business_email_isSet = true;
}

bool OAILocation::is_business_email_Set() const{
    return m_business_email_isSet;
}

bool OAILocation::is_business_email_Valid() const{
    return m_business_email_isValid;
}

OAIBusinessHours OAILocation::getBusinessHours() const {
    return m_business_hours;
}
void OAILocation::setBusinessHours(const OAIBusinessHours &business_hours) {
    m_business_hours = business_hours;
    m_business_hours_isSet = true;
}

bool OAILocation::is_business_hours_Set() const{
    return m_business_hours_isSet;
}

bool OAILocation::is_business_hours_Valid() const{
    return m_business_hours_isValid;
}

QString OAILocation::getBusinessName() const {
    return m_business_name;
}
void OAILocation::setBusinessName(const QString &business_name) {
    m_business_name = business_name;
    m_business_name_isSet = true;
}

bool OAILocation::is_business_name_Set() const{
    return m_business_name_isSet;
}

bool OAILocation::is_business_name_Valid() const{
    return m_business_name_isValid;
}

QList<QString> OAILocation::getCapabilities() const {
    return m_capabilities;
}
void OAILocation::setCapabilities(const QList<QString> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAILocation::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAILocation::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

OAICoordinates OAILocation::getCoordinates() const {
    return m_coordinates;
}
void OAILocation::setCoordinates(const OAICoordinates &coordinates) {
    m_coordinates = coordinates;
    m_coordinates_isSet = true;
}

bool OAILocation::is_coordinates_Set() const{
    return m_coordinates_isSet;
}

bool OAILocation::is_coordinates_Valid() const{
    return m_coordinates_isValid;
}

QString OAILocation::getCountry() const {
    return m_country;
}
void OAILocation::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAILocation::is_country_Set() const{
    return m_country_isSet;
}

bool OAILocation::is_country_Valid() const{
    return m_country_isValid;
}

QString OAILocation::getCreatedAt() const {
    return m_created_at;
}
void OAILocation::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAILocation::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAILocation::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAILocation::getCurrency() const {
    return m_currency;
}
void OAILocation::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAILocation::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAILocation::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAILocation::getDescription() const {
    return m_description;
}
void OAILocation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILocation::is_description_Set() const{
    return m_description_isSet;
}

bool OAILocation::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILocation::getFacebookUrl() const {
    return m_facebook_url;
}
void OAILocation::setFacebookUrl(const QString &facebook_url) {
    m_facebook_url = facebook_url;
    m_facebook_url_isSet = true;
}

bool OAILocation::is_facebook_url_Set() const{
    return m_facebook_url_isSet;
}

bool OAILocation::is_facebook_url_Valid() const{
    return m_facebook_url_isValid;
}

QString OAILocation::getFullFormatLogoUrl() const {
    return m_full_format_logo_url;
}
void OAILocation::setFullFormatLogoUrl(const QString &full_format_logo_url) {
    m_full_format_logo_url = full_format_logo_url;
    m_full_format_logo_url_isSet = true;
}

bool OAILocation::is_full_format_logo_url_Set() const{
    return m_full_format_logo_url_isSet;
}

bool OAILocation::is_full_format_logo_url_Valid() const{
    return m_full_format_logo_url_isValid;
}

QString OAILocation::getId() const {
    return m_id;
}
void OAILocation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILocation::is_id_Set() const{
    return m_id_isSet;
}

bool OAILocation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILocation::getInstagramUsername() const {
    return m_instagram_username;
}
void OAILocation::setInstagramUsername(const QString &instagram_username) {
    m_instagram_username = instagram_username;
    m_instagram_username_isSet = true;
}

bool OAILocation::is_instagram_username_Set() const{
    return m_instagram_username_isSet;
}

bool OAILocation::is_instagram_username_Valid() const{
    return m_instagram_username_isValid;
}

QString OAILocation::getLanguageCode() const {
    return m_language_code;
}
void OAILocation::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAILocation::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAILocation::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAILocation::getLogoUrl() const {
    return m_logo_url;
}
void OAILocation::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAILocation::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAILocation::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAILocation::getMcc() const {
    return m_mcc;
}
void OAILocation::setMcc(const QString &mcc) {
    m_mcc = mcc;
    m_mcc_isSet = true;
}

bool OAILocation::is_mcc_Set() const{
    return m_mcc_isSet;
}

bool OAILocation::is_mcc_Valid() const{
    return m_mcc_isValid;
}

QString OAILocation::getMerchantId() const {
    return m_merchant_id;
}
void OAILocation::setMerchantId(const QString &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAILocation::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAILocation::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

QString OAILocation::getName() const {
    return m_name;
}
void OAILocation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILocation::is_name_Set() const{
    return m_name_isSet;
}

bool OAILocation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILocation::getPhoneNumber() const {
    return m_phone_number;
}
void OAILocation::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAILocation::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAILocation::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAILocation::getPosBackgroundUrl() const {
    return m_pos_background_url;
}
void OAILocation::setPosBackgroundUrl(const QString &pos_background_url) {
    m_pos_background_url = pos_background_url;
    m_pos_background_url_isSet = true;
}

bool OAILocation::is_pos_background_url_Set() const{
    return m_pos_background_url_isSet;
}

bool OAILocation::is_pos_background_url_Valid() const{
    return m_pos_background_url_isValid;
}

QString OAILocation::getStatus() const {
    return m_status;
}
void OAILocation::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILocation::is_status_Set() const{
    return m_status_isSet;
}

bool OAILocation::is_status_Valid() const{
    return m_status_isValid;
}

OAITaxIds OAILocation::getTaxIds() const {
    return m_tax_ids;
}
void OAILocation::setTaxIds(const OAITaxIds &tax_ids) {
    m_tax_ids = tax_ids;
    m_tax_ids_isSet = true;
}

bool OAILocation::is_tax_ids_Set() const{
    return m_tax_ids_isSet;
}

bool OAILocation::is_tax_ids_Valid() const{
    return m_tax_ids_isValid;
}

QString OAILocation::getTimezone() const {
    return m_timezone;
}
void OAILocation::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAILocation::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAILocation::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAILocation::getTwitterUsername() const {
    return m_twitter_username;
}
void OAILocation::setTwitterUsername(const QString &twitter_username) {
    m_twitter_username = twitter_username;
    m_twitter_username_isSet = true;
}

bool OAILocation::is_twitter_username_Set() const{
    return m_twitter_username_isSet;
}

bool OAILocation::is_twitter_username_Valid() const{
    return m_twitter_username_isValid;
}

QString OAILocation::getType() const {
    return m_type;
}
void OAILocation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILocation::is_type_Set() const{
    return m_type_isSet;
}

bool OAILocation::is_type_Valid() const{
    return m_type_isValid;
}

QString OAILocation::getWebsiteUrl() const {
    return m_website_url;
}
void OAILocation::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAILocation::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAILocation::is_website_url_Valid() const{
    return m_website_url_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facebook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_format_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instagram_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pos_background_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
