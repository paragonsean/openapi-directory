/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderFulfillmentState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderFulfillmentState::OAIOrderFulfillmentState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderFulfillmentState::OAIOrderFulfillmentState() {
    this->initializeModel();
}

OAIOrderFulfillmentState::~OAIOrderFulfillmentState() {}

void OAIOrderFulfillmentState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOrderFulfillmentState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOrderFulfillmentState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PROPOSED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderFulfillmentState::PROPOSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESERVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderFulfillmentState::RESERVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PREPARED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderFulfillmentState::PREPARED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderFulfillmentState::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderFulfillmentState::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrderFulfillmentState::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOrderFulfillmentState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOrderFulfillmentState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOrderFulfillmentState::PROPOSED:
            val = "PROPOSED";
            break;
        case eOAIOrderFulfillmentState::RESERVED:
            val = "RESERVED";
            break;
        case eOAIOrderFulfillmentState::PREPARED:
            val = "PREPARED";
            break;
        case eOAIOrderFulfillmentState::COMPLETED:
            val = "COMPLETED";
            break;
        case eOAIOrderFulfillmentState::CANCELED:
            val = "CANCELED";
            break;
        case eOAIOrderFulfillmentState::FAILED:
            val = "FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOrderFulfillmentState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOrderFulfillmentState::eOAIOrderFulfillmentState OAIOrderFulfillmentState::getValue() const {
    return m_value;
}

void OAIOrderFulfillmentState::setValue(const OAIOrderFulfillmentState::eOAIOrderFulfillmentState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOrderFulfillmentState::isSet() const {
    
    return m_value_isSet;
}

bool OAIOrderFulfillmentState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
