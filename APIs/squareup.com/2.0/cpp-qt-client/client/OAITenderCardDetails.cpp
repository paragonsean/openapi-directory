/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITenderCardDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITenderCardDetails::OAITenderCardDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITenderCardDetails::OAITenderCardDetails() {
    this->initializeModel();
}

OAITenderCardDetails::~OAITenderCardDetails() {}

void OAITenderCardDetails::initializeModel() {

    m_card_isSet = false;
    m_card_isValid = false;

    m_entry_method_isSet = false;
    m_entry_method_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITenderCardDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITenderCardDetails::fromJsonObject(QJsonObject json) {

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_entry_method_isValid = ::OpenAPI::fromJsonValue(m_entry_method, json[QString("entry_method")]);
    m_entry_method_isSet = !json[QString("entry_method")].isNull() && m_entry_method_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITenderCardDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITenderCardDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_card.isSet()) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_entry_method_isSet) {
        obj.insert(QString("entry_method"), ::OpenAPI::toJsonValue(m_entry_method));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAICard OAITenderCardDetails::getCard() const {
    return m_card;
}
void OAITenderCardDetails::setCard(const OAICard &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAITenderCardDetails::is_card_Set() const{
    return m_card_isSet;
}

bool OAITenderCardDetails::is_card_Valid() const{
    return m_card_isValid;
}

QString OAITenderCardDetails::getEntryMethod() const {
    return m_entry_method;
}
void OAITenderCardDetails::setEntryMethod(const QString &entry_method) {
    m_entry_method = entry_method;
    m_entry_method_isSet = true;
}

bool OAITenderCardDetails::is_entry_method_Set() const{
    return m_entry_method_isSet;
}

bool OAITenderCardDetails::is_entry_method_Valid() const{
    return m_entry_method_isValid;
}

QString OAITenderCardDetails::getStatus() const {
    return m_status;
}
void OAITenderCardDetails::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITenderCardDetails::is_status_Set() const{
    return m_status_isSet;
}

bool OAITenderCardDetails::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITenderCardDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITenderCardDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
