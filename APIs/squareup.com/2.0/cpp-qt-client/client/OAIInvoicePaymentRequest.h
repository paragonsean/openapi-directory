/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInvoicePaymentRequest.h
 *
 * Represents a payment request for an [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice). Invoices can specify a maximum of 13 payment requests, with up to 12 &#x60;INSTALLMENT&#x60; request types. For more information,  see [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).  Adding &#x60;INSTALLMENT&#x60; payment requests to an invoice requires an  [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
 */

#ifndef OAIInvoicePaymentRequest_H
#define OAIInvoicePaymentRequest_H

#include <QJsonObject>

#include "OAIInvoicePaymentReminder.h"
#include "OAIMoney.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMoney;
class OAIInvoicePaymentReminder;

class OAIInvoicePaymentRequest : public OAIObject {
public:
    OAIInvoicePaymentRequest();
    OAIInvoicePaymentRequest(QString json);
    ~OAIInvoicePaymentRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAutomaticPaymentSource() const;
    void setAutomaticPaymentSource(const QString &automatic_payment_source);
    bool is_automatic_payment_source_Set() const;
    bool is_automatic_payment_source_Valid() const;

    QString getCardId() const;
    void setCardId(const QString &card_id);
    bool is_card_id_Set() const;
    bool is_card_id_Valid() const;

    OAIMoney getComputedAmountMoney() const;
    void setComputedAmountMoney(const OAIMoney &computed_amount_money);
    bool is_computed_amount_money_Set() const;
    bool is_computed_amount_money_Valid() const;

    QString getDueDate() const;
    void setDueDate(const QString &due_date);
    bool is_due_date_Set() const;
    bool is_due_date_Valid() const;

    OAIMoney getFixedAmountRequestedMoney() const;
    void setFixedAmountRequestedMoney(const OAIMoney &fixed_amount_requested_money);
    bool is_fixed_amount_requested_money_Set() const;
    bool is_fixed_amount_requested_money_Valid() const;

    QString getPercentageRequested() const;
    void setPercentageRequested(const QString &percentage_requested);
    bool is_percentage_requested_Set() const;
    bool is_percentage_requested_Valid() const;

    QList<OAIInvoicePaymentReminder> getReminders() const;
    void setReminders(const QList<OAIInvoicePaymentReminder> &reminders);
    bool is_reminders_Set() const;
    bool is_reminders_Valid() const;

    QString getRequestMethod() const;
    void setRequestMethod(const QString &request_method);
    bool is_request_method_Set() const;
    bool is_request_method_Valid() const;

    QString getRequestType() const;
    void setRequestType(const QString &request_type);
    bool is_request_type_Set() const;
    bool is_request_type_Valid() const;

    OAIMoney getRoundingAdjustmentIncludedMoney() const;
    void setRoundingAdjustmentIncludedMoney(const OAIMoney &rounding_adjustment_included_money);
    bool is_rounding_adjustment_included_money_Set() const;
    bool is_rounding_adjustment_included_money_Valid() const;

    bool isTippingEnabled() const;
    void setTippingEnabled(const bool &tipping_enabled);
    bool is_tipping_enabled_Set() const;
    bool is_tipping_enabled_Valid() const;

    OAIMoney getTotalCompletedAmountMoney() const;
    void setTotalCompletedAmountMoney(const OAIMoney &total_completed_amount_money);
    bool is_total_completed_amount_money_Set() const;
    bool is_total_completed_amount_money_Valid() const;

    QString getUid() const;
    void setUid(const QString &uid);
    bool is_uid_Set() const;
    bool is_uid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_automatic_payment_source;
    bool m_automatic_payment_source_isSet;
    bool m_automatic_payment_source_isValid;

    QString m_card_id;
    bool m_card_id_isSet;
    bool m_card_id_isValid;

    OAIMoney m_computed_amount_money;
    bool m_computed_amount_money_isSet;
    bool m_computed_amount_money_isValid;

    QString m_due_date;
    bool m_due_date_isSet;
    bool m_due_date_isValid;

    OAIMoney m_fixed_amount_requested_money;
    bool m_fixed_amount_requested_money_isSet;
    bool m_fixed_amount_requested_money_isValid;

    QString m_percentage_requested;
    bool m_percentage_requested_isSet;
    bool m_percentage_requested_isValid;

    QList<OAIInvoicePaymentReminder> m_reminders;
    bool m_reminders_isSet;
    bool m_reminders_isValid;

    QString m_request_method;
    bool m_request_method_isSet;
    bool m_request_method_isValid;

    QString m_request_type;
    bool m_request_type_isSet;
    bool m_request_type_isValid;

    OAIMoney m_rounding_adjustment_included_money;
    bool m_rounding_adjustment_included_money_isSet;
    bool m_rounding_adjustment_included_money_isValid;

    bool m_tipping_enabled;
    bool m_tipping_enabled_isSet;
    bool m_tipping_enabled_isValid;

    OAIMoney m_total_completed_amount_money;
    bool m_total_completed_amount_money_isSet;
    bool m_total_completed_amount_money_isValid;

    QString m_uid;
    bool m_uid_isSet;
    bool m_uid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInvoicePaymentRequest)

#endif // OAIInvoicePaymentRequest_H
