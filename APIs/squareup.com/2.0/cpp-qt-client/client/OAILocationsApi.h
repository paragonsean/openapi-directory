/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILocationsApi_H
#define OAI_OAILocationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateLocationRequest.h"
#include "OAICreateLocationResponse.h"
#include "OAIListLocationsResponse.h"
#include "OAIRetrieveLocationResponse.h"
#include "OAIUpdateLocationRequest.h"
#include "OAIUpdateLocationResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILocationsApi : public QObject {
    Q_OBJECT

public:
    OAILocationsApi(const int timeOut = 0);
    ~OAILocationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_location_request OAICreateLocationRequest [required]
    */
    virtual void createLocation(const OAICreateLocationRequest &oai_create_location_request);


    virtual void listLocations();

    /**
    * @param[in]  location_id QString [required]
    */
    virtual void retrieveLocation(const QString &location_id);

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  oai_update_location_request OAIUpdateLocationRequest [required]
    */
    virtual void updateLocation(const QString &location_id, const OAIUpdateLocationRequest &oai_update_location_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createLocationCallback(OAIHttpRequestWorker *worker);
    void listLocationsCallback(OAIHttpRequestWorker *worker);
    void retrieveLocationCallback(OAIHttpRequestWorker *worker);
    void updateLocationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createLocationSignal(OAICreateLocationResponse summary);
    void listLocationsSignal(OAIListLocationsResponse summary);
    void retrieveLocationSignal(OAIRetrieveLocationResponse summary);
    void updateLocationSignal(OAIUpdateLocationResponse summary);


    void createLocationSignalFull(OAIHttpRequestWorker *worker, OAICreateLocationResponse summary);
    void listLocationsSignalFull(OAIHttpRequestWorker *worker, OAIListLocationsResponse summary);
    void retrieveLocationSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveLocationResponse summary);
    void updateLocationSignalFull(OAIHttpRequestWorker *worker, OAIUpdateLocationResponse summary);

    Q_DECL_DEPRECATED_X("Use createLocationSignalError() instead")
    void createLocationSignalE(OAICreateLocationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLocationSignalError(OAICreateLocationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLocationsSignalError() instead")
    void listLocationsSignalE(OAIListLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLocationsSignalError(OAIListLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveLocationSignalError() instead")
    void retrieveLocationSignalE(OAIRetrieveLocationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveLocationSignalError(OAIRetrieveLocationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLocationSignalError() instead")
    void updateLocationSignalE(OAIUpdateLocationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLocationSignalError(OAIUpdateLocationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createLocationSignalErrorFull() instead")
    void createLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLocationsSignalErrorFull() instead")
    void listLocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveLocationSignalErrorFull() instead")
    void retrieveLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLocationSignalErrorFull() instead")
    void updateLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
