/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomAttributeFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomAttributeFilter::OAICustomAttributeFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomAttributeFilter::OAICustomAttributeFilter() {
    this->initializeModel();
}

OAICustomAttributeFilter::~OAICustomAttributeFilter() {}

void OAICustomAttributeFilter::initializeModel() {

    m_bool_filter_isSet = false;
    m_bool_filter_isValid = false;

    m_custom_attribute_definition_id_isSet = false;
    m_custom_attribute_definition_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_number_filter_isSet = false;
    m_number_filter_isValid = false;

    m_selection_uids_filter_isSet = false;
    m_selection_uids_filter_isValid = false;

    m_string_filter_isSet = false;
    m_string_filter_isValid = false;
}

void OAICustomAttributeFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomAttributeFilter::fromJsonObject(QJsonObject json) {

    m_bool_filter_isValid = ::OpenAPI::fromJsonValue(m_bool_filter, json[QString("bool_filter")]);
    m_bool_filter_isSet = !json[QString("bool_filter")].isNull() && m_bool_filter_isValid;

    m_custom_attribute_definition_id_isValid = ::OpenAPI::fromJsonValue(m_custom_attribute_definition_id, json[QString("custom_attribute_definition_id")]);
    m_custom_attribute_definition_id_isSet = !json[QString("custom_attribute_definition_id")].isNull() && m_custom_attribute_definition_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_number_filter_isValid = ::OpenAPI::fromJsonValue(m_number_filter, json[QString("number_filter")]);
    m_number_filter_isSet = !json[QString("number_filter")].isNull() && m_number_filter_isValid;

    m_selection_uids_filter_isValid = ::OpenAPI::fromJsonValue(m_selection_uids_filter, json[QString("selection_uids_filter")]);
    m_selection_uids_filter_isSet = !json[QString("selection_uids_filter")].isNull() && m_selection_uids_filter_isValid;

    m_string_filter_isValid = ::OpenAPI::fromJsonValue(m_string_filter, json[QString("string_filter")]);
    m_string_filter_isSet = !json[QString("string_filter")].isNull() && m_string_filter_isValid;
}

QString OAICustomAttributeFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomAttributeFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_bool_filter_isSet) {
        obj.insert(QString("bool_filter"), ::OpenAPI::toJsonValue(m_bool_filter));
    }
    if (m_custom_attribute_definition_id_isSet) {
        obj.insert(QString("custom_attribute_definition_id"), ::OpenAPI::toJsonValue(m_custom_attribute_definition_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_number_filter.isSet()) {
        obj.insert(QString("number_filter"), ::OpenAPI::toJsonValue(m_number_filter));
    }
    if (m_selection_uids_filter.size() > 0) {
        obj.insert(QString("selection_uids_filter"), ::OpenAPI::toJsonValue(m_selection_uids_filter));
    }
    if (m_string_filter_isSet) {
        obj.insert(QString("string_filter"), ::OpenAPI::toJsonValue(m_string_filter));
    }
    return obj;
}

bool OAICustomAttributeFilter::isBoolFilter() const {
    return m_bool_filter;
}
void OAICustomAttributeFilter::setBoolFilter(const bool &bool_filter) {
    m_bool_filter = bool_filter;
    m_bool_filter_isSet = true;
}

bool OAICustomAttributeFilter::is_bool_filter_Set() const{
    return m_bool_filter_isSet;
}

bool OAICustomAttributeFilter::is_bool_filter_Valid() const{
    return m_bool_filter_isValid;
}

QString OAICustomAttributeFilter::getCustomAttributeDefinitionId() const {
    return m_custom_attribute_definition_id;
}
void OAICustomAttributeFilter::setCustomAttributeDefinitionId(const QString &custom_attribute_definition_id) {
    m_custom_attribute_definition_id = custom_attribute_definition_id;
    m_custom_attribute_definition_id_isSet = true;
}

bool OAICustomAttributeFilter::is_custom_attribute_definition_id_Set() const{
    return m_custom_attribute_definition_id_isSet;
}

bool OAICustomAttributeFilter::is_custom_attribute_definition_id_Valid() const{
    return m_custom_attribute_definition_id_isValid;
}

QString OAICustomAttributeFilter::getKey() const {
    return m_key;
}
void OAICustomAttributeFilter::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICustomAttributeFilter::is_key_Set() const{
    return m_key_isSet;
}

bool OAICustomAttributeFilter::is_key_Valid() const{
    return m_key_isValid;
}

OAIRange OAICustomAttributeFilter::getNumberFilter() const {
    return m_number_filter;
}
void OAICustomAttributeFilter::setNumberFilter(const OAIRange &number_filter) {
    m_number_filter = number_filter;
    m_number_filter_isSet = true;
}

bool OAICustomAttributeFilter::is_number_filter_Set() const{
    return m_number_filter_isSet;
}

bool OAICustomAttributeFilter::is_number_filter_Valid() const{
    return m_number_filter_isValid;
}

QList<QString> OAICustomAttributeFilter::getSelectionUidsFilter() const {
    return m_selection_uids_filter;
}
void OAICustomAttributeFilter::setSelectionUidsFilter(const QList<QString> &selection_uids_filter) {
    m_selection_uids_filter = selection_uids_filter;
    m_selection_uids_filter_isSet = true;
}

bool OAICustomAttributeFilter::is_selection_uids_filter_Set() const{
    return m_selection_uids_filter_isSet;
}

bool OAICustomAttributeFilter::is_selection_uids_filter_Valid() const{
    return m_selection_uids_filter_isValid;
}

QString OAICustomAttributeFilter::getStringFilter() const {
    return m_string_filter;
}
void OAICustomAttributeFilter::setStringFilter(const QString &string_filter) {
    m_string_filter = string_filter;
    m_string_filter_isSet = true;
}

bool OAICustomAttributeFilter::is_string_filter_Set() const{
    return m_string_filter_isSet;
}

bool OAICustomAttributeFilter::is_string_filter_Valid() const{
    return m_string_filter_isValid;
}

bool OAICustomAttributeFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bool_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attribute_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_uids_filter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_filter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomAttributeFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
