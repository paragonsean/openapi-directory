/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICatalogItemVariation.h
 *
 * An item variation (i.e., product) in the Catalog object model. Each item may have a maximum of 250 item variations.
 */

#ifndef OAICatalogItemVariation_H
#define OAICatalogItemVariation_H

#include <QJsonObject>

#include "OAICatalogItemOptionValueForItemVariation.h"
#include "OAICatalogStockConversion.h"
#include "OAIItemVariationLocationOverrides.h"
#include "OAIMoney.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICatalogItemOptionValueForItemVariation;
class OAIItemVariationLocationOverrides;
class OAIMoney;
class OAICatalogStockConversion;

class OAICatalogItemVariation : public OAIObject {
public:
    OAICatalogItemVariation();
    OAICatalogItemVariation(QString json);
    ~OAICatalogItemVariation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAvailableForBooking() const;
    void setAvailableForBooking(const bool &available_for_booking);
    bool is_available_for_booking_Set() const;
    bool is_available_for_booking_Valid() const;

    qint64 getInventoryAlertThreshold() const;
    void setInventoryAlertThreshold(const qint64 &inventory_alert_threshold);
    bool is_inventory_alert_threshold_Set() const;
    bool is_inventory_alert_threshold_Valid() const;

    QString getInventoryAlertType() const;
    void setInventoryAlertType(const QString &inventory_alert_type);
    bool is_inventory_alert_type_Set() const;
    bool is_inventory_alert_type_Valid() const;

    QString getItemId() const;
    void setItemId(const QString &item_id);
    bool is_item_id_Set() const;
    bool is_item_id_Valid() const;

    QList<OAICatalogItemOptionValueForItemVariation> getItemOptionValues() const;
    void setItemOptionValues(const QList<OAICatalogItemOptionValueForItemVariation> &item_option_values);
    bool is_item_option_values_Set() const;
    bool is_item_option_values_Valid() const;

    QList<OAIItemVariationLocationOverrides> getLocationOverrides() const;
    void setLocationOverrides(const QList<OAIItemVariationLocationOverrides> &location_overrides);
    bool is_location_overrides_Set() const;
    bool is_location_overrides_Valid() const;

    QString getMeasurementUnitId() const;
    void setMeasurementUnitId(const QString &measurement_unit_id);
    bool is_measurement_unit_id_Set() const;
    bool is_measurement_unit_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getOrdinal() const;
    void setOrdinal(const qint32 &ordinal);
    bool is_ordinal_Set() const;
    bool is_ordinal_Valid() const;

    OAIMoney getPriceMoney() const;
    void setPriceMoney(const OAIMoney &price_money);
    bool is_price_money_Set() const;
    bool is_price_money_Valid() const;

    QString getPricingType() const;
    void setPricingType(const QString &pricing_type);
    bool is_pricing_type_Set() const;
    bool is_pricing_type_Valid() const;

    qint64 getServiceDuration() const;
    void setServiceDuration(const qint64 &service_duration);
    bool is_service_duration_Set() const;
    bool is_service_duration_Valid() const;

    QString getSku() const;
    void setSku(const QString &sku);
    bool is_sku_Set() const;
    bool is_sku_Valid() const;

    bool isStockable() const;
    void setStockable(const bool &stockable);
    bool is_stockable_Set() const;
    bool is_stockable_Valid() const;

    OAICatalogStockConversion getStockableConversion() const;
    void setStockableConversion(const OAICatalogStockConversion &stockable_conversion);
    bool is_stockable_conversion_Set() const;
    bool is_stockable_conversion_Valid() const;

    QList<QString> getTeamMemberIds() const;
    void setTeamMemberIds(const QList<QString> &team_member_ids);
    bool is_team_member_ids_Set() const;
    bool is_team_member_ids_Valid() const;

    bool isTrackInventory() const;
    void setTrackInventory(const bool &track_inventory);
    bool is_track_inventory_Set() const;
    bool is_track_inventory_Valid() const;

    QString getUpc() const;
    void setUpc(const QString &upc);
    bool is_upc_Set() const;
    bool is_upc_Valid() const;

    QString getUserData() const;
    void setUserData(const QString &user_data);
    bool is_user_data_Set() const;
    bool is_user_data_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_available_for_booking;
    bool m_available_for_booking_isSet;
    bool m_available_for_booking_isValid;

    qint64 m_inventory_alert_threshold;
    bool m_inventory_alert_threshold_isSet;
    bool m_inventory_alert_threshold_isValid;

    QString m_inventory_alert_type;
    bool m_inventory_alert_type_isSet;
    bool m_inventory_alert_type_isValid;

    QString m_item_id;
    bool m_item_id_isSet;
    bool m_item_id_isValid;

    QList<OAICatalogItemOptionValueForItemVariation> m_item_option_values;
    bool m_item_option_values_isSet;
    bool m_item_option_values_isValid;

    QList<OAIItemVariationLocationOverrides> m_location_overrides;
    bool m_location_overrides_isSet;
    bool m_location_overrides_isValid;

    QString m_measurement_unit_id;
    bool m_measurement_unit_id_isSet;
    bool m_measurement_unit_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_ordinal;
    bool m_ordinal_isSet;
    bool m_ordinal_isValid;

    OAIMoney m_price_money;
    bool m_price_money_isSet;
    bool m_price_money_isValid;

    QString m_pricing_type;
    bool m_pricing_type_isSet;
    bool m_pricing_type_isValid;

    qint64 m_service_duration;
    bool m_service_duration_isSet;
    bool m_service_duration_isValid;

    QString m_sku;
    bool m_sku_isSet;
    bool m_sku_isValid;

    bool m_stockable;
    bool m_stockable_isSet;
    bool m_stockable_isValid;

    OAICatalogStockConversion m_stockable_conversion;
    bool m_stockable_conversion_isSet;
    bool m_stockable_conversion_isValid;

    QList<QString> m_team_member_ids;
    bool m_team_member_ids_isSet;
    bool m_team_member_ids_isValid;

    bool m_track_inventory;
    bool m_track_inventory_isSet;
    bool m_track_inventory_isValid;

    QString m_upc;
    bool m_upc_isSet;
    bool m_upc_isValid;

    QString m_user_data;
    bool m_user_data_isSet;
    bool m_user_data_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICatalogItemVariation)

#endif // OAICatalogItemVariation_H
