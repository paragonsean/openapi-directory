/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderFulfillment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderFulfillment::OAIOrderFulfillment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderFulfillment::OAIOrderFulfillment() {
    this->initializeModel();
}

OAIOrderFulfillment::~OAIOrderFulfillment() {}

void OAIOrderFulfillment::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_pickup_details_isSet = false;
    m_pickup_details_isValid = false;

    m_shipment_details_isSet = false;
    m_shipment_details_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIOrderFulfillment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderFulfillment::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_pickup_details_isValid = ::OpenAPI::fromJsonValue(m_pickup_details, json[QString("pickup_details")]);
    m_pickup_details_isSet = !json[QString("pickup_details")].isNull() && m_pickup_details_isValid;

    m_shipment_details_isValid = ::OpenAPI::fromJsonValue(m_shipment_details, json[QString("shipment_details")]);
    m_shipment_details_isSet = !json[QString("shipment_details")].isNull() && m_shipment_details_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIOrderFulfillment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderFulfillment::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_pickup_details.isSet()) {
        obj.insert(QString("pickup_details"), ::OpenAPI::toJsonValue(m_pickup_details));
    }
    if (m_shipment_details.isSet()) {
        obj.insert(QString("shipment_details"), ::OpenAPI::toJsonValue(m_shipment_details));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QMap<QString, QString> OAIOrderFulfillment::getMetadata() const {
    return m_metadata;
}
void OAIOrderFulfillment::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIOrderFulfillment::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIOrderFulfillment::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIOrderFulfillmentPickupDetails OAIOrderFulfillment::getPickupDetails() const {
    return m_pickup_details;
}
void OAIOrderFulfillment::setPickupDetails(const OAIOrderFulfillmentPickupDetails &pickup_details) {
    m_pickup_details = pickup_details;
    m_pickup_details_isSet = true;
}

bool OAIOrderFulfillment::is_pickup_details_Set() const{
    return m_pickup_details_isSet;
}

bool OAIOrderFulfillment::is_pickup_details_Valid() const{
    return m_pickup_details_isValid;
}

OAIOrderFulfillmentShipmentDetails OAIOrderFulfillment::getShipmentDetails() const {
    return m_shipment_details;
}
void OAIOrderFulfillment::setShipmentDetails(const OAIOrderFulfillmentShipmentDetails &shipment_details) {
    m_shipment_details = shipment_details;
    m_shipment_details_isSet = true;
}

bool OAIOrderFulfillment::is_shipment_details_Set() const{
    return m_shipment_details_isSet;
}

bool OAIOrderFulfillment::is_shipment_details_Valid() const{
    return m_shipment_details_isValid;
}

QString OAIOrderFulfillment::getState() const {
    return m_state;
}
void OAIOrderFulfillment::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIOrderFulfillment::is_state_Set() const{
    return m_state_isSet;
}

bool OAIOrderFulfillment::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIOrderFulfillment::getType() const {
    return m_type;
}
void OAIOrderFulfillment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOrderFulfillment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOrderFulfillment::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOrderFulfillment::getUid() const {
    return m_uid;
}
void OAIOrderFulfillment::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIOrderFulfillment::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIOrderFulfillment::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIOrderFulfillment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderFulfillment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
