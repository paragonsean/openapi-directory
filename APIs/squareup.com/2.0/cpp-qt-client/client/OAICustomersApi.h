/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomersApi_H
#define OAI_OAICustomersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddGroupToCustomerResponse.h"
#include "OAICreateCustomerCardRequest.h"
#include "OAICreateCustomerCardResponse.h"
#include "OAICreateCustomerRequest.h"
#include "OAICreateCustomerResponse.h"
#include "OAIDeleteCustomerCardResponse.h"
#include "OAIDeleteCustomerResponse.h"
#include "OAIListCustomersResponse.h"
#include "OAIRemoveGroupFromCustomerResponse.h"
#include "OAIRetrieveCustomerResponse.h"
#include "OAISearchCustomersRequest.h"
#include "OAISearchCustomersResponse.h"
#include "OAIUpdateCustomerRequest.h"
#include "OAIUpdateCustomerResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomersApi : public QObject {
    Q_OBJECT

public:
    OAICustomersApi(const int timeOut = 0);
    ~OAICustomersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  customer_id QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void addGroupToCustomer(const QString &customer_id, const QString &group_id);

    /**
    * @param[in]  oai_create_customer_request OAICreateCustomerRequest [required]
    */
    virtual void createCustomer(const OAICreateCustomerRequest &oai_create_customer_request);

    /**
    * @param[in]  customer_id QString [required]
    * @param[in]  oai_create_customer_card_request OAICreateCustomerCardRequest [required]
    */
    virtual void createCustomerCard(const QString &customer_id, const OAICreateCustomerCardRequest &oai_create_customer_card_request);

    /**
    * @param[in]  customer_id QString [required]
    * @param[in]  version qint64 [optional]
    */
    virtual void deleteCustomer(const QString &customer_id, const ::OpenAPI::OptionalParam<qint64> &version = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  customer_id QString [required]
    * @param[in]  card_id QString [required]
    */
    virtual void deleteCustomerCard(const QString &customer_id, const QString &card_id);

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    */
    virtual void listCustomers(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_id QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void removeGroupFromCustomer(const QString &customer_id, const QString &group_id);

    /**
    * @param[in]  customer_id QString [required]
    */
    virtual void retrieveCustomer(const QString &customer_id);

    /**
    * @param[in]  oai_search_customers_request OAISearchCustomersRequest [required]
    */
    virtual void searchCustomers(const OAISearchCustomersRequest &oai_search_customers_request);

    /**
    * @param[in]  customer_id QString [required]
    * @param[in]  oai_update_customer_request OAIUpdateCustomerRequest [required]
    */
    virtual void updateCustomer(const QString &customer_id, const OAIUpdateCustomerRequest &oai_update_customer_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addGroupToCustomerCallback(OAIHttpRequestWorker *worker);
    void createCustomerCallback(OAIHttpRequestWorker *worker);
    void createCustomerCardCallback(OAIHttpRequestWorker *worker);
    void deleteCustomerCallback(OAIHttpRequestWorker *worker);
    void deleteCustomerCardCallback(OAIHttpRequestWorker *worker);
    void listCustomersCallback(OAIHttpRequestWorker *worker);
    void removeGroupFromCustomerCallback(OAIHttpRequestWorker *worker);
    void retrieveCustomerCallback(OAIHttpRequestWorker *worker);
    void searchCustomersCallback(OAIHttpRequestWorker *worker);
    void updateCustomerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addGroupToCustomerSignal(OAIAddGroupToCustomerResponse summary);
    void createCustomerSignal(OAICreateCustomerResponse summary);
    void createCustomerCardSignal(OAICreateCustomerCardResponse summary);
    void deleteCustomerSignal(OAIDeleteCustomerResponse summary);
    void deleteCustomerCardSignal(OAIDeleteCustomerCardResponse summary);
    void listCustomersSignal(OAIListCustomersResponse summary);
    void removeGroupFromCustomerSignal(OAIRemoveGroupFromCustomerResponse summary);
    void retrieveCustomerSignal(OAIRetrieveCustomerResponse summary);
    void searchCustomersSignal(OAISearchCustomersResponse summary);
    void updateCustomerSignal(OAIUpdateCustomerResponse summary);


    void addGroupToCustomerSignalFull(OAIHttpRequestWorker *worker, OAIAddGroupToCustomerResponse summary);
    void createCustomerSignalFull(OAIHttpRequestWorker *worker, OAICreateCustomerResponse summary);
    void createCustomerCardSignalFull(OAIHttpRequestWorker *worker, OAICreateCustomerCardResponse summary);
    void deleteCustomerSignalFull(OAIHttpRequestWorker *worker, OAIDeleteCustomerResponse summary);
    void deleteCustomerCardSignalFull(OAIHttpRequestWorker *worker, OAIDeleteCustomerCardResponse summary);
    void listCustomersSignalFull(OAIHttpRequestWorker *worker, OAIListCustomersResponse summary);
    void removeGroupFromCustomerSignalFull(OAIHttpRequestWorker *worker, OAIRemoveGroupFromCustomerResponse summary);
    void retrieveCustomerSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveCustomerResponse summary);
    void searchCustomersSignalFull(OAIHttpRequestWorker *worker, OAISearchCustomersResponse summary);
    void updateCustomerSignalFull(OAIHttpRequestWorker *worker, OAIUpdateCustomerResponse summary);

    Q_DECL_DEPRECATED_X("Use addGroupToCustomerSignalError() instead")
    void addGroupToCustomerSignalE(OAIAddGroupToCustomerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addGroupToCustomerSignalError(OAIAddGroupToCustomerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCustomerSignalError() instead")
    void createCustomerSignalE(OAICreateCustomerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomerSignalError(OAICreateCustomerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCustomerCardSignalError() instead")
    void createCustomerCardSignalE(OAICreateCustomerCardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomerCardSignalError(OAICreateCustomerCardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomerSignalError() instead")
    void deleteCustomerSignalE(OAIDeleteCustomerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomerSignalError(OAIDeleteCustomerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomerCardSignalError() instead")
    void deleteCustomerCardSignalE(OAIDeleteCustomerCardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomerCardSignalError(OAIDeleteCustomerCardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCustomersSignalError() instead")
    void listCustomersSignalE(OAIListCustomersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCustomersSignalError(OAIListCustomersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGroupFromCustomerSignalError() instead")
    void removeGroupFromCustomerSignalE(OAIRemoveGroupFromCustomerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeGroupFromCustomerSignalError(OAIRemoveGroupFromCustomerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveCustomerSignalError() instead")
    void retrieveCustomerSignalE(OAIRetrieveCustomerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveCustomerSignalError(OAIRetrieveCustomerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchCustomersSignalError() instead")
    void searchCustomersSignalE(OAISearchCustomersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchCustomersSignalError(OAISearchCustomersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomerSignalError() instead")
    void updateCustomerSignalE(OAIUpdateCustomerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomerSignalError(OAIUpdateCustomerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addGroupToCustomerSignalErrorFull() instead")
    void addGroupToCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addGroupToCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCustomerSignalErrorFull() instead")
    void createCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCustomerCardSignalErrorFull() instead")
    void createCustomerCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomerCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomerSignalErrorFull() instead")
    void deleteCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomerCardSignalErrorFull() instead")
    void deleteCustomerCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomerCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCustomersSignalErrorFull() instead")
    void listCustomersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCustomersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGroupFromCustomerSignalErrorFull() instead")
    void removeGroupFromCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeGroupFromCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveCustomerSignalErrorFull() instead")
    void retrieveCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchCustomersSignalErrorFull() instead")
    void searchCustomersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchCustomersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomerSignalErrorFull() instead")
    void updateCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
