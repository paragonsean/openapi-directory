/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogQuery::OAICatalogQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogQuery::OAICatalogQuery() {
    this->initializeModel();
}

OAICatalogQuery::~OAICatalogQuery() {}

void OAICatalogQuery::initializeModel() {

    m_exact_query_isSet = false;
    m_exact_query_isValid = false;

    m_item_variations_for_item_option_values_query_isSet = false;
    m_item_variations_for_item_option_values_query_isValid = false;

    m_items_for_item_options_query_isSet = false;
    m_items_for_item_options_query_isValid = false;

    m_items_for_modifier_list_query_isSet = false;
    m_items_for_modifier_list_query_isValid = false;

    m_items_for_tax_query_isSet = false;
    m_items_for_tax_query_isValid = false;

    m_prefix_query_isSet = false;
    m_prefix_query_isValid = false;

    m_range_query_isSet = false;
    m_range_query_isValid = false;

    m_set_query_isSet = false;
    m_set_query_isValid = false;

    m_sorted_attribute_query_isSet = false;
    m_sorted_attribute_query_isValid = false;

    m_text_query_isSet = false;
    m_text_query_isValid = false;
}

void OAICatalogQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogQuery::fromJsonObject(QJsonObject json) {

    m_exact_query_isValid = ::OpenAPI::fromJsonValue(m_exact_query, json[QString("exact_query")]);
    m_exact_query_isSet = !json[QString("exact_query")].isNull() && m_exact_query_isValid;

    m_item_variations_for_item_option_values_query_isValid = ::OpenAPI::fromJsonValue(m_item_variations_for_item_option_values_query, json[QString("item_variations_for_item_option_values_query")]);
    m_item_variations_for_item_option_values_query_isSet = !json[QString("item_variations_for_item_option_values_query")].isNull() && m_item_variations_for_item_option_values_query_isValid;

    m_items_for_item_options_query_isValid = ::OpenAPI::fromJsonValue(m_items_for_item_options_query, json[QString("items_for_item_options_query")]);
    m_items_for_item_options_query_isSet = !json[QString("items_for_item_options_query")].isNull() && m_items_for_item_options_query_isValid;

    m_items_for_modifier_list_query_isValid = ::OpenAPI::fromJsonValue(m_items_for_modifier_list_query, json[QString("items_for_modifier_list_query")]);
    m_items_for_modifier_list_query_isSet = !json[QString("items_for_modifier_list_query")].isNull() && m_items_for_modifier_list_query_isValid;

    m_items_for_tax_query_isValid = ::OpenAPI::fromJsonValue(m_items_for_tax_query, json[QString("items_for_tax_query")]);
    m_items_for_tax_query_isSet = !json[QString("items_for_tax_query")].isNull() && m_items_for_tax_query_isValid;

    m_prefix_query_isValid = ::OpenAPI::fromJsonValue(m_prefix_query, json[QString("prefix_query")]);
    m_prefix_query_isSet = !json[QString("prefix_query")].isNull() && m_prefix_query_isValid;

    m_range_query_isValid = ::OpenAPI::fromJsonValue(m_range_query, json[QString("range_query")]);
    m_range_query_isSet = !json[QString("range_query")].isNull() && m_range_query_isValid;

    m_set_query_isValid = ::OpenAPI::fromJsonValue(m_set_query, json[QString("set_query")]);
    m_set_query_isSet = !json[QString("set_query")].isNull() && m_set_query_isValid;

    m_sorted_attribute_query_isValid = ::OpenAPI::fromJsonValue(m_sorted_attribute_query, json[QString("sorted_attribute_query")]);
    m_sorted_attribute_query_isSet = !json[QString("sorted_attribute_query")].isNull() && m_sorted_attribute_query_isValid;

    m_text_query_isValid = ::OpenAPI::fromJsonValue(m_text_query, json[QString("text_query")]);
    m_text_query_isSet = !json[QString("text_query")].isNull() && m_text_query_isValid;
}

QString OAICatalogQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_exact_query.isSet()) {
        obj.insert(QString("exact_query"), ::OpenAPI::toJsonValue(m_exact_query));
    }
    if (m_item_variations_for_item_option_values_query.isSet()) {
        obj.insert(QString("item_variations_for_item_option_values_query"), ::OpenAPI::toJsonValue(m_item_variations_for_item_option_values_query));
    }
    if (m_items_for_item_options_query.isSet()) {
        obj.insert(QString("items_for_item_options_query"), ::OpenAPI::toJsonValue(m_items_for_item_options_query));
    }
    if (m_items_for_modifier_list_query.isSet()) {
        obj.insert(QString("items_for_modifier_list_query"), ::OpenAPI::toJsonValue(m_items_for_modifier_list_query));
    }
    if (m_items_for_tax_query.isSet()) {
        obj.insert(QString("items_for_tax_query"), ::OpenAPI::toJsonValue(m_items_for_tax_query));
    }
    if (m_prefix_query.isSet()) {
        obj.insert(QString("prefix_query"), ::OpenAPI::toJsonValue(m_prefix_query));
    }
    if (m_range_query.isSet()) {
        obj.insert(QString("range_query"), ::OpenAPI::toJsonValue(m_range_query));
    }
    if (m_set_query.isSet()) {
        obj.insert(QString("set_query"), ::OpenAPI::toJsonValue(m_set_query));
    }
    if (m_sorted_attribute_query.isSet()) {
        obj.insert(QString("sorted_attribute_query"), ::OpenAPI::toJsonValue(m_sorted_attribute_query));
    }
    if (m_text_query.isSet()) {
        obj.insert(QString("text_query"), ::OpenAPI::toJsonValue(m_text_query));
    }
    return obj;
}

OAICatalogQueryExact OAICatalogQuery::getExactQuery() const {
    return m_exact_query;
}
void OAICatalogQuery::setExactQuery(const OAICatalogQueryExact &exact_query) {
    m_exact_query = exact_query;
    m_exact_query_isSet = true;
}

bool OAICatalogQuery::is_exact_query_Set() const{
    return m_exact_query_isSet;
}

bool OAICatalogQuery::is_exact_query_Valid() const{
    return m_exact_query_isValid;
}

OAICatalogQueryItemVariationsForItemOptionValues OAICatalogQuery::getItemVariationsForItemOptionValuesQuery() const {
    return m_item_variations_for_item_option_values_query;
}
void OAICatalogQuery::setItemVariationsForItemOptionValuesQuery(const OAICatalogQueryItemVariationsForItemOptionValues &item_variations_for_item_option_values_query) {
    m_item_variations_for_item_option_values_query = item_variations_for_item_option_values_query;
    m_item_variations_for_item_option_values_query_isSet = true;
}

bool OAICatalogQuery::is_item_variations_for_item_option_values_query_Set() const{
    return m_item_variations_for_item_option_values_query_isSet;
}

bool OAICatalogQuery::is_item_variations_for_item_option_values_query_Valid() const{
    return m_item_variations_for_item_option_values_query_isValid;
}

OAICatalogQueryItemsForItemOptions OAICatalogQuery::getItemsForItemOptionsQuery() const {
    return m_items_for_item_options_query;
}
void OAICatalogQuery::setItemsForItemOptionsQuery(const OAICatalogQueryItemsForItemOptions &items_for_item_options_query) {
    m_items_for_item_options_query = items_for_item_options_query;
    m_items_for_item_options_query_isSet = true;
}

bool OAICatalogQuery::is_items_for_item_options_query_Set() const{
    return m_items_for_item_options_query_isSet;
}

bool OAICatalogQuery::is_items_for_item_options_query_Valid() const{
    return m_items_for_item_options_query_isValid;
}

OAICatalogQueryItemsForModifierList OAICatalogQuery::getItemsForModifierListQuery() const {
    return m_items_for_modifier_list_query;
}
void OAICatalogQuery::setItemsForModifierListQuery(const OAICatalogQueryItemsForModifierList &items_for_modifier_list_query) {
    m_items_for_modifier_list_query = items_for_modifier_list_query;
    m_items_for_modifier_list_query_isSet = true;
}

bool OAICatalogQuery::is_items_for_modifier_list_query_Set() const{
    return m_items_for_modifier_list_query_isSet;
}

bool OAICatalogQuery::is_items_for_modifier_list_query_Valid() const{
    return m_items_for_modifier_list_query_isValid;
}

OAICatalogQueryItemsForTax OAICatalogQuery::getItemsForTaxQuery() const {
    return m_items_for_tax_query;
}
void OAICatalogQuery::setItemsForTaxQuery(const OAICatalogQueryItemsForTax &items_for_tax_query) {
    m_items_for_tax_query = items_for_tax_query;
    m_items_for_tax_query_isSet = true;
}

bool OAICatalogQuery::is_items_for_tax_query_Set() const{
    return m_items_for_tax_query_isSet;
}

bool OAICatalogQuery::is_items_for_tax_query_Valid() const{
    return m_items_for_tax_query_isValid;
}

OAICatalogQueryPrefix OAICatalogQuery::getPrefixQuery() const {
    return m_prefix_query;
}
void OAICatalogQuery::setPrefixQuery(const OAICatalogQueryPrefix &prefix_query) {
    m_prefix_query = prefix_query;
    m_prefix_query_isSet = true;
}

bool OAICatalogQuery::is_prefix_query_Set() const{
    return m_prefix_query_isSet;
}

bool OAICatalogQuery::is_prefix_query_Valid() const{
    return m_prefix_query_isValid;
}

OAICatalogQueryRange OAICatalogQuery::getRangeQuery() const {
    return m_range_query;
}
void OAICatalogQuery::setRangeQuery(const OAICatalogQueryRange &range_query) {
    m_range_query = range_query;
    m_range_query_isSet = true;
}

bool OAICatalogQuery::is_range_query_Set() const{
    return m_range_query_isSet;
}

bool OAICatalogQuery::is_range_query_Valid() const{
    return m_range_query_isValid;
}

OAICatalogQuerySet OAICatalogQuery::getSetQuery() const {
    return m_set_query;
}
void OAICatalogQuery::setSetQuery(const OAICatalogQuerySet &set_query) {
    m_set_query = set_query;
    m_set_query_isSet = true;
}

bool OAICatalogQuery::is_set_query_Set() const{
    return m_set_query_isSet;
}

bool OAICatalogQuery::is_set_query_Valid() const{
    return m_set_query_isValid;
}

OAICatalogQuerySortedAttribute OAICatalogQuery::getSortedAttributeQuery() const {
    return m_sorted_attribute_query;
}
void OAICatalogQuery::setSortedAttributeQuery(const OAICatalogQuerySortedAttribute &sorted_attribute_query) {
    m_sorted_attribute_query = sorted_attribute_query;
    m_sorted_attribute_query_isSet = true;
}

bool OAICatalogQuery::is_sorted_attribute_query_Set() const{
    return m_sorted_attribute_query_isSet;
}

bool OAICatalogQuery::is_sorted_attribute_query_Valid() const{
    return m_sorted_attribute_query_isValid;
}

OAICatalogQueryText OAICatalogQuery::getTextQuery() const {
    return m_text_query;
}
void OAICatalogQuery::setTextQuery(const OAICatalogQueryText &text_query) {
    m_text_query = text_query;
    m_text_query_isSet = true;
}

bool OAICatalogQuery::is_text_query_Set() const{
    return m_text_query_isSet;
}

bool OAICatalogQuery::is_text_query_Valid() const{
    return m_text_query_isValid;
}

bool OAICatalogQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exact_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_variations_for_item_option_values_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_for_item_options_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_for_modifier_list_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_for_tax_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sorted_attribute_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
