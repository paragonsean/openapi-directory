/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBooking.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBooking::OAIBooking(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBooking::OAIBooking() {
    this->initializeModel();
}

OAIBooking::~OAIBooking() {}

void OAIBooking::initializeModel() {

    m_appointment_segments_isSet = false;
    m_appointment_segments_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_customer_note_isSet = false;
    m_customer_note_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_seller_note_isSet = false;
    m_seller_note_isValid = false;

    m_start_at_isSet = false;
    m_start_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIBooking::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBooking::fromJsonObject(QJsonObject json) {

    m_appointment_segments_isValid = ::OpenAPI::fromJsonValue(m_appointment_segments, json[QString("appointment_segments")]);
    m_appointment_segments_isSet = !json[QString("appointment_segments")].isNull() && m_appointment_segments_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_customer_note_isValid = ::OpenAPI::fromJsonValue(m_customer_note, json[QString("customer_note")]);
    m_customer_note_isSet = !json[QString("customer_note")].isNull() && m_customer_note_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_seller_note_isValid = ::OpenAPI::fromJsonValue(m_seller_note, json[QString("seller_note")]);
    m_seller_note_isSet = !json[QString("seller_note")].isNull() && m_seller_note_isValid;

    m_start_at_isValid = ::OpenAPI::fromJsonValue(m_start_at, json[QString("start_at")]);
    m_start_at_isSet = !json[QString("start_at")].isNull() && m_start_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIBooking::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBooking::asJsonObject() const {
    QJsonObject obj;
    if (m_appointment_segments.size() > 0) {
        obj.insert(QString("appointment_segments"), ::OpenAPI::toJsonValue(m_appointment_segments));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_customer_note_isSet) {
        obj.insert(QString("customer_note"), ::OpenAPI::toJsonValue(m_customer_note));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_seller_note_isSet) {
        obj.insert(QString("seller_note"), ::OpenAPI::toJsonValue(m_seller_note));
    }
    if (m_start_at_isSet) {
        obj.insert(QString("start_at"), ::OpenAPI::toJsonValue(m_start_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIAppointmentSegment> OAIBooking::getAppointmentSegments() const {
    return m_appointment_segments;
}
void OAIBooking::setAppointmentSegments(const QList<OAIAppointmentSegment> &appointment_segments) {
    m_appointment_segments = appointment_segments;
    m_appointment_segments_isSet = true;
}

bool OAIBooking::is_appointment_segments_Set() const{
    return m_appointment_segments_isSet;
}

bool OAIBooking::is_appointment_segments_Valid() const{
    return m_appointment_segments_isValid;
}

QString OAIBooking::getCreatedAt() const {
    return m_created_at;
}
void OAIBooking::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIBooking::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIBooking::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIBooking::getCustomerId() const {
    return m_customer_id;
}
void OAIBooking::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIBooking::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIBooking::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIBooking::getCustomerNote() const {
    return m_customer_note;
}
void OAIBooking::setCustomerNote(const QString &customer_note) {
    m_customer_note = customer_note;
    m_customer_note_isSet = true;
}

bool OAIBooking::is_customer_note_Set() const{
    return m_customer_note_isSet;
}

bool OAIBooking::is_customer_note_Valid() const{
    return m_customer_note_isValid;
}

QString OAIBooking::getId() const {
    return m_id;
}
void OAIBooking::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBooking::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBooking::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBooking::getLocationId() const {
    return m_location_id;
}
void OAIBooking::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIBooking::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIBooking::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIBooking::getSellerNote() const {
    return m_seller_note;
}
void OAIBooking::setSellerNote(const QString &seller_note) {
    m_seller_note = seller_note;
    m_seller_note_isSet = true;
}

bool OAIBooking::is_seller_note_Set() const{
    return m_seller_note_isSet;
}

bool OAIBooking::is_seller_note_Valid() const{
    return m_seller_note_isValid;
}

QString OAIBooking::getStartAt() const {
    return m_start_at;
}
void OAIBooking::setStartAt(const QString &start_at) {
    m_start_at = start_at;
    m_start_at_isSet = true;
}

bool OAIBooking::is_start_at_Set() const{
    return m_start_at_isSet;
}

bool OAIBooking::is_start_at_Valid() const{
    return m_start_at_isValid;
}

QString OAIBooking::getStatus() const {
    return m_status;
}
void OAIBooking::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBooking::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBooking::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBooking::getUpdatedAt() const {
    return m_updated_at;
}
void OAIBooking::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIBooking::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIBooking::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

qint32 OAIBooking::getVersion() const {
    return m_version;
}
void OAIBooking::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIBooking::is_version_Set() const{
    return m_version_isSet;
}

bool OAIBooking::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIBooking::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appointment_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBooking::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
