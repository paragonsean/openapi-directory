/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDispute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDispute::OAIDispute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDispute::OAIDispute() {
    this->initializeModel();
}

OAIDispute::~OAIDispute() {}

void OAIDispute::initializeModel() {

    m_amount_money_isSet = false;
    m_amount_money_isValid = false;

    m_brand_dispute_id_isSet = false;
    m_brand_dispute_id_isValid = false;

    m_card_brand_isSet = false;
    m_card_brand_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_dispute_id_isSet = false;
    m_dispute_id_isValid = false;

    m_disputed_payment_isSet = false;
    m_disputed_payment_isValid = false;

    m_due_at_isSet = false;
    m_due_at_isValid = false;

    m_evidence_ids_isSet = false;
    m_evidence_ids_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_reported_at_isSet = false;
    m_reported_at_isValid = false;

    m_reported_date_isSet = false;
    m_reported_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIDispute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDispute::fromJsonObject(QJsonObject json) {

    m_amount_money_isValid = ::OpenAPI::fromJsonValue(m_amount_money, json[QString("amount_money")]);
    m_amount_money_isSet = !json[QString("amount_money")].isNull() && m_amount_money_isValid;

    m_brand_dispute_id_isValid = ::OpenAPI::fromJsonValue(m_brand_dispute_id, json[QString("brand_dispute_id")]);
    m_brand_dispute_id_isSet = !json[QString("brand_dispute_id")].isNull() && m_brand_dispute_id_isValid;

    m_card_brand_isValid = ::OpenAPI::fromJsonValue(m_card_brand, json[QString("card_brand")]);
    m_card_brand_isSet = !json[QString("card_brand")].isNull() && m_card_brand_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_dispute_id_isValid = ::OpenAPI::fromJsonValue(m_dispute_id, json[QString("dispute_id")]);
    m_dispute_id_isSet = !json[QString("dispute_id")].isNull() && m_dispute_id_isValid;

    m_disputed_payment_isValid = ::OpenAPI::fromJsonValue(m_disputed_payment, json[QString("disputed_payment")]);
    m_disputed_payment_isSet = !json[QString("disputed_payment")].isNull() && m_disputed_payment_isValid;

    m_due_at_isValid = ::OpenAPI::fromJsonValue(m_due_at, json[QString("due_at")]);
    m_due_at_isSet = !json[QString("due_at")].isNull() && m_due_at_isValid;

    m_evidence_ids_isValid = ::OpenAPI::fromJsonValue(m_evidence_ids, json[QString("evidence_ids")]);
    m_evidence_ids_isSet = !json[QString("evidence_ids")].isNull() && m_evidence_ids_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_reported_at_isValid = ::OpenAPI::fromJsonValue(m_reported_at, json[QString("reported_at")]);
    m_reported_at_isSet = !json[QString("reported_at")].isNull() && m_reported_at_isValid;

    m_reported_date_isValid = ::OpenAPI::fromJsonValue(m_reported_date, json[QString("reported_date")]);
    m_reported_date_isSet = !json[QString("reported_date")].isNull() && m_reported_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIDispute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDispute::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_money.isSet()) {
        obj.insert(QString("amount_money"), ::OpenAPI::toJsonValue(m_amount_money));
    }
    if (m_brand_dispute_id_isSet) {
        obj.insert(QString("brand_dispute_id"), ::OpenAPI::toJsonValue(m_brand_dispute_id));
    }
    if (m_card_brand_isSet) {
        obj.insert(QString("card_brand"), ::OpenAPI::toJsonValue(m_card_brand));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_dispute_id_isSet) {
        obj.insert(QString("dispute_id"), ::OpenAPI::toJsonValue(m_dispute_id));
    }
    if (m_disputed_payment.isSet()) {
        obj.insert(QString("disputed_payment"), ::OpenAPI::toJsonValue(m_disputed_payment));
    }
    if (m_due_at_isSet) {
        obj.insert(QString("due_at"), ::OpenAPI::toJsonValue(m_due_at));
    }
    if (m_evidence_ids.size() > 0) {
        obj.insert(QString("evidence_ids"), ::OpenAPI::toJsonValue(m_evidence_ids));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_reported_at_isSet) {
        obj.insert(QString("reported_at"), ::OpenAPI::toJsonValue(m_reported_at));
    }
    if (m_reported_date_isSet) {
        obj.insert(QString("reported_date"), ::OpenAPI::toJsonValue(m_reported_date));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIMoney OAIDispute::getAmountMoney() const {
    return m_amount_money;
}
void OAIDispute::setAmountMoney(const OAIMoney &amount_money) {
    m_amount_money = amount_money;
    m_amount_money_isSet = true;
}

bool OAIDispute::is_amount_money_Set() const{
    return m_amount_money_isSet;
}

bool OAIDispute::is_amount_money_Valid() const{
    return m_amount_money_isValid;
}

QString OAIDispute::getBrandDisputeId() const {
    return m_brand_dispute_id;
}
void OAIDispute::setBrandDisputeId(const QString &brand_dispute_id) {
    m_brand_dispute_id = brand_dispute_id;
    m_brand_dispute_id_isSet = true;
}

bool OAIDispute::is_brand_dispute_id_Set() const{
    return m_brand_dispute_id_isSet;
}

bool OAIDispute::is_brand_dispute_id_Valid() const{
    return m_brand_dispute_id_isValid;
}

QString OAIDispute::getCardBrand() const {
    return m_card_brand;
}
void OAIDispute::setCardBrand(const QString &card_brand) {
    m_card_brand = card_brand;
    m_card_brand_isSet = true;
}

bool OAIDispute::is_card_brand_Set() const{
    return m_card_brand_isSet;
}

bool OAIDispute::is_card_brand_Valid() const{
    return m_card_brand_isValid;
}

QString OAIDispute::getCreatedAt() const {
    return m_created_at;
}
void OAIDispute::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDispute::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDispute::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDispute::getDisputeId() const {
    return m_dispute_id;
}
void OAIDispute::setDisputeId(const QString &dispute_id) {
    m_dispute_id = dispute_id;
    m_dispute_id_isSet = true;
}

bool OAIDispute::is_dispute_id_Set() const{
    return m_dispute_id_isSet;
}

bool OAIDispute::is_dispute_id_Valid() const{
    return m_dispute_id_isValid;
}

OAIDisputedPayment OAIDispute::getDisputedPayment() const {
    return m_disputed_payment;
}
void OAIDispute::setDisputedPayment(const OAIDisputedPayment &disputed_payment) {
    m_disputed_payment = disputed_payment;
    m_disputed_payment_isSet = true;
}

bool OAIDispute::is_disputed_payment_Set() const{
    return m_disputed_payment_isSet;
}

bool OAIDispute::is_disputed_payment_Valid() const{
    return m_disputed_payment_isValid;
}

QString OAIDispute::getDueAt() const {
    return m_due_at;
}
void OAIDispute::setDueAt(const QString &due_at) {
    m_due_at = due_at;
    m_due_at_isSet = true;
}

bool OAIDispute::is_due_at_Set() const{
    return m_due_at_isSet;
}

bool OAIDispute::is_due_at_Valid() const{
    return m_due_at_isValid;
}

QList<QString> OAIDispute::getEvidenceIds() const {
    return m_evidence_ids;
}
void OAIDispute::setEvidenceIds(const QList<QString> &evidence_ids) {
    m_evidence_ids = evidence_ids;
    m_evidence_ids_isSet = true;
}

bool OAIDispute::is_evidence_ids_Set() const{
    return m_evidence_ids_isSet;
}

bool OAIDispute::is_evidence_ids_Valid() const{
    return m_evidence_ids_isValid;
}

QString OAIDispute::getId() const {
    return m_id;
}
void OAIDispute::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDispute::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDispute::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDispute::getLocationId() const {
    return m_location_id;
}
void OAIDispute::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIDispute::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIDispute::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIDispute::getReason() const {
    return m_reason;
}
void OAIDispute::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIDispute::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIDispute::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIDispute::getReportedAt() const {
    return m_reported_at;
}
void OAIDispute::setReportedAt(const QString &reported_at) {
    m_reported_at = reported_at;
    m_reported_at_isSet = true;
}

bool OAIDispute::is_reported_at_Set() const{
    return m_reported_at_isSet;
}

bool OAIDispute::is_reported_at_Valid() const{
    return m_reported_at_isValid;
}

QString OAIDispute::getReportedDate() const {
    return m_reported_date;
}
void OAIDispute::setReportedDate(const QString &reported_date) {
    m_reported_date = reported_date;
    m_reported_date_isSet = true;
}

bool OAIDispute::is_reported_date_Set() const{
    return m_reported_date_isSet;
}

bool OAIDispute::is_reported_date_Valid() const{
    return m_reported_date_isValid;
}

QString OAIDispute::getState() const {
    return m_state;
}
void OAIDispute::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDispute::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDispute::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIDispute::getUpdatedAt() const {
    return m_updated_at;
}
void OAIDispute::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIDispute::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIDispute::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

qint32 OAIDispute::getVersion() const {
    return m_version;
}
void OAIDispute::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDispute::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDispute::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIDispute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_dispute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disputed_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reported_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reported_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDispute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
