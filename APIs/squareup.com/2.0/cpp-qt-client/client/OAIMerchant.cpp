/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerchant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerchant::OAIMerchant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerchant::OAIMerchant() {
    this->initializeModel();
}

OAIMerchant::~OAIMerchant() {}

void OAIMerchant::initializeModel() {

    m_business_name_isSet = false;
    m_business_name_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_main_location_id_isSet = false;
    m_main_location_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIMerchant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerchant::fromJsonObject(QJsonObject json) {

    m_business_name_isValid = ::OpenAPI::fromJsonValue(m_business_name, json[QString("business_name")]);
    m_business_name_isSet = !json[QString("business_name")].isNull() && m_business_name_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("language_code")]);
    m_language_code_isSet = !json[QString("language_code")].isNull() && m_language_code_isValid;

    m_main_location_id_isValid = ::OpenAPI::fromJsonValue(m_main_location_id, json[QString("main_location_id")]);
    m_main_location_id_isSet = !json[QString("main_location_id")].isNull() && m_main_location_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIMerchant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerchant::asJsonObject() const {
    QJsonObject obj;
    if (m_business_name_isSet) {
        obj.insert(QString("business_name"), ::OpenAPI::toJsonValue(m_business_name));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("language_code"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_main_location_id_isSet) {
        obj.insert(QString("main_location_id"), ::OpenAPI::toJsonValue(m_main_location_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIMerchant::getBusinessName() const {
    return m_business_name;
}
void OAIMerchant::setBusinessName(const QString &business_name) {
    m_business_name = business_name;
    m_business_name_isSet = true;
}

bool OAIMerchant::is_business_name_Set() const{
    return m_business_name_isSet;
}

bool OAIMerchant::is_business_name_Valid() const{
    return m_business_name_isValid;
}

QString OAIMerchant::getCountry() const {
    return m_country;
}
void OAIMerchant::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIMerchant::is_country_Set() const{
    return m_country_isSet;
}

bool OAIMerchant::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIMerchant::getCurrency() const {
    return m_currency;
}
void OAIMerchant::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIMerchant::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIMerchant::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIMerchant::getId() const {
    return m_id;
}
void OAIMerchant::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMerchant::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMerchant::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMerchant::getLanguageCode() const {
    return m_language_code;
}
void OAIMerchant::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIMerchant::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIMerchant::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIMerchant::getMainLocationId() const {
    return m_main_location_id;
}
void OAIMerchant::setMainLocationId(const QString &main_location_id) {
    m_main_location_id = main_location_id;
    m_main_location_id_isSet = true;
}

bool OAIMerchant::is_main_location_id_Set() const{
    return m_main_location_id_isSet;
}

bool OAIMerchant::is_main_location_id_Valid() const{
    return m_main_location_id_isValid;
}

QString OAIMerchant::getStatus() const {
    return m_status;
}
void OAIMerchant::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMerchant::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMerchant::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIMerchant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerchant::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && true;
}

} // namespace OpenAPI
