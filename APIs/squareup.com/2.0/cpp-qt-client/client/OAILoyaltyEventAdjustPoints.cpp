/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyEventAdjustPoints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyEventAdjustPoints::OAILoyaltyEventAdjustPoints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyEventAdjustPoints::OAILoyaltyEventAdjustPoints() {
    this->initializeModel();
}

OAILoyaltyEventAdjustPoints::~OAILoyaltyEventAdjustPoints() {}

void OAILoyaltyEventAdjustPoints::initializeModel() {

    m_loyalty_program_id_isSet = false;
    m_loyalty_program_id_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAILoyaltyEventAdjustPoints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyEventAdjustPoints::fromJsonObject(QJsonObject json) {

    m_loyalty_program_id_isValid = ::OpenAPI::fromJsonValue(m_loyalty_program_id, json[QString("loyalty_program_id")]);
    m_loyalty_program_id_isSet = !json[QString("loyalty_program_id")].isNull() && m_loyalty_program_id_isValid;

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("points")]);
    m_points_isSet = !json[QString("points")].isNull() && m_points_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAILoyaltyEventAdjustPoints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyEventAdjustPoints::asJsonObject() const {
    QJsonObject obj;
    if (m_loyalty_program_id_isSet) {
        obj.insert(QString("loyalty_program_id"), ::OpenAPI::toJsonValue(m_loyalty_program_id));
    }
    if (m_points_isSet) {
        obj.insert(QString("points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QString OAILoyaltyEventAdjustPoints::getLoyaltyProgramId() const {
    return m_loyalty_program_id;
}
void OAILoyaltyEventAdjustPoints::setLoyaltyProgramId(const QString &loyalty_program_id) {
    m_loyalty_program_id = loyalty_program_id;
    m_loyalty_program_id_isSet = true;
}

bool OAILoyaltyEventAdjustPoints::is_loyalty_program_id_Set() const{
    return m_loyalty_program_id_isSet;
}

bool OAILoyaltyEventAdjustPoints::is_loyalty_program_id_Valid() const{
    return m_loyalty_program_id_isValid;
}

qint32 OAILoyaltyEventAdjustPoints::getPoints() const {
    return m_points;
}
void OAILoyaltyEventAdjustPoints::setPoints(const qint32 &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAILoyaltyEventAdjustPoints::is_points_Set() const{
    return m_points_isSet;
}

bool OAILoyaltyEventAdjustPoints::is_points_Valid() const{
    return m_points_isValid;
}

QString OAILoyaltyEventAdjustPoints::getReason() const {
    return m_reason;
}
void OAILoyaltyEventAdjustPoints::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAILoyaltyEventAdjustPoints::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAILoyaltyEventAdjustPoints::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAILoyaltyEventAdjustPoints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_loyalty_program_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyEventAdjustPoints::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_points_isValid && true;
}

} // namespace OpenAPI
