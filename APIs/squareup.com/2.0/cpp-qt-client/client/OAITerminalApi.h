/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITerminalApi_H
#define OAI_OAITerminalApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICancelTerminalCheckoutResponse.h"
#include "OAICancelTerminalRefundResponse.h"
#include "OAICreateTerminalCheckoutRequest.h"
#include "OAICreateTerminalCheckoutResponse.h"
#include "OAICreateTerminalRefundRequest.h"
#include "OAICreateTerminalRefundResponse.h"
#include "OAIGetTerminalCheckoutResponse.h"
#include "OAIGetTerminalRefundResponse.h"
#include "OAISearchTerminalCheckoutsRequest.h"
#include "OAISearchTerminalCheckoutsResponse.h"
#include "OAISearchTerminalRefundsRequest.h"
#include "OAISearchTerminalRefundsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITerminalApi : public QObject {
    Q_OBJECT

public:
    OAITerminalApi(const int timeOut = 0);
    ~OAITerminalApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  checkout_id QString [required]
    */
    virtual void cancelTerminalCheckout(const QString &checkout_id);

    /**
    * @param[in]  terminal_refund_id QString [required]
    */
    virtual void cancelTerminalRefund(const QString &terminal_refund_id);

    /**
    * @param[in]  oai_create_terminal_checkout_request OAICreateTerminalCheckoutRequest [required]
    */
    virtual void createTerminalCheckout(const OAICreateTerminalCheckoutRequest &oai_create_terminal_checkout_request);

    /**
    * @param[in]  oai_create_terminal_refund_request OAICreateTerminalRefundRequest [required]
    */
    virtual void createTerminalRefund(const OAICreateTerminalRefundRequest &oai_create_terminal_refund_request);

    /**
    * @param[in]  checkout_id QString [required]
    */
    virtual void getTerminalCheckout(const QString &checkout_id);

    /**
    * @param[in]  terminal_refund_id QString [required]
    */
    virtual void getTerminalRefund(const QString &terminal_refund_id);

    /**
    * @param[in]  oai_search_terminal_checkouts_request OAISearchTerminalCheckoutsRequest [required]
    */
    virtual void searchTerminalCheckouts(const OAISearchTerminalCheckoutsRequest &oai_search_terminal_checkouts_request);

    /**
    * @param[in]  oai_search_terminal_refunds_request OAISearchTerminalRefundsRequest [required]
    */
    virtual void searchTerminalRefunds(const OAISearchTerminalRefundsRequest &oai_search_terminal_refunds_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelTerminalCheckoutCallback(OAIHttpRequestWorker *worker);
    void cancelTerminalRefundCallback(OAIHttpRequestWorker *worker);
    void createTerminalCheckoutCallback(OAIHttpRequestWorker *worker);
    void createTerminalRefundCallback(OAIHttpRequestWorker *worker);
    void getTerminalCheckoutCallback(OAIHttpRequestWorker *worker);
    void getTerminalRefundCallback(OAIHttpRequestWorker *worker);
    void searchTerminalCheckoutsCallback(OAIHttpRequestWorker *worker);
    void searchTerminalRefundsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelTerminalCheckoutSignal(OAICancelTerminalCheckoutResponse summary);
    void cancelTerminalRefundSignal(OAICancelTerminalRefundResponse summary);
    void createTerminalCheckoutSignal(OAICreateTerminalCheckoutResponse summary);
    void createTerminalRefundSignal(OAICreateTerminalRefundResponse summary);
    void getTerminalCheckoutSignal(OAIGetTerminalCheckoutResponse summary);
    void getTerminalRefundSignal(OAIGetTerminalRefundResponse summary);
    void searchTerminalCheckoutsSignal(OAISearchTerminalCheckoutsResponse summary);
    void searchTerminalRefundsSignal(OAISearchTerminalRefundsResponse summary);


    void cancelTerminalCheckoutSignalFull(OAIHttpRequestWorker *worker, OAICancelTerminalCheckoutResponse summary);
    void cancelTerminalRefundSignalFull(OAIHttpRequestWorker *worker, OAICancelTerminalRefundResponse summary);
    void createTerminalCheckoutSignalFull(OAIHttpRequestWorker *worker, OAICreateTerminalCheckoutResponse summary);
    void createTerminalRefundSignalFull(OAIHttpRequestWorker *worker, OAICreateTerminalRefundResponse summary);
    void getTerminalCheckoutSignalFull(OAIHttpRequestWorker *worker, OAIGetTerminalCheckoutResponse summary);
    void getTerminalRefundSignalFull(OAIHttpRequestWorker *worker, OAIGetTerminalRefundResponse summary);
    void searchTerminalCheckoutsSignalFull(OAIHttpRequestWorker *worker, OAISearchTerminalCheckoutsResponse summary);
    void searchTerminalRefundsSignalFull(OAIHttpRequestWorker *worker, OAISearchTerminalRefundsResponse summary);

    Q_DECL_DEPRECATED_X("Use cancelTerminalCheckoutSignalError() instead")
    void cancelTerminalCheckoutSignalE(OAICancelTerminalCheckoutResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelTerminalCheckoutSignalError(OAICancelTerminalCheckoutResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelTerminalRefundSignalError() instead")
    void cancelTerminalRefundSignalE(OAICancelTerminalRefundResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelTerminalRefundSignalError(OAICancelTerminalRefundResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTerminalCheckoutSignalError() instead")
    void createTerminalCheckoutSignalE(OAICreateTerminalCheckoutResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTerminalCheckoutSignalError(OAICreateTerminalCheckoutResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTerminalRefundSignalError() instead")
    void createTerminalRefundSignalE(OAICreateTerminalRefundResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTerminalRefundSignalError(OAICreateTerminalRefundResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTerminalCheckoutSignalError() instead")
    void getTerminalCheckoutSignalE(OAIGetTerminalCheckoutResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTerminalCheckoutSignalError(OAIGetTerminalCheckoutResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTerminalRefundSignalError() instead")
    void getTerminalRefundSignalE(OAIGetTerminalRefundResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTerminalRefundSignalError(OAIGetTerminalRefundResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchTerminalCheckoutsSignalError() instead")
    void searchTerminalCheckoutsSignalE(OAISearchTerminalCheckoutsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchTerminalCheckoutsSignalError(OAISearchTerminalCheckoutsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchTerminalRefundsSignalError() instead")
    void searchTerminalRefundsSignalE(OAISearchTerminalRefundsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchTerminalRefundsSignalError(OAISearchTerminalRefundsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelTerminalCheckoutSignalErrorFull() instead")
    void cancelTerminalCheckoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelTerminalCheckoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelTerminalRefundSignalErrorFull() instead")
    void cancelTerminalRefundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelTerminalRefundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTerminalCheckoutSignalErrorFull() instead")
    void createTerminalCheckoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTerminalCheckoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTerminalRefundSignalErrorFull() instead")
    void createTerminalRefundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTerminalRefundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTerminalCheckoutSignalErrorFull() instead")
    void getTerminalCheckoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTerminalCheckoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTerminalRefundSignalErrorFull() instead")
    void getTerminalRefundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTerminalRefundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchTerminalCheckoutsSignalErrorFull() instead")
    void searchTerminalCheckoutsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchTerminalCheckoutsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchTerminalRefundsSignalErrorFull() instead")
    void searchTerminalRefundsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchTerminalRefundsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
