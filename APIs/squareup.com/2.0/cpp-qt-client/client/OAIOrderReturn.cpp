/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderReturn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderReturn::OAIOrderReturn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderReturn::OAIOrderReturn() {
    this->initializeModel();
}

OAIOrderReturn::~OAIOrderReturn() {}

void OAIOrderReturn::initializeModel() {

    m_return_amounts_isSet = false;
    m_return_amounts_isValid = false;

    m_return_discounts_isSet = false;
    m_return_discounts_isValid = false;

    m_return_line_items_isSet = false;
    m_return_line_items_isValid = false;

    m_return_service_charges_isSet = false;
    m_return_service_charges_isValid = false;

    m_return_taxes_isSet = false;
    m_return_taxes_isValid = false;

    m_rounding_adjustment_isSet = false;
    m_rounding_adjustment_isValid = false;

    m_source_order_id_isSet = false;
    m_source_order_id_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIOrderReturn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderReturn::fromJsonObject(QJsonObject json) {

    m_return_amounts_isValid = ::OpenAPI::fromJsonValue(m_return_amounts, json[QString("return_amounts")]);
    m_return_amounts_isSet = !json[QString("return_amounts")].isNull() && m_return_amounts_isValid;

    m_return_discounts_isValid = ::OpenAPI::fromJsonValue(m_return_discounts, json[QString("return_discounts")]);
    m_return_discounts_isSet = !json[QString("return_discounts")].isNull() && m_return_discounts_isValid;

    m_return_line_items_isValid = ::OpenAPI::fromJsonValue(m_return_line_items, json[QString("return_line_items")]);
    m_return_line_items_isSet = !json[QString("return_line_items")].isNull() && m_return_line_items_isValid;

    m_return_service_charges_isValid = ::OpenAPI::fromJsonValue(m_return_service_charges, json[QString("return_service_charges")]);
    m_return_service_charges_isSet = !json[QString("return_service_charges")].isNull() && m_return_service_charges_isValid;

    m_return_taxes_isValid = ::OpenAPI::fromJsonValue(m_return_taxes, json[QString("return_taxes")]);
    m_return_taxes_isSet = !json[QString("return_taxes")].isNull() && m_return_taxes_isValid;

    m_rounding_adjustment_isValid = ::OpenAPI::fromJsonValue(m_rounding_adjustment, json[QString("rounding_adjustment")]);
    m_rounding_adjustment_isSet = !json[QString("rounding_adjustment")].isNull() && m_rounding_adjustment_isValid;

    m_source_order_id_isValid = ::OpenAPI::fromJsonValue(m_source_order_id, json[QString("source_order_id")]);
    m_source_order_id_isSet = !json[QString("source_order_id")].isNull() && m_source_order_id_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIOrderReturn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderReturn::asJsonObject() const {
    QJsonObject obj;
    if (m_return_amounts.isSet()) {
        obj.insert(QString("return_amounts"), ::OpenAPI::toJsonValue(m_return_amounts));
    }
    if (m_return_discounts.size() > 0) {
        obj.insert(QString("return_discounts"), ::OpenAPI::toJsonValue(m_return_discounts));
    }
    if (m_return_line_items.size() > 0) {
        obj.insert(QString("return_line_items"), ::OpenAPI::toJsonValue(m_return_line_items));
    }
    if (m_return_service_charges.size() > 0) {
        obj.insert(QString("return_service_charges"), ::OpenAPI::toJsonValue(m_return_service_charges));
    }
    if (m_return_taxes.size() > 0) {
        obj.insert(QString("return_taxes"), ::OpenAPI::toJsonValue(m_return_taxes));
    }
    if (m_rounding_adjustment.isSet()) {
        obj.insert(QString("rounding_adjustment"), ::OpenAPI::toJsonValue(m_rounding_adjustment));
    }
    if (m_source_order_id_isSet) {
        obj.insert(QString("source_order_id"), ::OpenAPI::toJsonValue(m_source_order_id));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

OAIOrderMoneyAmounts OAIOrderReturn::getReturnAmounts() const {
    return m_return_amounts;
}
void OAIOrderReturn::setReturnAmounts(const OAIOrderMoneyAmounts &return_amounts) {
    m_return_amounts = return_amounts;
    m_return_amounts_isSet = true;
}

bool OAIOrderReturn::is_return_amounts_Set() const{
    return m_return_amounts_isSet;
}

bool OAIOrderReturn::is_return_amounts_Valid() const{
    return m_return_amounts_isValid;
}

QList<OAIOrderReturnDiscount> OAIOrderReturn::getReturnDiscounts() const {
    return m_return_discounts;
}
void OAIOrderReturn::setReturnDiscounts(const QList<OAIOrderReturnDiscount> &return_discounts) {
    m_return_discounts = return_discounts;
    m_return_discounts_isSet = true;
}

bool OAIOrderReturn::is_return_discounts_Set() const{
    return m_return_discounts_isSet;
}

bool OAIOrderReturn::is_return_discounts_Valid() const{
    return m_return_discounts_isValid;
}

QList<OAIOrderReturnLineItem> OAIOrderReturn::getReturnLineItems() const {
    return m_return_line_items;
}
void OAIOrderReturn::setReturnLineItems(const QList<OAIOrderReturnLineItem> &return_line_items) {
    m_return_line_items = return_line_items;
    m_return_line_items_isSet = true;
}

bool OAIOrderReturn::is_return_line_items_Set() const{
    return m_return_line_items_isSet;
}

bool OAIOrderReturn::is_return_line_items_Valid() const{
    return m_return_line_items_isValid;
}

QList<OAIOrderReturnServiceCharge> OAIOrderReturn::getReturnServiceCharges() const {
    return m_return_service_charges;
}
void OAIOrderReturn::setReturnServiceCharges(const QList<OAIOrderReturnServiceCharge> &return_service_charges) {
    m_return_service_charges = return_service_charges;
    m_return_service_charges_isSet = true;
}

bool OAIOrderReturn::is_return_service_charges_Set() const{
    return m_return_service_charges_isSet;
}

bool OAIOrderReturn::is_return_service_charges_Valid() const{
    return m_return_service_charges_isValid;
}

QList<OAIOrderReturnTax> OAIOrderReturn::getReturnTaxes() const {
    return m_return_taxes;
}
void OAIOrderReturn::setReturnTaxes(const QList<OAIOrderReturnTax> &return_taxes) {
    m_return_taxes = return_taxes;
    m_return_taxes_isSet = true;
}

bool OAIOrderReturn::is_return_taxes_Set() const{
    return m_return_taxes_isSet;
}

bool OAIOrderReturn::is_return_taxes_Valid() const{
    return m_return_taxes_isValid;
}

OAIOrderRoundingAdjustment OAIOrderReturn::getRoundingAdjustment() const {
    return m_rounding_adjustment;
}
void OAIOrderReturn::setRoundingAdjustment(const OAIOrderRoundingAdjustment &rounding_adjustment) {
    m_rounding_adjustment = rounding_adjustment;
    m_rounding_adjustment_isSet = true;
}

bool OAIOrderReturn::is_rounding_adjustment_Set() const{
    return m_rounding_adjustment_isSet;
}

bool OAIOrderReturn::is_rounding_adjustment_Valid() const{
    return m_rounding_adjustment_isValid;
}

QString OAIOrderReturn::getSourceOrderId() const {
    return m_source_order_id;
}
void OAIOrderReturn::setSourceOrderId(const QString &source_order_id) {
    m_source_order_id = source_order_id;
    m_source_order_id_isSet = true;
}

bool OAIOrderReturn::is_source_order_id_Set() const{
    return m_source_order_id_isSet;
}

bool OAIOrderReturn::is_source_order_id_Valid() const{
    return m_source_order_id_isValid;
}

QString OAIOrderReturn::getUid() const {
    return m_uid;
}
void OAIOrderReturn::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIOrderReturn::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIOrderReturn::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIOrderReturn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_return_amounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_discounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_service_charges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_taxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounding_adjustment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderReturn::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
