/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogModifierOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogModifierOverride::OAICatalogModifierOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogModifierOverride::OAICatalogModifierOverride() {
    this->initializeModel();
}

OAICatalogModifierOverride::~OAICatalogModifierOverride() {}

void OAICatalogModifierOverride::initializeModel() {

    m_modifier_id_isSet = false;
    m_modifier_id_isValid = false;

    m_on_by_default_isSet = false;
    m_on_by_default_isValid = false;
}

void OAICatalogModifierOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogModifierOverride::fromJsonObject(QJsonObject json) {

    m_modifier_id_isValid = ::OpenAPI::fromJsonValue(m_modifier_id, json[QString("modifier_id")]);
    m_modifier_id_isSet = !json[QString("modifier_id")].isNull() && m_modifier_id_isValid;

    m_on_by_default_isValid = ::OpenAPI::fromJsonValue(m_on_by_default, json[QString("on_by_default")]);
    m_on_by_default_isSet = !json[QString("on_by_default")].isNull() && m_on_by_default_isValid;
}

QString OAICatalogModifierOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogModifierOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_modifier_id_isSet) {
        obj.insert(QString("modifier_id"), ::OpenAPI::toJsonValue(m_modifier_id));
    }
    if (m_on_by_default_isSet) {
        obj.insert(QString("on_by_default"), ::OpenAPI::toJsonValue(m_on_by_default));
    }
    return obj;
}

QString OAICatalogModifierOverride::getModifierId() const {
    return m_modifier_id;
}
void OAICatalogModifierOverride::setModifierId(const QString &modifier_id) {
    m_modifier_id = modifier_id;
    m_modifier_id_isSet = true;
}

bool OAICatalogModifierOverride::is_modifier_id_Set() const{
    return m_modifier_id_isSet;
}

bool OAICatalogModifierOverride::is_modifier_id_Valid() const{
    return m_modifier_id_isValid;
}

bool OAICatalogModifierOverride::isOnByDefault() const {
    return m_on_by_default;
}
void OAICatalogModifierOverride::setOnByDefault(const bool &on_by_default) {
    m_on_by_default = on_by_default;
    m_on_by_default_isSet = true;
}

bool OAICatalogModifierOverride::is_on_by_default_Set() const{
    return m_on_by_default_isSet;
}

bool OAICatalogModifierOverride::is_on_by_default_Valid() const{
    return m_on_by_default_isValid;
}

bool OAICatalogModifierOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_modifier_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_by_default_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogModifierOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_modifier_id_isValid && true;
}

} // namespace OpenAPI
