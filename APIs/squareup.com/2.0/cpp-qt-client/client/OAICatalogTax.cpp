/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogTax.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogTax::OAICatalogTax(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogTax::OAICatalogTax() {
    this->initializeModel();
}

OAICatalogTax::~OAICatalogTax() {}

void OAICatalogTax::initializeModel() {

    m_applies_to_custom_amounts_isSet = false;
    m_applies_to_custom_amounts_isValid = false;

    m_calculation_phase_isSet = false;
    m_calculation_phase_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_inclusion_type_isSet = false;
    m_inclusion_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;
}

void OAICatalogTax::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogTax::fromJsonObject(QJsonObject json) {

    m_applies_to_custom_amounts_isValid = ::OpenAPI::fromJsonValue(m_applies_to_custom_amounts, json[QString("applies_to_custom_amounts")]);
    m_applies_to_custom_amounts_isSet = !json[QString("applies_to_custom_amounts")].isNull() && m_applies_to_custom_amounts_isValid;

    m_calculation_phase_isValid = ::OpenAPI::fromJsonValue(m_calculation_phase, json[QString("calculation_phase")]);
    m_calculation_phase_isSet = !json[QString("calculation_phase")].isNull() && m_calculation_phase_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_inclusion_type_isValid = ::OpenAPI::fromJsonValue(m_inclusion_type, json[QString("inclusion_type")]);
    m_inclusion_type_isSet = !json[QString("inclusion_type")].isNull() && m_inclusion_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;
}

QString OAICatalogTax::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogTax::asJsonObject() const {
    QJsonObject obj;
    if (m_applies_to_custom_amounts_isSet) {
        obj.insert(QString("applies_to_custom_amounts"), ::OpenAPI::toJsonValue(m_applies_to_custom_amounts));
    }
    if (m_calculation_phase_isSet) {
        obj.insert(QString("calculation_phase"), ::OpenAPI::toJsonValue(m_calculation_phase));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_inclusion_type_isSet) {
        obj.insert(QString("inclusion_type"), ::OpenAPI::toJsonValue(m_inclusion_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    return obj;
}

bool OAICatalogTax::isAppliesToCustomAmounts() const {
    return m_applies_to_custom_amounts;
}
void OAICatalogTax::setAppliesToCustomAmounts(const bool &applies_to_custom_amounts) {
    m_applies_to_custom_amounts = applies_to_custom_amounts;
    m_applies_to_custom_amounts_isSet = true;
}

bool OAICatalogTax::is_applies_to_custom_amounts_Set() const{
    return m_applies_to_custom_amounts_isSet;
}

bool OAICatalogTax::is_applies_to_custom_amounts_Valid() const{
    return m_applies_to_custom_amounts_isValid;
}

QString OAICatalogTax::getCalculationPhase() const {
    return m_calculation_phase;
}
void OAICatalogTax::setCalculationPhase(const QString &calculation_phase) {
    m_calculation_phase = calculation_phase;
    m_calculation_phase_isSet = true;
}

bool OAICatalogTax::is_calculation_phase_Set() const{
    return m_calculation_phase_isSet;
}

bool OAICatalogTax::is_calculation_phase_Valid() const{
    return m_calculation_phase_isValid;
}

bool OAICatalogTax::isEnabled() const {
    return m_enabled;
}
void OAICatalogTax::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICatalogTax::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICatalogTax::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAICatalogTax::getInclusionType() const {
    return m_inclusion_type;
}
void OAICatalogTax::setInclusionType(const QString &inclusion_type) {
    m_inclusion_type = inclusion_type;
    m_inclusion_type_isSet = true;
}

bool OAICatalogTax::is_inclusion_type_Set() const{
    return m_inclusion_type_isSet;
}

bool OAICatalogTax::is_inclusion_type_Valid() const{
    return m_inclusion_type_isValid;
}

QString OAICatalogTax::getName() const {
    return m_name;
}
void OAICatalogTax::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICatalogTax::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalogTax::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICatalogTax::getPercentage() const {
    return m_percentage;
}
void OAICatalogTax::setPercentage(const QString &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAICatalogTax::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAICatalogTax::is_percentage_Valid() const{
    return m_percentage_isValid;
}

bool OAICatalogTax::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applies_to_custom_amounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculation_phase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogTax::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
