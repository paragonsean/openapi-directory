/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1Employee.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV1Employee::OAIV1Employee(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV1Employee::OAIV1Employee() {
    this->initializeModel();
}

OAIV1Employee::~OAIV1Employee() {}

void OAIV1Employee::initializeModel() {

    m_authorized_location_ids_isSet = false;
    m_authorized_location_ids_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_role_ids_isSet = false;
    m_role_ids_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIV1Employee::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV1Employee::fromJsonObject(QJsonObject json) {

    m_authorized_location_ids_isValid = ::OpenAPI::fromJsonValue(m_authorized_location_ids, json[QString("authorized_location_ids")]);
    m_authorized_location_ids_isSet = !json[QString("authorized_location_ids")].isNull() && m_authorized_location_ids_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("external_id")]);
    m_external_id_isSet = !json[QString("external_id")].isNull() && m_external_id_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_role_ids_isValid = ::OpenAPI::fromJsonValue(m_role_ids, json[QString("role_ids")]);
    m_role_ids_isSet = !json[QString("role_ids")].isNull() && m_role_ids_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIV1Employee::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV1Employee::asJsonObject() const {
    QJsonObject obj;
    if (m_authorized_location_ids.size() > 0) {
        obj.insert(QString("authorized_location_ids"), ::OpenAPI::toJsonValue(m_authorized_location_ids));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("external_id"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_role_ids.size() > 0) {
        obj.insert(QString("role_ids"), ::OpenAPI::toJsonValue(m_role_ids));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QList<QString> OAIV1Employee::getAuthorizedLocationIds() const {
    return m_authorized_location_ids;
}
void OAIV1Employee::setAuthorizedLocationIds(const QList<QString> &authorized_location_ids) {
    m_authorized_location_ids = authorized_location_ids;
    m_authorized_location_ids_isSet = true;
}

bool OAIV1Employee::is_authorized_location_ids_Set() const{
    return m_authorized_location_ids_isSet;
}

bool OAIV1Employee::is_authorized_location_ids_Valid() const{
    return m_authorized_location_ids_isValid;
}

QString OAIV1Employee::getCreatedAt() const {
    return m_created_at;
}
void OAIV1Employee::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIV1Employee::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIV1Employee::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIV1Employee::getEmail() const {
    return m_email;
}
void OAIV1Employee::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIV1Employee::is_email_Set() const{
    return m_email_isSet;
}

bool OAIV1Employee::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIV1Employee::getExternalId() const {
    return m_external_id;
}
void OAIV1Employee::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIV1Employee::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIV1Employee::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAIV1Employee::getFirstName() const {
    return m_first_name;
}
void OAIV1Employee::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIV1Employee::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIV1Employee::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIV1Employee::getId() const {
    return m_id;
}
void OAIV1Employee::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIV1Employee::is_id_Set() const{
    return m_id_isSet;
}

bool OAIV1Employee::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIV1Employee::getLastName() const {
    return m_last_name;
}
void OAIV1Employee::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIV1Employee::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIV1Employee::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QList<QString> OAIV1Employee::getRoleIds() const {
    return m_role_ids;
}
void OAIV1Employee::setRoleIds(const QList<QString> &role_ids) {
    m_role_ids = role_ids;
    m_role_ids_isSet = true;
}

bool OAIV1Employee::is_role_ids_Set() const{
    return m_role_ids_isSet;
}

bool OAIV1Employee::is_role_ids_Valid() const{
    return m_role_ids_isValid;
}

QString OAIV1Employee::getStatus() const {
    return m_status;
}
void OAIV1Employee::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIV1Employee::is_status_Set() const{
    return m_status_isSet;
}

bool OAIV1Employee::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIV1Employee::getUpdatedAt() const {
    return m_updated_at;
}
void OAIV1Employee::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIV1Employee::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIV1Employee::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIV1Employee::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorized_location_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV1Employee::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_first_name_isValid && m_last_name_isValid && true;
}

} // namespace OpenAPI
