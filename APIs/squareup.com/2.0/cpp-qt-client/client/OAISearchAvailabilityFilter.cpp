/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchAvailabilityFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchAvailabilityFilter::OAISearchAvailabilityFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchAvailabilityFilter::OAISearchAvailabilityFilter() {
    this->initializeModel();
}

OAISearchAvailabilityFilter::~OAISearchAvailabilityFilter() {}

void OAISearchAvailabilityFilter::initializeModel() {

    m_booking_id_isSet = false;
    m_booking_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_segment_filters_isSet = false;
    m_segment_filters_isValid = false;

    m_start_at_range_isSet = false;
    m_start_at_range_isValid = false;
}

void OAISearchAvailabilityFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchAvailabilityFilter::fromJsonObject(QJsonObject json) {

    m_booking_id_isValid = ::OpenAPI::fromJsonValue(m_booking_id, json[QString("booking_id")]);
    m_booking_id_isSet = !json[QString("booking_id")].isNull() && m_booking_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_segment_filters_isValid = ::OpenAPI::fromJsonValue(m_segment_filters, json[QString("segment_filters")]);
    m_segment_filters_isSet = !json[QString("segment_filters")].isNull() && m_segment_filters_isValid;

    m_start_at_range_isValid = ::OpenAPI::fromJsonValue(m_start_at_range, json[QString("start_at_range")]);
    m_start_at_range_isSet = !json[QString("start_at_range")].isNull() && m_start_at_range_isValid;
}

QString OAISearchAvailabilityFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchAvailabilityFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_booking_id_isSet) {
        obj.insert(QString("booking_id"), ::OpenAPI::toJsonValue(m_booking_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_segment_filters.size() > 0) {
        obj.insert(QString("segment_filters"), ::OpenAPI::toJsonValue(m_segment_filters));
    }
    if (m_start_at_range.isSet()) {
        obj.insert(QString("start_at_range"), ::OpenAPI::toJsonValue(m_start_at_range));
    }
    return obj;
}

QString OAISearchAvailabilityFilter::getBookingId() const {
    return m_booking_id;
}
void OAISearchAvailabilityFilter::setBookingId(const QString &booking_id) {
    m_booking_id = booking_id;
    m_booking_id_isSet = true;
}

bool OAISearchAvailabilityFilter::is_booking_id_Set() const{
    return m_booking_id_isSet;
}

bool OAISearchAvailabilityFilter::is_booking_id_Valid() const{
    return m_booking_id_isValid;
}

QString OAISearchAvailabilityFilter::getLocationId() const {
    return m_location_id;
}
void OAISearchAvailabilityFilter::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAISearchAvailabilityFilter::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAISearchAvailabilityFilter::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QList<OAISegmentFilter> OAISearchAvailabilityFilter::getSegmentFilters() const {
    return m_segment_filters;
}
void OAISearchAvailabilityFilter::setSegmentFilters(const QList<OAISegmentFilter> &segment_filters) {
    m_segment_filters = segment_filters;
    m_segment_filters_isSet = true;
}

bool OAISearchAvailabilityFilter::is_segment_filters_Set() const{
    return m_segment_filters_isSet;
}

bool OAISearchAvailabilityFilter::is_segment_filters_Valid() const{
    return m_segment_filters_isValid;
}

OAITimeRange OAISearchAvailabilityFilter::getStartAtRange() const {
    return m_start_at_range;
}
void OAISearchAvailabilityFilter::setStartAtRange(const OAITimeRange &start_at_range) {
    m_start_at_range = start_at_range;
    m_start_at_range_isSet = true;
}

bool OAISearchAvailabilityFilter::is_start_at_range_Set() const{
    return m_start_at_range_isSet;
}

bool OAISearchAvailabilityFilter::is_start_at_range_Valid() const{
    return m_start_at_range_isValid;
}

bool OAISearchAvailabilityFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_booking_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchAvailabilityFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_at_range_isValid && true;
}

} // namespace OpenAPI
