/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryTransfer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryTransfer::OAIInventoryTransfer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryTransfer::OAIInventoryTransfer() {
    this->initializeModel();
}

OAIInventoryTransfer::~OAIInventoryTransfer() {}

void OAIInventoryTransfer::initializeModel() {

    m_catalog_object_id_isSet = false;
    m_catalog_object_id_isValid = false;

    m_catalog_object_type_isSet = false;
    m_catalog_object_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_employee_id_isSet = false;
    m_employee_id_isValid = false;

    m_from_location_id_isSet = false;
    m_from_location_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_occurred_at_isSet = false;
    m_occurred_at_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_to_location_id_isSet = false;
    m_to_location_id_isValid = false;
}

void OAIInventoryTransfer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryTransfer::fromJsonObject(QJsonObject json) {

    m_catalog_object_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_object_id, json[QString("catalog_object_id")]);
    m_catalog_object_id_isSet = !json[QString("catalog_object_id")].isNull() && m_catalog_object_id_isValid;

    m_catalog_object_type_isValid = ::OpenAPI::fromJsonValue(m_catalog_object_type, json[QString("catalog_object_type")]);
    m_catalog_object_type_isSet = !json[QString("catalog_object_type")].isNull() && m_catalog_object_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_employee_id_isValid = ::OpenAPI::fromJsonValue(m_employee_id, json[QString("employee_id")]);
    m_employee_id_isSet = !json[QString("employee_id")].isNull() && m_employee_id_isValid;

    m_from_location_id_isValid = ::OpenAPI::fromJsonValue(m_from_location_id, json[QString("from_location_id")]);
    m_from_location_id_isSet = !json[QString("from_location_id")].isNull() && m_from_location_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_occurred_at_isValid = ::OpenAPI::fromJsonValue(m_occurred_at, json[QString("occurred_at")]);
    m_occurred_at_isSet = !json[QString("occurred_at")].isNull() && m_occurred_at_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("reference_id")]);
    m_reference_id_isSet = !json[QString("reference_id")].isNull() && m_reference_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_to_location_id_isValid = ::OpenAPI::fromJsonValue(m_to_location_id, json[QString("to_location_id")]);
    m_to_location_id_isSet = !json[QString("to_location_id")].isNull() && m_to_location_id_isValid;
}

QString OAIInventoryTransfer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryTransfer::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_object_id_isSet) {
        obj.insert(QString("catalog_object_id"), ::OpenAPI::toJsonValue(m_catalog_object_id));
    }
    if (m_catalog_object_type_isSet) {
        obj.insert(QString("catalog_object_type"), ::OpenAPI::toJsonValue(m_catalog_object_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_employee_id_isSet) {
        obj.insert(QString("employee_id"), ::OpenAPI::toJsonValue(m_employee_id));
    }
    if (m_from_location_id_isSet) {
        obj.insert(QString("from_location_id"), ::OpenAPI::toJsonValue(m_from_location_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_occurred_at_isSet) {
        obj.insert(QString("occurred_at"), ::OpenAPI::toJsonValue(m_occurred_at));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("reference_id"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_to_location_id_isSet) {
        obj.insert(QString("to_location_id"), ::OpenAPI::toJsonValue(m_to_location_id));
    }
    return obj;
}

QString OAIInventoryTransfer::getCatalogObjectId() const {
    return m_catalog_object_id;
}
void OAIInventoryTransfer::setCatalogObjectId(const QString &catalog_object_id) {
    m_catalog_object_id = catalog_object_id;
    m_catalog_object_id_isSet = true;
}

bool OAIInventoryTransfer::is_catalog_object_id_Set() const{
    return m_catalog_object_id_isSet;
}

bool OAIInventoryTransfer::is_catalog_object_id_Valid() const{
    return m_catalog_object_id_isValid;
}

QString OAIInventoryTransfer::getCatalogObjectType() const {
    return m_catalog_object_type;
}
void OAIInventoryTransfer::setCatalogObjectType(const QString &catalog_object_type) {
    m_catalog_object_type = catalog_object_type;
    m_catalog_object_type_isSet = true;
}

bool OAIInventoryTransfer::is_catalog_object_type_Set() const{
    return m_catalog_object_type_isSet;
}

bool OAIInventoryTransfer::is_catalog_object_type_Valid() const{
    return m_catalog_object_type_isValid;
}

QString OAIInventoryTransfer::getCreatedAt() const {
    return m_created_at;
}
void OAIInventoryTransfer::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIInventoryTransfer::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIInventoryTransfer::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIInventoryTransfer::getEmployeeId() const {
    return m_employee_id;
}
void OAIInventoryTransfer::setEmployeeId(const QString &employee_id) {
    m_employee_id = employee_id;
    m_employee_id_isSet = true;
}

bool OAIInventoryTransfer::is_employee_id_Set() const{
    return m_employee_id_isSet;
}

bool OAIInventoryTransfer::is_employee_id_Valid() const{
    return m_employee_id_isValid;
}

QString OAIInventoryTransfer::getFromLocationId() const {
    return m_from_location_id;
}
void OAIInventoryTransfer::setFromLocationId(const QString &from_location_id) {
    m_from_location_id = from_location_id;
    m_from_location_id_isSet = true;
}

bool OAIInventoryTransfer::is_from_location_id_Set() const{
    return m_from_location_id_isSet;
}

bool OAIInventoryTransfer::is_from_location_id_Valid() const{
    return m_from_location_id_isValid;
}

QString OAIInventoryTransfer::getId() const {
    return m_id;
}
void OAIInventoryTransfer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInventoryTransfer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInventoryTransfer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIInventoryTransfer::getOccurredAt() const {
    return m_occurred_at;
}
void OAIInventoryTransfer::setOccurredAt(const QString &occurred_at) {
    m_occurred_at = occurred_at;
    m_occurred_at_isSet = true;
}

bool OAIInventoryTransfer::is_occurred_at_Set() const{
    return m_occurred_at_isSet;
}

bool OAIInventoryTransfer::is_occurred_at_Valid() const{
    return m_occurred_at_isValid;
}

QString OAIInventoryTransfer::getQuantity() const {
    return m_quantity;
}
void OAIInventoryTransfer::setQuantity(const QString &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIInventoryTransfer::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIInventoryTransfer::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIInventoryTransfer::getReferenceId() const {
    return m_reference_id;
}
void OAIInventoryTransfer::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIInventoryTransfer::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIInventoryTransfer::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

OAISourceApplication OAIInventoryTransfer::getSource() const {
    return m_source;
}
void OAIInventoryTransfer::setSource(const OAISourceApplication &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIInventoryTransfer::is_source_Set() const{
    return m_source_isSet;
}

bool OAIInventoryTransfer::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIInventoryTransfer::getState() const {
    return m_state;
}
void OAIInventoryTransfer::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInventoryTransfer::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInventoryTransfer::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIInventoryTransfer::getToLocationId() const {
    return m_to_location_id;
}
void OAIInventoryTransfer::setToLocationId(const QString &to_location_id) {
    m_to_location_id = to_location_id;
    m_to_location_id_isSet = true;
}

bool OAIInventoryTransfer::is_to_location_id_Set() const{
    return m_to_location_id_isSet;
}

bool OAIInventoryTransfer::is_to_location_id_Valid() const{
    return m_to_location_id_isValid;
}

bool OAIInventoryTransfer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurred_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryTransfer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
