/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICashDrawerShift.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICashDrawerShift::OAICashDrawerShift(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICashDrawerShift::OAICashDrawerShift() {
    this->initializeModel();
}

OAICashDrawerShift::~OAICashDrawerShift() {}

void OAICashDrawerShift::initializeModel() {

    m_cash_paid_in_money_isSet = false;
    m_cash_paid_in_money_isValid = false;

    m_cash_paid_out_money_isSet = false;
    m_cash_paid_out_money_isValid = false;

    m_cash_payment_money_isSet = false;
    m_cash_payment_money_isValid = false;

    m_cash_refunds_money_isSet = false;
    m_cash_refunds_money_isValid = false;

    m_closed_at_isSet = false;
    m_closed_at_isValid = false;

    m_closed_cash_money_isSet = false;
    m_closed_cash_money_isValid = false;

    m_closing_employee_id_isSet = false;
    m_closing_employee_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_employee_ids_isSet = false;
    m_employee_ids_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_ending_employee_id_isSet = false;
    m_ending_employee_id_isValid = false;

    m_expected_cash_money_isSet = false;
    m_expected_cash_money_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_opened_at_isSet = false;
    m_opened_at_isValid = false;

    m_opened_cash_money_isSet = false;
    m_opened_cash_money_isValid = false;

    m_opening_employee_id_isSet = false;
    m_opening_employee_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICashDrawerShift::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICashDrawerShift::fromJsonObject(QJsonObject json) {

    m_cash_paid_in_money_isValid = ::OpenAPI::fromJsonValue(m_cash_paid_in_money, json[QString("cash_paid_in_money")]);
    m_cash_paid_in_money_isSet = !json[QString("cash_paid_in_money")].isNull() && m_cash_paid_in_money_isValid;

    m_cash_paid_out_money_isValid = ::OpenAPI::fromJsonValue(m_cash_paid_out_money, json[QString("cash_paid_out_money")]);
    m_cash_paid_out_money_isSet = !json[QString("cash_paid_out_money")].isNull() && m_cash_paid_out_money_isValid;

    m_cash_payment_money_isValid = ::OpenAPI::fromJsonValue(m_cash_payment_money, json[QString("cash_payment_money")]);
    m_cash_payment_money_isSet = !json[QString("cash_payment_money")].isNull() && m_cash_payment_money_isValid;

    m_cash_refunds_money_isValid = ::OpenAPI::fromJsonValue(m_cash_refunds_money, json[QString("cash_refunds_money")]);
    m_cash_refunds_money_isSet = !json[QString("cash_refunds_money")].isNull() && m_cash_refunds_money_isValid;

    m_closed_at_isValid = ::OpenAPI::fromJsonValue(m_closed_at, json[QString("closed_at")]);
    m_closed_at_isSet = !json[QString("closed_at")].isNull() && m_closed_at_isValid;

    m_closed_cash_money_isValid = ::OpenAPI::fromJsonValue(m_closed_cash_money, json[QString("closed_cash_money")]);
    m_closed_cash_money_isSet = !json[QString("closed_cash_money")].isNull() && m_closed_cash_money_isValid;

    m_closing_employee_id_isValid = ::OpenAPI::fromJsonValue(m_closing_employee_id, json[QString("closing_employee_id")]);
    m_closing_employee_id_isSet = !json[QString("closing_employee_id")].isNull() && m_closing_employee_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_employee_ids_isValid = ::OpenAPI::fromJsonValue(m_employee_ids, json[QString("employee_ids")]);
    m_employee_ids_isSet = !json[QString("employee_ids")].isNull() && m_employee_ids_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("ended_at")]);
    m_ended_at_isSet = !json[QString("ended_at")].isNull() && m_ended_at_isValid;

    m_ending_employee_id_isValid = ::OpenAPI::fromJsonValue(m_ending_employee_id, json[QString("ending_employee_id")]);
    m_ending_employee_id_isSet = !json[QString("ending_employee_id")].isNull() && m_ending_employee_id_isValid;

    m_expected_cash_money_isValid = ::OpenAPI::fromJsonValue(m_expected_cash_money, json[QString("expected_cash_money")]);
    m_expected_cash_money_isSet = !json[QString("expected_cash_money")].isNull() && m_expected_cash_money_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_opened_at_isValid = ::OpenAPI::fromJsonValue(m_opened_at, json[QString("opened_at")]);
    m_opened_at_isSet = !json[QString("opened_at")].isNull() && m_opened_at_isValid;

    m_opened_cash_money_isValid = ::OpenAPI::fromJsonValue(m_opened_cash_money, json[QString("opened_cash_money")]);
    m_opened_cash_money_isSet = !json[QString("opened_cash_money")].isNull() && m_opened_cash_money_isValid;

    m_opening_employee_id_isValid = ::OpenAPI::fromJsonValue(m_opening_employee_id, json[QString("opening_employee_id")]);
    m_opening_employee_id_isSet = !json[QString("opening_employee_id")].isNull() && m_opening_employee_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAICashDrawerShift::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICashDrawerShift::asJsonObject() const {
    QJsonObject obj;
    if (m_cash_paid_in_money.isSet()) {
        obj.insert(QString("cash_paid_in_money"), ::OpenAPI::toJsonValue(m_cash_paid_in_money));
    }
    if (m_cash_paid_out_money.isSet()) {
        obj.insert(QString("cash_paid_out_money"), ::OpenAPI::toJsonValue(m_cash_paid_out_money));
    }
    if (m_cash_payment_money.isSet()) {
        obj.insert(QString("cash_payment_money"), ::OpenAPI::toJsonValue(m_cash_payment_money));
    }
    if (m_cash_refunds_money.isSet()) {
        obj.insert(QString("cash_refunds_money"), ::OpenAPI::toJsonValue(m_cash_refunds_money));
    }
    if (m_closed_at_isSet) {
        obj.insert(QString("closed_at"), ::OpenAPI::toJsonValue(m_closed_at));
    }
    if (m_closed_cash_money.isSet()) {
        obj.insert(QString("closed_cash_money"), ::OpenAPI::toJsonValue(m_closed_cash_money));
    }
    if (m_closing_employee_id_isSet) {
        obj.insert(QString("closing_employee_id"), ::OpenAPI::toJsonValue(m_closing_employee_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_employee_ids.size() > 0) {
        obj.insert(QString("employee_ids"), ::OpenAPI::toJsonValue(m_employee_ids));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("ended_at"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_ending_employee_id_isSet) {
        obj.insert(QString("ending_employee_id"), ::OpenAPI::toJsonValue(m_ending_employee_id));
    }
    if (m_expected_cash_money.isSet()) {
        obj.insert(QString("expected_cash_money"), ::OpenAPI::toJsonValue(m_expected_cash_money));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_opened_at_isSet) {
        obj.insert(QString("opened_at"), ::OpenAPI::toJsonValue(m_opened_at));
    }
    if (m_opened_cash_money.isSet()) {
        obj.insert(QString("opened_cash_money"), ::OpenAPI::toJsonValue(m_opened_cash_money));
    }
    if (m_opening_employee_id_isSet) {
        obj.insert(QString("opening_employee_id"), ::OpenAPI::toJsonValue(m_opening_employee_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIMoney OAICashDrawerShift::getCashPaidInMoney() const {
    return m_cash_paid_in_money;
}
void OAICashDrawerShift::setCashPaidInMoney(const OAIMoney &cash_paid_in_money) {
    m_cash_paid_in_money = cash_paid_in_money;
    m_cash_paid_in_money_isSet = true;
}

bool OAICashDrawerShift::is_cash_paid_in_money_Set() const{
    return m_cash_paid_in_money_isSet;
}

bool OAICashDrawerShift::is_cash_paid_in_money_Valid() const{
    return m_cash_paid_in_money_isValid;
}

OAIMoney OAICashDrawerShift::getCashPaidOutMoney() const {
    return m_cash_paid_out_money;
}
void OAICashDrawerShift::setCashPaidOutMoney(const OAIMoney &cash_paid_out_money) {
    m_cash_paid_out_money = cash_paid_out_money;
    m_cash_paid_out_money_isSet = true;
}

bool OAICashDrawerShift::is_cash_paid_out_money_Set() const{
    return m_cash_paid_out_money_isSet;
}

bool OAICashDrawerShift::is_cash_paid_out_money_Valid() const{
    return m_cash_paid_out_money_isValid;
}

OAIMoney OAICashDrawerShift::getCashPaymentMoney() const {
    return m_cash_payment_money;
}
void OAICashDrawerShift::setCashPaymentMoney(const OAIMoney &cash_payment_money) {
    m_cash_payment_money = cash_payment_money;
    m_cash_payment_money_isSet = true;
}

bool OAICashDrawerShift::is_cash_payment_money_Set() const{
    return m_cash_payment_money_isSet;
}

bool OAICashDrawerShift::is_cash_payment_money_Valid() const{
    return m_cash_payment_money_isValid;
}

OAIMoney OAICashDrawerShift::getCashRefundsMoney() const {
    return m_cash_refunds_money;
}
void OAICashDrawerShift::setCashRefundsMoney(const OAIMoney &cash_refunds_money) {
    m_cash_refunds_money = cash_refunds_money;
    m_cash_refunds_money_isSet = true;
}

bool OAICashDrawerShift::is_cash_refunds_money_Set() const{
    return m_cash_refunds_money_isSet;
}

bool OAICashDrawerShift::is_cash_refunds_money_Valid() const{
    return m_cash_refunds_money_isValid;
}

QString OAICashDrawerShift::getClosedAt() const {
    return m_closed_at;
}
void OAICashDrawerShift::setClosedAt(const QString &closed_at) {
    m_closed_at = closed_at;
    m_closed_at_isSet = true;
}

bool OAICashDrawerShift::is_closed_at_Set() const{
    return m_closed_at_isSet;
}

bool OAICashDrawerShift::is_closed_at_Valid() const{
    return m_closed_at_isValid;
}

OAIMoney OAICashDrawerShift::getClosedCashMoney() const {
    return m_closed_cash_money;
}
void OAICashDrawerShift::setClosedCashMoney(const OAIMoney &closed_cash_money) {
    m_closed_cash_money = closed_cash_money;
    m_closed_cash_money_isSet = true;
}

bool OAICashDrawerShift::is_closed_cash_money_Set() const{
    return m_closed_cash_money_isSet;
}

bool OAICashDrawerShift::is_closed_cash_money_Valid() const{
    return m_closed_cash_money_isValid;
}

QString OAICashDrawerShift::getClosingEmployeeId() const {
    return m_closing_employee_id;
}
void OAICashDrawerShift::setClosingEmployeeId(const QString &closing_employee_id) {
    m_closing_employee_id = closing_employee_id;
    m_closing_employee_id_isSet = true;
}

bool OAICashDrawerShift::is_closing_employee_id_Set() const{
    return m_closing_employee_id_isSet;
}

bool OAICashDrawerShift::is_closing_employee_id_Valid() const{
    return m_closing_employee_id_isValid;
}

QString OAICashDrawerShift::getDescription() const {
    return m_description;
}
void OAICashDrawerShift::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICashDrawerShift::is_description_Set() const{
    return m_description_isSet;
}

bool OAICashDrawerShift::is_description_Valid() const{
    return m_description_isValid;
}

OAICashDrawerDevice OAICashDrawerShift::getDevice() const {
    return m_device;
}
void OAICashDrawerShift::setDevice(const OAICashDrawerDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAICashDrawerShift::is_device_Set() const{
    return m_device_isSet;
}

bool OAICashDrawerShift::is_device_Valid() const{
    return m_device_isValid;
}

QList<QString> OAICashDrawerShift::getEmployeeIds() const {
    return m_employee_ids;
}
void OAICashDrawerShift::setEmployeeIds(const QList<QString> &employee_ids) {
    m_employee_ids = employee_ids;
    m_employee_ids_isSet = true;
}

bool OAICashDrawerShift::is_employee_ids_Set() const{
    return m_employee_ids_isSet;
}

bool OAICashDrawerShift::is_employee_ids_Valid() const{
    return m_employee_ids_isValid;
}

QString OAICashDrawerShift::getEndedAt() const {
    return m_ended_at;
}
void OAICashDrawerShift::setEndedAt(const QString &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAICashDrawerShift::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAICashDrawerShift::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

QString OAICashDrawerShift::getEndingEmployeeId() const {
    return m_ending_employee_id;
}
void OAICashDrawerShift::setEndingEmployeeId(const QString &ending_employee_id) {
    m_ending_employee_id = ending_employee_id;
    m_ending_employee_id_isSet = true;
}

bool OAICashDrawerShift::is_ending_employee_id_Set() const{
    return m_ending_employee_id_isSet;
}

bool OAICashDrawerShift::is_ending_employee_id_Valid() const{
    return m_ending_employee_id_isValid;
}

OAIMoney OAICashDrawerShift::getExpectedCashMoney() const {
    return m_expected_cash_money;
}
void OAICashDrawerShift::setExpectedCashMoney(const OAIMoney &expected_cash_money) {
    m_expected_cash_money = expected_cash_money;
    m_expected_cash_money_isSet = true;
}

bool OAICashDrawerShift::is_expected_cash_money_Set() const{
    return m_expected_cash_money_isSet;
}

bool OAICashDrawerShift::is_expected_cash_money_Valid() const{
    return m_expected_cash_money_isValid;
}

QString OAICashDrawerShift::getId() const {
    return m_id;
}
void OAICashDrawerShift::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICashDrawerShift::is_id_Set() const{
    return m_id_isSet;
}

bool OAICashDrawerShift::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICashDrawerShift::getOpenedAt() const {
    return m_opened_at;
}
void OAICashDrawerShift::setOpenedAt(const QString &opened_at) {
    m_opened_at = opened_at;
    m_opened_at_isSet = true;
}

bool OAICashDrawerShift::is_opened_at_Set() const{
    return m_opened_at_isSet;
}

bool OAICashDrawerShift::is_opened_at_Valid() const{
    return m_opened_at_isValid;
}

OAIMoney OAICashDrawerShift::getOpenedCashMoney() const {
    return m_opened_cash_money;
}
void OAICashDrawerShift::setOpenedCashMoney(const OAIMoney &opened_cash_money) {
    m_opened_cash_money = opened_cash_money;
    m_opened_cash_money_isSet = true;
}

bool OAICashDrawerShift::is_opened_cash_money_Set() const{
    return m_opened_cash_money_isSet;
}

bool OAICashDrawerShift::is_opened_cash_money_Valid() const{
    return m_opened_cash_money_isValid;
}

QString OAICashDrawerShift::getOpeningEmployeeId() const {
    return m_opening_employee_id;
}
void OAICashDrawerShift::setOpeningEmployeeId(const QString &opening_employee_id) {
    m_opening_employee_id = opening_employee_id;
    m_opening_employee_id_isSet = true;
}

bool OAICashDrawerShift::is_opening_employee_id_Set() const{
    return m_opening_employee_id_isSet;
}

bool OAICashDrawerShift::is_opening_employee_id_Valid() const{
    return m_opening_employee_id_isValid;
}

QString OAICashDrawerShift::getState() const {
    return m_state;
}
void OAICashDrawerShift::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICashDrawerShift::is_state_Set() const{
    return m_state_isSet;
}

bool OAICashDrawerShift::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICashDrawerShift::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cash_paid_in_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_paid_out_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_payment_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_refunds_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_cash_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_closing_employee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ending_employee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_cash_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opened_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opened_cash_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_opening_employee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICashDrawerShift::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
