/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefund.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefund::OAIRefund(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefund::OAIRefund() {
    this->initializeModel();
}

OAIRefund::~OAIRefund() {}

void OAIRefund::initializeModel() {

    m_additional_recipients_isSet = false;
    m_additional_recipients_isValid = false;

    m_amount_money_isSet = false;
    m_amount_money_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_processing_fee_money_isSet = false;
    m_processing_fee_money_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tender_id_isSet = false;
    m_tender_id_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAIRefund::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefund::fromJsonObject(QJsonObject json) {

    m_additional_recipients_isValid = ::OpenAPI::fromJsonValue(m_additional_recipients, json[QString("additional_recipients")]);
    m_additional_recipients_isSet = !json[QString("additional_recipients")].isNull() && m_additional_recipients_isValid;

    m_amount_money_isValid = ::OpenAPI::fromJsonValue(m_amount_money, json[QString("amount_money")]);
    m_amount_money_isSet = !json[QString("amount_money")].isNull() && m_amount_money_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_processing_fee_money_isValid = ::OpenAPI::fromJsonValue(m_processing_fee_money, json[QString("processing_fee_money")]);
    m_processing_fee_money_isSet = !json[QString("processing_fee_money")].isNull() && m_processing_fee_money_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tender_id_isValid = ::OpenAPI::fromJsonValue(m_tender_id, json[QString("tender_id")]);
    m_tender_id_isSet = !json[QString("tender_id")].isNull() && m_tender_id_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;
}

QString OAIRefund::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefund::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_recipients.size() > 0) {
        obj.insert(QString("additional_recipients"), ::OpenAPI::toJsonValue(m_additional_recipients));
    }
    if (m_amount_money.isSet()) {
        obj.insert(QString("amount_money"), ::OpenAPI::toJsonValue(m_amount_money));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_processing_fee_money.isSet()) {
        obj.insert(QString("processing_fee_money"), ::OpenAPI::toJsonValue(m_processing_fee_money));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tender_id_isSet) {
        obj.insert(QString("tender_id"), ::OpenAPI::toJsonValue(m_tender_id));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

QList<OAIAdditionalRecipient> OAIRefund::getAdditionalRecipients() const {
    return m_additional_recipients;
}
void OAIRefund::setAdditionalRecipients(const QList<OAIAdditionalRecipient> &additional_recipients) {
    m_additional_recipients = additional_recipients;
    m_additional_recipients_isSet = true;
}

bool OAIRefund::is_additional_recipients_Set() const{
    return m_additional_recipients_isSet;
}

bool OAIRefund::is_additional_recipients_Valid() const{
    return m_additional_recipients_isValid;
}

OAIMoney OAIRefund::getAmountMoney() const {
    return m_amount_money;
}
void OAIRefund::setAmountMoney(const OAIMoney &amount_money) {
    m_amount_money = amount_money;
    m_amount_money_isSet = true;
}

bool OAIRefund::is_amount_money_Set() const{
    return m_amount_money_isSet;
}

bool OAIRefund::is_amount_money_Valid() const{
    return m_amount_money_isValid;
}

QString OAIRefund::getCreatedAt() const {
    return m_created_at;
}
void OAIRefund::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRefund::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRefund::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIRefund::getId() const {
    return m_id;
}
void OAIRefund::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRefund::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRefund::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRefund::getLocationId() const {
    return m_location_id;
}
void OAIRefund::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIRefund::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIRefund::is_location_id_Valid() const{
    return m_location_id_isValid;
}

OAIMoney OAIRefund::getProcessingFeeMoney() const {
    return m_processing_fee_money;
}
void OAIRefund::setProcessingFeeMoney(const OAIMoney &processing_fee_money) {
    m_processing_fee_money = processing_fee_money;
    m_processing_fee_money_isSet = true;
}

bool OAIRefund::is_processing_fee_money_Set() const{
    return m_processing_fee_money_isSet;
}

bool OAIRefund::is_processing_fee_money_Valid() const{
    return m_processing_fee_money_isValid;
}

QString OAIRefund::getReason() const {
    return m_reason;
}
void OAIRefund::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIRefund::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIRefund::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIRefund::getStatus() const {
    return m_status;
}
void OAIRefund::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRefund::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRefund::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRefund::getTenderId() const {
    return m_tender_id;
}
void OAIRefund::setTenderId(const QString &tender_id) {
    m_tender_id = tender_id;
    m_tender_id_isSet = true;
}

bool OAIRefund::is_tender_id_Set() const{
    return m_tender_id_isSet;
}

bool OAIRefund::is_tender_id_Valid() const{
    return m_tender_id_isValid;
}

QString OAIRefund::getTransactionId() const {
    return m_transaction_id;
}
void OAIRefund::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIRefund::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIRefund::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAIRefund::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_fee_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tender_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefund::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_money_isValid && m_id_isValid && m_location_id_isValid && m_reason_isValid && m_status_isValid && m_tender_id_isValid && m_transaction_id_isValid && true;
}

} // namespace OpenAPI
