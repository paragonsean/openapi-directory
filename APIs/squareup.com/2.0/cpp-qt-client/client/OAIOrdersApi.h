/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrdersApi_H
#define OAI_OAIOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchRetrieveOrdersRequest.h"
#include "OAIBatchRetrieveOrdersResponse.h"
#include "OAICalculateOrderRequest.h"
#include "OAICalculateOrderResponse.h"
#include "OAICreateOrderRequest.h"
#include "OAICreateOrderResponse.h"
#include "OAIPayOrderRequest.h"
#include "OAIPayOrderResponse.h"
#include "OAIRetrieveOrderResponse.h"
#include "OAISearchOrdersRequest.h"
#include "OAISearchOrdersResponse.h"
#include "OAIUpdateOrderRequest.h"
#include "OAIUpdateOrderResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrdersApi : public QObject {
    Q_OBJECT

public:
    OAIOrdersApi(const int timeOut = 0);
    ~OAIOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_batch_retrieve_orders_request OAIBatchRetrieveOrdersRequest [required]
    */
    virtual void batchRetrieveOrders(const OAIBatchRetrieveOrdersRequest &oai_batch_retrieve_orders_request);

    /**
    * @param[in]  oai_calculate_order_request OAICalculateOrderRequest [required]
    */
    virtual void calculateOrder(const OAICalculateOrderRequest &oai_calculate_order_request);

    /**
    * @param[in]  oai_create_order_request OAICreateOrderRequest [required]
    */
    virtual void createOrder(const OAICreateOrderRequest &oai_create_order_request);

    /**
    * @param[in]  order_id QString [required]
    * @param[in]  oai_pay_order_request OAIPayOrderRequest [required]
    */
    virtual void payOrder(const QString &order_id, const OAIPayOrderRequest &oai_pay_order_request);

    /**
    * @param[in]  oai_search_orders_request OAISearchOrdersRequest [required]
    */
    virtual void searchOrders(const OAISearchOrdersRequest &oai_search_orders_request);

    /**
    * @param[in]  order_id QString [required]
    */
    virtual void v2OrdersOrderIdGet(const QString &order_id);

    /**
    * @param[in]  order_id QString [required]
    * @param[in]  oai_update_order_request OAIUpdateOrderRequest [required]
    */
    virtual void v2OrdersOrderIdPut(const QString &order_id, const OAIUpdateOrderRequest &oai_update_order_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void batchRetrieveOrdersCallback(OAIHttpRequestWorker *worker);
    void calculateOrderCallback(OAIHttpRequestWorker *worker);
    void createOrderCallback(OAIHttpRequestWorker *worker);
    void payOrderCallback(OAIHttpRequestWorker *worker);
    void searchOrdersCallback(OAIHttpRequestWorker *worker);
    void v2OrdersOrderIdGetCallback(OAIHttpRequestWorker *worker);
    void v2OrdersOrderIdPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void batchRetrieveOrdersSignal(OAIBatchRetrieveOrdersResponse summary);
    void calculateOrderSignal(OAICalculateOrderResponse summary);
    void createOrderSignal(OAICreateOrderResponse summary);
    void payOrderSignal(OAIPayOrderResponse summary);
    void searchOrdersSignal(OAISearchOrdersResponse summary);
    void v2OrdersOrderIdGetSignal(OAIRetrieveOrderResponse summary);
    void v2OrdersOrderIdPutSignal(OAIUpdateOrderResponse summary);


    void batchRetrieveOrdersSignalFull(OAIHttpRequestWorker *worker, OAIBatchRetrieveOrdersResponse summary);
    void calculateOrderSignalFull(OAIHttpRequestWorker *worker, OAICalculateOrderResponse summary);
    void createOrderSignalFull(OAIHttpRequestWorker *worker, OAICreateOrderResponse summary);
    void payOrderSignalFull(OAIHttpRequestWorker *worker, OAIPayOrderResponse summary);
    void searchOrdersSignalFull(OAIHttpRequestWorker *worker, OAISearchOrdersResponse summary);
    void v2OrdersOrderIdGetSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveOrderResponse summary);
    void v2OrdersOrderIdPutSignalFull(OAIHttpRequestWorker *worker, OAIUpdateOrderResponse summary);

    Q_DECL_DEPRECATED_X("Use batchRetrieveOrdersSignalError() instead")
    void batchRetrieveOrdersSignalE(OAIBatchRetrieveOrdersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchRetrieveOrdersSignalError(OAIBatchRetrieveOrdersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calculateOrderSignalError() instead")
    void calculateOrderSignalE(OAICalculateOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calculateOrderSignalError(OAICalculateOrderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrderSignalError() instead")
    void createOrderSignalE(OAICreateOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrderSignalError(OAICreateOrderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use payOrderSignalError() instead")
    void payOrderSignalE(OAIPayOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void payOrderSignalError(OAIPayOrderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchOrdersSignalError() instead")
    void searchOrdersSignalE(OAISearchOrdersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchOrdersSignalError(OAISearchOrdersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2OrdersOrderIdGetSignalError() instead")
    void v2OrdersOrderIdGetSignalE(OAIRetrieveOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2OrdersOrderIdGetSignalError(OAIRetrieveOrderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2OrdersOrderIdPutSignalError() instead")
    void v2OrdersOrderIdPutSignalE(OAIUpdateOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2OrdersOrderIdPutSignalError(OAIUpdateOrderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use batchRetrieveOrdersSignalErrorFull() instead")
    void batchRetrieveOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchRetrieveOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calculateOrderSignalErrorFull() instead")
    void calculateOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calculateOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrderSignalErrorFull() instead")
    void createOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use payOrderSignalErrorFull() instead")
    void payOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void payOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchOrdersSignalErrorFull() instead")
    void searchOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2OrdersOrderIdGetSignalErrorFull() instead")
    void v2OrdersOrderIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2OrdersOrderIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2OrdersOrderIdPutSignalErrorFull() instead")
    void v2OrdersOrderIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2OrdersOrderIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
