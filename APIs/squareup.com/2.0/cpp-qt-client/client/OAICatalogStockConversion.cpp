/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogStockConversion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogStockConversion::OAICatalogStockConversion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogStockConversion::OAICatalogStockConversion() {
    this->initializeModel();
}

OAICatalogStockConversion::~OAICatalogStockConversion() {}

void OAICatalogStockConversion::initializeModel() {

    m_nonstockable_quantity_isSet = false;
    m_nonstockable_quantity_isValid = false;

    m_stockable_item_variation_id_isSet = false;
    m_stockable_item_variation_id_isValid = false;

    m_stockable_quantity_isSet = false;
    m_stockable_quantity_isValid = false;
}

void OAICatalogStockConversion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogStockConversion::fromJsonObject(QJsonObject json) {

    m_nonstockable_quantity_isValid = ::OpenAPI::fromJsonValue(m_nonstockable_quantity, json[QString("nonstockable_quantity")]);
    m_nonstockable_quantity_isSet = !json[QString("nonstockable_quantity")].isNull() && m_nonstockable_quantity_isValid;

    m_stockable_item_variation_id_isValid = ::OpenAPI::fromJsonValue(m_stockable_item_variation_id, json[QString("stockable_item_variation_id")]);
    m_stockable_item_variation_id_isSet = !json[QString("stockable_item_variation_id")].isNull() && m_stockable_item_variation_id_isValid;

    m_stockable_quantity_isValid = ::OpenAPI::fromJsonValue(m_stockable_quantity, json[QString("stockable_quantity")]);
    m_stockable_quantity_isSet = !json[QString("stockable_quantity")].isNull() && m_stockable_quantity_isValid;
}

QString OAICatalogStockConversion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogStockConversion::asJsonObject() const {
    QJsonObject obj;
    if (m_nonstockable_quantity_isSet) {
        obj.insert(QString("nonstockable_quantity"), ::OpenAPI::toJsonValue(m_nonstockable_quantity));
    }
    if (m_stockable_item_variation_id_isSet) {
        obj.insert(QString("stockable_item_variation_id"), ::OpenAPI::toJsonValue(m_stockable_item_variation_id));
    }
    if (m_stockable_quantity_isSet) {
        obj.insert(QString("stockable_quantity"), ::OpenAPI::toJsonValue(m_stockable_quantity));
    }
    return obj;
}

QString OAICatalogStockConversion::getNonstockableQuantity() const {
    return m_nonstockable_quantity;
}
void OAICatalogStockConversion::setNonstockableQuantity(const QString &nonstockable_quantity) {
    m_nonstockable_quantity = nonstockable_quantity;
    m_nonstockable_quantity_isSet = true;
}

bool OAICatalogStockConversion::is_nonstockable_quantity_Set() const{
    return m_nonstockable_quantity_isSet;
}

bool OAICatalogStockConversion::is_nonstockable_quantity_Valid() const{
    return m_nonstockable_quantity_isValid;
}

QString OAICatalogStockConversion::getStockableItemVariationId() const {
    return m_stockable_item_variation_id;
}
void OAICatalogStockConversion::setStockableItemVariationId(const QString &stockable_item_variation_id) {
    m_stockable_item_variation_id = stockable_item_variation_id;
    m_stockable_item_variation_id_isSet = true;
}

bool OAICatalogStockConversion::is_stockable_item_variation_id_Set() const{
    return m_stockable_item_variation_id_isSet;
}

bool OAICatalogStockConversion::is_stockable_item_variation_id_Valid() const{
    return m_stockable_item_variation_id_isValid;
}

QString OAICatalogStockConversion::getStockableQuantity() const {
    return m_stockable_quantity;
}
void OAICatalogStockConversion::setStockableQuantity(const QString &stockable_quantity) {
    m_stockable_quantity = stockable_quantity;
    m_stockable_quantity_isSet = true;
}

bool OAICatalogStockConversion::is_stockable_quantity_Set() const{
    return m_stockable_quantity_isSet;
}

bool OAICatalogStockConversion::is_stockable_quantity_Valid() const{
    return m_stockable_quantity_isValid;
}

bool OAICatalogStockConversion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_nonstockable_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stockable_item_variation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stockable_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogStockConversion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_nonstockable_quantity_isValid && m_stockable_item_variation_id_isValid && m_stockable_quantity_isValid && true;
}

} // namespace OpenAPI
