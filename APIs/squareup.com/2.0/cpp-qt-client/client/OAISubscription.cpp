/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_canceled_date_isSet = false;
    m_canceled_date_isValid = false;

    m_card_id_isSet = false;
    m_card_id_isValid = false;

    m_charged_through_date_isSet = false;
    m_charged_through_date_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invoice_ids_isSet = false;
    m_invoice_ids_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_price_override_money_isSet = false;
    m_price_override_money_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tax_percentage_isSet = false;
    m_tax_percentage_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_canceled_date_isValid = ::OpenAPI::fromJsonValue(m_canceled_date, json[QString("canceled_date")]);
    m_canceled_date_isSet = !json[QString("canceled_date")].isNull() && m_canceled_date_isValid;

    m_card_id_isValid = ::OpenAPI::fromJsonValue(m_card_id, json[QString("card_id")]);
    m_card_id_isSet = !json[QString("card_id")].isNull() && m_card_id_isValid;

    m_charged_through_date_isValid = ::OpenAPI::fromJsonValue(m_charged_through_date, json[QString("charged_through_date")]);
    m_charged_through_date_isSet = !json[QString("charged_through_date")].isNull() && m_charged_through_date_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invoice_ids_isValid = ::OpenAPI::fromJsonValue(m_invoice_ids, json[QString("invoice_ids")]);
    m_invoice_ids_isSet = !json[QString("invoice_ids")].isNull() && m_invoice_ids_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("plan_id")]);
    m_plan_id_isSet = !json[QString("plan_id")].isNull() && m_plan_id_isValid;

    m_price_override_money_isValid = ::OpenAPI::fromJsonValue(m_price_override_money, json[QString("price_override_money")]);
    m_price_override_money_isSet = !json[QString("price_override_money")].isNull() && m_price_override_money_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tax_percentage_isValid = ::OpenAPI::fromJsonValue(m_tax_percentage, json[QString("tax_percentage")]);
    m_tax_percentage_isSet = !json[QString("tax_percentage")].isNull() && m_tax_percentage_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_canceled_date_isSet) {
        obj.insert(QString("canceled_date"), ::OpenAPI::toJsonValue(m_canceled_date));
    }
    if (m_card_id_isSet) {
        obj.insert(QString("card_id"), ::OpenAPI::toJsonValue(m_card_id));
    }
    if (m_charged_through_date_isSet) {
        obj.insert(QString("charged_through_date"), ::OpenAPI::toJsonValue(m_charged_through_date));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invoice_ids.size() > 0) {
        obj.insert(QString("invoice_ids"), ::OpenAPI::toJsonValue(m_invoice_ids));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("plan_id"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_price_override_money.isSet()) {
        obj.insert(QString("price_override_money"), ::OpenAPI::toJsonValue(m_price_override_money));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tax_percentage_isSet) {
        obj.insert(QString("tax_percentage"), ::OpenAPI::toJsonValue(m_tax_percentage));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAISubscription::getCanceledDate() const {
    return m_canceled_date;
}
void OAISubscription::setCanceledDate(const QString &canceled_date) {
    m_canceled_date = canceled_date;
    m_canceled_date_isSet = true;
}

bool OAISubscription::is_canceled_date_Set() const{
    return m_canceled_date_isSet;
}

bool OAISubscription::is_canceled_date_Valid() const{
    return m_canceled_date_isValid;
}

QString OAISubscription::getCardId() const {
    return m_card_id;
}
void OAISubscription::setCardId(const QString &card_id) {
    m_card_id = card_id;
    m_card_id_isSet = true;
}

bool OAISubscription::is_card_id_Set() const{
    return m_card_id_isSet;
}

bool OAISubscription::is_card_id_Valid() const{
    return m_card_id_isValid;
}

QString OAISubscription::getChargedThroughDate() const {
    return m_charged_through_date;
}
void OAISubscription::setChargedThroughDate(const QString &charged_through_date) {
    m_charged_through_date = charged_through_date;
    m_charged_through_date_isSet = true;
}

bool OAISubscription::is_charged_through_date_Set() const{
    return m_charged_through_date_isSet;
}

bool OAISubscription::is_charged_through_date_Valid() const{
    return m_charged_through_date_isValid;
}

QString OAISubscription::getCreatedAt() const {
    return m_created_at;
}
void OAISubscription::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISubscription::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISubscription::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISubscription::getCustomerId() const {
    return m_customer_id;
}
void OAISubscription::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAISubscription::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAISubscription::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAISubscription::getId() const {
    return m_id;
}
void OAISubscription::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscription::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscription::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAISubscription::getInvoiceIds() const {
    return m_invoice_ids;
}
void OAISubscription::setInvoiceIds(const QList<QString> &invoice_ids) {
    m_invoice_ids = invoice_ids;
    m_invoice_ids_isSet = true;
}

bool OAISubscription::is_invoice_ids_Set() const{
    return m_invoice_ids_isSet;
}

bool OAISubscription::is_invoice_ids_Valid() const{
    return m_invoice_ids_isValid;
}

QString OAISubscription::getLocationId() const {
    return m_location_id;
}
void OAISubscription::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAISubscription::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAISubscription::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAISubscription::getPlanId() const {
    return m_plan_id;
}
void OAISubscription::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAISubscription::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAISubscription::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

OAIMoney OAISubscription::getPriceOverrideMoney() const {
    return m_price_override_money;
}
void OAISubscription::setPriceOverrideMoney(const OAIMoney &price_override_money) {
    m_price_override_money = price_override_money;
    m_price_override_money_isSet = true;
}

bool OAISubscription::is_price_override_money_Set() const{
    return m_price_override_money_isSet;
}

bool OAISubscription::is_price_override_money_Valid() const{
    return m_price_override_money_isValid;
}

QString OAISubscription::getStartDate() const {
    return m_start_date;
}
void OAISubscription::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAISubscription::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAISubscription::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAISubscription::getStatus() const {
    return m_status;
}
void OAISubscription::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubscription::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubscription::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISubscription::getTaxPercentage() const {
    return m_tax_percentage;
}
void OAISubscription::setTaxPercentage(const QString &tax_percentage) {
    m_tax_percentage = tax_percentage;
    m_tax_percentage_isSet = true;
}

bool OAISubscription::is_tax_percentage_Set() const{
    return m_tax_percentage_isSet;
}

bool OAISubscription::is_tax_percentage_Valid() const{
    return m_tax_percentage_isValid;
}

QString OAISubscription::getTimezone() const {
    return m_timezone;
}
void OAISubscription::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAISubscription::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAISubscription::is_timezone_Valid() const{
    return m_timezone_isValid;
}

qint64 OAISubscription::getVersion() const {
    return m_version;
}
void OAISubscription::setVersion(const qint64 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISubscription::is_version_Set() const{
    return m_version_isSet;
}

bool OAISubscription::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canceled_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charged_through_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_override_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
