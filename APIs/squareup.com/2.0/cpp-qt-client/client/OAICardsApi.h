/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICardsApi_H
#define OAI_OAICardsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateCardRequest.h"
#include "OAICreateCardResponse.h"
#include "OAIDisableCardResponse.h"
#include "OAIListCardsResponse.h"
#include "OAIRetrieveCardResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICardsApi : public QObject {
    Q_OBJECT

public:
    OAICardsApi(const int timeOut = 0);
    ~OAICardsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_card_request OAICreateCardRequest [required]
    */
    virtual void createCard(const OAICreateCardRequest &oai_create_card_request);

    /**
    * @param[in]  card_id QString [required]
    */
    virtual void disableCard(const QString &card_id);

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  customer_id QString [optional]
    * @param[in]  include_disabled bool [optional]
    * @param[in]  reference_id QString [optional]
    * @param[in]  sort_order QString [optional]
    */
    virtual void listCards(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_disabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &reference_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  card_id QString [required]
    */
    virtual void retrieveCard(const QString &card_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCardCallback(OAIHttpRequestWorker *worker);
    void disableCardCallback(OAIHttpRequestWorker *worker);
    void listCardsCallback(OAIHttpRequestWorker *worker);
    void retrieveCardCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCardSignal(OAICreateCardResponse summary);
    void disableCardSignal(OAIDisableCardResponse summary);
    void listCardsSignal(OAIListCardsResponse summary);
    void retrieveCardSignal(OAIRetrieveCardResponse summary);


    void createCardSignalFull(OAIHttpRequestWorker *worker, OAICreateCardResponse summary);
    void disableCardSignalFull(OAIHttpRequestWorker *worker, OAIDisableCardResponse summary);
    void listCardsSignalFull(OAIHttpRequestWorker *worker, OAIListCardsResponse summary);
    void retrieveCardSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveCardResponse summary);

    Q_DECL_DEPRECATED_X("Use createCardSignalError() instead")
    void createCardSignalE(OAICreateCardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCardSignalError(OAICreateCardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableCardSignalError() instead")
    void disableCardSignalE(OAIDisableCardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disableCardSignalError(OAIDisableCardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCardsSignalError() instead")
    void listCardsSignalE(OAIListCardsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCardsSignalError(OAIListCardsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveCardSignalError() instead")
    void retrieveCardSignalE(OAIRetrieveCardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveCardSignalError(OAIRetrieveCardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCardSignalErrorFull() instead")
    void createCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableCardSignalErrorFull() instead")
    void disableCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCardsSignalErrorFull() instead")
    void listCardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveCardSignalErrorFull() instead")
    void retrieveCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
