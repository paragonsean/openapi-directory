/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1SettlementEntryType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV1SettlementEntryType::OAIV1SettlementEntryType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV1SettlementEntryType::OAIV1SettlementEntryType() {
    this->initializeModel();
}

OAIV1SettlementEntryType::~OAIV1SettlementEntryType() {}

void OAIV1SettlementEntryType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIV1SettlementEntryType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIV1SettlementEntryType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ADJUSTMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::ADJUSTMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BALANCE_CHARGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::BALANCE_CHARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHARGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::CHARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FREE_PROCESSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::FREE_PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HOLD_ADJUSTMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::HOLD_ADJUSTMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAID_SERVICE_FEE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::PAID_SERVICE_FEE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAID_SERVICE_FEE_REFUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::PAID_SERVICE_FEE_REFUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REDEMPTION_CODE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::REDEMPTION_CODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REFUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::REFUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RETURNED_PAYOUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::RETURNED_PAYOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SQUARE_CAPITAL_ADVANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::SQUARE_CAPITAL_ADVANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SQUARE_CAPITAL_PAYMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::SQUARE_CAPITAL_PAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SQUARE_CAPITAL_REVERSED_PAYMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::SQUARE_CAPITAL_REVERSED_PAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBSCRIPTION_FEE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::SUBSCRIPTION_FEE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBSCRIPTION_FEE_REFUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::SUBSCRIPTION_FEE_REFUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INCENTED_PAYMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::INCENTED_PAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RETURNED_ACH_ENTRY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::RETURNED_ACH_ENTRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RETURNED_SQUARE_275", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::RETURNED_SQUARE_275;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SQUARE_275", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::SQUARE_275;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SQUARE_CARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1SettlementEntryType::SQUARE_CARD;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIV1SettlementEntryType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIV1SettlementEntryType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIV1SettlementEntryType::ADJUSTMENT:
            val = "ADJUSTMENT";
            break;
        case eOAIV1SettlementEntryType::BALANCE_CHARGE:
            val = "BALANCE_CHARGE";
            break;
        case eOAIV1SettlementEntryType::CHARGE:
            val = "CHARGE";
            break;
        case eOAIV1SettlementEntryType::FREE_PROCESSING:
            val = "FREE_PROCESSING";
            break;
        case eOAIV1SettlementEntryType::HOLD_ADJUSTMENT:
            val = "HOLD_ADJUSTMENT";
            break;
        case eOAIV1SettlementEntryType::PAID_SERVICE_FEE:
            val = "PAID_SERVICE_FEE";
            break;
        case eOAIV1SettlementEntryType::PAID_SERVICE_FEE_REFUND:
            val = "PAID_SERVICE_FEE_REFUND";
            break;
        case eOAIV1SettlementEntryType::REDEMPTION_CODE:
            val = "REDEMPTION_CODE";
            break;
        case eOAIV1SettlementEntryType::REFUND:
            val = "REFUND";
            break;
        case eOAIV1SettlementEntryType::RETURNED_PAYOUT:
            val = "RETURNED_PAYOUT";
            break;
        case eOAIV1SettlementEntryType::SQUARE_CAPITAL_ADVANCE:
            val = "SQUARE_CAPITAL_ADVANCE";
            break;
        case eOAIV1SettlementEntryType::SQUARE_CAPITAL_PAYMENT:
            val = "SQUARE_CAPITAL_PAYMENT";
            break;
        case eOAIV1SettlementEntryType::SQUARE_CAPITAL_REVERSED_PAYMENT:
            val = "SQUARE_CAPITAL_REVERSED_PAYMENT";
            break;
        case eOAIV1SettlementEntryType::SUBSCRIPTION_FEE:
            val = "SUBSCRIPTION_FEE";
            break;
        case eOAIV1SettlementEntryType::SUBSCRIPTION_FEE_REFUND:
            val = "SUBSCRIPTION_FEE_REFUND";
            break;
        case eOAIV1SettlementEntryType::OTHER:
            val = "OTHER";
            break;
        case eOAIV1SettlementEntryType::INCENTED_PAYMENT:
            val = "INCENTED_PAYMENT";
            break;
        case eOAIV1SettlementEntryType::RETURNED_ACH_ENTRY:
            val = "RETURNED_ACH_ENTRY";
            break;
        case eOAIV1SettlementEntryType::RETURNED_SQUARE_275:
            val = "RETURNED_SQUARE_275";
            break;
        case eOAIV1SettlementEntryType::SQUARE_275:
            val = "SQUARE_275";
            break;
        case eOAIV1SettlementEntryType::SQUARE_CARD:
            val = "SQUARE_CARD";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIV1SettlementEntryType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIV1SettlementEntryType::eOAIV1SettlementEntryType OAIV1SettlementEntryType::getValue() const {
    return m_value;
}

void OAIV1SettlementEntryType::setValue(const OAIV1SettlementEntryType::eOAIV1SettlementEntryType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIV1SettlementEntryType::isSet() const {
    
    return m_value_isSet;
}

bool OAIV1SettlementEntryType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
