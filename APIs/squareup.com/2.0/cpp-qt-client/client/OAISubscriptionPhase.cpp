/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionPhase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionPhase::OAISubscriptionPhase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionPhase::OAISubscriptionPhase() {
    this->initializeModel();
}

OAISubscriptionPhase::~OAISubscriptionPhase() {}

void OAISubscriptionPhase::initializeModel() {

    m_cadence_isSet = false;
    m_cadence_isValid = false;

    m_ordinal_isSet = false;
    m_ordinal_isValid = false;

    m_periods_isSet = false;
    m_periods_isValid = false;

    m_recurring_price_money_isSet = false;
    m_recurring_price_money_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAISubscriptionPhase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionPhase::fromJsonObject(QJsonObject json) {

    m_cadence_isValid = ::OpenAPI::fromJsonValue(m_cadence, json[QString("cadence")]);
    m_cadence_isSet = !json[QString("cadence")].isNull() && m_cadence_isValid;

    m_ordinal_isValid = ::OpenAPI::fromJsonValue(m_ordinal, json[QString("ordinal")]);
    m_ordinal_isSet = !json[QString("ordinal")].isNull() && m_ordinal_isValid;

    m_periods_isValid = ::OpenAPI::fromJsonValue(m_periods, json[QString("periods")]);
    m_periods_isSet = !json[QString("periods")].isNull() && m_periods_isValid;

    m_recurring_price_money_isValid = ::OpenAPI::fromJsonValue(m_recurring_price_money, json[QString("recurring_price_money")]);
    m_recurring_price_money_isSet = !json[QString("recurring_price_money")].isNull() && m_recurring_price_money_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAISubscriptionPhase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionPhase::asJsonObject() const {
    QJsonObject obj;
    if (m_cadence_isSet) {
        obj.insert(QString("cadence"), ::OpenAPI::toJsonValue(m_cadence));
    }
    if (m_ordinal_isSet) {
        obj.insert(QString("ordinal"), ::OpenAPI::toJsonValue(m_ordinal));
    }
    if (m_periods_isSet) {
        obj.insert(QString("periods"), ::OpenAPI::toJsonValue(m_periods));
    }
    if (m_recurring_price_money.isSet()) {
        obj.insert(QString("recurring_price_money"), ::OpenAPI::toJsonValue(m_recurring_price_money));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QString OAISubscriptionPhase::getCadence() const {
    return m_cadence;
}
void OAISubscriptionPhase::setCadence(const QString &cadence) {
    m_cadence = cadence;
    m_cadence_isSet = true;
}

bool OAISubscriptionPhase::is_cadence_Set() const{
    return m_cadence_isSet;
}

bool OAISubscriptionPhase::is_cadence_Valid() const{
    return m_cadence_isValid;
}

qint64 OAISubscriptionPhase::getOrdinal() const {
    return m_ordinal;
}
void OAISubscriptionPhase::setOrdinal(const qint64 &ordinal) {
    m_ordinal = ordinal;
    m_ordinal_isSet = true;
}

bool OAISubscriptionPhase::is_ordinal_Set() const{
    return m_ordinal_isSet;
}

bool OAISubscriptionPhase::is_ordinal_Valid() const{
    return m_ordinal_isValid;
}

qint32 OAISubscriptionPhase::getPeriods() const {
    return m_periods;
}
void OAISubscriptionPhase::setPeriods(const qint32 &periods) {
    m_periods = periods;
    m_periods_isSet = true;
}

bool OAISubscriptionPhase::is_periods_Set() const{
    return m_periods_isSet;
}

bool OAISubscriptionPhase::is_periods_Valid() const{
    return m_periods_isValid;
}

OAIMoney OAISubscriptionPhase::getRecurringPriceMoney() const {
    return m_recurring_price_money;
}
void OAISubscriptionPhase::setRecurringPriceMoney(const OAIMoney &recurring_price_money) {
    m_recurring_price_money = recurring_price_money;
    m_recurring_price_money_isSet = true;
}

bool OAISubscriptionPhase::is_recurring_price_money_Set() const{
    return m_recurring_price_money_isSet;
}

bool OAISubscriptionPhase::is_recurring_price_money_Valid() const{
    return m_recurring_price_money_isValid;
}

QString OAISubscriptionPhase::getUid() const {
    return m_uid;
}
void OAISubscriptionPhase::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAISubscriptionPhase::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAISubscriptionPhase::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAISubscriptionPhase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cadence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordinal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_periods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_price_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionPhase::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cadence_isValid && m_recurring_price_money_isValid && true;
}

} // namespace OpenAPI
