/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchUpsertCatalogObjectsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchUpsertCatalogObjectsResponse::OAIBatchUpsertCatalogObjectsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchUpsertCatalogObjectsResponse::OAIBatchUpsertCatalogObjectsResponse() {
    this->initializeModel();
}

OAIBatchUpsertCatalogObjectsResponse::~OAIBatchUpsertCatalogObjectsResponse() {}

void OAIBatchUpsertCatalogObjectsResponse::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_id_mappings_isSet = false;
    m_id_mappings_isValid = false;

    m_objects_isSet = false;
    m_objects_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIBatchUpsertCatalogObjectsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchUpsertCatalogObjectsResponse::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_id_mappings_isValid = ::OpenAPI::fromJsonValue(m_id_mappings, json[QString("id_mappings")]);
    m_id_mappings_isSet = !json[QString("id_mappings")].isNull() && m_id_mappings_isValid;

    m_objects_isValid = ::OpenAPI::fromJsonValue(m_objects, json[QString("objects")]);
    m_objects_isSet = !json[QString("objects")].isNull() && m_objects_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIBatchUpsertCatalogObjectsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchUpsertCatalogObjectsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_id_mappings.size() > 0) {
        obj.insert(QString("id_mappings"), ::OpenAPI::toJsonValue(m_id_mappings));
    }
    if (m_objects.size() > 0) {
        obj.insert(QString("objects"), ::OpenAPI::toJsonValue(m_objects));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QList<OAIError> OAIBatchUpsertCatalogObjectsResponse::getErrors() const {
    return m_errors;
}
void OAIBatchUpsertCatalogObjectsResponse::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIBatchUpsertCatalogObjectsResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIBatchUpsertCatalogObjectsResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<OAICatalogIdMapping> OAIBatchUpsertCatalogObjectsResponse::getIdMappings() const {
    return m_id_mappings;
}
void OAIBatchUpsertCatalogObjectsResponse::setIdMappings(const QList<OAICatalogIdMapping> &id_mappings) {
    m_id_mappings = id_mappings;
    m_id_mappings_isSet = true;
}

bool OAIBatchUpsertCatalogObjectsResponse::is_id_mappings_Set() const{
    return m_id_mappings_isSet;
}

bool OAIBatchUpsertCatalogObjectsResponse::is_id_mappings_Valid() const{
    return m_id_mappings_isValid;
}

QList<OAICatalogObject> OAIBatchUpsertCatalogObjectsResponse::getObjects() const {
    return m_objects;
}
void OAIBatchUpsertCatalogObjectsResponse::setObjects(const QList<OAICatalogObject> &objects) {
    m_objects = objects;
    m_objects_isSet = true;
}

bool OAIBatchUpsertCatalogObjectsResponse::is_objects_Set() const{
    return m_objects_isSet;
}

bool OAIBatchUpsertCatalogObjectsResponse::is_objects_Valid() const{
    return m_objects_isValid;
}

QString OAIBatchUpsertCatalogObjectsResponse::getUpdatedAt() const {
    return m_updated_at;
}
void OAIBatchUpsertCatalogObjectsResponse::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIBatchUpsertCatalogObjectsResponse::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIBatchUpsertCatalogObjectsResponse::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIBatchUpsertCatalogObjectsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchUpsertCatalogObjectsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
