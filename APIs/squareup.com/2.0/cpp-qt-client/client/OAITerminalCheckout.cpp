/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITerminalCheckout.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITerminalCheckout::OAITerminalCheckout(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITerminalCheckout::OAITerminalCheckout() {
    this->initializeModel();
}

OAITerminalCheckout::~OAITerminalCheckout() {}

void OAITerminalCheckout::initializeModel() {

    m_amount_money_isSet = false;
    m_amount_money_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_cancel_reason_isSet = false;
    m_cancel_reason_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deadline_duration_isSet = false;
    m_deadline_duration_isValid = false;

    m_device_options_isSet = false;
    m_device_options_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_payment_ids_isSet = false;
    m_payment_ids_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAITerminalCheckout::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITerminalCheckout::fromJsonObject(QJsonObject json) {

    m_amount_money_isValid = ::OpenAPI::fromJsonValue(m_amount_money, json[QString("amount_money")]);
    m_amount_money_isSet = !json[QString("amount_money")].isNull() && m_amount_money_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("app_id")]);
    m_app_id_isSet = !json[QString("app_id")].isNull() && m_app_id_isValid;

    m_cancel_reason_isValid = ::OpenAPI::fromJsonValue(m_cancel_reason, json[QString("cancel_reason")]);
    m_cancel_reason_isSet = !json[QString("cancel_reason")].isNull() && m_cancel_reason_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_deadline_duration_isValid = ::OpenAPI::fromJsonValue(m_deadline_duration, json[QString("deadline_duration")]);
    m_deadline_duration_isSet = !json[QString("deadline_duration")].isNull() && m_deadline_duration_isValid;

    m_device_options_isValid = ::OpenAPI::fromJsonValue(m_device_options, json[QString("device_options")]);
    m_device_options_isSet = !json[QString("device_options")].isNull() && m_device_options_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_payment_ids_isValid = ::OpenAPI::fromJsonValue(m_payment_ids, json[QString("payment_ids")]);
    m_payment_ids_isSet = !json[QString("payment_ids")].isNull() && m_payment_ids_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("payment_type")]);
    m_payment_type_isSet = !json[QString("payment_type")].isNull() && m_payment_type_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("reference_id")]);
    m_reference_id_isSet = !json[QString("reference_id")].isNull() && m_reference_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAITerminalCheckout::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITerminalCheckout::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_money.isSet()) {
        obj.insert(QString("amount_money"), ::OpenAPI::toJsonValue(m_amount_money));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("app_id"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_cancel_reason_isSet) {
        obj.insert(QString("cancel_reason"), ::OpenAPI::toJsonValue(m_cancel_reason));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deadline_duration_isSet) {
        obj.insert(QString("deadline_duration"), ::OpenAPI::toJsonValue(m_deadline_duration));
    }
    if (m_device_options.isSet()) {
        obj.insert(QString("device_options"), ::OpenAPI::toJsonValue(m_device_options));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_payment_ids.size() > 0) {
        obj.insert(QString("payment_ids"), ::OpenAPI::toJsonValue(m_payment_ids));
    }
    if (m_payment_type_isSet) {
        obj.insert(QString("payment_type"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("reference_id"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAIMoney OAITerminalCheckout::getAmountMoney() const {
    return m_amount_money;
}
void OAITerminalCheckout::setAmountMoney(const OAIMoney &amount_money) {
    m_amount_money = amount_money;
    m_amount_money_isSet = true;
}

bool OAITerminalCheckout::is_amount_money_Set() const{
    return m_amount_money_isSet;
}

bool OAITerminalCheckout::is_amount_money_Valid() const{
    return m_amount_money_isValid;
}

QString OAITerminalCheckout::getAppId() const {
    return m_app_id;
}
void OAITerminalCheckout::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAITerminalCheckout::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAITerminalCheckout::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAITerminalCheckout::getCancelReason() const {
    return m_cancel_reason;
}
void OAITerminalCheckout::setCancelReason(const QString &cancel_reason) {
    m_cancel_reason = cancel_reason;
    m_cancel_reason_isSet = true;
}

bool OAITerminalCheckout::is_cancel_reason_Set() const{
    return m_cancel_reason_isSet;
}

bool OAITerminalCheckout::is_cancel_reason_Valid() const{
    return m_cancel_reason_isValid;
}

QString OAITerminalCheckout::getCreatedAt() const {
    return m_created_at;
}
void OAITerminalCheckout::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITerminalCheckout::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITerminalCheckout::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITerminalCheckout::getDeadlineDuration() const {
    return m_deadline_duration;
}
void OAITerminalCheckout::setDeadlineDuration(const QString &deadline_duration) {
    m_deadline_duration = deadline_duration;
    m_deadline_duration_isSet = true;
}

bool OAITerminalCheckout::is_deadline_duration_Set() const{
    return m_deadline_duration_isSet;
}

bool OAITerminalCheckout::is_deadline_duration_Valid() const{
    return m_deadline_duration_isValid;
}

OAIDeviceCheckoutOptions OAITerminalCheckout::getDeviceOptions() const {
    return m_device_options;
}
void OAITerminalCheckout::setDeviceOptions(const OAIDeviceCheckoutOptions &device_options) {
    m_device_options = device_options;
    m_device_options_isSet = true;
}

bool OAITerminalCheckout::is_device_options_Set() const{
    return m_device_options_isSet;
}

bool OAITerminalCheckout::is_device_options_Valid() const{
    return m_device_options_isValid;
}

QString OAITerminalCheckout::getId() const {
    return m_id;
}
void OAITerminalCheckout::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITerminalCheckout::is_id_Set() const{
    return m_id_isSet;
}

bool OAITerminalCheckout::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITerminalCheckout::getLocationId() const {
    return m_location_id;
}
void OAITerminalCheckout::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAITerminalCheckout::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAITerminalCheckout::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAITerminalCheckout::getNote() const {
    return m_note;
}
void OAITerminalCheckout::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAITerminalCheckout::is_note_Set() const{
    return m_note_isSet;
}

bool OAITerminalCheckout::is_note_Valid() const{
    return m_note_isValid;
}

QList<QString> OAITerminalCheckout::getPaymentIds() const {
    return m_payment_ids;
}
void OAITerminalCheckout::setPaymentIds(const QList<QString> &payment_ids) {
    m_payment_ids = payment_ids;
    m_payment_ids_isSet = true;
}

bool OAITerminalCheckout::is_payment_ids_Set() const{
    return m_payment_ids_isSet;
}

bool OAITerminalCheckout::is_payment_ids_Valid() const{
    return m_payment_ids_isValid;
}

QString OAITerminalCheckout::getPaymentType() const {
    return m_payment_type;
}
void OAITerminalCheckout::setPaymentType(const QString &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAITerminalCheckout::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAITerminalCheckout::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

QString OAITerminalCheckout::getReferenceId() const {
    return m_reference_id;
}
void OAITerminalCheckout::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAITerminalCheckout::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAITerminalCheckout::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QString OAITerminalCheckout::getStatus() const {
    return m_status;
}
void OAITerminalCheckout::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITerminalCheckout::is_status_Set() const{
    return m_status_isSet;
}

bool OAITerminalCheckout::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITerminalCheckout::getUpdatedAt() const {
    return m_updated_at;
}
void OAITerminalCheckout::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITerminalCheckout::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITerminalCheckout::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAITerminalCheckout::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deadline_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITerminalCheckout::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_money_isValid && m_device_options_isValid && true;
}

} // namespace OpenAPI
