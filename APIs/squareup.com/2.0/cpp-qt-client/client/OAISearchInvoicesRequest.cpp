/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchInvoicesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchInvoicesRequest::OAISearchInvoicesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchInvoicesRequest::OAISearchInvoicesRequest() {
    this->initializeModel();
}

OAISearchInvoicesRequest::~OAISearchInvoicesRequest() {}

void OAISearchInvoicesRequest::initializeModel() {

    m_cursor_isSet = false;
    m_cursor_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAISearchInvoicesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchInvoicesRequest::fromJsonObject(QJsonObject json) {

    m_cursor_isValid = ::OpenAPI::fromJsonValue(m_cursor, json[QString("cursor")]);
    m_cursor_isSet = !json[QString("cursor")].isNull() && m_cursor_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAISearchInvoicesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchInvoicesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cursor_isSet) {
        obj.insert(QString("cursor"), ::OpenAPI::toJsonValue(m_cursor));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

QString OAISearchInvoicesRequest::getCursor() const {
    return m_cursor;
}
void OAISearchInvoicesRequest::setCursor(const QString &cursor) {
    m_cursor = cursor;
    m_cursor_isSet = true;
}

bool OAISearchInvoicesRequest::is_cursor_Set() const{
    return m_cursor_isSet;
}

bool OAISearchInvoicesRequest::is_cursor_Valid() const{
    return m_cursor_isValid;
}

qint32 OAISearchInvoicesRequest::getLimit() const {
    return m_limit;
}
void OAISearchInvoicesRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAISearchInvoicesRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAISearchInvoicesRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

OAIInvoiceQuery OAISearchInvoicesRequest::getQuery() const {
    return m_query;
}
void OAISearchInvoicesRequest::setQuery(const OAIInvoiceQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISearchInvoicesRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAISearchInvoicesRequest::is_query_Valid() const{
    return m_query_isValid;
}

bool OAISearchInvoicesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchInvoicesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_query_isValid && true;
}

} // namespace OpenAPI
