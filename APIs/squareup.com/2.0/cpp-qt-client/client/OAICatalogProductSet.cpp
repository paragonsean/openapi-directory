/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogProductSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogProductSet::OAICatalogProductSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogProductSet::OAICatalogProductSet() {
    this->initializeModel();
}

OAICatalogProductSet::~OAICatalogProductSet() {}

void OAICatalogProductSet::initializeModel() {

    m_all_products_isSet = false;
    m_all_products_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_product_ids_all_isSet = false;
    m_product_ids_all_isValid = false;

    m_product_ids_any_isSet = false;
    m_product_ids_any_isValid = false;

    m_quantity_exact_isSet = false;
    m_quantity_exact_isValid = false;

    m_quantity_max_isSet = false;
    m_quantity_max_isValid = false;

    m_quantity_min_isSet = false;
    m_quantity_min_isValid = false;
}

void OAICatalogProductSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogProductSet::fromJsonObject(QJsonObject json) {

    m_all_products_isValid = ::OpenAPI::fromJsonValue(m_all_products, json[QString("all_products")]);
    m_all_products_isSet = !json[QString("all_products")].isNull() && m_all_products_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_product_ids_all_isValid = ::OpenAPI::fromJsonValue(m_product_ids_all, json[QString("product_ids_all")]);
    m_product_ids_all_isSet = !json[QString("product_ids_all")].isNull() && m_product_ids_all_isValid;

    m_product_ids_any_isValid = ::OpenAPI::fromJsonValue(m_product_ids_any, json[QString("product_ids_any")]);
    m_product_ids_any_isSet = !json[QString("product_ids_any")].isNull() && m_product_ids_any_isValid;

    m_quantity_exact_isValid = ::OpenAPI::fromJsonValue(m_quantity_exact, json[QString("quantity_exact")]);
    m_quantity_exact_isSet = !json[QString("quantity_exact")].isNull() && m_quantity_exact_isValid;

    m_quantity_max_isValid = ::OpenAPI::fromJsonValue(m_quantity_max, json[QString("quantity_max")]);
    m_quantity_max_isSet = !json[QString("quantity_max")].isNull() && m_quantity_max_isValid;

    m_quantity_min_isValid = ::OpenAPI::fromJsonValue(m_quantity_min, json[QString("quantity_min")]);
    m_quantity_min_isSet = !json[QString("quantity_min")].isNull() && m_quantity_min_isValid;
}

QString OAICatalogProductSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogProductSet::asJsonObject() const {
    QJsonObject obj;
    if (m_all_products_isSet) {
        obj.insert(QString("all_products"), ::OpenAPI::toJsonValue(m_all_products));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_product_ids_all.size() > 0) {
        obj.insert(QString("product_ids_all"), ::OpenAPI::toJsonValue(m_product_ids_all));
    }
    if (m_product_ids_any.size() > 0) {
        obj.insert(QString("product_ids_any"), ::OpenAPI::toJsonValue(m_product_ids_any));
    }
    if (m_quantity_exact_isSet) {
        obj.insert(QString("quantity_exact"), ::OpenAPI::toJsonValue(m_quantity_exact));
    }
    if (m_quantity_max_isSet) {
        obj.insert(QString("quantity_max"), ::OpenAPI::toJsonValue(m_quantity_max));
    }
    if (m_quantity_min_isSet) {
        obj.insert(QString("quantity_min"), ::OpenAPI::toJsonValue(m_quantity_min));
    }
    return obj;
}

bool OAICatalogProductSet::isAllProducts() const {
    return m_all_products;
}
void OAICatalogProductSet::setAllProducts(const bool &all_products) {
    m_all_products = all_products;
    m_all_products_isSet = true;
}

bool OAICatalogProductSet::is_all_products_Set() const{
    return m_all_products_isSet;
}

bool OAICatalogProductSet::is_all_products_Valid() const{
    return m_all_products_isValid;
}

QString OAICatalogProductSet::getName() const {
    return m_name;
}
void OAICatalogProductSet::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICatalogProductSet::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalogProductSet::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAICatalogProductSet::getProductIdsAll() const {
    return m_product_ids_all;
}
void OAICatalogProductSet::setProductIdsAll(const QList<QString> &product_ids_all) {
    m_product_ids_all = product_ids_all;
    m_product_ids_all_isSet = true;
}

bool OAICatalogProductSet::is_product_ids_all_Set() const{
    return m_product_ids_all_isSet;
}

bool OAICatalogProductSet::is_product_ids_all_Valid() const{
    return m_product_ids_all_isValid;
}

QList<QString> OAICatalogProductSet::getProductIdsAny() const {
    return m_product_ids_any;
}
void OAICatalogProductSet::setProductIdsAny(const QList<QString> &product_ids_any) {
    m_product_ids_any = product_ids_any;
    m_product_ids_any_isSet = true;
}

bool OAICatalogProductSet::is_product_ids_any_Set() const{
    return m_product_ids_any_isSet;
}

bool OAICatalogProductSet::is_product_ids_any_Valid() const{
    return m_product_ids_any_isValid;
}

qint64 OAICatalogProductSet::getQuantityExact() const {
    return m_quantity_exact;
}
void OAICatalogProductSet::setQuantityExact(const qint64 &quantity_exact) {
    m_quantity_exact = quantity_exact;
    m_quantity_exact_isSet = true;
}

bool OAICatalogProductSet::is_quantity_exact_Set() const{
    return m_quantity_exact_isSet;
}

bool OAICatalogProductSet::is_quantity_exact_Valid() const{
    return m_quantity_exact_isValid;
}

qint64 OAICatalogProductSet::getQuantityMax() const {
    return m_quantity_max;
}
void OAICatalogProductSet::setQuantityMax(const qint64 &quantity_max) {
    m_quantity_max = quantity_max;
    m_quantity_max_isSet = true;
}

bool OAICatalogProductSet::is_quantity_max_Set() const{
    return m_quantity_max_isSet;
}

bool OAICatalogProductSet::is_quantity_max_Valid() const{
    return m_quantity_max_isValid;
}

qint64 OAICatalogProductSet::getQuantityMin() const {
    return m_quantity_min;
}
void OAICatalogProductSet::setQuantityMin(const qint64 &quantity_min) {
    m_quantity_min = quantity_min;
    m_quantity_min_isSet = true;
}

bool OAICatalogProductSet::is_quantity_min_Set() const{
    return m_quantity_min_isSet;
}

bool OAICatalogProductSet::is_quantity_min_Valid() const{
    return m_quantity_min_isValid;
}

bool OAICatalogProductSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_products_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_ids_all.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_ids_any.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_exact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_min_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogProductSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
