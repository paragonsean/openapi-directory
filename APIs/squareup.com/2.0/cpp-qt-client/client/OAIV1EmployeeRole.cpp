/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1EmployeeRole.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV1EmployeeRole::OAIV1EmployeeRole(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV1EmployeeRole::OAIV1EmployeeRole() {
    this->initializeModel();
}

OAIV1EmployeeRole::~OAIV1EmployeeRole() {}

void OAIV1EmployeeRole::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_owner_isSet = false;
    m_is_owner_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIV1EmployeeRole::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV1EmployeeRole::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_owner_isValid = ::OpenAPI::fromJsonValue(m_is_owner, json[QString("is_owner")]);
    m_is_owner_isSet = !json[QString("is_owner")].isNull() && m_is_owner_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIV1EmployeeRole::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV1EmployeeRole::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_owner_isSet) {
        obj.insert(QString("is_owner"), ::OpenAPI::toJsonValue(m_is_owner));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIV1EmployeeRole::getCreatedAt() const {
    return m_created_at;
}
void OAIV1EmployeeRole::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIV1EmployeeRole::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIV1EmployeeRole::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIV1EmployeeRole::getId() const {
    return m_id;
}
void OAIV1EmployeeRole::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIV1EmployeeRole::is_id_Set() const{
    return m_id_isSet;
}

bool OAIV1EmployeeRole::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIV1EmployeeRole::isIsOwner() const {
    return m_is_owner;
}
void OAIV1EmployeeRole::setIsOwner(const bool &is_owner) {
    m_is_owner = is_owner;
    m_is_owner_isSet = true;
}

bool OAIV1EmployeeRole::is_is_owner_Set() const{
    return m_is_owner_isSet;
}

bool OAIV1EmployeeRole::is_is_owner_Valid() const{
    return m_is_owner_isValid;
}

QString OAIV1EmployeeRole::getName() const {
    return m_name;
}
void OAIV1EmployeeRole::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIV1EmployeeRole::is_name_Set() const{
    return m_name_isSet;
}

bool OAIV1EmployeeRole::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIV1EmployeeRole::getPermissions() const {
    return m_permissions;
}
void OAIV1EmployeeRole::setPermissions(const QList<QString> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIV1EmployeeRole::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIV1EmployeeRole::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIV1EmployeeRole::getUpdatedAt() const {
    return m_updated_at;
}
void OAIV1EmployeeRole::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIV1EmployeeRole::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIV1EmployeeRole::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIV1EmployeeRole::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV1EmployeeRole::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_permissions_isValid && true;
}

} // namespace OpenAPI
