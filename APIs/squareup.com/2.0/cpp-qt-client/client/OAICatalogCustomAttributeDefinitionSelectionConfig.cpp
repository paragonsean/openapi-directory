/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogCustomAttributeDefinitionSelectionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogCustomAttributeDefinitionSelectionConfig::OAICatalogCustomAttributeDefinitionSelectionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogCustomAttributeDefinitionSelectionConfig::OAICatalogCustomAttributeDefinitionSelectionConfig() {
    this->initializeModel();
}

OAICatalogCustomAttributeDefinitionSelectionConfig::~OAICatalogCustomAttributeDefinitionSelectionConfig() {}

void OAICatalogCustomAttributeDefinitionSelectionConfig::initializeModel() {

    m_allowed_selections_isSet = false;
    m_allowed_selections_isValid = false;

    m_max_allowed_selections_isSet = false;
    m_max_allowed_selections_isValid = false;
}

void OAICatalogCustomAttributeDefinitionSelectionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogCustomAttributeDefinitionSelectionConfig::fromJsonObject(QJsonObject json) {

    m_allowed_selections_isValid = ::OpenAPI::fromJsonValue(m_allowed_selections, json[QString("allowed_selections")]);
    m_allowed_selections_isSet = !json[QString("allowed_selections")].isNull() && m_allowed_selections_isValid;

    m_max_allowed_selections_isValid = ::OpenAPI::fromJsonValue(m_max_allowed_selections, json[QString("max_allowed_selections")]);
    m_max_allowed_selections_isSet = !json[QString("max_allowed_selections")].isNull() && m_max_allowed_selections_isValid;
}

QString OAICatalogCustomAttributeDefinitionSelectionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogCustomAttributeDefinitionSelectionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_selections.size() > 0) {
        obj.insert(QString("allowed_selections"), ::OpenAPI::toJsonValue(m_allowed_selections));
    }
    if (m_max_allowed_selections_isSet) {
        obj.insert(QString("max_allowed_selections"), ::OpenAPI::toJsonValue(m_max_allowed_selections));
    }
    return obj;
}

QList<OAICatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection> OAICatalogCustomAttributeDefinitionSelectionConfig::getAllowedSelections() const {
    return m_allowed_selections;
}
void OAICatalogCustomAttributeDefinitionSelectionConfig::setAllowedSelections(const QList<OAICatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection> &allowed_selections) {
    m_allowed_selections = allowed_selections;
    m_allowed_selections_isSet = true;
}

bool OAICatalogCustomAttributeDefinitionSelectionConfig::is_allowed_selections_Set() const{
    return m_allowed_selections_isSet;
}

bool OAICatalogCustomAttributeDefinitionSelectionConfig::is_allowed_selections_Valid() const{
    return m_allowed_selections_isValid;
}

qint32 OAICatalogCustomAttributeDefinitionSelectionConfig::getMaxAllowedSelections() const {
    return m_max_allowed_selections;
}
void OAICatalogCustomAttributeDefinitionSelectionConfig::setMaxAllowedSelections(const qint32 &max_allowed_selections) {
    m_max_allowed_selections = max_allowed_selections;
    m_max_allowed_selections_isSet = true;
}

bool OAICatalogCustomAttributeDefinitionSelectionConfig::is_max_allowed_selections_Set() const{
    return m_max_allowed_selections_isSet;
}

bool OAICatalogCustomAttributeDefinitionSelectionConfig::is_max_allowed_selections_Valid() const{
    return m_max_allowed_selections_isValid;
}

bool OAICatalogCustomAttributeDefinitionSelectionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_selections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_allowed_selections_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogCustomAttributeDefinitionSelectionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
