/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICatalogApi_H
#define OAI_OAICatalogApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchDeleteCatalogObjectsRequest.h"
#include "OAIBatchDeleteCatalogObjectsResponse.h"
#include "OAIBatchRetrieveCatalogObjectsRequest.h"
#include "OAIBatchRetrieveCatalogObjectsResponse.h"
#include "OAIBatchUpsertCatalogObjectsRequest.h"
#include "OAIBatchUpsertCatalogObjectsResponse.h"
#include "OAICatalogInfoResponse.h"
#include "OAIDeleteCatalogObjectResponse.h"
#include "OAIListCatalogResponse.h"
#include "OAIRetrieveCatalogObjectResponse.h"
#include "OAISearchCatalogItemsRequest.h"
#include "OAISearchCatalogItemsResponse.h"
#include "OAISearchCatalogObjectsRequest.h"
#include "OAISearchCatalogObjectsResponse.h"
#include "OAIUpdateItemModifierListsRequest.h"
#include "OAIUpdateItemModifierListsResponse.h"
#include "OAIUpdateItemTaxesRequest.h"
#include "OAIUpdateItemTaxesResponse.h"
#include "OAIUpsertCatalogObjectRequest.h"
#include "OAIUpsertCatalogObjectResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICatalogApi : public QObject {
    Q_OBJECT

public:
    OAICatalogApi(const int timeOut = 0);
    ~OAICatalogApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_batch_delete_catalog_objects_request OAIBatchDeleteCatalogObjectsRequest [required]
    */
    virtual void batchDeleteCatalogObjects(const OAIBatchDeleteCatalogObjectsRequest &oai_batch_delete_catalog_objects_request);

    /**
    * @param[in]  oai_batch_retrieve_catalog_objects_request OAIBatchRetrieveCatalogObjectsRequest [required]
    */
    virtual void batchRetrieveCatalogObjects(const OAIBatchRetrieveCatalogObjectsRequest &oai_batch_retrieve_catalog_objects_request);

    /**
    * @param[in]  oai_batch_upsert_catalog_objects_request OAIBatchUpsertCatalogObjectsRequest [required]
    */
    virtual void batchUpsertCatalogObjects(const OAIBatchUpsertCatalogObjectsRequest &oai_batch_upsert_catalog_objects_request);


    virtual void catalogInfo();

    /**
    * @param[in]  object_id QString [required]
    */
    virtual void deleteCatalogObject(const QString &object_id);

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  types QString [optional]
    * @param[in]  catalog_version qint64 [optional]
    */
    virtual void listCatalog(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &catalog_version = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  object_id QString [required]
    * @param[in]  include_related_objects bool [optional]
    * @param[in]  catalog_version qint64 [optional]
    */
    virtual void retrieveCatalogObject(const QString &object_id, const ::OpenAPI::OptionalParam<bool> &include_related_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &catalog_version = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  oai_search_catalog_items_request OAISearchCatalogItemsRequest [required]
    */
    virtual void searchCatalogItems(const OAISearchCatalogItemsRequest &oai_search_catalog_items_request);

    /**
    * @param[in]  oai_search_catalog_objects_request OAISearchCatalogObjectsRequest [required]
    */
    virtual void searchCatalogObjects(const OAISearchCatalogObjectsRequest &oai_search_catalog_objects_request);

    /**
    * @param[in]  oai_update_item_modifier_lists_request OAIUpdateItemModifierListsRequest [required]
    */
    virtual void updateItemModifierLists(const OAIUpdateItemModifierListsRequest &oai_update_item_modifier_lists_request);

    /**
    * @param[in]  oai_update_item_taxes_request OAIUpdateItemTaxesRequest [required]
    */
    virtual void updateItemTaxes(const OAIUpdateItemTaxesRequest &oai_update_item_taxes_request);

    /**
    * @param[in]  oai_upsert_catalog_object_request OAIUpsertCatalogObjectRequest [required]
    */
    virtual void upsertCatalogObject(const OAIUpsertCatalogObjectRequest &oai_upsert_catalog_object_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void batchDeleteCatalogObjectsCallback(OAIHttpRequestWorker *worker);
    void batchRetrieveCatalogObjectsCallback(OAIHttpRequestWorker *worker);
    void batchUpsertCatalogObjectsCallback(OAIHttpRequestWorker *worker);
    void catalogInfoCallback(OAIHttpRequestWorker *worker);
    void deleteCatalogObjectCallback(OAIHttpRequestWorker *worker);
    void listCatalogCallback(OAIHttpRequestWorker *worker);
    void retrieveCatalogObjectCallback(OAIHttpRequestWorker *worker);
    void searchCatalogItemsCallback(OAIHttpRequestWorker *worker);
    void searchCatalogObjectsCallback(OAIHttpRequestWorker *worker);
    void updateItemModifierListsCallback(OAIHttpRequestWorker *worker);
    void updateItemTaxesCallback(OAIHttpRequestWorker *worker);
    void upsertCatalogObjectCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void batchDeleteCatalogObjectsSignal(OAIBatchDeleteCatalogObjectsResponse summary);
    void batchRetrieveCatalogObjectsSignal(OAIBatchRetrieveCatalogObjectsResponse summary);
    void batchUpsertCatalogObjectsSignal(OAIBatchUpsertCatalogObjectsResponse summary);
    void catalogInfoSignal(OAICatalogInfoResponse summary);
    void deleteCatalogObjectSignal(OAIDeleteCatalogObjectResponse summary);
    void listCatalogSignal(OAIListCatalogResponse summary);
    void retrieveCatalogObjectSignal(OAIRetrieveCatalogObjectResponse summary);
    void searchCatalogItemsSignal(OAISearchCatalogItemsResponse summary);
    void searchCatalogObjectsSignal(OAISearchCatalogObjectsResponse summary);
    void updateItemModifierListsSignal(OAIUpdateItemModifierListsResponse summary);
    void updateItemTaxesSignal(OAIUpdateItemTaxesResponse summary);
    void upsertCatalogObjectSignal(OAIUpsertCatalogObjectResponse summary);


    void batchDeleteCatalogObjectsSignalFull(OAIHttpRequestWorker *worker, OAIBatchDeleteCatalogObjectsResponse summary);
    void batchRetrieveCatalogObjectsSignalFull(OAIHttpRequestWorker *worker, OAIBatchRetrieveCatalogObjectsResponse summary);
    void batchUpsertCatalogObjectsSignalFull(OAIHttpRequestWorker *worker, OAIBatchUpsertCatalogObjectsResponse summary);
    void catalogInfoSignalFull(OAIHttpRequestWorker *worker, OAICatalogInfoResponse summary);
    void deleteCatalogObjectSignalFull(OAIHttpRequestWorker *worker, OAIDeleteCatalogObjectResponse summary);
    void listCatalogSignalFull(OAIHttpRequestWorker *worker, OAIListCatalogResponse summary);
    void retrieveCatalogObjectSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveCatalogObjectResponse summary);
    void searchCatalogItemsSignalFull(OAIHttpRequestWorker *worker, OAISearchCatalogItemsResponse summary);
    void searchCatalogObjectsSignalFull(OAIHttpRequestWorker *worker, OAISearchCatalogObjectsResponse summary);
    void updateItemModifierListsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateItemModifierListsResponse summary);
    void updateItemTaxesSignalFull(OAIHttpRequestWorker *worker, OAIUpdateItemTaxesResponse summary);
    void upsertCatalogObjectSignalFull(OAIHttpRequestWorker *worker, OAIUpsertCatalogObjectResponse summary);

    Q_DECL_DEPRECATED_X("Use batchDeleteCatalogObjectsSignalError() instead")
    void batchDeleteCatalogObjectsSignalE(OAIBatchDeleteCatalogObjectsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchDeleteCatalogObjectsSignalError(OAIBatchDeleteCatalogObjectsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchRetrieveCatalogObjectsSignalError() instead")
    void batchRetrieveCatalogObjectsSignalE(OAIBatchRetrieveCatalogObjectsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchRetrieveCatalogObjectsSignalError(OAIBatchRetrieveCatalogObjectsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchUpsertCatalogObjectsSignalError() instead")
    void batchUpsertCatalogObjectsSignalE(OAIBatchUpsertCatalogObjectsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchUpsertCatalogObjectsSignalError(OAIBatchUpsertCatalogObjectsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogInfoSignalError() instead")
    void catalogInfoSignalE(OAICatalogInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogInfoSignalError(OAICatalogInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCatalogObjectSignalError() instead")
    void deleteCatalogObjectSignalE(OAIDeleteCatalogObjectResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCatalogObjectSignalError(OAIDeleteCatalogObjectResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCatalogSignalError() instead")
    void listCatalogSignalE(OAIListCatalogResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCatalogSignalError(OAIListCatalogResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveCatalogObjectSignalError() instead")
    void retrieveCatalogObjectSignalE(OAIRetrieveCatalogObjectResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveCatalogObjectSignalError(OAIRetrieveCatalogObjectResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchCatalogItemsSignalError() instead")
    void searchCatalogItemsSignalE(OAISearchCatalogItemsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchCatalogItemsSignalError(OAISearchCatalogItemsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchCatalogObjectsSignalError() instead")
    void searchCatalogObjectsSignalE(OAISearchCatalogObjectsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchCatalogObjectsSignalError(OAISearchCatalogObjectsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateItemModifierListsSignalError() instead")
    void updateItemModifierListsSignalE(OAIUpdateItemModifierListsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateItemModifierListsSignalError(OAIUpdateItemModifierListsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateItemTaxesSignalError() instead")
    void updateItemTaxesSignalE(OAIUpdateItemTaxesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateItemTaxesSignalError(OAIUpdateItemTaxesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upsertCatalogObjectSignalError() instead")
    void upsertCatalogObjectSignalE(OAIUpsertCatalogObjectResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void upsertCatalogObjectSignalError(OAIUpsertCatalogObjectResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use batchDeleteCatalogObjectsSignalErrorFull() instead")
    void batchDeleteCatalogObjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchDeleteCatalogObjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchRetrieveCatalogObjectsSignalErrorFull() instead")
    void batchRetrieveCatalogObjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchRetrieveCatalogObjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchUpsertCatalogObjectsSignalErrorFull() instead")
    void batchUpsertCatalogObjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchUpsertCatalogObjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogInfoSignalErrorFull() instead")
    void catalogInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCatalogObjectSignalErrorFull() instead")
    void deleteCatalogObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCatalogObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCatalogSignalErrorFull() instead")
    void listCatalogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCatalogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveCatalogObjectSignalErrorFull() instead")
    void retrieveCatalogObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveCatalogObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchCatalogItemsSignalErrorFull() instead")
    void searchCatalogItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchCatalogItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchCatalogObjectsSignalErrorFull() instead")
    void searchCatalogObjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchCatalogObjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateItemModifierListsSignalErrorFull() instead")
    void updateItemModifierListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateItemModifierListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateItemTaxesSignalErrorFull() instead")
    void updateItemTaxesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateItemTaxesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upsertCatalogObjectSignalErrorFull() instead")
    void upsertCatalogObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void upsertCatalogObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
