/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction::OAITransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction::OAITransaction() {
    this->initializeModel();
}

OAITransaction::~OAITransaction() {}

void OAITransaction::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_refunds_isSet = false;
    m_refunds_isValid = false;

    m_shipping_address_isSet = false;
    m_shipping_address_isValid = false;

    m_tenders_isSet = false;
    m_tenders_isValid = false;
}

void OAITransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("reference_id")]);
    m_reference_id_isSet = !json[QString("reference_id")].isNull() && m_reference_id_isValid;

    m_refunds_isValid = ::OpenAPI::fromJsonValue(m_refunds, json[QString("refunds")]);
    m_refunds_isSet = !json[QString("refunds")].isNull() && m_refunds_isValid;

    m_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_shipping_address, json[QString("shipping_address")]);
    m_shipping_address_isSet = !json[QString("shipping_address")].isNull() && m_shipping_address_isValid;

    m_tenders_isValid = ::OpenAPI::fromJsonValue(m_tenders, json[QString("tenders")]);
    m_tenders_isSet = !json[QString("tenders")].isNull() && m_tenders_isValid;
}

QString OAITransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_product_isSet) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("reference_id"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_refunds.size() > 0) {
        obj.insert(QString("refunds"), ::OpenAPI::toJsonValue(m_refunds));
    }
    if (m_shipping_address.isSet()) {
        obj.insert(QString("shipping_address"), ::OpenAPI::toJsonValue(m_shipping_address));
    }
    if (m_tenders.size() > 0) {
        obj.insert(QString("tenders"), ::OpenAPI::toJsonValue(m_tenders));
    }
    return obj;
}

QString OAITransaction::getClientId() const {
    return m_client_id;
}
void OAITransaction::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAITransaction::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAITransaction::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAITransaction::getCreatedAt() const {
    return m_created_at;
}
void OAITransaction::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITransaction::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITransaction::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITransaction::getId() const {
    return m_id;
}
void OAITransaction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransaction::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransaction::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITransaction::getLocationId() const {
    return m_location_id;
}
void OAITransaction::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAITransaction::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAITransaction::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAITransaction::getOrderId() const {
    return m_order_id;
}
void OAITransaction::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAITransaction::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAITransaction::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAITransaction::getProduct() const {
    return m_product;
}
void OAITransaction::setProduct(const QString &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAITransaction::is_product_Set() const{
    return m_product_isSet;
}

bool OAITransaction::is_product_Valid() const{
    return m_product_isValid;
}

QString OAITransaction::getReferenceId() const {
    return m_reference_id;
}
void OAITransaction::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAITransaction::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAITransaction::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QList<OAIRefund> OAITransaction::getRefunds() const {
    return m_refunds;
}
void OAITransaction::setRefunds(const QList<OAIRefund> &refunds) {
    m_refunds = refunds;
    m_refunds_isSet = true;
}

bool OAITransaction::is_refunds_Set() const{
    return m_refunds_isSet;
}

bool OAITransaction::is_refunds_Valid() const{
    return m_refunds_isValid;
}

OAIAddress OAITransaction::getShippingAddress() const {
    return m_shipping_address;
}
void OAITransaction::setShippingAddress(const OAIAddress &shipping_address) {
    m_shipping_address = shipping_address;
    m_shipping_address_isSet = true;
}

bool OAITransaction::is_shipping_address_Set() const{
    return m_shipping_address_isSet;
}

bool OAITransaction::is_shipping_address_Valid() const{
    return m_shipping_address_isValid;
}

QList<OAITender> OAITransaction::getTenders() const {
    return m_tenders;
}
void OAITransaction::setTenders(const QList<OAITender> &tenders) {
    m_tenders = tenders;
    m_tenders_isSet = true;
}

bool OAITransaction::is_tenders_Set() const{
    return m_tenders_isSet;
}

bool OAITransaction::is_tenders_Valid() const{
    return m_tenders_isValid;
}

bool OAITransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenders.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
