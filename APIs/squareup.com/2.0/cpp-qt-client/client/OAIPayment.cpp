/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayment::OAIPayment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayment::OAIPayment() {
    this->initializeModel();
}

OAIPayment::~OAIPayment() {}

void OAIPayment::initializeModel() {

    m_amount_money_isSet = false;
    m_amount_money_isValid = false;

    m_app_fee_money_isSet = false;
    m_app_fee_money_isValid = false;

    m_approved_money_isSet = false;
    m_approved_money_isValid = false;

    m_bank_account_details_isSet = false;
    m_bank_account_details_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_buyer_email_address_isSet = false;
    m_buyer_email_address_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_card_details_isSet = false;
    m_card_details_isValid = false;

    m_cash_details_isSet = false;
    m_cash_details_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_delay_action_isSet = false;
    m_delay_action_isValid = false;

    m_delay_duration_isSet = false;
    m_delay_duration_isValid = false;

    m_delayed_until_isSet = false;
    m_delayed_until_isValid = false;

    m_employee_id_isSet = false;
    m_employee_id_isValid = false;

    m_external_details_isSet = false;
    m_external_details_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_processing_fee_isSet = false;
    m_processing_fee_isValid = false;

    m_receipt_number_isSet = false;
    m_receipt_number_isValid = false;

    m_receipt_url_isSet = false;
    m_receipt_url_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_refund_ids_isSet = false;
    m_refund_ids_isValid = false;

    m_refunded_money_isSet = false;
    m_refunded_money_isValid = false;

    m_risk_evaluation_isSet = false;
    m_risk_evaluation_isValid = false;

    m_shipping_address_isSet = false;
    m_shipping_address_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_statement_description_identifier_isSet = false;
    m_statement_description_identifier_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tip_money_isSet = false;
    m_tip_money_isValid = false;

    m_total_money_isSet = false;
    m_total_money_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_version_token_isSet = false;
    m_version_token_isValid = false;

    m_wallet_details_isSet = false;
    m_wallet_details_isValid = false;
}

void OAIPayment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayment::fromJsonObject(QJsonObject json) {

    m_amount_money_isValid = ::OpenAPI::fromJsonValue(m_amount_money, json[QString("amount_money")]);
    m_amount_money_isSet = !json[QString("amount_money")].isNull() && m_amount_money_isValid;

    m_app_fee_money_isValid = ::OpenAPI::fromJsonValue(m_app_fee_money, json[QString("app_fee_money")]);
    m_app_fee_money_isSet = !json[QString("app_fee_money")].isNull() && m_app_fee_money_isValid;

    m_approved_money_isValid = ::OpenAPI::fromJsonValue(m_approved_money, json[QString("approved_money")]);
    m_approved_money_isSet = !json[QString("approved_money")].isNull() && m_approved_money_isValid;

    m_bank_account_details_isValid = ::OpenAPI::fromJsonValue(m_bank_account_details, json[QString("bank_account_details")]);
    m_bank_account_details_isSet = !json[QString("bank_account_details")].isNull() && m_bank_account_details_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billing_address")]);
    m_billing_address_isSet = !json[QString("billing_address")].isNull() && m_billing_address_isValid;

    m_buyer_email_address_isValid = ::OpenAPI::fromJsonValue(m_buyer_email_address, json[QString("buyer_email_address")]);
    m_buyer_email_address_isSet = !json[QString("buyer_email_address")].isNull() && m_buyer_email_address_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_card_details_isValid = ::OpenAPI::fromJsonValue(m_card_details, json[QString("card_details")]);
    m_card_details_isSet = !json[QString("card_details")].isNull() && m_card_details_isValid;

    m_cash_details_isValid = ::OpenAPI::fromJsonValue(m_cash_details, json[QString("cash_details")]);
    m_cash_details_isSet = !json[QString("cash_details")].isNull() && m_cash_details_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_delay_action_isValid = ::OpenAPI::fromJsonValue(m_delay_action, json[QString("delay_action")]);
    m_delay_action_isSet = !json[QString("delay_action")].isNull() && m_delay_action_isValid;

    m_delay_duration_isValid = ::OpenAPI::fromJsonValue(m_delay_duration, json[QString("delay_duration")]);
    m_delay_duration_isSet = !json[QString("delay_duration")].isNull() && m_delay_duration_isValid;

    m_delayed_until_isValid = ::OpenAPI::fromJsonValue(m_delayed_until, json[QString("delayed_until")]);
    m_delayed_until_isSet = !json[QString("delayed_until")].isNull() && m_delayed_until_isValid;

    m_employee_id_isValid = ::OpenAPI::fromJsonValue(m_employee_id, json[QString("employee_id")]);
    m_employee_id_isSet = !json[QString("employee_id")].isNull() && m_employee_id_isValid;

    m_external_details_isValid = ::OpenAPI::fromJsonValue(m_external_details, json[QString("external_details")]);
    m_external_details_isSet = !json[QString("external_details")].isNull() && m_external_details_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_processing_fee_isValid = ::OpenAPI::fromJsonValue(m_processing_fee, json[QString("processing_fee")]);
    m_processing_fee_isSet = !json[QString("processing_fee")].isNull() && m_processing_fee_isValid;

    m_receipt_number_isValid = ::OpenAPI::fromJsonValue(m_receipt_number, json[QString("receipt_number")]);
    m_receipt_number_isSet = !json[QString("receipt_number")].isNull() && m_receipt_number_isValid;

    m_receipt_url_isValid = ::OpenAPI::fromJsonValue(m_receipt_url, json[QString("receipt_url")]);
    m_receipt_url_isSet = !json[QString("receipt_url")].isNull() && m_receipt_url_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("reference_id")]);
    m_reference_id_isSet = !json[QString("reference_id")].isNull() && m_reference_id_isValid;

    m_refund_ids_isValid = ::OpenAPI::fromJsonValue(m_refund_ids, json[QString("refund_ids")]);
    m_refund_ids_isSet = !json[QString("refund_ids")].isNull() && m_refund_ids_isValid;

    m_refunded_money_isValid = ::OpenAPI::fromJsonValue(m_refunded_money, json[QString("refunded_money")]);
    m_refunded_money_isSet = !json[QString("refunded_money")].isNull() && m_refunded_money_isValid;

    m_risk_evaluation_isValid = ::OpenAPI::fromJsonValue(m_risk_evaluation, json[QString("risk_evaluation")]);
    m_risk_evaluation_isSet = !json[QString("risk_evaluation")].isNull() && m_risk_evaluation_isValid;

    m_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_shipping_address, json[QString("shipping_address")]);
    m_shipping_address_isSet = !json[QString("shipping_address")].isNull() && m_shipping_address_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("source_type")]);
    m_source_type_isSet = !json[QString("source_type")].isNull() && m_source_type_isValid;

    m_statement_description_identifier_isValid = ::OpenAPI::fromJsonValue(m_statement_description_identifier, json[QString("statement_description_identifier")]);
    m_statement_description_identifier_isSet = !json[QString("statement_description_identifier")].isNull() && m_statement_description_identifier_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tip_money_isValid = ::OpenAPI::fromJsonValue(m_tip_money, json[QString("tip_money")]);
    m_tip_money_isSet = !json[QString("tip_money")].isNull() && m_tip_money_isValid;

    m_total_money_isValid = ::OpenAPI::fromJsonValue(m_total_money, json[QString("total_money")]);
    m_total_money_isSet = !json[QString("total_money")].isNull() && m_total_money_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_version_token_isValid = ::OpenAPI::fromJsonValue(m_version_token, json[QString("version_token")]);
    m_version_token_isSet = !json[QString("version_token")].isNull() && m_version_token_isValid;

    m_wallet_details_isValid = ::OpenAPI::fromJsonValue(m_wallet_details, json[QString("wallet_details")]);
    m_wallet_details_isSet = !json[QString("wallet_details")].isNull() && m_wallet_details_isValid;
}

QString OAIPayment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayment::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_money.isSet()) {
        obj.insert(QString("amount_money"), ::OpenAPI::toJsonValue(m_amount_money));
    }
    if (m_app_fee_money.isSet()) {
        obj.insert(QString("app_fee_money"), ::OpenAPI::toJsonValue(m_app_fee_money));
    }
    if (m_approved_money.isSet()) {
        obj.insert(QString("approved_money"), ::OpenAPI::toJsonValue(m_approved_money));
    }
    if (m_bank_account_details.isSet()) {
        obj.insert(QString("bank_account_details"), ::OpenAPI::toJsonValue(m_bank_account_details));
    }
    if (m_billing_address.isSet()) {
        obj.insert(QString("billing_address"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_buyer_email_address_isSet) {
        obj.insert(QString("buyer_email_address"), ::OpenAPI::toJsonValue(m_buyer_email_address));
    }
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_card_details.isSet()) {
        obj.insert(QString("card_details"), ::OpenAPI::toJsonValue(m_card_details));
    }
    if (m_cash_details.isSet()) {
        obj.insert(QString("cash_details"), ::OpenAPI::toJsonValue(m_cash_details));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_delay_action_isSet) {
        obj.insert(QString("delay_action"), ::OpenAPI::toJsonValue(m_delay_action));
    }
    if (m_delay_duration_isSet) {
        obj.insert(QString("delay_duration"), ::OpenAPI::toJsonValue(m_delay_duration));
    }
    if (m_delayed_until_isSet) {
        obj.insert(QString("delayed_until"), ::OpenAPI::toJsonValue(m_delayed_until));
    }
    if (m_employee_id_isSet) {
        obj.insert(QString("employee_id"), ::OpenAPI::toJsonValue(m_employee_id));
    }
    if (m_external_details.isSet()) {
        obj.insert(QString("external_details"), ::OpenAPI::toJsonValue(m_external_details));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_processing_fee.size() > 0) {
        obj.insert(QString("processing_fee"), ::OpenAPI::toJsonValue(m_processing_fee));
    }
    if (m_receipt_number_isSet) {
        obj.insert(QString("receipt_number"), ::OpenAPI::toJsonValue(m_receipt_number));
    }
    if (m_receipt_url_isSet) {
        obj.insert(QString("receipt_url"), ::OpenAPI::toJsonValue(m_receipt_url));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("reference_id"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_refund_ids.size() > 0) {
        obj.insert(QString("refund_ids"), ::OpenAPI::toJsonValue(m_refund_ids));
    }
    if (m_refunded_money.isSet()) {
        obj.insert(QString("refunded_money"), ::OpenAPI::toJsonValue(m_refunded_money));
    }
    if (m_risk_evaluation.isSet()) {
        obj.insert(QString("risk_evaluation"), ::OpenAPI::toJsonValue(m_risk_evaluation));
    }
    if (m_shipping_address.isSet()) {
        obj.insert(QString("shipping_address"), ::OpenAPI::toJsonValue(m_shipping_address));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("source_type"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_statement_description_identifier_isSet) {
        obj.insert(QString("statement_description_identifier"), ::OpenAPI::toJsonValue(m_statement_description_identifier));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tip_money.isSet()) {
        obj.insert(QString("tip_money"), ::OpenAPI::toJsonValue(m_tip_money));
    }
    if (m_total_money.isSet()) {
        obj.insert(QString("total_money"), ::OpenAPI::toJsonValue(m_total_money));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_version_token_isSet) {
        obj.insert(QString("version_token"), ::OpenAPI::toJsonValue(m_version_token));
    }
    if (m_wallet_details.isSet()) {
        obj.insert(QString("wallet_details"), ::OpenAPI::toJsonValue(m_wallet_details));
    }
    return obj;
}

OAIMoney OAIPayment::getAmountMoney() const {
    return m_amount_money;
}
void OAIPayment::setAmountMoney(const OAIMoney &amount_money) {
    m_amount_money = amount_money;
    m_amount_money_isSet = true;
}

bool OAIPayment::is_amount_money_Set() const{
    return m_amount_money_isSet;
}

bool OAIPayment::is_amount_money_Valid() const{
    return m_amount_money_isValid;
}

OAIMoney OAIPayment::getAppFeeMoney() const {
    return m_app_fee_money;
}
void OAIPayment::setAppFeeMoney(const OAIMoney &app_fee_money) {
    m_app_fee_money = app_fee_money;
    m_app_fee_money_isSet = true;
}

bool OAIPayment::is_app_fee_money_Set() const{
    return m_app_fee_money_isSet;
}

bool OAIPayment::is_app_fee_money_Valid() const{
    return m_app_fee_money_isValid;
}

OAIMoney OAIPayment::getApprovedMoney() const {
    return m_approved_money;
}
void OAIPayment::setApprovedMoney(const OAIMoney &approved_money) {
    m_approved_money = approved_money;
    m_approved_money_isSet = true;
}

bool OAIPayment::is_approved_money_Set() const{
    return m_approved_money_isSet;
}

bool OAIPayment::is_approved_money_Valid() const{
    return m_approved_money_isValid;
}

OAIBankAccountPaymentDetails OAIPayment::getBankAccountDetails() const {
    return m_bank_account_details;
}
void OAIPayment::setBankAccountDetails(const OAIBankAccountPaymentDetails &bank_account_details) {
    m_bank_account_details = bank_account_details;
    m_bank_account_details_isSet = true;
}

bool OAIPayment::is_bank_account_details_Set() const{
    return m_bank_account_details_isSet;
}

bool OAIPayment::is_bank_account_details_Valid() const{
    return m_bank_account_details_isValid;
}

OAIAddress OAIPayment::getBillingAddress() const {
    return m_billing_address;
}
void OAIPayment::setBillingAddress(const OAIAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIPayment::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIPayment::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

QString OAIPayment::getBuyerEmailAddress() const {
    return m_buyer_email_address;
}
void OAIPayment::setBuyerEmailAddress(const QString &buyer_email_address) {
    m_buyer_email_address = buyer_email_address;
    m_buyer_email_address_isSet = true;
}

bool OAIPayment::is_buyer_email_address_Set() const{
    return m_buyer_email_address_isSet;
}

bool OAIPayment::is_buyer_email_address_Valid() const{
    return m_buyer_email_address_isValid;
}

QList<QString> OAIPayment::getCapabilities() const {
    return m_capabilities;
}
void OAIPayment::setCapabilities(const QList<QString> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIPayment::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIPayment::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

OAICardPaymentDetails OAIPayment::getCardDetails() const {
    return m_card_details;
}
void OAIPayment::setCardDetails(const OAICardPaymentDetails &card_details) {
    m_card_details = card_details;
    m_card_details_isSet = true;
}

bool OAIPayment::is_card_details_Set() const{
    return m_card_details_isSet;
}

bool OAIPayment::is_card_details_Valid() const{
    return m_card_details_isValid;
}

OAICashPaymentDetails OAIPayment::getCashDetails() const {
    return m_cash_details;
}
void OAIPayment::setCashDetails(const OAICashPaymentDetails &cash_details) {
    m_cash_details = cash_details;
    m_cash_details_isSet = true;
}

bool OAIPayment::is_cash_details_Set() const{
    return m_cash_details_isSet;
}

bool OAIPayment::is_cash_details_Valid() const{
    return m_cash_details_isValid;
}

QString OAIPayment::getCreatedAt() const {
    return m_created_at;
}
void OAIPayment::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPayment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPayment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPayment::getCustomerId() const {
    return m_customer_id;
}
void OAIPayment::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIPayment::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIPayment::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIPayment::getDelayAction() const {
    return m_delay_action;
}
void OAIPayment::setDelayAction(const QString &delay_action) {
    m_delay_action = delay_action;
    m_delay_action_isSet = true;
}

bool OAIPayment::is_delay_action_Set() const{
    return m_delay_action_isSet;
}

bool OAIPayment::is_delay_action_Valid() const{
    return m_delay_action_isValid;
}

QString OAIPayment::getDelayDuration() const {
    return m_delay_duration;
}
void OAIPayment::setDelayDuration(const QString &delay_duration) {
    m_delay_duration = delay_duration;
    m_delay_duration_isSet = true;
}

bool OAIPayment::is_delay_duration_Set() const{
    return m_delay_duration_isSet;
}

bool OAIPayment::is_delay_duration_Valid() const{
    return m_delay_duration_isValid;
}

QString OAIPayment::getDelayedUntil() const {
    return m_delayed_until;
}
void OAIPayment::setDelayedUntil(const QString &delayed_until) {
    m_delayed_until = delayed_until;
    m_delayed_until_isSet = true;
}

bool OAIPayment::is_delayed_until_Set() const{
    return m_delayed_until_isSet;
}

bool OAIPayment::is_delayed_until_Valid() const{
    return m_delayed_until_isValid;
}

QString OAIPayment::getEmployeeId() const {
    return m_employee_id;
}
void OAIPayment::setEmployeeId(const QString &employee_id) {
    m_employee_id = employee_id;
    m_employee_id_isSet = true;
}

bool OAIPayment::is_employee_id_Set() const{
    return m_employee_id_isSet;
}

bool OAIPayment::is_employee_id_Valid() const{
    return m_employee_id_isValid;
}

OAIExternalPaymentDetails OAIPayment::getExternalDetails() const {
    return m_external_details;
}
void OAIPayment::setExternalDetails(const OAIExternalPaymentDetails &external_details) {
    m_external_details = external_details;
    m_external_details_isSet = true;
}

bool OAIPayment::is_external_details_Set() const{
    return m_external_details_isSet;
}

bool OAIPayment::is_external_details_Valid() const{
    return m_external_details_isValid;
}

QString OAIPayment::getId() const {
    return m_id;
}
void OAIPayment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPayment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPayment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPayment::getLocationId() const {
    return m_location_id;
}
void OAIPayment::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIPayment::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIPayment::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIPayment::getNote() const {
    return m_note;
}
void OAIPayment::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIPayment::is_note_Set() const{
    return m_note_isSet;
}

bool OAIPayment::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIPayment::getOrderId() const {
    return m_order_id;
}
void OAIPayment::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIPayment::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIPayment::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QList<OAIProcessingFee> OAIPayment::getProcessingFee() const {
    return m_processing_fee;
}
void OAIPayment::setProcessingFee(const QList<OAIProcessingFee> &processing_fee) {
    m_processing_fee = processing_fee;
    m_processing_fee_isSet = true;
}

bool OAIPayment::is_processing_fee_Set() const{
    return m_processing_fee_isSet;
}

bool OAIPayment::is_processing_fee_Valid() const{
    return m_processing_fee_isValid;
}

QString OAIPayment::getReceiptNumber() const {
    return m_receipt_number;
}
void OAIPayment::setReceiptNumber(const QString &receipt_number) {
    m_receipt_number = receipt_number;
    m_receipt_number_isSet = true;
}

bool OAIPayment::is_receipt_number_Set() const{
    return m_receipt_number_isSet;
}

bool OAIPayment::is_receipt_number_Valid() const{
    return m_receipt_number_isValid;
}

QString OAIPayment::getReceiptUrl() const {
    return m_receipt_url;
}
void OAIPayment::setReceiptUrl(const QString &receipt_url) {
    m_receipt_url = receipt_url;
    m_receipt_url_isSet = true;
}

bool OAIPayment::is_receipt_url_Set() const{
    return m_receipt_url_isSet;
}

bool OAIPayment::is_receipt_url_Valid() const{
    return m_receipt_url_isValid;
}

QString OAIPayment::getReferenceId() const {
    return m_reference_id;
}
void OAIPayment::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIPayment::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIPayment::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QList<QString> OAIPayment::getRefundIds() const {
    return m_refund_ids;
}
void OAIPayment::setRefundIds(const QList<QString> &refund_ids) {
    m_refund_ids = refund_ids;
    m_refund_ids_isSet = true;
}

bool OAIPayment::is_refund_ids_Set() const{
    return m_refund_ids_isSet;
}

bool OAIPayment::is_refund_ids_Valid() const{
    return m_refund_ids_isValid;
}

OAIMoney OAIPayment::getRefundedMoney() const {
    return m_refunded_money;
}
void OAIPayment::setRefundedMoney(const OAIMoney &refunded_money) {
    m_refunded_money = refunded_money;
    m_refunded_money_isSet = true;
}

bool OAIPayment::is_refunded_money_Set() const{
    return m_refunded_money_isSet;
}

bool OAIPayment::is_refunded_money_Valid() const{
    return m_refunded_money_isValid;
}

OAIRiskEvaluation OAIPayment::getRiskEvaluation() const {
    return m_risk_evaluation;
}
void OAIPayment::setRiskEvaluation(const OAIRiskEvaluation &risk_evaluation) {
    m_risk_evaluation = risk_evaluation;
    m_risk_evaluation_isSet = true;
}

bool OAIPayment::is_risk_evaluation_Set() const{
    return m_risk_evaluation_isSet;
}

bool OAIPayment::is_risk_evaluation_Valid() const{
    return m_risk_evaluation_isValid;
}

OAIAddress OAIPayment::getShippingAddress() const {
    return m_shipping_address;
}
void OAIPayment::setShippingAddress(const OAIAddress &shipping_address) {
    m_shipping_address = shipping_address;
    m_shipping_address_isSet = true;
}

bool OAIPayment::is_shipping_address_Set() const{
    return m_shipping_address_isSet;
}

bool OAIPayment::is_shipping_address_Valid() const{
    return m_shipping_address_isValid;
}

QString OAIPayment::getSourceType() const {
    return m_source_type;
}
void OAIPayment::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIPayment::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIPayment::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QString OAIPayment::getStatementDescriptionIdentifier() const {
    return m_statement_description_identifier;
}
void OAIPayment::setStatementDescriptionIdentifier(const QString &statement_description_identifier) {
    m_statement_description_identifier = statement_description_identifier;
    m_statement_description_identifier_isSet = true;
}

bool OAIPayment::is_statement_description_identifier_Set() const{
    return m_statement_description_identifier_isSet;
}

bool OAIPayment::is_statement_description_identifier_Valid() const{
    return m_statement_description_identifier_isValid;
}

QString OAIPayment::getStatus() const {
    return m_status;
}
void OAIPayment::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPayment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPayment::is_status_Valid() const{
    return m_status_isValid;
}

OAIMoney OAIPayment::getTipMoney() const {
    return m_tip_money;
}
void OAIPayment::setTipMoney(const OAIMoney &tip_money) {
    m_tip_money = tip_money;
    m_tip_money_isSet = true;
}

bool OAIPayment::is_tip_money_Set() const{
    return m_tip_money_isSet;
}

bool OAIPayment::is_tip_money_Valid() const{
    return m_tip_money_isValid;
}

OAIMoney OAIPayment::getTotalMoney() const {
    return m_total_money;
}
void OAIPayment::setTotalMoney(const OAIMoney &total_money) {
    m_total_money = total_money;
    m_total_money_isSet = true;
}

bool OAIPayment::is_total_money_Set() const{
    return m_total_money_isSet;
}

bool OAIPayment::is_total_money_Valid() const{
    return m_total_money_isValid;
}

QString OAIPayment::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPayment::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPayment::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPayment::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIPayment::getVersionToken() const {
    return m_version_token;
}
void OAIPayment::setVersionToken(const QString &version_token) {
    m_version_token = version_token;
    m_version_token_isSet = true;
}

bool OAIPayment::is_version_token_Set() const{
    return m_version_token_isSet;
}

bool OAIPayment::is_version_token_Valid() const{
    return m_version_token_isValid;
}

OAIDigitalWalletDetails OAIPayment::getWalletDetails() const {
    return m_wallet_details;
}
void OAIPayment::setWalletDetails(const OAIDigitalWalletDetails &wallet_details) {
    m_wallet_details = wallet_details;
    m_wallet_details_isSet = true;
}

bool OAIPayment::is_wallet_details_Set() const{
    return m_wallet_details_isSet;
}

bool OAIPayment::is_wallet_details_Valid() const{
    return m_wallet_details_isValid;
}

bool OAIPayment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_fee_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_approved_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delayed_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_fee.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_evaluation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_description_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tip_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wallet_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
