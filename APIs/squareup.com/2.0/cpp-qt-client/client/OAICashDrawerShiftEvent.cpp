/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICashDrawerShiftEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICashDrawerShiftEvent::OAICashDrawerShiftEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICashDrawerShiftEvent::OAICashDrawerShiftEvent() {
    this->initializeModel();
}

OAICashDrawerShiftEvent::~OAICashDrawerShiftEvent() {}

void OAICashDrawerShiftEvent::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_employee_id_isSet = false;
    m_employee_id_isValid = false;

    m_event_money_isSet = false;
    m_event_money_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAICashDrawerShiftEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICashDrawerShiftEvent::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_employee_id_isValid = ::OpenAPI::fromJsonValue(m_employee_id, json[QString("employee_id")]);
    m_employee_id_isSet = !json[QString("employee_id")].isNull() && m_employee_id_isValid;

    m_event_money_isValid = ::OpenAPI::fromJsonValue(m_event_money, json[QString("event_money")]);
    m_event_money_isSet = !json[QString("event_money")].isNull() && m_event_money_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("event_type")]);
    m_event_type_isSet = !json[QString("event_type")].isNull() && m_event_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAICashDrawerShiftEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICashDrawerShiftEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_employee_id_isSet) {
        obj.insert(QString("employee_id"), ::OpenAPI::toJsonValue(m_employee_id));
    }
    if (m_event_money.isSet()) {
        obj.insert(QString("event_money"), ::OpenAPI::toJsonValue(m_event_money));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("event_type"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAICashDrawerShiftEvent::getCreatedAt() const {
    return m_created_at;
}
void OAICashDrawerShiftEvent::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICashDrawerShiftEvent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICashDrawerShiftEvent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICashDrawerShiftEvent::getDescription() const {
    return m_description;
}
void OAICashDrawerShiftEvent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICashDrawerShiftEvent::is_description_Set() const{
    return m_description_isSet;
}

bool OAICashDrawerShiftEvent::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICashDrawerShiftEvent::getEmployeeId() const {
    return m_employee_id;
}
void OAICashDrawerShiftEvent::setEmployeeId(const QString &employee_id) {
    m_employee_id = employee_id;
    m_employee_id_isSet = true;
}

bool OAICashDrawerShiftEvent::is_employee_id_Set() const{
    return m_employee_id_isSet;
}

bool OAICashDrawerShiftEvent::is_employee_id_Valid() const{
    return m_employee_id_isValid;
}

OAIMoney OAICashDrawerShiftEvent::getEventMoney() const {
    return m_event_money;
}
void OAICashDrawerShiftEvent::setEventMoney(const OAIMoney &event_money) {
    m_event_money = event_money;
    m_event_money_isSet = true;
}

bool OAICashDrawerShiftEvent::is_event_money_Set() const{
    return m_event_money_isSet;
}

bool OAICashDrawerShiftEvent::is_event_money_Valid() const{
    return m_event_money_isValid;
}

QString OAICashDrawerShiftEvent::getEventType() const {
    return m_event_type;
}
void OAICashDrawerShiftEvent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAICashDrawerShiftEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAICashDrawerShiftEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAICashDrawerShiftEvent::getId() const {
    return m_id;
}
void OAICashDrawerShiftEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICashDrawerShiftEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAICashDrawerShiftEvent::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICashDrawerShiftEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICashDrawerShiftEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
