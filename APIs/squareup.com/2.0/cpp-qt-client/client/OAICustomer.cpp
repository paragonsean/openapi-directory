/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomer::OAICustomer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomer::OAICustomer() {
    this->initializeModel();
}

OAICustomer::~OAICustomer() {}

void OAICustomer::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_birthday_isSet = false;
    m_birthday_isValid = false;

    m_cards_isSet = false;
    m_cards_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creation_source_isSet = false;
    m_creation_source_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_family_name_isSet = false;
    m_family_name_isValid = false;

    m_given_name_isSet = false;
    m_given_name_isValid = false;

    m_group_ids_isSet = false;
    m_group_ids_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_preferences_isSet = false;
    m_preferences_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_segment_ids_isSet = false;
    m_segment_ids_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAICustomer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomer::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_birthday_isValid = ::OpenAPI::fromJsonValue(m_birthday, json[QString("birthday")]);
    m_birthday_isSet = !json[QString("birthday")].isNull() && m_birthday_isValid;

    m_cards_isValid = ::OpenAPI::fromJsonValue(m_cards, json[QString("cards")]);
    m_cards_isSet = !json[QString("cards")].isNull() && m_cards_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("company_name")]);
    m_company_name_isSet = !json[QString("company_name")].isNull() && m_company_name_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_creation_source_isValid = ::OpenAPI::fromJsonValue(m_creation_source, json[QString("creation_source")]);
    m_creation_source_isSet = !json[QString("creation_source")].isNull() && m_creation_source_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("email_address")]);
    m_email_address_isSet = !json[QString("email_address")].isNull() && m_email_address_isValid;

    m_family_name_isValid = ::OpenAPI::fromJsonValue(m_family_name, json[QString("family_name")]);
    m_family_name_isSet = !json[QString("family_name")].isNull() && m_family_name_isValid;

    m_given_name_isValid = ::OpenAPI::fromJsonValue(m_given_name, json[QString("given_name")]);
    m_given_name_isSet = !json[QString("given_name")].isNull() && m_given_name_isValid;

    m_group_ids_isValid = ::OpenAPI::fromJsonValue(m_group_ids, json[QString("group_ids")]);
    m_group_ids_isSet = !json[QString("group_ids")].isNull() && m_group_ids_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phone_number")]);
    m_phone_number_isSet = !json[QString("phone_number")].isNull() && m_phone_number_isValid;

    m_preferences_isValid = ::OpenAPI::fromJsonValue(m_preferences, json[QString("preferences")]);
    m_preferences_isSet = !json[QString("preferences")].isNull() && m_preferences_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("reference_id")]);
    m_reference_id_isSet = !json[QString("reference_id")].isNull() && m_reference_id_isValid;

    m_segment_ids_isValid = ::OpenAPI::fromJsonValue(m_segment_ids, json[QString("segment_ids")]);
    m_segment_ids_isSet = !json[QString("segment_ids")].isNull() && m_segment_ids_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAICustomer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomer::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_birthday_isSet) {
        obj.insert(QString("birthday"), ::OpenAPI::toJsonValue(m_birthday));
    }
    if (m_cards.size() > 0) {
        obj.insert(QString("cards"), ::OpenAPI::toJsonValue(m_cards));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("company_name"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creation_source_isSet) {
        obj.insert(QString("creation_source"), ::OpenAPI::toJsonValue(m_creation_source));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("email_address"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_family_name_isSet) {
        obj.insert(QString("family_name"), ::OpenAPI::toJsonValue(m_family_name));
    }
    if (m_given_name_isSet) {
        obj.insert(QString("given_name"), ::OpenAPI::toJsonValue(m_given_name));
    }
    if (m_group_ids.size() > 0) {
        obj.insert(QString("group_ids"), ::OpenAPI::toJsonValue(m_group_ids));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phone_number"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_preferences.isSet()) {
        obj.insert(QString("preferences"), ::OpenAPI::toJsonValue(m_preferences));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("reference_id"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_segment_ids.size() > 0) {
        obj.insert(QString("segment_ids"), ::OpenAPI::toJsonValue(m_segment_ids));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIAddress OAICustomer::getAddress() const {
    return m_address;
}
void OAICustomer::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAICustomer::is_address_Set() const{
    return m_address_isSet;
}

bool OAICustomer::is_address_Valid() const{
    return m_address_isValid;
}

QString OAICustomer::getBirthday() const {
    return m_birthday;
}
void OAICustomer::setBirthday(const QString &birthday) {
    m_birthday = birthday;
    m_birthday_isSet = true;
}

bool OAICustomer::is_birthday_Set() const{
    return m_birthday_isSet;
}

bool OAICustomer::is_birthday_Valid() const{
    return m_birthday_isValid;
}

QList<OAICard> OAICustomer::getCards() const {
    return m_cards;
}
void OAICustomer::setCards(const QList<OAICard> &cards) {
    m_cards = cards;
    m_cards_isSet = true;
}

bool OAICustomer::is_cards_Set() const{
    return m_cards_isSet;
}

bool OAICustomer::is_cards_Valid() const{
    return m_cards_isValid;
}

QString OAICustomer::getCompanyName() const {
    return m_company_name;
}
void OAICustomer::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAICustomer::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAICustomer::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAICustomer::getCreatedAt() const {
    return m_created_at;
}
void OAICustomer::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICustomer::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICustomer::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICustomer::getCreationSource() const {
    return m_creation_source;
}
void OAICustomer::setCreationSource(const QString &creation_source) {
    m_creation_source = creation_source;
    m_creation_source_isSet = true;
}

bool OAICustomer::is_creation_source_Set() const{
    return m_creation_source_isSet;
}

bool OAICustomer::is_creation_source_Valid() const{
    return m_creation_source_isValid;
}

QString OAICustomer::getEmailAddress() const {
    return m_email_address;
}
void OAICustomer::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAICustomer::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAICustomer::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAICustomer::getFamilyName() const {
    return m_family_name;
}
void OAICustomer::setFamilyName(const QString &family_name) {
    m_family_name = family_name;
    m_family_name_isSet = true;
}

bool OAICustomer::is_family_name_Set() const{
    return m_family_name_isSet;
}

bool OAICustomer::is_family_name_Valid() const{
    return m_family_name_isValid;
}

QString OAICustomer::getGivenName() const {
    return m_given_name;
}
void OAICustomer::setGivenName(const QString &given_name) {
    m_given_name = given_name;
    m_given_name_isSet = true;
}

bool OAICustomer::is_given_name_Set() const{
    return m_given_name_isSet;
}

bool OAICustomer::is_given_name_Valid() const{
    return m_given_name_isValid;
}

QList<QString> OAICustomer::getGroupIds() const {
    return m_group_ids;
}
void OAICustomer::setGroupIds(const QList<QString> &group_ids) {
    m_group_ids = group_ids;
    m_group_ids_isSet = true;
}

bool OAICustomer::is_group_ids_Set() const{
    return m_group_ids_isSet;
}

bool OAICustomer::is_group_ids_Valid() const{
    return m_group_ids_isValid;
}

QString OAICustomer::getId() const {
    return m_id;
}
void OAICustomer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICustomer::is_id_Set() const{
    return m_id_isSet;
}

bool OAICustomer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICustomer::getNickname() const {
    return m_nickname;
}
void OAICustomer::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAICustomer::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAICustomer::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QString OAICustomer::getNote() const {
    return m_note;
}
void OAICustomer::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICustomer::is_note_Set() const{
    return m_note_isSet;
}

bool OAICustomer::is_note_Valid() const{
    return m_note_isValid;
}

QString OAICustomer::getPhoneNumber() const {
    return m_phone_number;
}
void OAICustomer::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAICustomer::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAICustomer::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

OAICustomerPreferences OAICustomer::getPreferences() const {
    return m_preferences;
}
void OAICustomer::setPreferences(const OAICustomerPreferences &preferences) {
    m_preferences = preferences;
    m_preferences_isSet = true;
}

bool OAICustomer::is_preferences_Set() const{
    return m_preferences_isSet;
}

bool OAICustomer::is_preferences_Valid() const{
    return m_preferences_isValid;
}

QString OAICustomer::getReferenceId() const {
    return m_reference_id;
}
void OAICustomer::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAICustomer::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAICustomer::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QList<QString> OAICustomer::getSegmentIds() const {
    return m_segment_ids;
}
void OAICustomer::setSegmentIds(const QList<QString> &segment_ids) {
    m_segment_ids = segment_ids;
    m_segment_ids_isSet = true;
}

bool OAICustomer::is_segment_ids_Set() const{
    return m_segment_ids_isSet;
}

bool OAICustomer::is_segment_ids_Valid() const{
    return m_segment_ids_isValid;
}

QString OAICustomer::getUpdatedAt() const {
    return m_updated_at;
}
void OAICustomer::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICustomer::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICustomer::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

qint64 OAICustomer::getVersion() const {
    return m_version;
}
void OAICustomer::setVersion(const qint64 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICustomer::is_version_Set() const{
    return m_version_isSet;
}

bool OAICustomer::is_version_Valid() const{
    return m_version_isValid;
}

bool OAICustomer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cards.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
