/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails() {
    this->initializeModel();
}

OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::~OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails() {}

void OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::initializeModel() {

    m_buyer_arrived_at_isSet = false;
    m_buyer_arrived_at_isValid = false;

    m_curbside_details_isSet = false;
    m_curbside_details_isValid = false;
}

void OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::fromJsonObject(QJsonObject json) {

    m_buyer_arrived_at_isValid = ::OpenAPI::fromJsonValue(m_buyer_arrived_at, json[QString("buyer_arrived_at")]);
    m_buyer_arrived_at_isSet = !json[QString("buyer_arrived_at")].isNull() && m_buyer_arrived_at_isValid;

    m_curbside_details_isValid = ::OpenAPI::fromJsonValue(m_curbside_details, json[QString("curbside_details")]);
    m_curbside_details_isSet = !json[QString("curbside_details")].isNull() && m_curbside_details_isValid;
}

QString OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_buyer_arrived_at_isSet) {
        obj.insert(QString("buyer_arrived_at"), ::OpenAPI::toJsonValue(m_buyer_arrived_at));
    }
    if (m_curbside_details_isSet) {
        obj.insert(QString("curbside_details"), ::OpenAPI::toJsonValue(m_curbside_details));
    }
    return obj;
}

QString OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::getBuyerArrivedAt() const {
    return m_buyer_arrived_at;
}
void OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::setBuyerArrivedAt(const QString &buyer_arrived_at) {
    m_buyer_arrived_at = buyer_arrived_at;
    m_buyer_arrived_at_isSet = true;
}

bool OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::is_buyer_arrived_at_Set() const{
    return m_buyer_arrived_at_isSet;
}

bool OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::is_buyer_arrived_at_Valid() const{
    return m_buyer_arrived_at_isValid;
}

QString OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::getCurbsideDetails() const {
    return m_curbside_details;
}
void OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::setCurbsideDetails(const QString &curbside_details) {
    m_curbside_details = curbside_details;
    m_curbside_details_isSet = true;
}

bool OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::is_curbside_details_Set() const{
    return m_curbside_details_isSet;
}

bool OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::is_curbside_details_Valid() const{
    return m_curbside_details_isValid;
}

bool OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buyer_arrived_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curbside_details_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderFulfillmentPickupDetailsCurbsidePickupDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
