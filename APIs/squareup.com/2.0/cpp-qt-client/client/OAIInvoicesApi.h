/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInvoicesApi_H
#define OAI_OAIInvoicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICancelInvoiceRequest.h"
#include "OAICancelInvoiceResponse.h"
#include "OAICreateInvoiceRequest.h"
#include "OAICreateInvoiceResponse.h"
#include "OAIDeleteInvoiceResponse.h"
#include "OAIGetInvoiceResponse.h"
#include "OAIListInvoicesResponse.h"
#include "OAIPublishInvoiceRequest.h"
#include "OAIPublishInvoiceResponse.h"
#include "OAISearchInvoicesRequest.h"
#include "OAISearchInvoicesResponse.h"
#include "OAIUpdateInvoiceRequest.h"
#include "OAIUpdateInvoiceResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInvoicesApi : public QObject {
    Q_OBJECT

public:
    OAIInvoicesApi(const int timeOut = 0);
    ~OAIInvoicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  invoice_id QString [required]
    * @param[in]  oai_cancel_invoice_request OAICancelInvoiceRequest [required]
    */
    virtual void cancelInvoice(const QString &invoice_id, const OAICancelInvoiceRequest &oai_cancel_invoice_request);

    /**
    * @param[in]  oai_create_invoice_request OAICreateInvoiceRequest [required]
    */
    virtual void createInvoice(const OAICreateInvoiceRequest &oai_create_invoice_request);

    /**
    * @param[in]  invoice_id QString [required]
    * @param[in]  version qint32 [optional]
    */
    virtual void deleteInvoice(const QString &invoice_id, const ::OpenAPI::OptionalParam<qint32> &version = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  invoice_id QString [required]
    */
    virtual void getInvoice(const QString &invoice_id);

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listInvoices(const QString &location_id, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  invoice_id QString [required]
    * @param[in]  oai_publish_invoice_request OAIPublishInvoiceRequest [required]
    */
    virtual void publishInvoice(const QString &invoice_id, const OAIPublishInvoiceRequest &oai_publish_invoice_request);

    /**
    * @param[in]  oai_search_invoices_request OAISearchInvoicesRequest [required]
    */
    virtual void searchInvoices(const OAISearchInvoicesRequest &oai_search_invoices_request);

    /**
    * @param[in]  invoice_id QString [required]
    * @param[in]  oai_update_invoice_request OAIUpdateInvoiceRequest [required]
    */
    virtual void updateInvoice(const QString &invoice_id, const OAIUpdateInvoiceRequest &oai_update_invoice_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelInvoiceCallback(OAIHttpRequestWorker *worker);
    void createInvoiceCallback(OAIHttpRequestWorker *worker);
    void deleteInvoiceCallback(OAIHttpRequestWorker *worker);
    void getInvoiceCallback(OAIHttpRequestWorker *worker);
    void listInvoicesCallback(OAIHttpRequestWorker *worker);
    void publishInvoiceCallback(OAIHttpRequestWorker *worker);
    void searchInvoicesCallback(OAIHttpRequestWorker *worker);
    void updateInvoiceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelInvoiceSignal(OAICancelInvoiceResponse summary);
    void createInvoiceSignal(OAICreateInvoiceResponse summary);
    void deleteInvoiceSignal(OAIDeleteInvoiceResponse summary);
    void getInvoiceSignal(OAIGetInvoiceResponse summary);
    void listInvoicesSignal(OAIListInvoicesResponse summary);
    void publishInvoiceSignal(OAIPublishInvoiceResponse summary);
    void searchInvoicesSignal(OAISearchInvoicesResponse summary);
    void updateInvoiceSignal(OAIUpdateInvoiceResponse summary);


    void cancelInvoiceSignalFull(OAIHttpRequestWorker *worker, OAICancelInvoiceResponse summary);
    void createInvoiceSignalFull(OAIHttpRequestWorker *worker, OAICreateInvoiceResponse summary);
    void deleteInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIDeleteInvoiceResponse summary);
    void getInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIGetInvoiceResponse summary);
    void listInvoicesSignalFull(OAIHttpRequestWorker *worker, OAIListInvoicesResponse summary);
    void publishInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIPublishInvoiceResponse summary);
    void searchInvoicesSignalFull(OAIHttpRequestWorker *worker, OAISearchInvoicesResponse summary);
    void updateInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIUpdateInvoiceResponse summary);

    Q_DECL_DEPRECATED_X("Use cancelInvoiceSignalError() instead")
    void cancelInvoiceSignalE(OAICancelInvoiceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelInvoiceSignalError(OAICancelInvoiceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvoiceSignalError() instead")
    void createInvoiceSignalE(OAICreateInvoiceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvoiceSignalError(OAICreateInvoiceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInvoiceSignalError() instead")
    void deleteInvoiceSignalE(OAIDeleteInvoiceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInvoiceSignalError(OAIDeleteInvoiceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceSignalError() instead")
    void getInvoiceSignalE(OAIGetInvoiceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceSignalError(OAIGetInvoiceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInvoicesSignalError() instead")
    void listInvoicesSignalE(OAIListInvoicesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listInvoicesSignalError(OAIListInvoicesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishInvoiceSignalError() instead")
    void publishInvoiceSignalE(OAIPublishInvoiceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publishInvoiceSignalError(OAIPublishInvoiceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchInvoicesSignalError() instead")
    void searchInvoicesSignalE(OAISearchInvoicesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchInvoicesSignalError(OAISearchInvoicesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInvoiceSignalError() instead")
    void updateInvoiceSignalE(OAIUpdateInvoiceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInvoiceSignalError(OAIUpdateInvoiceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelInvoiceSignalErrorFull() instead")
    void cancelInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvoiceSignalErrorFull() instead")
    void createInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInvoiceSignalErrorFull() instead")
    void deleteInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceSignalErrorFull() instead")
    void getInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInvoicesSignalErrorFull() instead")
    void listInvoicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listInvoicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishInvoiceSignalErrorFull() instead")
    void publishInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchInvoicesSignalErrorFull() instead")
    void searchInvoicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchInvoicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInvoiceSignalErrorFull() instead")
    void updateInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
