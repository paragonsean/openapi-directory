/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGiftCardsApi_H
#define OAI_OAIGiftCardsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateGiftCardRequest.h"
#include "OAICreateGiftCardResponse.h"
#include "OAILinkCustomerToGiftCardRequest.h"
#include "OAILinkCustomerToGiftCardResponse.h"
#include "OAIListGiftCardsResponse.h"
#include "OAIRetrieveGiftCardFromGANRequest.h"
#include "OAIRetrieveGiftCardFromGANResponse.h"
#include "OAIRetrieveGiftCardFromNonceRequest.h"
#include "OAIRetrieveGiftCardFromNonceResponse.h"
#include "OAIRetrieveGiftCardResponse.h"
#include "OAIUnlinkCustomerFromGiftCardRequest.h"
#include "OAIUnlinkCustomerFromGiftCardResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGiftCardsApi : public QObject {
    Q_OBJECT

public:
    OAIGiftCardsApi(const int timeOut = 0);
    ~OAIGiftCardsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_gift_card_request OAICreateGiftCardRequest [required]
    */
    virtual void createGiftCard(const OAICreateGiftCardRequest &oai_create_gift_card_request);

    /**
    * @param[in]  gift_card_id QString [required]
    * @param[in]  oai_link_customer_to_gift_card_request OAILinkCustomerToGiftCardRequest [required]
    */
    virtual void linkCustomerToGiftCard(const QString &gift_card_id, const OAILinkCustomerToGiftCardRequest &oai_link_customer_to_gift_card_request);

    /**
    * @param[in]  type QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  customer_id QString [optional]
    */
    virtual void listGiftCards(const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void retrieveGiftCard(const QString &id);

    /**
    * @param[in]  oai_retrieve_gift_card_from_gan_request OAIRetrieveGiftCardFromGANRequest [required]
    */
    virtual void retrieveGiftCardFromGAN(const OAIRetrieveGiftCardFromGANRequest &oai_retrieve_gift_card_from_gan_request);

    /**
    * @param[in]  oai_retrieve_gift_card_from_nonce_request OAIRetrieveGiftCardFromNonceRequest [required]
    */
    virtual void retrieveGiftCardFromNonce(const OAIRetrieveGiftCardFromNonceRequest &oai_retrieve_gift_card_from_nonce_request);

    /**
    * @param[in]  gift_card_id QString [required]
    * @param[in]  oai_unlink_customer_from_gift_card_request OAIUnlinkCustomerFromGiftCardRequest [required]
    */
    virtual void unlinkCustomerFromGiftCard(const QString &gift_card_id, const OAIUnlinkCustomerFromGiftCardRequest &oai_unlink_customer_from_gift_card_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createGiftCardCallback(OAIHttpRequestWorker *worker);
    void linkCustomerToGiftCardCallback(OAIHttpRequestWorker *worker);
    void listGiftCardsCallback(OAIHttpRequestWorker *worker);
    void retrieveGiftCardCallback(OAIHttpRequestWorker *worker);
    void retrieveGiftCardFromGANCallback(OAIHttpRequestWorker *worker);
    void retrieveGiftCardFromNonceCallback(OAIHttpRequestWorker *worker);
    void unlinkCustomerFromGiftCardCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createGiftCardSignal(OAICreateGiftCardResponse summary);
    void linkCustomerToGiftCardSignal(OAILinkCustomerToGiftCardResponse summary);
    void listGiftCardsSignal(OAIListGiftCardsResponse summary);
    void retrieveGiftCardSignal(OAIRetrieveGiftCardResponse summary);
    void retrieveGiftCardFromGANSignal(OAIRetrieveGiftCardFromGANResponse summary);
    void retrieveGiftCardFromNonceSignal(OAIRetrieveGiftCardFromNonceResponse summary);
    void unlinkCustomerFromGiftCardSignal(OAIUnlinkCustomerFromGiftCardResponse summary);


    void createGiftCardSignalFull(OAIHttpRequestWorker *worker, OAICreateGiftCardResponse summary);
    void linkCustomerToGiftCardSignalFull(OAIHttpRequestWorker *worker, OAILinkCustomerToGiftCardResponse summary);
    void listGiftCardsSignalFull(OAIHttpRequestWorker *worker, OAIListGiftCardsResponse summary);
    void retrieveGiftCardSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveGiftCardResponse summary);
    void retrieveGiftCardFromGANSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveGiftCardFromGANResponse summary);
    void retrieveGiftCardFromNonceSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveGiftCardFromNonceResponse summary);
    void unlinkCustomerFromGiftCardSignalFull(OAIHttpRequestWorker *worker, OAIUnlinkCustomerFromGiftCardResponse summary);

    Q_DECL_DEPRECATED_X("Use createGiftCardSignalError() instead")
    void createGiftCardSignalE(OAICreateGiftCardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGiftCardSignalError(OAICreateGiftCardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkCustomerToGiftCardSignalError() instead")
    void linkCustomerToGiftCardSignalE(OAILinkCustomerToGiftCardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void linkCustomerToGiftCardSignalError(OAILinkCustomerToGiftCardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGiftCardsSignalError() instead")
    void listGiftCardsSignalE(OAIListGiftCardsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listGiftCardsSignalError(OAIListGiftCardsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveGiftCardSignalError() instead")
    void retrieveGiftCardSignalE(OAIRetrieveGiftCardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveGiftCardSignalError(OAIRetrieveGiftCardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveGiftCardFromGANSignalError() instead")
    void retrieveGiftCardFromGANSignalE(OAIRetrieveGiftCardFromGANResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveGiftCardFromGANSignalError(OAIRetrieveGiftCardFromGANResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveGiftCardFromNonceSignalError() instead")
    void retrieveGiftCardFromNonceSignalE(OAIRetrieveGiftCardFromNonceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveGiftCardFromNonceSignalError(OAIRetrieveGiftCardFromNonceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlinkCustomerFromGiftCardSignalError() instead")
    void unlinkCustomerFromGiftCardSignalE(OAIUnlinkCustomerFromGiftCardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unlinkCustomerFromGiftCardSignalError(OAIUnlinkCustomerFromGiftCardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createGiftCardSignalErrorFull() instead")
    void createGiftCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGiftCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkCustomerToGiftCardSignalErrorFull() instead")
    void linkCustomerToGiftCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkCustomerToGiftCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGiftCardsSignalErrorFull() instead")
    void listGiftCardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGiftCardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveGiftCardSignalErrorFull() instead")
    void retrieveGiftCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveGiftCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveGiftCardFromGANSignalErrorFull() instead")
    void retrieveGiftCardFromGANSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveGiftCardFromGANSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveGiftCardFromNonceSignalErrorFull() instead")
    void retrieveGiftCardFromNonceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveGiftCardFromNonceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlinkCustomerFromGiftCardSignalErrorFull() instead")
    void unlinkCustomerFromGiftCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unlinkCustomerFromGiftCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
