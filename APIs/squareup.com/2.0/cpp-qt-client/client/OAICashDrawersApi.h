/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICashDrawersApi_H
#define OAI_OAICashDrawersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListCashDrawerShiftEventsResponse.h"
#include "OAIListCashDrawerShiftsResponse.h"
#include "OAIRetrieveCashDrawerShiftResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICashDrawersApi : public QObject {
    Q_OBJECT

public:
    OAICashDrawersApi(const int timeOut = 0);
    ~OAICashDrawersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  shift_id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void listCashDrawerShiftEvents(const QString &location_id, const QString &shift_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  sort_order QString [optional]
    * @param[in]  begin_time QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void listCashDrawerShifts(const QString &location_id, const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &begin_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  shift_id QString [required]
    */
    virtual void retrieveCashDrawerShift(const QString &location_id, const QString &shift_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void listCashDrawerShiftEventsCallback(OAIHttpRequestWorker *worker);
    void listCashDrawerShiftsCallback(OAIHttpRequestWorker *worker);
    void retrieveCashDrawerShiftCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void listCashDrawerShiftEventsSignal(OAIListCashDrawerShiftEventsResponse summary);
    void listCashDrawerShiftsSignal(OAIListCashDrawerShiftsResponse summary);
    void retrieveCashDrawerShiftSignal(OAIRetrieveCashDrawerShiftResponse summary);


    void listCashDrawerShiftEventsSignalFull(OAIHttpRequestWorker *worker, OAIListCashDrawerShiftEventsResponse summary);
    void listCashDrawerShiftsSignalFull(OAIHttpRequestWorker *worker, OAIListCashDrawerShiftsResponse summary);
    void retrieveCashDrawerShiftSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveCashDrawerShiftResponse summary);

    Q_DECL_DEPRECATED_X("Use listCashDrawerShiftEventsSignalError() instead")
    void listCashDrawerShiftEventsSignalE(OAIListCashDrawerShiftEventsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCashDrawerShiftEventsSignalError(OAIListCashDrawerShiftEventsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCashDrawerShiftsSignalError() instead")
    void listCashDrawerShiftsSignalE(OAIListCashDrawerShiftsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCashDrawerShiftsSignalError(OAIListCashDrawerShiftsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveCashDrawerShiftSignalError() instead")
    void retrieveCashDrawerShiftSignalE(OAIRetrieveCashDrawerShiftResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveCashDrawerShiftSignalError(OAIRetrieveCashDrawerShiftResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use listCashDrawerShiftEventsSignalErrorFull() instead")
    void listCashDrawerShiftEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCashDrawerShiftEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCashDrawerShiftsSignalErrorFull() instead")
    void listCashDrawerShiftsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCashDrawerShiftsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveCashDrawerShiftSignalErrorFull() instead")
    void retrieveCashDrawerShiftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveCashDrawerShiftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
