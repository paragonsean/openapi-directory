/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderQuantityUnit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderQuantityUnit::OAIOrderQuantityUnit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderQuantityUnit::OAIOrderQuantityUnit() {
    this->initializeModel();
}

OAIOrderQuantityUnit::~OAIOrderQuantityUnit() {}

void OAIOrderQuantityUnit::initializeModel() {

    m_catalog_version_isSet = false;
    m_catalog_version_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_precision_isSet = false;
    m_precision_isValid = false;
}

void OAIOrderQuantityUnit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderQuantityUnit::fromJsonObject(QJsonObject json) {

    m_catalog_version_isValid = ::OpenAPI::fromJsonValue(m_catalog_version, json[QString("catalog_version")]);
    m_catalog_version_isSet = !json[QString("catalog_version")].isNull() && m_catalog_version_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurement_unit")]);
    m_measurement_unit_isSet = !json[QString("measurement_unit")].isNull() && m_measurement_unit_isValid;

    m_precision_isValid = ::OpenAPI::fromJsonValue(m_precision, json[QString("precision")]);
    m_precision_isSet = !json[QString("precision")].isNull() && m_precision_isValid;
}

QString OAIOrderQuantityUnit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderQuantityUnit::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_version_isSet) {
        obj.insert(QString("catalog_version"), ::OpenAPI::toJsonValue(m_catalog_version));
    }
    if (m_measurement_unit.isSet()) {
        obj.insert(QString("measurement_unit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_precision_isSet) {
        obj.insert(QString("precision"), ::OpenAPI::toJsonValue(m_precision));
    }
    return obj;
}

qint64 OAIOrderQuantityUnit::getCatalogVersion() const {
    return m_catalog_version;
}
void OAIOrderQuantityUnit::setCatalogVersion(const qint64 &catalog_version) {
    m_catalog_version = catalog_version;
    m_catalog_version_isSet = true;
}

bool OAIOrderQuantityUnit::is_catalog_version_Set() const{
    return m_catalog_version_isSet;
}

bool OAIOrderQuantityUnit::is_catalog_version_Valid() const{
    return m_catalog_version_isValid;
}

OAIMeasurementUnit OAIOrderQuantityUnit::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAIOrderQuantityUnit::setMeasurementUnit(const OAIMeasurementUnit &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAIOrderQuantityUnit::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAIOrderQuantityUnit::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

qint32 OAIOrderQuantityUnit::getPrecision() const {
    return m_precision;
}
void OAIOrderQuantityUnit::setPrecision(const qint32 &precision) {
    m_precision = precision;
    m_precision_isSet = true;
}

bool OAIOrderQuantityUnit::is_precision_Set() const{
    return m_precision_isSet;
}

bool OAIOrderQuantityUnit::is_precision_Valid() const{
    return m_precision_isValid;
}

bool OAIOrderQuantityUnit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderQuantityUnit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
