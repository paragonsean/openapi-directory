/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationType::OAILocationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationType::OAILocationType() {
    this->initializeModel();
}

OAILocationType::~OAILocationType() {}

void OAILocationType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILocationType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILocationType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PHYSICAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocationType::PHYSICAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MOBILE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocationType::MOBILE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILocationType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILocationType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILocationType::PHYSICAL:
            val = "PHYSICAL";
            break;
        case eOAILocationType::MOBILE:
            val = "MOBILE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILocationType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILocationType::eOAILocationType OAILocationType::getValue() const {
    return m_value;
}

void OAILocationType::setValue(const OAILocationType::eOAILocationType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILocationType::isSet() const {
    
    return m_value_isSet;
}

bool OAILocationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
