/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAddress.h
 *
 * Represents a postal address in a country. The address format is based  on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,  see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).  This format has dedicated fields for four address components: postal code,  locality (city), administrative district (state, prefecture, or province), and  sublocality (town or village). These components have dedicated fields in the  &#x60;Address&#x60; object because software sometimes behaves differently based on them.  For example, sales tax software may charge different amounts of sales tax  based on the postal code, and some software is only available in  certain states due to compliance reasons.  For the remaining address components, the &#x60;Address&#x60; type provides the  &#x60;address_line_1&#x60; and &#x60;address_line_2&#x60; fields for free-form data entry.  These fields are free-form because the remaining address components have  too many variations around the world and typical software does not parse  these components. These fields enable users to enter anything they want.   Note that, in the current implementation, all other &#x60;Address&#x60; type fields are blank.  These include &#x60;address_line_3&#x60;, &#x60;sublocality_2&#x60;, &#x60;sublocality_3&#x60;,  &#x60;administrative_district_level_2&#x60;, &#x60;administrative_district_level_3&#x60;,  &#x60;first_name&#x60;, &#x60;last_name&#x60;, and &#x60;organization&#x60;.   When it comes to localization, the seller&#39;s language preferences  (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))  are ignored for addresses. Even though Square products (such as Square Point of Sale  and the Seller Dashboard) mostly use a seller&#39;s language preference in  communication, when it comes to addresses, they will use English for a US address,  Japanese for an address in Japan, and so on.
 */

#ifndef OAIAddress_H
#define OAIAddress_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAddress : public OAIObject {
public:
    OAIAddress();
    OAIAddress(QString json);
    ~OAIAddress() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAddressLine1() const;
    void setAddressLine1(const QString &address_line_1);
    bool is_address_line_1_Set() const;
    bool is_address_line_1_Valid() const;

    QString getAddressLine2() const;
    void setAddressLine2(const QString &address_line_2);
    bool is_address_line_2_Set() const;
    bool is_address_line_2_Valid() const;

    QString getAddressLine3() const;
    void setAddressLine3(const QString &address_line_3);
    bool is_address_line_3_Set() const;
    bool is_address_line_3_Valid() const;

    QString getAdministrativeDistrictLevel1() const;
    void setAdministrativeDistrictLevel1(const QString &administrative_district_level_1);
    bool is_administrative_district_level_1_Set() const;
    bool is_administrative_district_level_1_Valid() const;

    QString getAdministrativeDistrictLevel2() const;
    void setAdministrativeDistrictLevel2(const QString &administrative_district_level_2);
    bool is_administrative_district_level_2_Set() const;
    bool is_administrative_district_level_2_Valid() const;

    QString getAdministrativeDistrictLevel3() const;
    void setAdministrativeDistrictLevel3(const QString &administrative_district_level_3);
    bool is_administrative_district_level_3_Set() const;
    bool is_administrative_district_level_3_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QString getFirstName() const;
    void setFirstName(const QString &first_name);
    bool is_first_name_Set() const;
    bool is_first_name_Valid() const;

    QString getLastName() const;
    void setLastName(const QString &last_name);
    bool is_last_name_Set() const;
    bool is_last_name_Valid() const;

    QString getLocality() const;
    void setLocality(const QString &locality);
    bool is_locality_Set() const;
    bool is_locality_Valid() const;

    QString getOrganization() const;
    void setOrganization(const QString &organization);
    bool is_organization_Set() const;
    bool is_organization_Valid() const;

    QString getPostalCode() const;
    void setPostalCode(const QString &postal_code);
    bool is_postal_code_Set() const;
    bool is_postal_code_Valid() const;

    QString getSublocality() const;
    void setSublocality(const QString &sublocality);
    bool is_sublocality_Set() const;
    bool is_sublocality_Valid() const;

    QString getSublocality2() const;
    void setSublocality2(const QString &sublocality_2);
    bool is_sublocality_2_Set() const;
    bool is_sublocality_2_Valid() const;

    QString getSublocality3() const;
    void setSublocality3(const QString &sublocality_3);
    bool is_sublocality_3_Set() const;
    bool is_sublocality_3_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_address_line_1;
    bool m_address_line_1_isSet;
    bool m_address_line_1_isValid;

    QString m_address_line_2;
    bool m_address_line_2_isSet;
    bool m_address_line_2_isValid;

    QString m_address_line_3;
    bool m_address_line_3_isSet;
    bool m_address_line_3_isValid;

    QString m_administrative_district_level_1;
    bool m_administrative_district_level_1_isSet;
    bool m_administrative_district_level_1_isValid;

    QString m_administrative_district_level_2;
    bool m_administrative_district_level_2_isSet;
    bool m_administrative_district_level_2_isValid;

    QString m_administrative_district_level_3;
    bool m_administrative_district_level_3_isSet;
    bool m_administrative_district_level_3_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QString m_first_name;
    bool m_first_name_isSet;
    bool m_first_name_isValid;

    QString m_last_name;
    bool m_last_name_isSet;
    bool m_last_name_isValid;

    QString m_locality;
    bool m_locality_isSet;
    bool m_locality_isValid;

    QString m_organization;
    bool m_organization_isSet;
    bool m_organization_isValid;

    QString m_postal_code;
    bool m_postal_code_isSet;
    bool m_postal_code_isValid;

    QString m_sublocality;
    bool m_sublocality_isSet;
    bool m_sublocality_isValid;

    QString m_sublocality_2;
    bool m_sublocality_2_isSet;
    bool m_sublocality_2_isValid;

    QString m_sublocality_3;
    bool m_sublocality_3_isSet;
    bool m_sublocality_3_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAddress)

#endif // OAIAddress_H
