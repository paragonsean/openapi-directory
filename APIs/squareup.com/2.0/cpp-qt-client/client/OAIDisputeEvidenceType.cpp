/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisputeEvidenceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisputeEvidenceType::OAIDisputeEvidenceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisputeEvidenceType::OAIDisputeEvidenceType() {
    this->initializeModel();
}

OAIDisputeEvidenceType::~OAIDisputeEvidenceType() {}

void OAIDisputeEvidenceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDisputeEvidenceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDisputeEvidenceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("GENERIC_EVIDENCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeEvidenceType::GENERIC_EVIDENCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ONLINE_OR_APP_ACCESS_LOG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeEvidenceType::ONLINE_OR_APP_ACCESS_LOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUTHORIZATION_DOCUMENTATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeEvidenceType::AUTHORIZATION_DOCUMENTATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLATION_OR_REFUND_DOCUMENTATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeEvidenceType::CANCELLATION_OR_REFUND_DOCUMENTATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CARDHOLDER_COMMUNICATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeEvidenceType::CARDHOLDER_COMMUNICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CARDHOLDER_INFORMATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeEvidenceType::CARDHOLDER_INFORMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PURCHASE_ACKNOWLEDGEMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeEvidenceType::PURCHASE_ACKNOWLEDGEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DUPLICATE_CHARGE_DOCUMENTATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeEvidenceType::DUPLICATE_CHARGE_DOCUMENTATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PRODUCT_OR_SERVICE_DESCRIPTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeEvidenceType::PRODUCT_OR_SERVICE_DESCRIPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RECEIPT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeEvidenceType::RECEIPT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SERVICE_RECEIVED_DOCUMENTATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeEvidenceType::SERVICE_RECEIVED_DOCUMENTATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROOF_OF_DELIVERY_DOCUMENTATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeEvidenceType::PROOF_OF_DELIVERY_DOCUMENTATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RELATED_TRANSACTION_DOCUMENTATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeEvidenceType::RELATED_TRANSACTION_DOCUMENTATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REBUTTAL_EXPLANATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeEvidenceType::REBUTTAL_EXPLANATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRACKING_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeEvidenceType::TRACKING_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDisputeEvidenceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDisputeEvidenceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDisputeEvidenceType::GENERIC_EVIDENCE:
            val = "GENERIC_EVIDENCE";
            break;
        case eOAIDisputeEvidenceType::ONLINE_OR_APP_ACCESS_LOG:
            val = "ONLINE_OR_APP_ACCESS_LOG";
            break;
        case eOAIDisputeEvidenceType::AUTHORIZATION_DOCUMENTATION:
            val = "AUTHORIZATION_DOCUMENTATION";
            break;
        case eOAIDisputeEvidenceType::CANCELLATION_OR_REFUND_DOCUMENTATION:
            val = "CANCELLATION_OR_REFUND_DOCUMENTATION";
            break;
        case eOAIDisputeEvidenceType::CARDHOLDER_COMMUNICATION:
            val = "CARDHOLDER_COMMUNICATION";
            break;
        case eOAIDisputeEvidenceType::CARDHOLDER_INFORMATION:
            val = "CARDHOLDER_INFORMATION";
            break;
        case eOAIDisputeEvidenceType::PURCHASE_ACKNOWLEDGEMENT:
            val = "PURCHASE_ACKNOWLEDGEMENT";
            break;
        case eOAIDisputeEvidenceType::DUPLICATE_CHARGE_DOCUMENTATION:
            val = "DUPLICATE_CHARGE_DOCUMENTATION";
            break;
        case eOAIDisputeEvidenceType::PRODUCT_OR_SERVICE_DESCRIPTION:
            val = "PRODUCT_OR_SERVICE_DESCRIPTION";
            break;
        case eOAIDisputeEvidenceType::RECEIPT:
            val = "RECEIPT";
            break;
        case eOAIDisputeEvidenceType::SERVICE_RECEIVED_DOCUMENTATION:
            val = "SERVICE_RECEIVED_DOCUMENTATION";
            break;
        case eOAIDisputeEvidenceType::PROOF_OF_DELIVERY_DOCUMENTATION:
            val = "PROOF_OF_DELIVERY_DOCUMENTATION";
            break;
        case eOAIDisputeEvidenceType::RELATED_TRANSACTION_DOCUMENTATION:
            val = "RELATED_TRANSACTION_DOCUMENTATION";
            break;
        case eOAIDisputeEvidenceType::REBUTTAL_EXPLANATION:
            val = "REBUTTAL_EXPLANATION";
            break;
        case eOAIDisputeEvidenceType::TRACKING_NUMBER:
            val = "TRACKING_NUMBER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDisputeEvidenceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDisputeEvidenceType::eOAIDisputeEvidenceType OAIDisputeEvidenceType::getValue() const {
    return m_value;
}

void OAIDisputeEvidenceType::setValue(const OAIDisputeEvidenceType::eOAIDisputeEvidenceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDisputeEvidenceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDisputeEvidenceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
