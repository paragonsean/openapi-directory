/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1Payment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV1Payment::OAIV1Payment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV1Payment::OAIV1Payment() {
    this->initializeModel();
}

OAIV1Payment::~OAIV1Payment() {}

void OAIV1Payment::initializeModel() {

    m_additive_tax_isSet = false;
    m_additive_tax_isValid = false;

    m_additive_tax_money_isSet = false;
    m_additive_tax_money_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creator_id_isSet = false;
    m_creator_id_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_discount_money_isSet = false;
    m_discount_money_isValid = false;

    m_gross_sales_money_isSet = false;
    m_gross_sales_money_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inclusive_tax_isSet = false;
    m_inclusive_tax_isValid = false;

    m_inclusive_tax_money_isSet = false;
    m_inclusive_tax_money_isValid = false;

    m_is_partial_isSet = false;
    m_is_partial_isValid = false;

    m_itemizations_isSet = false;
    m_itemizations_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_net_sales_money_isSet = false;
    m_net_sales_money_isValid = false;

    m_net_total_money_isSet = false;
    m_net_total_money_isValid = false;

    m_payment_url_isSet = false;
    m_payment_url_isValid = false;

    m_processing_fee_money_isSet = false;
    m_processing_fee_money_isValid = false;

    m_receipt_url_isSet = false;
    m_receipt_url_isValid = false;

    m_refunded_money_isSet = false;
    m_refunded_money_isValid = false;

    m_refunds_isSet = false;
    m_refunds_isValid = false;

    m_surcharge_money_isSet = false;
    m_surcharge_money_isValid = false;

    m_surcharges_isSet = false;
    m_surcharges_isValid = false;

    m_swedish_rounding_money_isSet = false;
    m_swedish_rounding_money_isValid = false;

    m_tax_money_isSet = false;
    m_tax_money_isValid = false;

    m_tender_isSet = false;
    m_tender_isValid = false;

    m_tip_money_isSet = false;
    m_tip_money_isValid = false;

    m_total_collected_money_isSet = false;
    m_total_collected_money_isValid = false;
}

void OAIV1Payment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV1Payment::fromJsonObject(QJsonObject json) {

    m_additive_tax_isValid = ::OpenAPI::fromJsonValue(m_additive_tax, json[QString("additive_tax")]);
    m_additive_tax_isSet = !json[QString("additive_tax")].isNull() && m_additive_tax_isValid;

    m_additive_tax_money_isValid = ::OpenAPI::fromJsonValue(m_additive_tax_money, json[QString("additive_tax_money")]);
    m_additive_tax_money_isSet = !json[QString("additive_tax_money")].isNull() && m_additive_tax_money_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_creator_id_isValid = ::OpenAPI::fromJsonValue(m_creator_id, json[QString("creator_id")]);
    m_creator_id_isSet = !json[QString("creator_id")].isNull() && m_creator_id_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_discount_money_isValid = ::OpenAPI::fromJsonValue(m_discount_money, json[QString("discount_money")]);
    m_discount_money_isSet = !json[QString("discount_money")].isNull() && m_discount_money_isValid;

    m_gross_sales_money_isValid = ::OpenAPI::fromJsonValue(m_gross_sales_money, json[QString("gross_sales_money")]);
    m_gross_sales_money_isSet = !json[QString("gross_sales_money")].isNull() && m_gross_sales_money_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inclusive_tax_isValid = ::OpenAPI::fromJsonValue(m_inclusive_tax, json[QString("inclusive_tax")]);
    m_inclusive_tax_isSet = !json[QString("inclusive_tax")].isNull() && m_inclusive_tax_isValid;

    m_inclusive_tax_money_isValid = ::OpenAPI::fromJsonValue(m_inclusive_tax_money, json[QString("inclusive_tax_money")]);
    m_inclusive_tax_money_isSet = !json[QString("inclusive_tax_money")].isNull() && m_inclusive_tax_money_isValid;

    m_is_partial_isValid = ::OpenAPI::fromJsonValue(m_is_partial, json[QString("is_partial")]);
    m_is_partial_isSet = !json[QString("is_partial")].isNull() && m_is_partial_isValid;

    m_itemizations_isValid = ::OpenAPI::fromJsonValue(m_itemizations, json[QString("itemizations")]);
    m_itemizations_isSet = !json[QString("itemizations")].isNull() && m_itemizations_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("merchant_id")]);
    m_merchant_id_isSet = !json[QString("merchant_id")].isNull() && m_merchant_id_isValid;

    m_net_sales_money_isValid = ::OpenAPI::fromJsonValue(m_net_sales_money, json[QString("net_sales_money")]);
    m_net_sales_money_isSet = !json[QString("net_sales_money")].isNull() && m_net_sales_money_isValid;

    m_net_total_money_isValid = ::OpenAPI::fromJsonValue(m_net_total_money, json[QString("net_total_money")]);
    m_net_total_money_isSet = !json[QString("net_total_money")].isNull() && m_net_total_money_isValid;

    m_payment_url_isValid = ::OpenAPI::fromJsonValue(m_payment_url, json[QString("payment_url")]);
    m_payment_url_isSet = !json[QString("payment_url")].isNull() && m_payment_url_isValid;

    m_processing_fee_money_isValid = ::OpenAPI::fromJsonValue(m_processing_fee_money, json[QString("processing_fee_money")]);
    m_processing_fee_money_isSet = !json[QString("processing_fee_money")].isNull() && m_processing_fee_money_isValid;

    m_receipt_url_isValid = ::OpenAPI::fromJsonValue(m_receipt_url, json[QString("receipt_url")]);
    m_receipt_url_isSet = !json[QString("receipt_url")].isNull() && m_receipt_url_isValid;

    m_refunded_money_isValid = ::OpenAPI::fromJsonValue(m_refunded_money, json[QString("refunded_money")]);
    m_refunded_money_isSet = !json[QString("refunded_money")].isNull() && m_refunded_money_isValid;

    m_refunds_isValid = ::OpenAPI::fromJsonValue(m_refunds, json[QString("refunds")]);
    m_refunds_isSet = !json[QString("refunds")].isNull() && m_refunds_isValid;

    m_surcharge_money_isValid = ::OpenAPI::fromJsonValue(m_surcharge_money, json[QString("surcharge_money")]);
    m_surcharge_money_isSet = !json[QString("surcharge_money")].isNull() && m_surcharge_money_isValid;

    m_surcharges_isValid = ::OpenAPI::fromJsonValue(m_surcharges, json[QString("surcharges")]);
    m_surcharges_isSet = !json[QString("surcharges")].isNull() && m_surcharges_isValid;

    m_swedish_rounding_money_isValid = ::OpenAPI::fromJsonValue(m_swedish_rounding_money, json[QString("swedish_rounding_money")]);
    m_swedish_rounding_money_isSet = !json[QString("swedish_rounding_money")].isNull() && m_swedish_rounding_money_isValid;

    m_tax_money_isValid = ::OpenAPI::fromJsonValue(m_tax_money, json[QString("tax_money")]);
    m_tax_money_isSet = !json[QString("tax_money")].isNull() && m_tax_money_isValid;

    m_tender_isValid = ::OpenAPI::fromJsonValue(m_tender, json[QString("tender")]);
    m_tender_isSet = !json[QString("tender")].isNull() && m_tender_isValid;

    m_tip_money_isValid = ::OpenAPI::fromJsonValue(m_tip_money, json[QString("tip_money")]);
    m_tip_money_isSet = !json[QString("tip_money")].isNull() && m_tip_money_isValid;

    m_total_collected_money_isValid = ::OpenAPI::fromJsonValue(m_total_collected_money, json[QString("total_collected_money")]);
    m_total_collected_money_isSet = !json[QString("total_collected_money")].isNull() && m_total_collected_money_isValid;
}

QString OAIV1Payment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV1Payment::asJsonObject() const {
    QJsonObject obj;
    if (m_additive_tax.size() > 0) {
        obj.insert(QString("additive_tax"), ::OpenAPI::toJsonValue(m_additive_tax));
    }
    if (m_additive_tax_money.isSet()) {
        obj.insert(QString("additive_tax_money"), ::OpenAPI::toJsonValue(m_additive_tax_money));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creator_id_isSet) {
        obj.insert(QString("creator_id"), ::OpenAPI::toJsonValue(m_creator_id));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_discount_money.isSet()) {
        obj.insert(QString("discount_money"), ::OpenAPI::toJsonValue(m_discount_money));
    }
    if (m_gross_sales_money.isSet()) {
        obj.insert(QString("gross_sales_money"), ::OpenAPI::toJsonValue(m_gross_sales_money));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inclusive_tax.size() > 0) {
        obj.insert(QString("inclusive_tax"), ::OpenAPI::toJsonValue(m_inclusive_tax));
    }
    if (m_inclusive_tax_money.isSet()) {
        obj.insert(QString("inclusive_tax_money"), ::OpenAPI::toJsonValue(m_inclusive_tax_money));
    }
    if (m_is_partial_isSet) {
        obj.insert(QString("is_partial"), ::OpenAPI::toJsonValue(m_is_partial));
    }
    if (m_itemizations.size() > 0) {
        obj.insert(QString("itemizations"), ::OpenAPI::toJsonValue(m_itemizations));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("merchant_id"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_net_sales_money.isSet()) {
        obj.insert(QString("net_sales_money"), ::OpenAPI::toJsonValue(m_net_sales_money));
    }
    if (m_net_total_money.isSet()) {
        obj.insert(QString("net_total_money"), ::OpenAPI::toJsonValue(m_net_total_money));
    }
    if (m_payment_url_isSet) {
        obj.insert(QString("payment_url"), ::OpenAPI::toJsonValue(m_payment_url));
    }
    if (m_processing_fee_money.isSet()) {
        obj.insert(QString("processing_fee_money"), ::OpenAPI::toJsonValue(m_processing_fee_money));
    }
    if (m_receipt_url_isSet) {
        obj.insert(QString("receipt_url"), ::OpenAPI::toJsonValue(m_receipt_url));
    }
    if (m_refunded_money.isSet()) {
        obj.insert(QString("refunded_money"), ::OpenAPI::toJsonValue(m_refunded_money));
    }
    if (m_refunds.size() > 0) {
        obj.insert(QString("refunds"), ::OpenAPI::toJsonValue(m_refunds));
    }
    if (m_surcharge_money.isSet()) {
        obj.insert(QString("surcharge_money"), ::OpenAPI::toJsonValue(m_surcharge_money));
    }
    if (m_surcharges.size() > 0) {
        obj.insert(QString("surcharges"), ::OpenAPI::toJsonValue(m_surcharges));
    }
    if (m_swedish_rounding_money.isSet()) {
        obj.insert(QString("swedish_rounding_money"), ::OpenAPI::toJsonValue(m_swedish_rounding_money));
    }
    if (m_tax_money.isSet()) {
        obj.insert(QString("tax_money"), ::OpenAPI::toJsonValue(m_tax_money));
    }
    if (m_tender.size() > 0) {
        obj.insert(QString("tender"), ::OpenAPI::toJsonValue(m_tender));
    }
    if (m_tip_money.isSet()) {
        obj.insert(QString("tip_money"), ::OpenAPI::toJsonValue(m_tip_money));
    }
    if (m_total_collected_money.isSet()) {
        obj.insert(QString("total_collected_money"), ::OpenAPI::toJsonValue(m_total_collected_money));
    }
    return obj;
}

QList<OAIV1PaymentTax> OAIV1Payment::getAdditiveTax() const {
    return m_additive_tax;
}
void OAIV1Payment::setAdditiveTax(const QList<OAIV1PaymentTax> &additive_tax) {
    m_additive_tax = additive_tax;
    m_additive_tax_isSet = true;
}

bool OAIV1Payment::is_additive_tax_Set() const{
    return m_additive_tax_isSet;
}

bool OAIV1Payment::is_additive_tax_Valid() const{
    return m_additive_tax_isValid;
}

OAIV1Money OAIV1Payment::getAdditiveTaxMoney() const {
    return m_additive_tax_money;
}
void OAIV1Payment::setAdditiveTaxMoney(const OAIV1Money &additive_tax_money) {
    m_additive_tax_money = additive_tax_money;
    m_additive_tax_money_isSet = true;
}

bool OAIV1Payment::is_additive_tax_money_Set() const{
    return m_additive_tax_money_isSet;
}

bool OAIV1Payment::is_additive_tax_money_Valid() const{
    return m_additive_tax_money_isValid;
}

QString OAIV1Payment::getCreatedAt() const {
    return m_created_at;
}
void OAIV1Payment::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIV1Payment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIV1Payment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIV1Payment::getCreatorId() const {
    return m_creator_id;
}
void OAIV1Payment::setCreatorId(const QString &creator_id) {
    m_creator_id = creator_id;
    m_creator_id_isSet = true;
}

bool OAIV1Payment::is_creator_id_Set() const{
    return m_creator_id_isSet;
}

bool OAIV1Payment::is_creator_id_Valid() const{
    return m_creator_id_isValid;
}

OAIDevice OAIV1Payment::getDevice() const {
    return m_device;
}
void OAIV1Payment::setDevice(const OAIDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIV1Payment::is_device_Set() const{
    return m_device_isSet;
}

bool OAIV1Payment::is_device_Valid() const{
    return m_device_isValid;
}

OAIV1Money OAIV1Payment::getDiscountMoney() const {
    return m_discount_money;
}
void OAIV1Payment::setDiscountMoney(const OAIV1Money &discount_money) {
    m_discount_money = discount_money;
    m_discount_money_isSet = true;
}

bool OAIV1Payment::is_discount_money_Set() const{
    return m_discount_money_isSet;
}

bool OAIV1Payment::is_discount_money_Valid() const{
    return m_discount_money_isValid;
}

OAIV1Money OAIV1Payment::getGrossSalesMoney() const {
    return m_gross_sales_money;
}
void OAIV1Payment::setGrossSalesMoney(const OAIV1Money &gross_sales_money) {
    m_gross_sales_money = gross_sales_money;
    m_gross_sales_money_isSet = true;
}

bool OAIV1Payment::is_gross_sales_money_Set() const{
    return m_gross_sales_money_isSet;
}

bool OAIV1Payment::is_gross_sales_money_Valid() const{
    return m_gross_sales_money_isValid;
}

QString OAIV1Payment::getId() const {
    return m_id;
}
void OAIV1Payment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIV1Payment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIV1Payment::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIV1PaymentTax> OAIV1Payment::getInclusiveTax() const {
    return m_inclusive_tax;
}
void OAIV1Payment::setInclusiveTax(const QList<OAIV1PaymentTax> &inclusive_tax) {
    m_inclusive_tax = inclusive_tax;
    m_inclusive_tax_isSet = true;
}

bool OAIV1Payment::is_inclusive_tax_Set() const{
    return m_inclusive_tax_isSet;
}

bool OAIV1Payment::is_inclusive_tax_Valid() const{
    return m_inclusive_tax_isValid;
}

OAIV1Money OAIV1Payment::getInclusiveTaxMoney() const {
    return m_inclusive_tax_money;
}
void OAIV1Payment::setInclusiveTaxMoney(const OAIV1Money &inclusive_tax_money) {
    m_inclusive_tax_money = inclusive_tax_money;
    m_inclusive_tax_money_isSet = true;
}

bool OAIV1Payment::is_inclusive_tax_money_Set() const{
    return m_inclusive_tax_money_isSet;
}

bool OAIV1Payment::is_inclusive_tax_money_Valid() const{
    return m_inclusive_tax_money_isValid;
}

bool OAIV1Payment::isIsPartial() const {
    return m_is_partial;
}
void OAIV1Payment::setIsPartial(const bool &is_partial) {
    m_is_partial = is_partial;
    m_is_partial_isSet = true;
}

bool OAIV1Payment::is_is_partial_Set() const{
    return m_is_partial_isSet;
}

bool OAIV1Payment::is_is_partial_Valid() const{
    return m_is_partial_isValid;
}

QList<OAIV1PaymentItemization> OAIV1Payment::getItemizations() const {
    return m_itemizations;
}
void OAIV1Payment::setItemizations(const QList<OAIV1PaymentItemization> &itemizations) {
    m_itemizations = itemizations;
    m_itemizations_isSet = true;
}

bool OAIV1Payment::is_itemizations_Set() const{
    return m_itemizations_isSet;
}

bool OAIV1Payment::is_itemizations_Valid() const{
    return m_itemizations_isValid;
}

QString OAIV1Payment::getMerchantId() const {
    return m_merchant_id;
}
void OAIV1Payment::setMerchantId(const QString &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAIV1Payment::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAIV1Payment::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

OAIV1Money OAIV1Payment::getNetSalesMoney() const {
    return m_net_sales_money;
}
void OAIV1Payment::setNetSalesMoney(const OAIV1Money &net_sales_money) {
    m_net_sales_money = net_sales_money;
    m_net_sales_money_isSet = true;
}

bool OAIV1Payment::is_net_sales_money_Set() const{
    return m_net_sales_money_isSet;
}

bool OAIV1Payment::is_net_sales_money_Valid() const{
    return m_net_sales_money_isValid;
}

OAIV1Money OAIV1Payment::getNetTotalMoney() const {
    return m_net_total_money;
}
void OAIV1Payment::setNetTotalMoney(const OAIV1Money &net_total_money) {
    m_net_total_money = net_total_money;
    m_net_total_money_isSet = true;
}

bool OAIV1Payment::is_net_total_money_Set() const{
    return m_net_total_money_isSet;
}

bool OAIV1Payment::is_net_total_money_Valid() const{
    return m_net_total_money_isValid;
}

QString OAIV1Payment::getPaymentUrl() const {
    return m_payment_url;
}
void OAIV1Payment::setPaymentUrl(const QString &payment_url) {
    m_payment_url = payment_url;
    m_payment_url_isSet = true;
}

bool OAIV1Payment::is_payment_url_Set() const{
    return m_payment_url_isSet;
}

bool OAIV1Payment::is_payment_url_Valid() const{
    return m_payment_url_isValid;
}

OAIV1Money OAIV1Payment::getProcessingFeeMoney() const {
    return m_processing_fee_money;
}
void OAIV1Payment::setProcessingFeeMoney(const OAIV1Money &processing_fee_money) {
    m_processing_fee_money = processing_fee_money;
    m_processing_fee_money_isSet = true;
}

bool OAIV1Payment::is_processing_fee_money_Set() const{
    return m_processing_fee_money_isSet;
}

bool OAIV1Payment::is_processing_fee_money_Valid() const{
    return m_processing_fee_money_isValid;
}

QString OAIV1Payment::getReceiptUrl() const {
    return m_receipt_url;
}
void OAIV1Payment::setReceiptUrl(const QString &receipt_url) {
    m_receipt_url = receipt_url;
    m_receipt_url_isSet = true;
}

bool OAIV1Payment::is_receipt_url_Set() const{
    return m_receipt_url_isSet;
}

bool OAIV1Payment::is_receipt_url_Valid() const{
    return m_receipt_url_isValid;
}

OAIV1Money OAIV1Payment::getRefundedMoney() const {
    return m_refunded_money;
}
void OAIV1Payment::setRefundedMoney(const OAIV1Money &refunded_money) {
    m_refunded_money = refunded_money;
    m_refunded_money_isSet = true;
}

bool OAIV1Payment::is_refunded_money_Set() const{
    return m_refunded_money_isSet;
}

bool OAIV1Payment::is_refunded_money_Valid() const{
    return m_refunded_money_isValid;
}

QList<OAIV1Refund> OAIV1Payment::getRefunds() const {
    return m_refunds;
}
void OAIV1Payment::setRefunds(const QList<OAIV1Refund> &refunds) {
    m_refunds = refunds;
    m_refunds_isSet = true;
}

bool OAIV1Payment::is_refunds_Set() const{
    return m_refunds_isSet;
}

bool OAIV1Payment::is_refunds_Valid() const{
    return m_refunds_isValid;
}

OAIV1Money OAIV1Payment::getSurchargeMoney() const {
    return m_surcharge_money;
}
void OAIV1Payment::setSurchargeMoney(const OAIV1Money &surcharge_money) {
    m_surcharge_money = surcharge_money;
    m_surcharge_money_isSet = true;
}

bool OAIV1Payment::is_surcharge_money_Set() const{
    return m_surcharge_money_isSet;
}

bool OAIV1Payment::is_surcharge_money_Valid() const{
    return m_surcharge_money_isValid;
}

QList<OAIV1PaymentSurcharge> OAIV1Payment::getSurcharges() const {
    return m_surcharges;
}
void OAIV1Payment::setSurcharges(const QList<OAIV1PaymentSurcharge> &surcharges) {
    m_surcharges = surcharges;
    m_surcharges_isSet = true;
}

bool OAIV1Payment::is_surcharges_Set() const{
    return m_surcharges_isSet;
}

bool OAIV1Payment::is_surcharges_Valid() const{
    return m_surcharges_isValid;
}

OAIV1Money OAIV1Payment::getSwedishRoundingMoney() const {
    return m_swedish_rounding_money;
}
void OAIV1Payment::setSwedishRoundingMoney(const OAIV1Money &swedish_rounding_money) {
    m_swedish_rounding_money = swedish_rounding_money;
    m_swedish_rounding_money_isSet = true;
}

bool OAIV1Payment::is_swedish_rounding_money_Set() const{
    return m_swedish_rounding_money_isSet;
}

bool OAIV1Payment::is_swedish_rounding_money_Valid() const{
    return m_swedish_rounding_money_isValid;
}

OAIV1Money OAIV1Payment::getTaxMoney() const {
    return m_tax_money;
}
void OAIV1Payment::setTaxMoney(const OAIV1Money &tax_money) {
    m_tax_money = tax_money;
    m_tax_money_isSet = true;
}

bool OAIV1Payment::is_tax_money_Set() const{
    return m_tax_money_isSet;
}

bool OAIV1Payment::is_tax_money_Valid() const{
    return m_tax_money_isValid;
}

QList<OAIV1Tender> OAIV1Payment::getTender() const {
    return m_tender;
}
void OAIV1Payment::setTender(const QList<OAIV1Tender> &tender) {
    m_tender = tender;
    m_tender_isSet = true;
}

bool OAIV1Payment::is_tender_Set() const{
    return m_tender_isSet;
}

bool OAIV1Payment::is_tender_Valid() const{
    return m_tender_isValid;
}

OAIV1Money OAIV1Payment::getTipMoney() const {
    return m_tip_money;
}
void OAIV1Payment::setTipMoney(const OAIV1Money &tip_money) {
    m_tip_money = tip_money;
    m_tip_money_isSet = true;
}

bool OAIV1Payment::is_tip_money_Set() const{
    return m_tip_money_isSet;
}

bool OAIV1Payment::is_tip_money_Valid() const{
    return m_tip_money_isValid;
}

OAIV1Money OAIV1Payment::getTotalCollectedMoney() const {
    return m_total_collected_money;
}
void OAIV1Payment::setTotalCollectedMoney(const OAIV1Money &total_collected_money) {
    m_total_collected_money = total_collected_money;
    m_total_collected_money_isSet = true;
}

bool OAIV1Payment::is_total_collected_money_Set() const{
    return m_total_collected_money_isSet;
}

bool OAIV1Payment::is_total_collected_money_Valid() const{
    return m_total_collected_money_isValid;
}

bool OAIV1Payment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additive_tax.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additive_tax_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gross_sales_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusive_tax.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusive_tax_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_partial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_itemizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_sales_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_total_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_fee_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_surcharge_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_surcharges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_swedish_rounding_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tender.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tip_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_collected_money.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV1Payment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
