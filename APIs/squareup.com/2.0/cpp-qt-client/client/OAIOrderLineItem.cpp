/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderLineItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderLineItem::OAIOrderLineItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderLineItem::OAIOrderLineItem() {
    this->initializeModel();
}

OAIOrderLineItem::~OAIOrderLineItem() {}

void OAIOrderLineItem::initializeModel() {

    m_applied_discounts_isSet = false;
    m_applied_discounts_isValid = false;

    m_applied_taxes_isSet = false;
    m_applied_taxes_isValid = false;

    m_base_price_money_isSet = false;
    m_base_price_money_isValid = false;

    m_catalog_object_id_isSet = false;
    m_catalog_object_id_isValid = false;

    m_catalog_version_isSet = false;
    m_catalog_version_isValid = false;

    m_gross_sales_money_isSet = false;
    m_gross_sales_money_isValid = false;

    m_item_type_isSet = false;
    m_item_type_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_modifiers_isSet = false;
    m_modifiers_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_pricing_blocklists_isSet = false;
    m_pricing_blocklists_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_quantity_unit_isSet = false;
    m_quantity_unit_isValid = false;

    m_total_discount_money_isSet = false;
    m_total_discount_money_isValid = false;

    m_total_money_isSet = false;
    m_total_money_isValid = false;

    m_total_tax_money_isSet = false;
    m_total_tax_money_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_variation_name_isSet = false;
    m_variation_name_isValid = false;

    m_variation_total_price_money_isSet = false;
    m_variation_total_price_money_isValid = false;
}

void OAIOrderLineItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderLineItem::fromJsonObject(QJsonObject json) {

    m_applied_discounts_isValid = ::OpenAPI::fromJsonValue(m_applied_discounts, json[QString("applied_discounts")]);
    m_applied_discounts_isSet = !json[QString("applied_discounts")].isNull() && m_applied_discounts_isValid;

    m_applied_taxes_isValid = ::OpenAPI::fromJsonValue(m_applied_taxes, json[QString("applied_taxes")]);
    m_applied_taxes_isSet = !json[QString("applied_taxes")].isNull() && m_applied_taxes_isValid;

    m_base_price_money_isValid = ::OpenAPI::fromJsonValue(m_base_price_money, json[QString("base_price_money")]);
    m_base_price_money_isSet = !json[QString("base_price_money")].isNull() && m_base_price_money_isValid;

    m_catalog_object_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_object_id, json[QString("catalog_object_id")]);
    m_catalog_object_id_isSet = !json[QString("catalog_object_id")].isNull() && m_catalog_object_id_isValid;

    m_catalog_version_isValid = ::OpenAPI::fromJsonValue(m_catalog_version, json[QString("catalog_version")]);
    m_catalog_version_isSet = !json[QString("catalog_version")].isNull() && m_catalog_version_isValid;

    m_gross_sales_money_isValid = ::OpenAPI::fromJsonValue(m_gross_sales_money, json[QString("gross_sales_money")]);
    m_gross_sales_money_isSet = !json[QString("gross_sales_money")].isNull() && m_gross_sales_money_isValid;

    m_item_type_isValid = ::OpenAPI::fromJsonValue(m_item_type, json[QString("item_type")]);
    m_item_type_isSet = !json[QString("item_type")].isNull() && m_item_type_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_modifiers_isValid = ::OpenAPI::fromJsonValue(m_modifiers, json[QString("modifiers")]);
    m_modifiers_isSet = !json[QString("modifiers")].isNull() && m_modifiers_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_pricing_blocklists_isValid = ::OpenAPI::fromJsonValue(m_pricing_blocklists, json[QString("pricing_blocklists")]);
    m_pricing_blocklists_isSet = !json[QString("pricing_blocklists")].isNull() && m_pricing_blocklists_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_quantity_unit_isValid = ::OpenAPI::fromJsonValue(m_quantity_unit, json[QString("quantity_unit")]);
    m_quantity_unit_isSet = !json[QString("quantity_unit")].isNull() && m_quantity_unit_isValid;

    m_total_discount_money_isValid = ::OpenAPI::fromJsonValue(m_total_discount_money, json[QString("total_discount_money")]);
    m_total_discount_money_isSet = !json[QString("total_discount_money")].isNull() && m_total_discount_money_isValid;

    m_total_money_isValid = ::OpenAPI::fromJsonValue(m_total_money, json[QString("total_money")]);
    m_total_money_isSet = !json[QString("total_money")].isNull() && m_total_money_isValid;

    m_total_tax_money_isValid = ::OpenAPI::fromJsonValue(m_total_tax_money, json[QString("total_tax_money")]);
    m_total_tax_money_isSet = !json[QString("total_tax_money")].isNull() && m_total_tax_money_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_variation_name_isValid = ::OpenAPI::fromJsonValue(m_variation_name, json[QString("variation_name")]);
    m_variation_name_isSet = !json[QString("variation_name")].isNull() && m_variation_name_isValid;

    m_variation_total_price_money_isValid = ::OpenAPI::fromJsonValue(m_variation_total_price_money, json[QString("variation_total_price_money")]);
    m_variation_total_price_money_isSet = !json[QString("variation_total_price_money")].isNull() && m_variation_total_price_money_isValid;
}

QString OAIOrderLineItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderLineItem::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_discounts.size() > 0) {
        obj.insert(QString("applied_discounts"), ::OpenAPI::toJsonValue(m_applied_discounts));
    }
    if (m_applied_taxes.size() > 0) {
        obj.insert(QString("applied_taxes"), ::OpenAPI::toJsonValue(m_applied_taxes));
    }
    if (m_base_price_money.isSet()) {
        obj.insert(QString("base_price_money"), ::OpenAPI::toJsonValue(m_base_price_money));
    }
    if (m_catalog_object_id_isSet) {
        obj.insert(QString("catalog_object_id"), ::OpenAPI::toJsonValue(m_catalog_object_id));
    }
    if (m_catalog_version_isSet) {
        obj.insert(QString("catalog_version"), ::OpenAPI::toJsonValue(m_catalog_version));
    }
    if (m_gross_sales_money.isSet()) {
        obj.insert(QString("gross_sales_money"), ::OpenAPI::toJsonValue(m_gross_sales_money));
    }
    if (m_item_type_isSet) {
        obj.insert(QString("item_type"), ::OpenAPI::toJsonValue(m_item_type));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_modifiers.size() > 0) {
        obj.insert(QString("modifiers"), ::OpenAPI::toJsonValue(m_modifiers));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_pricing_blocklists.isSet()) {
        obj.insert(QString("pricing_blocklists"), ::OpenAPI::toJsonValue(m_pricing_blocklists));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_quantity_unit.isSet()) {
        obj.insert(QString("quantity_unit"), ::OpenAPI::toJsonValue(m_quantity_unit));
    }
    if (m_total_discount_money.isSet()) {
        obj.insert(QString("total_discount_money"), ::OpenAPI::toJsonValue(m_total_discount_money));
    }
    if (m_total_money.isSet()) {
        obj.insert(QString("total_money"), ::OpenAPI::toJsonValue(m_total_money));
    }
    if (m_total_tax_money.isSet()) {
        obj.insert(QString("total_tax_money"), ::OpenAPI::toJsonValue(m_total_tax_money));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_variation_name_isSet) {
        obj.insert(QString("variation_name"), ::OpenAPI::toJsonValue(m_variation_name));
    }
    if (m_variation_total_price_money.isSet()) {
        obj.insert(QString("variation_total_price_money"), ::OpenAPI::toJsonValue(m_variation_total_price_money));
    }
    return obj;
}

QList<OAIOrderLineItemAppliedDiscount> OAIOrderLineItem::getAppliedDiscounts() const {
    return m_applied_discounts;
}
void OAIOrderLineItem::setAppliedDiscounts(const QList<OAIOrderLineItemAppliedDiscount> &applied_discounts) {
    m_applied_discounts = applied_discounts;
    m_applied_discounts_isSet = true;
}

bool OAIOrderLineItem::is_applied_discounts_Set() const{
    return m_applied_discounts_isSet;
}

bool OAIOrderLineItem::is_applied_discounts_Valid() const{
    return m_applied_discounts_isValid;
}

QList<OAIOrderLineItemAppliedTax> OAIOrderLineItem::getAppliedTaxes() const {
    return m_applied_taxes;
}
void OAIOrderLineItem::setAppliedTaxes(const QList<OAIOrderLineItemAppliedTax> &applied_taxes) {
    m_applied_taxes = applied_taxes;
    m_applied_taxes_isSet = true;
}

bool OAIOrderLineItem::is_applied_taxes_Set() const{
    return m_applied_taxes_isSet;
}

bool OAIOrderLineItem::is_applied_taxes_Valid() const{
    return m_applied_taxes_isValid;
}

OAIMoney OAIOrderLineItem::getBasePriceMoney() const {
    return m_base_price_money;
}
void OAIOrderLineItem::setBasePriceMoney(const OAIMoney &base_price_money) {
    m_base_price_money = base_price_money;
    m_base_price_money_isSet = true;
}

bool OAIOrderLineItem::is_base_price_money_Set() const{
    return m_base_price_money_isSet;
}

bool OAIOrderLineItem::is_base_price_money_Valid() const{
    return m_base_price_money_isValid;
}

QString OAIOrderLineItem::getCatalogObjectId() const {
    return m_catalog_object_id;
}
void OAIOrderLineItem::setCatalogObjectId(const QString &catalog_object_id) {
    m_catalog_object_id = catalog_object_id;
    m_catalog_object_id_isSet = true;
}

bool OAIOrderLineItem::is_catalog_object_id_Set() const{
    return m_catalog_object_id_isSet;
}

bool OAIOrderLineItem::is_catalog_object_id_Valid() const{
    return m_catalog_object_id_isValid;
}

qint64 OAIOrderLineItem::getCatalogVersion() const {
    return m_catalog_version;
}
void OAIOrderLineItem::setCatalogVersion(const qint64 &catalog_version) {
    m_catalog_version = catalog_version;
    m_catalog_version_isSet = true;
}

bool OAIOrderLineItem::is_catalog_version_Set() const{
    return m_catalog_version_isSet;
}

bool OAIOrderLineItem::is_catalog_version_Valid() const{
    return m_catalog_version_isValid;
}

OAIMoney OAIOrderLineItem::getGrossSalesMoney() const {
    return m_gross_sales_money;
}
void OAIOrderLineItem::setGrossSalesMoney(const OAIMoney &gross_sales_money) {
    m_gross_sales_money = gross_sales_money;
    m_gross_sales_money_isSet = true;
}

bool OAIOrderLineItem::is_gross_sales_money_Set() const{
    return m_gross_sales_money_isSet;
}

bool OAIOrderLineItem::is_gross_sales_money_Valid() const{
    return m_gross_sales_money_isValid;
}

QString OAIOrderLineItem::getItemType() const {
    return m_item_type;
}
void OAIOrderLineItem::setItemType(const QString &item_type) {
    m_item_type = item_type;
    m_item_type_isSet = true;
}

bool OAIOrderLineItem::is_item_type_Set() const{
    return m_item_type_isSet;
}

bool OAIOrderLineItem::is_item_type_Valid() const{
    return m_item_type_isValid;
}

QMap<QString, QString> OAIOrderLineItem::getMetadata() const {
    return m_metadata;
}
void OAIOrderLineItem::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIOrderLineItem::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIOrderLineItem::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIOrderLineItemModifier> OAIOrderLineItem::getModifiers() const {
    return m_modifiers;
}
void OAIOrderLineItem::setModifiers(const QList<OAIOrderLineItemModifier> &modifiers) {
    m_modifiers = modifiers;
    m_modifiers_isSet = true;
}

bool OAIOrderLineItem::is_modifiers_Set() const{
    return m_modifiers_isSet;
}

bool OAIOrderLineItem::is_modifiers_Valid() const{
    return m_modifiers_isValid;
}

QString OAIOrderLineItem::getName() const {
    return m_name;
}
void OAIOrderLineItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrderLineItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrderLineItem::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrderLineItem::getNote() const {
    return m_note;
}
void OAIOrderLineItem::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIOrderLineItem::is_note_Set() const{
    return m_note_isSet;
}

bool OAIOrderLineItem::is_note_Valid() const{
    return m_note_isValid;
}

OAIOrderLineItemPricingBlocklists OAIOrderLineItem::getPricingBlocklists() const {
    return m_pricing_blocklists;
}
void OAIOrderLineItem::setPricingBlocklists(const OAIOrderLineItemPricingBlocklists &pricing_blocklists) {
    m_pricing_blocklists = pricing_blocklists;
    m_pricing_blocklists_isSet = true;
}

bool OAIOrderLineItem::is_pricing_blocklists_Set() const{
    return m_pricing_blocklists_isSet;
}

bool OAIOrderLineItem::is_pricing_blocklists_Valid() const{
    return m_pricing_blocklists_isValid;
}

QString OAIOrderLineItem::getQuantity() const {
    return m_quantity;
}
void OAIOrderLineItem::setQuantity(const QString &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIOrderLineItem::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIOrderLineItem::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIOrderQuantityUnit OAIOrderLineItem::getQuantityUnit() const {
    return m_quantity_unit;
}
void OAIOrderLineItem::setQuantityUnit(const OAIOrderQuantityUnit &quantity_unit) {
    m_quantity_unit = quantity_unit;
    m_quantity_unit_isSet = true;
}

bool OAIOrderLineItem::is_quantity_unit_Set() const{
    return m_quantity_unit_isSet;
}

bool OAIOrderLineItem::is_quantity_unit_Valid() const{
    return m_quantity_unit_isValid;
}

OAIMoney OAIOrderLineItem::getTotalDiscountMoney() const {
    return m_total_discount_money;
}
void OAIOrderLineItem::setTotalDiscountMoney(const OAIMoney &total_discount_money) {
    m_total_discount_money = total_discount_money;
    m_total_discount_money_isSet = true;
}

bool OAIOrderLineItem::is_total_discount_money_Set() const{
    return m_total_discount_money_isSet;
}

bool OAIOrderLineItem::is_total_discount_money_Valid() const{
    return m_total_discount_money_isValid;
}

OAIMoney OAIOrderLineItem::getTotalMoney() const {
    return m_total_money;
}
void OAIOrderLineItem::setTotalMoney(const OAIMoney &total_money) {
    m_total_money = total_money;
    m_total_money_isSet = true;
}

bool OAIOrderLineItem::is_total_money_Set() const{
    return m_total_money_isSet;
}

bool OAIOrderLineItem::is_total_money_Valid() const{
    return m_total_money_isValid;
}

OAIMoney OAIOrderLineItem::getTotalTaxMoney() const {
    return m_total_tax_money;
}
void OAIOrderLineItem::setTotalTaxMoney(const OAIMoney &total_tax_money) {
    m_total_tax_money = total_tax_money;
    m_total_tax_money_isSet = true;
}

bool OAIOrderLineItem::is_total_tax_money_Set() const{
    return m_total_tax_money_isSet;
}

bool OAIOrderLineItem::is_total_tax_money_Valid() const{
    return m_total_tax_money_isValid;
}

QString OAIOrderLineItem::getUid() const {
    return m_uid;
}
void OAIOrderLineItem::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIOrderLineItem::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIOrderLineItem::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIOrderLineItem::getVariationName() const {
    return m_variation_name;
}
void OAIOrderLineItem::setVariationName(const QString &variation_name) {
    m_variation_name = variation_name;
    m_variation_name_isSet = true;
}

bool OAIOrderLineItem::is_variation_name_Set() const{
    return m_variation_name_isSet;
}

bool OAIOrderLineItem::is_variation_name_Valid() const{
    return m_variation_name_isValid;
}

OAIMoney OAIOrderLineItem::getVariationTotalPriceMoney() const {
    return m_variation_total_price_money;
}
void OAIOrderLineItem::setVariationTotalPriceMoney(const OAIMoney &variation_total_price_money) {
    m_variation_total_price_money = variation_total_price_money;
    m_variation_total_price_money_isSet = true;
}

bool OAIOrderLineItem::is_variation_total_price_money_Set() const{
    return m_variation_total_price_money_isSet;
}

bool OAIOrderLineItem::is_variation_total_price_money_Valid() const{
    return m_variation_total_price_money_isValid;
}

bool OAIOrderLineItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_discounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_taxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_price_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gross_sales_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_blocklists.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_discount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tax_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variation_total_price_money.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderLineItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_quantity_isValid && true;
}

} // namespace OpenAPI
