/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorCode::OAIErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorCode::OAIErrorCode() {
    this->initializeModel();
}

OAIErrorCode::~OAIErrorCode() {}

void OAIErrorCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIErrorCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIErrorCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("INTERNAL_SERVER_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INTERNAL_SERVER_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNAUTHORIZED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::UNAUTHORIZED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCESS_TOKEN_EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::ACCESS_TOKEN_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCESS_TOKEN_REVOKED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::ACCESS_TOKEN_REVOKED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CLIENT_DISABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CLIENT_DISABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FORBIDDEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::FORBIDDEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSUFFICIENT_SCOPES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INSUFFICIENT_SCOPES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPLICATION_DISABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::APPLICATION_DISABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("V1_APPLICATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::V1_APPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("V1_ACCESS_TOKEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::V1_ACCESS_TOKEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CARD_PROCESSING_NOT_ENABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CARD_PROCESSING_NOT_ENABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MERCHANT_SUBSCRIPTION_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::MERCHANT_SUBSCRIPTION_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BAD_REQUEST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::BAD_REQUEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MISSING_REQUIRED_PARAMETER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::MISSING_REQUIRED_PARAMETER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INCORRECT_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INCORRECT_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_TIME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_TIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_TIME_RANGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_TIME_RANGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_VALUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_VALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_CURSOR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_CURSOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN_QUERY_PARAMETER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::UNKNOWN_QUERY_PARAMETER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONFLICTING_PARAMETERS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CONFLICTING_PARAMETERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPECTED_JSON_BODY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::EXPECTED_JSON_BODY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_SORT_ORDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_SORT_ORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALUE_REGEX_MISMATCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::VALUE_REGEX_MISMATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALUE_TOO_SHORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::VALUE_TOO_SHORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALUE_TOO_LONG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::VALUE_TOO_LONG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALUE_TOO_LOW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::VALUE_TOO_LOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALUE_TOO_HIGH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::VALUE_TOO_HIGH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALUE_EMPTY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::VALUE_EMPTY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ARRAY_LENGTH_TOO_LONG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::ARRAY_LENGTH_TOO_LONG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ARRAY_LENGTH_TOO_SHORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::ARRAY_LENGTH_TOO_SHORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ARRAY_EMPTY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::ARRAY_EMPTY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPECTED_BOOLEAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::EXPECTED_BOOLEAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPECTED_INTEGER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::EXPECTED_INTEGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPECTED_FLOAT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::EXPECTED_FLOAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPECTED_STRING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::EXPECTED_STRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPECTED_OBJECT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::EXPECTED_OBJECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPECTED_ARRAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::EXPECTED_ARRAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPECTED_MAP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::EXPECTED_MAP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPECTED_BASE64_ENCODED_BYTE_ARRAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::EXPECTED_BASE64_ENCODED_BYTE_ARRAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_ARRAY_VALUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_ARRAY_VALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_ENUM_VALUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_ENUM_VALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_CONTENT_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_CONTENT_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_FORM_VALUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_FORM_VALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOMER_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CUSTOMER_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ONE_INSTRUMENT_EXPECTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::ONE_INSTRUMENT_EXPECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_FIELDS_SET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::NO_FIELDS_SET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOO_MANY_MAP_ENTRIES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::TOO_MANY_MAP_ENTRIES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAP_KEY_LENGTH_TOO_SHORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::MAP_KEY_LENGTH_TOO_SHORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAP_KEY_LENGTH_TOO_LONG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::MAP_KEY_LENGTH_TOO_LONG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CARD_EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CARD_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_EXPIRATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_EXPIRATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_EXPIRATION_YEAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_EXPIRATION_YEAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_EXPIRATION_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_EXPIRATION_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED_CARD_BRAND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::UNSUPPORTED_CARD_BRAND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED_ENTRY_METHOD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::UNSUPPORTED_ENTRY_METHOD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_ENCRYPTED_CARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_ENCRYPTED_CARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_CARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_CARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GENERIC_DECLINE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::GENERIC_DECLINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CVV_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CVV_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADDRESS_VERIFICATION_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::ADDRESS_VERIFICATION_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_ACCOUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_ACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CURRENCY_MISMATCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CURRENCY_MISMATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSUFFICIENT_FUNDS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INSUFFICIENT_FUNDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSUFFICIENT_PERMISSIONS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INSUFFICIENT_PERMISSIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CARDHOLDER_INSUFFICIENT_PERMISSIONS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CARDHOLDER_INSUFFICIENT_PERMISSIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_LOCATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_LOCATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRANSACTION_LIMIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::TRANSACTION_LIMIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VOICE_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::VOICE_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAN_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::PAN_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPIRATION_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::EXPIRATION_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CARD_NOT_SUPPORTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CARD_NOT_SUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_PIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_PIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MISSING_PIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::MISSING_PIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MISSING_ACCOUNT_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::MISSING_ACCOUNT_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_POSTAL_CODE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_POSTAL_CODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_FEES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_FEES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MANUALLY_ENTERED_PAYMENT_NOT_SUPPORTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::MANUALLY_ENTERED_PAYMENT_NOT_SUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAYMENT_LIMIT_EXCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::PAYMENT_LIMIT_EXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GIFT_CARD_AVAILABLE_AMOUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::GIFT_CARD_AVAILABLE_AMOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCOUNT_UNUSABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::ACCOUNT_UNUSABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BUYER_REFUSED_PAYMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::BUYER_REFUSED_PAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELAYED_TRANSACTION_EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::DELAYED_TRANSACTION_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELAYED_TRANSACTION_CANCELED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::DELAYED_TRANSACTION_CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELAYED_TRANSACTION_CAPTURED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::DELAYED_TRANSACTION_CAPTURED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELAYED_TRANSACTION_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::DELAYED_TRANSACTION_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CARD_TOKEN_EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CARD_TOKEN_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CARD_TOKEN_USED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CARD_TOKEN_USED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AMOUNT_TOO_HIGH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::AMOUNT_TOO_HIGH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED_INSTRUMENT_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::UNSUPPORTED_INSTRUMENT_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REFUND_AMOUNT_INVALID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::REFUND_AMOUNT_INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REFUND_ALREADY_PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::REFUND_ALREADY_PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAYMENT_NOT_REFUNDABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::PAYMENT_NOT_REFUNDABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REFUND_DECLINED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::REFUND_DECLINED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_CARD_DATA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_CARD_DATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SOURCE_USED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::SOURCE_USED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SOURCE_EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::SOURCE_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED_LOYALTY_REWARD_TIER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::UNSUPPORTED_LOYALTY_REWARD_TIER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOCATION_MISMATCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::LOCATION_MISMATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IDEMPOTENCY_KEY_REUSED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::IDEMPOTENCY_KEY_REUSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNEXPECTED_VALUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::UNEXPECTED_VALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SANDBOX_NOT_SUPPORTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::SANDBOX_NOT_SUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_EMAIL_ADDRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_EMAIL_ADDRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_PHONE_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_PHONE_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHECKOUT_EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CHECKOUT_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BAD_CERTIFICATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::BAD_CERTIFICATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_SQUARE_VERSION_FORMAT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_SQUARE_VERSION_FORMAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("API_VERSION_INCOMPATIBLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::API_VERSION_INCOMPATIBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CARD_DECLINED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CARD_DECLINED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VERIFY_CVV_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::VERIFY_CVV_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VERIFY_AVS_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::VERIFY_AVS_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CARD_DECLINED_CALL_ISSUER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CARD_DECLINED_CALL_ISSUER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CARD_DECLINED_VERIFICATION_REQUIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CARD_DECLINED_VERIFICATION_REQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BAD_EXPIRATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::BAD_EXPIRATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHIP_INSERTION_REQUIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CHIP_INSERTION_REQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ALLOWABLE_PIN_TRIES_EXCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::ALLOWABLE_PIN_TRIES_EXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESERVATION_DECLINED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::RESERVATION_DECLINED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPLE_PAYMENT_PROCESSING_CERTIFICATE_HASH_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::APPLE_PAYMENT_PROCESSING_CERTIFICATE_HASH_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METHOD_NOT_ALLOWED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::METHOD_NOT_ALLOWED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_ACCEPTABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::NOT_ACCEPTABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REQUEST_TIMEOUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::REQUEST_TIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONFLICT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CONFLICT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::GONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REQUEST_ENTITY_TOO_LARGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::REQUEST_ENTITY_TOO_LARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED_MEDIA_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::UNSUPPORTED_MEDIA_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPROCESSABLE_ENTITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::UNPROCESSABLE_ENTITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RATE_LIMITED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::RATE_LIMITED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_IMPLEMENTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::NOT_IMPLEMENTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BAD_GATEWAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::BAD_GATEWAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SERVICE_UNAVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::SERVICE_UNAVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TEMPORARY_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::TEMPORARY_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GATEWAY_TIMEOUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::GATEWAY_TIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIErrorCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIErrorCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIErrorCode::INTERNAL_SERVER_ERROR:
            val = "INTERNAL_SERVER_ERROR";
            break;
        case eOAIErrorCode::UNAUTHORIZED:
            val = "UNAUTHORIZED";
            break;
        case eOAIErrorCode::ACCESS_TOKEN_EXPIRED:
            val = "ACCESS_TOKEN_EXPIRED";
            break;
        case eOAIErrorCode::ACCESS_TOKEN_REVOKED:
            val = "ACCESS_TOKEN_REVOKED";
            break;
        case eOAIErrorCode::CLIENT_DISABLED:
            val = "CLIENT_DISABLED";
            break;
        case eOAIErrorCode::FORBIDDEN:
            val = "FORBIDDEN";
            break;
        case eOAIErrorCode::INSUFFICIENT_SCOPES:
            val = "INSUFFICIENT_SCOPES";
            break;
        case eOAIErrorCode::APPLICATION_DISABLED:
            val = "APPLICATION_DISABLED";
            break;
        case eOAIErrorCode::V1_APPLICATION:
            val = "V1_APPLICATION";
            break;
        case eOAIErrorCode::V1_ACCESS_TOKEN:
            val = "V1_ACCESS_TOKEN";
            break;
        case eOAIErrorCode::CARD_PROCESSING_NOT_ENABLED:
            val = "CARD_PROCESSING_NOT_ENABLED";
            break;
        case eOAIErrorCode::MERCHANT_SUBSCRIPTION_NOT_FOUND:
            val = "MERCHANT_SUBSCRIPTION_NOT_FOUND";
            break;
        case eOAIErrorCode::BAD_REQUEST:
            val = "BAD_REQUEST";
            break;
        case eOAIErrorCode::MISSING_REQUIRED_PARAMETER:
            val = "MISSING_REQUIRED_PARAMETER";
            break;
        case eOAIErrorCode::INCORRECT_TYPE:
            val = "INCORRECT_TYPE";
            break;
        case eOAIErrorCode::INVALID_TIME:
            val = "INVALID_TIME";
            break;
        case eOAIErrorCode::INVALID_TIME_RANGE:
            val = "INVALID_TIME_RANGE";
            break;
        case eOAIErrorCode::INVALID_VALUE:
            val = "INVALID_VALUE";
            break;
        case eOAIErrorCode::INVALID_CURSOR:
            val = "INVALID_CURSOR";
            break;
        case eOAIErrorCode::UNKNOWN_QUERY_PARAMETER:
            val = "UNKNOWN_QUERY_PARAMETER";
            break;
        case eOAIErrorCode::CONFLICTING_PARAMETERS:
            val = "CONFLICTING_PARAMETERS";
            break;
        case eOAIErrorCode::EXPECTED_JSON_BODY:
            val = "EXPECTED_JSON_BODY";
            break;
        case eOAIErrorCode::INVALID_SORT_ORDER:
            val = "INVALID_SORT_ORDER";
            break;
        case eOAIErrorCode::VALUE_REGEX_MISMATCH:
            val = "VALUE_REGEX_MISMATCH";
            break;
        case eOAIErrorCode::VALUE_TOO_SHORT:
            val = "VALUE_TOO_SHORT";
            break;
        case eOAIErrorCode::VALUE_TOO_LONG:
            val = "VALUE_TOO_LONG";
            break;
        case eOAIErrorCode::VALUE_TOO_LOW:
            val = "VALUE_TOO_LOW";
            break;
        case eOAIErrorCode::VALUE_TOO_HIGH:
            val = "VALUE_TOO_HIGH";
            break;
        case eOAIErrorCode::VALUE_EMPTY:
            val = "VALUE_EMPTY";
            break;
        case eOAIErrorCode::ARRAY_LENGTH_TOO_LONG:
            val = "ARRAY_LENGTH_TOO_LONG";
            break;
        case eOAIErrorCode::ARRAY_LENGTH_TOO_SHORT:
            val = "ARRAY_LENGTH_TOO_SHORT";
            break;
        case eOAIErrorCode::ARRAY_EMPTY:
            val = "ARRAY_EMPTY";
            break;
        case eOAIErrorCode::EXPECTED_BOOLEAN:
            val = "EXPECTED_BOOLEAN";
            break;
        case eOAIErrorCode::EXPECTED_INTEGER:
            val = "EXPECTED_INTEGER";
            break;
        case eOAIErrorCode::EXPECTED_FLOAT:
            val = "EXPECTED_FLOAT";
            break;
        case eOAIErrorCode::EXPECTED_STRING:
            val = "EXPECTED_STRING";
            break;
        case eOAIErrorCode::EXPECTED_OBJECT:
            val = "EXPECTED_OBJECT";
            break;
        case eOAIErrorCode::EXPECTED_ARRAY:
            val = "EXPECTED_ARRAY";
            break;
        case eOAIErrorCode::EXPECTED_MAP:
            val = "EXPECTED_MAP";
            break;
        case eOAIErrorCode::EXPECTED_BASE64_ENCODED_BYTE_ARRAY:
            val = "EXPECTED_BASE64_ENCODED_BYTE_ARRAY";
            break;
        case eOAIErrorCode::INVALID_ARRAY_VALUE:
            val = "INVALID_ARRAY_VALUE";
            break;
        case eOAIErrorCode::INVALID_ENUM_VALUE:
            val = "INVALID_ENUM_VALUE";
            break;
        case eOAIErrorCode::INVALID_CONTENT_TYPE:
            val = "INVALID_CONTENT_TYPE";
            break;
        case eOAIErrorCode::INVALID_FORM_VALUE:
            val = "INVALID_FORM_VALUE";
            break;
        case eOAIErrorCode::CUSTOMER_NOT_FOUND:
            val = "CUSTOMER_NOT_FOUND";
            break;
        case eOAIErrorCode::ONE_INSTRUMENT_EXPECTED:
            val = "ONE_INSTRUMENT_EXPECTED";
            break;
        case eOAIErrorCode::NO_FIELDS_SET:
            val = "NO_FIELDS_SET";
            break;
        case eOAIErrorCode::TOO_MANY_MAP_ENTRIES:
            val = "TOO_MANY_MAP_ENTRIES";
            break;
        case eOAIErrorCode::MAP_KEY_LENGTH_TOO_SHORT:
            val = "MAP_KEY_LENGTH_TOO_SHORT";
            break;
        case eOAIErrorCode::MAP_KEY_LENGTH_TOO_LONG:
            val = "MAP_KEY_LENGTH_TOO_LONG";
            break;
        case eOAIErrorCode::CARD_EXPIRED:
            val = "CARD_EXPIRED";
            break;
        case eOAIErrorCode::INVALID_EXPIRATION:
            val = "INVALID_EXPIRATION";
            break;
        case eOAIErrorCode::INVALID_EXPIRATION_YEAR:
            val = "INVALID_EXPIRATION_YEAR";
            break;
        case eOAIErrorCode::INVALID_EXPIRATION_DATE:
            val = "INVALID_EXPIRATION_DATE";
            break;
        case eOAIErrorCode::UNSUPPORTED_CARD_BRAND:
            val = "UNSUPPORTED_CARD_BRAND";
            break;
        case eOAIErrorCode::UNSUPPORTED_ENTRY_METHOD:
            val = "UNSUPPORTED_ENTRY_METHOD";
            break;
        case eOAIErrorCode::INVALID_ENCRYPTED_CARD:
            val = "INVALID_ENCRYPTED_CARD";
            break;
        case eOAIErrorCode::INVALID_CARD:
            val = "INVALID_CARD";
            break;
        case eOAIErrorCode::GENERIC_DECLINE:
            val = "GENERIC_DECLINE";
            break;
        case eOAIErrorCode::CVV_FAILURE:
            val = "CVV_FAILURE";
            break;
        case eOAIErrorCode::ADDRESS_VERIFICATION_FAILURE:
            val = "ADDRESS_VERIFICATION_FAILURE";
            break;
        case eOAIErrorCode::INVALID_ACCOUNT:
            val = "INVALID_ACCOUNT";
            break;
        case eOAIErrorCode::CURRENCY_MISMATCH:
            val = "CURRENCY_MISMATCH";
            break;
        case eOAIErrorCode::INSUFFICIENT_FUNDS:
            val = "INSUFFICIENT_FUNDS";
            break;
        case eOAIErrorCode::INSUFFICIENT_PERMISSIONS:
            val = "INSUFFICIENT_PERMISSIONS";
            break;
        case eOAIErrorCode::CARDHOLDER_INSUFFICIENT_PERMISSIONS:
            val = "CARDHOLDER_INSUFFICIENT_PERMISSIONS";
            break;
        case eOAIErrorCode::INVALID_LOCATION:
            val = "INVALID_LOCATION";
            break;
        case eOAIErrorCode::TRANSACTION_LIMIT:
            val = "TRANSACTION_LIMIT";
            break;
        case eOAIErrorCode::VOICE_FAILURE:
            val = "VOICE_FAILURE";
            break;
        case eOAIErrorCode::PAN_FAILURE:
            val = "PAN_FAILURE";
            break;
        case eOAIErrorCode::EXPIRATION_FAILURE:
            val = "EXPIRATION_FAILURE";
            break;
        case eOAIErrorCode::CARD_NOT_SUPPORTED:
            val = "CARD_NOT_SUPPORTED";
            break;
        case eOAIErrorCode::INVALID_PIN:
            val = "INVALID_PIN";
            break;
        case eOAIErrorCode::MISSING_PIN:
            val = "MISSING_PIN";
            break;
        case eOAIErrorCode::MISSING_ACCOUNT_TYPE:
            val = "MISSING_ACCOUNT_TYPE";
            break;
        case eOAIErrorCode::INVALID_POSTAL_CODE:
            val = "INVALID_POSTAL_CODE";
            break;
        case eOAIErrorCode::INVALID_FEES:
            val = "INVALID_FEES";
            break;
        case eOAIErrorCode::MANUALLY_ENTERED_PAYMENT_NOT_SUPPORTED:
            val = "MANUALLY_ENTERED_PAYMENT_NOT_SUPPORTED";
            break;
        case eOAIErrorCode::PAYMENT_LIMIT_EXCEEDED:
            val = "PAYMENT_LIMIT_EXCEEDED";
            break;
        case eOAIErrorCode::GIFT_CARD_AVAILABLE_AMOUNT:
            val = "GIFT_CARD_AVAILABLE_AMOUNT";
            break;
        case eOAIErrorCode::ACCOUNT_UNUSABLE:
            val = "ACCOUNT_UNUSABLE";
            break;
        case eOAIErrorCode::BUYER_REFUSED_PAYMENT:
            val = "BUYER_REFUSED_PAYMENT";
            break;
        case eOAIErrorCode::DELAYED_TRANSACTION_EXPIRED:
            val = "DELAYED_TRANSACTION_EXPIRED";
            break;
        case eOAIErrorCode::DELAYED_TRANSACTION_CANCELED:
            val = "DELAYED_TRANSACTION_CANCELED";
            break;
        case eOAIErrorCode::DELAYED_TRANSACTION_CAPTURED:
            val = "DELAYED_TRANSACTION_CAPTURED";
            break;
        case eOAIErrorCode::DELAYED_TRANSACTION_FAILED:
            val = "DELAYED_TRANSACTION_FAILED";
            break;
        case eOAIErrorCode::CARD_TOKEN_EXPIRED:
            val = "CARD_TOKEN_EXPIRED";
            break;
        case eOAIErrorCode::CARD_TOKEN_USED:
            val = "CARD_TOKEN_USED";
            break;
        case eOAIErrorCode::AMOUNT_TOO_HIGH:
            val = "AMOUNT_TOO_HIGH";
            break;
        case eOAIErrorCode::UNSUPPORTED_INSTRUMENT_TYPE:
            val = "UNSUPPORTED_INSTRUMENT_TYPE";
            break;
        case eOAIErrorCode::REFUND_AMOUNT_INVALID:
            val = "REFUND_AMOUNT_INVALID";
            break;
        case eOAIErrorCode::REFUND_ALREADY_PENDING:
            val = "REFUND_ALREADY_PENDING";
            break;
        case eOAIErrorCode::PAYMENT_NOT_REFUNDABLE:
            val = "PAYMENT_NOT_REFUNDABLE";
            break;
        case eOAIErrorCode::REFUND_DECLINED:
            val = "REFUND_DECLINED";
            break;
        case eOAIErrorCode::INVALID_CARD_DATA:
            val = "INVALID_CARD_DATA";
            break;
        case eOAIErrorCode::SOURCE_USED:
            val = "SOURCE_USED";
            break;
        case eOAIErrorCode::SOURCE_EXPIRED:
            val = "SOURCE_EXPIRED";
            break;
        case eOAIErrorCode::UNSUPPORTED_LOYALTY_REWARD_TIER:
            val = "UNSUPPORTED_LOYALTY_REWARD_TIER";
            break;
        case eOAIErrorCode::LOCATION_MISMATCH:
            val = "LOCATION_MISMATCH";
            break;
        case eOAIErrorCode::IDEMPOTENCY_KEY_REUSED:
            val = "IDEMPOTENCY_KEY_REUSED";
            break;
        case eOAIErrorCode::UNEXPECTED_VALUE:
            val = "UNEXPECTED_VALUE";
            break;
        case eOAIErrorCode::SANDBOX_NOT_SUPPORTED:
            val = "SANDBOX_NOT_SUPPORTED";
            break;
        case eOAIErrorCode::INVALID_EMAIL_ADDRESS:
            val = "INVALID_EMAIL_ADDRESS";
            break;
        case eOAIErrorCode::INVALID_PHONE_NUMBER:
            val = "INVALID_PHONE_NUMBER";
            break;
        case eOAIErrorCode::CHECKOUT_EXPIRED:
            val = "CHECKOUT_EXPIRED";
            break;
        case eOAIErrorCode::BAD_CERTIFICATE:
            val = "BAD_CERTIFICATE";
            break;
        case eOAIErrorCode::INVALID_SQUARE_VERSION_FORMAT:
            val = "INVALID_SQUARE_VERSION_FORMAT";
            break;
        case eOAIErrorCode::API_VERSION_INCOMPATIBLE:
            val = "API_VERSION_INCOMPATIBLE";
            break;
        case eOAIErrorCode::CARD_DECLINED:
            val = "CARD_DECLINED";
            break;
        case eOAIErrorCode::VERIFY_CVV_FAILURE:
            val = "VERIFY_CVV_FAILURE";
            break;
        case eOAIErrorCode::VERIFY_AVS_FAILURE:
            val = "VERIFY_AVS_FAILURE";
            break;
        case eOAIErrorCode::CARD_DECLINED_CALL_ISSUER:
            val = "CARD_DECLINED_CALL_ISSUER";
            break;
        case eOAIErrorCode::CARD_DECLINED_VERIFICATION_REQUIRED:
            val = "CARD_DECLINED_VERIFICATION_REQUIRED";
            break;
        case eOAIErrorCode::BAD_EXPIRATION:
            val = "BAD_EXPIRATION";
            break;
        case eOAIErrorCode::CHIP_INSERTION_REQUIRED:
            val = "CHIP_INSERTION_REQUIRED";
            break;
        case eOAIErrorCode::ALLOWABLE_PIN_TRIES_EXCEEDED:
            val = "ALLOWABLE_PIN_TRIES_EXCEEDED";
            break;
        case eOAIErrorCode::RESERVATION_DECLINED:
            val = "RESERVATION_DECLINED";
            break;
        case eOAIErrorCode::NOT_FOUND:
            val = "NOT_FOUND";
            break;
        case eOAIErrorCode::APPLE_PAYMENT_PROCESSING_CERTIFICATE_HASH_NOT_FOUND:
            val = "APPLE_PAYMENT_PROCESSING_CERTIFICATE_HASH_NOT_FOUND";
            break;
        case eOAIErrorCode::METHOD_NOT_ALLOWED:
            val = "METHOD_NOT_ALLOWED";
            break;
        case eOAIErrorCode::NOT_ACCEPTABLE:
            val = "NOT_ACCEPTABLE";
            break;
        case eOAIErrorCode::REQUEST_TIMEOUT:
            val = "REQUEST_TIMEOUT";
            break;
        case eOAIErrorCode::CONFLICT:
            val = "CONFLICT";
            break;
        case eOAIErrorCode::GONE:
            val = "GONE";
            break;
        case eOAIErrorCode::REQUEST_ENTITY_TOO_LARGE:
            val = "REQUEST_ENTITY_TOO_LARGE";
            break;
        case eOAIErrorCode::UNSUPPORTED_MEDIA_TYPE:
            val = "UNSUPPORTED_MEDIA_TYPE";
            break;
        case eOAIErrorCode::UNPROCESSABLE_ENTITY:
            val = "UNPROCESSABLE_ENTITY";
            break;
        case eOAIErrorCode::RATE_LIMITED:
            val = "RATE_LIMITED";
            break;
        case eOAIErrorCode::NOT_IMPLEMENTED:
            val = "NOT_IMPLEMENTED";
            break;
        case eOAIErrorCode::BAD_GATEWAY:
            val = "BAD_GATEWAY";
            break;
        case eOAIErrorCode::SERVICE_UNAVAILABLE:
            val = "SERVICE_UNAVAILABLE";
            break;
        case eOAIErrorCode::TEMPORARY_ERROR:
            val = "TEMPORARY_ERROR";
            break;
        case eOAIErrorCode::GATEWAY_TIMEOUT:
            val = "GATEWAY_TIMEOUT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIErrorCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIErrorCode::eOAIErrorCode OAIErrorCode::getValue() const {
    return m_value;
}

void OAIErrorCode::setValue(const OAIErrorCode::eOAIErrorCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIErrorCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
