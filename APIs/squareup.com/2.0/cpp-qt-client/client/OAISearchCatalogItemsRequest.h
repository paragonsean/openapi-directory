/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISearchCatalogItemsRequest.h
 *
 * Defines the request body for the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
 */

#ifndef OAISearchCatalogItemsRequest_H
#define OAISearchCatalogItemsRequest_H

#include <QJsonObject>

#include "OAICustomAttributeFilter.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICustomAttributeFilter;

class OAISearchCatalogItemsRequest : public OAIObject {
public:
    OAISearchCatalogItemsRequest();
    OAISearchCatalogItemsRequest(QString json);
    ~OAISearchCatalogItemsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getCategoryIds() const;
    void setCategoryIds(const QList<QString> &category_ids);
    bool is_category_ids_Set() const;
    bool is_category_ids_Valid() const;

    QString getCursor() const;
    void setCursor(const QString &cursor);
    bool is_cursor_Set() const;
    bool is_cursor_Valid() const;

    QList<OAICustomAttributeFilter> getCustomAttributeFilters() const;
    void setCustomAttributeFilters(const QList<OAICustomAttributeFilter> &custom_attribute_filters);
    bool is_custom_attribute_filters_Set() const;
    bool is_custom_attribute_filters_Valid() const;

    QList<QString> getEnabledLocationIds() const;
    void setEnabledLocationIds(const QList<QString> &enabled_location_ids);
    bool is_enabled_location_ids_Set() const;
    bool is_enabled_location_ids_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    QList<QString> getProductTypes() const;
    void setProductTypes(const QList<QString> &product_types);
    bool is_product_types_Set() const;
    bool is_product_types_Valid() const;

    QString getSortOrder() const;
    void setSortOrder(const QString &sort_order);
    bool is_sort_order_Set() const;
    bool is_sort_order_Valid() const;

    QList<QString> getStockLevels() const;
    void setStockLevels(const QList<QString> &stock_levels);
    bool is_stock_levels_Set() const;
    bool is_stock_levels_Valid() const;

    QString getTextFilter() const;
    void setTextFilter(const QString &text_filter);
    bool is_text_filter_Set() const;
    bool is_text_filter_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_category_ids;
    bool m_category_ids_isSet;
    bool m_category_ids_isValid;

    QString m_cursor;
    bool m_cursor_isSet;
    bool m_cursor_isValid;

    QList<OAICustomAttributeFilter> m_custom_attribute_filters;
    bool m_custom_attribute_filters_isSet;
    bool m_custom_attribute_filters_isValid;

    QList<QString> m_enabled_location_ids;
    bool m_enabled_location_ids_isSet;
    bool m_enabled_location_ids_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    QList<QString> m_product_types;
    bool m_product_types_isSet;
    bool m_product_types_isValid;

    QString m_sort_order;
    bool m_sort_order_isSet;
    bool m_sort_order_isValid;

    QList<QString> m_stock_levels;
    bool m_stock_levels_isSet;
    bool m_stock_levels_isValid;

    QString m_text_filter;
    bool m_text_filter_isSet;
    bool m_text_filter_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISearchCatalogItemsRequest)

#endif // OAISearchCatalogItemsRequest_H
