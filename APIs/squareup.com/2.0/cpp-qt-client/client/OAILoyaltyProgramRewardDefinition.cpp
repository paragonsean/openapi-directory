/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyProgramRewardDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyProgramRewardDefinition::OAILoyaltyProgramRewardDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyProgramRewardDefinition::OAILoyaltyProgramRewardDefinition() {
    this->initializeModel();
}

OAILoyaltyProgramRewardDefinition::~OAILoyaltyProgramRewardDefinition() {}

void OAILoyaltyProgramRewardDefinition::initializeModel() {

    m_catalog_object_ids_isSet = false;
    m_catalog_object_ids_isValid = false;

    m_discount_type_isSet = false;
    m_discount_type_isValid = false;

    m_fixed_discount_money_isSet = false;
    m_fixed_discount_money_isValid = false;

    m_max_discount_money_isSet = false;
    m_max_discount_money_isValid = false;

    m_percentage_discount_isSet = false;
    m_percentage_discount_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAILoyaltyProgramRewardDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyProgramRewardDefinition::fromJsonObject(QJsonObject json) {

    m_catalog_object_ids_isValid = ::OpenAPI::fromJsonValue(m_catalog_object_ids, json[QString("catalog_object_ids")]);
    m_catalog_object_ids_isSet = !json[QString("catalog_object_ids")].isNull() && m_catalog_object_ids_isValid;

    m_discount_type_isValid = ::OpenAPI::fromJsonValue(m_discount_type, json[QString("discount_type")]);
    m_discount_type_isSet = !json[QString("discount_type")].isNull() && m_discount_type_isValid;

    m_fixed_discount_money_isValid = ::OpenAPI::fromJsonValue(m_fixed_discount_money, json[QString("fixed_discount_money")]);
    m_fixed_discount_money_isSet = !json[QString("fixed_discount_money")].isNull() && m_fixed_discount_money_isValid;

    m_max_discount_money_isValid = ::OpenAPI::fromJsonValue(m_max_discount_money, json[QString("max_discount_money")]);
    m_max_discount_money_isSet = !json[QString("max_discount_money")].isNull() && m_max_discount_money_isValid;

    m_percentage_discount_isValid = ::OpenAPI::fromJsonValue(m_percentage_discount, json[QString("percentage_discount")]);
    m_percentage_discount_isSet = !json[QString("percentage_discount")].isNull() && m_percentage_discount_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAILoyaltyProgramRewardDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyProgramRewardDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_object_ids.size() > 0) {
        obj.insert(QString("catalog_object_ids"), ::OpenAPI::toJsonValue(m_catalog_object_ids));
    }
    if (m_discount_type_isSet) {
        obj.insert(QString("discount_type"), ::OpenAPI::toJsonValue(m_discount_type));
    }
    if (m_fixed_discount_money.isSet()) {
        obj.insert(QString("fixed_discount_money"), ::OpenAPI::toJsonValue(m_fixed_discount_money));
    }
    if (m_max_discount_money.isSet()) {
        obj.insert(QString("max_discount_money"), ::OpenAPI::toJsonValue(m_max_discount_money));
    }
    if (m_percentage_discount_isSet) {
        obj.insert(QString("percentage_discount"), ::OpenAPI::toJsonValue(m_percentage_discount));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

QList<QString> OAILoyaltyProgramRewardDefinition::getCatalogObjectIds() const {
    return m_catalog_object_ids;
}
void OAILoyaltyProgramRewardDefinition::setCatalogObjectIds(const QList<QString> &catalog_object_ids) {
    m_catalog_object_ids = catalog_object_ids;
    m_catalog_object_ids_isSet = true;
}

bool OAILoyaltyProgramRewardDefinition::is_catalog_object_ids_Set() const{
    return m_catalog_object_ids_isSet;
}

bool OAILoyaltyProgramRewardDefinition::is_catalog_object_ids_Valid() const{
    return m_catalog_object_ids_isValid;
}

QString OAILoyaltyProgramRewardDefinition::getDiscountType() const {
    return m_discount_type;
}
void OAILoyaltyProgramRewardDefinition::setDiscountType(const QString &discount_type) {
    m_discount_type = discount_type;
    m_discount_type_isSet = true;
}

bool OAILoyaltyProgramRewardDefinition::is_discount_type_Set() const{
    return m_discount_type_isSet;
}

bool OAILoyaltyProgramRewardDefinition::is_discount_type_Valid() const{
    return m_discount_type_isValid;
}

OAIMoney OAILoyaltyProgramRewardDefinition::getFixedDiscountMoney() const {
    return m_fixed_discount_money;
}
void OAILoyaltyProgramRewardDefinition::setFixedDiscountMoney(const OAIMoney &fixed_discount_money) {
    m_fixed_discount_money = fixed_discount_money;
    m_fixed_discount_money_isSet = true;
}

bool OAILoyaltyProgramRewardDefinition::is_fixed_discount_money_Set() const{
    return m_fixed_discount_money_isSet;
}

bool OAILoyaltyProgramRewardDefinition::is_fixed_discount_money_Valid() const{
    return m_fixed_discount_money_isValid;
}

OAIMoney OAILoyaltyProgramRewardDefinition::getMaxDiscountMoney() const {
    return m_max_discount_money;
}
void OAILoyaltyProgramRewardDefinition::setMaxDiscountMoney(const OAIMoney &max_discount_money) {
    m_max_discount_money = max_discount_money;
    m_max_discount_money_isSet = true;
}

bool OAILoyaltyProgramRewardDefinition::is_max_discount_money_Set() const{
    return m_max_discount_money_isSet;
}

bool OAILoyaltyProgramRewardDefinition::is_max_discount_money_Valid() const{
    return m_max_discount_money_isValid;
}

QString OAILoyaltyProgramRewardDefinition::getPercentageDiscount() const {
    return m_percentage_discount;
}
void OAILoyaltyProgramRewardDefinition::setPercentageDiscount(const QString &percentage_discount) {
    m_percentage_discount = percentage_discount;
    m_percentage_discount_isSet = true;
}

bool OAILoyaltyProgramRewardDefinition::is_percentage_discount_Set() const{
    return m_percentage_discount_isSet;
}

bool OAILoyaltyProgramRewardDefinition::is_percentage_discount_Valid() const{
    return m_percentage_discount_isValid;
}

QString OAILoyaltyProgramRewardDefinition::getScope() const {
    return m_scope;
}
void OAILoyaltyProgramRewardDefinition::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAILoyaltyProgramRewardDefinition::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAILoyaltyProgramRewardDefinition::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAILoyaltyProgramRewardDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_object_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_discount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_discount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyProgramRewardDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_discount_type_isValid && m_scope_isValid && true;
}

} // namespace OpenAPI
