/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICatalogItem.h
 *
 * A [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance of the &#x60;ITEM&#x60; type, also referred to as an item, in the catalog.
 */

#ifndef OAICatalogItem_H
#define OAICatalogItem_H

#include <QJsonObject>

#include "OAICatalogItemModifierListInfo.h"
#include "OAICatalogItemOptionForItem.h"
#include "OAICatalogObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICatalogItemOptionForItem;
class OAICatalogItemModifierListInfo;
class OAICatalogObject;

class OAICatalogItem : public OAIObject {
public:
    OAICatalogItem();
    OAICatalogItem(QString json);
    ~OAICatalogItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAbbreviation() const;
    void setAbbreviation(const QString &abbreviation);
    bool is_abbreviation_Set() const;
    bool is_abbreviation_Valid() const;

    bool isAvailableElectronically() const;
    void setAvailableElectronically(const bool &available_electronically);
    bool is_available_electronically_Set() const;
    bool is_available_electronically_Valid() const;

    bool isAvailableForPickup() const;
    void setAvailableForPickup(const bool &available_for_pickup);
    bool is_available_for_pickup_Set() const;
    bool is_available_for_pickup_Valid() const;

    bool isAvailableOnline() const;
    void setAvailableOnline(const bool &available_online);
    bool is_available_online_Set() const;
    bool is_available_online_Valid() const;

    QString getCategoryId() const;
    void setCategoryId(const QString &category_id);
    bool is_category_id_Set() const;
    bool is_category_id_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<OAICatalogItemOptionForItem> getItemOptions() const;
    void setItemOptions(const QList<OAICatalogItemOptionForItem> &item_options);
    bool is_item_options_Set() const;
    bool is_item_options_Valid() const;

    QString getLabelColor() const;
    void setLabelColor(const QString &label_color);
    bool is_label_color_Set() const;
    bool is_label_color_Valid() const;

    QList<OAICatalogItemModifierListInfo> getModifierListInfo() const;
    void setModifierListInfo(const QList<OAICatalogItemModifierListInfo> &modifier_list_info);
    bool is_modifier_list_info_Set() const;
    bool is_modifier_list_info_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getProductType() const;
    void setProductType(const QString &product_type);
    bool is_product_type_Set() const;
    bool is_product_type_Valid() const;

    bool isSkipModifierScreen() const;
    void setSkipModifierScreen(const bool &skip_modifier_screen);
    bool is_skip_modifier_screen_Set() const;
    bool is_skip_modifier_screen_Valid() const;

    QString getSortName() const;
    void setSortName(const QString &sort_name);
    bool is_sort_name_Set() const;
    bool is_sort_name_Valid() const;

    QList<QString> getTaxIds() const;
    void setTaxIds(const QList<QString> &tax_ids);
    bool is_tax_ids_Set() const;
    bool is_tax_ids_Valid() const;

    QList<OAICatalogObject> getVariations() const;
    void setVariations(const QList<OAICatalogObject> &variations);
    bool is_variations_Set() const;
    bool is_variations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_abbreviation;
    bool m_abbreviation_isSet;
    bool m_abbreviation_isValid;

    bool m_available_electronically;
    bool m_available_electronically_isSet;
    bool m_available_electronically_isValid;

    bool m_available_for_pickup;
    bool m_available_for_pickup_isSet;
    bool m_available_for_pickup_isValid;

    bool m_available_online;
    bool m_available_online_isSet;
    bool m_available_online_isValid;

    QString m_category_id;
    bool m_category_id_isSet;
    bool m_category_id_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<OAICatalogItemOptionForItem> m_item_options;
    bool m_item_options_isSet;
    bool m_item_options_isValid;

    QString m_label_color;
    bool m_label_color_isSet;
    bool m_label_color_isValid;

    QList<OAICatalogItemModifierListInfo> m_modifier_list_info;
    bool m_modifier_list_info_isSet;
    bool m_modifier_list_info_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_product_type;
    bool m_product_type_isSet;
    bool m_product_type_isValid;

    bool m_skip_modifier_screen;
    bool m_skip_modifier_screen_isSet;
    bool m_skip_modifier_screen_isValid;

    QString m_sort_name;
    bool m_sort_name_isSet;
    bool m_sort_name_isValid;

    QList<QString> m_tax_ids;
    bool m_tax_ids_isSet;
    bool m_tax_ids_isValid;

    QList<OAICatalogObject> m_variations;
    bool m_variations_isSet;
    bool m_variations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICatalogItem)

#endif // OAICatalogItem_H
