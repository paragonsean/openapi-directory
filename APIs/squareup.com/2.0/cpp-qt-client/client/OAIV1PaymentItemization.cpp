/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1PaymentItemization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV1PaymentItemization::OAIV1PaymentItemization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV1PaymentItemization::OAIV1PaymentItemization() {
    this->initializeModel();
}

OAIV1PaymentItemization::~OAIV1PaymentItemization() {}

void OAIV1PaymentItemization::initializeModel() {

    m_discount_money_isSet = false;
    m_discount_money_isValid = false;

    m_discounts_isSet = false;
    m_discounts_isValid = false;

    m_gross_sales_money_isSet = false;
    m_gross_sales_money_isValid = false;

    m_item_detail_isSet = false;
    m_item_detail_isValid = false;

    m_item_variation_name_isSet = false;
    m_item_variation_name_isValid = false;

    m_itemization_type_isSet = false;
    m_itemization_type_isValid = false;

    m_modifiers_isSet = false;
    m_modifiers_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_net_sales_money_isSet = false;
    m_net_sales_money_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_single_quantity_money_isSet = false;
    m_single_quantity_money_isValid = false;

    m_taxes_isSet = false;
    m_taxes_isValid = false;

    m_total_money_isSet = false;
    m_total_money_isValid = false;
}

void OAIV1PaymentItemization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV1PaymentItemization::fromJsonObject(QJsonObject json) {

    m_discount_money_isValid = ::OpenAPI::fromJsonValue(m_discount_money, json[QString("discount_money")]);
    m_discount_money_isSet = !json[QString("discount_money")].isNull() && m_discount_money_isValid;

    m_discounts_isValid = ::OpenAPI::fromJsonValue(m_discounts, json[QString("discounts")]);
    m_discounts_isSet = !json[QString("discounts")].isNull() && m_discounts_isValid;

    m_gross_sales_money_isValid = ::OpenAPI::fromJsonValue(m_gross_sales_money, json[QString("gross_sales_money")]);
    m_gross_sales_money_isSet = !json[QString("gross_sales_money")].isNull() && m_gross_sales_money_isValid;

    m_item_detail_isValid = ::OpenAPI::fromJsonValue(m_item_detail, json[QString("item_detail")]);
    m_item_detail_isSet = !json[QString("item_detail")].isNull() && m_item_detail_isValid;

    m_item_variation_name_isValid = ::OpenAPI::fromJsonValue(m_item_variation_name, json[QString("item_variation_name")]);
    m_item_variation_name_isSet = !json[QString("item_variation_name")].isNull() && m_item_variation_name_isValid;

    m_itemization_type_isValid = ::OpenAPI::fromJsonValue(m_itemization_type, json[QString("itemization_type")]);
    m_itemization_type_isSet = !json[QString("itemization_type")].isNull() && m_itemization_type_isValid;

    m_modifiers_isValid = ::OpenAPI::fromJsonValue(m_modifiers, json[QString("modifiers")]);
    m_modifiers_isSet = !json[QString("modifiers")].isNull() && m_modifiers_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_net_sales_money_isValid = ::OpenAPI::fromJsonValue(m_net_sales_money, json[QString("net_sales_money")]);
    m_net_sales_money_isSet = !json[QString("net_sales_money")].isNull() && m_net_sales_money_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_single_quantity_money_isValid = ::OpenAPI::fromJsonValue(m_single_quantity_money, json[QString("single_quantity_money")]);
    m_single_quantity_money_isSet = !json[QString("single_quantity_money")].isNull() && m_single_quantity_money_isValid;

    m_taxes_isValid = ::OpenAPI::fromJsonValue(m_taxes, json[QString("taxes")]);
    m_taxes_isSet = !json[QString("taxes")].isNull() && m_taxes_isValid;

    m_total_money_isValid = ::OpenAPI::fromJsonValue(m_total_money, json[QString("total_money")]);
    m_total_money_isSet = !json[QString("total_money")].isNull() && m_total_money_isValid;
}

QString OAIV1PaymentItemization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV1PaymentItemization::asJsonObject() const {
    QJsonObject obj;
    if (m_discount_money.isSet()) {
        obj.insert(QString("discount_money"), ::OpenAPI::toJsonValue(m_discount_money));
    }
    if (m_discounts.size() > 0) {
        obj.insert(QString("discounts"), ::OpenAPI::toJsonValue(m_discounts));
    }
    if (m_gross_sales_money.isSet()) {
        obj.insert(QString("gross_sales_money"), ::OpenAPI::toJsonValue(m_gross_sales_money));
    }
    if (m_item_detail.isSet()) {
        obj.insert(QString("item_detail"), ::OpenAPI::toJsonValue(m_item_detail));
    }
    if (m_item_variation_name_isSet) {
        obj.insert(QString("item_variation_name"), ::OpenAPI::toJsonValue(m_item_variation_name));
    }
    if (m_itemization_type_isSet) {
        obj.insert(QString("itemization_type"), ::OpenAPI::toJsonValue(m_itemization_type));
    }
    if (m_modifiers.size() > 0) {
        obj.insert(QString("modifiers"), ::OpenAPI::toJsonValue(m_modifiers));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_net_sales_money.isSet()) {
        obj.insert(QString("net_sales_money"), ::OpenAPI::toJsonValue(m_net_sales_money));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_single_quantity_money.isSet()) {
        obj.insert(QString("single_quantity_money"), ::OpenAPI::toJsonValue(m_single_quantity_money));
    }
    if (m_taxes.size() > 0) {
        obj.insert(QString("taxes"), ::OpenAPI::toJsonValue(m_taxes));
    }
    if (m_total_money.isSet()) {
        obj.insert(QString("total_money"), ::OpenAPI::toJsonValue(m_total_money));
    }
    return obj;
}

OAIV1Money OAIV1PaymentItemization::getDiscountMoney() const {
    return m_discount_money;
}
void OAIV1PaymentItemization::setDiscountMoney(const OAIV1Money &discount_money) {
    m_discount_money = discount_money;
    m_discount_money_isSet = true;
}

bool OAIV1PaymentItemization::is_discount_money_Set() const{
    return m_discount_money_isSet;
}

bool OAIV1PaymentItemization::is_discount_money_Valid() const{
    return m_discount_money_isValid;
}

QList<OAIV1PaymentDiscount> OAIV1PaymentItemization::getDiscounts() const {
    return m_discounts;
}
void OAIV1PaymentItemization::setDiscounts(const QList<OAIV1PaymentDiscount> &discounts) {
    m_discounts = discounts;
    m_discounts_isSet = true;
}

bool OAIV1PaymentItemization::is_discounts_Set() const{
    return m_discounts_isSet;
}

bool OAIV1PaymentItemization::is_discounts_Valid() const{
    return m_discounts_isValid;
}

OAIV1Money OAIV1PaymentItemization::getGrossSalesMoney() const {
    return m_gross_sales_money;
}
void OAIV1PaymentItemization::setGrossSalesMoney(const OAIV1Money &gross_sales_money) {
    m_gross_sales_money = gross_sales_money;
    m_gross_sales_money_isSet = true;
}

bool OAIV1PaymentItemization::is_gross_sales_money_Set() const{
    return m_gross_sales_money_isSet;
}

bool OAIV1PaymentItemization::is_gross_sales_money_Valid() const{
    return m_gross_sales_money_isValid;
}

OAIV1PaymentItemDetail OAIV1PaymentItemization::getItemDetail() const {
    return m_item_detail;
}
void OAIV1PaymentItemization::setItemDetail(const OAIV1PaymentItemDetail &item_detail) {
    m_item_detail = item_detail;
    m_item_detail_isSet = true;
}

bool OAIV1PaymentItemization::is_item_detail_Set() const{
    return m_item_detail_isSet;
}

bool OAIV1PaymentItemization::is_item_detail_Valid() const{
    return m_item_detail_isValid;
}

QString OAIV1PaymentItemization::getItemVariationName() const {
    return m_item_variation_name;
}
void OAIV1PaymentItemization::setItemVariationName(const QString &item_variation_name) {
    m_item_variation_name = item_variation_name;
    m_item_variation_name_isSet = true;
}

bool OAIV1PaymentItemization::is_item_variation_name_Set() const{
    return m_item_variation_name_isSet;
}

bool OAIV1PaymentItemization::is_item_variation_name_Valid() const{
    return m_item_variation_name_isValid;
}

QString OAIV1PaymentItemization::getItemizationType() const {
    return m_itemization_type;
}
void OAIV1PaymentItemization::setItemizationType(const QString &itemization_type) {
    m_itemization_type = itemization_type;
    m_itemization_type_isSet = true;
}

bool OAIV1PaymentItemization::is_itemization_type_Set() const{
    return m_itemization_type_isSet;
}

bool OAIV1PaymentItemization::is_itemization_type_Valid() const{
    return m_itemization_type_isValid;
}

QList<OAIV1PaymentModifier> OAIV1PaymentItemization::getModifiers() const {
    return m_modifiers;
}
void OAIV1PaymentItemization::setModifiers(const QList<OAIV1PaymentModifier> &modifiers) {
    m_modifiers = modifiers;
    m_modifiers_isSet = true;
}

bool OAIV1PaymentItemization::is_modifiers_Set() const{
    return m_modifiers_isSet;
}

bool OAIV1PaymentItemization::is_modifiers_Valid() const{
    return m_modifiers_isValid;
}

QString OAIV1PaymentItemization::getName() const {
    return m_name;
}
void OAIV1PaymentItemization::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIV1PaymentItemization::is_name_Set() const{
    return m_name_isSet;
}

bool OAIV1PaymentItemization::is_name_Valid() const{
    return m_name_isValid;
}

OAIV1Money OAIV1PaymentItemization::getNetSalesMoney() const {
    return m_net_sales_money;
}
void OAIV1PaymentItemization::setNetSalesMoney(const OAIV1Money &net_sales_money) {
    m_net_sales_money = net_sales_money;
    m_net_sales_money_isSet = true;
}

bool OAIV1PaymentItemization::is_net_sales_money_Set() const{
    return m_net_sales_money_isSet;
}

bool OAIV1PaymentItemization::is_net_sales_money_Valid() const{
    return m_net_sales_money_isValid;
}

QString OAIV1PaymentItemization::getNotes() const {
    return m_notes;
}
void OAIV1PaymentItemization::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIV1PaymentItemization::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIV1PaymentItemization::is_notes_Valid() const{
    return m_notes_isValid;
}

double OAIV1PaymentItemization::getQuantity() const {
    return m_quantity;
}
void OAIV1PaymentItemization::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIV1PaymentItemization::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIV1PaymentItemization::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIV1Money OAIV1PaymentItemization::getSingleQuantityMoney() const {
    return m_single_quantity_money;
}
void OAIV1PaymentItemization::setSingleQuantityMoney(const OAIV1Money &single_quantity_money) {
    m_single_quantity_money = single_quantity_money;
    m_single_quantity_money_isSet = true;
}

bool OAIV1PaymentItemization::is_single_quantity_money_Set() const{
    return m_single_quantity_money_isSet;
}

bool OAIV1PaymentItemization::is_single_quantity_money_Valid() const{
    return m_single_quantity_money_isValid;
}

QList<OAIV1PaymentTax> OAIV1PaymentItemization::getTaxes() const {
    return m_taxes;
}
void OAIV1PaymentItemization::setTaxes(const QList<OAIV1PaymentTax> &taxes) {
    m_taxes = taxes;
    m_taxes_isSet = true;
}

bool OAIV1PaymentItemization::is_taxes_Set() const{
    return m_taxes_isSet;
}

bool OAIV1PaymentItemization::is_taxes_Valid() const{
    return m_taxes_isValid;
}

OAIV1Money OAIV1PaymentItemization::getTotalMoney() const {
    return m_total_money;
}
void OAIV1PaymentItemization::setTotalMoney(const OAIV1Money &total_money) {
    m_total_money = total_money;
    m_total_money_isSet = true;
}

bool OAIV1PaymentItemization::is_total_money_Set() const{
    return m_total_money_isSet;
}

bool OAIV1PaymentItemization::is_total_money_Valid() const{
    return m_total_money_isValid;
}

bool OAIV1PaymentItemization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gross_sales_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_variation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_itemization_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_sales_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_quantity_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_money.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV1PaymentItemization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
