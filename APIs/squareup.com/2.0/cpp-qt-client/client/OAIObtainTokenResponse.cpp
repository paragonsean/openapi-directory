/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObtainTokenResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObtainTokenResponse::OAIObtainTokenResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObtainTokenResponse::OAIObtainTokenResponse() {
    this->initializeModel();
}

OAIObtainTokenResponse::~OAIObtainTokenResponse() {}

void OAIObtainTokenResponse::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_id_token_isSet = false;
    m_id_token_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;

    m_short_lived_isSet = false;
    m_short_lived_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_token_type_isSet = false;
    m_token_type_isValid = false;
}

void OAIObtainTokenResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObtainTokenResponse::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("access_token")]);
    m_access_token_isSet = !json[QString("access_token")].isNull() && m_access_token_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_id_token_isValid = ::OpenAPI::fromJsonValue(m_id_token, json[QString("id_token")]);
    m_id_token_isSet = !json[QString("id_token")].isNull() && m_id_token_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("merchant_id")]);
    m_merchant_id_isSet = !json[QString("merchant_id")].isNull() && m_merchant_id_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("plan_id")]);
    m_plan_id_isSet = !json[QString("plan_id")].isNull() && m_plan_id_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refresh_token")]);
    m_refresh_token_isSet = !json[QString("refresh_token")].isNull() && m_refresh_token_isValid;

    m_short_lived_isValid = ::OpenAPI::fromJsonValue(m_short_lived, json[QString("short_lived")]);
    m_short_lived_isSet = !json[QString("short_lived")].isNull() && m_short_lived_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscription_id")]);
    m_subscription_id_isSet = !json[QString("subscription_id")].isNull() && m_subscription_id_isValid;

    m_token_type_isValid = ::OpenAPI::fromJsonValue(m_token_type, json[QString("token_type")]);
    m_token_type_isSet = !json[QString("token_type")].isNull() && m_token_type_isValid;
}

QString OAIObtainTokenResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObtainTokenResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("access_token"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_id_token_isSet) {
        obj.insert(QString("id_token"), ::OpenAPI::toJsonValue(m_id_token));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("merchant_id"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("plan_id"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refresh_token"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    if (m_short_lived_isSet) {
        obj.insert(QString("short_lived"), ::OpenAPI::toJsonValue(m_short_lived));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscription_id"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_token_type_isSet) {
        obj.insert(QString("token_type"), ::OpenAPI::toJsonValue(m_token_type));
    }
    return obj;
}

QString OAIObtainTokenResponse::getAccessToken() const {
    return m_access_token;
}
void OAIObtainTokenResponse::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIObtainTokenResponse::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIObtainTokenResponse::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QString OAIObtainTokenResponse::getExpiresAt() const {
    return m_expires_at;
}
void OAIObtainTokenResponse::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIObtainTokenResponse::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIObtainTokenResponse::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAIObtainTokenResponse::getIdToken() const {
    return m_id_token;
}
void OAIObtainTokenResponse::setIdToken(const QString &id_token) {
    m_id_token = id_token;
    m_id_token_isSet = true;
}

bool OAIObtainTokenResponse::is_id_token_Set() const{
    return m_id_token_isSet;
}

bool OAIObtainTokenResponse::is_id_token_Valid() const{
    return m_id_token_isValid;
}

QString OAIObtainTokenResponse::getMerchantId() const {
    return m_merchant_id;
}
void OAIObtainTokenResponse::setMerchantId(const QString &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAIObtainTokenResponse::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAIObtainTokenResponse::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

QString OAIObtainTokenResponse::getPlanId() const {
    return m_plan_id;
}
void OAIObtainTokenResponse::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAIObtainTokenResponse::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAIObtainTokenResponse::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

QString OAIObtainTokenResponse::getRefreshToken() const {
    return m_refresh_token;
}
void OAIObtainTokenResponse::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIObtainTokenResponse::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIObtainTokenResponse::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

bool OAIObtainTokenResponse::isShortLived() const {
    return m_short_lived;
}
void OAIObtainTokenResponse::setShortLived(const bool &short_lived) {
    m_short_lived = short_lived;
    m_short_lived_isSet = true;
}

bool OAIObtainTokenResponse::is_short_lived_Set() const{
    return m_short_lived_isSet;
}

bool OAIObtainTokenResponse::is_short_lived_Valid() const{
    return m_short_lived_isValid;
}

QString OAIObtainTokenResponse::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIObtainTokenResponse::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIObtainTokenResponse::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIObtainTokenResponse::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIObtainTokenResponse::getTokenType() const {
    return m_token_type;
}
void OAIObtainTokenResponse::setTokenType(const QString &token_type) {
    m_token_type = token_type;
    m_token_type_isSet = true;
}

bool OAIObtainTokenResponse::is_token_type_Set() const{
    return m_token_type_isSet;
}

bool OAIObtainTokenResponse::is_token_type_Valid() const{
    return m_token_type_isValid;
}

bool OAIObtainTokenResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_lived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObtainTokenResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
