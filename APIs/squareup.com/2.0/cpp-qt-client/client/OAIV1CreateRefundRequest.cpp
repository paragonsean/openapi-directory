/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1CreateRefundRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV1CreateRefundRequest::OAIV1CreateRefundRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV1CreateRefundRequest::OAIV1CreateRefundRequest() {
    this->initializeModel();
}

OAIV1CreateRefundRequest::~OAIV1CreateRefundRequest() {}

void OAIV1CreateRefundRequest::initializeModel() {

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_refunded_money_isSet = false;
    m_refunded_money_isValid = false;

    m_request_idempotence_key_isSet = false;
    m_request_idempotence_key_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIV1CreateRefundRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV1CreateRefundRequest::fromJsonObject(QJsonObject json) {

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("payment_id")]);
    m_payment_id_isSet = !json[QString("payment_id")].isNull() && m_payment_id_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_refunded_money_isValid = ::OpenAPI::fromJsonValue(m_refunded_money, json[QString("refunded_money")]);
    m_refunded_money_isSet = !json[QString("refunded_money")].isNull() && m_refunded_money_isValid;

    m_request_idempotence_key_isValid = ::OpenAPI::fromJsonValue(m_request_idempotence_key, json[QString("request_idempotence_key")]);
    m_request_idempotence_key_isSet = !json[QString("request_idempotence_key")].isNull() && m_request_idempotence_key_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIV1CreateRefundRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV1CreateRefundRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_payment_id_isSet) {
        obj.insert(QString("payment_id"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_refunded_money.isSet()) {
        obj.insert(QString("refunded_money"), ::OpenAPI::toJsonValue(m_refunded_money));
    }
    if (m_request_idempotence_key_isSet) {
        obj.insert(QString("request_idempotence_key"), ::OpenAPI::toJsonValue(m_request_idempotence_key));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIV1CreateRefundRequest::getPaymentId() const {
    return m_payment_id;
}
void OAIV1CreateRefundRequest::setPaymentId(const QString &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAIV1CreateRefundRequest::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAIV1CreateRefundRequest::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

QString OAIV1CreateRefundRequest::getReason() const {
    return m_reason;
}
void OAIV1CreateRefundRequest::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIV1CreateRefundRequest::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIV1CreateRefundRequest::is_reason_Valid() const{
    return m_reason_isValid;
}

OAIV1Money OAIV1CreateRefundRequest::getRefundedMoney() const {
    return m_refunded_money;
}
void OAIV1CreateRefundRequest::setRefundedMoney(const OAIV1Money &refunded_money) {
    m_refunded_money = refunded_money;
    m_refunded_money_isSet = true;
}

bool OAIV1CreateRefundRequest::is_refunded_money_Set() const{
    return m_refunded_money_isSet;
}

bool OAIV1CreateRefundRequest::is_refunded_money_Valid() const{
    return m_refunded_money_isValid;
}

QString OAIV1CreateRefundRequest::getRequestIdempotenceKey() const {
    return m_request_idempotence_key;
}
void OAIV1CreateRefundRequest::setRequestIdempotenceKey(const QString &request_idempotence_key) {
    m_request_idempotence_key = request_idempotence_key;
    m_request_idempotence_key_isSet = true;
}

bool OAIV1CreateRefundRequest::is_request_idempotence_key_Set() const{
    return m_request_idempotence_key_isSet;
}

bool OAIV1CreateRefundRequest::is_request_idempotence_key_Valid() const{
    return m_request_idempotence_key_isValid;
}

QString OAIV1CreateRefundRequest::getType() const {
    return m_type;
}
void OAIV1CreateRefundRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIV1CreateRefundRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIV1CreateRefundRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIV1CreateRefundRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_idempotence_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV1CreateRefundRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_payment_id_isValid && m_reason_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
