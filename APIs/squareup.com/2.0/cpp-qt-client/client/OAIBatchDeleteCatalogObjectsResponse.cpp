/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDeleteCatalogObjectsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDeleteCatalogObjectsResponse::OAIBatchDeleteCatalogObjectsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDeleteCatalogObjectsResponse::OAIBatchDeleteCatalogObjectsResponse() {
    this->initializeModel();
}

OAIBatchDeleteCatalogObjectsResponse::~OAIBatchDeleteCatalogObjectsResponse() {}

void OAIBatchDeleteCatalogObjectsResponse::initializeModel() {

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_deleted_object_ids_isSet = false;
    m_deleted_object_ids_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;
}

void OAIBatchDeleteCatalogObjectsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDeleteCatalogObjectsResponse::fromJsonObject(QJsonObject json) {

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("deleted_at")]);
    m_deleted_at_isSet = !json[QString("deleted_at")].isNull() && m_deleted_at_isValid;

    m_deleted_object_ids_isValid = ::OpenAPI::fromJsonValue(m_deleted_object_ids, json[QString("deleted_object_ids")]);
    m_deleted_object_ids_isSet = !json[QString("deleted_object_ids")].isNull() && m_deleted_object_ids_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;
}

QString OAIBatchDeleteCatalogObjectsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDeleteCatalogObjectsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_deleted_at_isSet) {
        obj.insert(QString("deleted_at"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_deleted_object_ids.size() > 0) {
        obj.insert(QString("deleted_object_ids"), ::OpenAPI::toJsonValue(m_deleted_object_ids));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    return obj;
}

QString OAIBatchDeleteCatalogObjectsResponse::getDeletedAt() const {
    return m_deleted_at;
}
void OAIBatchDeleteCatalogObjectsResponse::setDeletedAt(const QString &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIBatchDeleteCatalogObjectsResponse::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIBatchDeleteCatalogObjectsResponse::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

QList<QString> OAIBatchDeleteCatalogObjectsResponse::getDeletedObjectIds() const {
    return m_deleted_object_ids;
}
void OAIBatchDeleteCatalogObjectsResponse::setDeletedObjectIds(const QList<QString> &deleted_object_ids) {
    m_deleted_object_ids = deleted_object_ids;
    m_deleted_object_ids_isSet = true;
}

bool OAIBatchDeleteCatalogObjectsResponse::is_deleted_object_ids_Set() const{
    return m_deleted_object_ids_isSet;
}

bool OAIBatchDeleteCatalogObjectsResponse::is_deleted_object_ids_Valid() const{
    return m_deleted_object_ids_isValid;
}

QList<OAIError> OAIBatchDeleteCatalogObjectsResponse::getErrors() const {
    return m_errors;
}
void OAIBatchDeleteCatalogObjectsResponse::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIBatchDeleteCatalogObjectsResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIBatchDeleteCatalogObjectsResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAIBatchDeleteCatalogObjectsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_object_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDeleteCatalogObjectsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
