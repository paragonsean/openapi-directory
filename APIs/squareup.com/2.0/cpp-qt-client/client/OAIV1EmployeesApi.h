/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIV1EmployeesApi_H
#define OAI_OAIV1EmployeesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIV1Employee.h"
#include "OAIV1EmployeeRole.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIV1EmployeesApi : public QObject {
    Q_OBJECT

public:
    OAIV1EmployeesApi(const int timeOut = 0);
    ~OAIV1EmployeesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oaiv1_employee OAIV1Employee [required]
    */
    virtual void createEmployee(const OAIV1Employee &oaiv1_employee);

    /**
    * @param[in]  oaiv1_employee_role OAIV1EmployeeRole [required]
    */
    virtual void createEmployeeRole(const OAIV1EmployeeRole &oaiv1_employee_role);

    /**
    * @param[in]  order QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  batch_token QString [optional]
    */
    virtual void listEmployeeRoles(const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &batch_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order QString [optional]
    * @param[in]  begin_updated_at QString [optional]
    * @param[in]  end_updated_at QString [optional]
    * @param[in]  begin_created_at QString [optional]
    * @param[in]  end_created_at QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  external_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  batch_token QString [optional]
    */
    virtual void listEmployees(const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &begin_updated_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_updated_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &begin_created_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_created_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &batch_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employee_id QString [required]
    */
    virtual void retrieveEmployee(const QString &employee_id);

    /**
    * @param[in]  role_id QString [required]
    */
    virtual void retrieveEmployeeRole(const QString &role_id);

    /**
    * @param[in]  employee_id QString [required]
    * @param[in]  oaiv1_employee OAIV1Employee [required]
    */
    virtual void updateEmployee(const QString &employee_id, const OAIV1Employee &oaiv1_employee);

    /**
    * @param[in]  role_id QString [required]
    * @param[in]  oaiv1_employee_role OAIV1EmployeeRole [required]
    */
    virtual void updateEmployeeRole(const QString &role_id, const OAIV1EmployeeRole &oaiv1_employee_role);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createEmployeeCallback(OAIHttpRequestWorker *worker);
    void createEmployeeRoleCallback(OAIHttpRequestWorker *worker);
    void listEmployeeRolesCallback(OAIHttpRequestWorker *worker);
    void listEmployeesCallback(OAIHttpRequestWorker *worker);
    void retrieveEmployeeCallback(OAIHttpRequestWorker *worker);
    void retrieveEmployeeRoleCallback(OAIHttpRequestWorker *worker);
    void updateEmployeeCallback(OAIHttpRequestWorker *worker);
    void updateEmployeeRoleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createEmployeeSignal(OAIV1Employee summary);
    void createEmployeeRoleSignal(OAIV1EmployeeRole summary);
    void listEmployeeRolesSignal(QList<OAIV1EmployeeRole> summary);
    void listEmployeesSignal(QList<OAIV1Employee> summary);
    void retrieveEmployeeSignal(OAIV1Employee summary);
    void retrieveEmployeeRoleSignal(OAIV1EmployeeRole summary);
    void updateEmployeeSignal(OAIV1Employee summary);
    void updateEmployeeRoleSignal(OAIV1EmployeeRole summary);


    void createEmployeeSignalFull(OAIHttpRequestWorker *worker, OAIV1Employee summary);
    void createEmployeeRoleSignalFull(OAIHttpRequestWorker *worker, OAIV1EmployeeRole summary);
    void listEmployeeRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIV1EmployeeRole> summary);
    void listEmployeesSignalFull(OAIHttpRequestWorker *worker, QList<OAIV1Employee> summary);
    void retrieveEmployeeSignalFull(OAIHttpRequestWorker *worker, OAIV1Employee summary);
    void retrieveEmployeeRoleSignalFull(OAIHttpRequestWorker *worker, OAIV1EmployeeRole summary);
    void updateEmployeeSignalFull(OAIHttpRequestWorker *worker, OAIV1Employee summary);
    void updateEmployeeRoleSignalFull(OAIHttpRequestWorker *worker, OAIV1EmployeeRole summary);

    Q_DECL_DEPRECATED_X("Use createEmployeeSignalError() instead")
    void createEmployeeSignalE(OAIV1Employee summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEmployeeSignalError(OAIV1Employee summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createEmployeeRoleSignalError() instead")
    void createEmployeeRoleSignalE(OAIV1EmployeeRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEmployeeRoleSignalError(OAIV1EmployeeRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEmployeeRolesSignalError() instead")
    void listEmployeeRolesSignalE(QList<OAIV1EmployeeRole> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEmployeeRolesSignalError(QList<OAIV1EmployeeRole> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEmployeesSignalError() instead")
    void listEmployeesSignalE(QList<OAIV1Employee> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEmployeesSignalError(QList<OAIV1Employee> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveEmployeeSignalError() instead")
    void retrieveEmployeeSignalE(OAIV1Employee summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveEmployeeSignalError(OAIV1Employee summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveEmployeeRoleSignalError() instead")
    void retrieveEmployeeRoleSignalE(OAIV1EmployeeRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveEmployeeRoleSignalError(OAIV1EmployeeRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEmployeeSignalError() instead")
    void updateEmployeeSignalE(OAIV1Employee summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEmployeeSignalError(OAIV1Employee summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEmployeeRoleSignalError() instead")
    void updateEmployeeRoleSignalE(OAIV1EmployeeRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEmployeeRoleSignalError(OAIV1EmployeeRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createEmployeeSignalErrorFull() instead")
    void createEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createEmployeeRoleSignalErrorFull() instead")
    void createEmployeeRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEmployeeRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEmployeeRolesSignalErrorFull() instead")
    void listEmployeeRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEmployeeRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEmployeesSignalErrorFull() instead")
    void listEmployeesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEmployeesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveEmployeeSignalErrorFull() instead")
    void retrieveEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveEmployeeRoleSignalErrorFull() instead")
    void retrieveEmployeeRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveEmployeeRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEmployeeSignalErrorFull() instead")
    void updateEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEmployeeRoleSignalErrorFull() instead")
    void updateEmployeeRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEmployeeRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
