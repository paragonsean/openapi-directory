/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemVariationLocationOverrides.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemVariationLocationOverrides::OAIItemVariationLocationOverrides(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemVariationLocationOverrides::OAIItemVariationLocationOverrides() {
    this->initializeModel();
}

OAIItemVariationLocationOverrides::~OAIItemVariationLocationOverrides() {}

void OAIItemVariationLocationOverrides::initializeModel() {

    m_inventory_alert_threshold_isSet = false;
    m_inventory_alert_threshold_isValid = false;

    m_inventory_alert_type_isSet = false;
    m_inventory_alert_type_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_price_money_isSet = false;
    m_price_money_isValid = false;

    m_pricing_type_isSet = false;
    m_pricing_type_isValid = false;

    m_track_inventory_isSet = false;
    m_track_inventory_isValid = false;
}

void OAIItemVariationLocationOverrides::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemVariationLocationOverrides::fromJsonObject(QJsonObject json) {

    m_inventory_alert_threshold_isValid = ::OpenAPI::fromJsonValue(m_inventory_alert_threshold, json[QString("inventory_alert_threshold")]);
    m_inventory_alert_threshold_isSet = !json[QString("inventory_alert_threshold")].isNull() && m_inventory_alert_threshold_isValid;

    m_inventory_alert_type_isValid = ::OpenAPI::fromJsonValue(m_inventory_alert_type, json[QString("inventory_alert_type")]);
    m_inventory_alert_type_isSet = !json[QString("inventory_alert_type")].isNull() && m_inventory_alert_type_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_price_money_isValid = ::OpenAPI::fromJsonValue(m_price_money, json[QString("price_money")]);
    m_price_money_isSet = !json[QString("price_money")].isNull() && m_price_money_isValid;

    m_pricing_type_isValid = ::OpenAPI::fromJsonValue(m_pricing_type, json[QString("pricing_type")]);
    m_pricing_type_isSet = !json[QString("pricing_type")].isNull() && m_pricing_type_isValid;

    m_track_inventory_isValid = ::OpenAPI::fromJsonValue(m_track_inventory, json[QString("track_inventory")]);
    m_track_inventory_isSet = !json[QString("track_inventory")].isNull() && m_track_inventory_isValid;
}

QString OAIItemVariationLocationOverrides::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemVariationLocationOverrides::asJsonObject() const {
    QJsonObject obj;
    if (m_inventory_alert_threshold_isSet) {
        obj.insert(QString("inventory_alert_threshold"), ::OpenAPI::toJsonValue(m_inventory_alert_threshold));
    }
    if (m_inventory_alert_type_isSet) {
        obj.insert(QString("inventory_alert_type"), ::OpenAPI::toJsonValue(m_inventory_alert_type));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_price_money.isSet()) {
        obj.insert(QString("price_money"), ::OpenAPI::toJsonValue(m_price_money));
    }
    if (m_pricing_type_isSet) {
        obj.insert(QString("pricing_type"), ::OpenAPI::toJsonValue(m_pricing_type));
    }
    if (m_track_inventory_isSet) {
        obj.insert(QString("track_inventory"), ::OpenAPI::toJsonValue(m_track_inventory));
    }
    return obj;
}

qint64 OAIItemVariationLocationOverrides::getInventoryAlertThreshold() const {
    return m_inventory_alert_threshold;
}
void OAIItemVariationLocationOverrides::setInventoryAlertThreshold(const qint64 &inventory_alert_threshold) {
    m_inventory_alert_threshold = inventory_alert_threshold;
    m_inventory_alert_threshold_isSet = true;
}

bool OAIItemVariationLocationOverrides::is_inventory_alert_threshold_Set() const{
    return m_inventory_alert_threshold_isSet;
}

bool OAIItemVariationLocationOverrides::is_inventory_alert_threshold_Valid() const{
    return m_inventory_alert_threshold_isValid;
}

QString OAIItemVariationLocationOverrides::getInventoryAlertType() const {
    return m_inventory_alert_type;
}
void OAIItemVariationLocationOverrides::setInventoryAlertType(const QString &inventory_alert_type) {
    m_inventory_alert_type = inventory_alert_type;
    m_inventory_alert_type_isSet = true;
}

bool OAIItemVariationLocationOverrides::is_inventory_alert_type_Set() const{
    return m_inventory_alert_type_isSet;
}

bool OAIItemVariationLocationOverrides::is_inventory_alert_type_Valid() const{
    return m_inventory_alert_type_isValid;
}

QString OAIItemVariationLocationOverrides::getLocationId() const {
    return m_location_id;
}
void OAIItemVariationLocationOverrides::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIItemVariationLocationOverrides::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIItemVariationLocationOverrides::is_location_id_Valid() const{
    return m_location_id_isValid;
}

OAIMoney OAIItemVariationLocationOverrides::getPriceMoney() const {
    return m_price_money;
}
void OAIItemVariationLocationOverrides::setPriceMoney(const OAIMoney &price_money) {
    m_price_money = price_money;
    m_price_money_isSet = true;
}

bool OAIItemVariationLocationOverrides::is_price_money_Set() const{
    return m_price_money_isSet;
}

bool OAIItemVariationLocationOverrides::is_price_money_Valid() const{
    return m_price_money_isValid;
}

QString OAIItemVariationLocationOverrides::getPricingType() const {
    return m_pricing_type;
}
void OAIItemVariationLocationOverrides::setPricingType(const QString &pricing_type) {
    m_pricing_type = pricing_type;
    m_pricing_type_isSet = true;
}

bool OAIItemVariationLocationOverrides::is_pricing_type_Set() const{
    return m_pricing_type_isSet;
}

bool OAIItemVariationLocationOverrides::is_pricing_type_Valid() const{
    return m_pricing_type_isValid;
}

bool OAIItemVariationLocationOverrides::isTrackInventory() const {
    return m_track_inventory;
}
void OAIItemVariationLocationOverrides::setTrackInventory(const bool &track_inventory) {
    m_track_inventory = track_inventory;
    m_track_inventory_isSet = true;
}

bool OAIItemVariationLocationOverrides::is_track_inventory_Set() const{
    return m_track_inventory_isSet;
}

bool OAIItemVariationLocationOverrides::is_track_inventory_Valid() const{
    return m_track_inventory_isValid;
}

bool OAIItemVariationLocationOverrides::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inventory_alert_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_alert_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_inventory_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemVariationLocationOverrides::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
