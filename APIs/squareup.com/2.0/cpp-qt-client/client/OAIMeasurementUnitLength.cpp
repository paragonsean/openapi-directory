/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeasurementUnitLength.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeasurementUnitLength::OAIMeasurementUnitLength(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeasurementUnitLength::OAIMeasurementUnitLength() {
    this->initializeModel();
}

OAIMeasurementUnitLength::~OAIMeasurementUnitLength() {}

void OAIMeasurementUnitLength::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMeasurementUnitLength::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMeasurementUnitLength::fromJson(QString jsonString) {
    
    if ( jsonString.compare("IMPERIAL_INCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitLength::IMPERIAL_INCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPERIAL_FOOT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitLength::IMPERIAL_FOOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPERIAL_YARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitLength::IMPERIAL_YARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPERIAL_MILE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitLength::IMPERIAL_MILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METRIC_MILLIMETER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitLength::METRIC_MILLIMETER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METRIC_CENTIMETER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitLength::METRIC_CENTIMETER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METRIC_METER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitLength::METRIC_METER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METRIC_KILOMETER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitLength::METRIC_KILOMETER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMeasurementUnitLength::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMeasurementUnitLength::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMeasurementUnitLength::IMPERIAL_INCH:
            val = "IMPERIAL_INCH";
            break;
        case eOAIMeasurementUnitLength::IMPERIAL_FOOT:
            val = "IMPERIAL_FOOT";
            break;
        case eOAIMeasurementUnitLength::IMPERIAL_YARD:
            val = "IMPERIAL_YARD";
            break;
        case eOAIMeasurementUnitLength::IMPERIAL_MILE:
            val = "IMPERIAL_MILE";
            break;
        case eOAIMeasurementUnitLength::METRIC_MILLIMETER:
            val = "METRIC_MILLIMETER";
            break;
        case eOAIMeasurementUnitLength::METRIC_CENTIMETER:
            val = "METRIC_CENTIMETER";
            break;
        case eOAIMeasurementUnitLength::METRIC_METER:
            val = "METRIC_METER";
            break;
        case eOAIMeasurementUnitLength::METRIC_KILOMETER:
            val = "METRIC_KILOMETER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMeasurementUnitLength::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMeasurementUnitLength::eOAIMeasurementUnitLength OAIMeasurementUnitLength::getValue() const {
    return m_value;
}

void OAIMeasurementUnitLength::setValue(const OAIMeasurementUnitLength::eOAIMeasurementUnitLength& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMeasurementUnitLength::isSet() const {
    
    return m_value_isSet;
}

bool OAIMeasurementUnitLength::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
