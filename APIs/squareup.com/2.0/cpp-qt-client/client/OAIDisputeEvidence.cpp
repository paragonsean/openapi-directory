/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisputeEvidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisputeEvidence::OAIDisputeEvidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisputeEvidence::OAIDisputeEvidence() {
    this->initializeModel();
}

OAIDisputeEvidence::~OAIDisputeEvidence() {}

void OAIDisputeEvidence::initializeModel() {

    m_dispute_id_isSet = false;
    m_dispute_id_isValid = false;

    m_evidence_file_isSet = false;
    m_evidence_file_isValid = false;

    m_evidence_id_isSet = false;
    m_evidence_id_isValid = false;

    m_evidence_text_isSet = false;
    m_evidence_text_isValid = false;

    m_evidence_type_isSet = false;
    m_evidence_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_uploaded_at_isSet = false;
    m_uploaded_at_isValid = false;
}

void OAIDisputeEvidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisputeEvidence::fromJsonObject(QJsonObject json) {

    m_dispute_id_isValid = ::OpenAPI::fromJsonValue(m_dispute_id, json[QString("dispute_id")]);
    m_dispute_id_isSet = !json[QString("dispute_id")].isNull() && m_dispute_id_isValid;

    m_evidence_file_isValid = ::OpenAPI::fromJsonValue(m_evidence_file, json[QString("evidence_file")]);
    m_evidence_file_isSet = !json[QString("evidence_file")].isNull() && m_evidence_file_isValid;

    m_evidence_id_isValid = ::OpenAPI::fromJsonValue(m_evidence_id, json[QString("evidence_id")]);
    m_evidence_id_isSet = !json[QString("evidence_id")].isNull() && m_evidence_id_isValid;

    m_evidence_text_isValid = ::OpenAPI::fromJsonValue(m_evidence_text, json[QString("evidence_text")]);
    m_evidence_text_isSet = !json[QString("evidence_text")].isNull() && m_evidence_text_isValid;

    m_evidence_type_isValid = ::OpenAPI::fromJsonValue(m_evidence_type, json[QString("evidence_type")]);
    m_evidence_type_isSet = !json[QString("evidence_type")].isNull() && m_evidence_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_uploaded_at_isValid = ::OpenAPI::fromJsonValue(m_uploaded_at, json[QString("uploaded_at")]);
    m_uploaded_at_isSet = !json[QString("uploaded_at")].isNull() && m_uploaded_at_isValid;
}

QString OAIDisputeEvidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisputeEvidence::asJsonObject() const {
    QJsonObject obj;
    if (m_dispute_id_isSet) {
        obj.insert(QString("dispute_id"), ::OpenAPI::toJsonValue(m_dispute_id));
    }
    if (m_evidence_file.isSet()) {
        obj.insert(QString("evidence_file"), ::OpenAPI::toJsonValue(m_evidence_file));
    }
    if (m_evidence_id_isSet) {
        obj.insert(QString("evidence_id"), ::OpenAPI::toJsonValue(m_evidence_id));
    }
    if (m_evidence_text_isSet) {
        obj.insert(QString("evidence_text"), ::OpenAPI::toJsonValue(m_evidence_text));
    }
    if (m_evidence_type_isSet) {
        obj.insert(QString("evidence_type"), ::OpenAPI::toJsonValue(m_evidence_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_uploaded_at_isSet) {
        obj.insert(QString("uploaded_at"), ::OpenAPI::toJsonValue(m_uploaded_at));
    }
    return obj;
}

QString OAIDisputeEvidence::getDisputeId() const {
    return m_dispute_id;
}
void OAIDisputeEvidence::setDisputeId(const QString &dispute_id) {
    m_dispute_id = dispute_id;
    m_dispute_id_isSet = true;
}

bool OAIDisputeEvidence::is_dispute_id_Set() const{
    return m_dispute_id_isSet;
}

bool OAIDisputeEvidence::is_dispute_id_Valid() const{
    return m_dispute_id_isValid;
}

OAIDisputeEvidenceFile OAIDisputeEvidence::getEvidenceFile() const {
    return m_evidence_file;
}
void OAIDisputeEvidence::setEvidenceFile(const OAIDisputeEvidenceFile &evidence_file) {
    m_evidence_file = evidence_file;
    m_evidence_file_isSet = true;
}

bool OAIDisputeEvidence::is_evidence_file_Set() const{
    return m_evidence_file_isSet;
}

bool OAIDisputeEvidence::is_evidence_file_Valid() const{
    return m_evidence_file_isValid;
}

QString OAIDisputeEvidence::getEvidenceId() const {
    return m_evidence_id;
}
void OAIDisputeEvidence::setEvidenceId(const QString &evidence_id) {
    m_evidence_id = evidence_id;
    m_evidence_id_isSet = true;
}

bool OAIDisputeEvidence::is_evidence_id_Set() const{
    return m_evidence_id_isSet;
}

bool OAIDisputeEvidence::is_evidence_id_Valid() const{
    return m_evidence_id_isValid;
}

QString OAIDisputeEvidence::getEvidenceText() const {
    return m_evidence_text;
}
void OAIDisputeEvidence::setEvidenceText(const QString &evidence_text) {
    m_evidence_text = evidence_text;
    m_evidence_text_isSet = true;
}

bool OAIDisputeEvidence::is_evidence_text_Set() const{
    return m_evidence_text_isSet;
}

bool OAIDisputeEvidence::is_evidence_text_Valid() const{
    return m_evidence_text_isValid;
}

QString OAIDisputeEvidence::getEvidenceType() const {
    return m_evidence_type;
}
void OAIDisputeEvidence::setEvidenceType(const QString &evidence_type) {
    m_evidence_type = evidence_type;
    m_evidence_type_isSet = true;
}

bool OAIDisputeEvidence::is_evidence_type_Set() const{
    return m_evidence_type_isSet;
}

bool OAIDisputeEvidence::is_evidence_type_Valid() const{
    return m_evidence_type_isValid;
}

QString OAIDisputeEvidence::getId() const {
    return m_id;
}
void OAIDisputeEvidence::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDisputeEvidence::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDisputeEvidence::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDisputeEvidence::getUploadedAt() const {
    return m_uploaded_at;
}
void OAIDisputeEvidence::setUploadedAt(const QString &uploaded_at) {
    m_uploaded_at = uploaded_at;
    m_uploaded_at_isSet = true;
}

bool OAIDisputeEvidence::is_uploaded_at_Set() const{
    return m_uploaded_at_isSet;
}

bool OAIDisputeEvidence::is_uploaded_at_Valid() const{
    return m_uploaded_at_isValid;
}

bool OAIDisputeEvidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dispute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisputeEvidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
