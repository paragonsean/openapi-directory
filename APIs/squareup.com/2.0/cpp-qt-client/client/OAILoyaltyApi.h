/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILoyaltyApi_H
#define OAI_OAILoyaltyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccumulateLoyaltyPointsRequest.h"
#include "OAIAccumulateLoyaltyPointsResponse.h"
#include "OAIAdjustLoyaltyPointsRequest.h"
#include "OAIAdjustLoyaltyPointsResponse.h"
#include "OAICalculateLoyaltyPointsRequest.h"
#include "OAICalculateLoyaltyPointsResponse.h"
#include "OAICreateLoyaltyAccountRequest.h"
#include "OAICreateLoyaltyAccountResponse.h"
#include "OAICreateLoyaltyRewardRequest.h"
#include "OAICreateLoyaltyRewardResponse.h"
#include "OAIDeleteLoyaltyRewardResponse.h"
#include "OAIListLoyaltyProgramsResponse.h"
#include "OAIRedeemLoyaltyRewardRequest.h"
#include "OAIRedeemLoyaltyRewardResponse.h"
#include "OAIRetrieveLoyaltyAccountResponse.h"
#include "OAIRetrieveLoyaltyProgramResponse.h"
#include "OAIRetrieveLoyaltyRewardResponse.h"
#include "OAISearchLoyaltyAccountsRequest.h"
#include "OAISearchLoyaltyAccountsResponse.h"
#include "OAISearchLoyaltyEventsRequest.h"
#include "OAISearchLoyaltyEventsResponse.h"
#include "OAISearchLoyaltyRewardsRequest.h"
#include "OAISearchLoyaltyRewardsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILoyaltyApi : public QObject {
    Q_OBJECT

public:
    OAILoyaltyApi(const int timeOut = 0);
    ~OAILoyaltyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  oai_accumulate_loyalty_points_request OAIAccumulateLoyaltyPointsRequest [required]
    */
    virtual void accumulateLoyaltyPoints(const QString &account_id, const OAIAccumulateLoyaltyPointsRequest &oai_accumulate_loyalty_points_request);

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  oai_adjust_loyalty_points_request OAIAdjustLoyaltyPointsRequest [required]
    */
    virtual void adjustLoyaltyPoints(const QString &account_id, const OAIAdjustLoyaltyPointsRequest &oai_adjust_loyalty_points_request);

    /**
    * @param[in]  program_id QString [required]
    * @param[in]  oai_calculate_loyalty_points_request OAICalculateLoyaltyPointsRequest [required]
    */
    virtual void calculateLoyaltyPoints(const QString &program_id, const OAICalculateLoyaltyPointsRequest &oai_calculate_loyalty_points_request);

    /**
    * @param[in]  oai_create_loyalty_account_request OAICreateLoyaltyAccountRequest [required]
    */
    virtual void createLoyaltyAccount(const OAICreateLoyaltyAccountRequest &oai_create_loyalty_account_request);

    /**
    * @param[in]  oai_create_loyalty_reward_request OAICreateLoyaltyRewardRequest [required]
    */
    virtual void createLoyaltyReward(const OAICreateLoyaltyRewardRequest &oai_create_loyalty_reward_request);

    /**
    * @param[in]  reward_id QString [required]
    */
    virtual void deleteLoyaltyReward(const QString &reward_id);


    virtual void listLoyaltyPrograms();

    /**
    * @param[in]  reward_id QString [required]
    * @param[in]  oai_redeem_loyalty_reward_request OAIRedeemLoyaltyRewardRequest [required]
    */
    virtual void redeemLoyaltyReward(const QString &reward_id, const OAIRedeemLoyaltyRewardRequest &oai_redeem_loyalty_reward_request);

    /**
    * @param[in]  account_id QString [required]
    */
    virtual void retrieveLoyaltyAccount(const QString &account_id);

    /**
    * @param[in]  program_id QString [required]
    */
    virtual void retrieveLoyaltyProgram(const QString &program_id);

    /**
    * @param[in]  reward_id QString [required]
    */
    virtual void retrieveLoyaltyReward(const QString &reward_id);

    /**
    * @param[in]  oai_search_loyalty_accounts_request OAISearchLoyaltyAccountsRequest [required]
    */
    virtual void searchLoyaltyAccounts(const OAISearchLoyaltyAccountsRequest &oai_search_loyalty_accounts_request);

    /**
    * @param[in]  oai_search_loyalty_events_request OAISearchLoyaltyEventsRequest [required]
    */
    virtual void searchLoyaltyEvents(const OAISearchLoyaltyEventsRequest &oai_search_loyalty_events_request);

    /**
    * @param[in]  oai_search_loyalty_rewards_request OAISearchLoyaltyRewardsRequest [required]
    */
    virtual void searchLoyaltyRewards(const OAISearchLoyaltyRewardsRequest &oai_search_loyalty_rewards_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accumulateLoyaltyPointsCallback(OAIHttpRequestWorker *worker);
    void adjustLoyaltyPointsCallback(OAIHttpRequestWorker *worker);
    void calculateLoyaltyPointsCallback(OAIHttpRequestWorker *worker);
    void createLoyaltyAccountCallback(OAIHttpRequestWorker *worker);
    void createLoyaltyRewardCallback(OAIHttpRequestWorker *worker);
    void deleteLoyaltyRewardCallback(OAIHttpRequestWorker *worker);
    void listLoyaltyProgramsCallback(OAIHttpRequestWorker *worker);
    void redeemLoyaltyRewardCallback(OAIHttpRequestWorker *worker);
    void retrieveLoyaltyAccountCallback(OAIHttpRequestWorker *worker);
    void retrieveLoyaltyProgramCallback(OAIHttpRequestWorker *worker);
    void retrieveLoyaltyRewardCallback(OAIHttpRequestWorker *worker);
    void searchLoyaltyAccountsCallback(OAIHttpRequestWorker *worker);
    void searchLoyaltyEventsCallback(OAIHttpRequestWorker *worker);
    void searchLoyaltyRewardsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accumulateLoyaltyPointsSignal(OAIAccumulateLoyaltyPointsResponse summary);
    void adjustLoyaltyPointsSignal(OAIAdjustLoyaltyPointsResponse summary);
    void calculateLoyaltyPointsSignal(OAICalculateLoyaltyPointsResponse summary);
    void createLoyaltyAccountSignal(OAICreateLoyaltyAccountResponse summary);
    void createLoyaltyRewardSignal(OAICreateLoyaltyRewardResponse summary);
    void deleteLoyaltyRewardSignal(OAIDeleteLoyaltyRewardResponse summary);
    void listLoyaltyProgramsSignal(OAIListLoyaltyProgramsResponse summary);
    void redeemLoyaltyRewardSignal(OAIRedeemLoyaltyRewardResponse summary);
    void retrieveLoyaltyAccountSignal(OAIRetrieveLoyaltyAccountResponse summary);
    void retrieveLoyaltyProgramSignal(OAIRetrieveLoyaltyProgramResponse summary);
    void retrieveLoyaltyRewardSignal(OAIRetrieveLoyaltyRewardResponse summary);
    void searchLoyaltyAccountsSignal(OAISearchLoyaltyAccountsResponse summary);
    void searchLoyaltyEventsSignal(OAISearchLoyaltyEventsResponse summary);
    void searchLoyaltyRewardsSignal(OAISearchLoyaltyRewardsResponse summary);


    void accumulateLoyaltyPointsSignalFull(OAIHttpRequestWorker *worker, OAIAccumulateLoyaltyPointsResponse summary);
    void adjustLoyaltyPointsSignalFull(OAIHttpRequestWorker *worker, OAIAdjustLoyaltyPointsResponse summary);
    void calculateLoyaltyPointsSignalFull(OAIHttpRequestWorker *worker, OAICalculateLoyaltyPointsResponse summary);
    void createLoyaltyAccountSignalFull(OAIHttpRequestWorker *worker, OAICreateLoyaltyAccountResponse summary);
    void createLoyaltyRewardSignalFull(OAIHttpRequestWorker *worker, OAICreateLoyaltyRewardResponse summary);
    void deleteLoyaltyRewardSignalFull(OAIHttpRequestWorker *worker, OAIDeleteLoyaltyRewardResponse summary);
    void listLoyaltyProgramsSignalFull(OAIHttpRequestWorker *worker, OAIListLoyaltyProgramsResponse summary);
    void redeemLoyaltyRewardSignalFull(OAIHttpRequestWorker *worker, OAIRedeemLoyaltyRewardResponse summary);
    void retrieveLoyaltyAccountSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveLoyaltyAccountResponse summary);
    void retrieveLoyaltyProgramSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveLoyaltyProgramResponse summary);
    void retrieveLoyaltyRewardSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveLoyaltyRewardResponse summary);
    void searchLoyaltyAccountsSignalFull(OAIHttpRequestWorker *worker, OAISearchLoyaltyAccountsResponse summary);
    void searchLoyaltyEventsSignalFull(OAIHttpRequestWorker *worker, OAISearchLoyaltyEventsResponse summary);
    void searchLoyaltyRewardsSignalFull(OAIHttpRequestWorker *worker, OAISearchLoyaltyRewardsResponse summary);

    Q_DECL_DEPRECATED_X("Use accumulateLoyaltyPointsSignalError() instead")
    void accumulateLoyaltyPointsSignalE(OAIAccumulateLoyaltyPointsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accumulateLoyaltyPointsSignalError(OAIAccumulateLoyaltyPointsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adjustLoyaltyPointsSignalError() instead")
    void adjustLoyaltyPointsSignalE(OAIAdjustLoyaltyPointsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adjustLoyaltyPointsSignalError(OAIAdjustLoyaltyPointsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calculateLoyaltyPointsSignalError() instead")
    void calculateLoyaltyPointsSignalE(OAICalculateLoyaltyPointsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calculateLoyaltyPointsSignalError(OAICalculateLoyaltyPointsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLoyaltyAccountSignalError() instead")
    void createLoyaltyAccountSignalE(OAICreateLoyaltyAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLoyaltyAccountSignalError(OAICreateLoyaltyAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLoyaltyRewardSignalError() instead")
    void createLoyaltyRewardSignalE(OAICreateLoyaltyRewardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLoyaltyRewardSignalError(OAICreateLoyaltyRewardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLoyaltyRewardSignalError() instead")
    void deleteLoyaltyRewardSignalE(OAIDeleteLoyaltyRewardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLoyaltyRewardSignalError(OAIDeleteLoyaltyRewardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLoyaltyProgramsSignalError() instead")
    void listLoyaltyProgramsSignalE(OAIListLoyaltyProgramsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLoyaltyProgramsSignalError(OAIListLoyaltyProgramsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redeemLoyaltyRewardSignalError() instead")
    void redeemLoyaltyRewardSignalE(OAIRedeemLoyaltyRewardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redeemLoyaltyRewardSignalError(OAIRedeemLoyaltyRewardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveLoyaltyAccountSignalError() instead")
    void retrieveLoyaltyAccountSignalE(OAIRetrieveLoyaltyAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveLoyaltyAccountSignalError(OAIRetrieveLoyaltyAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveLoyaltyProgramSignalError() instead")
    void retrieveLoyaltyProgramSignalE(OAIRetrieveLoyaltyProgramResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveLoyaltyProgramSignalError(OAIRetrieveLoyaltyProgramResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveLoyaltyRewardSignalError() instead")
    void retrieveLoyaltyRewardSignalE(OAIRetrieveLoyaltyRewardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveLoyaltyRewardSignalError(OAIRetrieveLoyaltyRewardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchLoyaltyAccountsSignalError() instead")
    void searchLoyaltyAccountsSignalE(OAISearchLoyaltyAccountsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchLoyaltyAccountsSignalError(OAISearchLoyaltyAccountsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchLoyaltyEventsSignalError() instead")
    void searchLoyaltyEventsSignalE(OAISearchLoyaltyEventsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchLoyaltyEventsSignalError(OAISearchLoyaltyEventsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchLoyaltyRewardsSignalError() instead")
    void searchLoyaltyRewardsSignalE(OAISearchLoyaltyRewardsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchLoyaltyRewardsSignalError(OAISearchLoyaltyRewardsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accumulateLoyaltyPointsSignalErrorFull() instead")
    void accumulateLoyaltyPointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accumulateLoyaltyPointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adjustLoyaltyPointsSignalErrorFull() instead")
    void adjustLoyaltyPointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adjustLoyaltyPointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calculateLoyaltyPointsSignalErrorFull() instead")
    void calculateLoyaltyPointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calculateLoyaltyPointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLoyaltyAccountSignalErrorFull() instead")
    void createLoyaltyAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLoyaltyAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLoyaltyRewardSignalErrorFull() instead")
    void createLoyaltyRewardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLoyaltyRewardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLoyaltyRewardSignalErrorFull() instead")
    void deleteLoyaltyRewardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLoyaltyRewardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLoyaltyProgramsSignalErrorFull() instead")
    void listLoyaltyProgramsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLoyaltyProgramsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redeemLoyaltyRewardSignalErrorFull() instead")
    void redeemLoyaltyRewardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redeemLoyaltyRewardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveLoyaltyAccountSignalErrorFull() instead")
    void retrieveLoyaltyAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveLoyaltyAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveLoyaltyProgramSignalErrorFull() instead")
    void retrieveLoyaltyProgramSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveLoyaltyProgramSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveLoyaltyRewardSignalErrorFull() instead")
    void retrieveLoyaltyRewardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveLoyaltyRewardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchLoyaltyAccountsSignalErrorFull() instead")
    void searchLoyaltyAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchLoyaltyAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchLoyaltyEventsSignalErrorFull() instead")
    void searchLoyaltyEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchLoyaltyEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchLoyaltyRewardsSignalErrorFull() instead")
    void searchLoyaltyRewardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchLoyaltyRewardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
