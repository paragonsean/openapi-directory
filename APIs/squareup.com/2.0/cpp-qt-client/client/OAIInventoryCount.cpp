/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryCount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryCount::OAIInventoryCount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryCount::OAIInventoryCount() {
    this->initializeModel();
}

OAIInventoryCount::~OAIInventoryCount() {}

void OAIInventoryCount::initializeModel() {

    m_calculated_at_isSet = false;
    m_calculated_at_isValid = false;

    m_catalog_object_id_isSet = false;
    m_catalog_object_id_isValid = false;

    m_catalog_object_type_isSet = false;
    m_catalog_object_type_isValid = false;

    m_is_estimated_isSet = false;
    m_is_estimated_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIInventoryCount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryCount::fromJsonObject(QJsonObject json) {

    m_calculated_at_isValid = ::OpenAPI::fromJsonValue(m_calculated_at, json[QString("calculated_at")]);
    m_calculated_at_isSet = !json[QString("calculated_at")].isNull() && m_calculated_at_isValid;

    m_catalog_object_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_object_id, json[QString("catalog_object_id")]);
    m_catalog_object_id_isSet = !json[QString("catalog_object_id")].isNull() && m_catalog_object_id_isValid;

    m_catalog_object_type_isValid = ::OpenAPI::fromJsonValue(m_catalog_object_type, json[QString("catalog_object_type")]);
    m_catalog_object_type_isSet = !json[QString("catalog_object_type")].isNull() && m_catalog_object_type_isValid;

    m_is_estimated_isValid = ::OpenAPI::fromJsonValue(m_is_estimated, json[QString("is_estimated")]);
    m_is_estimated_isSet = !json[QString("is_estimated")].isNull() && m_is_estimated_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIInventoryCount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryCount::asJsonObject() const {
    QJsonObject obj;
    if (m_calculated_at_isSet) {
        obj.insert(QString("calculated_at"), ::OpenAPI::toJsonValue(m_calculated_at));
    }
    if (m_catalog_object_id_isSet) {
        obj.insert(QString("catalog_object_id"), ::OpenAPI::toJsonValue(m_catalog_object_id));
    }
    if (m_catalog_object_type_isSet) {
        obj.insert(QString("catalog_object_type"), ::OpenAPI::toJsonValue(m_catalog_object_type));
    }
    if (m_is_estimated_isSet) {
        obj.insert(QString("is_estimated"), ::OpenAPI::toJsonValue(m_is_estimated));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIInventoryCount::getCalculatedAt() const {
    return m_calculated_at;
}
void OAIInventoryCount::setCalculatedAt(const QString &calculated_at) {
    m_calculated_at = calculated_at;
    m_calculated_at_isSet = true;
}

bool OAIInventoryCount::is_calculated_at_Set() const{
    return m_calculated_at_isSet;
}

bool OAIInventoryCount::is_calculated_at_Valid() const{
    return m_calculated_at_isValid;
}

QString OAIInventoryCount::getCatalogObjectId() const {
    return m_catalog_object_id;
}
void OAIInventoryCount::setCatalogObjectId(const QString &catalog_object_id) {
    m_catalog_object_id = catalog_object_id;
    m_catalog_object_id_isSet = true;
}

bool OAIInventoryCount::is_catalog_object_id_Set() const{
    return m_catalog_object_id_isSet;
}

bool OAIInventoryCount::is_catalog_object_id_Valid() const{
    return m_catalog_object_id_isValid;
}

QString OAIInventoryCount::getCatalogObjectType() const {
    return m_catalog_object_type;
}
void OAIInventoryCount::setCatalogObjectType(const QString &catalog_object_type) {
    m_catalog_object_type = catalog_object_type;
    m_catalog_object_type_isSet = true;
}

bool OAIInventoryCount::is_catalog_object_type_Set() const{
    return m_catalog_object_type_isSet;
}

bool OAIInventoryCount::is_catalog_object_type_Valid() const{
    return m_catalog_object_type_isValid;
}

bool OAIInventoryCount::isIsEstimated() const {
    return m_is_estimated;
}
void OAIInventoryCount::setIsEstimated(const bool &is_estimated) {
    m_is_estimated = is_estimated;
    m_is_estimated_isSet = true;
}

bool OAIInventoryCount::is_is_estimated_Set() const{
    return m_is_estimated_isSet;
}

bool OAIInventoryCount::is_is_estimated_Valid() const{
    return m_is_estimated_isValid;
}

QString OAIInventoryCount::getLocationId() const {
    return m_location_id;
}
void OAIInventoryCount::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIInventoryCount::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIInventoryCount::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIInventoryCount::getQuantity() const {
    return m_quantity;
}
void OAIInventoryCount::setQuantity(const QString &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIInventoryCount::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIInventoryCount::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIInventoryCount::getState() const {
    return m_state;
}
void OAIInventoryCount::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInventoryCount::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInventoryCount::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIInventoryCount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_estimated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryCount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
