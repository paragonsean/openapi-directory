/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckoutOptionsPaymentType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckoutOptionsPaymentType::OAICheckoutOptionsPaymentType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckoutOptionsPaymentType::OAICheckoutOptionsPaymentType() {
    this->initializeModel();
}

OAICheckoutOptionsPaymentType::~OAICheckoutOptionsPaymentType() {}

void OAICheckoutOptionsPaymentType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICheckoutOptionsPaymentType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICheckoutOptionsPaymentType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CARD_PRESENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICheckoutOptionsPaymentType::CARD_PRESENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MANUAL_CARD_ENTRY", Qt::CaseInsensitive) == 0) {
        m_value = eOAICheckoutOptionsPaymentType::MANUAL_CARD_ENTRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FELICA_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAICheckoutOptionsPaymentType::FELICA_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FELICA_QUICPAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAICheckoutOptionsPaymentType::FELICA_QUICPAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FELICA_TRANSPORTATION_GROUP", Qt::CaseInsensitive) == 0) {
        m_value = eOAICheckoutOptionsPaymentType::FELICA_TRANSPORTATION_GROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FELICA_ALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAICheckoutOptionsPaymentType::FELICA_ALL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICheckoutOptionsPaymentType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICheckoutOptionsPaymentType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICheckoutOptionsPaymentType::CARD_PRESENT:
            val = "CARD_PRESENT";
            break;
        case eOAICheckoutOptionsPaymentType::MANUAL_CARD_ENTRY:
            val = "MANUAL_CARD_ENTRY";
            break;
        case eOAICheckoutOptionsPaymentType::FELICA_ID:
            val = "FELICA_ID";
            break;
        case eOAICheckoutOptionsPaymentType::FELICA_QUICPAY:
            val = "FELICA_QUICPAY";
            break;
        case eOAICheckoutOptionsPaymentType::FELICA_TRANSPORTATION_GROUP:
            val = "FELICA_TRANSPORTATION_GROUP";
            break;
        case eOAICheckoutOptionsPaymentType::FELICA_ALL:
            val = "FELICA_ALL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICheckoutOptionsPaymentType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICheckoutOptionsPaymentType::eOAICheckoutOptionsPaymentType OAICheckoutOptionsPaymentType::getValue() const {
    return m_value;
}

void OAICheckoutOptionsPaymentType::setValue(const OAICheckoutOptionsPaymentType::eOAICheckoutOptionsPaymentType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICheckoutOptionsPaymentType::isSet() const {
    
    return m_value_isSet;
}

bool OAICheckoutOptionsPaymentType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
