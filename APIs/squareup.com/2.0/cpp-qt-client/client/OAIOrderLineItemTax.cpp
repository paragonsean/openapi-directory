/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderLineItemTax.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderLineItemTax::OAIOrderLineItemTax(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderLineItemTax::OAIOrderLineItemTax() {
    this->initializeModel();
}

OAIOrderLineItemTax::~OAIOrderLineItemTax() {}

void OAIOrderLineItemTax::initializeModel() {

    m_applied_money_isSet = false;
    m_applied_money_isValid = false;

    m_auto_applied_isSet = false;
    m_auto_applied_isValid = false;

    m_catalog_object_id_isSet = false;
    m_catalog_object_id_isValid = false;

    m_catalog_version_isSet = false;
    m_catalog_version_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIOrderLineItemTax::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderLineItemTax::fromJsonObject(QJsonObject json) {

    m_applied_money_isValid = ::OpenAPI::fromJsonValue(m_applied_money, json[QString("applied_money")]);
    m_applied_money_isSet = !json[QString("applied_money")].isNull() && m_applied_money_isValid;

    m_auto_applied_isValid = ::OpenAPI::fromJsonValue(m_auto_applied, json[QString("auto_applied")]);
    m_auto_applied_isSet = !json[QString("auto_applied")].isNull() && m_auto_applied_isValid;

    m_catalog_object_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_object_id, json[QString("catalog_object_id")]);
    m_catalog_object_id_isSet = !json[QString("catalog_object_id")].isNull() && m_catalog_object_id_isValid;

    m_catalog_version_isValid = ::OpenAPI::fromJsonValue(m_catalog_version, json[QString("catalog_version")]);
    m_catalog_version_isSet = !json[QString("catalog_version")].isNull() && m_catalog_version_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIOrderLineItemTax::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderLineItemTax::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_money.isSet()) {
        obj.insert(QString("applied_money"), ::OpenAPI::toJsonValue(m_applied_money));
    }
    if (m_auto_applied_isSet) {
        obj.insert(QString("auto_applied"), ::OpenAPI::toJsonValue(m_auto_applied));
    }
    if (m_catalog_object_id_isSet) {
        obj.insert(QString("catalog_object_id"), ::OpenAPI::toJsonValue(m_catalog_object_id));
    }
    if (m_catalog_version_isSet) {
        obj.insert(QString("catalog_version"), ::OpenAPI::toJsonValue(m_catalog_version));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

OAIMoney OAIOrderLineItemTax::getAppliedMoney() const {
    return m_applied_money;
}
void OAIOrderLineItemTax::setAppliedMoney(const OAIMoney &applied_money) {
    m_applied_money = applied_money;
    m_applied_money_isSet = true;
}

bool OAIOrderLineItemTax::is_applied_money_Set() const{
    return m_applied_money_isSet;
}

bool OAIOrderLineItemTax::is_applied_money_Valid() const{
    return m_applied_money_isValid;
}

bool OAIOrderLineItemTax::isAutoApplied() const {
    return m_auto_applied;
}
void OAIOrderLineItemTax::setAutoApplied(const bool &auto_applied) {
    m_auto_applied = auto_applied;
    m_auto_applied_isSet = true;
}

bool OAIOrderLineItemTax::is_auto_applied_Set() const{
    return m_auto_applied_isSet;
}

bool OAIOrderLineItemTax::is_auto_applied_Valid() const{
    return m_auto_applied_isValid;
}

QString OAIOrderLineItemTax::getCatalogObjectId() const {
    return m_catalog_object_id;
}
void OAIOrderLineItemTax::setCatalogObjectId(const QString &catalog_object_id) {
    m_catalog_object_id = catalog_object_id;
    m_catalog_object_id_isSet = true;
}

bool OAIOrderLineItemTax::is_catalog_object_id_Set() const{
    return m_catalog_object_id_isSet;
}

bool OAIOrderLineItemTax::is_catalog_object_id_Valid() const{
    return m_catalog_object_id_isValid;
}

qint64 OAIOrderLineItemTax::getCatalogVersion() const {
    return m_catalog_version;
}
void OAIOrderLineItemTax::setCatalogVersion(const qint64 &catalog_version) {
    m_catalog_version = catalog_version;
    m_catalog_version_isSet = true;
}

bool OAIOrderLineItemTax::is_catalog_version_Set() const{
    return m_catalog_version_isSet;
}

bool OAIOrderLineItemTax::is_catalog_version_Valid() const{
    return m_catalog_version_isValid;
}

QMap<QString, QString> OAIOrderLineItemTax::getMetadata() const {
    return m_metadata;
}
void OAIOrderLineItemTax::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIOrderLineItemTax::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIOrderLineItemTax::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIOrderLineItemTax::getName() const {
    return m_name;
}
void OAIOrderLineItemTax::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrderLineItemTax::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrderLineItemTax::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrderLineItemTax::getPercentage() const {
    return m_percentage;
}
void OAIOrderLineItemTax::setPercentage(const QString &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIOrderLineItemTax::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIOrderLineItemTax::is_percentage_Valid() const{
    return m_percentage_isValid;
}

QString OAIOrderLineItemTax::getScope() const {
    return m_scope;
}
void OAIOrderLineItemTax::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIOrderLineItemTax::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIOrderLineItemTax::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIOrderLineItemTax::getType() const {
    return m_type;
}
void OAIOrderLineItemTax::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOrderLineItemTax::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOrderLineItemTax::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOrderLineItemTax::getUid() const {
    return m_uid;
}
void OAIOrderLineItemTax::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIOrderLineItemTax::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIOrderLineItemTax::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIOrderLineItemTax::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_applied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderLineItemTax::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
