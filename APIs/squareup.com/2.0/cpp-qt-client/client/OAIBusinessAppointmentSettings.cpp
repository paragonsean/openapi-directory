/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBusinessAppointmentSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBusinessAppointmentSettings::OAIBusinessAppointmentSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBusinessAppointmentSettings::OAIBusinessAppointmentSettings() {
    this->initializeModel();
}

OAIBusinessAppointmentSettings::~OAIBusinessAppointmentSettings() {}

void OAIBusinessAppointmentSettings::initializeModel() {

    m_alignment_time_isSet = false;
    m_alignment_time_isValid = false;

    m_any_team_member_booking_enabled_isSet = false;
    m_any_team_member_booking_enabled_isValid = false;

    m_cancellation_fee_money_isSet = false;
    m_cancellation_fee_money_isValid = false;

    m_cancellation_policy_isSet = false;
    m_cancellation_policy_isValid = false;

    m_cancellation_policy_text_isSet = false;
    m_cancellation_policy_text_isValid = false;

    m_cancellation_window_seconds_isSet = false;
    m_cancellation_window_seconds_isValid = false;

    m_location_types_isSet = false;
    m_location_types_isValid = false;

    m_max_appointments_per_day_limit_isSet = false;
    m_max_appointments_per_day_limit_isValid = false;

    m_max_appointments_per_day_limit_type_isSet = false;
    m_max_appointments_per_day_limit_type_isValid = false;

    m_max_booking_lead_time_seconds_isSet = false;
    m_max_booking_lead_time_seconds_isValid = false;

    m_min_booking_lead_time_seconds_isSet = false;
    m_min_booking_lead_time_seconds_isValid = false;

    m_multiple_service_booking_enabled_isSet = false;
    m_multiple_service_booking_enabled_isValid = false;

    m_skip_booking_flow_staff_selection_isSet = false;
    m_skip_booking_flow_staff_selection_isValid = false;
}

void OAIBusinessAppointmentSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBusinessAppointmentSettings::fromJsonObject(QJsonObject json) {

    m_alignment_time_isValid = ::OpenAPI::fromJsonValue(m_alignment_time, json[QString("alignment_time")]);
    m_alignment_time_isSet = !json[QString("alignment_time")].isNull() && m_alignment_time_isValid;

    m_any_team_member_booking_enabled_isValid = ::OpenAPI::fromJsonValue(m_any_team_member_booking_enabled, json[QString("any_team_member_booking_enabled")]);
    m_any_team_member_booking_enabled_isSet = !json[QString("any_team_member_booking_enabled")].isNull() && m_any_team_member_booking_enabled_isValid;

    m_cancellation_fee_money_isValid = ::OpenAPI::fromJsonValue(m_cancellation_fee_money, json[QString("cancellation_fee_money")]);
    m_cancellation_fee_money_isSet = !json[QString("cancellation_fee_money")].isNull() && m_cancellation_fee_money_isValid;

    m_cancellation_policy_isValid = ::OpenAPI::fromJsonValue(m_cancellation_policy, json[QString("cancellation_policy")]);
    m_cancellation_policy_isSet = !json[QString("cancellation_policy")].isNull() && m_cancellation_policy_isValid;

    m_cancellation_policy_text_isValid = ::OpenAPI::fromJsonValue(m_cancellation_policy_text, json[QString("cancellation_policy_text")]);
    m_cancellation_policy_text_isSet = !json[QString("cancellation_policy_text")].isNull() && m_cancellation_policy_text_isValid;

    m_cancellation_window_seconds_isValid = ::OpenAPI::fromJsonValue(m_cancellation_window_seconds, json[QString("cancellation_window_seconds")]);
    m_cancellation_window_seconds_isSet = !json[QString("cancellation_window_seconds")].isNull() && m_cancellation_window_seconds_isValid;

    m_location_types_isValid = ::OpenAPI::fromJsonValue(m_location_types, json[QString("location_types")]);
    m_location_types_isSet = !json[QString("location_types")].isNull() && m_location_types_isValid;

    m_max_appointments_per_day_limit_isValid = ::OpenAPI::fromJsonValue(m_max_appointments_per_day_limit, json[QString("max_appointments_per_day_limit")]);
    m_max_appointments_per_day_limit_isSet = !json[QString("max_appointments_per_day_limit")].isNull() && m_max_appointments_per_day_limit_isValid;

    m_max_appointments_per_day_limit_type_isValid = ::OpenAPI::fromJsonValue(m_max_appointments_per_day_limit_type, json[QString("max_appointments_per_day_limit_type")]);
    m_max_appointments_per_day_limit_type_isSet = !json[QString("max_appointments_per_day_limit_type")].isNull() && m_max_appointments_per_day_limit_type_isValid;

    m_max_booking_lead_time_seconds_isValid = ::OpenAPI::fromJsonValue(m_max_booking_lead_time_seconds, json[QString("max_booking_lead_time_seconds")]);
    m_max_booking_lead_time_seconds_isSet = !json[QString("max_booking_lead_time_seconds")].isNull() && m_max_booking_lead_time_seconds_isValid;

    m_min_booking_lead_time_seconds_isValid = ::OpenAPI::fromJsonValue(m_min_booking_lead_time_seconds, json[QString("min_booking_lead_time_seconds")]);
    m_min_booking_lead_time_seconds_isSet = !json[QString("min_booking_lead_time_seconds")].isNull() && m_min_booking_lead_time_seconds_isValid;

    m_multiple_service_booking_enabled_isValid = ::OpenAPI::fromJsonValue(m_multiple_service_booking_enabled, json[QString("multiple_service_booking_enabled")]);
    m_multiple_service_booking_enabled_isSet = !json[QString("multiple_service_booking_enabled")].isNull() && m_multiple_service_booking_enabled_isValid;

    m_skip_booking_flow_staff_selection_isValid = ::OpenAPI::fromJsonValue(m_skip_booking_flow_staff_selection, json[QString("skip_booking_flow_staff_selection")]);
    m_skip_booking_flow_staff_selection_isSet = !json[QString("skip_booking_flow_staff_selection")].isNull() && m_skip_booking_flow_staff_selection_isValid;
}

QString OAIBusinessAppointmentSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBusinessAppointmentSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_alignment_time_isSet) {
        obj.insert(QString("alignment_time"), ::OpenAPI::toJsonValue(m_alignment_time));
    }
    if (m_any_team_member_booking_enabled_isSet) {
        obj.insert(QString("any_team_member_booking_enabled"), ::OpenAPI::toJsonValue(m_any_team_member_booking_enabled));
    }
    if (m_cancellation_fee_money.isSet()) {
        obj.insert(QString("cancellation_fee_money"), ::OpenAPI::toJsonValue(m_cancellation_fee_money));
    }
    if (m_cancellation_policy_isSet) {
        obj.insert(QString("cancellation_policy"), ::OpenAPI::toJsonValue(m_cancellation_policy));
    }
    if (m_cancellation_policy_text_isSet) {
        obj.insert(QString("cancellation_policy_text"), ::OpenAPI::toJsonValue(m_cancellation_policy_text));
    }
    if (m_cancellation_window_seconds_isSet) {
        obj.insert(QString("cancellation_window_seconds"), ::OpenAPI::toJsonValue(m_cancellation_window_seconds));
    }
    if (m_location_types.size() > 0) {
        obj.insert(QString("location_types"), ::OpenAPI::toJsonValue(m_location_types));
    }
    if (m_max_appointments_per_day_limit_isSet) {
        obj.insert(QString("max_appointments_per_day_limit"), ::OpenAPI::toJsonValue(m_max_appointments_per_day_limit));
    }
    if (m_max_appointments_per_day_limit_type_isSet) {
        obj.insert(QString("max_appointments_per_day_limit_type"), ::OpenAPI::toJsonValue(m_max_appointments_per_day_limit_type));
    }
    if (m_max_booking_lead_time_seconds_isSet) {
        obj.insert(QString("max_booking_lead_time_seconds"), ::OpenAPI::toJsonValue(m_max_booking_lead_time_seconds));
    }
    if (m_min_booking_lead_time_seconds_isSet) {
        obj.insert(QString("min_booking_lead_time_seconds"), ::OpenAPI::toJsonValue(m_min_booking_lead_time_seconds));
    }
    if (m_multiple_service_booking_enabled_isSet) {
        obj.insert(QString("multiple_service_booking_enabled"), ::OpenAPI::toJsonValue(m_multiple_service_booking_enabled));
    }
    if (m_skip_booking_flow_staff_selection_isSet) {
        obj.insert(QString("skip_booking_flow_staff_selection"), ::OpenAPI::toJsonValue(m_skip_booking_flow_staff_selection));
    }
    return obj;
}

QString OAIBusinessAppointmentSettings::getAlignmentTime() const {
    return m_alignment_time;
}
void OAIBusinessAppointmentSettings::setAlignmentTime(const QString &alignment_time) {
    m_alignment_time = alignment_time;
    m_alignment_time_isSet = true;
}

bool OAIBusinessAppointmentSettings::is_alignment_time_Set() const{
    return m_alignment_time_isSet;
}

bool OAIBusinessAppointmentSettings::is_alignment_time_Valid() const{
    return m_alignment_time_isValid;
}

bool OAIBusinessAppointmentSettings::isAnyTeamMemberBookingEnabled() const {
    return m_any_team_member_booking_enabled;
}
void OAIBusinessAppointmentSettings::setAnyTeamMemberBookingEnabled(const bool &any_team_member_booking_enabled) {
    m_any_team_member_booking_enabled = any_team_member_booking_enabled;
    m_any_team_member_booking_enabled_isSet = true;
}

bool OAIBusinessAppointmentSettings::is_any_team_member_booking_enabled_Set() const{
    return m_any_team_member_booking_enabled_isSet;
}

bool OAIBusinessAppointmentSettings::is_any_team_member_booking_enabled_Valid() const{
    return m_any_team_member_booking_enabled_isValid;
}

OAIMoney OAIBusinessAppointmentSettings::getCancellationFeeMoney() const {
    return m_cancellation_fee_money;
}
void OAIBusinessAppointmentSettings::setCancellationFeeMoney(const OAIMoney &cancellation_fee_money) {
    m_cancellation_fee_money = cancellation_fee_money;
    m_cancellation_fee_money_isSet = true;
}

bool OAIBusinessAppointmentSettings::is_cancellation_fee_money_Set() const{
    return m_cancellation_fee_money_isSet;
}

bool OAIBusinessAppointmentSettings::is_cancellation_fee_money_Valid() const{
    return m_cancellation_fee_money_isValid;
}

QString OAIBusinessAppointmentSettings::getCancellationPolicy() const {
    return m_cancellation_policy;
}
void OAIBusinessAppointmentSettings::setCancellationPolicy(const QString &cancellation_policy) {
    m_cancellation_policy = cancellation_policy;
    m_cancellation_policy_isSet = true;
}

bool OAIBusinessAppointmentSettings::is_cancellation_policy_Set() const{
    return m_cancellation_policy_isSet;
}

bool OAIBusinessAppointmentSettings::is_cancellation_policy_Valid() const{
    return m_cancellation_policy_isValid;
}

QString OAIBusinessAppointmentSettings::getCancellationPolicyText() const {
    return m_cancellation_policy_text;
}
void OAIBusinessAppointmentSettings::setCancellationPolicyText(const QString &cancellation_policy_text) {
    m_cancellation_policy_text = cancellation_policy_text;
    m_cancellation_policy_text_isSet = true;
}

bool OAIBusinessAppointmentSettings::is_cancellation_policy_text_Set() const{
    return m_cancellation_policy_text_isSet;
}

bool OAIBusinessAppointmentSettings::is_cancellation_policy_text_Valid() const{
    return m_cancellation_policy_text_isValid;
}

qint32 OAIBusinessAppointmentSettings::getCancellationWindowSeconds() const {
    return m_cancellation_window_seconds;
}
void OAIBusinessAppointmentSettings::setCancellationWindowSeconds(const qint32 &cancellation_window_seconds) {
    m_cancellation_window_seconds = cancellation_window_seconds;
    m_cancellation_window_seconds_isSet = true;
}

bool OAIBusinessAppointmentSettings::is_cancellation_window_seconds_Set() const{
    return m_cancellation_window_seconds_isSet;
}

bool OAIBusinessAppointmentSettings::is_cancellation_window_seconds_Valid() const{
    return m_cancellation_window_seconds_isValid;
}

QList<QString> OAIBusinessAppointmentSettings::getLocationTypes() const {
    return m_location_types;
}
void OAIBusinessAppointmentSettings::setLocationTypes(const QList<QString> &location_types) {
    m_location_types = location_types;
    m_location_types_isSet = true;
}

bool OAIBusinessAppointmentSettings::is_location_types_Set() const{
    return m_location_types_isSet;
}

bool OAIBusinessAppointmentSettings::is_location_types_Valid() const{
    return m_location_types_isValid;
}

qint32 OAIBusinessAppointmentSettings::getMaxAppointmentsPerDayLimit() const {
    return m_max_appointments_per_day_limit;
}
void OAIBusinessAppointmentSettings::setMaxAppointmentsPerDayLimit(const qint32 &max_appointments_per_day_limit) {
    m_max_appointments_per_day_limit = max_appointments_per_day_limit;
    m_max_appointments_per_day_limit_isSet = true;
}

bool OAIBusinessAppointmentSettings::is_max_appointments_per_day_limit_Set() const{
    return m_max_appointments_per_day_limit_isSet;
}

bool OAIBusinessAppointmentSettings::is_max_appointments_per_day_limit_Valid() const{
    return m_max_appointments_per_day_limit_isValid;
}

QString OAIBusinessAppointmentSettings::getMaxAppointmentsPerDayLimitType() const {
    return m_max_appointments_per_day_limit_type;
}
void OAIBusinessAppointmentSettings::setMaxAppointmentsPerDayLimitType(const QString &max_appointments_per_day_limit_type) {
    m_max_appointments_per_day_limit_type = max_appointments_per_day_limit_type;
    m_max_appointments_per_day_limit_type_isSet = true;
}

bool OAIBusinessAppointmentSettings::is_max_appointments_per_day_limit_type_Set() const{
    return m_max_appointments_per_day_limit_type_isSet;
}

bool OAIBusinessAppointmentSettings::is_max_appointments_per_day_limit_type_Valid() const{
    return m_max_appointments_per_day_limit_type_isValid;
}

qint32 OAIBusinessAppointmentSettings::getMaxBookingLeadTimeSeconds() const {
    return m_max_booking_lead_time_seconds;
}
void OAIBusinessAppointmentSettings::setMaxBookingLeadTimeSeconds(const qint32 &max_booking_lead_time_seconds) {
    m_max_booking_lead_time_seconds = max_booking_lead_time_seconds;
    m_max_booking_lead_time_seconds_isSet = true;
}

bool OAIBusinessAppointmentSettings::is_max_booking_lead_time_seconds_Set() const{
    return m_max_booking_lead_time_seconds_isSet;
}

bool OAIBusinessAppointmentSettings::is_max_booking_lead_time_seconds_Valid() const{
    return m_max_booking_lead_time_seconds_isValid;
}

qint32 OAIBusinessAppointmentSettings::getMinBookingLeadTimeSeconds() const {
    return m_min_booking_lead_time_seconds;
}
void OAIBusinessAppointmentSettings::setMinBookingLeadTimeSeconds(const qint32 &min_booking_lead_time_seconds) {
    m_min_booking_lead_time_seconds = min_booking_lead_time_seconds;
    m_min_booking_lead_time_seconds_isSet = true;
}

bool OAIBusinessAppointmentSettings::is_min_booking_lead_time_seconds_Set() const{
    return m_min_booking_lead_time_seconds_isSet;
}

bool OAIBusinessAppointmentSettings::is_min_booking_lead_time_seconds_Valid() const{
    return m_min_booking_lead_time_seconds_isValid;
}

bool OAIBusinessAppointmentSettings::isMultipleServiceBookingEnabled() const {
    return m_multiple_service_booking_enabled;
}
void OAIBusinessAppointmentSettings::setMultipleServiceBookingEnabled(const bool &multiple_service_booking_enabled) {
    m_multiple_service_booking_enabled = multiple_service_booking_enabled;
    m_multiple_service_booking_enabled_isSet = true;
}

bool OAIBusinessAppointmentSettings::is_multiple_service_booking_enabled_Set() const{
    return m_multiple_service_booking_enabled_isSet;
}

bool OAIBusinessAppointmentSettings::is_multiple_service_booking_enabled_Valid() const{
    return m_multiple_service_booking_enabled_isValid;
}

bool OAIBusinessAppointmentSettings::isSkipBookingFlowStaffSelection() const {
    return m_skip_booking_flow_staff_selection;
}
void OAIBusinessAppointmentSettings::setSkipBookingFlowStaffSelection(const bool &skip_booking_flow_staff_selection) {
    m_skip_booking_flow_staff_selection = skip_booking_flow_staff_selection;
    m_skip_booking_flow_staff_selection_isSet = true;
}

bool OAIBusinessAppointmentSettings::is_skip_booking_flow_staff_selection_Set() const{
    return m_skip_booking_flow_staff_selection_isSet;
}

bool OAIBusinessAppointmentSettings::is_skip_booking_flow_staff_selection_Valid() const{
    return m_skip_booking_flow_staff_selection_isValid;
}

bool OAIBusinessAppointmentSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alignment_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_any_team_member_booking_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation_fee_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation_policy_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation_window_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_appointments_per_day_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_appointments_per_day_limit_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_booking_lead_time_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_booking_lead_time_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_service_booking_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_booking_flow_staff_selection_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBusinessAppointmentSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
