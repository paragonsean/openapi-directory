/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPaymentsApi_H
#define OAI_OAIPaymentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICancelPaymentByIdempotencyKeyRequest.h"
#include "OAICancelPaymentByIdempotencyKeyResponse.h"
#include "OAICancelPaymentResponse.h"
#include "OAICompletePaymentResponse.h"
#include "OAICreatePaymentRequest.h"
#include "OAICreatePaymentResponse.h"
#include "OAIGetPaymentResponse.h"
#include "OAIListPaymentsResponse.h"
#include "OAIUpdatePaymentRequest.h"
#include "OAIUpdatePaymentResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPaymentsApi : public QObject {
    Q_OBJECT

public:
    OAIPaymentsApi(const int timeOut = 0);
    ~OAIPaymentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  payment_id QString [required]
    */
    virtual void cancelPayment(const QString &payment_id);

    /**
    * @param[in]  oai_cancel_payment_by_idempotency_key_request OAICancelPaymentByIdempotencyKeyRequest [required]
    */
    virtual void cancelPaymentByIdempotencyKey(const OAICancelPaymentByIdempotencyKeyRequest &oai_cancel_payment_by_idempotency_key_request);

    /**
    * @param[in]  payment_id QString [required]
    */
    virtual void completePayment(const QString &payment_id);

    /**
    * @param[in]  oai_create_payment_request OAICreatePaymentRequest [required]
    */
    virtual void createPayment(const OAICreatePaymentRequest &oai_create_payment_request);

    /**
    * @param[in]  payment_id QString [required]
    */
    virtual void getPayment(const QString &payment_id);

    /**
    * @param[in]  payment_id QString [required]
    * @param[in]  oai_update_payment_request OAIUpdatePaymentRequest [required]
    */
    virtual void updatePayment(const QString &payment_id, const OAIUpdatePaymentRequest &oai_update_payment_request);

    /**
    * @param[in]  begin_time QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  total qint64 [optional]
    * @param[in]  last_4 QString [optional]
    * @param[in]  card_brand QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void v2PaymentsGet(const ::OpenAPI::OptionalParam<QString> &begin_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &total = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &last_4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &card_brand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelPaymentCallback(OAIHttpRequestWorker *worker);
    void cancelPaymentByIdempotencyKeyCallback(OAIHttpRequestWorker *worker);
    void completePaymentCallback(OAIHttpRequestWorker *worker);
    void createPaymentCallback(OAIHttpRequestWorker *worker);
    void getPaymentCallback(OAIHttpRequestWorker *worker);
    void updatePaymentCallback(OAIHttpRequestWorker *worker);
    void v2PaymentsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelPaymentSignal(OAICancelPaymentResponse summary);
    void cancelPaymentByIdempotencyKeySignal(OAICancelPaymentByIdempotencyKeyResponse summary);
    void completePaymentSignal(OAICompletePaymentResponse summary);
    void createPaymentSignal(OAICreatePaymentResponse summary);
    void getPaymentSignal(OAIGetPaymentResponse summary);
    void updatePaymentSignal(OAIUpdatePaymentResponse summary);
    void v2PaymentsGetSignal(OAIListPaymentsResponse summary);


    void cancelPaymentSignalFull(OAIHttpRequestWorker *worker, OAICancelPaymentResponse summary);
    void cancelPaymentByIdempotencyKeySignalFull(OAIHttpRequestWorker *worker, OAICancelPaymentByIdempotencyKeyResponse summary);
    void completePaymentSignalFull(OAIHttpRequestWorker *worker, OAICompletePaymentResponse summary);
    void createPaymentSignalFull(OAIHttpRequestWorker *worker, OAICreatePaymentResponse summary);
    void getPaymentSignalFull(OAIHttpRequestWorker *worker, OAIGetPaymentResponse summary);
    void updatePaymentSignalFull(OAIHttpRequestWorker *worker, OAIUpdatePaymentResponse summary);
    void v2PaymentsGetSignalFull(OAIHttpRequestWorker *worker, OAIListPaymentsResponse summary);

    Q_DECL_DEPRECATED_X("Use cancelPaymentSignalError() instead")
    void cancelPaymentSignalE(OAICancelPaymentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelPaymentSignalError(OAICancelPaymentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelPaymentByIdempotencyKeySignalError() instead")
    void cancelPaymentByIdempotencyKeySignalE(OAICancelPaymentByIdempotencyKeyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelPaymentByIdempotencyKeySignalError(OAICancelPaymentByIdempotencyKeyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completePaymentSignalError() instead")
    void completePaymentSignalE(OAICompletePaymentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void completePaymentSignalError(OAICompletePaymentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPaymentSignalError() instead")
    void createPaymentSignalE(OAICreatePaymentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentSignalError(OAICreatePaymentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentSignalError() instead")
    void getPaymentSignalE(OAIGetPaymentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentSignalError(OAIGetPaymentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaymentSignalError() instead")
    void updatePaymentSignalE(OAIUpdatePaymentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaymentSignalError(OAIUpdatePaymentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2PaymentsGetSignalError() instead")
    void v2PaymentsGetSignalE(OAIListPaymentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2PaymentsGetSignalError(OAIListPaymentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelPaymentSignalErrorFull() instead")
    void cancelPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelPaymentByIdempotencyKeySignalErrorFull() instead")
    void cancelPaymentByIdempotencyKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelPaymentByIdempotencyKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completePaymentSignalErrorFull() instead")
    void completePaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completePaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPaymentSignalErrorFull() instead")
    void createPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentSignalErrorFull() instead")
    void getPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaymentSignalErrorFull() instead")
    void updatePaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2PaymentsGetSignalErrorFull() instead")
    void v2PaymentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2PaymentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
