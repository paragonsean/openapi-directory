/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWageSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWageSetting::OAIWageSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWageSetting::OAIWageSetting() {
    this->initializeModel();
}

OAIWageSetting::~OAIWageSetting() {}

void OAIWageSetting::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_is_overtime_exempt_isSet = false;
    m_is_overtime_exempt_isValid = false;

    m_job_assignments_isSet = false;
    m_job_assignments_isValid = false;

    m_team_member_id_isSet = false;
    m_team_member_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIWageSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWageSetting::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_is_overtime_exempt_isValid = ::OpenAPI::fromJsonValue(m_is_overtime_exempt, json[QString("is_overtime_exempt")]);
    m_is_overtime_exempt_isSet = !json[QString("is_overtime_exempt")].isNull() && m_is_overtime_exempt_isValid;

    m_job_assignments_isValid = ::OpenAPI::fromJsonValue(m_job_assignments, json[QString("job_assignments")]);
    m_job_assignments_isSet = !json[QString("job_assignments")].isNull() && m_job_assignments_isValid;

    m_team_member_id_isValid = ::OpenAPI::fromJsonValue(m_team_member_id, json[QString("team_member_id")]);
    m_team_member_id_isSet = !json[QString("team_member_id")].isNull() && m_team_member_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIWageSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWageSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_is_overtime_exempt_isSet) {
        obj.insert(QString("is_overtime_exempt"), ::OpenAPI::toJsonValue(m_is_overtime_exempt));
    }
    if (m_job_assignments.size() > 0) {
        obj.insert(QString("job_assignments"), ::OpenAPI::toJsonValue(m_job_assignments));
    }
    if (m_team_member_id_isSet) {
        obj.insert(QString("team_member_id"), ::OpenAPI::toJsonValue(m_team_member_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIWageSetting::getCreatedAt() const {
    return m_created_at;
}
void OAIWageSetting::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIWageSetting::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWageSetting::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIWageSetting::isIsOvertimeExempt() const {
    return m_is_overtime_exempt;
}
void OAIWageSetting::setIsOvertimeExempt(const bool &is_overtime_exempt) {
    m_is_overtime_exempt = is_overtime_exempt;
    m_is_overtime_exempt_isSet = true;
}

bool OAIWageSetting::is_is_overtime_exempt_Set() const{
    return m_is_overtime_exempt_isSet;
}

bool OAIWageSetting::is_is_overtime_exempt_Valid() const{
    return m_is_overtime_exempt_isValid;
}

QList<OAIJobAssignment> OAIWageSetting::getJobAssignments() const {
    return m_job_assignments;
}
void OAIWageSetting::setJobAssignments(const QList<OAIJobAssignment> &job_assignments) {
    m_job_assignments = job_assignments;
    m_job_assignments_isSet = true;
}

bool OAIWageSetting::is_job_assignments_Set() const{
    return m_job_assignments_isSet;
}

bool OAIWageSetting::is_job_assignments_Valid() const{
    return m_job_assignments_isValid;
}

QString OAIWageSetting::getTeamMemberId() const {
    return m_team_member_id;
}
void OAIWageSetting::setTeamMemberId(const QString &team_member_id) {
    m_team_member_id = team_member_id;
    m_team_member_id_isSet = true;
}

bool OAIWageSetting::is_team_member_id_Set() const{
    return m_team_member_id_isSet;
}

bool OAIWageSetting::is_team_member_id_Valid() const{
    return m_team_member_id_isValid;
}

QString OAIWageSetting::getUpdatedAt() const {
    return m_updated_at;
}
void OAIWageSetting::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIWageSetting::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIWageSetting::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

qint32 OAIWageSetting::getVersion() const {
    return m_version;
}
void OAIWageSetting::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIWageSetting::is_version_Set() const{
    return m_version_isSet;
}

bool OAIWageSetting::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIWageSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_overtime_exempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWageSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
