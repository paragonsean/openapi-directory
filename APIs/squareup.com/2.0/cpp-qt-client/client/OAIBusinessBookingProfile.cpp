/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBusinessBookingProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBusinessBookingProfile::OAIBusinessBookingProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBusinessBookingProfile::OAIBusinessBookingProfile() {
    this->initializeModel();
}

OAIBusinessBookingProfile::~OAIBusinessBookingProfile() {}

void OAIBusinessBookingProfile::initializeModel() {

    m_allow_user_cancel_isSet = false;
    m_allow_user_cancel_isValid = false;

    m_booking_enabled_isSet = false;
    m_booking_enabled_isValid = false;

    m_booking_policy_isSet = false;
    m_booking_policy_isValid = false;

    m_business_appointment_settings_isSet = false;
    m_business_appointment_settings_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_customer_timezone_choice_isSet = false;
    m_customer_timezone_choice_isValid = false;

    m_seller_id_isSet = false;
    m_seller_id_isValid = false;
}

void OAIBusinessBookingProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBusinessBookingProfile::fromJsonObject(QJsonObject json) {

    m_allow_user_cancel_isValid = ::OpenAPI::fromJsonValue(m_allow_user_cancel, json[QString("allow_user_cancel")]);
    m_allow_user_cancel_isSet = !json[QString("allow_user_cancel")].isNull() && m_allow_user_cancel_isValid;

    m_booking_enabled_isValid = ::OpenAPI::fromJsonValue(m_booking_enabled, json[QString("booking_enabled")]);
    m_booking_enabled_isSet = !json[QString("booking_enabled")].isNull() && m_booking_enabled_isValid;

    m_booking_policy_isValid = ::OpenAPI::fromJsonValue(m_booking_policy, json[QString("booking_policy")]);
    m_booking_policy_isSet = !json[QString("booking_policy")].isNull() && m_booking_policy_isValid;

    m_business_appointment_settings_isValid = ::OpenAPI::fromJsonValue(m_business_appointment_settings, json[QString("business_appointment_settings")]);
    m_business_appointment_settings_isSet = !json[QString("business_appointment_settings")].isNull() && m_business_appointment_settings_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_customer_timezone_choice_isValid = ::OpenAPI::fromJsonValue(m_customer_timezone_choice, json[QString("customer_timezone_choice")]);
    m_customer_timezone_choice_isSet = !json[QString("customer_timezone_choice")].isNull() && m_customer_timezone_choice_isValid;

    m_seller_id_isValid = ::OpenAPI::fromJsonValue(m_seller_id, json[QString("seller_id")]);
    m_seller_id_isSet = !json[QString("seller_id")].isNull() && m_seller_id_isValid;
}

QString OAIBusinessBookingProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBusinessBookingProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_user_cancel_isSet) {
        obj.insert(QString("allow_user_cancel"), ::OpenAPI::toJsonValue(m_allow_user_cancel));
    }
    if (m_booking_enabled_isSet) {
        obj.insert(QString("booking_enabled"), ::OpenAPI::toJsonValue(m_booking_enabled));
    }
    if (m_booking_policy_isSet) {
        obj.insert(QString("booking_policy"), ::OpenAPI::toJsonValue(m_booking_policy));
    }
    if (m_business_appointment_settings.isSet()) {
        obj.insert(QString("business_appointment_settings"), ::OpenAPI::toJsonValue(m_business_appointment_settings));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_customer_timezone_choice_isSet) {
        obj.insert(QString("customer_timezone_choice"), ::OpenAPI::toJsonValue(m_customer_timezone_choice));
    }
    if (m_seller_id_isSet) {
        obj.insert(QString("seller_id"), ::OpenAPI::toJsonValue(m_seller_id));
    }
    return obj;
}

bool OAIBusinessBookingProfile::isAllowUserCancel() const {
    return m_allow_user_cancel;
}
void OAIBusinessBookingProfile::setAllowUserCancel(const bool &allow_user_cancel) {
    m_allow_user_cancel = allow_user_cancel;
    m_allow_user_cancel_isSet = true;
}

bool OAIBusinessBookingProfile::is_allow_user_cancel_Set() const{
    return m_allow_user_cancel_isSet;
}

bool OAIBusinessBookingProfile::is_allow_user_cancel_Valid() const{
    return m_allow_user_cancel_isValid;
}

bool OAIBusinessBookingProfile::isBookingEnabled() const {
    return m_booking_enabled;
}
void OAIBusinessBookingProfile::setBookingEnabled(const bool &booking_enabled) {
    m_booking_enabled = booking_enabled;
    m_booking_enabled_isSet = true;
}

bool OAIBusinessBookingProfile::is_booking_enabled_Set() const{
    return m_booking_enabled_isSet;
}

bool OAIBusinessBookingProfile::is_booking_enabled_Valid() const{
    return m_booking_enabled_isValid;
}

QString OAIBusinessBookingProfile::getBookingPolicy() const {
    return m_booking_policy;
}
void OAIBusinessBookingProfile::setBookingPolicy(const QString &booking_policy) {
    m_booking_policy = booking_policy;
    m_booking_policy_isSet = true;
}

bool OAIBusinessBookingProfile::is_booking_policy_Set() const{
    return m_booking_policy_isSet;
}

bool OAIBusinessBookingProfile::is_booking_policy_Valid() const{
    return m_booking_policy_isValid;
}

OAIBusinessAppointmentSettings OAIBusinessBookingProfile::getBusinessAppointmentSettings() const {
    return m_business_appointment_settings;
}
void OAIBusinessBookingProfile::setBusinessAppointmentSettings(const OAIBusinessAppointmentSettings &business_appointment_settings) {
    m_business_appointment_settings = business_appointment_settings;
    m_business_appointment_settings_isSet = true;
}

bool OAIBusinessBookingProfile::is_business_appointment_settings_Set() const{
    return m_business_appointment_settings_isSet;
}

bool OAIBusinessBookingProfile::is_business_appointment_settings_Valid() const{
    return m_business_appointment_settings_isValid;
}

QString OAIBusinessBookingProfile::getCreatedAt() const {
    return m_created_at;
}
void OAIBusinessBookingProfile::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIBusinessBookingProfile::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIBusinessBookingProfile::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIBusinessBookingProfile::getCustomerTimezoneChoice() const {
    return m_customer_timezone_choice;
}
void OAIBusinessBookingProfile::setCustomerTimezoneChoice(const QString &customer_timezone_choice) {
    m_customer_timezone_choice = customer_timezone_choice;
    m_customer_timezone_choice_isSet = true;
}

bool OAIBusinessBookingProfile::is_customer_timezone_choice_Set() const{
    return m_customer_timezone_choice_isSet;
}

bool OAIBusinessBookingProfile::is_customer_timezone_choice_Valid() const{
    return m_customer_timezone_choice_isValid;
}

QString OAIBusinessBookingProfile::getSellerId() const {
    return m_seller_id;
}
void OAIBusinessBookingProfile::setSellerId(const QString &seller_id) {
    m_seller_id = seller_id;
    m_seller_id_isSet = true;
}

bool OAIBusinessBookingProfile::is_seller_id_Set() const{
    return m_seller_id_isSet;
}

bool OAIBusinessBookingProfile::is_seller_id_Valid() const{
    return m_seller_id_isValid;
}

bool OAIBusinessBookingProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_user_cancel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_appointment_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_timezone_choice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBusinessBookingProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
