/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyAccountMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyAccountMapping::OAILoyaltyAccountMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyAccountMapping::OAILoyaltyAccountMapping() {
    this->initializeModel();
}

OAILoyaltyAccountMapping::~OAILoyaltyAccountMapping() {}

void OAILoyaltyAccountMapping::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;
}

void OAILoyaltyAccountMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyAccountMapping::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phone_number")]);
    m_phone_number_isSet = !json[QString("phone_number")].isNull() && m_phone_number_isValid;
}

QString OAILoyaltyAccountMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyAccountMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phone_number"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    return obj;
}

QString OAILoyaltyAccountMapping::getCreatedAt() const {
    return m_created_at;
}
void OAILoyaltyAccountMapping::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAILoyaltyAccountMapping::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAILoyaltyAccountMapping::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAILoyaltyAccountMapping::getId() const {
    return m_id;
}
void OAILoyaltyAccountMapping::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILoyaltyAccountMapping::is_id_Set() const{
    return m_id_isSet;
}

bool OAILoyaltyAccountMapping::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILoyaltyAccountMapping::getPhoneNumber() const {
    return m_phone_number;
}
void OAILoyaltyAccountMapping::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAILoyaltyAccountMapping::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAILoyaltyAccountMapping::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

bool OAILoyaltyAccountMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyAccountMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
