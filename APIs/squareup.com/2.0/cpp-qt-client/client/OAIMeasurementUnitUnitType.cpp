/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeasurementUnitUnitType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeasurementUnitUnitType::OAIMeasurementUnitUnitType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeasurementUnitUnitType::OAIMeasurementUnitUnitType() {
    this->initializeModel();
}

OAIMeasurementUnitUnitType::~OAIMeasurementUnitUnitType() {}

void OAIMeasurementUnitUnitType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMeasurementUnitUnitType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMeasurementUnitUnitType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TYPE_CUSTOM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitUnitType::CUSTOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TYPE_AREA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitUnitType::AREA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TYPE_LENGTH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitUnitType::LENGTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TYPE_VOLUME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitUnitType::VOLUME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TYPE_WEIGHT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitUnitType::WEIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TYPE_GENERIC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitUnitType::GENERIC;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMeasurementUnitUnitType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMeasurementUnitUnitType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMeasurementUnitUnitType::CUSTOM:
            val = "TYPE_CUSTOM";
            break;
        case eOAIMeasurementUnitUnitType::AREA:
            val = "TYPE_AREA";
            break;
        case eOAIMeasurementUnitUnitType::LENGTH:
            val = "TYPE_LENGTH";
            break;
        case eOAIMeasurementUnitUnitType::VOLUME:
            val = "TYPE_VOLUME";
            break;
        case eOAIMeasurementUnitUnitType::WEIGHT:
            val = "TYPE_WEIGHT";
            break;
        case eOAIMeasurementUnitUnitType::GENERIC:
            val = "TYPE_GENERIC";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMeasurementUnitUnitType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMeasurementUnitUnitType::eOAIMeasurementUnitUnitType OAIMeasurementUnitUnitType::getValue() const {
    return m_value;
}

void OAIMeasurementUnitUnitType::setValue(const OAIMeasurementUnitUnitType::eOAIMeasurementUnitUnitType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMeasurementUnitUnitType::isSet() const {
    
    return m_value_isSet;
}

bool OAIMeasurementUnitUnitType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
