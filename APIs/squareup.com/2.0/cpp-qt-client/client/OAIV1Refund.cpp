/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1Refund.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV1Refund::OAIV1Refund(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV1Refund::OAIV1Refund() {
    this->initializeModel();
}

OAIV1Refund::~OAIV1Refund() {}

void OAIV1Refund::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_is_exchange_isSet = false;
    m_is_exchange_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_processed_at_isSet = false;
    m_processed_at_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_refunded_additive_tax_isSet = false;
    m_refunded_additive_tax_isValid = false;

    m_refunded_additive_tax_money_isSet = false;
    m_refunded_additive_tax_money_isValid = false;

    m_refunded_discount_money_isSet = false;
    m_refunded_discount_money_isValid = false;

    m_refunded_inclusive_tax_isSet = false;
    m_refunded_inclusive_tax_isValid = false;

    m_refunded_inclusive_tax_money_isSet = false;
    m_refunded_inclusive_tax_money_isValid = false;

    m_refunded_money_isSet = false;
    m_refunded_money_isValid = false;

    m_refunded_processing_fee_money_isSet = false;
    m_refunded_processing_fee_money_isValid = false;

    m_refunded_surcharge_money_isSet = false;
    m_refunded_surcharge_money_isValid = false;

    m_refunded_surcharges_isSet = false;
    m_refunded_surcharges_isValid = false;

    m_refunded_tax_money_isSet = false;
    m_refunded_tax_money_isValid = false;

    m_refunded_tip_money_isSet = false;
    m_refunded_tip_money_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIV1Refund::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV1Refund::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_is_exchange_isValid = ::OpenAPI::fromJsonValue(m_is_exchange, json[QString("is_exchange")]);
    m_is_exchange_isSet = !json[QString("is_exchange")].isNull() && m_is_exchange_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("merchant_id")]);
    m_merchant_id_isSet = !json[QString("merchant_id")].isNull() && m_merchant_id_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("payment_id")]);
    m_payment_id_isSet = !json[QString("payment_id")].isNull() && m_payment_id_isValid;

    m_processed_at_isValid = ::OpenAPI::fromJsonValue(m_processed_at, json[QString("processed_at")]);
    m_processed_at_isSet = !json[QString("processed_at")].isNull() && m_processed_at_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_refunded_additive_tax_isValid = ::OpenAPI::fromJsonValue(m_refunded_additive_tax, json[QString("refunded_additive_tax")]);
    m_refunded_additive_tax_isSet = !json[QString("refunded_additive_tax")].isNull() && m_refunded_additive_tax_isValid;

    m_refunded_additive_tax_money_isValid = ::OpenAPI::fromJsonValue(m_refunded_additive_tax_money, json[QString("refunded_additive_tax_money")]);
    m_refunded_additive_tax_money_isSet = !json[QString("refunded_additive_tax_money")].isNull() && m_refunded_additive_tax_money_isValid;

    m_refunded_discount_money_isValid = ::OpenAPI::fromJsonValue(m_refunded_discount_money, json[QString("refunded_discount_money")]);
    m_refunded_discount_money_isSet = !json[QString("refunded_discount_money")].isNull() && m_refunded_discount_money_isValid;

    m_refunded_inclusive_tax_isValid = ::OpenAPI::fromJsonValue(m_refunded_inclusive_tax, json[QString("refunded_inclusive_tax")]);
    m_refunded_inclusive_tax_isSet = !json[QString("refunded_inclusive_tax")].isNull() && m_refunded_inclusive_tax_isValid;

    m_refunded_inclusive_tax_money_isValid = ::OpenAPI::fromJsonValue(m_refunded_inclusive_tax_money, json[QString("refunded_inclusive_tax_money")]);
    m_refunded_inclusive_tax_money_isSet = !json[QString("refunded_inclusive_tax_money")].isNull() && m_refunded_inclusive_tax_money_isValid;

    m_refunded_money_isValid = ::OpenAPI::fromJsonValue(m_refunded_money, json[QString("refunded_money")]);
    m_refunded_money_isSet = !json[QString("refunded_money")].isNull() && m_refunded_money_isValid;

    m_refunded_processing_fee_money_isValid = ::OpenAPI::fromJsonValue(m_refunded_processing_fee_money, json[QString("refunded_processing_fee_money")]);
    m_refunded_processing_fee_money_isSet = !json[QString("refunded_processing_fee_money")].isNull() && m_refunded_processing_fee_money_isValid;

    m_refunded_surcharge_money_isValid = ::OpenAPI::fromJsonValue(m_refunded_surcharge_money, json[QString("refunded_surcharge_money")]);
    m_refunded_surcharge_money_isSet = !json[QString("refunded_surcharge_money")].isNull() && m_refunded_surcharge_money_isValid;

    m_refunded_surcharges_isValid = ::OpenAPI::fromJsonValue(m_refunded_surcharges, json[QString("refunded_surcharges")]);
    m_refunded_surcharges_isSet = !json[QString("refunded_surcharges")].isNull() && m_refunded_surcharges_isValid;

    m_refunded_tax_money_isValid = ::OpenAPI::fromJsonValue(m_refunded_tax_money, json[QString("refunded_tax_money")]);
    m_refunded_tax_money_isSet = !json[QString("refunded_tax_money")].isNull() && m_refunded_tax_money_isValid;

    m_refunded_tip_money_isValid = ::OpenAPI::fromJsonValue(m_refunded_tip_money, json[QString("refunded_tip_money")]);
    m_refunded_tip_money_isSet = !json[QString("refunded_tip_money")].isNull() && m_refunded_tip_money_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIV1Refund::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV1Refund::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_is_exchange_isSet) {
        obj.insert(QString("is_exchange"), ::OpenAPI::toJsonValue(m_is_exchange));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("merchant_id"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("payment_id"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_processed_at_isSet) {
        obj.insert(QString("processed_at"), ::OpenAPI::toJsonValue(m_processed_at));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_refunded_additive_tax.size() > 0) {
        obj.insert(QString("refunded_additive_tax"), ::OpenAPI::toJsonValue(m_refunded_additive_tax));
    }
    if (m_refunded_additive_tax_money.isSet()) {
        obj.insert(QString("refunded_additive_tax_money"), ::OpenAPI::toJsonValue(m_refunded_additive_tax_money));
    }
    if (m_refunded_discount_money.isSet()) {
        obj.insert(QString("refunded_discount_money"), ::OpenAPI::toJsonValue(m_refunded_discount_money));
    }
    if (m_refunded_inclusive_tax.size() > 0) {
        obj.insert(QString("refunded_inclusive_tax"), ::OpenAPI::toJsonValue(m_refunded_inclusive_tax));
    }
    if (m_refunded_inclusive_tax_money.isSet()) {
        obj.insert(QString("refunded_inclusive_tax_money"), ::OpenAPI::toJsonValue(m_refunded_inclusive_tax_money));
    }
    if (m_refunded_money.isSet()) {
        obj.insert(QString("refunded_money"), ::OpenAPI::toJsonValue(m_refunded_money));
    }
    if (m_refunded_processing_fee_money.isSet()) {
        obj.insert(QString("refunded_processing_fee_money"), ::OpenAPI::toJsonValue(m_refunded_processing_fee_money));
    }
    if (m_refunded_surcharge_money.isSet()) {
        obj.insert(QString("refunded_surcharge_money"), ::OpenAPI::toJsonValue(m_refunded_surcharge_money));
    }
    if (m_refunded_surcharges.size() > 0) {
        obj.insert(QString("refunded_surcharges"), ::OpenAPI::toJsonValue(m_refunded_surcharges));
    }
    if (m_refunded_tax_money.isSet()) {
        obj.insert(QString("refunded_tax_money"), ::OpenAPI::toJsonValue(m_refunded_tax_money));
    }
    if (m_refunded_tip_money.isSet()) {
        obj.insert(QString("refunded_tip_money"), ::OpenAPI::toJsonValue(m_refunded_tip_money));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIV1Refund::getCreatedAt() const {
    return m_created_at;
}
void OAIV1Refund::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIV1Refund::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIV1Refund::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIV1Refund::isIsExchange() const {
    return m_is_exchange;
}
void OAIV1Refund::setIsExchange(const bool &is_exchange) {
    m_is_exchange = is_exchange;
    m_is_exchange_isSet = true;
}

bool OAIV1Refund::is_is_exchange_Set() const{
    return m_is_exchange_isSet;
}

bool OAIV1Refund::is_is_exchange_Valid() const{
    return m_is_exchange_isValid;
}

QString OAIV1Refund::getMerchantId() const {
    return m_merchant_id;
}
void OAIV1Refund::setMerchantId(const QString &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAIV1Refund::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAIV1Refund::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

QString OAIV1Refund::getPaymentId() const {
    return m_payment_id;
}
void OAIV1Refund::setPaymentId(const QString &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAIV1Refund::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAIV1Refund::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

QString OAIV1Refund::getProcessedAt() const {
    return m_processed_at;
}
void OAIV1Refund::setProcessedAt(const QString &processed_at) {
    m_processed_at = processed_at;
    m_processed_at_isSet = true;
}

bool OAIV1Refund::is_processed_at_Set() const{
    return m_processed_at_isSet;
}

bool OAIV1Refund::is_processed_at_Valid() const{
    return m_processed_at_isValid;
}

QString OAIV1Refund::getReason() const {
    return m_reason;
}
void OAIV1Refund::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIV1Refund::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIV1Refund::is_reason_Valid() const{
    return m_reason_isValid;
}

QList<OAIV1PaymentTax> OAIV1Refund::getRefundedAdditiveTax() const {
    return m_refunded_additive_tax;
}
void OAIV1Refund::setRefundedAdditiveTax(const QList<OAIV1PaymentTax> &refunded_additive_tax) {
    m_refunded_additive_tax = refunded_additive_tax;
    m_refunded_additive_tax_isSet = true;
}

bool OAIV1Refund::is_refunded_additive_tax_Set() const{
    return m_refunded_additive_tax_isSet;
}

bool OAIV1Refund::is_refunded_additive_tax_Valid() const{
    return m_refunded_additive_tax_isValid;
}

OAIV1Money OAIV1Refund::getRefundedAdditiveTaxMoney() const {
    return m_refunded_additive_tax_money;
}
void OAIV1Refund::setRefundedAdditiveTaxMoney(const OAIV1Money &refunded_additive_tax_money) {
    m_refunded_additive_tax_money = refunded_additive_tax_money;
    m_refunded_additive_tax_money_isSet = true;
}

bool OAIV1Refund::is_refunded_additive_tax_money_Set() const{
    return m_refunded_additive_tax_money_isSet;
}

bool OAIV1Refund::is_refunded_additive_tax_money_Valid() const{
    return m_refunded_additive_tax_money_isValid;
}

OAIV1Money OAIV1Refund::getRefundedDiscountMoney() const {
    return m_refunded_discount_money;
}
void OAIV1Refund::setRefundedDiscountMoney(const OAIV1Money &refunded_discount_money) {
    m_refunded_discount_money = refunded_discount_money;
    m_refunded_discount_money_isSet = true;
}

bool OAIV1Refund::is_refunded_discount_money_Set() const{
    return m_refunded_discount_money_isSet;
}

bool OAIV1Refund::is_refunded_discount_money_Valid() const{
    return m_refunded_discount_money_isValid;
}

QList<OAIV1PaymentTax> OAIV1Refund::getRefundedInclusiveTax() const {
    return m_refunded_inclusive_tax;
}
void OAIV1Refund::setRefundedInclusiveTax(const QList<OAIV1PaymentTax> &refunded_inclusive_tax) {
    m_refunded_inclusive_tax = refunded_inclusive_tax;
    m_refunded_inclusive_tax_isSet = true;
}

bool OAIV1Refund::is_refunded_inclusive_tax_Set() const{
    return m_refunded_inclusive_tax_isSet;
}

bool OAIV1Refund::is_refunded_inclusive_tax_Valid() const{
    return m_refunded_inclusive_tax_isValid;
}

OAIV1Money OAIV1Refund::getRefundedInclusiveTaxMoney() const {
    return m_refunded_inclusive_tax_money;
}
void OAIV1Refund::setRefundedInclusiveTaxMoney(const OAIV1Money &refunded_inclusive_tax_money) {
    m_refunded_inclusive_tax_money = refunded_inclusive_tax_money;
    m_refunded_inclusive_tax_money_isSet = true;
}

bool OAIV1Refund::is_refunded_inclusive_tax_money_Set() const{
    return m_refunded_inclusive_tax_money_isSet;
}

bool OAIV1Refund::is_refunded_inclusive_tax_money_Valid() const{
    return m_refunded_inclusive_tax_money_isValid;
}

OAIV1Money OAIV1Refund::getRefundedMoney() const {
    return m_refunded_money;
}
void OAIV1Refund::setRefundedMoney(const OAIV1Money &refunded_money) {
    m_refunded_money = refunded_money;
    m_refunded_money_isSet = true;
}

bool OAIV1Refund::is_refunded_money_Set() const{
    return m_refunded_money_isSet;
}

bool OAIV1Refund::is_refunded_money_Valid() const{
    return m_refunded_money_isValid;
}

OAIV1Money OAIV1Refund::getRefundedProcessingFeeMoney() const {
    return m_refunded_processing_fee_money;
}
void OAIV1Refund::setRefundedProcessingFeeMoney(const OAIV1Money &refunded_processing_fee_money) {
    m_refunded_processing_fee_money = refunded_processing_fee_money;
    m_refunded_processing_fee_money_isSet = true;
}

bool OAIV1Refund::is_refunded_processing_fee_money_Set() const{
    return m_refunded_processing_fee_money_isSet;
}

bool OAIV1Refund::is_refunded_processing_fee_money_Valid() const{
    return m_refunded_processing_fee_money_isValid;
}

OAIV1Money OAIV1Refund::getRefundedSurchargeMoney() const {
    return m_refunded_surcharge_money;
}
void OAIV1Refund::setRefundedSurchargeMoney(const OAIV1Money &refunded_surcharge_money) {
    m_refunded_surcharge_money = refunded_surcharge_money;
    m_refunded_surcharge_money_isSet = true;
}

bool OAIV1Refund::is_refunded_surcharge_money_Set() const{
    return m_refunded_surcharge_money_isSet;
}

bool OAIV1Refund::is_refunded_surcharge_money_Valid() const{
    return m_refunded_surcharge_money_isValid;
}

QList<OAIV1PaymentSurcharge> OAIV1Refund::getRefundedSurcharges() const {
    return m_refunded_surcharges;
}
void OAIV1Refund::setRefundedSurcharges(const QList<OAIV1PaymentSurcharge> &refunded_surcharges) {
    m_refunded_surcharges = refunded_surcharges;
    m_refunded_surcharges_isSet = true;
}

bool OAIV1Refund::is_refunded_surcharges_Set() const{
    return m_refunded_surcharges_isSet;
}

bool OAIV1Refund::is_refunded_surcharges_Valid() const{
    return m_refunded_surcharges_isValid;
}

OAIV1Money OAIV1Refund::getRefundedTaxMoney() const {
    return m_refunded_tax_money;
}
void OAIV1Refund::setRefundedTaxMoney(const OAIV1Money &refunded_tax_money) {
    m_refunded_tax_money = refunded_tax_money;
    m_refunded_tax_money_isSet = true;
}

bool OAIV1Refund::is_refunded_tax_money_Set() const{
    return m_refunded_tax_money_isSet;
}

bool OAIV1Refund::is_refunded_tax_money_Valid() const{
    return m_refunded_tax_money_isValid;
}

OAIV1Money OAIV1Refund::getRefundedTipMoney() const {
    return m_refunded_tip_money;
}
void OAIV1Refund::setRefundedTipMoney(const OAIV1Money &refunded_tip_money) {
    m_refunded_tip_money = refunded_tip_money;
    m_refunded_tip_money_isSet = true;
}

bool OAIV1Refund::is_refunded_tip_money_Set() const{
    return m_refunded_tip_money_isSet;
}

bool OAIV1Refund::is_refunded_tip_money_Valid() const{
    return m_refunded_tip_money_isValid;
}

QString OAIV1Refund::getType() const {
    return m_type;
}
void OAIV1Refund::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIV1Refund::is_type_Set() const{
    return m_type_isSet;
}

bool OAIV1Refund::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIV1Refund::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_additive_tax.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_additive_tax_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_discount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_inclusive_tax.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_inclusive_tax_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_processing_fee_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_surcharge_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_surcharges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_tax_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_tip_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV1Refund::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
