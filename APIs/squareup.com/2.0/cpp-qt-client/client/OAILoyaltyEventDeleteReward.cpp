/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyEventDeleteReward.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyEventDeleteReward::OAILoyaltyEventDeleteReward(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyEventDeleteReward::OAILoyaltyEventDeleteReward() {
    this->initializeModel();
}

OAILoyaltyEventDeleteReward::~OAILoyaltyEventDeleteReward() {}

void OAILoyaltyEventDeleteReward::initializeModel() {

    m_loyalty_program_id_isSet = false;
    m_loyalty_program_id_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;

    m_reward_id_isSet = false;
    m_reward_id_isValid = false;
}

void OAILoyaltyEventDeleteReward::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyEventDeleteReward::fromJsonObject(QJsonObject json) {

    m_loyalty_program_id_isValid = ::OpenAPI::fromJsonValue(m_loyalty_program_id, json[QString("loyalty_program_id")]);
    m_loyalty_program_id_isSet = !json[QString("loyalty_program_id")].isNull() && m_loyalty_program_id_isValid;

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("points")]);
    m_points_isSet = !json[QString("points")].isNull() && m_points_isValid;

    m_reward_id_isValid = ::OpenAPI::fromJsonValue(m_reward_id, json[QString("reward_id")]);
    m_reward_id_isSet = !json[QString("reward_id")].isNull() && m_reward_id_isValid;
}

QString OAILoyaltyEventDeleteReward::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyEventDeleteReward::asJsonObject() const {
    QJsonObject obj;
    if (m_loyalty_program_id_isSet) {
        obj.insert(QString("loyalty_program_id"), ::OpenAPI::toJsonValue(m_loyalty_program_id));
    }
    if (m_points_isSet) {
        obj.insert(QString("points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_reward_id_isSet) {
        obj.insert(QString("reward_id"), ::OpenAPI::toJsonValue(m_reward_id));
    }
    return obj;
}

QString OAILoyaltyEventDeleteReward::getLoyaltyProgramId() const {
    return m_loyalty_program_id;
}
void OAILoyaltyEventDeleteReward::setLoyaltyProgramId(const QString &loyalty_program_id) {
    m_loyalty_program_id = loyalty_program_id;
    m_loyalty_program_id_isSet = true;
}

bool OAILoyaltyEventDeleteReward::is_loyalty_program_id_Set() const{
    return m_loyalty_program_id_isSet;
}

bool OAILoyaltyEventDeleteReward::is_loyalty_program_id_Valid() const{
    return m_loyalty_program_id_isValid;
}

qint32 OAILoyaltyEventDeleteReward::getPoints() const {
    return m_points;
}
void OAILoyaltyEventDeleteReward::setPoints(const qint32 &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAILoyaltyEventDeleteReward::is_points_Set() const{
    return m_points_isSet;
}

bool OAILoyaltyEventDeleteReward::is_points_Valid() const{
    return m_points_isValid;
}

QString OAILoyaltyEventDeleteReward::getRewardId() const {
    return m_reward_id;
}
void OAILoyaltyEventDeleteReward::setRewardId(const QString &reward_id) {
    m_reward_id = reward_id;
    m_reward_id_isSet = true;
}

bool OAILoyaltyEventDeleteReward::is_reward_id_Set() const{
    return m_reward_id_isSet;
}

bool OAILoyaltyEventDeleteReward::is_reward_id_Valid() const{
    return m_reward_id_isValid;
}

bool OAILoyaltyEventDeleteReward::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_loyalty_program_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyEventDeleteReward::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_loyalty_program_id_isValid && m_points_isValid && true;
}

} // namespace OpenAPI
