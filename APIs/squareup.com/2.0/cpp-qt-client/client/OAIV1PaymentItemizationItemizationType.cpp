/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1PaymentItemizationItemizationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV1PaymentItemizationItemizationType::OAIV1PaymentItemizationItemizationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV1PaymentItemizationItemizationType::OAIV1PaymentItemizationItemizationType() {
    this->initializeModel();
}

OAIV1PaymentItemizationItemizationType::~OAIV1PaymentItemizationItemizationType() {}

void OAIV1PaymentItemizationItemizationType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIV1PaymentItemizationItemizationType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIV1PaymentItemizationItemizationType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ITEM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1PaymentItemizationItemizationType::ITEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOM_AMOUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1PaymentItemizationItemizationType::CUSTOM_AMOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GIFT_CARD_ACTIVATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1PaymentItemizationItemizationType::GIFT_CARD_ACTIVATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GIFT_CARD_RELOAD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1PaymentItemizationItemizationType::GIFT_CARD_RELOAD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GIFT_CARD_UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1PaymentItemizationItemizationType::GIFT_CARD_UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIV1PaymentItemizationItemizationType::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIV1PaymentItemizationItemizationType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIV1PaymentItemizationItemizationType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIV1PaymentItemizationItemizationType::ITEM:
            val = "ITEM";
            break;
        case eOAIV1PaymentItemizationItemizationType::CUSTOM_AMOUNT:
            val = "CUSTOM_AMOUNT";
            break;
        case eOAIV1PaymentItemizationItemizationType::GIFT_CARD_ACTIVATION:
            val = "GIFT_CARD_ACTIVATION";
            break;
        case eOAIV1PaymentItemizationItemizationType::GIFT_CARD_RELOAD:
            val = "GIFT_CARD_RELOAD";
            break;
        case eOAIV1PaymentItemizationItemizationType::GIFT_CARD_UNKNOWN:
            val = "GIFT_CARD_UNKNOWN";
            break;
        case eOAIV1PaymentItemizationItemizationType::OTHER:
            val = "OTHER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIV1PaymentItemizationItemizationType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIV1PaymentItemizationItemizationType::eOAIV1PaymentItemizationItemizationType OAIV1PaymentItemizationItemizationType::getValue() const {
    return m_value;
}

void OAIV1PaymentItemizationItemizationType::setValue(const OAIV1PaymentItemizationItemizationType::eOAIV1PaymentItemizationItemizationType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIV1PaymentItemizationItemizationType::isSet() const {
    
    return m_value_isSet;
}

bool OAIV1PaymentItemizationItemizationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
