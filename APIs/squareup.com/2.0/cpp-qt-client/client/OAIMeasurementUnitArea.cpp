/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeasurementUnitArea.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeasurementUnitArea::OAIMeasurementUnitArea(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeasurementUnitArea::OAIMeasurementUnitArea() {
    this->initializeModel();
}

OAIMeasurementUnitArea::~OAIMeasurementUnitArea() {}

void OAIMeasurementUnitArea::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMeasurementUnitArea::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMeasurementUnitArea::fromJson(QString jsonString) {
    
    if ( jsonString.compare("IMPERIAL_ACRE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitArea::IMPERIAL_ACRE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPERIAL_SQUARE_INCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitArea::IMPERIAL_SQUARE_INCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPERIAL_SQUARE_FOOT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitArea::IMPERIAL_SQUARE_FOOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPERIAL_SQUARE_YARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitArea::IMPERIAL_SQUARE_YARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPERIAL_SQUARE_MILE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitArea::IMPERIAL_SQUARE_MILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METRIC_SQUARE_CENTIMETER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitArea::METRIC_SQUARE_CENTIMETER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METRIC_SQUARE_METER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitArea::METRIC_SQUARE_METER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METRIC_SQUARE_KILOMETER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitArea::METRIC_SQUARE_KILOMETER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMeasurementUnitArea::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMeasurementUnitArea::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMeasurementUnitArea::IMPERIAL_ACRE:
            val = "IMPERIAL_ACRE";
            break;
        case eOAIMeasurementUnitArea::IMPERIAL_SQUARE_INCH:
            val = "IMPERIAL_SQUARE_INCH";
            break;
        case eOAIMeasurementUnitArea::IMPERIAL_SQUARE_FOOT:
            val = "IMPERIAL_SQUARE_FOOT";
            break;
        case eOAIMeasurementUnitArea::IMPERIAL_SQUARE_YARD:
            val = "IMPERIAL_SQUARE_YARD";
            break;
        case eOAIMeasurementUnitArea::IMPERIAL_SQUARE_MILE:
            val = "IMPERIAL_SQUARE_MILE";
            break;
        case eOAIMeasurementUnitArea::METRIC_SQUARE_CENTIMETER:
            val = "METRIC_SQUARE_CENTIMETER";
            break;
        case eOAIMeasurementUnitArea::METRIC_SQUARE_METER:
            val = "METRIC_SQUARE_METER";
            break;
        case eOAIMeasurementUnitArea::METRIC_SQUARE_KILOMETER:
            val = "METRIC_SQUARE_KILOMETER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMeasurementUnitArea::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMeasurementUnitArea::eOAIMeasurementUnitArea OAIMeasurementUnitArea::getValue() const {
    return m_value;
}

void OAIMeasurementUnitArea::setValue(const OAIMeasurementUnitArea::eOAIMeasurementUnitArea& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMeasurementUnitArea::isSet() const {
    
    return m_value_isSet;
}

bool OAIMeasurementUnitArea::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
