/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSubscriptionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSubscriptionRequest::OAICreateSubscriptionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSubscriptionRequest::OAICreateSubscriptionRequest() {
    this->initializeModel();
}

OAICreateSubscriptionRequest::~OAICreateSubscriptionRequest() {}

void OAICreateSubscriptionRequest::initializeModel() {

    m_canceled_date_isSet = false;
    m_canceled_date_isValid = false;

    m_card_id_isSet = false;
    m_card_id_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_idempotency_key_isSet = false;
    m_idempotency_key_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_price_override_money_isSet = false;
    m_price_override_money_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_tax_percentage_isSet = false;
    m_tax_percentage_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAICreateSubscriptionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSubscriptionRequest::fromJsonObject(QJsonObject json) {

    m_canceled_date_isValid = ::OpenAPI::fromJsonValue(m_canceled_date, json[QString("canceled_date")]);
    m_canceled_date_isSet = !json[QString("canceled_date")].isNull() && m_canceled_date_isValid;

    m_card_id_isValid = ::OpenAPI::fromJsonValue(m_card_id, json[QString("card_id")]);
    m_card_id_isSet = !json[QString("card_id")].isNull() && m_card_id_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_idempotency_key_isValid = ::OpenAPI::fromJsonValue(m_idempotency_key, json[QString("idempotency_key")]);
    m_idempotency_key_isSet = !json[QString("idempotency_key")].isNull() && m_idempotency_key_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("plan_id")]);
    m_plan_id_isSet = !json[QString("plan_id")].isNull() && m_plan_id_isValid;

    m_price_override_money_isValid = ::OpenAPI::fromJsonValue(m_price_override_money, json[QString("price_override_money")]);
    m_price_override_money_isSet = !json[QString("price_override_money")].isNull() && m_price_override_money_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_tax_percentage_isValid = ::OpenAPI::fromJsonValue(m_tax_percentage, json[QString("tax_percentage")]);
    m_tax_percentage_isSet = !json[QString("tax_percentage")].isNull() && m_tax_percentage_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;
}

QString OAICreateSubscriptionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSubscriptionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_canceled_date_isSet) {
        obj.insert(QString("canceled_date"), ::OpenAPI::toJsonValue(m_canceled_date));
    }
    if (m_card_id_isSet) {
        obj.insert(QString("card_id"), ::OpenAPI::toJsonValue(m_card_id));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_idempotency_key_isSet) {
        obj.insert(QString("idempotency_key"), ::OpenAPI::toJsonValue(m_idempotency_key));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("plan_id"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_price_override_money.isSet()) {
        obj.insert(QString("price_override_money"), ::OpenAPI::toJsonValue(m_price_override_money));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_tax_percentage_isSet) {
        obj.insert(QString("tax_percentage"), ::OpenAPI::toJsonValue(m_tax_percentage));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

QString OAICreateSubscriptionRequest::getCanceledDate() const {
    return m_canceled_date;
}
void OAICreateSubscriptionRequest::setCanceledDate(const QString &canceled_date) {
    m_canceled_date = canceled_date;
    m_canceled_date_isSet = true;
}

bool OAICreateSubscriptionRequest::is_canceled_date_Set() const{
    return m_canceled_date_isSet;
}

bool OAICreateSubscriptionRequest::is_canceled_date_Valid() const{
    return m_canceled_date_isValid;
}

QString OAICreateSubscriptionRequest::getCardId() const {
    return m_card_id;
}
void OAICreateSubscriptionRequest::setCardId(const QString &card_id) {
    m_card_id = card_id;
    m_card_id_isSet = true;
}

bool OAICreateSubscriptionRequest::is_card_id_Set() const{
    return m_card_id_isSet;
}

bool OAICreateSubscriptionRequest::is_card_id_Valid() const{
    return m_card_id_isValid;
}

QString OAICreateSubscriptionRequest::getCustomerId() const {
    return m_customer_id;
}
void OAICreateSubscriptionRequest::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAICreateSubscriptionRequest::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAICreateSubscriptionRequest::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAICreateSubscriptionRequest::getIdempotencyKey() const {
    return m_idempotency_key;
}
void OAICreateSubscriptionRequest::setIdempotencyKey(const QString &idempotency_key) {
    m_idempotency_key = idempotency_key;
    m_idempotency_key_isSet = true;
}

bool OAICreateSubscriptionRequest::is_idempotency_key_Set() const{
    return m_idempotency_key_isSet;
}

bool OAICreateSubscriptionRequest::is_idempotency_key_Valid() const{
    return m_idempotency_key_isValid;
}

QString OAICreateSubscriptionRequest::getLocationId() const {
    return m_location_id;
}
void OAICreateSubscriptionRequest::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAICreateSubscriptionRequest::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAICreateSubscriptionRequest::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAICreateSubscriptionRequest::getPlanId() const {
    return m_plan_id;
}
void OAICreateSubscriptionRequest::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAICreateSubscriptionRequest::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAICreateSubscriptionRequest::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

OAIMoney OAICreateSubscriptionRequest::getPriceOverrideMoney() const {
    return m_price_override_money;
}
void OAICreateSubscriptionRequest::setPriceOverrideMoney(const OAIMoney &price_override_money) {
    m_price_override_money = price_override_money;
    m_price_override_money_isSet = true;
}

bool OAICreateSubscriptionRequest::is_price_override_money_Set() const{
    return m_price_override_money_isSet;
}

bool OAICreateSubscriptionRequest::is_price_override_money_Valid() const{
    return m_price_override_money_isValid;
}

QString OAICreateSubscriptionRequest::getStartDate() const {
    return m_start_date;
}
void OAICreateSubscriptionRequest::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAICreateSubscriptionRequest::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAICreateSubscriptionRequest::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAICreateSubscriptionRequest::getTaxPercentage() const {
    return m_tax_percentage;
}
void OAICreateSubscriptionRequest::setTaxPercentage(const QString &tax_percentage) {
    m_tax_percentage = tax_percentage;
    m_tax_percentage_isSet = true;
}

bool OAICreateSubscriptionRequest::is_tax_percentage_Set() const{
    return m_tax_percentage_isSet;
}

bool OAICreateSubscriptionRequest::is_tax_percentage_Valid() const{
    return m_tax_percentage_isValid;
}

QString OAICreateSubscriptionRequest::getTimezone() const {
    return m_timezone;
}
void OAICreateSubscriptionRequest::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAICreateSubscriptionRequest::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAICreateSubscriptionRequest::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAICreateSubscriptionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canceled_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_override_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSubscriptionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_customer_id_isValid && m_location_id_isValid && m_plan_id_isValid && true;
}

} // namespace OpenAPI
