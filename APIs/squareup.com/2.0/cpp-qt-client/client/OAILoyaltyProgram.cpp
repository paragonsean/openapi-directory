/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyProgram.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyProgram::OAILoyaltyProgram(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyProgram::OAILoyaltyProgram() {
    this->initializeModel();
}

OAILoyaltyProgram::~OAILoyaltyProgram() {}

void OAILoyaltyProgram::initializeModel() {

    m_accrual_rules_isSet = false;
    m_accrual_rules_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_expiration_policy_isSet = false;
    m_expiration_policy_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_ids_isSet = false;
    m_location_ids_isValid = false;

    m_reward_tiers_isSet = false;
    m_reward_tiers_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_terminology_isSet = false;
    m_terminology_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAILoyaltyProgram::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyProgram::fromJsonObject(QJsonObject json) {

    m_accrual_rules_isValid = ::OpenAPI::fromJsonValue(m_accrual_rules, json[QString("accrual_rules")]);
    m_accrual_rules_isSet = !json[QString("accrual_rules")].isNull() && m_accrual_rules_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_expiration_policy_isValid = ::OpenAPI::fromJsonValue(m_expiration_policy, json[QString("expiration_policy")]);
    m_expiration_policy_isSet = !json[QString("expiration_policy")].isNull() && m_expiration_policy_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_ids_isValid = ::OpenAPI::fromJsonValue(m_location_ids, json[QString("location_ids")]);
    m_location_ids_isSet = !json[QString("location_ids")].isNull() && m_location_ids_isValid;

    m_reward_tiers_isValid = ::OpenAPI::fromJsonValue(m_reward_tiers, json[QString("reward_tiers")]);
    m_reward_tiers_isSet = !json[QString("reward_tiers")].isNull() && m_reward_tiers_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_terminology_isValid = ::OpenAPI::fromJsonValue(m_terminology, json[QString("terminology")]);
    m_terminology_isSet = !json[QString("terminology")].isNull() && m_terminology_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAILoyaltyProgram::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyProgram::asJsonObject() const {
    QJsonObject obj;
    if (m_accrual_rules.size() > 0) {
        obj.insert(QString("accrual_rules"), ::OpenAPI::toJsonValue(m_accrual_rules));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_expiration_policy.isSet()) {
        obj.insert(QString("expiration_policy"), ::OpenAPI::toJsonValue(m_expiration_policy));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_ids.size() > 0) {
        obj.insert(QString("location_ids"), ::OpenAPI::toJsonValue(m_location_ids));
    }
    if (m_reward_tiers.size() > 0) {
        obj.insert(QString("reward_tiers"), ::OpenAPI::toJsonValue(m_reward_tiers));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_terminology.isSet()) {
        obj.insert(QString("terminology"), ::OpenAPI::toJsonValue(m_terminology));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QList<OAILoyaltyProgramAccrualRule> OAILoyaltyProgram::getAccrualRules() const {
    return m_accrual_rules;
}
void OAILoyaltyProgram::setAccrualRules(const QList<OAILoyaltyProgramAccrualRule> &accrual_rules) {
    m_accrual_rules = accrual_rules;
    m_accrual_rules_isSet = true;
}

bool OAILoyaltyProgram::is_accrual_rules_Set() const{
    return m_accrual_rules_isSet;
}

bool OAILoyaltyProgram::is_accrual_rules_Valid() const{
    return m_accrual_rules_isValid;
}

QString OAILoyaltyProgram::getCreatedAt() const {
    return m_created_at;
}
void OAILoyaltyProgram::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAILoyaltyProgram::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAILoyaltyProgram::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAILoyaltyProgramExpirationPolicy OAILoyaltyProgram::getExpirationPolicy() const {
    return m_expiration_policy;
}
void OAILoyaltyProgram::setExpirationPolicy(const OAILoyaltyProgramExpirationPolicy &expiration_policy) {
    m_expiration_policy = expiration_policy;
    m_expiration_policy_isSet = true;
}

bool OAILoyaltyProgram::is_expiration_policy_Set() const{
    return m_expiration_policy_isSet;
}

bool OAILoyaltyProgram::is_expiration_policy_Valid() const{
    return m_expiration_policy_isValid;
}

QString OAILoyaltyProgram::getId() const {
    return m_id;
}
void OAILoyaltyProgram::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILoyaltyProgram::is_id_Set() const{
    return m_id_isSet;
}

bool OAILoyaltyProgram::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAILoyaltyProgram::getLocationIds() const {
    return m_location_ids;
}
void OAILoyaltyProgram::setLocationIds(const QList<QString> &location_ids) {
    m_location_ids = location_ids;
    m_location_ids_isSet = true;
}

bool OAILoyaltyProgram::is_location_ids_Set() const{
    return m_location_ids_isSet;
}

bool OAILoyaltyProgram::is_location_ids_Valid() const{
    return m_location_ids_isValid;
}

QList<OAILoyaltyProgramRewardTier> OAILoyaltyProgram::getRewardTiers() const {
    return m_reward_tiers;
}
void OAILoyaltyProgram::setRewardTiers(const QList<OAILoyaltyProgramRewardTier> &reward_tiers) {
    m_reward_tiers = reward_tiers;
    m_reward_tiers_isSet = true;
}

bool OAILoyaltyProgram::is_reward_tiers_Set() const{
    return m_reward_tiers_isSet;
}

bool OAILoyaltyProgram::is_reward_tiers_Valid() const{
    return m_reward_tiers_isValid;
}

QString OAILoyaltyProgram::getStatus() const {
    return m_status;
}
void OAILoyaltyProgram::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILoyaltyProgram::is_status_Set() const{
    return m_status_isSet;
}

bool OAILoyaltyProgram::is_status_Valid() const{
    return m_status_isValid;
}

OAILoyaltyProgramTerminology OAILoyaltyProgram::getTerminology() const {
    return m_terminology;
}
void OAILoyaltyProgram::setTerminology(const OAILoyaltyProgramTerminology &terminology) {
    m_terminology = terminology;
    m_terminology_isSet = true;
}

bool OAILoyaltyProgram::is_terminology_Set() const{
    return m_terminology_isSet;
}

bool OAILoyaltyProgram::is_terminology_Valid() const{
    return m_terminology_isValid;
}

QString OAILoyaltyProgram::getUpdatedAt() const {
    return m_updated_at;
}
void OAILoyaltyProgram::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAILoyaltyProgram::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAILoyaltyProgram::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAILoyaltyProgram::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accrual_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_tiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminology.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyProgram::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accrual_rules_isValid && m_created_at_isValid && m_id_isValid && m_location_ids_isValid && m_reward_tiers_isValid && m_status_isValid && m_terminology_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
