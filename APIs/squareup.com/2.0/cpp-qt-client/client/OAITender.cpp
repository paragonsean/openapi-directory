/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITender.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITender::OAITender(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITender::OAITender() {
    this->initializeModel();
}

OAITender::~OAITender() {}

void OAITender::initializeModel() {

    m_additional_recipients_isSet = false;
    m_additional_recipients_isValid = false;

    m_amount_money_isSet = false;
    m_amount_money_isValid = false;

    m_card_details_isSet = false;
    m_card_details_isValid = false;

    m_cash_details_isSet = false;
    m_cash_details_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_processing_fee_money_isSet = false;
    m_processing_fee_money_isValid = false;

    m_tip_money_isSet = false;
    m_tip_money_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITender::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITender::fromJsonObject(QJsonObject json) {

    m_additional_recipients_isValid = ::OpenAPI::fromJsonValue(m_additional_recipients, json[QString("additional_recipients")]);
    m_additional_recipients_isSet = !json[QString("additional_recipients")].isNull() && m_additional_recipients_isValid;

    m_amount_money_isValid = ::OpenAPI::fromJsonValue(m_amount_money, json[QString("amount_money")]);
    m_amount_money_isSet = !json[QString("amount_money")].isNull() && m_amount_money_isValid;

    m_card_details_isValid = ::OpenAPI::fromJsonValue(m_card_details, json[QString("card_details")]);
    m_card_details_isSet = !json[QString("card_details")].isNull() && m_card_details_isValid;

    m_cash_details_isValid = ::OpenAPI::fromJsonValue(m_cash_details, json[QString("cash_details")]);
    m_cash_details_isSet = !json[QString("cash_details")].isNull() && m_cash_details_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("payment_id")]);
    m_payment_id_isSet = !json[QString("payment_id")].isNull() && m_payment_id_isValid;

    m_processing_fee_money_isValid = ::OpenAPI::fromJsonValue(m_processing_fee_money, json[QString("processing_fee_money")]);
    m_processing_fee_money_isSet = !json[QString("processing_fee_money")].isNull() && m_processing_fee_money_isValid;

    m_tip_money_isValid = ::OpenAPI::fromJsonValue(m_tip_money, json[QString("tip_money")]);
    m_tip_money_isSet = !json[QString("tip_money")].isNull() && m_tip_money_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITender::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITender::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_recipients.size() > 0) {
        obj.insert(QString("additional_recipients"), ::OpenAPI::toJsonValue(m_additional_recipients));
    }
    if (m_amount_money.isSet()) {
        obj.insert(QString("amount_money"), ::OpenAPI::toJsonValue(m_amount_money));
    }
    if (m_card_details.isSet()) {
        obj.insert(QString("card_details"), ::OpenAPI::toJsonValue(m_card_details));
    }
    if (m_cash_details.isSet()) {
        obj.insert(QString("cash_details"), ::OpenAPI::toJsonValue(m_cash_details));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("payment_id"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_processing_fee_money.isSet()) {
        obj.insert(QString("processing_fee_money"), ::OpenAPI::toJsonValue(m_processing_fee_money));
    }
    if (m_tip_money.isSet()) {
        obj.insert(QString("tip_money"), ::OpenAPI::toJsonValue(m_tip_money));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIAdditionalRecipient> OAITender::getAdditionalRecipients() const {
    return m_additional_recipients;
}
void OAITender::setAdditionalRecipients(const QList<OAIAdditionalRecipient> &additional_recipients) {
    m_additional_recipients = additional_recipients;
    m_additional_recipients_isSet = true;
}

bool OAITender::is_additional_recipients_Set() const{
    return m_additional_recipients_isSet;
}

bool OAITender::is_additional_recipients_Valid() const{
    return m_additional_recipients_isValid;
}

OAIMoney OAITender::getAmountMoney() const {
    return m_amount_money;
}
void OAITender::setAmountMoney(const OAIMoney &amount_money) {
    m_amount_money = amount_money;
    m_amount_money_isSet = true;
}

bool OAITender::is_amount_money_Set() const{
    return m_amount_money_isSet;
}

bool OAITender::is_amount_money_Valid() const{
    return m_amount_money_isValid;
}

OAITenderCardDetails OAITender::getCardDetails() const {
    return m_card_details;
}
void OAITender::setCardDetails(const OAITenderCardDetails &card_details) {
    m_card_details = card_details;
    m_card_details_isSet = true;
}

bool OAITender::is_card_details_Set() const{
    return m_card_details_isSet;
}

bool OAITender::is_card_details_Valid() const{
    return m_card_details_isValid;
}

OAITenderCashDetails OAITender::getCashDetails() const {
    return m_cash_details;
}
void OAITender::setCashDetails(const OAITenderCashDetails &cash_details) {
    m_cash_details = cash_details;
    m_cash_details_isSet = true;
}

bool OAITender::is_cash_details_Set() const{
    return m_cash_details_isSet;
}

bool OAITender::is_cash_details_Valid() const{
    return m_cash_details_isValid;
}

QString OAITender::getCreatedAt() const {
    return m_created_at;
}
void OAITender::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITender::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITender::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITender::getCustomerId() const {
    return m_customer_id;
}
void OAITender::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAITender::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAITender::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAITender::getId() const {
    return m_id;
}
void OAITender::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITender::is_id_Set() const{
    return m_id_isSet;
}

bool OAITender::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITender::getLocationId() const {
    return m_location_id;
}
void OAITender::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAITender::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAITender::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAITender::getNote() const {
    return m_note;
}
void OAITender::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAITender::is_note_Set() const{
    return m_note_isSet;
}

bool OAITender::is_note_Valid() const{
    return m_note_isValid;
}

QString OAITender::getPaymentId() const {
    return m_payment_id;
}
void OAITender::setPaymentId(const QString &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAITender::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAITender::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

OAIMoney OAITender::getProcessingFeeMoney() const {
    return m_processing_fee_money;
}
void OAITender::setProcessingFeeMoney(const OAIMoney &processing_fee_money) {
    m_processing_fee_money = processing_fee_money;
    m_processing_fee_money_isSet = true;
}

bool OAITender::is_processing_fee_money_Set() const{
    return m_processing_fee_money_isSet;
}

bool OAITender::is_processing_fee_money_Valid() const{
    return m_processing_fee_money_isValid;
}

OAIMoney OAITender::getTipMoney() const {
    return m_tip_money;
}
void OAITender::setTipMoney(const OAIMoney &tip_money) {
    m_tip_money = tip_money;
    m_tip_money_isSet = true;
}

bool OAITender::is_tip_money_Set() const{
    return m_tip_money_isSet;
}

bool OAITender::is_tip_money_Valid() const{
    return m_tip_money_isValid;
}

QString OAITender::getTransactionId() const {
    return m_transaction_id;
}
void OAITender::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAITender::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAITender::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAITender::getType() const {
    return m_type;
}
void OAITender::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITender::is_type_Set() const{
    return m_type_isSet;
}

bool OAITender::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITender::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_fee_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tip_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITender::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
