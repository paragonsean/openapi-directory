/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchOrdersFulfillmentFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchOrdersFulfillmentFilter::OAISearchOrdersFulfillmentFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchOrdersFulfillmentFilter::OAISearchOrdersFulfillmentFilter() {
    this->initializeModel();
}

OAISearchOrdersFulfillmentFilter::~OAISearchOrdersFulfillmentFilter() {}

void OAISearchOrdersFulfillmentFilter::initializeModel() {

    m_fulfillment_states_isSet = false;
    m_fulfillment_states_isValid = false;

    m_fulfillment_types_isSet = false;
    m_fulfillment_types_isValid = false;
}

void OAISearchOrdersFulfillmentFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchOrdersFulfillmentFilter::fromJsonObject(QJsonObject json) {

    m_fulfillment_states_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_states, json[QString("fulfillment_states")]);
    m_fulfillment_states_isSet = !json[QString("fulfillment_states")].isNull() && m_fulfillment_states_isValid;

    m_fulfillment_types_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_types, json[QString("fulfillment_types")]);
    m_fulfillment_types_isSet = !json[QString("fulfillment_types")].isNull() && m_fulfillment_types_isValid;
}

QString OAISearchOrdersFulfillmentFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchOrdersFulfillmentFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_fulfillment_states.size() > 0) {
        obj.insert(QString("fulfillment_states"), ::OpenAPI::toJsonValue(m_fulfillment_states));
    }
    if (m_fulfillment_types.size() > 0) {
        obj.insert(QString("fulfillment_types"), ::OpenAPI::toJsonValue(m_fulfillment_types));
    }
    return obj;
}

QList<QString> OAISearchOrdersFulfillmentFilter::getFulfillmentStates() const {
    return m_fulfillment_states;
}
void OAISearchOrdersFulfillmentFilter::setFulfillmentStates(const QList<QString> &fulfillment_states) {
    m_fulfillment_states = fulfillment_states;
    m_fulfillment_states_isSet = true;
}

bool OAISearchOrdersFulfillmentFilter::is_fulfillment_states_Set() const{
    return m_fulfillment_states_isSet;
}

bool OAISearchOrdersFulfillmentFilter::is_fulfillment_states_Valid() const{
    return m_fulfillment_states_isValid;
}

QList<QString> OAISearchOrdersFulfillmentFilter::getFulfillmentTypes() const {
    return m_fulfillment_types;
}
void OAISearchOrdersFulfillmentFilter::setFulfillmentTypes(const QList<QString> &fulfillment_types) {
    m_fulfillment_types = fulfillment_types;
    m_fulfillment_types_isSet = true;
}

bool OAISearchOrdersFulfillmentFilter::is_fulfillment_types_Set() const{
    return m_fulfillment_types_isSet;
}

bool OAISearchOrdersFulfillmentFilter::is_fulfillment_types_Valid() const{
    return m_fulfillment_types_isValid;
}

bool OAISearchOrdersFulfillmentFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fulfillment_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchOrdersFulfillmentFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
