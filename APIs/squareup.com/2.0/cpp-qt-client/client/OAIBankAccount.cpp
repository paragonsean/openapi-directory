/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBankAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBankAccount::OAIBankAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBankAccount::OAIBankAccount() {
    this->initializeModel();
}

OAIBankAccount::~OAIBankAccount() {}

void OAIBankAccount::initializeModel() {

    m_account_number_suffix_isSet = false;
    m_account_number_suffix_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_bank_name_isSet = false;
    m_bank_name_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_creditable_isSet = false;
    m_creditable_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_debit_mandate_reference_id_isSet = false;
    m_debit_mandate_reference_id_isValid = false;

    m_debitable_isSet = false;
    m_debitable_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_holder_name_isSet = false;
    m_holder_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_primary_bank_identification_number_isSet = false;
    m_primary_bank_identification_number_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_secondary_bank_identification_number_isSet = false;
    m_secondary_bank_identification_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIBankAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBankAccount::fromJsonObject(QJsonObject json) {

    m_account_number_suffix_isValid = ::OpenAPI::fromJsonValue(m_account_number_suffix, json[QString("account_number_suffix")]);
    m_account_number_suffix_isSet = !json[QString("account_number_suffix")].isNull() && m_account_number_suffix_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("account_type")]);
    m_account_type_isSet = !json[QString("account_type")].isNull() && m_account_type_isValid;

    m_bank_name_isValid = ::OpenAPI::fromJsonValue(m_bank_name, json[QString("bank_name")]);
    m_bank_name_isSet = !json[QString("bank_name")].isNull() && m_bank_name_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_creditable_isValid = ::OpenAPI::fromJsonValue(m_creditable, json[QString("creditable")]);
    m_creditable_isSet = !json[QString("creditable")].isNull() && m_creditable_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_debit_mandate_reference_id_isValid = ::OpenAPI::fromJsonValue(m_debit_mandate_reference_id, json[QString("debit_mandate_reference_id")]);
    m_debit_mandate_reference_id_isSet = !json[QString("debit_mandate_reference_id")].isNull() && m_debit_mandate_reference_id_isValid;

    m_debitable_isValid = ::OpenAPI::fromJsonValue(m_debitable, json[QString("debitable")]);
    m_debitable_isSet = !json[QString("debitable")].isNull() && m_debitable_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_holder_name_isValid = ::OpenAPI::fromJsonValue(m_holder_name, json[QString("holder_name")]);
    m_holder_name_isSet = !json[QString("holder_name")].isNull() && m_holder_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_primary_bank_identification_number_isValid = ::OpenAPI::fromJsonValue(m_primary_bank_identification_number, json[QString("primary_bank_identification_number")]);
    m_primary_bank_identification_number_isSet = !json[QString("primary_bank_identification_number")].isNull() && m_primary_bank_identification_number_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("reference_id")]);
    m_reference_id_isSet = !json[QString("reference_id")].isNull() && m_reference_id_isValid;

    m_secondary_bank_identification_number_isValid = ::OpenAPI::fromJsonValue(m_secondary_bank_identification_number, json[QString("secondary_bank_identification_number")]);
    m_secondary_bank_identification_number_isSet = !json[QString("secondary_bank_identification_number")].isNull() && m_secondary_bank_identification_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIBankAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBankAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_number_suffix_isSet) {
        obj.insert(QString("account_number_suffix"), ::OpenAPI::toJsonValue(m_account_number_suffix));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("account_type"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_bank_name_isSet) {
        obj.insert(QString("bank_name"), ::OpenAPI::toJsonValue(m_bank_name));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_creditable_isSet) {
        obj.insert(QString("creditable"), ::OpenAPI::toJsonValue(m_creditable));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_debit_mandate_reference_id_isSet) {
        obj.insert(QString("debit_mandate_reference_id"), ::OpenAPI::toJsonValue(m_debit_mandate_reference_id));
    }
    if (m_debitable_isSet) {
        obj.insert(QString("debitable"), ::OpenAPI::toJsonValue(m_debitable));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_holder_name_isSet) {
        obj.insert(QString("holder_name"), ::OpenAPI::toJsonValue(m_holder_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_primary_bank_identification_number_isSet) {
        obj.insert(QString("primary_bank_identification_number"), ::OpenAPI::toJsonValue(m_primary_bank_identification_number));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("reference_id"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_secondary_bank_identification_number_isSet) {
        obj.insert(QString("secondary_bank_identification_number"), ::OpenAPI::toJsonValue(m_secondary_bank_identification_number));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIBankAccount::getAccountNumberSuffix() const {
    return m_account_number_suffix;
}
void OAIBankAccount::setAccountNumberSuffix(const QString &account_number_suffix) {
    m_account_number_suffix = account_number_suffix;
    m_account_number_suffix_isSet = true;
}

bool OAIBankAccount::is_account_number_suffix_Set() const{
    return m_account_number_suffix_isSet;
}

bool OAIBankAccount::is_account_number_suffix_Valid() const{
    return m_account_number_suffix_isValid;
}

QString OAIBankAccount::getAccountType() const {
    return m_account_type;
}
void OAIBankAccount::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIBankAccount::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIBankAccount::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QString OAIBankAccount::getBankName() const {
    return m_bank_name;
}
void OAIBankAccount::setBankName(const QString &bank_name) {
    m_bank_name = bank_name;
    m_bank_name_isSet = true;
}

bool OAIBankAccount::is_bank_name_Set() const{
    return m_bank_name_isSet;
}

bool OAIBankAccount::is_bank_name_Valid() const{
    return m_bank_name_isValid;
}

QString OAIBankAccount::getCountry() const {
    return m_country;
}
void OAIBankAccount::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIBankAccount::is_country_Set() const{
    return m_country_isSet;
}

bool OAIBankAccount::is_country_Valid() const{
    return m_country_isValid;
}

bool OAIBankAccount::isCreditable() const {
    return m_creditable;
}
void OAIBankAccount::setCreditable(const bool &creditable) {
    m_creditable = creditable;
    m_creditable_isSet = true;
}

bool OAIBankAccount::is_creditable_Set() const{
    return m_creditable_isSet;
}

bool OAIBankAccount::is_creditable_Valid() const{
    return m_creditable_isValid;
}

QString OAIBankAccount::getCurrency() const {
    return m_currency;
}
void OAIBankAccount::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIBankAccount::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIBankAccount::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIBankAccount::getDebitMandateReferenceId() const {
    return m_debit_mandate_reference_id;
}
void OAIBankAccount::setDebitMandateReferenceId(const QString &debit_mandate_reference_id) {
    m_debit_mandate_reference_id = debit_mandate_reference_id;
    m_debit_mandate_reference_id_isSet = true;
}

bool OAIBankAccount::is_debit_mandate_reference_id_Set() const{
    return m_debit_mandate_reference_id_isSet;
}

bool OAIBankAccount::is_debit_mandate_reference_id_Valid() const{
    return m_debit_mandate_reference_id_isValid;
}

bool OAIBankAccount::isDebitable() const {
    return m_debitable;
}
void OAIBankAccount::setDebitable(const bool &debitable) {
    m_debitable = debitable;
    m_debitable_isSet = true;
}

bool OAIBankAccount::is_debitable_Set() const{
    return m_debitable_isSet;
}

bool OAIBankAccount::is_debitable_Valid() const{
    return m_debitable_isValid;
}

QString OAIBankAccount::getFingerprint() const {
    return m_fingerprint;
}
void OAIBankAccount::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIBankAccount::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIBankAccount::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QString OAIBankAccount::getHolderName() const {
    return m_holder_name;
}
void OAIBankAccount::setHolderName(const QString &holder_name) {
    m_holder_name = holder_name;
    m_holder_name_isSet = true;
}

bool OAIBankAccount::is_holder_name_Set() const{
    return m_holder_name_isSet;
}

bool OAIBankAccount::is_holder_name_Valid() const{
    return m_holder_name_isValid;
}

QString OAIBankAccount::getId() const {
    return m_id;
}
void OAIBankAccount::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBankAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBankAccount::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBankAccount::getLocationId() const {
    return m_location_id;
}
void OAIBankAccount::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIBankAccount::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIBankAccount::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIBankAccount::getPrimaryBankIdentificationNumber() const {
    return m_primary_bank_identification_number;
}
void OAIBankAccount::setPrimaryBankIdentificationNumber(const QString &primary_bank_identification_number) {
    m_primary_bank_identification_number = primary_bank_identification_number;
    m_primary_bank_identification_number_isSet = true;
}

bool OAIBankAccount::is_primary_bank_identification_number_Set() const{
    return m_primary_bank_identification_number_isSet;
}

bool OAIBankAccount::is_primary_bank_identification_number_Valid() const{
    return m_primary_bank_identification_number_isValid;
}

QString OAIBankAccount::getReferenceId() const {
    return m_reference_id;
}
void OAIBankAccount::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIBankAccount::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIBankAccount::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QString OAIBankAccount::getSecondaryBankIdentificationNumber() const {
    return m_secondary_bank_identification_number;
}
void OAIBankAccount::setSecondaryBankIdentificationNumber(const QString &secondary_bank_identification_number) {
    m_secondary_bank_identification_number = secondary_bank_identification_number;
    m_secondary_bank_identification_number_isSet = true;
}

bool OAIBankAccount::is_secondary_bank_identification_number_Set() const{
    return m_secondary_bank_identification_number_isSet;
}

bool OAIBankAccount::is_secondary_bank_identification_number_Valid() const{
    return m_secondary_bank_identification_number_isValid;
}

QString OAIBankAccount::getStatus() const {
    return m_status;
}
void OAIBankAccount::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBankAccount::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBankAccount::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIBankAccount::getVersion() const {
    return m_version;
}
void OAIBankAccount::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIBankAccount::is_version_Set() const{
    return m_version_isSet;
}

bool OAIBankAccount::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIBankAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_number_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creditable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_mandate_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debitable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_bank_identification_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_bank_identification_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBankAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_number_suffix_isValid && m_account_type_isValid && m_country_isValid && m_creditable_isValid && m_currency_isValid && m_debitable_isValid && m_holder_name_isValid && m_id_isValid && m_primary_bank_identification_number_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
