/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeasurementUnit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeasurementUnit::OAIMeasurementUnit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeasurementUnit::OAIMeasurementUnit() {
    this->initializeModel();
}

OAIMeasurementUnit::~OAIMeasurementUnit() {}

void OAIMeasurementUnit::initializeModel() {

    m_area_unit_isSet = false;
    m_area_unit_isValid = false;

    m_custom_unit_isSet = false;
    m_custom_unit_isValid = false;

    m_generic_unit_isSet = false;
    m_generic_unit_isValid = false;

    m_length_unit_isSet = false;
    m_length_unit_isValid = false;

    m_time_unit_isSet = false;
    m_time_unit_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_volume_unit_isSet = false;
    m_volume_unit_isValid = false;

    m_weight_unit_isSet = false;
    m_weight_unit_isValid = false;
}

void OAIMeasurementUnit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeasurementUnit::fromJsonObject(QJsonObject json) {

    m_area_unit_isValid = ::OpenAPI::fromJsonValue(m_area_unit, json[QString("area_unit")]);
    m_area_unit_isSet = !json[QString("area_unit")].isNull() && m_area_unit_isValid;

    m_custom_unit_isValid = ::OpenAPI::fromJsonValue(m_custom_unit, json[QString("custom_unit")]);
    m_custom_unit_isSet = !json[QString("custom_unit")].isNull() && m_custom_unit_isValid;

    m_generic_unit_isValid = ::OpenAPI::fromJsonValue(m_generic_unit, json[QString("generic_unit")]);
    m_generic_unit_isSet = !json[QString("generic_unit")].isNull() && m_generic_unit_isValid;

    m_length_unit_isValid = ::OpenAPI::fromJsonValue(m_length_unit, json[QString("length_unit")]);
    m_length_unit_isSet = !json[QString("length_unit")].isNull() && m_length_unit_isValid;

    m_time_unit_isValid = ::OpenAPI::fromJsonValue(m_time_unit, json[QString("time_unit")]);
    m_time_unit_isSet = !json[QString("time_unit")].isNull() && m_time_unit_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_volume_unit_isValid = ::OpenAPI::fromJsonValue(m_volume_unit, json[QString("volume_unit")]);
    m_volume_unit_isSet = !json[QString("volume_unit")].isNull() && m_volume_unit_isValid;

    m_weight_unit_isValid = ::OpenAPI::fromJsonValue(m_weight_unit, json[QString("weight_unit")]);
    m_weight_unit_isSet = !json[QString("weight_unit")].isNull() && m_weight_unit_isValid;
}

QString OAIMeasurementUnit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeasurementUnit::asJsonObject() const {
    QJsonObject obj;
    if (m_area_unit_isSet) {
        obj.insert(QString("area_unit"), ::OpenAPI::toJsonValue(m_area_unit));
    }
    if (m_custom_unit.isSet()) {
        obj.insert(QString("custom_unit"), ::OpenAPI::toJsonValue(m_custom_unit));
    }
    if (m_generic_unit_isSet) {
        obj.insert(QString("generic_unit"), ::OpenAPI::toJsonValue(m_generic_unit));
    }
    if (m_length_unit_isSet) {
        obj.insert(QString("length_unit"), ::OpenAPI::toJsonValue(m_length_unit));
    }
    if (m_time_unit_isSet) {
        obj.insert(QString("time_unit"), ::OpenAPI::toJsonValue(m_time_unit));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_volume_unit_isSet) {
        obj.insert(QString("volume_unit"), ::OpenAPI::toJsonValue(m_volume_unit));
    }
    if (m_weight_unit_isSet) {
        obj.insert(QString("weight_unit"), ::OpenAPI::toJsonValue(m_weight_unit));
    }
    return obj;
}

QString OAIMeasurementUnit::getAreaUnit() const {
    return m_area_unit;
}
void OAIMeasurementUnit::setAreaUnit(const QString &area_unit) {
    m_area_unit = area_unit;
    m_area_unit_isSet = true;
}

bool OAIMeasurementUnit::is_area_unit_Set() const{
    return m_area_unit_isSet;
}

bool OAIMeasurementUnit::is_area_unit_Valid() const{
    return m_area_unit_isValid;
}

OAIMeasurementUnitCustom OAIMeasurementUnit::getCustomUnit() const {
    return m_custom_unit;
}
void OAIMeasurementUnit::setCustomUnit(const OAIMeasurementUnitCustom &custom_unit) {
    m_custom_unit = custom_unit;
    m_custom_unit_isSet = true;
}

bool OAIMeasurementUnit::is_custom_unit_Set() const{
    return m_custom_unit_isSet;
}

bool OAIMeasurementUnit::is_custom_unit_Valid() const{
    return m_custom_unit_isValid;
}

QString OAIMeasurementUnit::getGenericUnit() const {
    return m_generic_unit;
}
void OAIMeasurementUnit::setGenericUnit(const QString &generic_unit) {
    m_generic_unit = generic_unit;
    m_generic_unit_isSet = true;
}

bool OAIMeasurementUnit::is_generic_unit_Set() const{
    return m_generic_unit_isSet;
}

bool OAIMeasurementUnit::is_generic_unit_Valid() const{
    return m_generic_unit_isValid;
}

QString OAIMeasurementUnit::getLengthUnit() const {
    return m_length_unit;
}
void OAIMeasurementUnit::setLengthUnit(const QString &length_unit) {
    m_length_unit = length_unit;
    m_length_unit_isSet = true;
}

bool OAIMeasurementUnit::is_length_unit_Set() const{
    return m_length_unit_isSet;
}

bool OAIMeasurementUnit::is_length_unit_Valid() const{
    return m_length_unit_isValid;
}

QString OAIMeasurementUnit::getTimeUnit() const {
    return m_time_unit;
}
void OAIMeasurementUnit::setTimeUnit(const QString &time_unit) {
    m_time_unit = time_unit;
    m_time_unit_isSet = true;
}

bool OAIMeasurementUnit::is_time_unit_Set() const{
    return m_time_unit_isSet;
}

bool OAIMeasurementUnit::is_time_unit_Valid() const{
    return m_time_unit_isValid;
}

QString OAIMeasurementUnit::getType() const {
    return m_type;
}
void OAIMeasurementUnit::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMeasurementUnit::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMeasurementUnit::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMeasurementUnit::getVolumeUnit() const {
    return m_volume_unit;
}
void OAIMeasurementUnit::setVolumeUnit(const QString &volume_unit) {
    m_volume_unit = volume_unit;
    m_volume_unit_isSet = true;
}

bool OAIMeasurementUnit::is_volume_unit_Set() const{
    return m_volume_unit_isSet;
}

bool OAIMeasurementUnit::is_volume_unit_Valid() const{
    return m_volume_unit_isValid;
}

QString OAIMeasurementUnit::getWeightUnit() const {
    return m_weight_unit;
}
void OAIMeasurementUnit::setWeightUnit(const QString &weight_unit) {
    m_weight_unit = weight_unit;
    m_weight_unit_isSet = true;
}

bool OAIMeasurementUnit::is_weight_unit_Set() const{
    return m_weight_unit_isSet;
}

bool OAIMeasurementUnit::is_weight_unit_Valid() const{
    return m_weight_unit_isValid;
}

bool OAIMeasurementUnit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generic_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeasurementUnit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
