/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisputeEvidenceCreatedWebhook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisputeEvidenceCreatedWebhook::OAIDisputeEvidenceCreatedWebhook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisputeEvidenceCreatedWebhook::OAIDisputeEvidenceCreatedWebhook() {
    this->initializeModel();
}

OAIDisputeEvidenceCreatedWebhook::~OAIDisputeEvidenceCreatedWebhook() {}

void OAIDisputeEvidenceCreatedWebhook::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDisputeEvidenceCreatedWebhook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisputeEvidenceCreatedWebhook::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("event_id")]);
    m_event_id_isSet = !json[QString("event_id")].isNull() && m_event_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("merchant_id")]);
    m_merchant_id_isSet = !json[QString("merchant_id")].isNull() && m_merchant_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDisputeEvidenceCreatedWebhook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisputeEvidenceCreatedWebhook::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("event_id"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("merchant_id"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDisputeEvidenceCreatedWebhook::getCreatedAt() const {
    return m_created_at;
}
void OAIDisputeEvidenceCreatedWebhook::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDisputeEvidenceCreatedWebhook::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDisputeEvidenceCreatedWebhook::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIDisputeEvidenceCreatedWebhookData OAIDisputeEvidenceCreatedWebhook::getData() const {
    return m_data;
}
void OAIDisputeEvidenceCreatedWebhook::setData(const OAIDisputeEvidenceCreatedWebhookData &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIDisputeEvidenceCreatedWebhook::is_data_Set() const{
    return m_data_isSet;
}

bool OAIDisputeEvidenceCreatedWebhook::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIDisputeEvidenceCreatedWebhook::getEventId() const {
    return m_event_id;
}
void OAIDisputeEvidenceCreatedWebhook::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIDisputeEvidenceCreatedWebhook::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIDisputeEvidenceCreatedWebhook::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAIDisputeEvidenceCreatedWebhook::getLocationId() const {
    return m_location_id;
}
void OAIDisputeEvidenceCreatedWebhook::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIDisputeEvidenceCreatedWebhook::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIDisputeEvidenceCreatedWebhook::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIDisputeEvidenceCreatedWebhook::getMerchantId() const {
    return m_merchant_id;
}
void OAIDisputeEvidenceCreatedWebhook::setMerchantId(const QString &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAIDisputeEvidenceCreatedWebhook::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAIDisputeEvidenceCreatedWebhook::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

QString OAIDisputeEvidenceCreatedWebhook::getType() const {
    return m_type;
}
void OAIDisputeEvidenceCreatedWebhook::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDisputeEvidenceCreatedWebhook::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDisputeEvidenceCreatedWebhook::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDisputeEvidenceCreatedWebhook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisputeEvidenceCreatedWebhook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
