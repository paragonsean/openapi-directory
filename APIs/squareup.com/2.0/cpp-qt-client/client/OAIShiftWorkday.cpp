/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShiftWorkday.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShiftWorkday::OAIShiftWorkday(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShiftWorkday::OAIShiftWorkday() {
    this->initializeModel();
}

OAIShiftWorkday::~OAIShiftWorkday() {}

void OAIShiftWorkday::initializeModel() {

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_default_timezone_isSet = false;
    m_default_timezone_isValid = false;

    m_match_shifts_by_isSet = false;
    m_match_shifts_by_isValid = false;
}

void OAIShiftWorkday::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShiftWorkday::fromJsonObject(QJsonObject json) {

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("date_range")]);
    m_date_range_isSet = !json[QString("date_range")].isNull() && m_date_range_isValid;

    m_default_timezone_isValid = ::OpenAPI::fromJsonValue(m_default_timezone, json[QString("default_timezone")]);
    m_default_timezone_isSet = !json[QString("default_timezone")].isNull() && m_default_timezone_isValid;

    m_match_shifts_by_isValid = ::OpenAPI::fromJsonValue(m_match_shifts_by, json[QString("match_shifts_by")]);
    m_match_shifts_by_isSet = !json[QString("match_shifts_by")].isNull() && m_match_shifts_by_isValid;
}

QString OAIShiftWorkday::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShiftWorkday::asJsonObject() const {
    QJsonObject obj;
    if (m_date_range.isSet()) {
        obj.insert(QString("date_range"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_default_timezone_isSet) {
        obj.insert(QString("default_timezone"), ::OpenAPI::toJsonValue(m_default_timezone));
    }
    if (m_match_shifts_by_isSet) {
        obj.insert(QString("match_shifts_by"), ::OpenAPI::toJsonValue(m_match_shifts_by));
    }
    return obj;
}

OAIDateRange OAIShiftWorkday::getDateRange() const {
    return m_date_range;
}
void OAIShiftWorkday::setDateRange(const OAIDateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAIShiftWorkday::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAIShiftWorkday::is_date_range_Valid() const{
    return m_date_range_isValid;
}

QString OAIShiftWorkday::getDefaultTimezone() const {
    return m_default_timezone;
}
void OAIShiftWorkday::setDefaultTimezone(const QString &default_timezone) {
    m_default_timezone = default_timezone;
    m_default_timezone_isSet = true;
}

bool OAIShiftWorkday::is_default_timezone_Set() const{
    return m_default_timezone_isSet;
}

bool OAIShiftWorkday::is_default_timezone_Valid() const{
    return m_default_timezone_isValid;
}

QString OAIShiftWorkday::getMatchShiftsBy() const {
    return m_match_shifts_by;
}
void OAIShiftWorkday::setMatchShiftsBy(const QString &match_shifts_by) {
    m_match_shifts_by = match_shifts_by;
    m_match_shifts_by_isSet = true;
}

bool OAIShiftWorkday::is_match_shifts_by_Set() const{
    return m_match_shifts_by_isSet;
}

bool OAIShiftWorkday::is_match_shifts_by_Valid() const{
    return m_match_shifts_by_isValid;
}

bool OAIShiftWorkday::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_shifts_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShiftWorkday::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
