/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIProduct::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIProduct::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SQUARE_POS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::SQUARE_POS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXTERNAL_API", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::EXTERNAL_API;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BILLING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::BILLING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPOINTMENTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::APPOINTMENTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVOICES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::INVOICES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ONLINE_STORE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::ONLINE_STORE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAYROLL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::PAYROLL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DASHBOARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::DASHBOARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_LIBRARY_IMPORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::ITEM_LIBRARY_IMPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIProduct::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIProduct::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIProduct::SQUARE_POS:
            val = "SQUARE_POS";
            break;
        case eOAIProduct::EXTERNAL_API:
            val = "EXTERNAL_API";
            break;
        case eOAIProduct::BILLING:
            val = "BILLING";
            break;
        case eOAIProduct::APPOINTMENTS:
            val = "APPOINTMENTS";
            break;
        case eOAIProduct::INVOICES:
            val = "INVOICES";
            break;
        case eOAIProduct::ONLINE_STORE:
            val = "ONLINE_STORE";
            break;
        case eOAIProduct::PAYROLL:
            val = "PAYROLL";
            break;
        case eOAIProduct::DASHBOARD:
            val = "DASHBOARD";
            break;
        case eOAIProduct::ITEM_LIBRARY_IMPORT:
            val = "ITEM_LIBRARY_IMPORT";
            break;
        case eOAIProduct::OTHER:
            val = "OTHER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIProduct::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIProduct::eOAIProduct OAIProduct::getValue() const {
    return m_value;
}

void OAIProduct::setValue(const OAIProduct::eOAIProduct& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIProduct::isSet() const {
    
    return m_value_isSet;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
