/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICatalogQuery.h
 *
 * A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the &#x60;SearchCatalogObjects&#x60; endpoint.  Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects). Any combination of the following types may be used together: - [exact_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryExact) - [prefix_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryPrefix) - [range_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryRange) - [sorted_attribute_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQuerySortedAttribute) - [text_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryText) All other query types cannot be combined with any others.  When a query filter is based on an attribute, the attribute must be searchable. Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.  * Searchable attribute and objects queryable by searchable attributes ** - &#x60;name&#x60;:  &#x60;CatalogItem&#x60;, &#x60;CatalogItemVariation&#x60;, &#x60;CatalogCategory&#x60;, &#x60;CatalogTax&#x60;, &#x60;CatalogDiscount&#x60;, &#x60;CatalogModifier&#x60;, &#39;CatalogModifierList&#x60;, &#x60;CatalogItemOption&#x60;, &#x60;CatalogItemOptionValue&#x60; - &#x60;description&#x60;: &#x60;CatalogItem&#x60;, &#x60;CatalogItemOptionValue&#x60; - &#x60;abbreviation&#x60;: &#x60;CatalogItem&#x60; - &#x60;upc&#x60;: &#x60;CatalogItemVariation&#x60; - &#x60;sku&#x60;: &#x60;CatalogItemVariation&#x60; - &#x60;caption&#x60;: &#x60;CatalogImage&#x60; - &#x60;display_name&#x60;: &#x60;CatalogItemOption&#x60;  For example, to search for [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) objects by searchable attributes, you can use the &#x60;\&quot;name\&quot;&#x60;, &#x60;\&quot;description\&quot;&#x60;, or &#x60;\&quot;abbreviation\&quot;&#x60; attribute in an applicable query filter.
 */

#ifndef OAICatalogQuery_H
#define OAICatalogQuery_H

#include <QJsonObject>

#include "OAICatalogQueryExact.h"
#include "OAICatalogQueryItemVariationsForItemOptionValues.h"
#include "OAICatalogQueryItemsForItemOptions.h"
#include "OAICatalogQueryItemsForModifierList.h"
#include "OAICatalogQueryItemsForTax.h"
#include "OAICatalogQueryPrefix.h"
#include "OAICatalogQueryRange.h"
#include "OAICatalogQuerySet.h"
#include "OAICatalogQuerySortedAttribute.h"
#include "OAICatalogQueryText.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICatalogQueryExact;
class OAICatalogQueryItemVariationsForItemOptionValues;
class OAICatalogQueryItemsForItemOptions;
class OAICatalogQueryItemsForModifierList;
class OAICatalogQueryItemsForTax;
class OAICatalogQueryPrefix;
class OAICatalogQueryRange;
class OAICatalogQuerySet;
class OAICatalogQuerySortedAttribute;
class OAICatalogQueryText;

class OAICatalogQuery : public OAIObject {
public:
    OAICatalogQuery();
    OAICatalogQuery(QString json);
    ~OAICatalogQuery() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICatalogQueryExact getExactQuery() const;
    void setExactQuery(const OAICatalogQueryExact &exact_query);
    bool is_exact_query_Set() const;
    bool is_exact_query_Valid() const;

    OAICatalogQueryItemVariationsForItemOptionValues getItemVariationsForItemOptionValuesQuery() const;
    void setItemVariationsForItemOptionValuesQuery(const OAICatalogQueryItemVariationsForItemOptionValues &item_variations_for_item_option_values_query);
    bool is_item_variations_for_item_option_values_query_Set() const;
    bool is_item_variations_for_item_option_values_query_Valid() const;

    OAICatalogQueryItemsForItemOptions getItemsForItemOptionsQuery() const;
    void setItemsForItemOptionsQuery(const OAICatalogQueryItemsForItemOptions &items_for_item_options_query);
    bool is_items_for_item_options_query_Set() const;
    bool is_items_for_item_options_query_Valid() const;

    OAICatalogQueryItemsForModifierList getItemsForModifierListQuery() const;
    void setItemsForModifierListQuery(const OAICatalogQueryItemsForModifierList &items_for_modifier_list_query);
    bool is_items_for_modifier_list_query_Set() const;
    bool is_items_for_modifier_list_query_Valid() const;

    OAICatalogQueryItemsForTax getItemsForTaxQuery() const;
    void setItemsForTaxQuery(const OAICatalogQueryItemsForTax &items_for_tax_query);
    bool is_items_for_tax_query_Set() const;
    bool is_items_for_tax_query_Valid() const;

    OAICatalogQueryPrefix getPrefixQuery() const;
    void setPrefixQuery(const OAICatalogQueryPrefix &prefix_query);
    bool is_prefix_query_Set() const;
    bool is_prefix_query_Valid() const;

    OAICatalogQueryRange getRangeQuery() const;
    void setRangeQuery(const OAICatalogQueryRange &range_query);
    bool is_range_query_Set() const;
    bool is_range_query_Valid() const;

    OAICatalogQuerySet getSetQuery() const;
    void setSetQuery(const OAICatalogQuerySet &set_query);
    bool is_set_query_Set() const;
    bool is_set_query_Valid() const;

    OAICatalogQuerySortedAttribute getSortedAttributeQuery() const;
    void setSortedAttributeQuery(const OAICatalogQuerySortedAttribute &sorted_attribute_query);
    bool is_sorted_attribute_query_Set() const;
    bool is_sorted_attribute_query_Valid() const;

    OAICatalogQueryText getTextQuery() const;
    void setTextQuery(const OAICatalogQueryText &text_query);
    bool is_text_query_Set() const;
    bool is_text_query_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICatalogQueryExact m_exact_query;
    bool m_exact_query_isSet;
    bool m_exact_query_isValid;

    OAICatalogQueryItemVariationsForItemOptionValues m_item_variations_for_item_option_values_query;
    bool m_item_variations_for_item_option_values_query_isSet;
    bool m_item_variations_for_item_option_values_query_isValid;

    OAICatalogQueryItemsForItemOptions m_items_for_item_options_query;
    bool m_items_for_item_options_query_isSet;
    bool m_items_for_item_options_query_isValid;

    OAICatalogQueryItemsForModifierList m_items_for_modifier_list_query;
    bool m_items_for_modifier_list_query_isSet;
    bool m_items_for_modifier_list_query_isValid;

    OAICatalogQueryItemsForTax m_items_for_tax_query;
    bool m_items_for_tax_query_isSet;
    bool m_items_for_tax_query_isValid;

    OAICatalogQueryPrefix m_prefix_query;
    bool m_prefix_query_isSet;
    bool m_prefix_query_isValid;

    OAICatalogQueryRange m_range_query;
    bool m_range_query_isSet;
    bool m_range_query_isValid;

    OAICatalogQuerySet m_set_query;
    bool m_set_query_isSet;
    bool m_set_query_isValid;

    OAICatalogQuerySortedAttribute m_sorted_attribute_query;
    bool m_sorted_attribute_query_isSet;
    bool m_sorted_attribute_query_isValid;

    OAICatalogQueryText m_text_query;
    bool m_text_query_isSet;
    bool m_text_query_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICatalogQuery)

#endif // OAICatalogQuery_H
