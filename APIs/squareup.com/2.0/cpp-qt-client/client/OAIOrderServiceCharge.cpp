/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderServiceCharge.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderServiceCharge::OAIOrderServiceCharge(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderServiceCharge::OAIOrderServiceCharge() {
    this->initializeModel();
}

OAIOrderServiceCharge::~OAIOrderServiceCharge() {}

void OAIOrderServiceCharge::initializeModel() {

    m_amount_money_isSet = false;
    m_amount_money_isValid = false;

    m_applied_money_isSet = false;
    m_applied_money_isValid = false;

    m_applied_taxes_isSet = false;
    m_applied_taxes_isValid = false;

    m_calculation_phase_isSet = false;
    m_calculation_phase_isValid = false;

    m_catalog_object_id_isSet = false;
    m_catalog_object_id_isValid = false;

    m_catalog_version_isSet = false;
    m_catalog_version_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_taxable_isSet = false;
    m_taxable_isValid = false;

    m_total_money_isSet = false;
    m_total_money_isValid = false;

    m_total_tax_money_isSet = false;
    m_total_tax_money_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIOrderServiceCharge::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderServiceCharge::fromJsonObject(QJsonObject json) {

    m_amount_money_isValid = ::OpenAPI::fromJsonValue(m_amount_money, json[QString("amount_money")]);
    m_amount_money_isSet = !json[QString("amount_money")].isNull() && m_amount_money_isValid;

    m_applied_money_isValid = ::OpenAPI::fromJsonValue(m_applied_money, json[QString("applied_money")]);
    m_applied_money_isSet = !json[QString("applied_money")].isNull() && m_applied_money_isValid;

    m_applied_taxes_isValid = ::OpenAPI::fromJsonValue(m_applied_taxes, json[QString("applied_taxes")]);
    m_applied_taxes_isSet = !json[QString("applied_taxes")].isNull() && m_applied_taxes_isValid;

    m_calculation_phase_isValid = ::OpenAPI::fromJsonValue(m_calculation_phase, json[QString("calculation_phase")]);
    m_calculation_phase_isSet = !json[QString("calculation_phase")].isNull() && m_calculation_phase_isValid;

    m_catalog_object_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_object_id, json[QString("catalog_object_id")]);
    m_catalog_object_id_isSet = !json[QString("catalog_object_id")].isNull() && m_catalog_object_id_isValid;

    m_catalog_version_isValid = ::OpenAPI::fromJsonValue(m_catalog_version, json[QString("catalog_version")]);
    m_catalog_version_isSet = !json[QString("catalog_version")].isNull() && m_catalog_version_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;

    m_taxable_isValid = ::OpenAPI::fromJsonValue(m_taxable, json[QString("taxable")]);
    m_taxable_isSet = !json[QString("taxable")].isNull() && m_taxable_isValid;

    m_total_money_isValid = ::OpenAPI::fromJsonValue(m_total_money, json[QString("total_money")]);
    m_total_money_isSet = !json[QString("total_money")].isNull() && m_total_money_isValid;

    m_total_tax_money_isValid = ::OpenAPI::fromJsonValue(m_total_tax_money, json[QString("total_tax_money")]);
    m_total_tax_money_isSet = !json[QString("total_tax_money")].isNull() && m_total_tax_money_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIOrderServiceCharge::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderServiceCharge::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_money.isSet()) {
        obj.insert(QString("amount_money"), ::OpenAPI::toJsonValue(m_amount_money));
    }
    if (m_applied_money.isSet()) {
        obj.insert(QString("applied_money"), ::OpenAPI::toJsonValue(m_applied_money));
    }
    if (m_applied_taxes.size() > 0) {
        obj.insert(QString("applied_taxes"), ::OpenAPI::toJsonValue(m_applied_taxes));
    }
    if (m_calculation_phase_isSet) {
        obj.insert(QString("calculation_phase"), ::OpenAPI::toJsonValue(m_calculation_phase));
    }
    if (m_catalog_object_id_isSet) {
        obj.insert(QString("catalog_object_id"), ::OpenAPI::toJsonValue(m_catalog_object_id));
    }
    if (m_catalog_version_isSet) {
        obj.insert(QString("catalog_version"), ::OpenAPI::toJsonValue(m_catalog_version));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_taxable_isSet) {
        obj.insert(QString("taxable"), ::OpenAPI::toJsonValue(m_taxable));
    }
    if (m_total_money.isSet()) {
        obj.insert(QString("total_money"), ::OpenAPI::toJsonValue(m_total_money));
    }
    if (m_total_tax_money.isSet()) {
        obj.insert(QString("total_tax_money"), ::OpenAPI::toJsonValue(m_total_tax_money));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

OAIMoney OAIOrderServiceCharge::getAmountMoney() const {
    return m_amount_money;
}
void OAIOrderServiceCharge::setAmountMoney(const OAIMoney &amount_money) {
    m_amount_money = amount_money;
    m_amount_money_isSet = true;
}

bool OAIOrderServiceCharge::is_amount_money_Set() const{
    return m_amount_money_isSet;
}

bool OAIOrderServiceCharge::is_amount_money_Valid() const{
    return m_amount_money_isValid;
}

OAIMoney OAIOrderServiceCharge::getAppliedMoney() const {
    return m_applied_money;
}
void OAIOrderServiceCharge::setAppliedMoney(const OAIMoney &applied_money) {
    m_applied_money = applied_money;
    m_applied_money_isSet = true;
}

bool OAIOrderServiceCharge::is_applied_money_Set() const{
    return m_applied_money_isSet;
}

bool OAIOrderServiceCharge::is_applied_money_Valid() const{
    return m_applied_money_isValid;
}

QList<OAIOrderLineItemAppliedTax> OAIOrderServiceCharge::getAppliedTaxes() const {
    return m_applied_taxes;
}
void OAIOrderServiceCharge::setAppliedTaxes(const QList<OAIOrderLineItemAppliedTax> &applied_taxes) {
    m_applied_taxes = applied_taxes;
    m_applied_taxes_isSet = true;
}

bool OAIOrderServiceCharge::is_applied_taxes_Set() const{
    return m_applied_taxes_isSet;
}

bool OAIOrderServiceCharge::is_applied_taxes_Valid() const{
    return m_applied_taxes_isValid;
}

QString OAIOrderServiceCharge::getCalculationPhase() const {
    return m_calculation_phase;
}
void OAIOrderServiceCharge::setCalculationPhase(const QString &calculation_phase) {
    m_calculation_phase = calculation_phase;
    m_calculation_phase_isSet = true;
}

bool OAIOrderServiceCharge::is_calculation_phase_Set() const{
    return m_calculation_phase_isSet;
}

bool OAIOrderServiceCharge::is_calculation_phase_Valid() const{
    return m_calculation_phase_isValid;
}

QString OAIOrderServiceCharge::getCatalogObjectId() const {
    return m_catalog_object_id;
}
void OAIOrderServiceCharge::setCatalogObjectId(const QString &catalog_object_id) {
    m_catalog_object_id = catalog_object_id;
    m_catalog_object_id_isSet = true;
}

bool OAIOrderServiceCharge::is_catalog_object_id_Set() const{
    return m_catalog_object_id_isSet;
}

bool OAIOrderServiceCharge::is_catalog_object_id_Valid() const{
    return m_catalog_object_id_isValid;
}

qint64 OAIOrderServiceCharge::getCatalogVersion() const {
    return m_catalog_version;
}
void OAIOrderServiceCharge::setCatalogVersion(const qint64 &catalog_version) {
    m_catalog_version = catalog_version;
    m_catalog_version_isSet = true;
}

bool OAIOrderServiceCharge::is_catalog_version_Set() const{
    return m_catalog_version_isSet;
}

bool OAIOrderServiceCharge::is_catalog_version_Valid() const{
    return m_catalog_version_isValid;
}

QMap<QString, QString> OAIOrderServiceCharge::getMetadata() const {
    return m_metadata;
}
void OAIOrderServiceCharge::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIOrderServiceCharge::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIOrderServiceCharge::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIOrderServiceCharge::getName() const {
    return m_name;
}
void OAIOrderServiceCharge::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrderServiceCharge::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrderServiceCharge::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrderServiceCharge::getPercentage() const {
    return m_percentage;
}
void OAIOrderServiceCharge::setPercentage(const QString &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIOrderServiceCharge::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIOrderServiceCharge::is_percentage_Valid() const{
    return m_percentage_isValid;
}

bool OAIOrderServiceCharge::isTaxable() const {
    return m_taxable;
}
void OAIOrderServiceCharge::setTaxable(const bool &taxable) {
    m_taxable = taxable;
    m_taxable_isSet = true;
}

bool OAIOrderServiceCharge::is_taxable_Set() const{
    return m_taxable_isSet;
}

bool OAIOrderServiceCharge::is_taxable_Valid() const{
    return m_taxable_isValid;
}

OAIMoney OAIOrderServiceCharge::getTotalMoney() const {
    return m_total_money;
}
void OAIOrderServiceCharge::setTotalMoney(const OAIMoney &total_money) {
    m_total_money = total_money;
    m_total_money_isSet = true;
}

bool OAIOrderServiceCharge::is_total_money_Set() const{
    return m_total_money_isSet;
}

bool OAIOrderServiceCharge::is_total_money_Valid() const{
    return m_total_money_isValid;
}

OAIMoney OAIOrderServiceCharge::getTotalTaxMoney() const {
    return m_total_tax_money;
}
void OAIOrderServiceCharge::setTotalTaxMoney(const OAIMoney &total_tax_money) {
    m_total_tax_money = total_tax_money;
    m_total_tax_money_isSet = true;
}

bool OAIOrderServiceCharge::is_total_tax_money_Set() const{
    return m_total_tax_money_isSet;
}

bool OAIOrderServiceCharge::is_total_tax_money_Valid() const{
    return m_total_tax_money_isValid;
}

QString OAIOrderServiceCharge::getType() const {
    return m_type;
}
void OAIOrderServiceCharge::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOrderServiceCharge::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOrderServiceCharge::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOrderServiceCharge::getUid() const {
    return m_uid;
}
void OAIOrderServiceCharge::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIOrderServiceCharge::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIOrderServiceCharge::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIOrderServiceCharge::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_taxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculation_phase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tax_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderServiceCharge::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
