/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICashDrawerShiftSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICashDrawerShiftSummary::OAICashDrawerShiftSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICashDrawerShiftSummary::OAICashDrawerShiftSummary() {
    this->initializeModel();
}

OAICashDrawerShiftSummary::~OAICashDrawerShiftSummary() {}

void OAICashDrawerShiftSummary::initializeModel() {

    m_closed_at_isSet = false;
    m_closed_at_isValid = false;

    m_closed_cash_money_isSet = false;
    m_closed_cash_money_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_expected_cash_money_isSet = false;
    m_expected_cash_money_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_opened_at_isSet = false;
    m_opened_at_isValid = false;

    m_opened_cash_money_isSet = false;
    m_opened_cash_money_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICashDrawerShiftSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICashDrawerShiftSummary::fromJsonObject(QJsonObject json) {

    m_closed_at_isValid = ::OpenAPI::fromJsonValue(m_closed_at, json[QString("closed_at")]);
    m_closed_at_isSet = !json[QString("closed_at")].isNull() && m_closed_at_isValid;

    m_closed_cash_money_isValid = ::OpenAPI::fromJsonValue(m_closed_cash_money, json[QString("closed_cash_money")]);
    m_closed_cash_money_isSet = !json[QString("closed_cash_money")].isNull() && m_closed_cash_money_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("ended_at")]);
    m_ended_at_isSet = !json[QString("ended_at")].isNull() && m_ended_at_isValid;

    m_expected_cash_money_isValid = ::OpenAPI::fromJsonValue(m_expected_cash_money, json[QString("expected_cash_money")]);
    m_expected_cash_money_isSet = !json[QString("expected_cash_money")].isNull() && m_expected_cash_money_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_opened_at_isValid = ::OpenAPI::fromJsonValue(m_opened_at, json[QString("opened_at")]);
    m_opened_at_isSet = !json[QString("opened_at")].isNull() && m_opened_at_isValid;

    m_opened_cash_money_isValid = ::OpenAPI::fromJsonValue(m_opened_cash_money, json[QString("opened_cash_money")]);
    m_opened_cash_money_isSet = !json[QString("opened_cash_money")].isNull() && m_opened_cash_money_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAICashDrawerShiftSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICashDrawerShiftSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_at_isSet) {
        obj.insert(QString("closed_at"), ::OpenAPI::toJsonValue(m_closed_at));
    }
    if (m_closed_cash_money.isSet()) {
        obj.insert(QString("closed_cash_money"), ::OpenAPI::toJsonValue(m_closed_cash_money));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("ended_at"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_expected_cash_money.isSet()) {
        obj.insert(QString("expected_cash_money"), ::OpenAPI::toJsonValue(m_expected_cash_money));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_opened_at_isSet) {
        obj.insert(QString("opened_at"), ::OpenAPI::toJsonValue(m_opened_at));
    }
    if (m_opened_cash_money.isSet()) {
        obj.insert(QString("opened_cash_money"), ::OpenAPI::toJsonValue(m_opened_cash_money));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAICashDrawerShiftSummary::getClosedAt() const {
    return m_closed_at;
}
void OAICashDrawerShiftSummary::setClosedAt(const QString &closed_at) {
    m_closed_at = closed_at;
    m_closed_at_isSet = true;
}

bool OAICashDrawerShiftSummary::is_closed_at_Set() const{
    return m_closed_at_isSet;
}

bool OAICashDrawerShiftSummary::is_closed_at_Valid() const{
    return m_closed_at_isValid;
}

OAIMoney OAICashDrawerShiftSummary::getClosedCashMoney() const {
    return m_closed_cash_money;
}
void OAICashDrawerShiftSummary::setClosedCashMoney(const OAIMoney &closed_cash_money) {
    m_closed_cash_money = closed_cash_money;
    m_closed_cash_money_isSet = true;
}

bool OAICashDrawerShiftSummary::is_closed_cash_money_Set() const{
    return m_closed_cash_money_isSet;
}

bool OAICashDrawerShiftSummary::is_closed_cash_money_Valid() const{
    return m_closed_cash_money_isValid;
}

QString OAICashDrawerShiftSummary::getDescription() const {
    return m_description;
}
void OAICashDrawerShiftSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICashDrawerShiftSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAICashDrawerShiftSummary::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICashDrawerShiftSummary::getEndedAt() const {
    return m_ended_at;
}
void OAICashDrawerShiftSummary::setEndedAt(const QString &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAICashDrawerShiftSummary::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAICashDrawerShiftSummary::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

OAIMoney OAICashDrawerShiftSummary::getExpectedCashMoney() const {
    return m_expected_cash_money;
}
void OAICashDrawerShiftSummary::setExpectedCashMoney(const OAIMoney &expected_cash_money) {
    m_expected_cash_money = expected_cash_money;
    m_expected_cash_money_isSet = true;
}

bool OAICashDrawerShiftSummary::is_expected_cash_money_Set() const{
    return m_expected_cash_money_isSet;
}

bool OAICashDrawerShiftSummary::is_expected_cash_money_Valid() const{
    return m_expected_cash_money_isValid;
}

QString OAICashDrawerShiftSummary::getId() const {
    return m_id;
}
void OAICashDrawerShiftSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICashDrawerShiftSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAICashDrawerShiftSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICashDrawerShiftSummary::getOpenedAt() const {
    return m_opened_at;
}
void OAICashDrawerShiftSummary::setOpenedAt(const QString &opened_at) {
    m_opened_at = opened_at;
    m_opened_at_isSet = true;
}

bool OAICashDrawerShiftSummary::is_opened_at_Set() const{
    return m_opened_at_isSet;
}

bool OAICashDrawerShiftSummary::is_opened_at_Valid() const{
    return m_opened_at_isValid;
}

OAIMoney OAICashDrawerShiftSummary::getOpenedCashMoney() const {
    return m_opened_cash_money;
}
void OAICashDrawerShiftSummary::setOpenedCashMoney(const OAIMoney &opened_cash_money) {
    m_opened_cash_money = opened_cash_money;
    m_opened_cash_money_isSet = true;
}

bool OAICashDrawerShiftSummary::is_opened_cash_money_Set() const{
    return m_opened_cash_money_isSet;
}

bool OAICashDrawerShiftSummary::is_opened_cash_money_Valid() const{
    return m_opened_cash_money_isValid;
}

QString OAICashDrawerShiftSummary::getState() const {
    return m_state;
}
void OAICashDrawerShiftSummary::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICashDrawerShiftSummary::is_state_Set() const{
    return m_state_isSet;
}

bool OAICashDrawerShiftSummary::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICashDrawerShiftSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_cash_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_cash_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opened_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opened_cash_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICashDrawerShiftSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
