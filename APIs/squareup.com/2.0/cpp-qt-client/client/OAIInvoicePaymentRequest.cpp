/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoicePaymentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoicePaymentRequest::OAIInvoicePaymentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoicePaymentRequest::OAIInvoicePaymentRequest() {
    this->initializeModel();
}

OAIInvoicePaymentRequest::~OAIInvoicePaymentRequest() {}

void OAIInvoicePaymentRequest::initializeModel() {

    m_automatic_payment_source_isSet = false;
    m_automatic_payment_source_isValid = false;

    m_card_id_isSet = false;
    m_card_id_isValid = false;

    m_computed_amount_money_isSet = false;
    m_computed_amount_money_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_fixed_amount_requested_money_isSet = false;
    m_fixed_amount_requested_money_isValid = false;

    m_percentage_requested_isSet = false;
    m_percentage_requested_isValid = false;

    m_reminders_isSet = false;
    m_reminders_isValid = false;

    m_request_method_isSet = false;
    m_request_method_isValid = false;

    m_request_type_isSet = false;
    m_request_type_isValid = false;

    m_rounding_adjustment_included_money_isSet = false;
    m_rounding_adjustment_included_money_isValid = false;

    m_tipping_enabled_isSet = false;
    m_tipping_enabled_isValid = false;

    m_total_completed_amount_money_isSet = false;
    m_total_completed_amount_money_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIInvoicePaymentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoicePaymentRequest::fromJsonObject(QJsonObject json) {

    m_automatic_payment_source_isValid = ::OpenAPI::fromJsonValue(m_automatic_payment_source, json[QString("automatic_payment_source")]);
    m_automatic_payment_source_isSet = !json[QString("automatic_payment_source")].isNull() && m_automatic_payment_source_isValid;

    m_card_id_isValid = ::OpenAPI::fromJsonValue(m_card_id, json[QString("card_id")]);
    m_card_id_isSet = !json[QString("card_id")].isNull() && m_card_id_isValid;

    m_computed_amount_money_isValid = ::OpenAPI::fromJsonValue(m_computed_amount_money, json[QString("computed_amount_money")]);
    m_computed_amount_money_isSet = !json[QString("computed_amount_money")].isNull() && m_computed_amount_money_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("due_date")]);
    m_due_date_isSet = !json[QString("due_date")].isNull() && m_due_date_isValid;

    m_fixed_amount_requested_money_isValid = ::OpenAPI::fromJsonValue(m_fixed_amount_requested_money, json[QString("fixed_amount_requested_money")]);
    m_fixed_amount_requested_money_isSet = !json[QString("fixed_amount_requested_money")].isNull() && m_fixed_amount_requested_money_isValid;

    m_percentage_requested_isValid = ::OpenAPI::fromJsonValue(m_percentage_requested, json[QString("percentage_requested")]);
    m_percentage_requested_isSet = !json[QString("percentage_requested")].isNull() && m_percentage_requested_isValid;

    m_reminders_isValid = ::OpenAPI::fromJsonValue(m_reminders, json[QString("reminders")]);
    m_reminders_isSet = !json[QString("reminders")].isNull() && m_reminders_isValid;

    m_request_method_isValid = ::OpenAPI::fromJsonValue(m_request_method, json[QString("request_method")]);
    m_request_method_isSet = !json[QString("request_method")].isNull() && m_request_method_isValid;

    m_request_type_isValid = ::OpenAPI::fromJsonValue(m_request_type, json[QString("request_type")]);
    m_request_type_isSet = !json[QString("request_type")].isNull() && m_request_type_isValid;

    m_rounding_adjustment_included_money_isValid = ::OpenAPI::fromJsonValue(m_rounding_adjustment_included_money, json[QString("rounding_adjustment_included_money")]);
    m_rounding_adjustment_included_money_isSet = !json[QString("rounding_adjustment_included_money")].isNull() && m_rounding_adjustment_included_money_isValid;

    m_tipping_enabled_isValid = ::OpenAPI::fromJsonValue(m_tipping_enabled, json[QString("tipping_enabled")]);
    m_tipping_enabled_isSet = !json[QString("tipping_enabled")].isNull() && m_tipping_enabled_isValid;

    m_total_completed_amount_money_isValid = ::OpenAPI::fromJsonValue(m_total_completed_amount_money, json[QString("total_completed_amount_money")]);
    m_total_completed_amount_money_isSet = !json[QString("total_completed_amount_money")].isNull() && m_total_completed_amount_money_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIInvoicePaymentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoicePaymentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_automatic_payment_source_isSet) {
        obj.insert(QString("automatic_payment_source"), ::OpenAPI::toJsonValue(m_automatic_payment_source));
    }
    if (m_card_id_isSet) {
        obj.insert(QString("card_id"), ::OpenAPI::toJsonValue(m_card_id));
    }
    if (m_computed_amount_money.isSet()) {
        obj.insert(QString("computed_amount_money"), ::OpenAPI::toJsonValue(m_computed_amount_money));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("due_date"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_fixed_amount_requested_money.isSet()) {
        obj.insert(QString("fixed_amount_requested_money"), ::OpenAPI::toJsonValue(m_fixed_amount_requested_money));
    }
    if (m_percentage_requested_isSet) {
        obj.insert(QString("percentage_requested"), ::OpenAPI::toJsonValue(m_percentage_requested));
    }
    if (m_reminders.size() > 0) {
        obj.insert(QString("reminders"), ::OpenAPI::toJsonValue(m_reminders));
    }
    if (m_request_method_isSet) {
        obj.insert(QString("request_method"), ::OpenAPI::toJsonValue(m_request_method));
    }
    if (m_request_type_isSet) {
        obj.insert(QString("request_type"), ::OpenAPI::toJsonValue(m_request_type));
    }
    if (m_rounding_adjustment_included_money.isSet()) {
        obj.insert(QString("rounding_adjustment_included_money"), ::OpenAPI::toJsonValue(m_rounding_adjustment_included_money));
    }
    if (m_tipping_enabled_isSet) {
        obj.insert(QString("tipping_enabled"), ::OpenAPI::toJsonValue(m_tipping_enabled));
    }
    if (m_total_completed_amount_money.isSet()) {
        obj.insert(QString("total_completed_amount_money"), ::OpenAPI::toJsonValue(m_total_completed_amount_money));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QString OAIInvoicePaymentRequest::getAutomaticPaymentSource() const {
    return m_automatic_payment_source;
}
void OAIInvoicePaymentRequest::setAutomaticPaymentSource(const QString &automatic_payment_source) {
    m_automatic_payment_source = automatic_payment_source;
    m_automatic_payment_source_isSet = true;
}

bool OAIInvoicePaymentRequest::is_automatic_payment_source_Set() const{
    return m_automatic_payment_source_isSet;
}

bool OAIInvoicePaymentRequest::is_automatic_payment_source_Valid() const{
    return m_automatic_payment_source_isValid;
}

QString OAIInvoicePaymentRequest::getCardId() const {
    return m_card_id;
}
void OAIInvoicePaymentRequest::setCardId(const QString &card_id) {
    m_card_id = card_id;
    m_card_id_isSet = true;
}

bool OAIInvoicePaymentRequest::is_card_id_Set() const{
    return m_card_id_isSet;
}

bool OAIInvoicePaymentRequest::is_card_id_Valid() const{
    return m_card_id_isValid;
}

OAIMoney OAIInvoicePaymentRequest::getComputedAmountMoney() const {
    return m_computed_amount_money;
}
void OAIInvoicePaymentRequest::setComputedAmountMoney(const OAIMoney &computed_amount_money) {
    m_computed_amount_money = computed_amount_money;
    m_computed_amount_money_isSet = true;
}

bool OAIInvoicePaymentRequest::is_computed_amount_money_Set() const{
    return m_computed_amount_money_isSet;
}

bool OAIInvoicePaymentRequest::is_computed_amount_money_Valid() const{
    return m_computed_amount_money_isValid;
}

QString OAIInvoicePaymentRequest::getDueDate() const {
    return m_due_date;
}
void OAIInvoicePaymentRequest::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIInvoicePaymentRequest::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIInvoicePaymentRequest::is_due_date_Valid() const{
    return m_due_date_isValid;
}

OAIMoney OAIInvoicePaymentRequest::getFixedAmountRequestedMoney() const {
    return m_fixed_amount_requested_money;
}
void OAIInvoicePaymentRequest::setFixedAmountRequestedMoney(const OAIMoney &fixed_amount_requested_money) {
    m_fixed_amount_requested_money = fixed_amount_requested_money;
    m_fixed_amount_requested_money_isSet = true;
}

bool OAIInvoicePaymentRequest::is_fixed_amount_requested_money_Set() const{
    return m_fixed_amount_requested_money_isSet;
}

bool OAIInvoicePaymentRequest::is_fixed_amount_requested_money_Valid() const{
    return m_fixed_amount_requested_money_isValid;
}

QString OAIInvoicePaymentRequest::getPercentageRequested() const {
    return m_percentage_requested;
}
void OAIInvoicePaymentRequest::setPercentageRequested(const QString &percentage_requested) {
    m_percentage_requested = percentage_requested;
    m_percentage_requested_isSet = true;
}

bool OAIInvoicePaymentRequest::is_percentage_requested_Set() const{
    return m_percentage_requested_isSet;
}

bool OAIInvoicePaymentRequest::is_percentage_requested_Valid() const{
    return m_percentage_requested_isValid;
}

QList<OAIInvoicePaymentReminder> OAIInvoicePaymentRequest::getReminders() const {
    return m_reminders;
}
void OAIInvoicePaymentRequest::setReminders(const QList<OAIInvoicePaymentReminder> &reminders) {
    m_reminders = reminders;
    m_reminders_isSet = true;
}

bool OAIInvoicePaymentRequest::is_reminders_Set() const{
    return m_reminders_isSet;
}

bool OAIInvoicePaymentRequest::is_reminders_Valid() const{
    return m_reminders_isValid;
}

QString OAIInvoicePaymentRequest::getRequestMethod() const {
    return m_request_method;
}
void OAIInvoicePaymentRequest::setRequestMethod(const QString &request_method) {
    m_request_method = request_method;
    m_request_method_isSet = true;
}

bool OAIInvoicePaymentRequest::is_request_method_Set() const{
    return m_request_method_isSet;
}

bool OAIInvoicePaymentRequest::is_request_method_Valid() const{
    return m_request_method_isValid;
}

QString OAIInvoicePaymentRequest::getRequestType() const {
    return m_request_type;
}
void OAIInvoicePaymentRequest::setRequestType(const QString &request_type) {
    m_request_type = request_type;
    m_request_type_isSet = true;
}

bool OAIInvoicePaymentRequest::is_request_type_Set() const{
    return m_request_type_isSet;
}

bool OAIInvoicePaymentRequest::is_request_type_Valid() const{
    return m_request_type_isValid;
}

OAIMoney OAIInvoicePaymentRequest::getRoundingAdjustmentIncludedMoney() const {
    return m_rounding_adjustment_included_money;
}
void OAIInvoicePaymentRequest::setRoundingAdjustmentIncludedMoney(const OAIMoney &rounding_adjustment_included_money) {
    m_rounding_adjustment_included_money = rounding_adjustment_included_money;
    m_rounding_adjustment_included_money_isSet = true;
}

bool OAIInvoicePaymentRequest::is_rounding_adjustment_included_money_Set() const{
    return m_rounding_adjustment_included_money_isSet;
}

bool OAIInvoicePaymentRequest::is_rounding_adjustment_included_money_Valid() const{
    return m_rounding_adjustment_included_money_isValid;
}

bool OAIInvoicePaymentRequest::isTippingEnabled() const {
    return m_tipping_enabled;
}
void OAIInvoicePaymentRequest::setTippingEnabled(const bool &tipping_enabled) {
    m_tipping_enabled = tipping_enabled;
    m_tipping_enabled_isSet = true;
}

bool OAIInvoicePaymentRequest::is_tipping_enabled_Set() const{
    return m_tipping_enabled_isSet;
}

bool OAIInvoicePaymentRequest::is_tipping_enabled_Valid() const{
    return m_tipping_enabled_isValid;
}

OAIMoney OAIInvoicePaymentRequest::getTotalCompletedAmountMoney() const {
    return m_total_completed_amount_money;
}
void OAIInvoicePaymentRequest::setTotalCompletedAmountMoney(const OAIMoney &total_completed_amount_money) {
    m_total_completed_amount_money = total_completed_amount_money;
    m_total_completed_amount_money_isSet = true;
}

bool OAIInvoicePaymentRequest::is_total_completed_amount_money_Set() const{
    return m_total_completed_amount_money_isSet;
}

bool OAIInvoicePaymentRequest::is_total_completed_amount_money_Valid() const{
    return m_total_completed_amount_money_isValid;
}

QString OAIInvoicePaymentRequest::getUid() const {
    return m_uid;
}
void OAIInvoicePaymentRequest::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIInvoicePaymentRequest::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIInvoicePaymentRequest::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIInvoicePaymentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automatic_payment_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_computed_amount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_amount_requested_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reminders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounding_adjustment_included_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tipping_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_completed_amount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoicePaymentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
