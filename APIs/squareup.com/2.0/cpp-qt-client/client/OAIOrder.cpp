/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrder::OAIOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrder::OAIOrder() {
    this->initializeModel();
}

OAIOrder::~OAIOrder() {}

void OAIOrder::initializeModel() {

    m_closed_at_isSet = false;
    m_closed_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_discounts_isSet = false;
    m_discounts_isValid = false;

    m_fulfillments_isSet = false;
    m_fulfillments_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_net_amounts_isSet = false;
    m_net_amounts_isValid = false;

    m_pricing_options_isSet = false;
    m_pricing_options_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_refunds_isSet = false;
    m_refunds_isValid = false;

    m_return_amounts_isSet = false;
    m_return_amounts_isValid = false;

    m_returns_isSet = false;
    m_returns_isValid = false;

    m_rewards_isSet = false;
    m_rewards_isValid = false;

    m_rounding_adjustment_isSet = false;
    m_rounding_adjustment_isValid = false;

    m_service_charges_isSet = false;
    m_service_charges_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_taxes_isSet = false;
    m_taxes_isValid = false;

    m_tenders_isSet = false;
    m_tenders_isValid = false;

    m_total_discount_money_isSet = false;
    m_total_discount_money_isValid = false;

    m_total_money_isSet = false;
    m_total_money_isValid = false;

    m_total_service_charge_money_isSet = false;
    m_total_service_charge_money_isValid = false;

    m_total_tax_money_isSet = false;
    m_total_tax_money_isValid = false;

    m_total_tip_money_isSet = false;
    m_total_tip_money_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrder::fromJsonObject(QJsonObject json) {

    m_closed_at_isValid = ::OpenAPI::fromJsonValue(m_closed_at, json[QString("closed_at")]);
    m_closed_at_isSet = !json[QString("closed_at")].isNull() && m_closed_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_discounts_isValid = ::OpenAPI::fromJsonValue(m_discounts, json[QString("discounts")]);
    m_discounts_isSet = !json[QString("discounts")].isNull() && m_discounts_isValid;

    m_fulfillments_isValid = ::OpenAPI::fromJsonValue(m_fulfillments, json[QString("fulfillments")]);
    m_fulfillments_isSet = !json[QString("fulfillments")].isNull() && m_fulfillments_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("line_items")]);
    m_line_items_isSet = !json[QString("line_items")].isNull() && m_line_items_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_net_amounts_isValid = ::OpenAPI::fromJsonValue(m_net_amounts, json[QString("net_amounts")]);
    m_net_amounts_isSet = !json[QString("net_amounts")].isNull() && m_net_amounts_isValid;

    m_pricing_options_isValid = ::OpenAPI::fromJsonValue(m_pricing_options, json[QString("pricing_options")]);
    m_pricing_options_isSet = !json[QString("pricing_options")].isNull() && m_pricing_options_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("reference_id")]);
    m_reference_id_isSet = !json[QString("reference_id")].isNull() && m_reference_id_isValid;

    m_refunds_isValid = ::OpenAPI::fromJsonValue(m_refunds, json[QString("refunds")]);
    m_refunds_isSet = !json[QString("refunds")].isNull() && m_refunds_isValid;

    m_return_amounts_isValid = ::OpenAPI::fromJsonValue(m_return_amounts, json[QString("return_amounts")]);
    m_return_amounts_isSet = !json[QString("return_amounts")].isNull() && m_return_amounts_isValid;

    m_returns_isValid = ::OpenAPI::fromJsonValue(m_returns, json[QString("returns")]);
    m_returns_isSet = !json[QString("returns")].isNull() && m_returns_isValid;

    m_rewards_isValid = ::OpenAPI::fromJsonValue(m_rewards, json[QString("rewards")]);
    m_rewards_isSet = !json[QString("rewards")].isNull() && m_rewards_isValid;

    m_rounding_adjustment_isValid = ::OpenAPI::fromJsonValue(m_rounding_adjustment, json[QString("rounding_adjustment")]);
    m_rounding_adjustment_isSet = !json[QString("rounding_adjustment")].isNull() && m_rounding_adjustment_isValid;

    m_service_charges_isValid = ::OpenAPI::fromJsonValue(m_service_charges, json[QString("service_charges")]);
    m_service_charges_isSet = !json[QString("service_charges")].isNull() && m_service_charges_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_taxes_isValid = ::OpenAPI::fromJsonValue(m_taxes, json[QString("taxes")]);
    m_taxes_isSet = !json[QString("taxes")].isNull() && m_taxes_isValid;

    m_tenders_isValid = ::OpenAPI::fromJsonValue(m_tenders, json[QString("tenders")]);
    m_tenders_isSet = !json[QString("tenders")].isNull() && m_tenders_isValid;

    m_total_discount_money_isValid = ::OpenAPI::fromJsonValue(m_total_discount_money, json[QString("total_discount_money")]);
    m_total_discount_money_isSet = !json[QString("total_discount_money")].isNull() && m_total_discount_money_isValid;

    m_total_money_isValid = ::OpenAPI::fromJsonValue(m_total_money, json[QString("total_money")]);
    m_total_money_isSet = !json[QString("total_money")].isNull() && m_total_money_isValid;

    m_total_service_charge_money_isValid = ::OpenAPI::fromJsonValue(m_total_service_charge_money, json[QString("total_service_charge_money")]);
    m_total_service_charge_money_isSet = !json[QString("total_service_charge_money")].isNull() && m_total_service_charge_money_isValid;

    m_total_tax_money_isValid = ::OpenAPI::fromJsonValue(m_total_tax_money, json[QString("total_tax_money")]);
    m_total_tax_money_isSet = !json[QString("total_tax_money")].isNull() && m_total_tax_money_isValid;

    m_total_tip_money_isValid = ::OpenAPI::fromJsonValue(m_total_tip_money, json[QString("total_tip_money")]);
    m_total_tip_money_isSet = !json[QString("total_tip_money")].isNull() && m_total_tip_money_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_at_isSet) {
        obj.insert(QString("closed_at"), ::OpenAPI::toJsonValue(m_closed_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_discounts.size() > 0) {
        obj.insert(QString("discounts"), ::OpenAPI::toJsonValue(m_discounts));
    }
    if (m_fulfillments.size() > 0) {
        obj.insert(QString("fulfillments"), ::OpenAPI::toJsonValue(m_fulfillments));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("line_items"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_net_amounts.isSet()) {
        obj.insert(QString("net_amounts"), ::OpenAPI::toJsonValue(m_net_amounts));
    }
    if (m_pricing_options.isSet()) {
        obj.insert(QString("pricing_options"), ::OpenAPI::toJsonValue(m_pricing_options));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("reference_id"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_refunds.size() > 0) {
        obj.insert(QString("refunds"), ::OpenAPI::toJsonValue(m_refunds));
    }
    if (m_return_amounts.isSet()) {
        obj.insert(QString("return_amounts"), ::OpenAPI::toJsonValue(m_return_amounts));
    }
    if (m_returns.size() > 0) {
        obj.insert(QString("returns"), ::OpenAPI::toJsonValue(m_returns));
    }
    if (m_rewards.size() > 0) {
        obj.insert(QString("rewards"), ::OpenAPI::toJsonValue(m_rewards));
    }
    if (m_rounding_adjustment.isSet()) {
        obj.insert(QString("rounding_adjustment"), ::OpenAPI::toJsonValue(m_rounding_adjustment));
    }
    if (m_service_charges.size() > 0) {
        obj.insert(QString("service_charges"), ::OpenAPI::toJsonValue(m_service_charges));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_taxes.size() > 0) {
        obj.insert(QString("taxes"), ::OpenAPI::toJsonValue(m_taxes));
    }
    if (m_tenders.size() > 0) {
        obj.insert(QString("tenders"), ::OpenAPI::toJsonValue(m_tenders));
    }
    if (m_total_discount_money.isSet()) {
        obj.insert(QString("total_discount_money"), ::OpenAPI::toJsonValue(m_total_discount_money));
    }
    if (m_total_money.isSet()) {
        obj.insert(QString("total_money"), ::OpenAPI::toJsonValue(m_total_money));
    }
    if (m_total_service_charge_money.isSet()) {
        obj.insert(QString("total_service_charge_money"), ::OpenAPI::toJsonValue(m_total_service_charge_money));
    }
    if (m_total_tax_money.isSet()) {
        obj.insert(QString("total_tax_money"), ::OpenAPI::toJsonValue(m_total_tax_money));
    }
    if (m_total_tip_money.isSet()) {
        obj.insert(QString("total_tip_money"), ::OpenAPI::toJsonValue(m_total_tip_money));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIOrder::getClosedAt() const {
    return m_closed_at;
}
void OAIOrder::setClosedAt(const QString &closed_at) {
    m_closed_at = closed_at;
    m_closed_at_isSet = true;
}

bool OAIOrder::is_closed_at_Set() const{
    return m_closed_at_isSet;
}

bool OAIOrder::is_closed_at_Valid() const{
    return m_closed_at_isValid;
}

QString OAIOrder::getCreatedAt() const {
    return m_created_at;
}
void OAIOrder::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIOrder::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIOrder::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIOrder::getCustomerId() const {
    return m_customer_id;
}
void OAIOrder::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIOrder::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIOrder::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QList<OAIOrderLineItemDiscount> OAIOrder::getDiscounts() const {
    return m_discounts;
}
void OAIOrder::setDiscounts(const QList<OAIOrderLineItemDiscount> &discounts) {
    m_discounts = discounts;
    m_discounts_isSet = true;
}

bool OAIOrder::is_discounts_Set() const{
    return m_discounts_isSet;
}

bool OAIOrder::is_discounts_Valid() const{
    return m_discounts_isValid;
}

QList<OAIOrderFulfillment> OAIOrder::getFulfillments() const {
    return m_fulfillments;
}
void OAIOrder::setFulfillments(const QList<OAIOrderFulfillment> &fulfillments) {
    m_fulfillments = fulfillments;
    m_fulfillments_isSet = true;
}

bool OAIOrder::is_fulfillments_Set() const{
    return m_fulfillments_isSet;
}

bool OAIOrder::is_fulfillments_Valid() const{
    return m_fulfillments_isValid;
}

QString OAIOrder::getId() const {
    return m_id;
}
void OAIOrder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrder::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIOrderLineItem> OAIOrder::getLineItems() const {
    return m_line_items;
}
void OAIOrder::setLineItems(const QList<OAIOrderLineItem> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIOrder::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIOrder::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QString OAIOrder::getLocationId() const {
    return m_location_id;
}
void OAIOrder::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIOrder::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIOrder::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QMap<QString, QString> OAIOrder::getMetadata() const {
    return m_metadata;
}
void OAIOrder::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIOrder::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIOrder::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIOrderMoneyAmounts OAIOrder::getNetAmounts() const {
    return m_net_amounts;
}
void OAIOrder::setNetAmounts(const OAIOrderMoneyAmounts &net_amounts) {
    m_net_amounts = net_amounts;
    m_net_amounts_isSet = true;
}

bool OAIOrder::is_net_amounts_Set() const{
    return m_net_amounts_isSet;
}

bool OAIOrder::is_net_amounts_Valid() const{
    return m_net_amounts_isValid;
}

OAIOrderPricingOptions OAIOrder::getPricingOptions() const {
    return m_pricing_options;
}
void OAIOrder::setPricingOptions(const OAIOrderPricingOptions &pricing_options) {
    m_pricing_options = pricing_options;
    m_pricing_options_isSet = true;
}

bool OAIOrder::is_pricing_options_Set() const{
    return m_pricing_options_isSet;
}

bool OAIOrder::is_pricing_options_Valid() const{
    return m_pricing_options_isValid;
}

QString OAIOrder::getReferenceId() const {
    return m_reference_id;
}
void OAIOrder::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIOrder::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIOrder::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QList<OAIRefund> OAIOrder::getRefunds() const {
    return m_refunds;
}
void OAIOrder::setRefunds(const QList<OAIRefund> &refunds) {
    m_refunds = refunds;
    m_refunds_isSet = true;
}

bool OAIOrder::is_refunds_Set() const{
    return m_refunds_isSet;
}

bool OAIOrder::is_refunds_Valid() const{
    return m_refunds_isValid;
}

OAIOrderMoneyAmounts OAIOrder::getReturnAmounts() const {
    return m_return_amounts;
}
void OAIOrder::setReturnAmounts(const OAIOrderMoneyAmounts &return_amounts) {
    m_return_amounts = return_amounts;
    m_return_amounts_isSet = true;
}

bool OAIOrder::is_return_amounts_Set() const{
    return m_return_amounts_isSet;
}

bool OAIOrder::is_return_amounts_Valid() const{
    return m_return_amounts_isValid;
}

QList<OAIOrderReturn> OAIOrder::getReturns() const {
    return m_returns;
}
void OAIOrder::setReturns(const QList<OAIOrderReturn> &returns) {
    m_returns = returns;
    m_returns_isSet = true;
}

bool OAIOrder::is_returns_Set() const{
    return m_returns_isSet;
}

bool OAIOrder::is_returns_Valid() const{
    return m_returns_isValid;
}

QList<OAIOrderReward> OAIOrder::getRewards() const {
    return m_rewards;
}
void OAIOrder::setRewards(const QList<OAIOrderReward> &rewards) {
    m_rewards = rewards;
    m_rewards_isSet = true;
}

bool OAIOrder::is_rewards_Set() const{
    return m_rewards_isSet;
}

bool OAIOrder::is_rewards_Valid() const{
    return m_rewards_isValid;
}

OAIOrderRoundingAdjustment OAIOrder::getRoundingAdjustment() const {
    return m_rounding_adjustment;
}
void OAIOrder::setRoundingAdjustment(const OAIOrderRoundingAdjustment &rounding_adjustment) {
    m_rounding_adjustment = rounding_adjustment;
    m_rounding_adjustment_isSet = true;
}

bool OAIOrder::is_rounding_adjustment_Set() const{
    return m_rounding_adjustment_isSet;
}

bool OAIOrder::is_rounding_adjustment_Valid() const{
    return m_rounding_adjustment_isValid;
}

QList<OAIOrderServiceCharge> OAIOrder::getServiceCharges() const {
    return m_service_charges;
}
void OAIOrder::setServiceCharges(const QList<OAIOrderServiceCharge> &service_charges) {
    m_service_charges = service_charges;
    m_service_charges_isSet = true;
}

bool OAIOrder::is_service_charges_Set() const{
    return m_service_charges_isSet;
}

bool OAIOrder::is_service_charges_Valid() const{
    return m_service_charges_isValid;
}

OAIOrderSource OAIOrder::getSource() const {
    return m_source;
}
void OAIOrder::setSource(const OAIOrderSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIOrder::is_source_Set() const{
    return m_source_isSet;
}

bool OAIOrder::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIOrder::getState() const {
    return m_state;
}
void OAIOrder::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIOrder::is_state_Set() const{
    return m_state_isSet;
}

bool OAIOrder::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIOrderLineItemTax> OAIOrder::getTaxes() const {
    return m_taxes;
}
void OAIOrder::setTaxes(const QList<OAIOrderLineItemTax> &taxes) {
    m_taxes = taxes;
    m_taxes_isSet = true;
}

bool OAIOrder::is_taxes_Set() const{
    return m_taxes_isSet;
}

bool OAIOrder::is_taxes_Valid() const{
    return m_taxes_isValid;
}

QList<OAITender> OAIOrder::getTenders() const {
    return m_tenders;
}
void OAIOrder::setTenders(const QList<OAITender> &tenders) {
    m_tenders = tenders;
    m_tenders_isSet = true;
}

bool OAIOrder::is_tenders_Set() const{
    return m_tenders_isSet;
}

bool OAIOrder::is_tenders_Valid() const{
    return m_tenders_isValid;
}

OAIMoney OAIOrder::getTotalDiscountMoney() const {
    return m_total_discount_money;
}
void OAIOrder::setTotalDiscountMoney(const OAIMoney &total_discount_money) {
    m_total_discount_money = total_discount_money;
    m_total_discount_money_isSet = true;
}

bool OAIOrder::is_total_discount_money_Set() const{
    return m_total_discount_money_isSet;
}

bool OAIOrder::is_total_discount_money_Valid() const{
    return m_total_discount_money_isValid;
}

OAIMoney OAIOrder::getTotalMoney() const {
    return m_total_money;
}
void OAIOrder::setTotalMoney(const OAIMoney &total_money) {
    m_total_money = total_money;
    m_total_money_isSet = true;
}

bool OAIOrder::is_total_money_Set() const{
    return m_total_money_isSet;
}

bool OAIOrder::is_total_money_Valid() const{
    return m_total_money_isValid;
}

OAIMoney OAIOrder::getTotalServiceChargeMoney() const {
    return m_total_service_charge_money;
}
void OAIOrder::setTotalServiceChargeMoney(const OAIMoney &total_service_charge_money) {
    m_total_service_charge_money = total_service_charge_money;
    m_total_service_charge_money_isSet = true;
}

bool OAIOrder::is_total_service_charge_money_Set() const{
    return m_total_service_charge_money_isSet;
}

bool OAIOrder::is_total_service_charge_money_Valid() const{
    return m_total_service_charge_money_isValid;
}

OAIMoney OAIOrder::getTotalTaxMoney() const {
    return m_total_tax_money;
}
void OAIOrder::setTotalTaxMoney(const OAIMoney &total_tax_money) {
    m_total_tax_money = total_tax_money;
    m_total_tax_money_isSet = true;
}

bool OAIOrder::is_total_tax_money_Set() const{
    return m_total_tax_money_isSet;
}

bool OAIOrder::is_total_tax_money_Valid() const{
    return m_total_tax_money_isValid;
}

OAIMoney OAIOrder::getTotalTipMoney() const {
    return m_total_tip_money;
}
void OAIOrder::setTotalTipMoney(const OAIMoney &total_tip_money) {
    m_total_tip_money = total_tip_money;
    m_total_tip_money_isSet = true;
}

bool OAIOrder::is_total_tip_money_Set() const{
    return m_total_tip_money_isSet;
}

bool OAIOrder::is_total_tip_money_Valid() const{
    return m_total_tip_money_isValid;
}

QString OAIOrder::getUpdatedAt() const {
    return m_updated_at;
}
void OAIOrder::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIOrder::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIOrder::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

qint32 OAIOrder::getVersion() const {
    return m_version;
}
void OAIOrder::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIOrder::is_version_Set() const{
    return m_version_isSet;
}

bool OAIOrder::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_amounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_amounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_returns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rewards.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounding_adjustment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_charges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_discount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_service_charge_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tax_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tip_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_id_isValid && true;
}

} // namespace OpenAPI
