/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPaymentsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPaymentsRequest::OAIListPaymentsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPaymentsRequest::OAIListPaymentsRequest() {
    this->initializeModel();
}

OAIListPaymentsRequest::~OAIListPaymentsRequest() {}

void OAIListPaymentsRequest::initializeModel() {

    m_begin_time_isSet = false;
    m_begin_time_isValid = false;

    m_card_brand_isSet = false;
    m_card_brand_isValid = false;

    m_cursor_isSet = false;
    m_cursor_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_last_4_isSet = false;
    m_last_4_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIListPaymentsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPaymentsRequest::fromJsonObject(QJsonObject json) {

    m_begin_time_isValid = ::OpenAPI::fromJsonValue(m_begin_time, json[QString("begin_time")]);
    m_begin_time_isSet = !json[QString("begin_time")].isNull() && m_begin_time_isValid;

    m_card_brand_isValid = ::OpenAPI::fromJsonValue(m_card_brand, json[QString("card_brand")]);
    m_card_brand_isSet = !json[QString("card_brand")].isNull() && m_card_brand_isValid;

    m_cursor_isValid = ::OpenAPI::fromJsonValue(m_cursor, json[QString("cursor")]);
    m_cursor_isSet = !json[QString("cursor")].isNull() && m_cursor_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_last_4_isValid = ::OpenAPI::fromJsonValue(m_last_4, json[QString("last_4")]);
    m_last_4_isSet = !json[QString("last_4")].isNull() && m_last_4_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIListPaymentsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPaymentsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_begin_time_isSet) {
        obj.insert(QString("begin_time"), ::OpenAPI::toJsonValue(m_begin_time));
    }
    if (m_card_brand_isSet) {
        obj.insert(QString("card_brand"), ::OpenAPI::toJsonValue(m_card_brand));
    }
    if (m_cursor_isSet) {
        obj.insert(QString("cursor"), ::OpenAPI::toJsonValue(m_cursor));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_last_4_isSet) {
        obj.insert(QString("last_4"), ::OpenAPI::toJsonValue(m_last_4));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QString OAIListPaymentsRequest::getBeginTime() const {
    return m_begin_time;
}
void OAIListPaymentsRequest::setBeginTime(const QString &begin_time) {
    m_begin_time = begin_time;
    m_begin_time_isSet = true;
}

bool OAIListPaymentsRequest::is_begin_time_Set() const{
    return m_begin_time_isSet;
}

bool OAIListPaymentsRequest::is_begin_time_Valid() const{
    return m_begin_time_isValid;
}

QString OAIListPaymentsRequest::getCardBrand() const {
    return m_card_brand;
}
void OAIListPaymentsRequest::setCardBrand(const QString &card_brand) {
    m_card_brand = card_brand;
    m_card_brand_isSet = true;
}

bool OAIListPaymentsRequest::is_card_brand_Set() const{
    return m_card_brand_isSet;
}

bool OAIListPaymentsRequest::is_card_brand_Valid() const{
    return m_card_brand_isValid;
}

QString OAIListPaymentsRequest::getCursor() const {
    return m_cursor;
}
void OAIListPaymentsRequest::setCursor(const QString &cursor) {
    m_cursor = cursor;
    m_cursor_isSet = true;
}

bool OAIListPaymentsRequest::is_cursor_Set() const{
    return m_cursor_isSet;
}

bool OAIListPaymentsRequest::is_cursor_Valid() const{
    return m_cursor_isValid;
}

QString OAIListPaymentsRequest::getEndTime() const {
    return m_end_time;
}
void OAIListPaymentsRequest::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIListPaymentsRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIListPaymentsRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIListPaymentsRequest::getLast4() const {
    return m_last_4;
}
void OAIListPaymentsRequest::setLast4(const QString &last_4) {
    m_last_4 = last_4;
    m_last_4_isSet = true;
}

bool OAIListPaymentsRequest::is_last_4_Set() const{
    return m_last_4_isSet;
}

bool OAIListPaymentsRequest::is_last_4_Valid() const{
    return m_last_4_isValid;
}

qint32 OAIListPaymentsRequest::getLimit() const {
    return m_limit;
}
void OAIListPaymentsRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIListPaymentsRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIListPaymentsRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIListPaymentsRequest::getLocationId() const {
    return m_location_id;
}
void OAIListPaymentsRequest::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIListPaymentsRequest::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIListPaymentsRequest::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIListPaymentsRequest::getSortOrder() const {
    return m_sort_order;
}
void OAIListPaymentsRequest::setSortOrder(const QString &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListPaymentsRequest::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListPaymentsRequest::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

qint64 OAIListPaymentsRequest::getTotal() const {
    return m_total;
}
void OAIListPaymentsRequest::setTotal(const qint64 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIListPaymentsRequest::is_total_Set() const{
    return m_total_isSet;
}

bool OAIListPaymentsRequest::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIListPaymentsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_begin_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPaymentsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
