/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITipSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITipSettings::OAITipSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITipSettings::OAITipSettings() {
    this->initializeModel();
}

OAITipSettings::~OAITipSettings() {}

void OAITipSettings::initializeModel() {

    m_allow_tipping_isSet = false;
    m_allow_tipping_isValid = false;

    m_custom_tip_field_isSet = false;
    m_custom_tip_field_isValid = false;

    m_separate_tip_screen_isSet = false;
    m_separate_tip_screen_isValid = false;

    m_smart_tipping_isSet = false;
    m_smart_tipping_isValid = false;

    m_tip_percentages_isSet = false;
    m_tip_percentages_isValid = false;
}

void OAITipSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITipSettings::fromJsonObject(QJsonObject json) {

    m_allow_tipping_isValid = ::OpenAPI::fromJsonValue(m_allow_tipping, json[QString("allow_tipping")]);
    m_allow_tipping_isSet = !json[QString("allow_tipping")].isNull() && m_allow_tipping_isValid;

    m_custom_tip_field_isValid = ::OpenAPI::fromJsonValue(m_custom_tip_field, json[QString("custom_tip_field")]);
    m_custom_tip_field_isSet = !json[QString("custom_tip_field")].isNull() && m_custom_tip_field_isValid;

    m_separate_tip_screen_isValid = ::OpenAPI::fromJsonValue(m_separate_tip_screen, json[QString("separate_tip_screen")]);
    m_separate_tip_screen_isSet = !json[QString("separate_tip_screen")].isNull() && m_separate_tip_screen_isValid;

    m_smart_tipping_isValid = ::OpenAPI::fromJsonValue(m_smart_tipping, json[QString("smart_tipping")]);
    m_smart_tipping_isSet = !json[QString("smart_tipping")].isNull() && m_smart_tipping_isValid;

    m_tip_percentages_isValid = ::OpenAPI::fromJsonValue(m_tip_percentages, json[QString("tip_percentages")]);
    m_tip_percentages_isSet = !json[QString("tip_percentages")].isNull() && m_tip_percentages_isValid;
}

QString OAITipSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITipSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_tipping_isSet) {
        obj.insert(QString("allow_tipping"), ::OpenAPI::toJsonValue(m_allow_tipping));
    }
    if (m_custom_tip_field_isSet) {
        obj.insert(QString("custom_tip_field"), ::OpenAPI::toJsonValue(m_custom_tip_field));
    }
    if (m_separate_tip_screen_isSet) {
        obj.insert(QString("separate_tip_screen"), ::OpenAPI::toJsonValue(m_separate_tip_screen));
    }
    if (m_smart_tipping_isSet) {
        obj.insert(QString("smart_tipping"), ::OpenAPI::toJsonValue(m_smart_tipping));
    }
    if (m_tip_percentages.size() > 0) {
        obj.insert(QString("tip_percentages"), ::OpenAPI::toJsonValue(m_tip_percentages));
    }
    return obj;
}

bool OAITipSettings::isAllowTipping() const {
    return m_allow_tipping;
}
void OAITipSettings::setAllowTipping(const bool &allow_tipping) {
    m_allow_tipping = allow_tipping;
    m_allow_tipping_isSet = true;
}

bool OAITipSettings::is_allow_tipping_Set() const{
    return m_allow_tipping_isSet;
}

bool OAITipSettings::is_allow_tipping_Valid() const{
    return m_allow_tipping_isValid;
}

bool OAITipSettings::isCustomTipField() const {
    return m_custom_tip_field;
}
void OAITipSettings::setCustomTipField(const bool &custom_tip_field) {
    m_custom_tip_field = custom_tip_field;
    m_custom_tip_field_isSet = true;
}

bool OAITipSettings::is_custom_tip_field_Set() const{
    return m_custom_tip_field_isSet;
}

bool OAITipSettings::is_custom_tip_field_Valid() const{
    return m_custom_tip_field_isValid;
}

bool OAITipSettings::isSeparateTipScreen() const {
    return m_separate_tip_screen;
}
void OAITipSettings::setSeparateTipScreen(const bool &separate_tip_screen) {
    m_separate_tip_screen = separate_tip_screen;
    m_separate_tip_screen_isSet = true;
}

bool OAITipSettings::is_separate_tip_screen_Set() const{
    return m_separate_tip_screen_isSet;
}

bool OAITipSettings::is_separate_tip_screen_Valid() const{
    return m_separate_tip_screen_isValid;
}

bool OAITipSettings::isSmartTipping() const {
    return m_smart_tipping;
}
void OAITipSettings::setSmartTipping(const bool &smart_tipping) {
    m_smart_tipping = smart_tipping;
    m_smart_tipping_isSet = true;
}

bool OAITipSettings::is_smart_tipping_Set() const{
    return m_smart_tipping_isSet;
}

bool OAITipSettings::is_smart_tipping_Valid() const{
    return m_smart_tipping_isValid;
}

QList<qint32> OAITipSettings::getTipPercentages() const {
    return m_tip_percentages;
}
void OAITipSettings::setTipPercentages(const QList<qint32> &tip_percentages) {
    m_tip_percentages = tip_percentages;
    m_tip_percentages_isSet = true;
}

bool OAITipSettings::is_tip_percentages_Set() const{
    return m_tip_percentages_isSet;
}

bool OAITipSettings::is_tip_percentages_Valid() const{
    return m_tip_percentages_isValid;
}

bool OAITipSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_tipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_tip_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_separate_tip_screen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smart_tipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tip_percentages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITipSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
