/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyEventType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyEventType::OAILoyaltyEventType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyEventType::OAILoyaltyEventType() {
    this->initializeModel();
}

OAILoyaltyEventType::~OAILoyaltyEventType() {}

void OAILoyaltyEventType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILoyaltyEventType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILoyaltyEventType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ACCUMULATE_POINTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyEventType::ACCUMULATE_POINTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATE_REWARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyEventType::CREATE_REWARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REDEEM_REWARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyEventType::REDEEM_REWARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETE_REWARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyEventType::DELETE_REWARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADJUST_POINTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyEventType::ADJUST_POINTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPIRE_POINTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyEventType::EXPIRE_POINTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHER", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyEventType::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILoyaltyEventType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILoyaltyEventType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILoyaltyEventType::ACCUMULATE_POINTS:
            val = "ACCUMULATE_POINTS";
            break;
        case eOAILoyaltyEventType::CREATE_REWARD:
            val = "CREATE_REWARD";
            break;
        case eOAILoyaltyEventType::REDEEM_REWARD:
            val = "REDEEM_REWARD";
            break;
        case eOAILoyaltyEventType::DELETE_REWARD:
            val = "DELETE_REWARD";
            break;
        case eOAILoyaltyEventType::ADJUST_POINTS:
            val = "ADJUST_POINTS";
            break;
        case eOAILoyaltyEventType::EXPIRE_POINTS:
            val = "EXPIRE_POINTS";
            break;
        case eOAILoyaltyEventType::OTHER:
            val = "OTHER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILoyaltyEventType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILoyaltyEventType::eOAILoyaltyEventType OAILoyaltyEventType::getValue() const {
    return m_value;
}

void OAILoyaltyEventType::setValue(const OAILoyaltyEventType::eOAILoyaltyEventType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILoyaltyEventType::isSet() const {
    
    return m_value_isSet;
}

bool OAILoyaltyEventType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
