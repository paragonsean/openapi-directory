/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisputeReason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisputeReason::OAIDisputeReason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisputeReason::OAIDisputeReason() {
    this->initializeModel();
}

OAIDisputeReason::~OAIDisputeReason() {}

void OAIDisputeReason::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDisputeReason::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDisputeReason::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AMOUNT_DIFFERS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeReason::AMOUNT_DIFFERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeReason::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DUPLICATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeReason::DUPLICATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_KNOWLEDGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeReason::NO_KNOWLEDGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_AS_DESCRIBED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeReason::NOT_AS_DESCRIBED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_RECEIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeReason::NOT_RECEIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAID_BY_OTHER_MEANS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeReason::PAID_BY_OTHER_MEANS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOMER_REQUESTS_CREDIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeReason::CUSTOMER_REQUESTS_CREDIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EMV_LIABILITY_SHIFT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeReason::EMV_LIABILITY_SHIFT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDisputeReason::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDisputeReason::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDisputeReason::AMOUNT_DIFFERS:
            val = "AMOUNT_DIFFERS";
            break;
        case eOAIDisputeReason::CANCELLED:
            val = "CANCELLED";
            break;
        case eOAIDisputeReason::DUPLICATE:
            val = "DUPLICATE";
            break;
        case eOAIDisputeReason::NO_KNOWLEDGE:
            val = "NO_KNOWLEDGE";
            break;
        case eOAIDisputeReason::NOT_AS_DESCRIBED:
            val = "NOT_AS_DESCRIBED";
            break;
        case eOAIDisputeReason::NOT_RECEIVED:
            val = "NOT_RECEIVED";
            break;
        case eOAIDisputeReason::PAID_BY_OTHER_MEANS:
            val = "PAID_BY_OTHER_MEANS";
            break;
        case eOAIDisputeReason::CUSTOMER_REQUESTS_CREDIT:
            val = "CUSTOMER_REQUESTS_CREDIT";
            break;
        case eOAIDisputeReason::EMV_LIABILITY_SHIFT:
            val = "EMV_LIABILITY_SHIFT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDisputeReason::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDisputeReason::eOAIDisputeReason OAIDisputeReason::getValue() const {
    return m_value;
}

void OAIDisputeReason::setValue(const OAIDisputeReason::eOAIDisputeReason& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDisputeReason::isSet() const {
    
    return m_value_isSet;
}

bool OAIDisputeReason::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
