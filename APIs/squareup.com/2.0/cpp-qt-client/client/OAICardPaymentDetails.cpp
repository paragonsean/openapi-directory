/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardPaymentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardPaymentDetails::OAICardPaymentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardPaymentDetails::OAICardPaymentDetails() {
    this->initializeModel();
}

OAICardPaymentDetails::~OAICardPaymentDetails() {}

void OAICardPaymentDetails::initializeModel() {

    m_application_cryptogram_isSet = false;
    m_application_cryptogram_isValid = false;

    m_application_identifier_isSet = false;
    m_application_identifier_isValid = false;

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_auth_result_code_isSet = false;
    m_auth_result_code_isValid = false;

    m_avs_status_isSet = false;
    m_avs_status_isValid = false;

    m_card_isSet = false;
    m_card_isValid = false;

    m_card_payment_timeline_isSet = false;
    m_card_payment_timeline_isValid = false;

    m_cvv_status_isSet = false;
    m_cvv_status_isValid = false;

    m_device_details_isSet = false;
    m_device_details_isValid = false;

    m_entry_method_isSet = false;
    m_entry_method_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_refund_requires_card_presence_isSet = false;
    m_refund_requires_card_presence_isValid = false;

    m_statement_description_isSet = false;
    m_statement_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_verification_method_isSet = false;
    m_verification_method_isValid = false;

    m_verification_results_isSet = false;
    m_verification_results_isValid = false;
}

void OAICardPaymentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardPaymentDetails::fromJsonObject(QJsonObject json) {

    m_application_cryptogram_isValid = ::OpenAPI::fromJsonValue(m_application_cryptogram, json[QString("application_cryptogram")]);
    m_application_cryptogram_isSet = !json[QString("application_cryptogram")].isNull() && m_application_cryptogram_isValid;

    m_application_identifier_isValid = ::OpenAPI::fromJsonValue(m_application_identifier, json[QString("application_identifier")]);
    m_application_identifier_isSet = !json[QString("application_identifier")].isNull() && m_application_identifier_isValid;

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("application_name")]);
    m_application_name_isSet = !json[QString("application_name")].isNull() && m_application_name_isValid;

    m_auth_result_code_isValid = ::OpenAPI::fromJsonValue(m_auth_result_code, json[QString("auth_result_code")]);
    m_auth_result_code_isSet = !json[QString("auth_result_code")].isNull() && m_auth_result_code_isValid;

    m_avs_status_isValid = ::OpenAPI::fromJsonValue(m_avs_status, json[QString("avs_status")]);
    m_avs_status_isSet = !json[QString("avs_status")].isNull() && m_avs_status_isValid;

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_card_payment_timeline_isValid = ::OpenAPI::fromJsonValue(m_card_payment_timeline, json[QString("card_payment_timeline")]);
    m_card_payment_timeline_isSet = !json[QString("card_payment_timeline")].isNull() && m_card_payment_timeline_isValid;

    m_cvv_status_isValid = ::OpenAPI::fromJsonValue(m_cvv_status, json[QString("cvv_status")]);
    m_cvv_status_isSet = !json[QString("cvv_status")].isNull() && m_cvv_status_isValid;

    m_device_details_isValid = ::OpenAPI::fromJsonValue(m_device_details, json[QString("device_details")]);
    m_device_details_isSet = !json[QString("device_details")].isNull() && m_device_details_isValid;

    m_entry_method_isValid = ::OpenAPI::fromJsonValue(m_entry_method, json[QString("entry_method")]);
    m_entry_method_isSet = !json[QString("entry_method")].isNull() && m_entry_method_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_refund_requires_card_presence_isValid = ::OpenAPI::fromJsonValue(m_refund_requires_card_presence, json[QString("refund_requires_card_presence")]);
    m_refund_requires_card_presence_isSet = !json[QString("refund_requires_card_presence")].isNull() && m_refund_requires_card_presence_isValid;

    m_statement_description_isValid = ::OpenAPI::fromJsonValue(m_statement_description, json[QString("statement_description")]);
    m_statement_description_isSet = !json[QString("statement_description")].isNull() && m_statement_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_verification_method_isValid = ::OpenAPI::fromJsonValue(m_verification_method, json[QString("verification_method")]);
    m_verification_method_isSet = !json[QString("verification_method")].isNull() && m_verification_method_isValid;

    m_verification_results_isValid = ::OpenAPI::fromJsonValue(m_verification_results, json[QString("verification_results")]);
    m_verification_results_isSet = !json[QString("verification_results")].isNull() && m_verification_results_isValid;
}

QString OAICardPaymentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardPaymentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_application_cryptogram_isSet) {
        obj.insert(QString("application_cryptogram"), ::OpenAPI::toJsonValue(m_application_cryptogram));
    }
    if (m_application_identifier_isSet) {
        obj.insert(QString("application_identifier"), ::OpenAPI::toJsonValue(m_application_identifier));
    }
    if (m_application_name_isSet) {
        obj.insert(QString("application_name"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_auth_result_code_isSet) {
        obj.insert(QString("auth_result_code"), ::OpenAPI::toJsonValue(m_auth_result_code));
    }
    if (m_avs_status_isSet) {
        obj.insert(QString("avs_status"), ::OpenAPI::toJsonValue(m_avs_status));
    }
    if (m_card.isSet()) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_card_payment_timeline.isSet()) {
        obj.insert(QString("card_payment_timeline"), ::OpenAPI::toJsonValue(m_card_payment_timeline));
    }
    if (m_cvv_status_isSet) {
        obj.insert(QString("cvv_status"), ::OpenAPI::toJsonValue(m_cvv_status));
    }
    if (m_device_details.isSet()) {
        obj.insert(QString("device_details"), ::OpenAPI::toJsonValue(m_device_details));
    }
    if (m_entry_method_isSet) {
        obj.insert(QString("entry_method"), ::OpenAPI::toJsonValue(m_entry_method));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_refund_requires_card_presence_isSet) {
        obj.insert(QString("refund_requires_card_presence"), ::OpenAPI::toJsonValue(m_refund_requires_card_presence));
    }
    if (m_statement_description_isSet) {
        obj.insert(QString("statement_description"), ::OpenAPI::toJsonValue(m_statement_description));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_verification_method_isSet) {
        obj.insert(QString("verification_method"), ::OpenAPI::toJsonValue(m_verification_method));
    }
    if (m_verification_results_isSet) {
        obj.insert(QString("verification_results"), ::OpenAPI::toJsonValue(m_verification_results));
    }
    return obj;
}

QString OAICardPaymentDetails::getApplicationCryptogram() const {
    return m_application_cryptogram;
}
void OAICardPaymentDetails::setApplicationCryptogram(const QString &application_cryptogram) {
    m_application_cryptogram = application_cryptogram;
    m_application_cryptogram_isSet = true;
}

bool OAICardPaymentDetails::is_application_cryptogram_Set() const{
    return m_application_cryptogram_isSet;
}

bool OAICardPaymentDetails::is_application_cryptogram_Valid() const{
    return m_application_cryptogram_isValid;
}

QString OAICardPaymentDetails::getApplicationIdentifier() const {
    return m_application_identifier;
}
void OAICardPaymentDetails::setApplicationIdentifier(const QString &application_identifier) {
    m_application_identifier = application_identifier;
    m_application_identifier_isSet = true;
}

bool OAICardPaymentDetails::is_application_identifier_Set() const{
    return m_application_identifier_isSet;
}

bool OAICardPaymentDetails::is_application_identifier_Valid() const{
    return m_application_identifier_isValid;
}

QString OAICardPaymentDetails::getApplicationName() const {
    return m_application_name;
}
void OAICardPaymentDetails::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAICardPaymentDetails::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAICardPaymentDetails::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAICardPaymentDetails::getAuthResultCode() const {
    return m_auth_result_code;
}
void OAICardPaymentDetails::setAuthResultCode(const QString &auth_result_code) {
    m_auth_result_code = auth_result_code;
    m_auth_result_code_isSet = true;
}

bool OAICardPaymentDetails::is_auth_result_code_Set() const{
    return m_auth_result_code_isSet;
}

bool OAICardPaymentDetails::is_auth_result_code_Valid() const{
    return m_auth_result_code_isValid;
}

QString OAICardPaymentDetails::getAvsStatus() const {
    return m_avs_status;
}
void OAICardPaymentDetails::setAvsStatus(const QString &avs_status) {
    m_avs_status = avs_status;
    m_avs_status_isSet = true;
}

bool OAICardPaymentDetails::is_avs_status_Set() const{
    return m_avs_status_isSet;
}

bool OAICardPaymentDetails::is_avs_status_Valid() const{
    return m_avs_status_isValid;
}

OAICard OAICardPaymentDetails::getCard() const {
    return m_card;
}
void OAICardPaymentDetails::setCard(const OAICard &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAICardPaymentDetails::is_card_Set() const{
    return m_card_isSet;
}

bool OAICardPaymentDetails::is_card_Valid() const{
    return m_card_isValid;
}

OAICardPaymentTimeline OAICardPaymentDetails::getCardPaymentTimeline() const {
    return m_card_payment_timeline;
}
void OAICardPaymentDetails::setCardPaymentTimeline(const OAICardPaymentTimeline &card_payment_timeline) {
    m_card_payment_timeline = card_payment_timeline;
    m_card_payment_timeline_isSet = true;
}

bool OAICardPaymentDetails::is_card_payment_timeline_Set() const{
    return m_card_payment_timeline_isSet;
}

bool OAICardPaymentDetails::is_card_payment_timeline_Valid() const{
    return m_card_payment_timeline_isValid;
}

QString OAICardPaymentDetails::getCvvStatus() const {
    return m_cvv_status;
}
void OAICardPaymentDetails::setCvvStatus(const QString &cvv_status) {
    m_cvv_status = cvv_status;
    m_cvv_status_isSet = true;
}

bool OAICardPaymentDetails::is_cvv_status_Set() const{
    return m_cvv_status_isSet;
}

bool OAICardPaymentDetails::is_cvv_status_Valid() const{
    return m_cvv_status_isValid;
}

OAIDeviceDetails OAICardPaymentDetails::getDeviceDetails() const {
    return m_device_details;
}
void OAICardPaymentDetails::setDeviceDetails(const OAIDeviceDetails &device_details) {
    m_device_details = device_details;
    m_device_details_isSet = true;
}

bool OAICardPaymentDetails::is_device_details_Set() const{
    return m_device_details_isSet;
}

bool OAICardPaymentDetails::is_device_details_Valid() const{
    return m_device_details_isValid;
}

QString OAICardPaymentDetails::getEntryMethod() const {
    return m_entry_method;
}
void OAICardPaymentDetails::setEntryMethod(const QString &entry_method) {
    m_entry_method = entry_method;
    m_entry_method_isSet = true;
}

bool OAICardPaymentDetails::is_entry_method_Set() const{
    return m_entry_method_isSet;
}

bool OAICardPaymentDetails::is_entry_method_Valid() const{
    return m_entry_method_isValid;
}

QList<OAIError> OAICardPaymentDetails::getErrors() const {
    return m_errors;
}
void OAICardPaymentDetails::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAICardPaymentDetails::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAICardPaymentDetails::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAICardPaymentDetails::isRefundRequiresCardPresence() const {
    return m_refund_requires_card_presence;
}
void OAICardPaymentDetails::setRefundRequiresCardPresence(const bool &refund_requires_card_presence) {
    m_refund_requires_card_presence = refund_requires_card_presence;
    m_refund_requires_card_presence_isSet = true;
}

bool OAICardPaymentDetails::is_refund_requires_card_presence_Set() const{
    return m_refund_requires_card_presence_isSet;
}

bool OAICardPaymentDetails::is_refund_requires_card_presence_Valid() const{
    return m_refund_requires_card_presence_isValid;
}

QString OAICardPaymentDetails::getStatementDescription() const {
    return m_statement_description;
}
void OAICardPaymentDetails::setStatementDescription(const QString &statement_description) {
    m_statement_description = statement_description;
    m_statement_description_isSet = true;
}

bool OAICardPaymentDetails::is_statement_description_Set() const{
    return m_statement_description_isSet;
}

bool OAICardPaymentDetails::is_statement_description_Valid() const{
    return m_statement_description_isValid;
}

QString OAICardPaymentDetails::getStatus() const {
    return m_status;
}
void OAICardPaymentDetails::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICardPaymentDetails::is_status_Set() const{
    return m_status_isSet;
}

bool OAICardPaymentDetails::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICardPaymentDetails::getVerificationMethod() const {
    return m_verification_method;
}
void OAICardPaymentDetails::setVerificationMethod(const QString &verification_method) {
    m_verification_method = verification_method;
    m_verification_method_isSet = true;
}

bool OAICardPaymentDetails::is_verification_method_Set() const{
    return m_verification_method_isSet;
}

bool OAICardPaymentDetails::is_verification_method_Valid() const{
    return m_verification_method_isValid;
}

QString OAICardPaymentDetails::getVerificationResults() const {
    return m_verification_results;
}
void OAICardPaymentDetails::setVerificationResults(const QString &verification_results) {
    m_verification_results = verification_results;
    m_verification_results_isSet = true;
}

bool OAICardPaymentDetails::is_verification_results_Set() const{
    return m_verification_results_isSet;
}

bool OAICardPaymentDetails::is_verification_results_Valid() const{
    return m_verification_results_isValid;
}

bool OAICardPaymentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_cryptogram_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_result_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avs_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_payment_timeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvv_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_requires_card_presence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardPaymentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
