/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICard::OAICard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICard::OAICard() {
    this->initializeModel();
}

OAICard::~OAICard() {}

void OAICard::initializeModel() {

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_bin_isSet = false;
    m_bin_isValid = false;

    m_card_brand_isSet = false;
    m_card_brand_isValid = false;

    m_card_type_isSet = false;
    m_card_type_isValid = false;

    m_cardholder_name_isSet = false;
    m_cardholder_name_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_exp_month_isSet = false;
    m_exp_month_isValid = false;

    m_exp_year_isSet = false;
    m_exp_year_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_4_isSet = false;
    m_last_4_isValid = false;

    m_prepaid_type_isSet = false;
    m_prepaid_type_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAICard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICard::fromJsonObject(QJsonObject json) {

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billing_address")]);
    m_billing_address_isSet = !json[QString("billing_address")].isNull() && m_billing_address_isValid;

    m_bin_isValid = ::OpenAPI::fromJsonValue(m_bin, json[QString("bin")]);
    m_bin_isSet = !json[QString("bin")].isNull() && m_bin_isValid;

    m_card_brand_isValid = ::OpenAPI::fromJsonValue(m_card_brand, json[QString("card_brand")]);
    m_card_brand_isSet = !json[QString("card_brand")].isNull() && m_card_brand_isValid;

    m_card_type_isValid = ::OpenAPI::fromJsonValue(m_card_type, json[QString("card_type")]);
    m_card_type_isSet = !json[QString("card_type")].isNull() && m_card_type_isValid;

    m_cardholder_name_isValid = ::OpenAPI::fromJsonValue(m_cardholder_name, json[QString("cardholder_name")]);
    m_cardholder_name_isSet = !json[QString("cardholder_name")].isNull() && m_cardholder_name_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_exp_month_isValid = ::OpenAPI::fromJsonValue(m_exp_month, json[QString("exp_month")]);
    m_exp_month_isSet = !json[QString("exp_month")].isNull() && m_exp_month_isValid;

    m_exp_year_isValid = ::OpenAPI::fromJsonValue(m_exp_year, json[QString("exp_year")]);
    m_exp_year_isSet = !json[QString("exp_year")].isNull() && m_exp_year_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_4_isValid = ::OpenAPI::fromJsonValue(m_last_4, json[QString("last_4")]);
    m_last_4_isSet = !json[QString("last_4")].isNull() && m_last_4_isValid;

    m_prepaid_type_isValid = ::OpenAPI::fromJsonValue(m_prepaid_type, json[QString("prepaid_type")]);
    m_prepaid_type_isSet = !json[QString("prepaid_type")].isNull() && m_prepaid_type_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("reference_id")]);
    m_reference_id_isSet = !json[QString("reference_id")].isNull() && m_reference_id_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAICard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICard::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_address.isSet()) {
        obj.insert(QString("billing_address"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_bin_isSet) {
        obj.insert(QString("bin"), ::OpenAPI::toJsonValue(m_bin));
    }
    if (m_card_brand_isSet) {
        obj.insert(QString("card_brand"), ::OpenAPI::toJsonValue(m_card_brand));
    }
    if (m_card_type_isSet) {
        obj.insert(QString("card_type"), ::OpenAPI::toJsonValue(m_card_type));
    }
    if (m_cardholder_name_isSet) {
        obj.insert(QString("cardholder_name"), ::OpenAPI::toJsonValue(m_cardholder_name));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_exp_month_isSet) {
        obj.insert(QString("exp_month"), ::OpenAPI::toJsonValue(m_exp_month));
    }
    if (m_exp_year_isSet) {
        obj.insert(QString("exp_year"), ::OpenAPI::toJsonValue(m_exp_year));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_4_isSet) {
        obj.insert(QString("last_4"), ::OpenAPI::toJsonValue(m_last_4));
    }
    if (m_prepaid_type_isSet) {
        obj.insert(QString("prepaid_type"), ::OpenAPI::toJsonValue(m_prepaid_type));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("reference_id"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIAddress OAICard::getBillingAddress() const {
    return m_billing_address;
}
void OAICard::setBillingAddress(const OAIAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAICard::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAICard::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

QString OAICard::getBin() const {
    return m_bin;
}
void OAICard::setBin(const QString &bin) {
    m_bin = bin;
    m_bin_isSet = true;
}

bool OAICard::is_bin_Set() const{
    return m_bin_isSet;
}

bool OAICard::is_bin_Valid() const{
    return m_bin_isValid;
}

QString OAICard::getCardBrand() const {
    return m_card_brand;
}
void OAICard::setCardBrand(const QString &card_brand) {
    m_card_brand = card_brand;
    m_card_brand_isSet = true;
}

bool OAICard::is_card_brand_Set() const{
    return m_card_brand_isSet;
}

bool OAICard::is_card_brand_Valid() const{
    return m_card_brand_isValid;
}

QString OAICard::getCardType() const {
    return m_card_type;
}
void OAICard::setCardType(const QString &card_type) {
    m_card_type = card_type;
    m_card_type_isSet = true;
}

bool OAICard::is_card_type_Set() const{
    return m_card_type_isSet;
}

bool OAICard::is_card_type_Valid() const{
    return m_card_type_isValid;
}

QString OAICard::getCardholderName() const {
    return m_cardholder_name;
}
void OAICard::setCardholderName(const QString &cardholder_name) {
    m_cardholder_name = cardholder_name;
    m_cardholder_name_isSet = true;
}

bool OAICard::is_cardholder_name_Set() const{
    return m_cardholder_name_isSet;
}

bool OAICard::is_cardholder_name_Valid() const{
    return m_cardholder_name_isValid;
}

QString OAICard::getCustomerId() const {
    return m_customer_id;
}
void OAICard::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAICard::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAICard::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

bool OAICard::isEnabled() const {
    return m_enabled;
}
void OAICard::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICard::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICard::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint64 OAICard::getExpMonth() const {
    return m_exp_month;
}
void OAICard::setExpMonth(const qint64 &exp_month) {
    m_exp_month = exp_month;
    m_exp_month_isSet = true;
}

bool OAICard::is_exp_month_Set() const{
    return m_exp_month_isSet;
}

bool OAICard::is_exp_month_Valid() const{
    return m_exp_month_isValid;
}

qint64 OAICard::getExpYear() const {
    return m_exp_year;
}
void OAICard::setExpYear(const qint64 &exp_year) {
    m_exp_year = exp_year;
    m_exp_year_isSet = true;
}

bool OAICard::is_exp_year_Set() const{
    return m_exp_year_isSet;
}

bool OAICard::is_exp_year_Valid() const{
    return m_exp_year_isValid;
}

QString OAICard::getFingerprint() const {
    return m_fingerprint;
}
void OAICard::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAICard::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAICard::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QString OAICard::getId() const {
    return m_id;
}
void OAICard::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICard::is_id_Set() const{
    return m_id_isSet;
}

bool OAICard::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICard::getLast4() const {
    return m_last_4;
}
void OAICard::setLast4(const QString &last_4) {
    m_last_4 = last_4;
    m_last_4_isSet = true;
}

bool OAICard::is_last_4_Set() const{
    return m_last_4_isSet;
}

bool OAICard::is_last_4_Valid() const{
    return m_last_4_isValid;
}

QString OAICard::getPrepaidType() const {
    return m_prepaid_type;
}
void OAICard::setPrepaidType(const QString &prepaid_type) {
    m_prepaid_type = prepaid_type;
    m_prepaid_type_isSet = true;
}

bool OAICard::is_prepaid_type_Set() const{
    return m_prepaid_type_isSet;
}

bool OAICard::is_prepaid_type_Valid() const{
    return m_prepaid_type_isValid;
}

QString OAICard::getReferenceId() const {
    return m_reference_id;
}
void OAICard::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAICard::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAICard::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

qint64 OAICard::getVersion() const {
    return m_version;
}
void OAICard::setVersion(const qint64 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICard::is_version_Set() const{
    return m_version_isSet;
}

bool OAICard::is_version_Valid() const{
    return m_version_isValid;
}

bool OAICard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cardholder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exp_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exp_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepaid_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
