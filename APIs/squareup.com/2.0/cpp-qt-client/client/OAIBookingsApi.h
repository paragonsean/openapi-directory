/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBookingsApi_H
#define OAI_OAIBookingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICancelBookingRequest.h"
#include "OAICancelBookingResponse.h"
#include "OAICreateBookingRequest.h"
#include "OAICreateBookingResponse.h"
#include "OAIListTeamMemberBookingProfilesResponse.h"
#include "OAIRetrieveBookingResponse.h"
#include "OAIRetrieveBusinessBookingProfileResponse.h"
#include "OAIRetrieveTeamMemberBookingProfileResponse.h"
#include "OAISearchAvailabilityRequest.h"
#include "OAISearchAvailabilityResponse.h"
#include "OAIUpdateBookingRequest.h"
#include "OAIUpdateBookingResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBookingsApi : public QObject {
    Q_OBJECT

public:
    OAIBookingsApi(const int timeOut = 0);
    ~OAIBookingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  booking_id QString [required]
    * @param[in]  oai_cancel_booking_request OAICancelBookingRequest [required]
    */
    virtual void cancelBooking(const QString &booking_id, const OAICancelBookingRequest &oai_cancel_booking_request);

    /**
    * @param[in]  oai_create_booking_request OAICreateBookingRequest [required]
    */
    virtual void createBooking(const OAICreateBookingRequest &oai_create_booking_request);

    /**
    * @param[in]  bookable_only bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  location_id QString [optional]
    */
    virtual void listTeamMemberBookingProfiles(const ::OpenAPI::OptionalParam<bool> &bookable_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  booking_id QString [required]
    */
    virtual void retrieveBooking(const QString &booking_id);


    virtual void retrieveBusinessBookingProfile();

    /**
    * @param[in]  team_member_id QString [required]
    */
    virtual void retrieveTeamMemberBookingProfile(const QString &team_member_id);

    /**
    * @param[in]  oai_search_availability_request OAISearchAvailabilityRequest [required]
    */
    virtual void searchAvailability(const OAISearchAvailabilityRequest &oai_search_availability_request);

    /**
    * @param[in]  booking_id QString [required]
    * @param[in]  oai_update_booking_request OAIUpdateBookingRequest [required]
    */
    virtual void updateBooking(const QString &booking_id, const OAIUpdateBookingRequest &oai_update_booking_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelBookingCallback(OAIHttpRequestWorker *worker);
    void createBookingCallback(OAIHttpRequestWorker *worker);
    void listTeamMemberBookingProfilesCallback(OAIHttpRequestWorker *worker);
    void retrieveBookingCallback(OAIHttpRequestWorker *worker);
    void retrieveBusinessBookingProfileCallback(OAIHttpRequestWorker *worker);
    void retrieveTeamMemberBookingProfileCallback(OAIHttpRequestWorker *worker);
    void searchAvailabilityCallback(OAIHttpRequestWorker *worker);
    void updateBookingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelBookingSignal(OAICancelBookingResponse summary);
    void createBookingSignal(OAICreateBookingResponse summary);
    void listTeamMemberBookingProfilesSignal(OAIListTeamMemberBookingProfilesResponse summary);
    void retrieveBookingSignal(OAIRetrieveBookingResponse summary);
    void retrieveBusinessBookingProfileSignal(OAIRetrieveBusinessBookingProfileResponse summary);
    void retrieveTeamMemberBookingProfileSignal(OAIRetrieveTeamMemberBookingProfileResponse summary);
    void searchAvailabilitySignal(OAISearchAvailabilityResponse summary);
    void updateBookingSignal(OAIUpdateBookingResponse summary);


    void cancelBookingSignalFull(OAIHttpRequestWorker *worker, OAICancelBookingResponse summary);
    void createBookingSignalFull(OAIHttpRequestWorker *worker, OAICreateBookingResponse summary);
    void listTeamMemberBookingProfilesSignalFull(OAIHttpRequestWorker *worker, OAIListTeamMemberBookingProfilesResponse summary);
    void retrieveBookingSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveBookingResponse summary);
    void retrieveBusinessBookingProfileSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveBusinessBookingProfileResponse summary);
    void retrieveTeamMemberBookingProfileSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveTeamMemberBookingProfileResponse summary);
    void searchAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAISearchAvailabilityResponse summary);
    void updateBookingSignalFull(OAIHttpRequestWorker *worker, OAIUpdateBookingResponse summary);

    Q_DECL_DEPRECATED_X("Use cancelBookingSignalError() instead")
    void cancelBookingSignalE(OAICancelBookingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelBookingSignalError(OAICancelBookingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBookingSignalError() instead")
    void createBookingSignalE(OAICreateBookingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBookingSignalError(OAICreateBookingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTeamMemberBookingProfilesSignalError() instead")
    void listTeamMemberBookingProfilesSignalE(OAIListTeamMemberBookingProfilesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTeamMemberBookingProfilesSignalError(OAIListTeamMemberBookingProfilesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveBookingSignalError() instead")
    void retrieveBookingSignalE(OAIRetrieveBookingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveBookingSignalError(OAIRetrieveBookingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveBusinessBookingProfileSignalError() instead")
    void retrieveBusinessBookingProfileSignalE(OAIRetrieveBusinessBookingProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveBusinessBookingProfileSignalError(OAIRetrieveBusinessBookingProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveTeamMemberBookingProfileSignalError() instead")
    void retrieveTeamMemberBookingProfileSignalE(OAIRetrieveTeamMemberBookingProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveTeamMemberBookingProfileSignalError(OAIRetrieveTeamMemberBookingProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchAvailabilitySignalError() instead")
    void searchAvailabilitySignalE(OAISearchAvailabilityResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchAvailabilitySignalError(OAISearchAvailabilityResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBookingSignalError() instead")
    void updateBookingSignalE(OAIUpdateBookingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBookingSignalError(OAIUpdateBookingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelBookingSignalErrorFull() instead")
    void cancelBookingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelBookingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBookingSignalErrorFull() instead")
    void createBookingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBookingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTeamMemberBookingProfilesSignalErrorFull() instead")
    void listTeamMemberBookingProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTeamMemberBookingProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveBookingSignalErrorFull() instead")
    void retrieveBookingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveBookingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveBusinessBookingProfileSignalErrorFull() instead")
    void retrieveBusinessBookingProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveBusinessBookingProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveTeamMemberBookingProfileSignalErrorFull() instead")
    void retrieveTeamMemberBookingProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveTeamMemberBookingProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchAvailabilitySignalErrorFull() instead")
    void searchAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBookingSignalErrorFull() instead")
    void updateBookingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBookingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
