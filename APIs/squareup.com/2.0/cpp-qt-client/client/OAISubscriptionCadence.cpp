/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionCadence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionCadence::OAISubscriptionCadence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionCadence::OAISubscriptionCadence() {
    this->initializeModel();
}

OAISubscriptionCadence::~OAISubscriptionCadence() {}

void OAISubscriptionCadence::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISubscriptionCadence::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISubscriptionCadence::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DAILY", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionCadence::DAILY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WEEKLY", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionCadence::WEEKLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EVERY_TWO_WEEKS", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionCadence::EVERY_TWO_WEEKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("THIRTY_DAYS", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionCadence::THIRTY_DAYS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SIXTY_DAYS", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionCadence::SIXTY_DAYS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NINETY_DAYS", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionCadence::NINETY_DAYS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MONTHLY", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionCadence::MONTHLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EVERY_TWO_MONTHS", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionCadence::EVERY_TWO_MONTHS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUARTERLY", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionCadence::QUARTERLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EVERY_FOUR_MONTHS", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionCadence::EVERY_FOUR_MONTHS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EVERY_SIX_MONTHS", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionCadence::EVERY_SIX_MONTHS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ANNUAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionCadence::ANNUAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EVERY_TWO_YEARS", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionCadence::EVERY_TWO_YEARS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISubscriptionCadence::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISubscriptionCadence::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISubscriptionCadence::DAILY:
            val = "DAILY";
            break;
        case eOAISubscriptionCadence::WEEKLY:
            val = "WEEKLY";
            break;
        case eOAISubscriptionCadence::EVERY_TWO_WEEKS:
            val = "EVERY_TWO_WEEKS";
            break;
        case eOAISubscriptionCadence::THIRTY_DAYS:
            val = "THIRTY_DAYS";
            break;
        case eOAISubscriptionCadence::SIXTY_DAYS:
            val = "SIXTY_DAYS";
            break;
        case eOAISubscriptionCadence::NINETY_DAYS:
            val = "NINETY_DAYS";
            break;
        case eOAISubscriptionCadence::MONTHLY:
            val = "MONTHLY";
            break;
        case eOAISubscriptionCadence::EVERY_TWO_MONTHS:
            val = "EVERY_TWO_MONTHS";
            break;
        case eOAISubscriptionCadence::QUARTERLY:
            val = "QUARTERLY";
            break;
        case eOAISubscriptionCadence::EVERY_FOUR_MONTHS:
            val = "EVERY_FOUR_MONTHS";
            break;
        case eOAISubscriptionCadence::EVERY_SIX_MONTHS:
            val = "EVERY_SIX_MONTHS";
            break;
        case eOAISubscriptionCadence::ANNUAL:
            val = "ANNUAL";
            break;
        case eOAISubscriptionCadence::EVERY_TWO_YEARS:
            val = "EVERY_TWO_YEARS";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISubscriptionCadence::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISubscriptionCadence::eOAISubscriptionCadence OAISubscriptionCadence::getValue() const {
    return m_value;
}

void OAISubscriptionCadence::setValue(const OAISubscriptionCadence::eOAISubscriptionCadence& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISubscriptionCadence::isSet() const {
    
    return m_value_isSet;
}

bool OAISubscriptionCadence::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
