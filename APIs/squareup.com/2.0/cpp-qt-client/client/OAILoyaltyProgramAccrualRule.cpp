/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyProgramAccrualRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyProgramAccrualRule::OAILoyaltyProgramAccrualRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyProgramAccrualRule::OAILoyaltyProgramAccrualRule() {
    this->initializeModel();
}

OAILoyaltyProgramAccrualRule::~OAILoyaltyProgramAccrualRule() {}

void OAILoyaltyProgramAccrualRule::initializeModel() {

    m_accrual_type_isSet = false;
    m_accrual_type_isValid = false;

    m_catalog_object_id_isSet = false;
    m_catalog_object_id_isValid = false;

    m_excluded_category_ids_isSet = false;
    m_excluded_category_ids_isValid = false;

    m_excluded_item_variation_ids_isSet = false;
    m_excluded_item_variation_ids_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;

    m_spend_amount_money_isSet = false;
    m_spend_amount_money_isValid = false;

    m_visit_minimum_amount_money_isSet = false;
    m_visit_minimum_amount_money_isValid = false;
}

void OAILoyaltyProgramAccrualRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyProgramAccrualRule::fromJsonObject(QJsonObject json) {

    m_accrual_type_isValid = ::OpenAPI::fromJsonValue(m_accrual_type, json[QString("accrual_type")]);
    m_accrual_type_isSet = !json[QString("accrual_type")].isNull() && m_accrual_type_isValid;

    m_catalog_object_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_object_id, json[QString("catalog_object_id")]);
    m_catalog_object_id_isSet = !json[QString("catalog_object_id")].isNull() && m_catalog_object_id_isValid;

    m_excluded_category_ids_isValid = ::OpenAPI::fromJsonValue(m_excluded_category_ids, json[QString("excluded_category_ids")]);
    m_excluded_category_ids_isSet = !json[QString("excluded_category_ids")].isNull() && m_excluded_category_ids_isValid;

    m_excluded_item_variation_ids_isValid = ::OpenAPI::fromJsonValue(m_excluded_item_variation_ids, json[QString("excluded_item_variation_ids")]);
    m_excluded_item_variation_ids_isSet = !json[QString("excluded_item_variation_ids")].isNull() && m_excluded_item_variation_ids_isValid;

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("points")]);
    m_points_isSet = !json[QString("points")].isNull() && m_points_isValid;

    m_spend_amount_money_isValid = ::OpenAPI::fromJsonValue(m_spend_amount_money, json[QString("spend_amount_money")]);
    m_spend_amount_money_isSet = !json[QString("spend_amount_money")].isNull() && m_spend_amount_money_isValid;

    m_visit_minimum_amount_money_isValid = ::OpenAPI::fromJsonValue(m_visit_minimum_amount_money, json[QString("visit_minimum_amount_money")]);
    m_visit_minimum_amount_money_isSet = !json[QString("visit_minimum_amount_money")].isNull() && m_visit_minimum_amount_money_isValid;
}

QString OAILoyaltyProgramAccrualRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyProgramAccrualRule::asJsonObject() const {
    QJsonObject obj;
    if (m_accrual_type_isSet) {
        obj.insert(QString("accrual_type"), ::OpenAPI::toJsonValue(m_accrual_type));
    }
    if (m_catalog_object_id_isSet) {
        obj.insert(QString("catalog_object_id"), ::OpenAPI::toJsonValue(m_catalog_object_id));
    }
    if (m_excluded_category_ids.size() > 0) {
        obj.insert(QString("excluded_category_ids"), ::OpenAPI::toJsonValue(m_excluded_category_ids));
    }
    if (m_excluded_item_variation_ids.size() > 0) {
        obj.insert(QString("excluded_item_variation_ids"), ::OpenAPI::toJsonValue(m_excluded_item_variation_ids));
    }
    if (m_points_isSet) {
        obj.insert(QString("points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_spend_amount_money.isSet()) {
        obj.insert(QString("spend_amount_money"), ::OpenAPI::toJsonValue(m_spend_amount_money));
    }
    if (m_visit_minimum_amount_money.isSet()) {
        obj.insert(QString("visit_minimum_amount_money"), ::OpenAPI::toJsonValue(m_visit_minimum_amount_money));
    }
    return obj;
}

QString OAILoyaltyProgramAccrualRule::getAccrualType() const {
    return m_accrual_type;
}
void OAILoyaltyProgramAccrualRule::setAccrualType(const QString &accrual_type) {
    m_accrual_type = accrual_type;
    m_accrual_type_isSet = true;
}

bool OAILoyaltyProgramAccrualRule::is_accrual_type_Set() const{
    return m_accrual_type_isSet;
}

bool OAILoyaltyProgramAccrualRule::is_accrual_type_Valid() const{
    return m_accrual_type_isValid;
}

QString OAILoyaltyProgramAccrualRule::getCatalogObjectId() const {
    return m_catalog_object_id;
}
void OAILoyaltyProgramAccrualRule::setCatalogObjectId(const QString &catalog_object_id) {
    m_catalog_object_id = catalog_object_id;
    m_catalog_object_id_isSet = true;
}

bool OAILoyaltyProgramAccrualRule::is_catalog_object_id_Set() const{
    return m_catalog_object_id_isSet;
}

bool OAILoyaltyProgramAccrualRule::is_catalog_object_id_Valid() const{
    return m_catalog_object_id_isValid;
}

QList<QString> OAILoyaltyProgramAccrualRule::getExcludedCategoryIds() const {
    return m_excluded_category_ids;
}
void OAILoyaltyProgramAccrualRule::setExcludedCategoryIds(const QList<QString> &excluded_category_ids) {
    m_excluded_category_ids = excluded_category_ids;
    m_excluded_category_ids_isSet = true;
}

bool OAILoyaltyProgramAccrualRule::is_excluded_category_ids_Set() const{
    return m_excluded_category_ids_isSet;
}

bool OAILoyaltyProgramAccrualRule::is_excluded_category_ids_Valid() const{
    return m_excluded_category_ids_isValid;
}

QList<QString> OAILoyaltyProgramAccrualRule::getExcludedItemVariationIds() const {
    return m_excluded_item_variation_ids;
}
void OAILoyaltyProgramAccrualRule::setExcludedItemVariationIds(const QList<QString> &excluded_item_variation_ids) {
    m_excluded_item_variation_ids = excluded_item_variation_ids;
    m_excluded_item_variation_ids_isSet = true;
}

bool OAILoyaltyProgramAccrualRule::is_excluded_item_variation_ids_Set() const{
    return m_excluded_item_variation_ids_isSet;
}

bool OAILoyaltyProgramAccrualRule::is_excluded_item_variation_ids_Valid() const{
    return m_excluded_item_variation_ids_isValid;
}

qint32 OAILoyaltyProgramAccrualRule::getPoints() const {
    return m_points;
}
void OAILoyaltyProgramAccrualRule::setPoints(const qint32 &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAILoyaltyProgramAccrualRule::is_points_Set() const{
    return m_points_isSet;
}

bool OAILoyaltyProgramAccrualRule::is_points_Valid() const{
    return m_points_isValid;
}

OAIMoney OAILoyaltyProgramAccrualRule::getSpendAmountMoney() const {
    return m_spend_amount_money;
}
void OAILoyaltyProgramAccrualRule::setSpendAmountMoney(const OAIMoney &spend_amount_money) {
    m_spend_amount_money = spend_amount_money;
    m_spend_amount_money_isSet = true;
}

bool OAILoyaltyProgramAccrualRule::is_spend_amount_money_Set() const{
    return m_spend_amount_money_isSet;
}

bool OAILoyaltyProgramAccrualRule::is_spend_amount_money_Valid() const{
    return m_spend_amount_money_isValid;
}

OAIMoney OAILoyaltyProgramAccrualRule::getVisitMinimumAmountMoney() const {
    return m_visit_minimum_amount_money;
}
void OAILoyaltyProgramAccrualRule::setVisitMinimumAmountMoney(const OAIMoney &visit_minimum_amount_money) {
    m_visit_minimum_amount_money = visit_minimum_amount_money;
    m_visit_minimum_amount_money_isSet = true;
}

bool OAILoyaltyProgramAccrualRule::is_visit_minimum_amount_money_Set() const{
    return m_visit_minimum_amount_money_isSet;
}

bool OAILoyaltyProgramAccrualRule::is_visit_minimum_amount_money_Valid() const{
    return m_visit_minimum_amount_money_isValid;
}

bool OAILoyaltyProgramAccrualRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accrual_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_item_variation_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spend_amount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visit_minimum_amount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyProgramAccrualRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accrual_type_isValid && true;
}

} // namespace OpenAPI
