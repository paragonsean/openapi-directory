/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobAssignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobAssignment::OAIJobAssignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobAssignment::OAIJobAssignment() {
    this->initializeModel();
}

OAIJobAssignment::~OAIJobAssignment() {}

void OAIJobAssignment::initializeModel() {

    m_annual_rate_isSet = false;
    m_annual_rate_isValid = false;

    m_hourly_rate_isSet = false;
    m_hourly_rate_isValid = false;

    m_job_title_isSet = false;
    m_job_title_isValid = false;

    m_pay_type_isSet = false;
    m_pay_type_isValid = false;

    m_weekly_hours_isSet = false;
    m_weekly_hours_isValid = false;
}

void OAIJobAssignment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobAssignment::fromJsonObject(QJsonObject json) {

    m_annual_rate_isValid = ::OpenAPI::fromJsonValue(m_annual_rate, json[QString("annual_rate")]);
    m_annual_rate_isSet = !json[QString("annual_rate")].isNull() && m_annual_rate_isValid;

    m_hourly_rate_isValid = ::OpenAPI::fromJsonValue(m_hourly_rate, json[QString("hourly_rate")]);
    m_hourly_rate_isSet = !json[QString("hourly_rate")].isNull() && m_hourly_rate_isValid;

    m_job_title_isValid = ::OpenAPI::fromJsonValue(m_job_title, json[QString("job_title")]);
    m_job_title_isSet = !json[QString("job_title")].isNull() && m_job_title_isValid;

    m_pay_type_isValid = ::OpenAPI::fromJsonValue(m_pay_type, json[QString("pay_type")]);
    m_pay_type_isSet = !json[QString("pay_type")].isNull() && m_pay_type_isValid;

    m_weekly_hours_isValid = ::OpenAPI::fromJsonValue(m_weekly_hours, json[QString("weekly_hours")]);
    m_weekly_hours_isSet = !json[QString("weekly_hours")].isNull() && m_weekly_hours_isValid;
}

QString OAIJobAssignment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobAssignment::asJsonObject() const {
    QJsonObject obj;
    if (m_annual_rate.isSet()) {
        obj.insert(QString("annual_rate"), ::OpenAPI::toJsonValue(m_annual_rate));
    }
    if (m_hourly_rate.isSet()) {
        obj.insert(QString("hourly_rate"), ::OpenAPI::toJsonValue(m_hourly_rate));
    }
    if (m_job_title_isSet) {
        obj.insert(QString("job_title"), ::OpenAPI::toJsonValue(m_job_title));
    }
    if (m_pay_type_isSet) {
        obj.insert(QString("pay_type"), ::OpenAPI::toJsonValue(m_pay_type));
    }
    if (m_weekly_hours_isSet) {
        obj.insert(QString("weekly_hours"), ::OpenAPI::toJsonValue(m_weekly_hours));
    }
    return obj;
}

OAIMoney OAIJobAssignment::getAnnualRate() const {
    return m_annual_rate;
}
void OAIJobAssignment::setAnnualRate(const OAIMoney &annual_rate) {
    m_annual_rate = annual_rate;
    m_annual_rate_isSet = true;
}

bool OAIJobAssignment::is_annual_rate_Set() const{
    return m_annual_rate_isSet;
}

bool OAIJobAssignment::is_annual_rate_Valid() const{
    return m_annual_rate_isValid;
}

OAIMoney OAIJobAssignment::getHourlyRate() const {
    return m_hourly_rate;
}
void OAIJobAssignment::setHourlyRate(const OAIMoney &hourly_rate) {
    m_hourly_rate = hourly_rate;
    m_hourly_rate_isSet = true;
}

bool OAIJobAssignment::is_hourly_rate_Set() const{
    return m_hourly_rate_isSet;
}

bool OAIJobAssignment::is_hourly_rate_Valid() const{
    return m_hourly_rate_isValid;
}

QString OAIJobAssignment::getJobTitle() const {
    return m_job_title;
}
void OAIJobAssignment::setJobTitle(const QString &job_title) {
    m_job_title = job_title;
    m_job_title_isSet = true;
}

bool OAIJobAssignment::is_job_title_Set() const{
    return m_job_title_isSet;
}

bool OAIJobAssignment::is_job_title_Valid() const{
    return m_job_title_isValid;
}

QString OAIJobAssignment::getPayType() const {
    return m_pay_type;
}
void OAIJobAssignment::setPayType(const QString &pay_type) {
    m_pay_type = pay_type;
    m_pay_type_isSet = true;
}

bool OAIJobAssignment::is_pay_type_Set() const{
    return m_pay_type_isSet;
}

bool OAIJobAssignment::is_pay_type_Valid() const{
    return m_pay_type_isValid;
}

qint32 OAIJobAssignment::getWeeklyHours() const {
    return m_weekly_hours;
}
void OAIJobAssignment::setWeeklyHours(const qint32 &weekly_hours) {
    m_weekly_hours = weekly_hours;
    m_weekly_hours_isSet = true;
}

bool OAIJobAssignment::is_weekly_hours_Set() const{
    return m_weekly_hours_isSet;
}

bool OAIJobAssignment::is_weekly_hours_Valid() const{
    return m_weekly_hours_isValid;
}

bool OAIJobAssignment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annual_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hourly_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_hours_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobAssignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_title_isValid && m_pay_type_isValid && true;
}

} // namespace OpenAPI
