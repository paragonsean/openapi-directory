/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchOrdersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchOrdersRequest::OAISearchOrdersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchOrdersRequest::OAISearchOrdersRequest() {
    this->initializeModel();
}

OAISearchOrdersRequest::~OAISearchOrdersRequest() {}

void OAISearchOrdersRequest::initializeModel() {

    m_cursor_isSet = false;
    m_cursor_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_location_ids_isSet = false;
    m_location_ids_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_return_entries_isSet = false;
    m_return_entries_isValid = false;
}

void OAISearchOrdersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchOrdersRequest::fromJsonObject(QJsonObject json) {

    m_cursor_isValid = ::OpenAPI::fromJsonValue(m_cursor, json[QString("cursor")]);
    m_cursor_isSet = !json[QString("cursor")].isNull() && m_cursor_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_location_ids_isValid = ::OpenAPI::fromJsonValue(m_location_ids, json[QString("location_ids")]);
    m_location_ids_isSet = !json[QString("location_ids")].isNull() && m_location_ids_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_return_entries_isValid = ::OpenAPI::fromJsonValue(m_return_entries, json[QString("return_entries")]);
    m_return_entries_isSet = !json[QString("return_entries")].isNull() && m_return_entries_isValid;
}

QString OAISearchOrdersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchOrdersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cursor_isSet) {
        obj.insert(QString("cursor"), ::OpenAPI::toJsonValue(m_cursor));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_location_ids.size() > 0) {
        obj.insert(QString("location_ids"), ::OpenAPI::toJsonValue(m_location_ids));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_return_entries_isSet) {
        obj.insert(QString("return_entries"), ::OpenAPI::toJsonValue(m_return_entries));
    }
    return obj;
}

QString OAISearchOrdersRequest::getCursor() const {
    return m_cursor;
}
void OAISearchOrdersRequest::setCursor(const QString &cursor) {
    m_cursor = cursor;
    m_cursor_isSet = true;
}

bool OAISearchOrdersRequest::is_cursor_Set() const{
    return m_cursor_isSet;
}

bool OAISearchOrdersRequest::is_cursor_Valid() const{
    return m_cursor_isValid;
}

qint32 OAISearchOrdersRequest::getLimit() const {
    return m_limit;
}
void OAISearchOrdersRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAISearchOrdersRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAISearchOrdersRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

QList<QString> OAISearchOrdersRequest::getLocationIds() const {
    return m_location_ids;
}
void OAISearchOrdersRequest::setLocationIds(const QList<QString> &location_ids) {
    m_location_ids = location_ids;
    m_location_ids_isSet = true;
}

bool OAISearchOrdersRequest::is_location_ids_Set() const{
    return m_location_ids_isSet;
}

bool OAISearchOrdersRequest::is_location_ids_Valid() const{
    return m_location_ids_isValid;
}

OAISearchOrdersQuery OAISearchOrdersRequest::getQuery() const {
    return m_query;
}
void OAISearchOrdersRequest::setQuery(const OAISearchOrdersQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISearchOrdersRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAISearchOrdersRequest::is_query_Valid() const{
    return m_query_isValid;
}

bool OAISearchOrdersRequest::isReturnEntries() const {
    return m_return_entries;
}
void OAISearchOrdersRequest::setReturnEntries(const bool &return_entries) {
    m_return_entries = return_entries;
    m_return_entries_isSet = true;
}

bool OAISearchOrdersRequest::is_return_entries_Set() const{
    return m_return_entries_isSet;
}

bool OAISearchOrdersRequest::is_return_entries_Valid() const{
    return m_return_entries_isValid;
}

bool OAISearchOrdersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_entries_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchOrdersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
