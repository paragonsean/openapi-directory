/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryChange::OAIInventoryChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryChange::OAIInventoryChange() {
    this->initializeModel();
}

OAIInventoryChange::~OAIInventoryChange() {}

void OAIInventoryChange::initializeModel() {

    m_adjustment_isSet = false;
    m_adjustment_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_measurement_unit_id_isSet = false;
    m_measurement_unit_id_isValid = false;

    m_physical_count_isSet = false;
    m_physical_count_isValid = false;

    m_transfer_isSet = false;
    m_transfer_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIInventoryChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryChange::fromJsonObject(QJsonObject json) {

    m_adjustment_isValid = ::OpenAPI::fromJsonValue(m_adjustment, json[QString("adjustment")]);
    m_adjustment_isSet = !json[QString("adjustment")].isNull() && m_adjustment_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurement_unit")]);
    m_measurement_unit_isSet = !json[QString("measurement_unit")].isNull() && m_measurement_unit_isValid;

    m_measurement_unit_id_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit_id, json[QString("measurement_unit_id")]);
    m_measurement_unit_id_isSet = !json[QString("measurement_unit_id")].isNull() && m_measurement_unit_id_isValid;

    m_physical_count_isValid = ::OpenAPI::fromJsonValue(m_physical_count, json[QString("physical_count")]);
    m_physical_count_isSet = !json[QString("physical_count")].isNull() && m_physical_count_isValid;

    m_transfer_isValid = ::OpenAPI::fromJsonValue(m_transfer, json[QString("transfer")]);
    m_transfer_isSet = !json[QString("transfer")].isNull() && m_transfer_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIInventoryChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryChange::asJsonObject() const {
    QJsonObject obj;
    if (m_adjustment.isSet()) {
        obj.insert(QString("adjustment"), ::OpenAPI::toJsonValue(m_adjustment));
    }
    if (m_measurement_unit.isSet()) {
        obj.insert(QString("measurement_unit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_measurement_unit_id_isSet) {
        obj.insert(QString("measurement_unit_id"), ::OpenAPI::toJsonValue(m_measurement_unit_id));
    }
    if (m_physical_count.isSet()) {
        obj.insert(QString("physical_count"), ::OpenAPI::toJsonValue(m_physical_count));
    }
    if (m_transfer.isSet()) {
        obj.insert(QString("transfer"), ::OpenAPI::toJsonValue(m_transfer));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIInventoryAdjustment OAIInventoryChange::getAdjustment() const {
    return m_adjustment;
}
void OAIInventoryChange::setAdjustment(const OAIInventoryAdjustment &adjustment) {
    m_adjustment = adjustment;
    m_adjustment_isSet = true;
}

bool OAIInventoryChange::is_adjustment_Set() const{
    return m_adjustment_isSet;
}

bool OAIInventoryChange::is_adjustment_Valid() const{
    return m_adjustment_isValid;
}

OAICatalogMeasurementUnit OAIInventoryChange::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAIInventoryChange::setMeasurementUnit(const OAICatalogMeasurementUnit &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAIInventoryChange::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAIInventoryChange::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

QString OAIInventoryChange::getMeasurementUnitId() const {
    return m_measurement_unit_id;
}
void OAIInventoryChange::setMeasurementUnitId(const QString &measurement_unit_id) {
    m_measurement_unit_id = measurement_unit_id;
    m_measurement_unit_id_isSet = true;
}

bool OAIInventoryChange::is_measurement_unit_id_Set() const{
    return m_measurement_unit_id_isSet;
}

bool OAIInventoryChange::is_measurement_unit_id_Valid() const{
    return m_measurement_unit_id_isValid;
}

OAIInventoryPhysicalCount OAIInventoryChange::getPhysicalCount() const {
    return m_physical_count;
}
void OAIInventoryChange::setPhysicalCount(const OAIInventoryPhysicalCount &physical_count) {
    m_physical_count = physical_count;
    m_physical_count_isSet = true;
}

bool OAIInventoryChange::is_physical_count_Set() const{
    return m_physical_count_isSet;
}

bool OAIInventoryChange::is_physical_count_Valid() const{
    return m_physical_count_isValid;
}

OAIInventoryTransfer OAIInventoryChange::getTransfer() const {
    return m_transfer;
}
void OAIInventoryChange::setTransfer(const OAIInventoryTransfer &transfer) {
    m_transfer = transfer;
    m_transfer_isSet = true;
}

bool OAIInventoryChange::is_transfer_Set() const{
    return m_transfer_isSet;
}

bool OAIInventoryChange::is_transfer_Valid() const{
    return m_transfer_isValid;
}

QString OAIInventoryChange::getType() const {
    return m_type;
}
void OAIInventoryChange::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInventoryChange::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInventoryChange::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIInventoryChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjustment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
