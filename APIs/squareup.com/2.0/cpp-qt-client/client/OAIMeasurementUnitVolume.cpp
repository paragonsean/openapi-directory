/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeasurementUnitVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeasurementUnitVolume::OAIMeasurementUnitVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeasurementUnitVolume::OAIMeasurementUnitVolume() {
    this->initializeModel();
}

OAIMeasurementUnitVolume::~OAIMeasurementUnitVolume() {}

void OAIMeasurementUnitVolume::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMeasurementUnitVolume::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMeasurementUnitVolume::fromJson(QString jsonString) {
    
    if ( jsonString.compare("GENERIC_FLUID_OUNCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitVolume::GENERIC_FLUID_OUNCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GENERIC_SHOT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitVolume::GENERIC_SHOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GENERIC_CUP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitVolume::GENERIC_CUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GENERIC_PINT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitVolume::GENERIC_PINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GENERIC_QUART", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitVolume::GENERIC_QUART;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GENERIC_GALLON", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitVolume::GENERIC_GALLON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPERIAL_CUBIC_INCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitVolume::IMPERIAL_CUBIC_INCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPERIAL_CUBIC_FOOT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitVolume::IMPERIAL_CUBIC_FOOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPERIAL_CUBIC_YARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitVolume::IMPERIAL_CUBIC_YARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METRIC_MILLILITER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitVolume::METRIC_MILLILITER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METRIC_LITER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMeasurementUnitVolume::METRIC_LITER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMeasurementUnitVolume::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMeasurementUnitVolume::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMeasurementUnitVolume::GENERIC_FLUID_OUNCE:
            val = "GENERIC_FLUID_OUNCE";
            break;
        case eOAIMeasurementUnitVolume::GENERIC_SHOT:
            val = "GENERIC_SHOT";
            break;
        case eOAIMeasurementUnitVolume::GENERIC_CUP:
            val = "GENERIC_CUP";
            break;
        case eOAIMeasurementUnitVolume::GENERIC_PINT:
            val = "GENERIC_PINT";
            break;
        case eOAIMeasurementUnitVolume::GENERIC_QUART:
            val = "GENERIC_QUART";
            break;
        case eOAIMeasurementUnitVolume::GENERIC_GALLON:
            val = "GENERIC_GALLON";
            break;
        case eOAIMeasurementUnitVolume::IMPERIAL_CUBIC_INCH:
            val = "IMPERIAL_CUBIC_INCH";
            break;
        case eOAIMeasurementUnitVolume::IMPERIAL_CUBIC_FOOT:
            val = "IMPERIAL_CUBIC_FOOT";
            break;
        case eOAIMeasurementUnitVolume::IMPERIAL_CUBIC_YARD:
            val = "IMPERIAL_CUBIC_YARD";
            break;
        case eOAIMeasurementUnitVolume::METRIC_MILLILITER:
            val = "METRIC_MILLILITER";
            break;
        case eOAIMeasurementUnitVolume::METRIC_LITER:
            val = "METRIC_LITER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMeasurementUnitVolume::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMeasurementUnitVolume::eOAIMeasurementUnitVolume OAIMeasurementUnitVolume::getValue() const {
    return m_value;
}

void OAIMeasurementUnitVolume::setValue(const OAIMeasurementUnitVolume::eOAIMeasurementUnitVolume& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMeasurementUnitVolume::isSet() const {
    
    return m_value_isSet;
}

bool OAIMeasurementUnitVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
