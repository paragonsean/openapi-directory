/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShift.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShift::OAIShift(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShift::OAIShift() {
    this->initializeModel();
}

OAIShift::~OAIShift() {}

void OAIShift::initializeModel() {

    m_breaks_isSet = false;
    m_breaks_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_employee_id_isSet = false;
    m_employee_id_isValid = false;

    m_end_at_isSet = false;
    m_end_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_start_at_isSet = false;
    m_start_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_team_member_id_isSet = false;
    m_team_member_id_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_wage_isSet = false;
    m_wage_isValid = false;
}

void OAIShift::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShift::fromJsonObject(QJsonObject json) {

    m_breaks_isValid = ::OpenAPI::fromJsonValue(m_breaks, json[QString("breaks")]);
    m_breaks_isSet = !json[QString("breaks")].isNull() && m_breaks_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_employee_id_isValid = ::OpenAPI::fromJsonValue(m_employee_id, json[QString("employee_id")]);
    m_employee_id_isSet = !json[QString("employee_id")].isNull() && m_employee_id_isValid;

    m_end_at_isValid = ::OpenAPI::fromJsonValue(m_end_at, json[QString("end_at")]);
    m_end_at_isSet = !json[QString("end_at")].isNull() && m_end_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_start_at_isValid = ::OpenAPI::fromJsonValue(m_start_at, json[QString("start_at")]);
    m_start_at_isSet = !json[QString("start_at")].isNull() && m_start_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_team_member_id_isValid = ::OpenAPI::fromJsonValue(m_team_member_id, json[QString("team_member_id")]);
    m_team_member_id_isSet = !json[QString("team_member_id")].isNull() && m_team_member_id_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_wage_isValid = ::OpenAPI::fromJsonValue(m_wage, json[QString("wage")]);
    m_wage_isSet = !json[QString("wage")].isNull() && m_wage_isValid;
}

QString OAIShift::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShift::asJsonObject() const {
    QJsonObject obj;
    if (m_breaks.size() > 0) {
        obj.insert(QString("breaks"), ::OpenAPI::toJsonValue(m_breaks));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_employee_id_isSet) {
        obj.insert(QString("employee_id"), ::OpenAPI::toJsonValue(m_employee_id));
    }
    if (m_end_at_isSet) {
        obj.insert(QString("end_at"), ::OpenAPI::toJsonValue(m_end_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_start_at_isSet) {
        obj.insert(QString("start_at"), ::OpenAPI::toJsonValue(m_start_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_team_member_id_isSet) {
        obj.insert(QString("team_member_id"), ::OpenAPI::toJsonValue(m_team_member_id));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_wage.isSet()) {
        obj.insert(QString("wage"), ::OpenAPI::toJsonValue(m_wage));
    }
    return obj;
}

QList<OAIBreak> OAIShift::getBreaks() const {
    return m_breaks;
}
void OAIShift::setBreaks(const QList<OAIBreak> &breaks) {
    m_breaks = breaks;
    m_breaks_isSet = true;
}

bool OAIShift::is_breaks_Set() const{
    return m_breaks_isSet;
}

bool OAIShift::is_breaks_Valid() const{
    return m_breaks_isValid;
}

QString OAIShift::getCreatedAt() const {
    return m_created_at;
}
void OAIShift::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIShift::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIShift::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIShift::getEmployeeId() const {
    return m_employee_id;
}
void OAIShift::setEmployeeId(const QString &employee_id) {
    m_employee_id = employee_id;
    m_employee_id_isSet = true;
}

bool OAIShift::is_employee_id_Set() const{
    return m_employee_id_isSet;
}

bool OAIShift::is_employee_id_Valid() const{
    return m_employee_id_isValid;
}

QString OAIShift::getEndAt() const {
    return m_end_at;
}
void OAIShift::setEndAt(const QString &end_at) {
    m_end_at = end_at;
    m_end_at_isSet = true;
}

bool OAIShift::is_end_at_Set() const{
    return m_end_at_isSet;
}

bool OAIShift::is_end_at_Valid() const{
    return m_end_at_isValid;
}

QString OAIShift::getId() const {
    return m_id;
}
void OAIShift::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShift::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShift::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIShift::getLocationId() const {
    return m_location_id;
}
void OAIShift::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIShift::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIShift::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIShift::getStartAt() const {
    return m_start_at;
}
void OAIShift::setStartAt(const QString &start_at) {
    m_start_at = start_at;
    m_start_at_isSet = true;
}

bool OAIShift::is_start_at_Set() const{
    return m_start_at_isSet;
}

bool OAIShift::is_start_at_Valid() const{
    return m_start_at_isValid;
}

QString OAIShift::getStatus() const {
    return m_status;
}
void OAIShift::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIShift::is_status_Set() const{
    return m_status_isSet;
}

bool OAIShift::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIShift::getTeamMemberId() const {
    return m_team_member_id;
}
void OAIShift::setTeamMemberId(const QString &team_member_id) {
    m_team_member_id = team_member_id;
    m_team_member_id_isSet = true;
}

bool OAIShift::is_team_member_id_Set() const{
    return m_team_member_id_isSet;
}

bool OAIShift::is_team_member_id_Valid() const{
    return m_team_member_id_isValid;
}

QString OAIShift::getTimezone() const {
    return m_timezone;
}
void OAIShift::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIShift::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIShift::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIShift::getUpdatedAt() const {
    return m_updated_at;
}
void OAIShift::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIShift::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIShift::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

qint32 OAIShift::getVersion() const {
    return m_version;
}
void OAIShift::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIShift::is_version_Set() const{
    return m_version_isSet;
}

bool OAIShift::is_version_Valid() const{
    return m_version_isValid;
}

OAIShiftWage OAIShift::getWage() const {
    return m_wage;
}
void OAIShift::setWage(const OAIShiftWage &wage) {
    m_wage = wage;
    m_wage_isSet = true;
}

bool OAIShift::is_wage_Set() const{
    return m_wage_isSet;
}

bool OAIShift::is_wage_Valid() const{
    return m_wage_isValid;
}

bool OAIShift::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_breaks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShift::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_at_isValid && true;
}

} // namespace OpenAPI
