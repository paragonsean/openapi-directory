/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderCreated.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderCreated::OAIOrderCreated(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderCreated::OAIOrderCreated() {
    this->initializeModel();
}

OAIOrderCreated::~OAIOrderCreated() {}

void OAIOrderCreated::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIOrderCreated::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderCreated::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIOrderCreated::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderCreated::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIOrderCreated::getCreatedAt() const {
    return m_created_at;
}
void OAIOrderCreated::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIOrderCreated::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIOrderCreated::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIOrderCreated::getLocationId() const {
    return m_location_id;
}
void OAIOrderCreated::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIOrderCreated::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIOrderCreated::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIOrderCreated::getOrderId() const {
    return m_order_id;
}
void OAIOrderCreated::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIOrderCreated::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIOrderCreated::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIOrderCreated::getState() const {
    return m_state;
}
void OAIOrderCreated::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIOrderCreated::is_state_Set() const{
    return m_state_isSet;
}

bool OAIOrderCreated::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIOrderCreated::getVersion() const {
    return m_version;
}
void OAIOrderCreated::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIOrderCreated::is_version_Set() const{
    return m_version_isSet;
}

bool OAIOrderCreated::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIOrderCreated::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderCreated::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
