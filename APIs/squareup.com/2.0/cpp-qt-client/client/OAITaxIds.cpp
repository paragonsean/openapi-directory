/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxIds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxIds::OAITaxIds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxIds::OAITaxIds() {
    this->initializeModel();
}

OAITaxIds::~OAITaxIds() {}

void OAITaxIds::initializeModel() {

    m_eu_vat_isSet = false;
    m_eu_vat_isValid = false;

    m_fr_naf_isSet = false;
    m_fr_naf_isValid = false;

    m_fr_siret_isSet = false;
    m_fr_siret_isValid = false;
}

void OAITaxIds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaxIds::fromJsonObject(QJsonObject json) {

    m_eu_vat_isValid = ::OpenAPI::fromJsonValue(m_eu_vat, json[QString("eu_vat")]);
    m_eu_vat_isSet = !json[QString("eu_vat")].isNull() && m_eu_vat_isValid;

    m_fr_naf_isValid = ::OpenAPI::fromJsonValue(m_fr_naf, json[QString("fr_naf")]);
    m_fr_naf_isSet = !json[QString("fr_naf")].isNull() && m_fr_naf_isValid;

    m_fr_siret_isValid = ::OpenAPI::fromJsonValue(m_fr_siret, json[QString("fr_siret")]);
    m_fr_siret_isSet = !json[QString("fr_siret")].isNull() && m_fr_siret_isValid;
}

QString OAITaxIds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaxIds::asJsonObject() const {
    QJsonObject obj;
    if (m_eu_vat_isSet) {
        obj.insert(QString("eu_vat"), ::OpenAPI::toJsonValue(m_eu_vat));
    }
    if (m_fr_naf_isSet) {
        obj.insert(QString("fr_naf"), ::OpenAPI::toJsonValue(m_fr_naf));
    }
    if (m_fr_siret_isSet) {
        obj.insert(QString("fr_siret"), ::OpenAPI::toJsonValue(m_fr_siret));
    }
    return obj;
}

QString OAITaxIds::getEuVat() const {
    return m_eu_vat;
}
void OAITaxIds::setEuVat(const QString &eu_vat) {
    m_eu_vat = eu_vat;
    m_eu_vat_isSet = true;
}

bool OAITaxIds::is_eu_vat_Set() const{
    return m_eu_vat_isSet;
}

bool OAITaxIds::is_eu_vat_Valid() const{
    return m_eu_vat_isValid;
}

QString OAITaxIds::getFrNaf() const {
    return m_fr_naf;
}
void OAITaxIds::setFrNaf(const QString &fr_naf) {
    m_fr_naf = fr_naf;
    m_fr_naf_isSet = true;
}

bool OAITaxIds::is_fr_naf_Set() const{
    return m_fr_naf_isSet;
}

bool OAITaxIds::is_fr_naf_Valid() const{
    return m_fr_naf_isValid;
}

QString OAITaxIds::getFrSiret() const {
    return m_fr_siret;
}
void OAITaxIds::setFrSiret(const QString &fr_siret) {
    m_fr_siret = fr_siret;
    m_fr_siret_isSet = true;
}

bool OAITaxIds::is_fr_siret_Set() const{
    return m_fr_siret_isSet;
}

bool OAITaxIds::is_fr_siret_Valid() const{
    return m_fr_siret_isValid;
}

bool OAITaxIds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eu_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fr_naf_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fr_siret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaxIds::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
