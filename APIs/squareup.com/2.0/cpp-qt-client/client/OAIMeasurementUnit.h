/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMeasurementUnit.h
 *
 * Represents a unit of measurement to use with a quantity, such as ounces or inches. Exactly one of the following fields are required: &#x60;custom_unit&#x60;, &#x60;area_unit&#x60;, &#x60;length_unit&#x60;, &#x60;volume_unit&#x60;, and &#x60;weight_unit&#x60;.
 */

#ifndef OAIMeasurementUnit_H
#define OAIMeasurementUnit_H

#include <QJsonObject>

#include "OAIMeasurementUnitCustom.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMeasurementUnitCustom;

class OAIMeasurementUnit : public OAIObject {
public:
    OAIMeasurementUnit();
    OAIMeasurementUnit(QString json);
    ~OAIMeasurementUnit() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAreaUnit() const;
    void setAreaUnit(const QString &area_unit);
    bool is_area_unit_Set() const;
    bool is_area_unit_Valid() const;

    OAIMeasurementUnitCustom getCustomUnit() const;
    void setCustomUnit(const OAIMeasurementUnitCustom &custom_unit);
    bool is_custom_unit_Set() const;
    bool is_custom_unit_Valid() const;

    QString getGenericUnit() const;
    void setGenericUnit(const QString &generic_unit);
    bool is_generic_unit_Set() const;
    bool is_generic_unit_Valid() const;

    QString getLengthUnit() const;
    void setLengthUnit(const QString &length_unit);
    bool is_length_unit_Set() const;
    bool is_length_unit_Valid() const;

    QString getTimeUnit() const;
    void setTimeUnit(const QString &time_unit);
    bool is_time_unit_Set() const;
    bool is_time_unit_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getVolumeUnit() const;
    void setVolumeUnit(const QString &volume_unit);
    bool is_volume_unit_Set() const;
    bool is_volume_unit_Valid() const;

    QString getWeightUnit() const;
    void setWeightUnit(const QString &weight_unit);
    bool is_weight_unit_Set() const;
    bool is_weight_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_area_unit;
    bool m_area_unit_isSet;
    bool m_area_unit_isValid;

    OAIMeasurementUnitCustom m_custom_unit;
    bool m_custom_unit_isSet;
    bool m_custom_unit_isValid;

    QString m_generic_unit;
    bool m_generic_unit_isSet;
    bool m_generic_unit_isValid;

    QString m_length_unit;
    bool m_length_unit_isSet;
    bool m_length_unit_isValid;

    QString m_time_unit;
    bool m_time_unit_isSet;
    bool m_time_unit_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_volume_unit;
    bool m_volume_unit_isSet;
    bool m_volume_unit_isValid;

    QString m_weight_unit;
    bool m_weight_unit_isSet;
    bool m_weight_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMeasurementUnit)

#endif // OAIMeasurementUnit_H
