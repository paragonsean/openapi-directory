/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceCheckoutOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceCheckoutOptions::OAIDeviceCheckoutOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceCheckoutOptions::OAIDeviceCheckoutOptions() {
    this->initializeModel();
}

OAIDeviceCheckoutOptions::~OAIDeviceCheckoutOptions() {}

void OAIDeviceCheckoutOptions::initializeModel() {

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_skip_receipt_screen_isSet = false;
    m_skip_receipt_screen_isValid = false;

    m_tip_settings_isSet = false;
    m_tip_settings_isValid = false;
}

void OAIDeviceCheckoutOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceCheckoutOptions::fromJsonObject(QJsonObject json) {

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("device_id")]);
    m_device_id_isSet = !json[QString("device_id")].isNull() && m_device_id_isValid;

    m_skip_receipt_screen_isValid = ::OpenAPI::fromJsonValue(m_skip_receipt_screen, json[QString("skip_receipt_screen")]);
    m_skip_receipt_screen_isSet = !json[QString("skip_receipt_screen")].isNull() && m_skip_receipt_screen_isValid;

    m_tip_settings_isValid = ::OpenAPI::fromJsonValue(m_tip_settings, json[QString("tip_settings")]);
    m_tip_settings_isSet = !json[QString("tip_settings")].isNull() && m_tip_settings_isValid;
}

QString OAIDeviceCheckoutOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceCheckoutOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_isSet) {
        obj.insert(QString("device_id"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_skip_receipt_screen_isSet) {
        obj.insert(QString("skip_receipt_screen"), ::OpenAPI::toJsonValue(m_skip_receipt_screen));
    }
    if (m_tip_settings.isSet()) {
        obj.insert(QString("tip_settings"), ::OpenAPI::toJsonValue(m_tip_settings));
    }
    return obj;
}

QString OAIDeviceCheckoutOptions::getDeviceId() const {
    return m_device_id;
}
void OAIDeviceCheckoutOptions::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIDeviceCheckoutOptions::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIDeviceCheckoutOptions::is_device_id_Valid() const{
    return m_device_id_isValid;
}

bool OAIDeviceCheckoutOptions::isSkipReceiptScreen() const {
    return m_skip_receipt_screen;
}
void OAIDeviceCheckoutOptions::setSkipReceiptScreen(const bool &skip_receipt_screen) {
    m_skip_receipt_screen = skip_receipt_screen;
    m_skip_receipt_screen_isSet = true;
}

bool OAIDeviceCheckoutOptions::is_skip_receipt_screen_Set() const{
    return m_skip_receipt_screen_isSet;
}

bool OAIDeviceCheckoutOptions::is_skip_receipt_screen_Valid() const{
    return m_skip_receipt_screen_isValid;
}

OAITipSettings OAIDeviceCheckoutOptions::getTipSettings() const {
    return m_tip_settings;
}
void OAIDeviceCheckoutOptions::setTipSettings(const OAITipSettings &tip_settings) {
    m_tip_settings = tip_settings;
    m_tip_settings_isSet = true;
}

bool OAIDeviceCheckoutOptions::is_tip_settings_Set() const{
    return m_tip_settings_isSet;
}

bool OAIDeviceCheckoutOptions::is_tip_settings_Valid() const{
    return m_tip_settings_isValid;
}

bool OAIDeviceCheckoutOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_receipt_screen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tip_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceCheckoutOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_id_isValid && true;
}

} // namespace OpenAPI
