/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryState::OAIInventoryState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryState::OAIInventoryState() {
    this->initializeModel();
}

OAIInventoryState::~OAIInventoryState() {}

void OAIInventoryState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIInventoryState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIInventoryState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CUSTOM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInventoryState::CUSTOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN_STOCK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInventoryState::IN_STOCK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SOLD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInventoryState::SOLD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RETURNED_BY_CUSTOMER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInventoryState::RETURNED_BY_CUSTOMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESERVED_FOR_SALE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInventoryState::RESERVED_FOR_SALE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SOLD_ONLINE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInventoryState::SOLD_ONLINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ORDERED_FROM_VENDOR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInventoryState::ORDERED_FROM_VENDOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RECEIVED_FROM_VENDOR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInventoryState::RECEIVED_FROM_VENDOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN_TRANSIT_TO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInventoryState::IN_TRANSIT_TO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInventoryState::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WASTE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInventoryState::WASTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNLINKED_RETURN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInventoryState::UNLINKED_RETURN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPOSED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInventoryState::COMPOSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DECOMPOSED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInventoryState::DECOMPOSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUPPORTED_BY_NEWER_VERSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInventoryState::SUPPORTED_BY_NEWER_VERSION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIInventoryState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIInventoryState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIInventoryState::CUSTOM:
            val = "CUSTOM";
            break;
        case eOAIInventoryState::IN_STOCK:
            val = "IN_STOCK";
            break;
        case eOAIInventoryState::SOLD:
            val = "SOLD";
            break;
        case eOAIInventoryState::RETURNED_BY_CUSTOMER:
            val = "RETURNED_BY_CUSTOMER";
            break;
        case eOAIInventoryState::RESERVED_FOR_SALE:
            val = "RESERVED_FOR_SALE";
            break;
        case eOAIInventoryState::SOLD_ONLINE:
            val = "SOLD_ONLINE";
            break;
        case eOAIInventoryState::ORDERED_FROM_VENDOR:
            val = "ORDERED_FROM_VENDOR";
            break;
        case eOAIInventoryState::RECEIVED_FROM_VENDOR:
            val = "RECEIVED_FROM_VENDOR";
            break;
        case eOAIInventoryState::IN_TRANSIT_TO:
            val = "IN_TRANSIT_TO";
            break;
        case eOAIInventoryState::NONE:
            val = "NONE";
            break;
        case eOAIInventoryState::WASTE:
            val = "WASTE";
            break;
        case eOAIInventoryState::UNLINKED_RETURN:
            val = "UNLINKED_RETURN";
            break;
        case eOAIInventoryState::COMPOSED:
            val = "COMPOSED";
            break;
        case eOAIInventoryState::DECOMPOSED:
            val = "DECOMPOSED";
            break;
        case eOAIInventoryState::SUPPORTED_BY_NEWER_VERSION:
            val = "SUPPORTED_BY_NEWER_VERSION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIInventoryState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIInventoryState::eOAIInventoryState OAIInventoryState::getValue() const {
    return m_value;
}

void OAIInventoryState::setValue(const OAIInventoryState::eOAIInventoryState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIInventoryState::isSet() const {
    
    return m_value_isSet;
}

bool OAIInventoryState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
