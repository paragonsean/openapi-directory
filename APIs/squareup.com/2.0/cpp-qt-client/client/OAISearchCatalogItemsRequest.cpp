/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchCatalogItemsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchCatalogItemsRequest::OAISearchCatalogItemsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchCatalogItemsRequest::OAISearchCatalogItemsRequest() {
    this->initializeModel();
}

OAISearchCatalogItemsRequest::~OAISearchCatalogItemsRequest() {}

void OAISearchCatalogItemsRequest::initializeModel() {

    m_category_ids_isSet = false;
    m_category_ids_isValid = false;

    m_cursor_isSet = false;
    m_cursor_isValid = false;

    m_custom_attribute_filters_isSet = false;
    m_custom_attribute_filters_isValid = false;

    m_enabled_location_ids_isSet = false;
    m_enabled_location_ids_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_product_types_isSet = false;
    m_product_types_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_stock_levels_isSet = false;
    m_stock_levels_isValid = false;

    m_text_filter_isSet = false;
    m_text_filter_isValid = false;
}

void OAISearchCatalogItemsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchCatalogItemsRequest::fromJsonObject(QJsonObject json) {

    m_category_ids_isValid = ::OpenAPI::fromJsonValue(m_category_ids, json[QString("category_ids")]);
    m_category_ids_isSet = !json[QString("category_ids")].isNull() && m_category_ids_isValid;

    m_cursor_isValid = ::OpenAPI::fromJsonValue(m_cursor, json[QString("cursor")]);
    m_cursor_isSet = !json[QString("cursor")].isNull() && m_cursor_isValid;

    m_custom_attribute_filters_isValid = ::OpenAPI::fromJsonValue(m_custom_attribute_filters, json[QString("custom_attribute_filters")]);
    m_custom_attribute_filters_isSet = !json[QString("custom_attribute_filters")].isNull() && m_custom_attribute_filters_isValid;

    m_enabled_location_ids_isValid = ::OpenAPI::fromJsonValue(m_enabled_location_ids, json[QString("enabled_location_ids")]);
    m_enabled_location_ids_isSet = !json[QString("enabled_location_ids")].isNull() && m_enabled_location_ids_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_product_types_isValid = ::OpenAPI::fromJsonValue(m_product_types, json[QString("product_types")]);
    m_product_types_isSet = !json[QString("product_types")].isNull() && m_product_types_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;

    m_stock_levels_isValid = ::OpenAPI::fromJsonValue(m_stock_levels, json[QString("stock_levels")]);
    m_stock_levels_isSet = !json[QString("stock_levels")].isNull() && m_stock_levels_isValid;

    m_text_filter_isValid = ::OpenAPI::fromJsonValue(m_text_filter, json[QString("text_filter")]);
    m_text_filter_isSet = !json[QString("text_filter")].isNull() && m_text_filter_isValid;
}

QString OAISearchCatalogItemsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchCatalogItemsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_category_ids.size() > 0) {
        obj.insert(QString("category_ids"), ::OpenAPI::toJsonValue(m_category_ids));
    }
    if (m_cursor_isSet) {
        obj.insert(QString("cursor"), ::OpenAPI::toJsonValue(m_cursor));
    }
    if (m_custom_attribute_filters.size() > 0) {
        obj.insert(QString("custom_attribute_filters"), ::OpenAPI::toJsonValue(m_custom_attribute_filters));
    }
    if (m_enabled_location_ids.size() > 0) {
        obj.insert(QString("enabled_location_ids"), ::OpenAPI::toJsonValue(m_enabled_location_ids));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_product_types.size() > 0) {
        obj.insert(QString("product_types"), ::OpenAPI::toJsonValue(m_product_types));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_stock_levels.size() > 0) {
        obj.insert(QString("stock_levels"), ::OpenAPI::toJsonValue(m_stock_levels));
    }
    if (m_text_filter_isSet) {
        obj.insert(QString("text_filter"), ::OpenAPI::toJsonValue(m_text_filter));
    }
    return obj;
}

QList<QString> OAISearchCatalogItemsRequest::getCategoryIds() const {
    return m_category_ids;
}
void OAISearchCatalogItemsRequest::setCategoryIds(const QList<QString> &category_ids) {
    m_category_ids = category_ids;
    m_category_ids_isSet = true;
}

bool OAISearchCatalogItemsRequest::is_category_ids_Set() const{
    return m_category_ids_isSet;
}

bool OAISearchCatalogItemsRequest::is_category_ids_Valid() const{
    return m_category_ids_isValid;
}

QString OAISearchCatalogItemsRequest::getCursor() const {
    return m_cursor;
}
void OAISearchCatalogItemsRequest::setCursor(const QString &cursor) {
    m_cursor = cursor;
    m_cursor_isSet = true;
}

bool OAISearchCatalogItemsRequest::is_cursor_Set() const{
    return m_cursor_isSet;
}

bool OAISearchCatalogItemsRequest::is_cursor_Valid() const{
    return m_cursor_isValid;
}

QList<OAICustomAttributeFilter> OAISearchCatalogItemsRequest::getCustomAttributeFilters() const {
    return m_custom_attribute_filters;
}
void OAISearchCatalogItemsRequest::setCustomAttributeFilters(const QList<OAICustomAttributeFilter> &custom_attribute_filters) {
    m_custom_attribute_filters = custom_attribute_filters;
    m_custom_attribute_filters_isSet = true;
}

bool OAISearchCatalogItemsRequest::is_custom_attribute_filters_Set() const{
    return m_custom_attribute_filters_isSet;
}

bool OAISearchCatalogItemsRequest::is_custom_attribute_filters_Valid() const{
    return m_custom_attribute_filters_isValid;
}

QList<QString> OAISearchCatalogItemsRequest::getEnabledLocationIds() const {
    return m_enabled_location_ids;
}
void OAISearchCatalogItemsRequest::setEnabledLocationIds(const QList<QString> &enabled_location_ids) {
    m_enabled_location_ids = enabled_location_ids;
    m_enabled_location_ids_isSet = true;
}

bool OAISearchCatalogItemsRequest::is_enabled_location_ids_Set() const{
    return m_enabled_location_ids_isSet;
}

bool OAISearchCatalogItemsRequest::is_enabled_location_ids_Valid() const{
    return m_enabled_location_ids_isValid;
}

qint32 OAISearchCatalogItemsRequest::getLimit() const {
    return m_limit;
}
void OAISearchCatalogItemsRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAISearchCatalogItemsRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAISearchCatalogItemsRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

QList<QString> OAISearchCatalogItemsRequest::getProductTypes() const {
    return m_product_types;
}
void OAISearchCatalogItemsRequest::setProductTypes(const QList<QString> &product_types) {
    m_product_types = product_types;
    m_product_types_isSet = true;
}

bool OAISearchCatalogItemsRequest::is_product_types_Set() const{
    return m_product_types_isSet;
}

bool OAISearchCatalogItemsRequest::is_product_types_Valid() const{
    return m_product_types_isValid;
}

QString OAISearchCatalogItemsRequest::getSortOrder() const {
    return m_sort_order;
}
void OAISearchCatalogItemsRequest::setSortOrder(const QString &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAISearchCatalogItemsRequest::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAISearchCatalogItemsRequest::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QList<QString> OAISearchCatalogItemsRequest::getStockLevels() const {
    return m_stock_levels;
}
void OAISearchCatalogItemsRequest::setStockLevels(const QList<QString> &stock_levels) {
    m_stock_levels = stock_levels;
    m_stock_levels_isSet = true;
}

bool OAISearchCatalogItemsRequest::is_stock_levels_Set() const{
    return m_stock_levels_isSet;
}

bool OAISearchCatalogItemsRequest::is_stock_levels_Valid() const{
    return m_stock_levels_isValid;
}

QString OAISearchCatalogItemsRequest::getTextFilter() const {
    return m_text_filter;
}
void OAISearchCatalogItemsRequest::setTextFilter(const QString &text_filter) {
    m_text_filter = text_filter;
    m_text_filter_isSet = true;
}

bool OAISearchCatalogItemsRequest::is_text_filter_Set() const{
    return m_text_filter_isSet;
}

bool OAISearchCatalogItemsRequest::is_text_filter_Valid() const{
    return m_text_filter_isValid;
}

bool OAISearchCatalogItemsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attribute_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_location_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_filter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchCatalogItemsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
