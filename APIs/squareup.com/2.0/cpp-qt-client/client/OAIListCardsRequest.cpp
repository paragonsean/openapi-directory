/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCardsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCardsRequest::OAIListCardsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCardsRequest::OAIListCardsRequest() {
    this->initializeModel();
}

OAIListCardsRequest::~OAIListCardsRequest() {}

void OAIListCardsRequest::initializeModel() {

    m_cursor_isSet = false;
    m_cursor_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_include_disabled_isSet = false;
    m_include_disabled_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIListCardsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCardsRequest::fromJsonObject(QJsonObject json) {

    m_cursor_isValid = ::OpenAPI::fromJsonValue(m_cursor, json[QString("cursor")]);
    m_cursor_isSet = !json[QString("cursor")].isNull() && m_cursor_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_include_disabled_isValid = ::OpenAPI::fromJsonValue(m_include_disabled, json[QString("include_disabled")]);
    m_include_disabled_isSet = !json[QString("include_disabled")].isNull() && m_include_disabled_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("reference_id")]);
    m_reference_id_isSet = !json[QString("reference_id")].isNull() && m_reference_id_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;
}

QString OAIListCardsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCardsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cursor_isSet) {
        obj.insert(QString("cursor"), ::OpenAPI::toJsonValue(m_cursor));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_include_disabled_isSet) {
        obj.insert(QString("include_disabled"), ::OpenAPI::toJsonValue(m_include_disabled));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("reference_id"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

QString OAIListCardsRequest::getCursor() const {
    return m_cursor;
}
void OAIListCardsRequest::setCursor(const QString &cursor) {
    m_cursor = cursor;
    m_cursor_isSet = true;
}

bool OAIListCardsRequest::is_cursor_Set() const{
    return m_cursor_isSet;
}

bool OAIListCardsRequest::is_cursor_Valid() const{
    return m_cursor_isValid;
}

QString OAIListCardsRequest::getCustomerId() const {
    return m_customer_id;
}
void OAIListCardsRequest::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIListCardsRequest::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIListCardsRequest::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

bool OAIListCardsRequest::isIncludeDisabled() const {
    return m_include_disabled;
}
void OAIListCardsRequest::setIncludeDisabled(const bool &include_disabled) {
    m_include_disabled = include_disabled;
    m_include_disabled_isSet = true;
}

bool OAIListCardsRequest::is_include_disabled_Set() const{
    return m_include_disabled_isSet;
}

bool OAIListCardsRequest::is_include_disabled_Valid() const{
    return m_include_disabled_isValid;
}

QString OAIListCardsRequest::getReferenceId() const {
    return m_reference_id;
}
void OAIListCardsRequest::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIListCardsRequest::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIListCardsRequest::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QString OAIListCardsRequest::getSortOrder() const {
    return m_sort_order;
}
void OAIListCardsRequest::setSortOrder(const QString &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListCardsRequest::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListCardsRequest::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIListCardsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCardsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
