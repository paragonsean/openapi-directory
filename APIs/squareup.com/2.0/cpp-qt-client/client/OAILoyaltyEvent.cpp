/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyEvent::OAILoyaltyEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyEvent::OAILoyaltyEvent() {
    this->initializeModel();
}

OAILoyaltyEvent::~OAILoyaltyEvent() {}

void OAILoyaltyEvent::initializeModel() {

    m_accumulate_points_isSet = false;
    m_accumulate_points_isValid = false;

    m_adjust_points_isSet = false;
    m_adjust_points_isValid = false;

    m_create_reward_isSet = false;
    m_create_reward_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_delete_reward_isSet = false;
    m_delete_reward_isValid = false;

    m_expire_points_isSet = false;
    m_expire_points_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_loyalty_account_id_isSet = false;
    m_loyalty_account_id_isValid = false;

    m_other_event_isSet = false;
    m_other_event_isValid = false;

    m_redeem_reward_isSet = false;
    m_redeem_reward_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILoyaltyEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyEvent::fromJsonObject(QJsonObject json) {

    m_accumulate_points_isValid = ::OpenAPI::fromJsonValue(m_accumulate_points, json[QString("accumulate_points")]);
    m_accumulate_points_isSet = !json[QString("accumulate_points")].isNull() && m_accumulate_points_isValid;

    m_adjust_points_isValid = ::OpenAPI::fromJsonValue(m_adjust_points, json[QString("adjust_points")]);
    m_adjust_points_isSet = !json[QString("adjust_points")].isNull() && m_adjust_points_isValid;

    m_create_reward_isValid = ::OpenAPI::fromJsonValue(m_create_reward, json[QString("create_reward")]);
    m_create_reward_isSet = !json[QString("create_reward")].isNull() && m_create_reward_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_delete_reward_isValid = ::OpenAPI::fromJsonValue(m_delete_reward, json[QString("delete_reward")]);
    m_delete_reward_isSet = !json[QString("delete_reward")].isNull() && m_delete_reward_isValid;

    m_expire_points_isValid = ::OpenAPI::fromJsonValue(m_expire_points, json[QString("expire_points")]);
    m_expire_points_isSet = !json[QString("expire_points")].isNull() && m_expire_points_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_loyalty_account_id_isValid = ::OpenAPI::fromJsonValue(m_loyalty_account_id, json[QString("loyalty_account_id")]);
    m_loyalty_account_id_isSet = !json[QString("loyalty_account_id")].isNull() && m_loyalty_account_id_isValid;

    m_other_event_isValid = ::OpenAPI::fromJsonValue(m_other_event, json[QString("other_event")]);
    m_other_event_isSet = !json[QString("other_event")].isNull() && m_other_event_isValid;

    m_redeem_reward_isValid = ::OpenAPI::fromJsonValue(m_redeem_reward, json[QString("redeem_reward")]);
    m_redeem_reward_isSet = !json[QString("redeem_reward")].isNull() && m_redeem_reward_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAILoyaltyEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_accumulate_points.isSet()) {
        obj.insert(QString("accumulate_points"), ::OpenAPI::toJsonValue(m_accumulate_points));
    }
    if (m_adjust_points.isSet()) {
        obj.insert(QString("adjust_points"), ::OpenAPI::toJsonValue(m_adjust_points));
    }
    if (m_create_reward.isSet()) {
        obj.insert(QString("create_reward"), ::OpenAPI::toJsonValue(m_create_reward));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_delete_reward.isSet()) {
        obj.insert(QString("delete_reward"), ::OpenAPI::toJsonValue(m_delete_reward));
    }
    if (m_expire_points.isSet()) {
        obj.insert(QString("expire_points"), ::OpenAPI::toJsonValue(m_expire_points));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_loyalty_account_id_isSet) {
        obj.insert(QString("loyalty_account_id"), ::OpenAPI::toJsonValue(m_loyalty_account_id));
    }
    if (m_other_event.isSet()) {
        obj.insert(QString("other_event"), ::OpenAPI::toJsonValue(m_other_event));
    }
    if (m_redeem_reward.isSet()) {
        obj.insert(QString("redeem_reward"), ::OpenAPI::toJsonValue(m_redeem_reward));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAILoyaltyEventAccumulatePoints OAILoyaltyEvent::getAccumulatePoints() const {
    return m_accumulate_points;
}
void OAILoyaltyEvent::setAccumulatePoints(const OAILoyaltyEventAccumulatePoints &accumulate_points) {
    m_accumulate_points = accumulate_points;
    m_accumulate_points_isSet = true;
}

bool OAILoyaltyEvent::is_accumulate_points_Set() const{
    return m_accumulate_points_isSet;
}

bool OAILoyaltyEvent::is_accumulate_points_Valid() const{
    return m_accumulate_points_isValid;
}

OAILoyaltyEventAdjustPoints OAILoyaltyEvent::getAdjustPoints() const {
    return m_adjust_points;
}
void OAILoyaltyEvent::setAdjustPoints(const OAILoyaltyEventAdjustPoints &adjust_points) {
    m_adjust_points = adjust_points;
    m_adjust_points_isSet = true;
}

bool OAILoyaltyEvent::is_adjust_points_Set() const{
    return m_adjust_points_isSet;
}

bool OAILoyaltyEvent::is_adjust_points_Valid() const{
    return m_adjust_points_isValid;
}

OAILoyaltyEventCreateReward OAILoyaltyEvent::getCreateReward() const {
    return m_create_reward;
}
void OAILoyaltyEvent::setCreateReward(const OAILoyaltyEventCreateReward &create_reward) {
    m_create_reward = create_reward;
    m_create_reward_isSet = true;
}

bool OAILoyaltyEvent::is_create_reward_Set() const{
    return m_create_reward_isSet;
}

bool OAILoyaltyEvent::is_create_reward_Valid() const{
    return m_create_reward_isValid;
}

QString OAILoyaltyEvent::getCreatedAt() const {
    return m_created_at;
}
void OAILoyaltyEvent::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAILoyaltyEvent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAILoyaltyEvent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAILoyaltyEventDeleteReward OAILoyaltyEvent::getDeleteReward() const {
    return m_delete_reward;
}
void OAILoyaltyEvent::setDeleteReward(const OAILoyaltyEventDeleteReward &delete_reward) {
    m_delete_reward = delete_reward;
    m_delete_reward_isSet = true;
}

bool OAILoyaltyEvent::is_delete_reward_Set() const{
    return m_delete_reward_isSet;
}

bool OAILoyaltyEvent::is_delete_reward_Valid() const{
    return m_delete_reward_isValid;
}

OAILoyaltyEventExpirePoints OAILoyaltyEvent::getExpirePoints() const {
    return m_expire_points;
}
void OAILoyaltyEvent::setExpirePoints(const OAILoyaltyEventExpirePoints &expire_points) {
    m_expire_points = expire_points;
    m_expire_points_isSet = true;
}

bool OAILoyaltyEvent::is_expire_points_Set() const{
    return m_expire_points_isSet;
}

bool OAILoyaltyEvent::is_expire_points_Valid() const{
    return m_expire_points_isValid;
}

QString OAILoyaltyEvent::getId() const {
    return m_id;
}
void OAILoyaltyEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILoyaltyEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAILoyaltyEvent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILoyaltyEvent::getLocationId() const {
    return m_location_id;
}
void OAILoyaltyEvent::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAILoyaltyEvent::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAILoyaltyEvent::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAILoyaltyEvent::getLoyaltyAccountId() const {
    return m_loyalty_account_id;
}
void OAILoyaltyEvent::setLoyaltyAccountId(const QString &loyalty_account_id) {
    m_loyalty_account_id = loyalty_account_id;
    m_loyalty_account_id_isSet = true;
}

bool OAILoyaltyEvent::is_loyalty_account_id_Set() const{
    return m_loyalty_account_id_isSet;
}

bool OAILoyaltyEvent::is_loyalty_account_id_Valid() const{
    return m_loyalty_account_id_isValid;
}

OAILoyaltyEventOther OAILoyaltyEvent::getOtherEvent() const {
    return m_other_event;
}
void OAILoyaltyEvent::setOtherEvent(const OAILoyaltyEventOther &other_event) {
    m_other_event = other_event;
    m_other_event_isSet = true;
}

bool OAILoyaltyEvent::is_other_event_Set() const{
    return m_other_event_isSet;
}

bool OAILoyaltyEvent::is_other_event_Valid() const{
    return m_other_event_isValid;
}

OAILoyaltyEventRedeemReward OAILoyaltyEvent::getRedeemReward() const {
    return m_redeem_reward;
}
void OAILoyaltyEvent::setRedeemReward(const OAILoyaltyEventRedeemReward &redeem_reward) {
    m_redeem_reward = redeem_reward;
    m_redeem_reward_isSet = true;
}

bool OAILoyaltyEvent::is_redeem_reward_Set() const{
    return m_redeem_reward_isSet;
}

bool OAILoyaltyEvent::is_redeem_reward_Valid() const{
    return m_redeem_reward_isValid;
}

QString OAILoyaltyEvent::getSource() const {
    return m_source;
}
void OAILoyaltyEvent::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAILoyaltyEvent::is_source_Set() const{
    return m_source_isSet;
}

bool OAILoyaltyEvent::is_source_Valid() const{
    return m_source_isValid;
}

QString OAILoyaltyEvent::getType() const {
    return m_type;
}
void OAILoyaltyEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILoyaltyEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAILoyaltyEvent::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILoyaltyEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accumulate_points.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_adjust_points.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_reward.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_reward.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_points.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redeem_reward.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_id_isValid && m_loyalty_account_id_isValid && m_source_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
