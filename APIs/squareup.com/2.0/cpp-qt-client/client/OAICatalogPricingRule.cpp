/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogPricingRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogPricingRule::OAICatalogPricingRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogPricingRule::OAICatalogPricingRule() {
    this->initializeModel();
}

OAICatalogPricingRule::~OAICatalogPricingRule() {}

void OAICatalogPricingRule::initializeModel() {

    m_apply_products_id_isSet = false;
    m_apply_products_id_isValid = false;

    m_customer_group_ids_any_isSet = false;
    m_customer_group_ids_any_isValid = false;

    m_discount_id_isSet = false;
    m_discount_id_isValid = false;

    m_exclude_products_id_isSet = false;
    m_exclude_products_id_isValid = false;

    m_exclude_strategy_isSet = false;
    m_exclude_strategy_isValid = false;

    m_match_products_id_isSet = false;
    m_match_products_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_time_period_ids_isSet = false;
    m_time_period_ids_isValid = false;

    m_valid_from_date_isSet = false;
    m_valid_from_date_isValid = false;

    m_valid_from_local_time_isSet = false;
    m_valid_from_local_time_isValid = false;

    m_valid_until_date_isSet = false;
    m_valid_until_date_isValid = false;

    m_valid_until_local_time_isSet = false;
    m_valid_until_local_time_isValid = false;
}

void OAICatalogPricingRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogPricingRule::fromJsonObject(QJsonObject json) {

    m_apply_products_id_isValid = ::OpenAPI::fromJsonValue(m_apply_products_id, json[QString("apply_products_id")]);
    m_apply_products_id_isSet = !json[QString("apply_products_id")].isNull() && m_apply_products_id_isValid;

    m_customer_group_ids_any_isValid = ::OpenAPI::fromJsonValue(m_customer_group_ids_any, json[QString("customer_group_ids_any")]);
    m_customer_group_ids_any_isSet = !json[QString("customer_group_ids_any")].isNull() && m_customer_group_ids_any_isValid;

    m_discount_id_isValid = ::OpenAPI::fromJsonValue(m_discount_id, json[QString("discount_id")]);
    m_discount_id_isSet = !json[QString("discount_id")].isNull() && m_discount_id_isValid;

    m_exclude_products_id_isValid = ::OpenAPI::fromJsonValue(m_exclude_products_id, json[QString("exclude_products_id")]);
    m_exclude_products_id_isSet = !json[QString("exclude_products_id")].isNull() && m_exclude_products_id_isValid;

    m_exclude_strategy_isValid = ::OpenAPI::fromJsonValue(m_exclude_strategy, json[QString("exclude_strategy")]);
    m_exclude_strategy_isSet = !json[QString("exclude_strategy")].isNull() && m_exclude_strategy_isValid;

    m_match_products_id_isValid = ::OpenAPI::fromJsonValue(m_match_products_id, json[QString("match_products_id")]);
    m_match_products_id_isSet = !json[QString("match_products_id")].isNull() && m_match_products_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_time_period_ids_isValid = ::OpenAPI::fromJsonValue(m_time_period_ids, json[QString("time_period_ids")]);
    m_time_period_ids_isSet = !json[QString("time_period_ids")].isNull() && m_time_period_ids_isValid;

    m_valid_from_date_isValid = ::OpenAPI::fromJsonValue(m_valid_from_date, json[QString("valid_from_date")]);
    m_valid_from_date_isSet = !json[QString("valid_from_date")].isNull() && m_valid_from_date_isValid;

    m_valid_from_local_time_isValid = ::OpenAPI::fromJsonValue(m_valid_from_local_time, json[QString("valid_from_local_time")]);
    m_valid_from_local_time_isSet = !json[QString("valid_from_local_time")].isNull() && m_valid_from_local_time_isValid;

    m_valid_until_date_isValid = ::OpenAPI::fromJsonValue(m_valid_until_date, json[QString("valid_until_date")]);
    m_valid_until_date_isSet = !json[QString("valid_until_date")].isNull() && m_valid_until_date_isValid;

    m_valid_until_local_time_isValid = ::OpenAPI::fromJsonValue(m_valid_until_local_time, json[QString("valid_until_local_time")]);
    m_valid_until_local_time_isSet = !json[QString("valid_until_local_time")].isNull() && m_valid_until_local_time_isValid;
}

QString OAICatalogPricingRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogPricingRule::asJsonObject() const {
    QJsonObject obj;
    if (m_apply_products_id_isSet) {
        obj.insert(QString("apply_products_id"), ::OpenAPI::toJsonValue(m_apply_products_id));
    }
    if (m_customer_group_ids_any.size() > 0) {
        obj.insert(QString("customer_group_ids_any"), ::OpenAPI::toJsonValue(m_customer_group_ids_any));
    }
    if (m_discount_id_isSet) {
        obj.insert(QString("discount_id"), ::OpenAPI::toJsonValue(m_discount_id));
    }
    if (m_exclude_products_id_isSet) {
        obj.insert(QString("exclude_products_id"), ::OpenAPI::toJsonValue(m_exclude_products_id));
    }
    if (m_exclude_strategy_isSet) {
        obj.insert(QString("exclude_strategy"), ::OpenAPI::toJsonValue(m_exclude_strategy));
    }
    if (m_match_products_id_isSet) {
        obj.insert(QString("match_products_id"), ::OpenAPI::toJsonValue(m_match_products_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_time_period_ids.size() > 0) {
        obj.insert(QString("time_period_ids"), ::OpenAPI::toJsonValue(m_time_period_ids));
    }
    if (m_valid_from_date_isSet) {
        obj.insert(QString("valid_from_date"), ::OpenAPI::toJsonValue(m_valid_from_date));
    }
    if (m_valid_from_local_time_isSet) {
        obj.insert(QString("valid_from_local_time"), ::OpenAPI::toJsonValue(m_valid_from_local_time));
    }
    if (m_valid_until_date_isSet) {
        obj.insert(QString("valid_until_date"), ::OpenAPI::toJsonValue(m_valid_until_date));
    }
    if (m_valid_until_local_time_isSet) {
        obj.insert(QString("valid_until_local_time"), ::OpenAPI::toJsonValue(m_valid_until_local_time));
    }
    return obj;
}

QString OAICatalogPricingRule::getApplyProductsId() const {
    return m_apply_products_id;
}
void OAICatalogPricingRule::setApplyProductsId(const QString &apply_products_id) {
    m_apply_products_id = apply_products_id;
    m_apply_products_id_isSet = true;
}

bool OAICatalogPricingRule::is_apply_products_id_Set() const{
    return m_apply_products_id_isSet;
}

bool OAICatalogPricingRule::is_apply_products_id_Valid() const{
    return m_apply_products_id_isValid;
}

QList<QString> OAICatalogPricingRule::getCustomerGroupIdsAny() const {
    return m_customer_group_ids_any;
}
void OAICatalogPricingRule::setCustomerGroupIdsAny(const QList<QString> &customer_group_ids_any) {
    m_customer_group_ids_any = customer_group_ids_any;
    m_customer_group_ids_any_isSet = true;
}

bool OAICatalogPricingRule::is_customer_group_ids_any_Set() const{
    return m_customer_group_ids_any_isSet;
}

bool OAICatalogPricingRule::is_customer_group_ids_any_Valid() const{
    return m_customer_group_ids_any_isValid;
}

QString OAICatalogPricingRule::getDiscountId() const {
    return m_discount_id;
}
void OAICatalogPricingRule::setDiscountId(const QString &discount_id) {
    m_discount_id = discount_id;
    m_discount_id_isSet = true;
}

bool OAICatalogPricingRule::is_discount_id_Set() const{
    return m_discount_id_isSet;
}

bool OAICatalogPricingRule::is_discount_id_Valid() const{
    return m_discount_id_isValid;
}

QString OAICatalogPricingRule::getExcludeProductsId() const {
    return m_exclude_products_id;
}
void OAICatalogPricingRule::setExcludeProductsId(const QString &exclude_products_id) {
    m_exclude_products_id = exclude_products_id;
    m_exclude_products_id_isSet = true;
}

bool OAICatalogPricingRule::is_exclude_products_id_Set() const{
    return m_exclude_products_id_isSet;
}

bool OAICatalogPricingRule::is_exclude_products_id_Valid() const{
    return m_exclude_products_id_isValid;
}

QString OAICatalogPricingRule::getExcludeStrategy() const {
    return m_exclude_strategy;
}
void OAICatalogPricingRule::setExcludeStrategy(const QString &exclude_strategy) {
    m_exclude_strategy = exclude_strategy;
    m_exclude_strategy_isSet = true;
}

bool OAICatalogPricingRule::is_exclude_strategy_Set() const{
    return m_exclude_strategy_isSet;
}

bool OAICatalogPricingRule::is_exclude_strategy_Valid() const{
    return m_exclude_strategy_isValid;
}

QString OAICatalogPricingRule::getMatchProductsId() const {
    return m_match_products_id;
}
void OAICatalogPricingRule::setMatchProductsId(const QString &match_products_id) {
    m_match_products_id = match_products_id;
    m_match_products_id_isSet = true;
}

bool OAICatalogPricingRule::is_match_products_id_Set() const{
    return m_match_products_id_isSet;
}

bool OAICatalogPricingRule::is_match_products_id_Valid() const{
    return m_match_products_id_isValid;
}

QString OAICatalogPricingRule::getName() const {
    return m_name;
}
void OAICatalogPricingRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICatalogPricingRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalogPricingRule::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAICatalogPricingRule::getTimePeriodIds() const {
    return m_time_period_ids;
}
void OAICatalogPricingRule::setTimePeriodIds(const QList<QString> &time_period_ids) {
    m_time_period_ids = time_period_ids;
    m_time_period_ids_isSet = true;
}

bool OAICatalogPricingRule::is_time_period_ids_Set() const{
    return m_time_period_ids_isSet;
}

bool OAICatalogPricingRule::is_time_period_ids_Valid() const{
    return m_time_period_ids_isValid;
}

QString OAICatalogPricingRule::getValidFromDate() const {
    return m_valid_from_date;
}
void OAICatalogPricingRule::setValidFromDate(const QString &valid_from_date) {
    m_valid_from_date = valid_from_date;
    m_valid_from_date_isSet = true;
}

bool OAICatalogPricingRule::is_valid_from_date_Set() const{
    return m_valid_from_date_isSet;
}

bool OAICatalogPricingRule::is_valid_from_date_Valid() const{
    return m_valid_from_date_isValid;
}

QString OAICatalogPricingRule::getValidFromLocalTime() const {
    return m_valid_from_local_time;
}
void OAICatalogPricingRule::setValidFromLocalTime(const QString &valid_from_local_time) {
    m_valid_from_local_time = valid_from_local_time;
    m_valid_from_local_time_isSet = true;
}

bool OAICatalogPricingRule::is_valid_from_local_time_Set() const{
    return m_valid_from_local_time_isSet;
}

bool OAICatalogPricingRule::is_valid_from_local_time_Valid() const{
    return m_valid_from_local_time_isValid;
}

QString OAICatalogPricingRule::getValidUntilDate() const {
    return m_valid_until_date;
}
void OAICatalogPricingRule::setValidUntilDate(const QString &valid_until_date) {
    m_valid_until_date = valid_until_date;
    m_valid_until_date_isSet = true;
}

bool OAICatalogPricingRule::is_valid_until_date_Set() const{
    return m_valid_until_date_isSet;
}

bool OAICatalogPricingRule::is_valid_until_date_Valid() const{
    return m_valid_until_date_isValid;
}

QString OAICatalogPricingRule::getValidUntilLocalTime() const {
    return m_valid_until_local_time;
}
void OAICatalogPricingRule::setValidUntilLocalTime(const QString &valid_until_local_time) {
    m_valid_until_local_time = valid_until_local_time;
    m_valid_until_local_time_isSet = true;
}

bool OAICatalogPricingRule::is_valid_until_local_time_Set() const{
    return m_valid_until_local_time_isSet;
}

bool OAICatalogPricingRule::is_valid_until_local_time_Valid() const{
    return m_valid_until_local_time_isValid;
}

bool OAICatalogPricingRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apply_products_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_group_ids_any.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_products_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_products_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_period_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_from_local_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_until_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_until_local_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogPricingRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
