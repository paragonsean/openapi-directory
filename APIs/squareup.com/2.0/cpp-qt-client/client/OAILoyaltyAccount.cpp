/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyAccount::OAILoyaltyAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyAccount::OAILoyaltyAccount() {
    this->initializeModel();
}

OAILoyaltyAccount::~OAILoyaltyAccount() {}

void OAILoyaltyAccount::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_enrolled_at_isSet = false;
    m_enrolled_at_isValid = false;

    m_expiring_point_deadlines_isSet = false;
    m_expiring_point_deadlines_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lifetime_points_isSet = false;
    m_lifetime_points_isValid = false;

    m_mapping_isSet = false;
    m_mapping_isValid = false;

    m_program_id_isSet = false;
    m_program_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAILoyaltyAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyAccount::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_enrolled_at_isValid = ::OpenAPI::fromJsonValue(m_enrolled_at, json[QString("enrolled_at")]);
    m_enrolled_at_isSet = !json[QString("enrolled_at")].isNull() && m_enrolled_at_isValid;

    m_expiring_point_deadlines_isValid = ::OpenAPI::fromJsonValue(m_expiring_point_deadlines, json[QString("expiring_point_deadlines")]);
    m_expiring_point_deadlines_isSet = !json[QString("expiring_point_deadlines")].isNull() && m_expiring_point_deadlines_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lifetime_points_isValid = ::OpenAPI::fromJsonValue(m_lifetime_points, json[QString("lifetime_points")]);
    m_lifetime_points_isSet = !json[QString("lifetime_points")].isNull() && m_lifetime_points_isValid;

    m_mapping_isValid = ::OpenAPI::fromJsonValue(m_mapping, json[QString("mapping")]);
    m_mapping_isSet = !json[QString("mapping")].isNull() && m_mapping_isValid;

    m_program_id_isValid = ::OpenAPI::fromJsonValue(m_program_id, json[QString("program_id")]);
    m_program_id_isSet = !json[QString("program_id")].isNull() && m_program_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAILoyaltyAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_enrolled_at_isSet) {
        obj.insert(QString("enrolled_at"), ::OpenAPI::toJsonValue(m_enrolled_at));
    }
    if (m_expiring_point_deadlines.size() > 0) {
        obj.insert(QString("expiring_point_deadlines"), ::OpenAPI::toJsonValue(m_expiring_point_deadlines));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lifetime_points_isSet) {
        obj.insert(QString("lifetime_points"), ::OpenAPI::toJsonValue(m_lifetime_points));
    }
    if (m_mapping.isSet()) {
        obj.insert(QString("mapping"), ::OpenAPI::toJsonValue(m_mapping));
    }
    if (m_program_id_isSet) {
        obj.insert(QString("program_id"), ::OpenAPI::toJsonValue(m_program_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

qint32 OAILoyaltyAccount::getBalance() const {
    return m_balance;
}
void OAILoyaltyAccount::setBalance(const qint32 &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAILoyaltyAccount::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAILoyaltyAccount::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAILoyaltyAccount::getCreatedAt() const {
    return m_created_at;
}
void OAILoyaltyAccount::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAILoyaltyAccount::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAILoyaltyAccount::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAILoyaltyAccount::getCustomerId() const {
    return m_customer_id;
}
void OAILoyaltyAccount::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAILoyaltyAccount::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAILoyaltyAccount::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAILoyaltyAccount::getEnrolledAt() const {
    return m_enrolled_at;
}
void OAILoyaltyAccount::setEnrolledAt(const QString &enrolled_at) {
    m_enrolled_at = enrolled_at;
    m_enrolled_at_isSet = true;
}

bool OAILoyaltyAccount::is_enrolled_at_Set() const{
    return m_enrolled_at_isSet;
}

bool OAILoyaltyAccount::is_enrolled_at_Valid() const{
    return m_enrolled_at_isValid;
}

QList<OAILoyaltyAccountExpiringPointDeadline> OAILoyaltyAccount::getExpiringPointDeadlines() const {
    return m_expiring_point_deadlines;
}
void OAILoyaltyAccount::setExpiringPointDeadlines(const QList<OAILoyaltyAccountExpiringPointDeadline> &expiring_point_deadlines) {
    m_expiring_point_deadlines = expiring_point_deadlines;
    m_expiring_point_deadlines_isSet = true;
}

bool OAILoyaltyAccount::is_expiring_point_deadlines_Set() const{
    return m_expiring_point_deadlines_isSet;
}

bool OAILoyaltyAccount::is_expiring_point_deadlines_Valid() const{
    return m_expiring_point_deadlines_isValid;
}

QString OAILoyaltyAccount::getId() const {
    return m_id;
}
void OAILoyaltyAccount::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILoyaltyAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAILoyaltyAccount::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAILoyaltyAccount::getLifetimePoints() const {
    return m_lifetime_points;
}
void OAILoyaltyAccount::setLifetimePoints(const qint32 &lifetime_points) {
    m_lifetime_points = lifetime_points;
    m_lifetime_points_isSet = true;
}

bool OAILoyaltyAccount::is_lifetime_points_Set() const{
    return m_lifetime_points_isSet;
}

bool OAILoyaltyAccount::is_lifetime_points_Valid() const{
    return m_lifetime_points_isValid;
}

OAILoyaltyAccountMapping OAILoyaltyAccount::getMapping() const {
    return m_mapping;
}
void OAILoyaltyAccount::setMapping(const OAILoyaltyAccountMapping &mapping) {
    m_mapping = mapping;
    m_mapping_isSet = true;
}

bool OAILoyaltyAccount::is_mapping_Set() const{
    return m_mapping_isSet;
}

bool OAILoyaltyAccount::is_mapping_Valid() const{
    return m_mapping_isValid;
}

QString OAILoyaltyAccount::getProgramId() const {
    return m_program_id;
}
void OAILoyaltyAccount::setProgramId(const QString &program_id) {
    m_program_id = program_id;
    m_program_id_isSet = true;
}

bool OAILoyaltyAccount::is_program_id_Set() const{
    return m_program_id_isSet;
}

bool OAILoyaltyAccount::is_program_id_Valid() const{
    return m_program_id_isValid;
}

QString OAILoyaltyAccount::getUpdatedAt() const {
    return m_updated_at;
}
void OAILoyaltyAccount::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAILoyaltyAccount::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAILoyaltyAccount::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAILoyaltyAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrolled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiring_point_deadlines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_program_id_isValid && true;
}

} // namespace OpenAPI
