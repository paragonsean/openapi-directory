/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomerGroupsApi_H
#define OAI_OAICustomerGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateCustomerGroupRequest.h"
#include "OAICreateCustomerGroupResponse.h"
#include "OAIDeleteCustomerGroupResponse.h"
#include "OAIListCustomerGroupsResponse.h"
#include "OAIRetrieveCustomerGroupResponse.h"
#include "OAIUpdateCustomerGroupRequest.h"
#include "OAIUpdateCustomerGroupResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomerGroupsApi : public QObject {
    Q_OBJECT

public:
    OAICustomerGroupsApi(const int timeOut = 0);
    ~OAICustomerGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_customer_group_request OAICreateCustomerGroupRequest [required]
    */
    virtual void createCustomerGroup(const OAICreateCustomerGroupRequest &oai_create_customer_group_request);

    /**
    * @param[in]  group_id QString [required]
    */
    virtual void deleteCustomerGroup(const QString &group_id);

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listCustomerGroups(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  group_id QString [required]
    */
    virtual void retrieveCustomerGroup(const QString &group_id);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  oai_update_customer_group_request OAIUpdateCustomerGroupRequest [required]
    */
    virtual void updateCustomerGroup(const QString &group_id, const OAIUpdateCustomerGroupRequest &oai_update_customer_group_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCustomerGroupCallback(OAIHttpRequestWorker *worker);
    void deleteCustomerGroupCallback(OAIHttpRequestWorker *worker);
    void listCustomerGroupsCallback(OAIHttpRequestWorker *worker);
    void retrieveCustomerGroupCallback(OAIHttpRequestWorker *worker);
    void updateCustomerGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCustomerGroupSignal(OAICreateCustomerGroupResponse summary);
    void deleteCustomerGroupSignal(OAIDeleteCustomerGroupResponse summary);
    void listCustomerGroupsSignal(OAIListCustomerGroupsResponse summary);
    void retrieveCustomerGroupSignal(OAIRetrieveCustomerGroupResponse summary);
    void updateCustomerGroupSignal(OAIUpdateCustomerGroupResponse summary);


    void createCustomerGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateCustomerGroupResponse summary);
    void deleteCustomerGroupSignalFull(OAIHttpRequestWorker *worker, OAIDeleteCustomerGroupResponse summary);
    void listCustomerGroupsSignalFull(OAIHttpRequestWorker *worker, OAIListCustomerGroupsResponse summary);
    void retrieveCustomerGroupSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveCustomerGroupResponse summary);
    void updateCustomerGroupSignalFull(OAIHttpRequestWorker *worker, OAIUpdateCustomerGroupResponse summary);

    Q_DECL_DEPRECATED_X("Use createCustomerGroupSignalError() instead")
    void createCustomerGroupSignalE(OAICreateCustomerGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomerGroupSignalError(OAICreateCustomerGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomerGroupSignalError() instead")
    void deleteCustomerGroupSignalE(OAIDeleteCustomerGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomerGroupSignalError(OAIDeleteCustomerGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCustomerGroupsSignalError() instead")
    void listCustomerGroupsSignalE(OAIListCustomerGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCustomerGroupsSignalError(OAIListCustomerGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveCustomerGroupSignalError() instead")
    void retrieveCustomerGroupSignalE(OAIRetrieveCustomerGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveCustomerGroupSignalError(OAIRetrieveCustomerGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomerGroupSignalError() instead")
    void updateCustomerGroupSignalE(OAIUpdateCustomerGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomerGroupSignalError(OAIUpdateCustomerGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCustomerGroupSignalErrorFull() instead")
    void createCustomerGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomerGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomerGroupSignalErrorFull() instead")
    void deleteCustomerGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomerGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCustomerGroupsSignalErrorFull() instead")
    void listCustomerGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCustomerGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveCustomerGroupSignalErrorFull() instead")
    void retrieveCustomerGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveCustomerGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomerGroupSignalErrorFull() instead")
    void updateCustomerGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomerGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
