/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryAdjustmentGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryAdjustmentGroup::OAIInventoryAdjustmentGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryAdjustmentGroup::OAIInventoryAdjustmentGroup() {
    this->initializeModel();
}

OAIInventoryAdjustmentGroup::~OAIInventoryAdjustmentGroup() {}

void OAIInventoryAdjustmentGroup::initializeModel() {

    m_from_state_isSet = false;
    m_from_state_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_root_adjustment_id_isSet = false;
    m_root_adjustment_id_isValid = false;

    m_to_state_isSet = false;
    m_to_state_isValid = false;
}

void OAIInventoryAdjustmentGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryAdjustmentGroup::fromJsonObject(QJsonObject json) {

    m_from_state_isValid = ::OpenAPI::fromJsonValue(m_from_state, json[QString("from_state")]);
    m_from_state_isSet = !json[QString("from_state")].isNull() && m_from_state_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_root_adjustment_id_isValid = ::OpenAPI::fromJsonValue(m_root_adjustment_id, json[QString("root_adjustment_id")]);
    m_root_adjustment_id_isSet = !json[QString("root_adjustment_id")].isNull() && m_root_adjustment_id_isValid;

    m_to_state_isValid = ::OpenAPI::fromJsonValue(m_to_state, json[QString("to_state")]);
    m_to_state_isSet = !json[QString("to_state")].isNull() && m_to_state_isValid;
}

QString OAIInventoryAdjustmentGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryAdjustmentGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_from_state_isSet) {
        obj.insert(QString("from_state"), ::OpenAPI::toJsonValue(m_from_state));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_root_adjustment_id_isSet) {
        obj.insert(QString("root_adjustment_id"), ::OpenAPI::toJsonValue(m_root_adjustment_id));
    }
    if (m_to_state_isSet) {
        obj.insert(QString("to_state"), ::OpenAPI::toJsonValue(m_to_state));
    }
    return obj;
}

QString OAIInventoryAdjustmentGroup::getFromState() const {
    return m_from_state;
}
void OAIInventoryAdjustmentGroup::setFromState(const QString &from_state) {
    m_from_state = from_state;
    m_from_state_isSet = true;
}

bool OAIInventoryAdjustmentGroup::is_from_state_Set() const{
    return m_from_state_isSet;
}

bool OAIInventoryAdjustmentGroup::is_from_state_Valid() const{
    return m_from_state_isValid;
}

QString OAIInventoryAdjustmentGroup::getId() const {
    return m_id;
}
void OAIInventoryAdjustmentGroup::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInventoryAdjustmentGroup::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInventoryAdjustmentGroup::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIInventoryAdjustmentGroup::getRootAdjustmentId() const {
    return m_root_adjustment_id;
}
void OAIInventoryAdjustmentGroup::setRootAdjustmentId(const QString &root_adjustment_id) {
    m_root_adjustment_id = root_adjustment_id;
    m_root_adjustment_id_isSet = true;
}

bool OAIInventoryAdjustmentGroup::is_root_adjustment_id_Set() const{
    return m_root_adjustment_id_isSet;
}

bool OAIInventoryAdjustmentGroup::is_root_adjustment_id_Valid() const{
    return m_root_adjustment_id_isValid;
}

QString OAIInventoryAdjustmentGroup::getToState() const {
    return m_to_state;
}
void OAIInventoryAdjustmentGroup::setToState(const QString &to_state) {
    m_to_state = to_state;
    m_to_state_isSet = true;
}

bool OAIInventoryAdjustmentGroup::is_to_state_Set() const{
    return m_to_state_isSet;
}

bool OAIInventoryAdjustmentGroup::is_to_state_Valid() const{
    return m_to_state_isValid;
}

bool OAIInventoryAdjustmentGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_adjustment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryAdjustmentGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
