/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddress::OAIAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddress::OAIAddress() {
    this->initializeModel();
}

OAIAddress::~OAIAddress() {}

void OAIAddress::initializeModel() {

    m_address_line_1_isSet = false;
    m_address_line_1_isValid = false;

    m_address_line_2_isSet = false;
    m_address_line_2_isValid = false;

    m_address_line_3_isSet = false;
    m_address_line_3_isValid = false;

    m_administrative_district_level_1_isSet = false;
    m_administrative_district_level_1_isValid = false;

    m_administrative_district_level_2_isSet = false;
    m_administrative_district_level_2_isValid = false;

    m_administrative_district_level_3_isSet = false;
    m_administrative_district_level_3_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_locality_isSet = false;
    m_locality_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_sublocality_isSet = false;
    m_sublocality_isValid = false;

    m_sublocality_2_isSet = false;
    m_sublocality_2_isValid = false;

    m_sublocality_3_isSet = false;
    m_sublocality_3_isValid = false;
}

void OAIAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddress::fromJsonObject(QJsonObject json) {

    m_address_line_1_isValid = ::OpenAPI::fromJsonValue(m_address_line_1, json[QString("address_line_1")]);
    m_address_line_1_isSet = !json[QString("address_line_1")].isNull() && m_address_line_1_isValid;

    m_address_line_2_isValid = ::OpenAPI::fromJsonValue(m_address_line_2, json[QString("address_line_2")]);
    m_address_line_2_isSet = !json[QString("address_line_2")].isNull() && m_address_line_2_isValid;

    m_address_line_3_isValid = ::OpenAPI::fromJsonValue(m_address_line_3, json[QString("address_line_3")]);
    m_address_line_3_isSet = !json[QString("address_line_3")].isNull() && m_address_line_3_isValid;

    m_administrative_district_level_1_isValid = ::OpenAPI::fromJsonValue(m_administrative_district_level_1, json[QString("administrative_district_level_1")]);
    m_administrative_district_level_1_isSet = !json[QString("administrative_district_level_1")].isNull() && m_administrative_district_level_1_isValid;

    m_administrative_district_level_2_isValid = ::OpenAPI::fromJsonValue(m_administrative_district_level_2, json[QString("administrative_district_level_2")]);
    m_administrative_district_level_2_isSet = !json[QString("administrative_district_level_2")].isNull() && m_administrative_district_level_2_isValid;

    m_administrative_district_level_3_isValid = ::OpenAPI::fromJsonValue(m_administrative_district_level_3, json[QString("administrative_district_level_3")]);
    m_administrative_district_level_3_isSet = !json[QString("administrative_district_level_3")].isNull() && m_administrative_district_level_3_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_locality_isValid = ::OpenAPI::fromJsonValue(m_locality, json[QString("locality")]);
    m_locality_isSet = !json[QString("locality")].isNull() && m_locality_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;

    m_sublocality_isValid = ::OpenAPI::fromJsonValue(m_sublocality, json[QString("sublocality")]);
    m_sublocality_isSet = !json[QString("sublocality")].isNull() && m_sublocality_isValid;

    m_sublocality_2_isValid = ::OpenAPI::fromJsonValue(m_sublocality_2, json[QString("sublocality_2")]);
    m_sublocality_2_isSet = !json[QString("sublocality_2")].isNull() && m_sublocality_2_isValid;

    m_sublocality_3_isValid = ::OpenAPI::fromJsonValue(m_sublocality_3, json[QString("sublocality_3")]);
    m_sublocality_3_isSet = !json[QString("sublocality_3")].isNull() && m_sublocality_3_isValid;
}

QString OAIAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_line_1_isSet) {
        obj.insert(QString("address_line_1"), ::OpenAPI::toJsonValue(m_address_line_1));
    }
    if (m_address_line_2_isSet) {
        obj.insert(QString("address_line_2"), ::OpenAPI::toJsonValue(m_address_line_2));
    }
    if (m_address_line_3_isSet) {
        obj.insert(QString("address_line_3"), ::OpenAPI::toJsonValue(m_address_line_3));
    }
    if (m_administrative_district_level_1_isSet) {
        obj.insert(QString("administrative_district_level_1"), ::OpenAPI::toJsonValue(m_administrative_district_level_1));
    }
    if (m_administrative_district_level_2_isSet) {
        obj.insert(QString("administrative_district_level_2"), ::OpenAPI::toJsonValue(m_administrative_district_level_2));
    }
    if (m_administrative_district_level_3_isSet) {
        obj.insert(QString("administrative_district_level_3"), ::OpenAPI::toJsonValue(m_administrative_district_level_3));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_locality_isSet) {
        obj.insert(QString("locality"), ::OpenAPI::toJsonValue(m_locality));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_sublocality_isSet) {
        obj.insert(QString("sublocality"), ::OpenAPI::toJsonValue(m_sublocality));
    }
    if (m_sublocality_2_isSet) {
        obj.insert(QString("sublocality_2"), ::OpenAPI::toJsonValue(m_sublocality_2));
    }
    if (m_sublocality_3_isSet) {
        obj.insert(QString("sublocality_3"), ::OpenAPI::toJsonValue(m_sublocality_3));
    }
    return obj;
}

QString OAIAddress::getAddressLine1() const {
    return m_address_line_1;
}
void OAIAddress::setAddressLine1(const QString &address_line_1) {
    m_address_line_1 = address_line_1;
    m_address_line_1_isSet = true;
}

bool OAIAddress::is_address_line_1_Set() const{
    return m_address_line_1_isSet;
}

bool OAIAddress::is_address_line_1_Valid() const{
    return m_address_line_1_isValid;
}

QString OAIAddress::getAddressLine2() const {
    return m_address_line_2;
}
void OAIAddress::setAddressLine2(const QString &address_line_2) {
    m_address_line_2 = address_line_2;
    m_address_line_2_isSet = true;
}

bool OAIAddress::is_address_line_2_Set() const{
    return m_address_line_2_isSet;
}

bool OAIAddress::is_address_line_2_Valid() const{
    return m_address_line_2_isValid;
}

QString OAIAddress::getAddressLine3() const {
    return m_address_line_3;
}
void OAIAddress::setAddressLine3(const QString &address_line_3) {
    m_address_line_3 = address_line_3;
    m_address_line_3_isSet = true;
}

bool OAIAddress::is_address_line_3_Set() const{
    return m_address_line_3_isSet;
}

bool OAIAddress::is_address_line_3_Valid() const{
    return m_address_line_3_isValid;
}

QString OAIAddress::getAdministrativeDistrictLevel1() const {
    return m_administrative_district_level_1;
}
void OAIAddress::setAdministrativeDistrictLevel1(const QString &administrative_district_level_1) {
    m_administrative_district_level_1 = administrative_district_level_1;
    m_administrative_district_level_1_isSet = true;
}

bool OAIAddress::is_administrative_district_level_1_Set() const{
    return m_administrative_district_level_1_isSet;
}

bool OAIAddress::is_administrative_district_level_1_Valid() const{
    return m_administrative_district_level_1_isValid;
}

QString OAIAddress::getAdministrativeDistrictLevel2() const {
    return m_administrative_district_level_2;
}
void OAIAddress::setAdministrativeDistrictLevel2(const QString &administrative_district_level_2) {
    m_administrative_district_level_2 = administrative_district_level_2;
    m_administrative_district_level_2_isSet = true;
}

bool OAIAddress::is_administrative_district_level_2_Set() const{
    return m_administrative_district_level_2_isSet;
}

bool OAIAddress::is_administrative_district_level_2_Valid() const{
    return m_administrative_district_level_2_isValid;
}

QString OAIAddress::getAdministrativeDistrictLevel3() const {
    return m_administrative_district_level_3;
}
void OAIAddress::setAdministrativeDistrictLevel3(const QString &administrative_district_level_3) {
    m_administrative_district_level_3 = administrative_district_level_3;
    m_administrative_district_level_3_isSet = true;
}

bool OAIAddress::is_administrative_district_level_3_Set() const{
    return m_administrative_district_level_3_isSet;
}

bool OAIAddress::is_administrative_district_level_3_Valid() const{
    return m_administrative_district_level_3_isValid;
}

QString OAIAddress::getCountry() const {
    return m_country;
}
void OAIAddress::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAddress::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAddress::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAddress::getFirstName() const {
    return m_first_name;
}
void OAIAddress::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIAddress::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIAddress::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIAddress::getLastName() const {
    return m_last_name;
}
void OAIAddress::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIAddress::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIAddress::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIAddress::getLocality() const {
    return m_locality;
}
void OAIAddress::setLocality(const QString &locality) {
    m_locality = locality;
    m_locality_isSet = true;
}

bool OAIAddress::is_locality_Set() const{
    return m_locality_isSet;
}

bool OAIAddress::is_locality_Valid() const{
    return m_locality_isValid;
}

QString OAIAddress::getOrganization() const {
    return m_organization;
}
void OAIAddress::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIAddress::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIAddress::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIAddress::getPostalCode() const {
    return m_postal_code;
}
void OAIAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIAddress::getSublocality() const {
    return m_sublocality;
}
void OAIAddress::setSublocality(const QString &sublocality) {
    m_sublocality = sublocality;
    m_sublocality_isSet = true;
}

bool OAIAddress::is_sublocality_Set() const{
    return m_sublocality_isSet;
}

bool OAIAddress::is_sublocality_Valid() const{
    return m_sublocality_isValid;
}

QString OAIAddress::getSublocality2() const {
    return m_sublocality_2;
}
void OAIAddress::setSublocality2(const QString &sublocality_2) {
    m_sublocality_2 = sublocality_2;
    m_sublocality_2_isSet = true;
}

bool OAIAddress::is_sublocality_2_Set() const{
    return m_sublocality_2_isSet;
}

bool OAIAddress::is_sublocality_2_Valid() const{
    return m_sublocality_2_isValid;
}

QString OAIAddress::getSublocality3() const {
    return m_sublocality_3;
}
void OAIAddress::setSublocality3(const QString &sublocality_3) {
    m_sublocality_3 = sublocality_3;
    m_sublocality_3_isSet = true;
}

bool OAIAddress::is_sublocality_3_Set() const{
    return m_sublocality_3_isSet;
}

bool OAIAddress::is_sublocality_3_Valid() const{
    return m_sublocality_3_isValid;
}

bool OAIAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_line_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line_3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrative_district_level_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrative_district_level_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrative_district_level_3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sublocality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sublocality_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sublocality_3_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
