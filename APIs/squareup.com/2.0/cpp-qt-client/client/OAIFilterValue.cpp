/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterValue::OAIFilterValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterValue::OAIFilterValue() {
    this->initializeModel();
}

OAIFilterValue::~OAIFilterValue() {}

void OAIFilterValue::initializeModel() {

    m_all_isSet = false;
    m_all_isValid = false;

    m_any_isSet = false;
    m_any_isValid = false;

    m_none_isSet = false;
    m_none_isValid = false;
}

void OAIFilterValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterValue::fromJsonObject(QJsonObject json) {

    m_all_isValid = ::OpenAPI::fromJsonValue(m_all, json[QString("all")]);
    m_all_isSet = !json[QString("all")].isNull() && m_all_isValid;

    m_any_isValid = ::OpenAPI::fromJsonValue(m_any, json[QString("any")]);
    m_any_isSet = !json[QString("any")].isNull() && m_any_isValid;

    m_none_isValid = ::OpenAPI::fromJsonValue(m_none, json[QString("none")]);
    m_none_isSet = !json[QString("none")].isNull() && m_none_isValid;
}

QString OAIFilterValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterValue::asJsonObject() const {
    QJsonObject obj;
    if (m_all.size() > 0) {
        obj.insert(QString("all"), ::OpenAPI::toJsonValue(m_all));
    }
    if (m_any.size() > 0) {
        obj.insert(QString("any"), ::OpenAPI::toJsonValue(m_any));
    }
    if (m_none.size() > 0) {
        obj.insert(QString("none"), ::OpenAPI::toJsonValue(m_none));
    }
    return obj;
}

QList<QString> OAIFilterValue::getAll() const {
    return m_all;
}
void OAIFilterValue::setAll(const QList<QString> &all) {
    m_all = all;
    m_all_isSet = true;
}

bool OAIFilterValue::is_all_Set() const{
    return m_all_isSet;
}

bool OAIFilterValue::is_all_Valid() const{
    return m_all_isValid;
}

QList<QString> OAIFilterValue::getAny() const {
    return m_any;
}
void OAIFilterValue::setAny(const QList<QString> &any) {
    m_any = any;
    m_any_isSet = true;
}

bool OAIFilterValue::is_any_Set() const{
    return m_any_isSet;
}

bool OAIFilterValue::is_any_Valid() const{
    return m_any_isValid;
}

QList<QString> OAIFilterValue::getNone() const {
    return m_none;
}
void OAIFilterValue::setNone(const QList<QString> &none) {
    m_none = none;
    m_none_isSet = true;
}

bool OAIFilterValue::is_none_Set() const{
    return m_none_isSet;
}

bool OAIFilterValue::is_none_Valid() const{
    return m_none_isValid;
}

bool OAIFilterValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_any.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_none.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
