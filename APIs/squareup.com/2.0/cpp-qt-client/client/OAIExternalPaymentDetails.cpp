/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalPaymentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalPaymentDetails::OAIExternalPaymentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalPaymentDetails::OAIExternalPaymentDetails() {
    this->initializeModel();
}

OAIExternalPaymentDetails::~OAIExternalPaymentDetails() {}

void OAIExternalPaymentDetails::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_fee_money_isSet = false;
    m_source_fee_money_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIExternalPaymentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternalPaymentDetails::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_fee_money_isValid = ::OpenAPI::fromJsonValue(m_source_fee_money, json[QString("source_fee_money")]);
    m_source_fee_money_isSet = !json[QString("source_fee_money")].isNull() && m_source_fee_money_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIExternalPaymentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternalPaymentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_fee_money.isSet()) {
        obj.insert(QString("source_fee_money"), ::OpenAPI::toJsonValue(m_source_fee_money));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIExternalPaymentDetails::getSource() const {
    return m_source;
}
void OAIExternalPaymentDetails::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIExternalPaymentDetails::is_source_Set() const{
    return m_source_isSet;
}

bool OAIExternalPaymentDetails::is_source_Valid() const{
    return m_source_isValid;
}

OAIMoney OAIExternalPaymentDetails::getSourceFeeMoney() const {
    return m_source_fee_money;
}
void OAIExternalPaymentDetails::setSourceFeeMoney(const OAIMoney &source_fee_money) {
    m_source_fee_money = source_fee_money;
    m_source_fee_money_isSet = true;
}

bool OAIExternalPaymentDetails::is_source_fee_money_Set() const{
    return m_source_fee_money_isSet;
}

bool OAIExternalPaymentDetails::is_source_fee_money_Valid() const{
    return m_source_fee_money_isValid;
}

QString OAIExternalPaymentDetails::getSourceId() const {
    return m_source_id;
}
void OAIExternalPaymentDetails::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIExternalPaymentDetails::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIExternalPaymentDetails::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIExternalPaymentDetails::getType() const {
    return m_type;
}
void OAIExternalPaymentDetails::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExternalPaymentDetails::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExternalPaymentDetails::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIExternalPaymentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_fee_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternalPaymentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
