/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisputeState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisputeState::OAIDisputeState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisputeState::OAIDisputeState() {
    this->initializeModel();
}

OAIDisputeState::~OAIDisputeState() {}

void OAIDisputeState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDisputeState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDisputeState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("UNKNOWN_STATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeState::UNKNOWN_STATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INQUIRY_EVIDENCE_REQUIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeState::INQUIRY_EVIDENCE_REQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INQUIRY_PROCESSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeState::INQUIRY_PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INQUIRY_CLOSED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeState::INQUIRY_CLOSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EVIDENCE_REQUIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeState::EVIDENCE_REQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROCESSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeState::PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WON", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeState::WON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeState::LOST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCEPTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeState::ACCEPTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAITING_THIRD_PARTY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisputeState::WAITING_THIRD_PARTY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDisputeState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDisputeState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDisputeState::UNKNOWN_STATE:
            val = "UNKNOWN_STATE";
            break;
        case eOAIDisputeState::INQUIRY_EVIDENCE_REQUIRED:
            val = "INQUIRY_EVIDENCE_REQUIRED";
            break;
        case eOAIDisputeState::INQUIRY_PROCESSING:
            val = "INQUIRY_PROCESSING";
            break;
        case eOAIDisputeState::INQUIRY_CLOSED:
            val = "INQUIRY_CLOSED";
            break;
        case eOAIDisputeState::EVIDENCE_REQUIRED:
            val = "EVIDENCE_REQUIRED";
            break;
        case eOAIDisputeState::PROCESSING:
            val = "PROCESSING";
            break;
        case eOAIDisputeState::WON:
            val = "WON";
            break;
        case eOAIDisputeState::LOST:
            val = "LOST";
            break;
        case eOAIDisputeState::ACCEPTED:
            val = "ACCEPTED";
            break;
        case eOAIDisputeState::WAITING_THIRD_PARTY:
            val = "WAITING_THIRD_PARTY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDisputeState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDisputeState::eOAIDisputeState OAIDisputeState::getValue() const {
    return m_value;
}

void OAIDisputeState::setValue(const OAIDisputeState::eOAIDisputeState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDisputeState::isSet() const {
    
    return m_value_isSet;
}

bool OAIDisputeState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
