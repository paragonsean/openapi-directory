/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePaymentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePaymentRequest::OAICreatePaymentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePaymentRequest::OAICreatePaymentRequest() {
    this->initializeModel();
}

OAICreatePaymentRequest::~OAICreatePaymentRequest() {}

void OAICreatePaymentRequest::initializeModel() {

    m_accept_partial_authorization_isSet = false;
    m_accept_partial_authorization_isValid = false;

    m_amount_money_isSet = false;
    m_amount_money_isValid = false;

    m_app_fee_money_isSet = false;
    m_app_fee_money_isValid = false;

    m_autocomplete_isSet = false;
    m_autocomplete_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_buyer_email_address_isSet = false;
    m_buyer_email_address_isValid = false;

    m_cash_details_isSet = false;
    m_cash_details_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_delay_duration_isSet = false;
    m_delay_duration_isValid = false;

    m_external_details_isSet = false;
    m_external_details_isValid = false;

    m_idempotency_key_isSet = false;
    m_idempotency_key_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_shipping_address_isSet = false;
    m_shipping_address_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_statement_description_identifier_isSet = false;
    m_statement_description_identifier_isValid = false;

    m_tip_money_isSet = false;
    m_tip_money_isValid = false;

    m_verification_token_isSet = false;
    m_verification_token_isValid = false;
}

void OAICreatePaymentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePaymentRequest::fromJsonObject(QJsonObject json) {

    m_accept_partial_authorization_isValid = ::OpenAPI::fromJsonValue(m_accept_partial_authorization, json[QString("accept_partial_authorization")]);
    m_accept_partial_authorization_isSet = !json[QString("accept_partial_authorization")].isNull() && m_accept_partial_authorization_isValid;

    m_amount_money_isValid = ::OpenAPI::fromJsonValue(m_amount_money, json[QString("amount_money")]);
    m_amount_money_isSet = !json[QString("amount_money")].isNull() && m_amount_money_isValid;

    m_app_fee_money_isValid = ::OpenAPI::fromJsonValue(m_app_fee_money, json[QString("app_fee_money")]);
    m_app_fee_money_isSet = !json[QString("app_fee_money")].isNull() && m_app_fee_money_isValid;

    m_autocomplete_isValid = ::OpenAPI::fromJsonValue(m_autocomplete, json[QString("autocomplete")]);
    m_autocomplete_isSet = !json[QString("autocomplete")].isNull() && m_autocomplete_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billing_address")]);
    m_billing_address_isSet = !json[QString("billing_address")].isNull() && m_billing_address_isValid;

    m_buyer_email_address_isValid = ::OpenAPI::fromJsonValue(m_buyer_email_address, json[QString("buyer_email_address")]);
    m_buyer_email_address_isSet = !json[QString("buyer_email_address")].isNull() && m_buyer_email_address_isValid;

    m_cash_details_isValid = ::OpenAPI::fromJsonValue(m_cash_details, json[QString("cash_details")]);
    m_cash_details_isSet = !json[QString("cash_details")].isNull() && m_cash_details_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_delay_duration_isValid = ::OpenAPI::fromJsonValue(m_delay_duration, json[QString("delay_duration")]);
    m_delay_duration_isSet = !json[QString("delay_duration")].isNull() && m_delay_duration_isValid;

    m_external_details_isValid = ::OpenAPI::fromJsonValue(m_external_details, json[QString("external_details")]);
    m_external_details_isSet = !json[QString("external_details")].isNull() && m_external_details_isValid;

    m_idempotency_key_isValid = ::OpenAPI::fromJsonValue(m_idempotency_key, json[QString("idempotency_key")]);
    m_idempotency_key_isSet = !json[QString("idempotency_key")].isNull() && m_idempotency_key_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("reference_id")]);
    m_reference_id_isSet = !json[QString("reference_id")].isNull() && m_reference_id_isValid;

    m_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_shipping_address, json[QString("shipping_address")]);
    m_shipping_address_isSet = !json[QString("shipping_address")].isNull() && m_shipping_address_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_statement_description_identifier_isValid = ::OpenAPI::fromJsonValue(m_statement_description_identifier, json[QString("statement_description_identifier")]);
    m_statement_description_identifier_isSet = !json[QString("statement_description_identifier")].isNull() && m_statement_description_identifier_isValid;

    m_tip_money_isValid = ::OpenAPI::fromJsonValue(m_tip_money, json[QString("tip_money")]);
    m_tip_money_isSet = !json[QString("tip_money")].isNull() && m_tip_money_isValid;

    m_verification_token_isValid = ::OpenAPI::fromJsonValue(m_verification_token, json[QString("verification_token")]);
    m_verification_token_isSet = !json[QString("verification_token")].isNull() && m_verification_token_isValid;
}

QString OAICreatePaymentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePaymentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_partial_authorization_isSet) {
        obj.insert(QString("accept_partial_authorization"), ::OpenAPI::toJsonValue(m_accept_partial_authorization));
    }
    if (m_amount_money.isSet()) {
        obj.insert(QString("amount_money"), ::OpenAPI::toJsonValue(m_amount_money));
    }
    if (m_app_fee_money.isSet()) {
        obj.insert(QString("app_fee_money"), ::OpenAPI::toJsonValue(m_app_fee_money));
    }
    if (m_autocomplete_isSet) {
        obj.insert(QString("autocomplete"), ::OpenAPI::toJsonValue(m_autocomplete));
    }
    if (m_billing_address.isSet()) {
        obj.insert(QString("billing_address"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_buyer_email_address_isSet) {
        obj.insert(QString("buyer_email_address"), ::OpenAPI::toJsonValue(m_buyer_email_address));
    }
    if (m_cash_details.isSet()) {
        obj.insert(QString("cash_details"), ::OpenAPI::toJsonValue(m_cash_details));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_delay_duration_isSet) {
        obj.insert(QString("delay_duration"), ::OpenAPI::toJsonValue(m_delay_duration));
    }
    if (m_external_details.isSet()) {
        obj.insert(QString("external_details"), ::OpenAPI::toJsonValue(m_external_details));
    }
    if (m_idempotency_key_isSet) {
        obj.insert(QString("idempotency_key"), ::OpenAPI::toJsonValue(m_idempotency_key));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("reference_id"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_shipping_address.isSet()) {
        obj.insert(QString("shipping_address"), ::OpenAPI::toJsonValue(m_shipping_address));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_statement_description_identifier_isSet) {
        obj.insert(QString("statement_description_identifier"), ::OpenAPI::toJsonValue(m_statement_description_identifier));
    }
    if (m_tip_money.isSet()) {
        obj.insert(QString("tip_money"), ::OpenAPI::toJsonValue(m_tip_money));
    }
    if (m_verification_token_isSet) {
        obj.insert(QString("verification_token"), ::OpenAPI::toJsonValue(m_verification_token));
    }
    return obj;
}

bool OAICreatePaymentRequest::isAcceptPartialAuthorization() const {
    return m_accept_partial_authorization;
}
void OAICreatePaymentRequest::setAcceptPartialAuthorization(const bool &accept_partial_authorization) {
    m_accept_partial_authorization = accept_partial_authorization;
    m_accept_partial_authorization_isSet = true;
}

bool OAICreatePaymentRequest::is_accept_partial_authorization_Set() const{
    return m_accept_partial_authorization_isSet;
}

bool OAICreatePaymentRequest::is_accept_partial_authorization_Valid() const{
    return m_accept_partial_authorization_isValid;
}

OAIMoney OAICreatePaymentRequest::getAmountMoney() const {
    return m_amount_money;
}
void OAICreatePaymentRequest::setAmountMoney(const OAIMoney &amount_money) {
    m_amount_money = amount_money;
    m_amount_money_isSet = true;
}

bool OAICreatePaymentRequest::is_amount_money_Set() const{
    return m_amount_money_isSet;
}

bool OAICreatePaymentRequest::is_amount_money_Valid() const{
    return m_amount_money_isValid;
}

OAIMoney OAICreatePaymentRequest::getAppFeeMoney() const {
    return m_app_fee_money;
}
void OAICreatePaymentRequest::setAppFeeMoney(const OAIMoney &app_fee_money) {
    m_app_fee_money = app_fee_money;
    m_app_fee_money_isSet = true;
}

bool OAICreatePaymentRequest::is_app_fee_money_Set() const{
    return m_app_fee_money_isSet;
}

bool OAICreatePaymentRequest::is_app_fee_money_Valid() const{
    return m_app_fee_money_isValid;
}

bool OAICreatePaymentRequest::isAutocomplete() const {
    return m_autocomplete;
}
void OAICreatePaymentRequest::setAutocomplete(const bool &autocomplete) {
    m_autocomplete = autocomplete;
    m_autocomplete_isSet = true;
}

bool OAICreatePaymentRequest::is_autocomplete_Set() const{
    return m_autocomplete_isSet;
}

bool OAICreatePaymentRequest::is_autocomplete_Valid() const{
    return m_autocomplete_isValid;
}

OAIAddress OAICreatePaymentRequest::getBillingAddress() const {
    return m_billing_address;
}
void OAICreatePaymentRequest::setBillingAddress(const OAIAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAICreatePaymentRequest::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAICreatePaymentRequest::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

QString OAICreatePaymentRequest::getBuyerEmailAddress() const {
    return m_buyer_email_address;
}
void OAICreatePaymentRequest::setBuyerEmailAddress(const QString &buyer_email_address) {
    m_buyer_email_address = buyer_email_address;
    m_buyer_email_address_isSet = true;
}

bool OAICreatePaymentRequest::is_buyer_email_address_Set() const{
    return m_buyer_email_address_isSet;
}

bool OAICreatePaymentRequest::is_buyer_email_address_Valid() const{
    return m_buyer_email_address_isValid;
}

OAICashPaymentDetails OAICreatePaymentRequest::getCashDetails() const {
    return m_cash_details;
}
void OAICreatePaymentRequest::setCashDetails(const OAICashPaymentDetails &cash_details) {
    m_cash_details = cash_details;
    m_cash_details_isSet = true;
}

bool OAICreatePaymentRequest::is_cash_details_Set() const{
    return m_cash_details_isSet;
}

bool OAICreatePaymentRequest::is_cash_details_Valid() const{
    return m_cash_details_isValid;
}

QString OAICreatePaymentRequest::getCustomerId() const {
    return m_customer_id;
}
void OAICreatePaymentRequest::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAICreatePaymentRequest::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAICreatePaymentRequest::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAICreatePaymentRequest::getDelayDuration() const {
    return m_delay_duration;
}
void OAICreatePaymentRequest::setDelayDuration(const QString &delay_duration) {
    m_delay_duration = delay_duration;
    m_delay_duration_isSet = true;
}

bool OAICreatePaymentRequest::is_delay_duration_Set() const{
    return m_delay_duration_isSet;
}

bool OAICreatePaymentRequest::is_delay_duration_Valid() const{
    return m_delay_duration_isValid;
}

OAIExternalPaymentDetails OAICreatePaymentRequest::getExternalDetails() const {
    return m_external_details;
}
void OAICreatePaymentRequest::setExternalDetails(const OAIExternalPaymentDetails &external_details) {
    m_external_details = external_details;
    m_external_details_isSet = true;
}

bool OAICreatePaymentRequest::is_external_details_Set() const{
    return m_external_details_isSet;
}

bool OAICreatePaymentRequest::is_external_details_Valid() const{
    return m_external_details_isValid;
}

QString OAICreatePaymentRequest::getIdempotencyKey() const {
    return m_idempotency_key;
}
void OAICreatePaymentRequest::setIdempotencyKey(const QString &idempotency_key) {
    m_idempotency_key = idempotency_key;
    m_idempotency_key_isSet = true;
}

bool OAICreatePaymentRequest::is_idempotency_key_Set() const{
    return m_idempotency_key_isSet;
}

bool OAICreatePaymentRequest::is_idempotency_key_Valid() const{
    return m_idempotency_key_isValid;
}

QString OAICreatePaymentRequest::getLocationId() const {
    return m_location_id;
}
void OAICreatePaymentRequest::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAICreatePaymentRequest::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAICreatePaymentRequest::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAICreatePaymentRequest::getNote() const {
    return m_note;
}
void OAICreatePaymentRequest::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICreatePaymentRequest::is_note_Set() const{
    return m_note_isSet;
}

bool OAICreatePaymentRequest::is_note_Valid() const{
    return m_note_isValid;
}

QString OAICreatePaymentRequest::getOrderId() const {
    return m_order_id;
}
void OAICreatePaymentRequest::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAICreatePaymentRequest::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAICreatePaymentRequest::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAICreatePaymentRequest::getReferenceId() const {
    return m_reference_id;
}
void OAICreatePaymentRequest::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAICreatePaymentRequest::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAICreatePaymentRequest::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

OAIAddress OAICreatePaymentRequest::getShippingAddress() const {
    return m_shipping_address;
}
void OAICreatePaymentRequest::setShippingAddress(const OAIAddress &shipping_address) {
    m_shipping_address = shipping_address;
    m_shipping_address_isSet = true;
}

bool OAICreatePaymentRequest::is_shipping_address_Set() const{
    return m_shipping_address_isSet;
}

bool OAICreatePaymentRequest::is_shipping_address_Valid() const{
    return m_shipping_address_isValid;
}

QString OAICreatePaymentRequest::getSourceId() const {
    return m_source_id;
}
void OAICreatePaymentRequest::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAICreatePaymentRequest::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAICreatePaymentRequest::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAICreatePaymentRequest::getStatementDescriptionIdentifier() const {
    return m_statement_description_identifier;
}
void OAICreatePaymentRequest::setStatementDescriptionIdentifier(const QString &statement_description_identifier) {
    m_statement_description_identifier = statement_description_identifier;
    m_statement_description_identifier_isSet = true;
}

bool OAICreatePaymentRequest::is_statement_description_identifier_Set() const{
    return m_statement_description_identifier_isSet;
}

bool OAICreatePaymentRequest::is_statement_description_identifier_Valid() const{
    return m_statement_description_identifier_isValid;
}

OAIMoney OAICreatePaymentRequest::getTipMoney() const {
    return m_tip_money;
}
void OAICreatePaymentRequest::setTipMoney(const OAIMoney &tip_money) {
    m_tip_money = tip_money;
    m_tip_money_isSet = true;
}

bool OAICreatePaymentRequest::is_tip_money_Set() const{
    return m_tip_money_isSet;
}

bool OAICreatePaymentRequest::is_tip_money_Valid() const{
    return m_tip_money_isValid;
}

QString OAICreatePaymentRequest::getVerificationToken() const {
    return m_verification_token;
}
void OAICreatePaymentRequest::setVerificationToken(const QString &verification_token) {
    m_verification_token = verification_token;
    m_verification_token_isSet = true;
}

bool OAICreatePaymentRequest::is_verification_token_Set() const{
    return m_verification_token_isSet;
}

bool OAICreatePaymentRequest::is_verification_token_Valid() const{
    return m_verification_token_isValid;
}

bool OAICreatePaymentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_partial_authorization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_fee_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_autocomplete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_description_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tip_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePaymentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_money_isValid && m_idempotency_key_isValid && m_source_id_isValid && true;
}

} // namespace OpenAPI
