/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV1Tender.h
 *
 * A tender represents a discrete monetary exchange. Square represents this exchange as a money object with a specific currency and amount, where the amount is given in the smallest denomination of the given currency.  Square POS can accept more than one form of tender for a single payment (such as by splitting a bill between a credit card and a gift card). The &#x60;tender&#x60; field of the Payment object lists all forms of tender used for the payment.  Split tender payments behave slightly differently from single tender payments:  The receipt_url for a split tender corresponds only to the first tender listed in the tender field. To get the receipt URLs for the remaining tenders, use the receipt_url fields of the corresponding Tender objects.  *A note on gift cards**: when a customer purchases a Square gift card from a merchant, the merchant receives the full amount of the gift card in the associated payment.  When that gift card is used as a tender, the balance of the gift card is reduced and the merchant receives no funds. A &#x60;Tender&#x60; object with a type of &#x60;SQUARE_GIFT_CARD&#x60; indicates a gift card was used for some or all of the associated payment.
 */

#ifndef OAIV1Tender_H
#define OAIV1Tender_H

#include <QJsonObject>

#include "OAIV1Money.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIV1Money;

class OAIV1Tender : public OAIObject {
public:
    OAIV1Tender();
    OAIV1Tender(QString json);
    ~OAIV1Tender() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCardBrand() const;
    void setCardBrand(const QString &card_brand);
    bool is_card_brand_Set() const;
    bool is_card_brand_Valid() const;

    OAIV1Money getChangeBackMoney() const;
    void setChangeBackMoney(const OAIV1Money &change_back_money);
    bool is_change_back_money_Set() const;
    bool is_change_back_money_Valid() const;

    QString getEmployeeId() const;
    void setEmployeeId(const QString &employee_id);
    bool is_employee_id_Set() const;
    bool is_employee_id_Valid() const;

    QString getEntryMethod() const;
    void setEntryMethod(const QString &entry_method);
    bool is_entry_method_Set() const;
    bool is_entry_method_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsExchange() const;
    void setIsExchange(const bool &is_exchange);
    bool is_is_exchange_Set() const;
    bool is_is_exchange_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPanSuffix() const;
    void setPanSuffix(const QString &pan_suffix);
    bool is_pan_suffix_Set() const;
    bool is_pan_suffix_Valid() const;

    QString getPaymentNote() const;
    void setPaymentNote(const QString &payment_note);
    bool is_payment_note_Set() const;
    bool is_payment_note_Valid() const;

    QString getReceiptUrl() const;
    void setReceiptUrl(const QString &receipt_url);
    bool is_receipt_url_Set() const;
    bool is_receipt_url_Valid() const;

    OAIV1Money getRefundedMoney() const;
    void setRefundedMoney(const OAIV1Money &refunded_money);
    bool is_refunded_money_Set() const;
    bool is_refunded_money_Valid() const;

    QString getSettledAt() const;
    void setSettledAt(const QString &settled_at);
    bool is_settled_at_Set() const;
    bool is_settled_at_Valid() const;

    QString getTenderedAt() const;
    void setTenderedAt(const QString &tendered_at);
    bool is_tendered_at_Set() const;
    bool is_tendered_at_Valid() const;

    OAIV1Money getTenderedMoney() const;
    void setTenderedMoney(const OAIV1Money &tendered_money);
    bool is_tendered_money_Set() const;
    bool is_tendered_money_Valid() const;

    OAIV1Money getTotalMoney() const;
    void setTotalMoney(const OAIV1Money &total_money);
    bool is_total_money_Set() const;
    bool is_total_money_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_card_brand;
    bool m_card_brand_isSet;
    bool m_card_brand_isValid;

    OAIV1Money m_change_back_money;
    bool m_change_back_money_isSet;
    bool m_change_back_money_isValid;

    QString m_employee_id;
    bool m_employee_id_isSet;
    bool m_employee_id_isValid;

    QString m_entry_method;
    bool m_entry_method_isSet;
    bool m_entry_method_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_exchange;
    bool m_is_exchange_isSet;
    bool m_is_exchange_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_pan_suffix;
    bool m_pan_suffix_isSet;
    bool m_pan_suffix_isValid;

    QString m_payment_note;
    bool m_payment_note_isSet;
    bool m_payment_note_isValid;

    QString m_receipt_url;
    bool m_receipt_url_isSet;
    bool m_receipt_url_isValid;

    OAIV1Money m_refunded_money;
    bool m_refunded_money_isSet;
    bool m_refunded_money_isValid;

    QString m_settled_at;
    bool m_settled_at_isSet;
    bool m_settled_at_isValid;

    QString m_tendered_at;
    bool m_tendered_at_isSet;
    bool m_tendered_at_isValid;

    OAIV1Money m_tendered_money;
    bool m_tendered_money_isSet;
    bool m_tendered_money_isValid;

    OAIV1Money m_total_money;
    bool m_total_money_isSet;
    bool m_total_money_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV1Tender)

#endif // OAIV1Tender_H
