/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionEvent::OAISubscriptionEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionEvent::OAISubscriptionEvent() {
    this->initializeModel();
}

OAISubscriptionEvent::~OAISubscriptionEvent() {}

void OAISubscriptionEvent::initializeModel() {

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_subscription_event_type_isSet = false;
    m_subscription_event_type_isValid = false;
}

void OAISubscriptionEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionEvent::fromJsonObject(QJsonObject json) {

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("effective_date")]);
    m_effective_date_isSet = !json[QString("effective_date")].isNull() && m_effective_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("plan_id")]);
    m_plan_id_isSet = !json[QString("plan_id")].isNull() && m_plan_id_isValid;

    m_subscription_event_type_isValid = ::OpenAPI::fromJsonValue(m_subscription_event_type, json[QString("subscription_event_type")]);
    m_subscription_event_type_isSet = !json[QString("subscription_event_type")].isNull() && m_subscription_event_type_isValid;
}

QString OAISubscriptionEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_effective_date_isSet) {
        obj.insert(QString("effective_date"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_info_isSet) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("plan_id"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_subscription_event_type_isSet) {
        obj.insert(QString("subscription_event_type"), ::OpenAPI::toJsonValue(m_subscription_event_type));
    }
    return obj;
}

QString OAISubscriptionEvent::getEffectiveDate() const {
    return m_effective_date;
}
void OAISubscriptionEvent::setEffectiveDate(const QString &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAISubscriptionEvent::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAISubscriptionEvent::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

QString OAISubscriptionEvent::getId() const {
    return m_id;
}
void OAISubscriptionEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscriptionEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscriptionEvent::is_id_Valid() const{
    return m_id_isValid;
}

QJsonValue OAISubscriptionEvent::getInfo() const {
    return m_info;
}
void OAISubscriptionEvent::setInfo(const QJsonValue &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAISubscriptionEvent::is_info_Set() const{
    return m_info_isSet;
}

bool OAISubscriptionEvent::is_info_Valid() const{
    return m_info_isValid;
}

QString OAISubscriptionEvent::getPlanId() const {
    return m_plan_id;
}
void OAISubscriptionEvent::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAISubscriptionEvent::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAISubscriptionEvent::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

QString OAISubscriptionEvent::getSubscriptionEventType() const {
    return m_subscription_event_type;
}
void OAISubscriptionEvent::setSubscriptionEventType(const QString &subscription_event_type) {
    m_subscription_event_type = subscription_event_type;
    m_subscription_event_type_isSet = true;
}

bool OAISubscriptionEvent::is_subscription_event_type_Set() const{
    return m_subscription_event_type_isSet;
}

bool OAISubscriptionEvent::is_subscription_event_type_Valid() const{
    return m_subscription_event_type_isValid;
}

bool OAISubscriptionEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_effective_date_isValid && m_id_isValid && m_plan_id_isValid && m_subscription_event_type_isValid && true;
}

} // namespace OpenAPI
