/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1Order.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV1Order::OAIV1Order(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV1Order::OAIV1Order() {
    this->initializeModel();
}

OAIV1Order::~OAIV1Order() {}

void OAIV1Order::initializeModel() {

    m_btc_price_satoshi_isSet = false;
    m_btc_price_satoshi_isValid = false;

    m_btc_receive_address_isSet = false;
    m_btc_receive_address_isValid = false;

    m_buyer_email_isSet = false;
    m_buyer_email_isValid = false;

    m_buyer_note_isSet = false;
    m_buyer_note_isValid = false;

    m_canceled_note_isSet = false;
    m_canceled_note_isValid = false;

    m_completed_note_isSet = false;
    m_completed_note_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_order_history_isSet = false;
    m_order_history_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_promo_code_isSet = false;
    m_promo_code_isValid = false;

    m_recipient_name_isSet = false;
    m_recipient_name_isValid = false;

    m_recipient_phone_number_isSet = false;
    m_recipient_phone_number_isValid = false;

    m_refunded_note_isSet = false;
    m_refunded_note_isValid = false;

    m_shipping_address_isSet = false;
    m_shipping_address_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_subtotal_money_isSet = false;
    m_subtotal_money_isValid = false;

    m_tender_isSet = false;
    m_tender_isValid = false;

    m_total_discount_money_isSet = false;
    m_total_discount_money_isValid = false;

    m_total_price_money_isSet = false;
    m_total_price_money_isValid = false;

    m_total_shipping_money_isSet = false;
    m_total_shipping_money_isValid = false;

    m_total_tax_money_isSet = false;
    m_total_tax_money_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIV1Order::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV1Order::fromJsonObject(QJsonObject json) {

    m_btc_price_satoshi_isValid = ::OpenAPI::fromJsonValue(m_btc_price_satoshi, json[QString("btc_price_satoshi")]);
    m_btc_price_satoshi_isSet = !json[QString("btc_price_satoshi")].isNull() && m_btc_price_satoshi_isValid;

    m_btc_receive_address_isValid = ::OpenAPI::fromJsonValue(m_btc_receive_address, json[QString("btc_receive_address")]);
    m_btc_receive_address_isSet = !json[QString("btc_receive_address")].isNull() && m_btc_receive_address_isValid;

    m_buyer_email_isValid = ::OpenAPI::fromJsonValue(m_buyer_email, json[QString("buyer_email")]);
    m_buyer_email_isSet = !json[QString("buyer_email")].isNull() && m_buyer_email_isValid;

    m_buyer_note_isValid = ::OpenAPI::fromJsonValue(m_buyer_note, json[QString("buyer_note")]);
    m_buyer_note_isSet = !json[QString("buyer_note")].isNull() && m_buyer_note_isValid;

    m_canceled_note_isValid = ::OpenAPI::fromJsonValue(m_canceled_note, json[QString("canceled_note")]);
    m_canceled_note_isSet = !json[QString("canceled_note")].isNull() && m_canceled_note_isValid;

    m_completed_note_isValid = ::OpenAPI::fromJsonValue(m_completed_note, json[QString("completed_note")]);
    m_completed_note_isSet = !json[QString("completed_note")].isNull() && m_completed_note_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_order_history_isValid = ::OpenAPI::fromJsonValue(m_order_history, json[QString("order_history")]);
    m_order_history_isSet = !json[QString("order_history")].isNull() && m_order_history_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("payment_id")]);
    m_payment_id_isSet = !json[QString("payment_id")].isNull() && m_payment_id_isValid;

    m_promo_code_isValid = ::OpenAPI::fromJsonValue(m_promo_code, json[QString("promo_code")]);
    m_promo_code_isSet = !json[QString("promo_code")].isNull() && m_promo_code_isValid;

    m_recipient_name_isValid = ::OpenAPI::fromJsonValue(m_recipient_name, json[QString("recipient_name")]);
    m_recipient_name_isSet = !json[QString("recipient_name")].isNull() && m_recipient_name_isValid;

    m_recipient_phone_number_isValid = ::OpenAPI::fromJsonValue(m_recipient_phone_number, json[QString("recipient_phone_number")]);
    m_recipient_phone_number_isSet = !json[QString("recipient_phone_number")].isNull() && m_recipient_phone_number_isValid;

    m_refunded_note_isValid = ::OpenAPI::fromJsonValue(m_refunded_note, json[QString("refunded_note")]);
    m_refunded_note_isSet = !json[QString("refunded_note")].isNull() && m_refunded_note_isValid;

    m_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_shipping_address, json[QString("shipping_address")]);
    m_shipping_address_isSet = !json[QString("shipping_address")].isNull() && m_shipping_address_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_subtotal_money_isValid = ::OpenAPI::fromJsonValue(m_subtotal_money, json[QString("subtotal_money")]);
    m_subtotal_money_isSet = !json[QString("subtotal_money")].isNull() && m_subtotal_money_isValid;

    m_tender_isValid = ::OpenAPI::fromJsonValue(m_tender, json[QString("tender")]);
    m_tender_isSet = !json[QString("tender")].isNull() && m_tender_isValid;

    m_total_discount_money_isValid = ::OpenAPI::fromJsonValue(m_total_discount_money, json[QString("total_discount_money")]);
    m_total_discount_money_isSet = !json[QString("total_discount_money")].isNull() && m_total_discount_money_isValid;

    m_total_price_money_isValid = ::OpenAPI::fromJsonValue(m_total_price_money, json[QString("total_price_money")]);
    m_total_price_money_isSet = !json[QString("total_price_money")].isNull() && m_total_price_money_isValid;

    m_total_shipping_money_isValid = ::OpenAPI::fromJsonValue(m_total_shipping_money, json[QString("total_shipping_money")]);
    m_total_shipping_money_isSet = !json[QString("total_shipping_money")].isNull() && m_total_shipping_money_isValid;

    m_total_tax_money_isValid = ::OpenAPI::fromJsonValue(m_total_tax_money, json[QString("total_tax_money")]);
    m_total_tax_money_isSet = !json[QString("total_tax_money")].isNull() && m_total_tax_money_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIV1Order::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV1Order::asJsonObject() const {
    QJsonObject obj;
    if (m_btc_price_satoshi_isSet) {
        obj.insert(QString("btc_price_satoshi"), ::OpenAPI::toJsonValue(m_btc_price_satoshi));
    }
    if (m_btc_receive_address_isSet) {
        obj.insert(QString("btc_receive_address"), ::OpenAPI::toJsonValue(m_btc_receive_address));
    }
    if (m_buyer_email_isSet) {
        obj.insert(QString("buyer_email"), ::OpenAPI::toJsonValue(m_buyer_email));
    }
    if (m_buyer_note_isSet) {
        obj.insert(QString("buyer_note"), ::OpenAPI::toJsonValue(m_buyer_note));
    }
    if (m_canceled_note_isSet) {
        obj.insert(QString("canceled_note"), ::OpenAPI::toJsonValue(m_canceled_note));
    }
    if (m_completed_note_isSet) {
        obj.insert(QString("completed_note"), ::OpenAPI::toJsonValue(m_completed_note));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_order_history.size() > 0) {
        obj.insert(QString("order_history"), ::OpenAPI::toJsonValue(m_order_history));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("payment_id"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_promo_code_isSet) {
        obj.insert(QString("promo_code"), ::OpenAPI::toJsonValue(m_promo_code));
    }
    if (m_recipient_name_isSet) {
        obj.insert(QString("recipient_name"), ::OpenAPI::toJsonValue(m_recipient_name));
    }
    if (m_recipient_phone_number_isSet) {
        obj.insert(QString("recipient_phone_number"), ::OpenAPI::toJsonValue(m_recipient_phone_number));
    }
    if (m_refunded_note_isSet) {
        obj.insert(QString("refunded_note"), ::OpenAPI::toJsonValue(m_refunded_note));
    }
    if (m_shipping_address.isSet()) {
        obj.insert(QString("shipping_address"), ::OpenAPI::toJsonValue(m_shipping_address));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_subtotal_money.isSet()) {
        obj.insert(QString("subtotal_money"), ::OpenAPI::toJsonValue(m_subtotal_money));
    }
    if (m_tender.isSet()) {
        obj.insert(QString("tender"), ::OpenAPI::toJsonValue(m_tender));
    }
    if (m_total_discount_money.isSet()) {
        obj.insert(QString("total_discount_money"), ::OpenAPI::toJsonValue(m_total_discount_money));
    }
    if (m_total_price_money.isSet()) {
        obj.insert(QString("total_price_money"), ::OpenAPI::toJsonValue(m_total_price_money));
    }
    if (m_total_shipping_money.isSet()) {
        obj.insert(QString("total_shipping_money"), ::OpenAPI::toJsonValue(m_total_shipping_money));
    }
    if (m_total_tax_money.isSet()) {
        obj.insert(QString("total_tax_money"), ::OpenAPI::toJsonValue(m_total_tax_money));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

double OAIV1Order::getBtcPriceSatoshi() const {
    return m_btc_price_satoshi;
}
void OAIV1Order::setBtcPriceSatoshi(const double &btc_price_satoshi) {
    m_btc_price_satoshi = btc_price_satoshi;
    m_btc_price_satoshi_isSet = true;
}

bool OAIV1Order::is_btc_price_satoshi_Set() const{
    return m_btc_price_satoshi_isSet;
}

bool OAIV1Order::is_btc_price_satoshi_Valid() const{
    return m_btc_price_satoshi_isValid;
}

QString OAIV1Order::getBtcReceiveAddress() const {
    return m_btc_receive_address;
}
void OAIV1Order::setBtcReceiveAddress(const QString &btc_receive_address) {
    m_btc_receive_address = btc_receive_address;
    m_btc_receive_address_isSet = true;
}

bool OAIV1Order::is_btc_receive_address_Set() const{
    return m_btc_receive_address_isSet;
}

bool OAIV1Order::is_btc_receive_address_Valid() const{
    return m_btc_receive_address_isValid;
}

QString OAIV1Order::getBuyerEmail() const {
    return m_buyer_email;
}
void OAIV1Order::setBuyerEmail(const QString &buyer_email) {
    m_buyer_email = buyer_email;
    m_buyer_email_isSet = true;
}

bool OAIV1Order::is_buyer_email_Set() const{
    return m_buyer_email_isSet;
}

bool OAIV1Order::is_buyer_email_Valid() const{
    return m_buyer_email_isValid;
}

QString OAIV1Order::getBuyerNote() const {
    return m_buyer_note;
}
void OAIV1Order::setBuyerNote(const QString &buyer_note) {
    m_buyer_note = buyer_note;
    m_buyer_note_isSet = true;
}

bool OAIV1Order::is_buyer_note_Set() const{
    return m_buyer_note_isSet;
}

bool OAIV1Order::is_buyer_note_Valid() const{
    return m_buyer_note_isValid;
}

QString OAIV1Order::getCanceledNote() const {
    return m_canceled_note;
}
void OAIV1Order::setCanceledNote(const QString &canceled_note) {
    m_canceled_note = canceled_note;
    m_canceled_note_isSet = true;
}

bool OAIV1Order::is_canceled_note_Set() const{
    return m_canceled_note_isSet;
}

bool OAIV1Order::is_canceled_note_Valid() const{
    return m_canceled_note_isValid;
}

QString OAIV1Order::getCompletedNote() const {
    return m_completed_note;
}
void OAIV1Order::setCompletedNote(const QString &completed_note) {
    m_completed_note = completed_note;
    m_completed_note_isSet = true;
}

bool OAIV1Order::is_completed_note_Set() const{
    return m_completed_note_isSet;
}

bool OAIV1Order::is_completed_note_Valid() const{
    return m_completed_note_isValid;
}

QString OAIV1Order::getCreatedAt() const {
    return m_created_at;
}
void OAIV1Order::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIV1Order::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIV1Order::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIError> OAIV1Order::getErrors() const {
    return m_errors;
}
void OAIV1Order::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIV1Order::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIV1Order::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIV1Order::getExpiresAt() const {
    return m_expires_at;
}
void OAIV1Order::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIV1Order::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIV1Order::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAIV1Order::getId() const {
    return m_id;
}
void OAIV1Order::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIV1Order::is_id_Set() const{
    return m_id_isSet;
}

bool OAIV1Order::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIV1OrderHistoryEntry> OAIV1Order::getOrderHistory() const {
    return m_order_history;
}
void OAIV1Order::setOrderHistory(const QList<OAIV1OrderHistoryEntry> &order_history) {
    m_order_history = order_history;
    m_order_history_isSet = true;
}

bool OAIV1Order::is_order_history_Set() const{
    return m_order_history_isSet;
}

bool OAIV1Order::is_order_history_Valid() const{
    return m_order_history_isValid;
}

QString OAIV1Order::getPaymentId() const {
    return m_payment_id;
}
void OAIV1Order::setPaymentId(const QString &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAIV1Order::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAIV1Order::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

QString OAIV1Order::getPromoCode() const {
    return m_promo_code;
}
void OAIV1Order::setPromoCode(const QString &promo_code) {
    m_promo_code = promo_code;
    m_promo_code_isSet = true;
}

bool OAIV1Order::is_promo_code_Set() const{
    return m_promo_code_isSet;
}

bool OAIV1Order::is_promo_code_Valid() const{
    return m_promo_code_isValid;
}

QString OAIV1Order::getRecipientName() const {
    return m_recipient_name;
}
void OAIV1Order::setRecipientName(const QString &recipient_name) {
    m_recipient_name = recipient_name;
    m_recipient_name_isSet = true;
}

bool OAIV1Order::is_recipient_name_Set() const{
    return m_recipient_name_isSet;
}

bool OAIV1Order::is_recipient_name_Valid() const{
    return m_recipient_name_isValid;
}

QString OAIV1Order::getRecipientPhoneNumber() const {
    return m_recipient_phone_number;
}
void OAIV1Order::setRecipientPhoneNumber(const QString &recipient_phone_number) {
    m_recipient_phone_number = recipient_phone_number;
    m_recipient_phone_number_isSet = true;
}

bool OAIV1Order::is_recipient_phone_number_Set() const{
    return m_recipient_phone_number_isSet;
}

bool OAIV1Order::is_recipient_phone_number_Valid() const{
    return m_recipient_phone_number_isValid;
}

QString OAIV1Order::getRefundedNote() const {
    return m_refunded_note;
}
void OAIV1Order::setRefundedNote(const QString &refunded_note) {
    m_refunded_note = refunded_note;
    m_refunded_note_isSet = true;
}

bool OAIV1Order::is_refunded_note_Set() const{
    return m_refunded_note_isSet;
}

bool OAIV1Order::is_refunded_note_Valid() const{
    return m_refunded_note_isValid;
}

OAIAddress OAIV1Order::getShippingAddress() const {
    return m_shipping_address;
}
void OAIV1Order::setShippingAddress(const OAIAddress &shipping_address) {
    m_shipping_address = shipping_address;
    m_shipping_address_isSet = true;
}

bool OAIV1Order::is_shipping_address_Set() const{
    return m_shipping_address_isSet;
}

bool OAIV1Order::is_shipping_address_Valid() const{
    return m_shipping_address_isValid;
}

QString OAIV1Order::getState() const {
    return m_state;
}
void OAIV1Order::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIV1Order::is_state_Set() const{
    return m_state_isSet;
}

bool OAIV1Order::is_state_Valid() const{
    return m_state_isValid;
}

OAIV1Money OAIV1Order::getSubtotalMoney() const {
    return m_subtotal_money;
}
void OAIV1Order::setSubtotalMoney(const OAIV1Money &subtotal_money) {
    m_subtotal_money = subtotal_money;
    m_subtotal_money_isSet = true;
}

bool OAIV1Order::is_subtotal_money_Set() const{
    return m_subtotal_money_isSet;
}

bool OAIV1Order::is_subtotal_money_Valid() const{
    return m_subtotal_money_isValid;
}

OAIV1Tender OAIV1Order::getTender() const {
    return m_tender;
}
void OAIV1Order::setTender(const OAIV1Tender &tender) {
    m_tender = tender;
    m_tender_isSet = true;
}

bool OAIV1Order::is_tender_Set() const{
    return m_tender_isSet;
}

bool OAIV1Order::is_tender_Valid() const{
    return m_tender_isValid;
}

OAIV1Money OAIV1Order::getTotalDiscountMoney() const {
    return m_total_discount_money;
}
void OAIV1Order::setTotalDiscountMoney(const OAIV1Money &total_discount_money) {
    m_total_discount_money = total_discount_money;
    m_total_discount_money_isSet = true;
}

bool OAIV1Order::is_total_discount_money_Set() const{
    return m_total_discount_money_isSet;
}

bool OAIV1Order::is_total_discount_money_Valid() const{
    return m_total_discount_money_isValid;
}

OAIV1Money OAIV1Order::getTotalPriceMoney() const {
    return m_total_price_money;
}
void OAIV1Order::setTotalPriceMoney(const OAIV1Money &total_price_money) {
    m_total_price_money = total_price_money;
    m_total_price_money_isSet = true;
}

bool OAIV1Order::is_total_price_money_Set() const{
    return m_total_price_money_isSet;
}

bool OAIV1Order::is_total_price_money_Valid() const{
    return m_total_price_money_isValid;
}

OAIV1Money OAIV1Order::getTotalShippingMoney() const {
    return m_total_shipping_money;
}
void OAIV1Order::setTotalShippingMoney(const OAIV1Money &total_shipping_money) {
    m_total_shipping_money = total_shipping_money;
    m_total_shipping_money_isSet = true;
}

bool OAIV1Order::is_total_shipping_money_Set() const{
    return m_total_shipping_money_isSet;
}

bool OAIV1Order::is_total_shipping_money_Valid() const{
    return m_total_shipping_money_isValid;
}

OAIV1Money OAIV1Order::getTotalTaxMoney() const {
    return m_total_tax_money;
}
void OAIV1Order::setTotalTaxMoney(const OAIV1Money &total_tax_money) {
    m_total_tax_money = total_tax_money;
    m_total_tax_money_isSet = true;
}

bool OAIV1Order::is_total_tax_money_Set() const{
    return m_total_tax_money_isSet;
}

bool OAIV1Order::is_total_tax_money_Valid() const{
    return m_total_tax_money_isValid;
}

QString OAIV1Order::getUpdatedAt() const {
    return m_updated_at;
}
void OAIV1Order::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIV1Order::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIV1Order::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIV1Order::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_btc_price_satoshi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_btc_receive_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promo_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_discount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_price_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_shipping_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tax_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV1Order::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
