/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISubscriptionsApi_H
#define OAI_OAISubscriptionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICancelSubscriptionResponse.h"
#include "OAICreateSubscriptionRequest.h"
#include "OAICreateSubscriptionResponse.h"
#include "OAIListSubscriptionEventsResponse.h"
#include "OAIResumeSubscriptionResponse.h"
#include "OAIRetrieveSubscriptionResponse.h"
#include "OAISearchSubscriptionsRequest.h"
#include "OAISearchSubscriptionsResponse.h"
#include "OAIUpdateSubscriptionRequest.h"
#include "OAIUpdateSubscriptionResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISubscriptionsApi : public QObject {
    Q_OBJECT

public:
    OAISubscriptionsApi(const int timeOut = 0);
    ~OAISubscriptionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    */
    virtual void cancelSubscription(const QString &subscription_id);

    /**
    * @param[in]  oai_create_subscription_request OAICreateSubscriptionRequest [required]
    */
    virtual void createSubscription(const OAICreateSubscriptionRequest &oai_create_subscription_request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listSubscriptionEvents(const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  subscription_id QString [required]
    */
    virtual void resumeSubscription(const QString &subscription_id);

    /**
    * @param[in]  subscription_id QString [required]
    */
    virtual void retrieveSubscription(const QString &subscription_id);

    /**
    * @param[in]  oai_search_subscriptions_request OAISearchSubscriptionsRequest [required]
    */
    virtual void searchSubscriptions(const OAISearchSubscriptionsRequest &oai_search_subscriptions_request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  oai_update_subscription_request OAIUpdateSubscriptionRequest [required]
    */
    virtual void updateSubscription(const QString &subscription_id, const OAIUpdateSubscriptionRequest &oai_update_subscription_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelSubscriptionCallback(OAIHttpRequestWorker *worker);
    void createSubscriptionCallback(OAIHttpRequestWorker *worker);
    void listSubscriptionEventsCallback(OAIHttpRequestWorker *worker);
    void resumeSubscriptionCallback(OAIHttpRequestWorker *worker);
    void retrieveSubscriptionCallback(OAIHttpRequestWorker *worker);
    void searchSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void updateSubscriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelSubscriptionSignal(OAICancelSubscriptionResponse summary);
    void createSubscriptionSignal(OAICreateSubscriptionResponse summary);
    void listSubscriptionEventsSignal(OAIListSubscriptionEventsResponse summary);
    void resumeSubscriptionSignal(OAIResumeSubscriptionResponse summary);
    void retrieveSubscriptionSignal(OAIRetrieveSubscriptionResponse summary);
    void searchSubscriptionsSignal(OAISearchSubscriptionsResponse summary);
    void updateSubscriptionSignal(OAIUpdateSubscriptionResponse summary);


    void cancelSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAICancelSubscriptionResponse summary);
    void createSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAICreateSubscriptionResponse summary);
    void listSubscriptionEventsSignalFull(OAIHttpRequestWorker *worker, OAIListSubscriptionEventsResponse summary);
    void resumeSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIResumeSubscriptionResponse summary);
    void retrieveSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveSubscriptionResponse summary);
    void searchSubscriptionsSignalFull(OAIHttpRequestWorker *worker, OAISearchSubscriptionsResponse summary);
    void updateSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSubscriptionResponse summary);

    Q_DECL_DEPRECATED_X("Use cancelSubscriptionSignalError() instead")
    void cancelSubscriptionSignalE(OAICancelSubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelSubscriptionSignalError(OAICancelSubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSubscriptionSignalError() instead")
    void createSubscriptionSignalE(OAICreateSubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubscriptionSignalError(OAICreateSubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSubscriptionEventsSignalError() instead")
    void listSubscriptionEventsSignalE(OAIListSubscriptionEventsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSubscriptionEventsSignalError(OAIListSubscriptionEventsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumeSubscriptionSignalError() instead")
    void resumeSubscriptionSignalE(OAIResumeSubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resumeSubscriptionSignalError(OAIResumeSubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveSubscriptionSignalError() instead")
    void retrieveSubscriptionSignalE(OAIRetrieveSubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveSubscriptionSignalError(OAIRetrieveSubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSubscriptionsSignalError() instead")
    void searchSubscriptionsSignalE(OAISearchSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSubscriptionsSignalError(OAISearchSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscriptionSignalError() instead")
    void updateSubscriptionSignalE(OAIUpdateSubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscriptionSignalError(OAIUpdateSubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelSubscriptionSignalErrorFull() instead")
    void cancelSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSubscriptionSignalErrorFull() instead")
    void createSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSubscriptionEventsSignalErrorFull() instead")
    void listSubscriptionEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSubscriptionEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumeSubscriptionSignalErrorFull() instead")
    void resumeSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resumeSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveSubscriptionSignalErrorFull() instead")
    void retrieveSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSubscriptionsSignalErrorFull() instead")
    void searchSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscriptionSignalErrorFull() instead")
    void updateSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
