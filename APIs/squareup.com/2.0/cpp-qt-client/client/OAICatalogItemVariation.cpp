/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogItemVariation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogItemVariation::OAICatalogItemVariation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogItemVariation::OAICatalogItemVariation() {
    this->initializeModel();
}

OAICatalogItemVariation::~OAICatalogItemVariation() {}

void OAICatalogItemVariation::initializeModel() {

    m_available_for_booking_isSet = false;
    m_available_for_booking_isValid = false;

    m_inventory_alert_threshold_isSet = false;
    m_inventory_alert_threshold_isValid = false;

    m_inventory_alert_type_isSet = false;
    m_inventory_alert_type_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_item_option_values_isSet = false;
    m_item_option_values_isValid = false;

    m_location_overrides_isSet = false;
    m_location_overrides_isValid = false;

    m_measurement_unit_id_isSet = false;
    m_measurement_unit_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ordinal_isSet = false;
    m_ordinal_isValid = false;

    m_price_money_isSet = false;
    m_price_money_isValid = false;

    m_pricing_type_isSet = false;
    m_pricing_type_isValid = false;

    m_service_duration_isSet = false;
    m_service_duration_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_stockable_isSet = false;
    m_stockable_isValid = false;

    m_stockable_conversion_isSet = false;
    m_stockable_conversion_isValid = false;

    m_team_member_ids_isSet = false;
    m_team_member_ids_isValid = false;

    m_track_inventory_isSet = false;
    m_track_inventory_isValid = false;

    m_upc_isSet = false;
    m_upc_isValid = false;

    m_user_data_isSet = false;
    m_user_data_isValid = false;
}

void OAICatalogItemVariation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogItemVariation::fromJsonObject(QJsonObject json) {

    m_available_for_booking_isValid = ::OpenAPI::fromJsonValue(m_available_for_booking, json[QString("available_for_booking")]);
    m_available_for_booking_isSet = !json[QString("available_for_booking")].isNull() && m_available_for_booking_isValid;

    m_inventory_alert_threshold_isValid = ::OpenAPI::fromJsonValue(m_inventory_alert_threshold, json[QString("inventory_alert_threshold")]);
    m_inventory_alert_threshold_isSet = !json[QString("inventory_alert_threshold")].isNull() && m_inventory_alert_threshold_isValid;

    m_inventory_alert_type_isValid = ::OpenAPI::fromJsonValue(m_inventory_alert_type, json[QString("inventory_alert_type")]);
    m_inventory_alert_type_isSet = !json[QString("inventory_alert_type")].isNull() && m_inventory_alert_type_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("item_id")]);
    m_item_id_isSet = !json[QString("item_id")].isNull() && m_item_id_isValid;

    m_item_option_values_isValid = ::OpenAPI::fromJsonValue(m_item_option_values, json[QString("item_option_values")]);
    m_item_option_values_isSet = !json[QString("item_option_values")].isNull() && m_item_option_values_isValid;

    m_location_overrides_isValid = ::OpenAPI::fromJsonValue(m_location_overrides, json[QString("location_overrides")]);
    m_location_overrides_isSet = !json[QString("location_overrides")].isNull() && m_location_overrides_isValid;

    m_measurement_unit_id_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit_id, json[QString("measurement_unit_id")]);
    m_measurement_unit_id_isSet = !json[QString("measurement_unit_id")].isNull() && m_measurement_unit_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ordinal_isValid = ::OpenAPI::fromJsonValue(m_ordinal, json[QString("ordinal")]);
    m_ordinal_isSet = !json[QString("ordinal")].isNull() && m_ordinal_isValid;

    m_price_money_isValid = ::OpenAPI::fromJsonValue(m_price_money, json[QString("price_money")]);
    m_price_money_isSet = !json[QString("price_money")].isNull() && m_price_money_isValid;

    m_pricing_type_isValid = ::OpenAPI::fromJsonValue(m_pricing_type, json[QString("pricing_type")]);
    m_pricing_type_isSet = !json[QString("pricing_type")].isNull() && m_pricing_type_isValid;

    m_service_duration_isValid = ::OpenAPI::fromJsonValue(m_service_duration, json[QString("service_duration")]);
    m_service_duration_isSet = !json[QString("service_duration")].isNull() && m_service_duration_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_stockable_isValid = ::OpenAPI::fromJsonValue(m_stockable, json[QString("stockable")]);
    m_stockable_isSet = !json[QString("stockable")].isNull() && m_stockable_isValid;

    m_stockable_conversion_isValid = ::OpenAPI::fromJsonValue(m_stockable_conversion, json[QString("stockable_conversion")]);
    m_stockable_conversion_isSet = !json[QString("stockable_conversion")].isNull() && m_stockable_conversion_isValid;

    m_team_member_ids_isValid = ::OpenAPI::fromJsonValue(m_team_member_ids, json[QString("team_member_ids")]);
    m_team_member_ids_isSet = !json[QString("team_member_ids")].isNull() && m_team_member_ids_isValid;

    m_track_inventory_isValid = ::OpenAPI::fromJsonValue(m_track_inventory, json[QString("track_inventory")]);
    m_track_inventory_isSet = !json[QString("track_inventory")].isNull() && m_track_inventory_isValid;

    m_upc_isValid = ::OpenAPI::fromJsonValue(m_upc, json[QString("upc")]);
    m_upc_isSet = !json[QString("upc")].isNull() && m_upc_isValid;

    m_user_data_isValid = ::OpenAPI::fromJsonValue(m_user_data, json[QString("user_data")]);
    m_user_data_isSet = !json[QString("user_data")].isNull() && m_user_data_isValid;
}

QString OAICatalogItemVariation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogItemVariation::asJsonObject() const {
    QJsonObject obj;
    if (m_available_for_booking_isSet) {
        obj.insert(QString("available_for_booking"), ::OpenAPI::toJsonValue(m_available_for_booking));
    }
    if (m_inventory_alert_threshold_isSet) {
        obj.insert(QString("inventory_alert_threshold"), ::OpenAPI::toJsonValue(m_inventory_alert_threshold));
    }
    if (m_inventory_alert_type_isSet) {
        obj.insert(QString("inventory_alert_type"), ::OpenAPI::toJsonValue(m_inventory_alert_type));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("item_id"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_item_option_values.size() > 0) {
        obj.insert(QString("item_option_values"), ::OpenAPI::toJsonValue(m_item_option_values));
    }
    if (m_location_overrides.size() > 0) {
        obj.insert(QString("location_overrides"), ::OpenAPI::toJsonValue(m_location_overrides));
    }
    if (m_measurement_unit_id_isSet) {
        obj.insert(QString("measurement_unit_id"), ::OpenAPI::toJsonValue(m_measurement_unit_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ordinal_isSet) {
        obj.insert(QString("ordinal"), ::OpenAPI::toJsonValue(m_ordinal));
    }
    if (m_price_money.isSet()) {
        obj.insert(QString("price_money"), ::OpenAPI::toJsonValue(m_price_money));
    }
    if (m_pricing_type_isSet) {
        obj.insert(QString("pricing_type"), ::OpenAPI::toJsonValue(m_pricing_type));
    }
    if (m_service_duration_isSet) {
        obj.insert(QString("service_duration"), ::OpenAPI::toJsonValue(m_service_duration));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_stockable_isSet) {
        obj.insert(QString("stockable"), ::OpenAPI::toJsonValue(m_stockable));
    }
    if (m_stockable_conversion.isSet()) {
        obj.insert(QString("stockable_conversion"), ::OpenAPI::toJsonValue(m_stockable_conversion));
    }
    if (m_team_member_ids.size() > 0) {
        obj.insert(QString("team_member_ids"), ::OpenAPI::toJsonValue(m_team_member_ids));
    }
    if (m_track_inventory_isSet) {
        obj.insert(QString("track_inventory"), ::OpenAPI::toJsonValue(m_track_inventory));
    }
    if (m_upc_isSet) {
        obj.insert(QString("upc"), ::OpenAPI::toJsonValue(m_upc));
    }
    if (m_user_data_isSet) {
        obj.insert(QString("user_data"), ::OpenAPI::toJsonValue(m_user_data));
    }
    return obj;
}

bool OAICatalogItemVariation::isAvailableForBooking() const {
    return m_available_for_booking;
}
void OAICatalogItemVariation::setAvailableForBooking(const bool &available_for_booking) {
    m_available_for_booking = available_for_booking;
    m_available_for_booking_isSet = true;
}

bool OAICatalogItemVariation::is_available_for_booking_Set() const{
    return m_available_for_booking_isSet;
}

bool OAICatalogItemVariation::is_available_for_booking_Valid() const{
    return m_available_for_booking_isValid;
}

qint64 OAICatalogItemVariation::getInventoryAlertThreshold() const {
    return m_inventory_alert_threshold;
}
void OAICatalogItemVariation::setInventoryAlertThreshold(const qint64 &inventory_alert_threshold) {
    m_inventory_alert_threshold = inventory_alert_threshold;
    m_inventory_alert_threshold_isSet = true;
}

bool OAICatalogItemVariation::is_inventory_alert_threshold_Set() const{
    return m_inventory_alert_threshold_isSet;
}

bool OAICatalogItemVariation::is_inventory_alert_threshold_Valid() const{
    return m_inventory_alert_threshold_isValid;
}

QString OAICatalogItemVariation::getInventoryAlertType() const {
    return m_inventory_alert_type;
}
void OAICatalogItemVariation::setInventoryAlertType(const QString &inventory_alert_type) {
    m_inventory_alert_type = inventory_alert_type;
    m_inventory_alert_type_isSet = true;
}

bool OAICatalogItemVariation::is_inventory_alert_type_Set() const{
    return m_inventory_alert_type_isSet;
}

bool OAICatalogItemVariation::is_inventory_alert_type_Valid() const{
    return m_inventory_alert_type_isValid;
}

QString OAICatalogItemVariation::getItemId() const {
    return m_item_id;
}
void OAICatalogItemVariation::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAICatalogItemVariation::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAICatalogItemVariation::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QList<OAICatalogItemOptionValueForItemVariation> OAICatalogItemVariation::getItemOptionValues() const {
    return m_item_option_values;
}
void OAICatalogItemVariation::setItemOptionValues(const QList<OAICatalogItemOptionValueForItemVariation> &item_option_values) {
    m_item_option_values = item_option_values;
    m_item_option_values_isSet = true;
}

bool OAICatalogItemVariation::is_item_option_values_Set() const{
    return m_item_option_values_isSet;
}

bool OAICatalogItemVariation::is_item_option_values_Valid() const{
    return m_item_option_values_isValid;
}

QList<OAIItemVariationLocationOverrides> OAICatalogItemVariation::getLocationOverrides() const {
    return m_location_overrides;
}
void OAICatalogItemVariation::setLocationOverrides(const QList<OAIItemVariationLocationOverrides> &location_overrides) {
    m_location_overrides = location_overrides;
    m_location_overrides_isSet = true;
}

bool OAICatalogItemVariation::is_location_overrides_Set() const{
    return m_location_overrides_isSet;
}

bool OAICatalogItemVariation::is_location_overrides_Valid() const{
    return m_location_overrides_isValid;
}

QString OAICatalogItemVariation::getMeasurementUnitId() const {
    return m_measurement_unit_id;
}
void OAICatalogItemVariation::setMeasurementUnitId(const QString &measurement_unit_id) {
    m_measurement_unit_id = measurement_unit_id;
    m_measurement_unit_id_isSet = true;
}

bool OAICatalogItemVariation::is_measurement_unit_id_Set() const{
    return m_measurement_unit_id_isSet;
}

bool OAICatalogItemVariation::is_measurement_unit_id_Valid() const{
    return m_measurement_unit_id_isValid;
}

QString OAICatalogItemVariation::getName() const {
    return m_name;
}
void OAICatalogItemVariation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICatalogItemVariation::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalogItemVariation::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICatalogItemVariation::getOrdinal() const {
    return m_ordinal;
}
void OAICatalogItemVariation::setOrdinal(const qint32 &ordinal) {
    m_ordinal = ordinal;
    m_ordinal_isSet = true;
}

bool OAICatalogItemVariation::is_ordinal_Set() const{
    return m_ordinal_isSet;
}

bool OAICatalogItemVariation::is_ordinal_Valid() const{
    return m_ordinal_isValid;
}

OAIMoney OAICatalogItemVariation::getPriceMoney() const {
    return m_price_money;
}
void OAICatalogItemVariation::setPriceMoney(const OAIMoney &price_money) {
    m_price_money = price_money;
    m_price_money_isSet = true;
}

bool OAICatalogItemVariation::is_price_money_Set() const{
    return m_price_money_isSet;
}

bool OAICatalogItemVariation::is_price_money_Valid() const{
    return m_price_money_isValid;
}

QString OAICatalogItemVariation::getPricingType() const {
    return m_pricing_type;
}
void OAICatalogItemVariation::setPricingType(const QString &pricing_type) {
    m_pricing_type = pricing_type;
    m_pricing_type_isSet = true;
}

bool OAICatalogItemVariation::is_pricing_type_Set() const{
    return m_pricing_type_isSet;
}

bool OAICatalogItemVariation::is_pricing_type_Valid() const{
    return m_pricing_type_isValid;
}

qint64 OAICatalogItemVariation::getServiceDuration() const {
    return m_service_duration;
}
void OAICatalogItemVariation::setServiceDuration(const qint64 &service_duration) {
    m_service_duration = service_duration;
    m_service_duration_isSet = true;
}

bool OAICatalogItemVariation::is_service_duration_Set() const{
    return m_service_duration_isSet;
}

bool OAICatalogItemVariation::is_service_duration_Valid() const{
    return m_service_duration_isValid;
}

QString OAICatalogItemVariation::getSku() const {
    return m_sku;
}
void OAICatalogItemVariation::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAICatalogItemVariation::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAICatalogItemVariation::is_sku_Valid() const{
    return m_sku_isValid;
}

bool OAICatalogItemVariation::isStockable() const {
    return m_stockable;
}
void OAICatalogItemVariation::setStockable(const bool &stockable) {
    m_stockable = stockable;
    m_stockable_isSet = true;
}

bool OAICatalogItemVariation::is_stockable_Set() const{
    return m_stockable_isSet;
}

bool OAICatalogItemVariation::is_stockable_Valid() const{
    return m_stockable_isValid;
}

OAICatalogStockConversion OAICatalogItemVariation::getStockableConversion() const {
    return m_stockable_conversion;
}
void OAICatalogItemVariation::setStockableConversion(const OAICatalogStockConversion &stockable_conversion) {
    m_stockable_conversion = stockable_conversion;
    m_stockable_conversion_isSet = true;
}

bool OAICatalogItemVariation::is_stockable_conversion_Set() const{
    return m_stockable_conversion_isSet;
}

bool OAICatalogItemVariation::is_stockable_conversion_Valid() const{
    return m_stockable_conversion_isValid;
}

QList<QString> OAICatalogItemVariation::getTeamMemberIds() const {
    return m_team_member_ids;
}
void OAICatalogItemVariation::setTeamMemberIds(const QList<QString> &team_member_ids) {
    m_team_member_ids = team_member_ids;
    m_team_member_ids_isSet = true;
}

bool OAICatalogItemVariation::is_team_member_ids_Set() const{
    return m_team_member_ids_isSet;
}

bool OAICatalogItemVariation::is_team_member_ids_Valid() const{
    return m_team_member_ids_isValid;
}

bool OAICatalogItemVariation::isTrackInventory() const {
    return m_track_inventory;
}
void OAICatalogItemVariation::setTrackInventory(const bool &track_inventory) {
    m_track_inventory = track_inventory;
    m_track_inventory_isSet = true;
}

bool OAICatalogItemVariation::is_track_inventory_Set() const{
    return m_track_inventory_isSet;
}

bool OAICatalogItemVariation::is_track_inventory_Valid() const{
    return m_track_inventory_isValid;
}

QString OAICatalogItemVariation::getUpc() const {
    return m_upc;
}
void OAICatalogItemVariation::setUpc(const QString &upc) {
    m_upc = upc;
    m_upc_isSet = true;
}

bool OAICatalogItemVariation::is_upc_Set() const{
    return m_upc_isSet;
}

bool OAICatalogItemVariation::is_upc_Valid() const{
    return m_upc_isValid;
}

QString OAICatalogItemVariation::getUserData() const {
    return m_user_data;
}
void OAICatalogItemVariation::setUserData(const QString &user_data) {
    m_user_data = user_data;
    m_user_data_isSet = true;
}

bool OAICatalogItemVariation::is_user_data_Set() const{
    return m_user_data_isSet;
}

bool OAICatalogItemVariation::is_user_data_Valid() const{
    return m_user_data_isValid;
}

bool OAICatalogItemVariation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_for_booking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_alert_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_alert_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_option_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordinal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stockable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stockable_conversion.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_member_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_inventory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogItemVariation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
