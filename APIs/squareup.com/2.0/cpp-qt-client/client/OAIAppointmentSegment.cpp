/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppointmentSegment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppointmentSegment::OAIAppointmentSegment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppointmentSegment::OAIAppointmentSegment() {
    this->initializeModel();
}

OAIAppointmentSegment::~OAIAppointmentSegment() {}

void OAIAppointmentSegment::initializeModel() {

    m_duration_minutes_isSet = false;
    m_duration_minutes_isValid = false;

    m_service_variation_id_isSet = false;
    m_service_variation_id_isValid = false;

    m_service_variation_version_isSet = false;
    m_service_variation_version_isValid = false;

    m_team_member_id_isSet = false;
    m_team_member_id_isValid = false;
}

void OAIAppointmentSegment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppointmentSegment::fromJsonObject(QJsonObject json) {

    m_duration_minutes_isValid = ::OpenAPI::fromJsonValue(m_duration_minutes, json[QString("duration_minutes")]);
    m_duration_minutes_isSet = !json[QString("duration_minutes")].isNull() && m_duration_minutes_isValid;

    m_service_variation_id_isValid = ::OpenAPI::fromJsonValue(m_service_variation_id, json[QString("service_variation_id")]);
    m_service_variation_id_isSet = !json[QString("service_variation_id")].isNull() && m_service_variation_id_isValid;

    m_service_variation_version_isValid = ::OpenAPI::fromJsonValue(m_service_variation_version, json[QString("service_variation_version")]);
    m_service_variation_version_isSet = !json[QString("service_variation_version")].isNull() && m_service_variation_version_isValid;

    m_team_member_id_isValid = ::OpenAPI::fromJsonValue(m_team_member_id, json[QString("team_member_id")]);
    m_team_member_id_isSet = !json[QString("team_member_id")].isNull() && m_team_member_id_isValid;
}

QString OAIAppointmentSegment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppointmentSegment::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_minutes_isSet) {
        obj.insert(QString("duration_minutes"), ::OpenAPI::toJsonValue(m_duration_minutes));
    }
    if (m_service_variation_id_isSet) {
        obj.insert(QString("service_variation_id"), ::OpenAPI::toJsonValue(m_service_variation_id));
    }
    if (m_service_variation_version_isSet) {
        obj.insert(QString("service_variation_version"), ::OpenAPI::toJsonValue(m_service_variation_version));
    }
    if (m_team_member_id_isSet) {
        obj.insert(QString("team_member_id"), ::OpenAPI::toJsonValue(m_team_member_id));
    }
    return obj;
}

qint32 OAIAppointmentSegment::getDurationMinutes() const {
    return m_duration_minutes;
}
void OAIAppointmentSegment::setDurationMinutes(const qint32 &duration_minutes) {
    m_duration_minutes = duration_minutes;
    m_duration_minutes_isSet = true;
}

bool OAIAppointmentSegment::is_duration_minutes_Set() const{
    return m_duration_minutes_isSet;
}

bool OAIAppointmentSegment::is_duration_minutes_Valid() const{
    return m_duration_minutes_isValid;
}

QString OAIAppointmentSegment::getServiceVariationId() const {
    return m_service_variation_id;
}
void OAIAppointmentSegment::setServiceVariationId(const QString &service_variation_id) {
    m_service_variation_id = service_variation_id;
    m_service_variation_id_isSet = true;
}

bool OAIAppointmentSegment::is_service_variation_id_Set() const{
    return m_service_variation_id_isSet;
}

bool OAIAppointmentSegment::is_service_variation_id_Valid() const{
    return m_service_variation_id_isValid;
}

qint64 OAIAppointmentSegment::getServiceVariationVersion() const {
    return m_service_variation_version;
}
void OAIAppointmentSegment::setServiceVariationVersion(const qint64 &service_variation_version) {
    m_service_variation_version = service_variation_version;
    m_service_variation_version_isSet = true;
}

bool OAIAppointmentSegment::is_service_variation_version_Set() const{
    return m_service_variation_version_isSet;
}

bool OAIAppointmentSegment::is_service_variation_version_Valid() const{
    return m_service_variation_version_isValid;
}

QString OAIAppointmentSegment::getTeamMemberId() const {
    return m_team_member_id;
}
void OAIAppointmentSegment::setTeamMemberId(const QString &team_member_id) {
    m_team_member_id = team_member_id;
    m_team_member_id_isSet = true;
}

bool OAIAppointmentSegment::is_team_member_id_Set() const{
    return m_team_member_id_isSet;
}

bool OAIAppointmentSegment::is_team_member_id_Valid() const{
    return m_team_member_id_isValid;
}

bool OAIAppointmentSegment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_variation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_variation_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppointmentSegment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duration_minutes_isValid && m_service_variation_id_isValid && m_service_variation_version_isValid && m_team_member_id_isValid && true;
}

} // namespace OpenAPI
