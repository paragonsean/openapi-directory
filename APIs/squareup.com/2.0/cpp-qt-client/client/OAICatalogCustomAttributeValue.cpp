/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogCustomAttributeValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogCustomAttributeValue::OAICatalogCustomAttributeValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogCustomAttributeValue::OAICatalogCustomAttributeValue() {
    this->initializeModel();
}

OAICatalogCustomAttributeValue::~OAICatalogCustomAttributeValue() {}

void OAICatalogCustomAttributeValue::initializeModel() {

    m_boolean_value_isSet = false;
    m_boolean_value_isValid = false;

    m_custom_attribute_definition_id_isSet = false;
    m_custom_attribute_definition_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_value_isSet = false;
    m_number_value_isValid = false;

    m_selection_uid_values_isSet = false;
    m_selection_uid_values_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICatalogCustomAttributeValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogCustomAttributeValue::fromJsonObject(QJsonObject json) {

    m_boolean_value_isValid = ::OpenAPI::fromJsonValue(m_boolean_value, json[QString("boolean_value")]);
    m_boolean_value_isSet = !json[QString("boolean_value")].isNull() && m_boolean_value_isValid;

    m_custom_attribute_definition_id_isValid = ::OpenAPI::fromJsonValue(m_custom_attribute_definition_id, json[QString("custom_attribute_definition_id")]);
    m_custom_attribute_definition_id_isSet = !json[QString("custom_attribute_definition_id")].isNull() && m_custom_attribute_definition_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_value_isValid = ::OpenAPI::fromJsonValue(m_number_value, json[QString("number_value")]);
    m_number_value_isSet = !json[QString("number_value")].isNull() && m_number_value_isValid;

    m_selection_uid_values_isValid = ::OpenAPI::fromJsonValue(m_selection_uid_values, json[QString("selection_uid_values")]);
    m_selection_uid_values_isSet = !json[QString("selection_uid_values")].isNull() && m_selection_uid_values_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("string_value")]);
    m_string_value_isSet = !json[QString("string_value")].isNull() && m_string_value_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICatalogCustomAttributeValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogCustomAttributeValue::asJsonObject() const {
    QJsonObject obj;
    if (m_boolean_value_isSet) {
        obj.insert(QString("boolean_value"), ::OpenAPI::toJsonValue(m_boolean_value));
    }
    if (m_custom_attribute_definition_id_isSet) {
        obj.insert(QString("custom_attribute_definition_id"), ::OpenAPI::toJsonValue(m_custom_attribute_definition_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_value_isSet) {
        obj.insert(QString("number_value"), ::OpenAPI::toJsonValue(m_number_value));
    }
    if (m_selection_uid_values.size() > 0) {
        obj.insert(QString("selection_uid_values"), ::OpenAPI::toJsonValue(m_selection_uid_values));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("string_value"), ::OpenAPI::toJsonValue(m_string_value));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAICatalogCustomAttributeValue::isBooleanValue() const {
    return m_boolean_value;
}
void OAICatalogCustomAttributeValue::setBooleanValue(const bool &boolean_value) {
    m_boolean_value = boolean_value;
    m_boolean_value_isSet = true;
}

bool OAICatalogCustomAttributeValue::is_boolean_value_Set() const{
    return m_boolean_value_isSet;
}

bool OAICatalogCustomAttributeValue::is_boolean_value_Valid() const{
    return m_boolean_value_isValid;
}

QString OAICatalogCustomAttributeValue::getCustomAttributeDefinitionId() const {
    return m_custom_attribute_definition_id;
}
void OAICatalogCustomAttributeValue::setCustomAttributeDefinitionId(const QString &custom_attribute_definition_id) {
    m_custom_attribute_definition_id = custom_attribute_definition_id;
    m_custom_attribute_definition_id_isSet = true;
}

bool OAICatalogCustomAttributeValue::is_custom_attribute_definition_id_Set() const{
    return m_custom_attribute_definition_id_isSet;
}

bool OAICatalogCustomAttributeValue::is_custom_attribute_definition_id_Valid() const{
    return m_custom_attribute_definition_id_isValid;
}

QString OAICatalogCustomAttributeValue::getKey() const {
    return m_key;
}
void OAICatalogCustomAttributeValue::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICatalogCustomAttributeValue::is_key_Set() const{
    return m_key_isSet;
}

bool OAICatalogCustomAttributeValue::is_key_Valid() const{
    return m_key_isValid;
}

QString OAICatalogCustomAttributeValue::getName() const {
    return m_name;
}
void OAICatalogCustomAttributeValue::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICatalogCustomAttributeValue::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalogCustomAttributeValue::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICatalogCustomAttributeValue::getNumberValue() const {
    return m_number_value;
}
void OAICatalogCustomAttributeValue::setNumberValue(const QString &number_value) {
    m_number_value = number_value;
    m_number_value_isSet = true;
}

bool OAICatalogCustomAttributeValue::is_number_value_Set() const{
    return m_number_value_isSet;
}

bool OAICatalogCustomAttributeValue::is_number_value_Valid() const{
    return m_number_value_isValid;
}

QList<QString> OAICatalogCustomAttributeValue::getSelectionUidValues() const {
    return m_selection_uid_values;
}
void OAICatalogCustomAttributeValue::setSelectionUidValues(const QList<QString> &selection_uid_values) {
    m_selection_uid_values = selection_uid_values;
    m_selection_uid_values_isSet = true;
}

bool OAICatalogCustomAttributeValue::is_selection_uid_values_Set() const{
    return m_selection_uid_values_isSet;
}

bool OAICatalogCustomAttributeValue::is_selection_uid_values_Valid() const{
    return m_selection_uid_values_isValid;
}

QString OAICatalogCustomAttributeValue::getStringValue() const {
    return m_string_value;
}
void OAICatalogCustomAttributeValue::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAICatalogCustomAttributeValue::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAICatalogCustomAttributeValue::is_string_value_Valid() const{
    return m_string_value_isValid;
}

QString OAICatalogCustomAttributeValue::getType() const {
    return m_type;
}
void OAICatalogCustomAttributeValue::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICatalogCustomAttributeValue::is_type_Set() const{
    return m_type_isSet;
}

bool OAICatalogCustomAttributeValue::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICatalogCustomAttributeValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boolean_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attribute_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_uid_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogCustomAttributeValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
