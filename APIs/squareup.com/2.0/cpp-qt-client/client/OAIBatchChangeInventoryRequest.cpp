/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchChangeInventoryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchChangeInventoryRequest::OAIBatchChangeInventoryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchChangeInventoryRequest::OAIBatchChangeInventoryRequest() {
    this->initializeModel();
}

OAIBatchChangeInventoryRequest::~OAIBatchChangeInventoryRequest() {}

void OAIBatchChangeInventoryRequest::initializeModel() {

    m_changes_isSet = false;
    m_changes_isValid = false;

    m_idempotency_key_isSet = false;
    m_idempotency_key_isValid = false;

    m_ignore_unchanged_counts_isSet = false;
    m_ignore_unchanged_counts_isValid = false;
}

void OAIBatchChangeInventoryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchChangeInventoryRequest::fromJsonObject(QJsonObject json) {

    m_changes_isValid = ::OpenAPI::fromJsonValue(m_changes, json[QString("changes")]);
    m_changes_isSet = !json[QString("changes")].isNull() && m_changes_isValid;

    m_idempotency_key_isValid = ::OpenAPI::fromJsonValue(m_idempotency_key, json[QString("idempotency_key")]);
    m_idempotency_key_isSet = !json[QString("idempotency_key")].isNull() && m_idempotency_key_isValid;

    m_ignore_unchanged_counts_isValid = ::OpenAPI::fromJsonValue(m_ignore_unchanged_counts, json[QString("ignore_unchanged_counts")]);
    m_ignore_unchanged_counts_isSet = !json[QString("ignore_unchanged_counts")].isNull() && m_ignore_unchanged_counts_isValid;
}

QString OAIBatchChangeInventoryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchChangeInventoryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_changes.size() > 0) {
        obj.insert(QString("changes"), ::OpenAPI::toJsonValue(m_changes));
    }
    if (m_idempotency_key_isSet) {
        obj.insert(QString("idempotency_key"), ::OpenAPI::toJsonValue(m_idempotency_key));
    }
    if (m_ignore_unchanged_counts_isSet) {
        obj.insert(QString("ignore_unchanged_counts"), ::OpenAPI::toJsonValue(m_ignore_unchanged_counts));
    }
    return obj;
}

QList<OAIInventoryChange> OAIBatchChangeInventoryRequest::getChanges() const {
    return m_changes;
}
void OAIBatchChangeInventoryRequest::setChanges(const QList<OAIInventoryChange> &changes) {
    m_changes = changes;
    m_changes_isSet = true;
}

bool OAIBatchChangeInventoryRequest::is_changes_Set() const{
    return m_changes_isSet;
}

bool OAIBatchChangeInventoryRequest::is_changes_Valid() const{
    return m_changes_isValid;
}

QString OAIBatchChangeInventoryRequest::getIdempotencyKey() const {
    return m_idempotency_key;
}
void OAIBatchChangeInventoryRequest::setIdempotencyKey(const QString &idempotency_key) {
    m_idempotency_key = idempotency_key;
    m_idempotency_key_isSet = true;
}

bool OAIBatchChangeInventoryRequest::is_idempotency_key_Set() const{
    return m_idempotency_key_isSet;
}

bool OAIBatchChangeInventoryRequest::is_idempotency_key_Valid() const{
    return m_idempotency_key_isValid;
}

bool OAIBatchChangeInventoryRequest::isIgnoreUnchangedCounts() const {
    return m_ignore_unchanged_counts;
}
void OAIBatchChangeInventoryRequest::setIgnoreUnchangedCounts(const bool &ignore_unchanged_counts) {
    m_ignore_unchanged_counts = ignore_unchanged_counts;
    m_ignore_unchanged_counts_isSet = true;
}

bool OAIBatchChangeInventoryRequest::is_ignore_unchanged_counts_Set() const{
    return m_ignore_unchanged_counts_isSet;
}

bool OAIBatchChangeInventoryRequest::is_ignore_unchanged_counts_Valid() const{
    return m_ignore_unchanged_counts_isValid;
}

bool OAIBatchChangeInventoryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_unchanged_counts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchChangeInventoryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_idempotency_key_isValid && true;
}

} // namespace OpenAPI
