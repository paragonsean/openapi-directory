/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchOrdersFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchOrdersFilter::OAISearchOrdersFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchOrdersFilter::OAISearchOrdersFilter() {
    this->initializeModel();
}

OAISearchOrdersFilter::~OAISearchOrdersFilter() {}

void OAISearchOrdersFilter::initializeModel() {

    m_customer_filter_isSet = false;
    m_customer_filter_isValid = false;

    m_date_time_filter_isSet = false;
    m_date_time_filter_isValid = false;

    m_fulfillment_filter_isSet = false;
    m_fulfillment_filter_isValid = false;

    m_source_filter_isSet = false;
    m_source_filter_isValid = false;

    m_state_filter_isSet = false;
    m_state_filter_isValid = false;
}

void OAISearchOrdersFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchOrdersFilter::fromJsonObject(QJsonObject json) {

    m_customer_filter_isValid = ::OpenAPI::fromJsonValue(m_customer_filter, json[QString("customer_filter")]);
    m_customer_filter_isSet = !json[QString("customer_filter")].isNull() && m_customer_filter_isValid;

    m_date_time_filter_isValid = ::OpenAPI::fromJsonValue(m_date_time_filter, json[QString("date_time_filter")]);
    m_date_time_filter_isSet = !json[QString("date_time_filter")].isNull() && m_date_time_filter_isValid;

    m_fulfillment_filter_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_filter, json[QString("fulfillment_filter")]);
    m_fulfillment_filter_isSet = !json[QString("fulfillment_filter")].isNull() && m_fulfillment_filter_isValid;

    m_source_filter_isValid = ::OpenAPI::fromJsonValue(m_source_filter, json[QString("source_filter")]);
    m_source_filter_isSet = !json[QString("source_filter")].isNull() && m_source_filter_isValid;

    m_state_filter_isValid = ::OpenAPI::fromJsonValue(m_state_filter, json[QString("state_filter")]);
    m_state_filter_isSet = !json[QString("state_filter")].isNull() && m_state_filter_isValid;
}

QString OAISearchOrdersFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchOrdersFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_filter.isSet()) {
        obj.insert(QString("customer_filter"), ::OpenAPI::toJsonValue(m_customer_filter));
    }
    if (m_date_time_filter.isSet()) {
        obj.insert(QString("date_time_filter"), ::OpenAPI::toJsonValue(m_date_time_filter));
    }
    if (m_fulfillment_filter.isSet()) {
        obj.insert(QString("fulfillment_filter"), ::OpenAPI::toJsonValue(m_fulfillment_filter));
    }
    if (m_source_filter.isSet()) {
        obj.insert(QString("source_filter"), ::OpenAPI::toJsonValue(m_source_filter));
    }
    if (m_state_filter.isSet()) {
        obj.insert(QString("state_filter"), ::OpenAPI::toJsonValue(m_state_filter));
    }
    return obj;
}

OAISearchOrdersCustomerFilter OAISearchOrdersFilter::getCustomerFilter() const {
    return m_customer_filter;
}
void OAISearchOrdersFilter::setCustomerFilter(const OAISearchOrdersCustomerFilter &customer_filter) {
    m_customer_filter = customer_filter;
    m_customer_filter_isSet = true;
}

bool OAISearchOrdersFilter::is_customer_filter_Set() const{
    return m_customer_filter_isSet;
}

bool OAISearchOrdersFilter::is_customer_filter_Valid() const{
    return m_customer_filter_isValid;
}

OAISearchOrdersDateTimeFilter OAISearchOrdersFilter::getDateTimeFilter() const {
    return m_date_time_filter;
}
void OAISearchOrdersFilter::setDateTimeFilter(const OAISearchOrdersDateTimeFilter &date_time_filter) {
    m_date_time_filter = date_time_filter;
    m_date_time_filter_isSet = true;
}

bool OAISearchOrdersFilter::is_date_time_filter_Set() const{
    return m_date_time_filter_isSet;
}

bool OAISearchOrdersFilter::is_date_time_filter_Valid() const{
    return m_date_time_filter_isValid;
}

OAISearchOrdersFulfillmentFilter OAISearchOrdersFilter::getFulfillmentFilter() const {
    return m_fulfillment_filter;
}
void OAISearchOrdersFilter::setFulfillmentFilter(const OAISearchOrdersFulfillmentFilter &fulfillment_filter) {
    m_fulfillment_filter = fulfillment_filter;
    m_fulfillment_filter_isSet = true;
}

bool OAISearchOrdersFilter::is_fulfillment_filter_Set() const{
    return m_fulfillment_filter_isSet;
}

bool OAISearchOrdersFilter::is_fulfillment_filter_Valid() const{
    return m_fulfillment_filter_isValid;
}

OAISearchOrdersSourceFilter OAISearchOrdersFilter::getSourceFilter() const {
    return m_source_filter;
}
void OAISearchOrdersFilter::setSourceFilter(const OAISearchOrdersSourceFilter &source_filter) {
    m_source_filter = source_filter;
    m_source_filter_isSet = true;
}

bool OAISearchOrdersFilter::is_source_filter_Set() const{
    return m_source_filter_isSet;
}

bool OAISearchOrdersFilter::is_source_filter_Valid() const{
    return m_source_filter_isValid;
}

OAISearchOrdersStateFilter OAISearchOrdersFilter::getStateFilter() const {
    return m_state_filter;
}
void OAISearchOrdersFilter::setStateFilter(const OAISearchOrdersStateFilter &state_filter) {
    m_state_filter = state_filter;
    m_state_filter_isSet = true;
}

bool OAISearchOrdersFilter::is_state_filter_Set() const{
    return m_state_filter_isSet;
}

bool OAISearchOrdersFilter::is_state_filter_Valid() const{
    return m_state_filter_isValid;
}

bool OAISearchOrdersFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchOrdersFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
