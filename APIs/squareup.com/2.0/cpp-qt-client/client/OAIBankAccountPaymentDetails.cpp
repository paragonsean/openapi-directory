/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBankAccountPaymentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBankAccountPaymentDetails::OAIBankAccountPaymentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBankAccountPaymentDetails::OAIBankAccountPaymentDetails() {
    this->initializeModel();
}

OAIBankAccountPaymentDetails::~OAIBankAccountPaymentDetails() {}

void OAIBankAccountPaymentDetails::initializeModel() {

    m_account_ownership_type_isSet = false;
    m_account_ownership_type_isValid = false;

    m_ach_details_isSet = false;
    m_ach_details_isValid = false;

    m_bank_name_isSet = false;
    m_bank_name_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_statement_description_isSet = false;
    m_statement_description_isValid = false;

    m_transfer_type_isSet = false;
    m_transfer_type_isValid = false;
}

void OAIBankAccountPaymentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBankAccountPaymentDetails::fromJsonObject(QJsonObject json) {

    m_account_ownership_type_isValid = ::OpenAPI::fromJsonValue(m_account_ownership_type, json[QString("account_ownership_type")]);
    m_account_ownership_type_isSet = !json[QString("account_ownership_type")].isNull() && m_account_ownership_type_isValid;

    m_ach_details_isValid = ::OpenAPI::fromJsonValue(m_ach_details, json[QString("ach_details")]);
    m_ach_details_isSet = !json[QString("ach_details")].isNull() && m_ach_details_isValid;

    m_bank_name_isValid = ::OpenAPI::fromJsonValue(m_bank_name, json[QString("bank_name")]);
    m_bank_name_isSet = !json[QString("bank_name")].isNull() && m_bank_name_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_statement_description_isValid = ::OpenAPI::fromJsonValue(m_statement_description, json[QString("statement_description")]);
    m_statement_description_isSet = !json[QString("statement_description")].isNull() && m_statement_description_isValid;

    m_transfer_type_isValid = ::OpenAPI::fromJsonValue(m_transfer_type, json[QString("transfer_type")]);
    m_transfer_type_isSet = !json[QString("transfer_type")].isNull() && m_transfer_type_isValid;
}

QString OAIBankAccountPaymentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBankAccountPaymentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_account_ownership_type_isSet) {
        obj.insert(QString("account_ownership_type"), ::OpenAPI::toJsonValue(m_account_ownership_type));
    }
    if (m_ach_details.isSet()) {
        obj.insert(QString("ach_details"), ::OpenAPI::toJsonValue(m_ach_details));
    }
    if (m_bank_name_isSet) {
        obj.insert(QString("bank_name"), ::OpenAPI::toJsonValue(m_bank_name));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_statement_description_isSet) {
        obj.insert(QString("statement_description"), ::OpenAPI::toJsonValue(m_statement_description));
    }
    if (m_transfer_type_isSet) {
        obj.insert(QString("transfer_type"), ::OpenAPI::toJsonValue(m_transfer_type));
    }
    return obj;
}

QString OAIBankAccountPaymentDetails::getAccountOwnershipType() const {
    return m_account_ownership_type;
}
void OAIBankAccountPaymentDetails::setAccountOwnershipType(const QString &account_ownership_type) {
    m_account_ownership_type = account_ownership_type;
    m_account_ownership_type_isSet = true;
}

bool OAIBankAccountPaymentDetails::is_account_ownership_type_Set() const{
    return m_account_ownership_type_isSet;
}

bool OAIBankAccountPaymentDetails::is_account_ownership_type_Valid() const{
    return m_account_ownership_type_isValid;
}

OAIACHDetails OAIBankAccountPaymentDetails::getAchDetails() const {
    return m_ach_details;
}
void OAIBankAccountPaymentDetails::setAchDetails(const OAIACHDetails &ach_details) {
    m_ach_details = ach_details;
    m_ach_details_isSet = true;
}

bool OAIBankAccountPaymentDetails::is_ach_details_Set() const{
    return m_ach_details_isSet;
}

bool OAIBankAccountPaymentDetails::is_ach_details_Valid() const{
    return m_ach_details_isValid;
}

QString OAIBankAccountPaymentDetails::getBankName() const {
    return m_bank_name;
}
void OAIBankAccountPaymentDetails::setBankName(const QString &bank_name) {
    m_bank_name = bank_name;
    m_bank_name_isSet = true;
}

bool OAIBankAccountPaymentDetails::is_bank_name_Set() const{
    return m_bank_name_isSet;
}

bool OAIBankAccountPaymentDetails::is_bank_name_Valid() const{
    return m_bank_name_isValid;
}

QString OAIBankAccountPaymentDetails::getCountry() const {
    return m_country;
}
void OAIBankAccountPaymentDetails::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIBankAccountPaymentDetails::is_country_Set() const{
    return m_country_isSet;
}

bool OAIBankAccountPaymentDetails::is_country_Valid() const{
    return m_country_isValid;
}

QList<OAIError> OAIBankAccountPaymentDetails::getErrors() const {
    return m_errors;
}
void OAIBankAccountPaymentDetails::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIBankAccountPaymentDetails::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIBankAccountPaymentDetails::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIBankAccountPaymentDetails::getFingerprint() const {
    return m_fingerprint;
}
void OAIBankAccountPaymentDetails::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIBankAccountPaymentDetails::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIBankAccountPaymentDetails::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QString OAIBankAccountPaymentDetails::getStatementDescription() const {
    return m_statement_description;
}
void OAIBankAccountPaymentDetails::setStatementDescription(const QString &statement_description) {
    m_statement_description = statement_description;
    m_statement_description_isSet = true;
}

bool OAIBankAccountPaymentDetails::is_statement_description_Set() const{
    return m_statement_description_isSet;
}

bool OAIBankAccountPaymentDetails::is_statement_description_Valid() const{
    return m_statement_description_isValid;
}

QString OAIBankAccountPaymentDetails::getTransferType() const {
    return m_transfer_type;
}
void OAIBankAccountPaymentDetails::setTransferType(const QString &transfer_type) {
    m_transfer_type = transfer_type;
    m_transfer_type_isSet = true;
}

bool OAIBankAccountPaymentDetails::is_transfer_type_Set() const{
    return m_transfer_type_isSet;
}

bool OAIBankAccountPaymentDetails::is_transfer_type_Valid() const{
    return m_transfer_type_isValid;
}

bool OAIBankAccountPaymentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_ownership_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ach_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBankAccountPaymentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
