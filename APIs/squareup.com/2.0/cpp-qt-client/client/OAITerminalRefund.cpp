/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITerminalRefund.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITerminalRefund::OAITerminalRefund(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITerminalRefund::OAITerminalRefund() {
    this->initializeModel();
}

OAITerminalRefund::~OAITerminalRefund() {}

void OAITerminalRefund::initializeModel() {

    m_amount_money_isSet = false;
    m_amount_money_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_cancel_reason_isSet = false;
    m_cancel_reason_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deadline_duration_isSet = false;
    m_deadline_duration_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_refund_id_isSet = false;
    m_refund_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAITerminalRefund::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITerminalRefund::fromJsonObject(QJsonObject json) {

    m_amount_money_isValid = ::OpenAPI::fromJsonValue(m_amount_money, json[QString("amount_money")]);
    m_amount_money_isSet = !json[QString("amount_money")].isNull() && m_amount_money_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("app_id")]);
    m_app_id_isSet = !json[QString("app_id")].isNull() && m_app_id_isValid;

    m_cancel_reason_isValid = ::OpenAPI::fromJsonValue(m_cancel_reason, json[QString("cancel_reason")]);
    m_cancel_reason_isSet = !json[QString("cancel_reason")].isNull() && m_cancel_reason_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_deadline_duration_isValid = ::OpenAPI::fromJsonValue(m_deadline_duration, json[QString("deadline_duration")]);
    m_deadline_duration_isSet = !json[QString("deadline_duration")].isNull() && m_deadline_duration_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("device_id")]);
    m_device_id_isSet = !json[QString("device_id")].isNull() && m_device_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("payment_id")]);
    m_payment_id_isSet = !json[QString("payment_id")].isNull() && m_payment_id_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_refund_id_isValid = ::OpenAPI::fromJsonValue(m_refund_id, json[QString("refund_id")]);
    m_refund_id_isSet = !json[QString("refund_id")].isNull() && m_refund_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAITerminalRefund::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITerminalRefund::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_money.isSet()) {
        obj.insert(QString("amount_money"), ::OpenAPI::toJsonValue(m_amount_money));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("app_id"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_cancel_reason_isSet) {
        obj.insert(QString("cancel_reason"), ::OpenAPI::toJsonValue(m_cancel_reason));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deadline_duration_isSet) {
        obj.insert(QString("deadline_duration"), ::OpenAPI::toJsonValue(m_deadline_duration));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("device_id"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("payment_id"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_refund_id_isSet) {
        obj.insert(QString("refund_id"), ::OpenAPI::toJsonValue(m_refund_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAIMoney OAITerminalRefund::getAmountMoney() const {
    return m_amount_money;
}
void OAITerminalRefund::setAmountMoney(const OAIMoney &amount_money) {
    m_amount_money = amount_money;
    m_amount_money_isSet = true;
}

bool OAITerminalRefund::is_amount_money_Set() const{
    return m_amount_money_isSet;
}

bool OAITerminalRefund::is_amount_money_Valid() const{
    return m_amount_money_isValid;
}

QString OAITerminalRefund::getAppId() const {
    return m_app_id;
}
void OAITerminalRefund::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAITerminalRefund::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAITerminalRefund::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAITerminalRefund::getCancelReason() const {
    return m_cancel_reason;
}
void OAITerminalRefund::setCancelReason(const QString &cancel_reason) {
    m_cancel_reason = cancel_reason;
    m_cancel_reason_isSet = true;
}

bool OAITerminalRefund::is_cancel_reason_Set() const{
    return m_cancel_reason_isSet;
}

bool OAITerminalRefund::is_cancel_reason_Valid() const{
    return m_cancel_reason_isValid;
}

QString OAITerminalRefund::getCreatedAt() const {
    return m_created_at;
}
void OAITerminalRefund::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITerminalRefund::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITerminalRefund::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITerminalRefund::getDeadlineDuration() const {
    return m_deadline_duration;
}
void OAITerminalRefund::setDeadlineDuration(const QString &deadline_duration) {
    m_deadline_duration = deadline_duration;
    m_deadline_duration_isSet = true;
}

bool OAITerminalRefund::is_deadline_duration_Set() const{
    return m_deadline_duration_isSet;
}

bool OAITerminalRefund::is_deadline_duration_Valid() const{
    return m_deadline_duration_isValid;
}

QString OAITerminalRefund::getDeviceId() const {
    return m_device_id;
}
void OAITerminalRefund::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAITerminalRefund::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAITerminalRefund::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAITerminalRefund::getId() const {
    return m_id;
}
void OAITerminalRefund::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITerminalRefund::is_id_Set() const{
    return m_id_isSet;
}

bool OAITerminalRefund::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITerminalRefund::getLocationId() const {
    return m_location_id;
}
void OAITerminalRefund::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAITerminalRefund::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAITerminalRefund::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAITerminalRefund::getOrderId() const {
    return m_order_id;
}
void OAITerminalRefund::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAITerminalRefund::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAITerminalRefund::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAITerminalRefund::getPaymentId() const {
    return m_payment_id;
}
void OAITerminalRefund::setPaymentId(const QString &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAITerminalRefund::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAITerminalRefund::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

QString OAITerminalRefund::getReason() const {
    return m_reason;
}
void OAITerminalRefund::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAITerminalRefund::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAITerminalRefund::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAITerminalRefund::getRefundId() const {
    return m_refund_id;
}
void OAITerminalRefund::setRefundId(const QString &refund_id) {
    m_refund_id = refund_id;
    m_refund_id_isSet = true;
}

bool OAITerminalRefund::is_refund_id_Set() const{
    return m_refund_id_isSet;
}

bool OAITerminalRefund::is_refund_id_Valid() const{
    return m_refund_id_isValid;
}

QString OAITerminalRefund::getStatus() const {
    return m_status;
}
void OAITerminalRefund::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITerminalRefund::is_status_Set() const{
    return m_status_isSet;
}

bool OAITerminalRefund::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITerminalRefund::getUpdatedAt() const {
    return m_updated_at;
}
void OAITerminalRefund::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITerminalRefund::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITerminalRefund::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAITerminalRefund::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_money.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deadline_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITerminalRefund::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_money_isValid && m_payment_id_isValid && true;
}

} // namespace OpenAPI
