/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyReward.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyReward::OAILoyaltyReward(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyReward::OAILoyaltyReward() {
    this->initializeModel();
}

OAILoyaltyReward::~OAILoyaltyReward() {}

void OAILoyaltyReward::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_loyalty_account_id_isSet = false;
    m_loyalty_account_id_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;

    m_redeemed_at_isSet = false;
    m_redeemed_at_isValid = false;

    m_reward_tier_id_isSet = false;
    m_reward_tier_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAILoyaltyReward::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyReward::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_loyalty_account_id_isValid = ::OpenAPI::fromJsonValue(m_loyalty_account_id, json[QString("loyalty_account_id")]);
    m_loyalty_account_id_isSet = !json[QString("loyalty_account_id")].isNull() && m_loyalty_account_id_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("points")]);
    m_points_isSet = !json[QString("points")].isNull() && m_points_isValid;

    m_redeemed_at_isValid = ::OpenAPI::fromJsonValue(m_redeemed_at, json[QString("redeemed_at")]);
    m_redeemed_at_isSet = !json[QString("redeemed_at")].isNull() && m_redeemed_at_isValid;

    m_reward_tier_id_isValid = ::OpenAPI::fromJsonValue(m_reward_tier_id, json[QString("reward_tier_id")]);
    m_reward_tier_id_isSet = !json[QString("reward_tier_id")].isNull() && m_reward_tier_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAILoyaltyReward::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyReward::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_loyalty_account_id_isSet) {
        obj.insert(QString("loyalty_account_id"), ::OpenAPI::toJsonValue(m_loyalty_account_id));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_points_isSet) {
        obj.insert(QString("points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_redeemed_at_isSet) {
        obj.insert(QString("redeemed_at"), ::OpenAPI::toJsonValue(m_redeemed_at));
    }
    if (m_reward_tier_id_isSet) {
        obj.insert(QString("reward_tier_id"), ::OpenAPI::toJsonValue(m_reward_tier_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAILoyaltyReward::getCreatedAt() const {
    return m_created_at;
}
void OAILoyaltyReward::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAILoyaltyReward::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAILoyaltyReward::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAILoyaltyReward::getId() const {
    return m_id;
}
void OAILoyaltyReward::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILoyaltyReward::is_id_Set() const{
    return m_id_isSet;
}

bool OAILoyaltyReward::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILoyaltyReward::getLoyaltyAccountId() const {
    return m_loyalty_account_id;
}
void OAILoyaltyReward::setLoyaltyAccountId(const QString &loyalty_account_id) {
    m_loyalty_account_id = loyalty_account_id;
    m_loyalty_account_id_isSet = true;
}

bool OAILoyaltyReward::is_loyalty_account_id_Set() const{
    return m_loyalty_account_id_isSet;
}

bool OAILoyaltyReward::is_loyalty_account_id_Valid() const{
    return m_loyalty_account_id_isValid;
}

QString OAILoyaltyReward::getOrderId() const {
    return m_order_id;
}
void OAILoyaltyReward::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAILoyaltyReward::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAILoyaltyReward::is_order_id_Valid() const{
    return m_order_id_isValid;
}

qint32 OAILoyaltyReward::getPoints() const {
    return m_points;
}
void OAILoyaltyReward::setPoints(const qint32 &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAILoyaltyReward::is_points_Set() const{
    return m_points_isSet;
}

bool OAILoyaltyReward::is_points_Valid() const{
    return m_points_isValid;
}

QString OAILoyaltyReward::getRedeemedAt() const {
    return m_redeemed_at;
}
void OAILoyaltyReward::setRedeemedAt(const QString &redeemed_at) {
    m_redeemed_at = redeemed_at;
    m_redeemed_at_isSet = true;
}

bool OAILoyaltyReward::is_redeemed_at_Set() const{
    return m_redeemed_at_isSet;
}

bool OAILoyaltyReward::is_redeemed_at_Valid() const{
    return m_redeemed_at_isValid;
}

QString OAILoyaltyReward::getRewardTierId() const {
    return m_reward_tier_id;
}
void OAILoyaltyReward::setRewardTierId(const QString &reward_tier_id) {
    m_reward_tier_id = reward_tier_id;
    m_reward_tier_id_isSet = true;
}

bool OAILoyaltyReward::is_reward_tier_id_Set() const{
    return m_reward_tier_id_isSet;
}

bool OAILoyaltyReward::is_reward_tier_id_Valid() const{
    return m_reward_tier_id_isValid;
}

QString OAILoyaltyReward::getStatus() const {
    return m_status;
}
void OAILoyaltyReward::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILoyaltyReward::is_status_Set() const{
    return m_status_isSet;
}

bool OAILoyaltyReward::is_status_Valid() const{
    return m_status_isValid;
}

QString OAILoyaltyReward::getUpdatedAt() const {
    return m_updated_at;
}
void OAILoyaltyReward::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAILoyaltyReward::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAILoyaltyReward::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAILoyaltyReward::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redeemed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_tier_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyReward::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_loyalty_account_id_isValid && m_reward_tier_id_isValid && true;
}

} // namespace OpenAPI
