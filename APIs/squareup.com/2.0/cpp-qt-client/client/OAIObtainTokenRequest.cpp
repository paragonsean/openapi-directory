/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObtainTokenRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObtainTokenRequest::OAIObtainTokenRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObtainTokenRequest::OAIObtainTokenRequest() {
    this->initializeModel();
}

OAIObtainTokenRequest::~OAIObtainTokenRequest() {}

void OAIObtainTokenRequest::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_grant_type_isSet = false;
    m_grant_type_isValid = false;

    m_migration_token_isSet = false;
    m_migration_token_isValid = false;

    m_redirect_uri_isSet = false;
    m_redirect_uri_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_short_lived_isSet = false;
    m_short_lived_isValid = false;
}

void OAIObtainTokenRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObtainTokenRequest::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("client_secret")]);
    m_client_secret_isSet = !json[QString("client_secret")].isNull() && m_client_secret_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_grant_type_isValid = ::OpenAPI::fromJsonValue(m_grant_type, json[QString("grant_type")]);
    m_grant_type_isSet = !json[QString("grant_type")].isNull() && m_grant_type_isValid;

    m_migration_token_isValid = ::OpenAPI::fromJsonValue(m_migration_token, json[QString("migration_token")]);
    m_migration_token_isSet = !json[QString("migration_token")].isNull() && m_migration_token_isValid;

    m_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_redirect_uri, json[QString("redirect_uri")]);
    m_redirect_uri_isSet = !json[QString("redirect_uri")].isNull() && m_redirect_uri_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refresh_token")]);
    m_refresh_token_isSet = !json[QString("refresh_token")].isNull() && m_refresh_token_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_short_lived_isValid = ::OpenAPI::fromJsonValue(m_short_lived, json[QString("short_lived")]);
    m_short_lived_isSet = !json[QString("short_lived")].isNull() && m_short_lived_isValid;
}

QString OAIObtainTokenRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObtainTokenRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("client_secret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_grant_type_isSet) {
        obj.insert(QString("grant_type"), ::OpenAPI::toJsonValue(m_grant_type));
    }
    if (m_migration_token_isSet) {
        obj.insert(QString("migration_token"), ::OpenAPI::toJsonValue(m_migration_token));
    }
    if (m_redirect_uri_isSet) {
        obj.insert(QString("redirect_uri"), ::OpenAPI::toJsonValue(m_redirect_uri));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refresh_token"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_short_lived_isSet) {
        obj.insert(QString("short_lived"), ::OpenAPI::toJsonValue(m_short_lived));
    }
    return obj;
}

QString OAIObtainTokenRequest::getClientId() const {
    return m_client_id;
}
void OAIObtainTokenRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIObtainTokenRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIObtainTokenRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIObtainTokenRequest::getClientSecret() const {
    return m_client_secret;
}
void OAIObtainTokenRequest::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIObtainTokenRequest::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIObtainTokenRequest::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAIObtainTokenRequest::getCode() const {
    return m_code;
}
void OAIObtainTokenRequest::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIObtainTokenRequest::is_code_Set() const{
    return m_code_isSet;
}

bool OAIObtainTokenRequest::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIObtainTokenRequest::getGrantType() const {
    return m_grant_type;
}
void OAIObtainTokenRequest::setGrantType(const QString &grant_type) {
    m_grant_type = grant_type;
    m_grant_type_isSet = true;
}

bool OAIObtainTokenRequest::is_grant_type_Set() const{
    return m_grant_type_isSet;
}

bool OAIObtainTokenRequest::is_grant_type_Valid() const{
    return m_grant_type_isValid;
}

QString OAIObtainTokenRequest::getMigrationToken() const {
    return m_migration_token;
}
void OAIObtainTokenRequest::setMigrationToken(const QString &migration_token) {
    m_migration_token = migration_token;
    m_migration_token_isSet = true;
}

bool OAIObtainTokenRequest::is_migration_token_Set() const{
    return m_migration_token_isSet;
}

bool OAIObtainTokenRequest::is_migration_token_Valid() const{
    return m_migration_token_isValid;
}

QString OAIObtainTokenRequest::getRedirectUri() const {
    return m_redirect_uri;
}
void OAIObtainTokenRequest::setRedirectUri(const QString &redirect_uri) {
    m_redirect_uri = redirect_uri;
    m_redirect_uri_isSet = true;
}

bool OAIObtainTokenRequest::is_redirect_uri_Set() const{
    return m_redirect_uri_isSet;
}

bool OAIObtainTokenRequest::is_redirect_uri_Valid() const{
    return m_redirect_uri_isValid;
}

QString OAIObtainTokenRequest::getRefreshToken() const {
    return m_refresh_token;
}
void OAIObtainTokenRequest::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIObtainTokenRequest::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIObtainTokenRequest::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

QList<QString> OAIObtainTokenRequest::getScopes() const {
    return m_scopes;
}
void OAIObtainTokenRequest::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIObtainTokenRequest::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIObtainTokenRequest::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAIObtainTokenRequest::isShortLived() const {
    return m_short_lived;
}
void OAIObtainTokenRequest::setShortLived(const bool &short_lived) {
    m_short_lived = short_lived;
    m_short_lived_isSet = true;
}

bool OAIObtainTokenRequest::is_short_lived_Set() const{
    return m_short_lived_isSet;
}

bool OAIObtainTokenRequest::is_short_lived_Valid() const{
    return m_short_lived_isValid;
}

bool OAIObtainTokenRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_lived_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObtainTokenRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_id_isValid && m_client_secret_isValid && m_grant_type_isValid && true;
}

} // namespace OpenAPI
