/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckout.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckout::OAICheckout(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckout::OAICheckout() {
    this->initializeModel();
}

OAICheckout::~OAICheckout() {}

void OAICheckout::initializeModel() {

    m_additional_recipients_isSet = false;
    m_additional_recipients_isValid = false;

    m_ask_for_shipping_address_isSet = false;
    m_ask_for_shipping_address_isValid = false;

    m_checkout_page_url_isSet = false;
    m_checkout_page_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_merchant_support_email_isSet = false;
    m_merchant_support_email_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_pre_populate_buyer_email_isSet = false;
    m_pre_populate_buyer_email_isValid = false;

    m_pre_populate_shipping_address_isSet = false;
    m_pre_populate_shipping_address_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;
}

void OAICheckout::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckout::fromJsonObject(QJsonObject json) {

    m_additional_recipients_isValid = ::OpenAPI::fromJsonValue(m_additional_recipients, json[QString("additional_recipients")]);
    m_additional_recipients_isSet = !json[QString("additional_recipients")].isNull() && m_additional_recipients_isValid;

    m_ask_for_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_ask_for_shipping_address, json[QString("ask_for_shipping_address")]);
    m_ask_for_shipping_address_isSet = !json[QString("ask_for_shipping_address")].isNull() && m_ask_for_shipping_address_isValid;

    m_checkout_page_url_isValid = ::OpenAPI::fromJsonValue(m_checkout_page_url, json[QString("checkout_page_url")]);
    m_checkout_page_url_isSet = !json[QString("checkout_page_url")].isNull() && m_checkout_page_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_merchant_support_email_isValid = ::OpenAPI::fromJsonValue(m_merchant_support_email, json[QString("merchant_support_email")]);
    m_merchant_support_email_isSet = !json[QString("merchant_support_email")].isNull() && m_merchant_support_email_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_pre_populate_buyer_email_isValid = ::OpenAPI::fromJsonValue(m_pre_populate_buyer_email, json[QString("pre_populate_buyer_email")]);
    m_pre_populate_buyer_email_isSet = !json[QString("pre_populate_buyer_email")].isNull() && m_pre_populate_buyer_email_isValid;

    m_pre_populate_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_pre_populate_shipping_address, json[QString("pre_populate_shipping_address")]);
    m_pre_populate_shipping_address_isSet = !json[QString("pre_populate_shipping_address")].isNull() && m_pre_populate_shipping_address_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_redirect_url, json[QString("redirect_url")]);
    m_redirect_url_isSet = !json[QString("redirect_url")].isNull() && m_redirect_url_isValid;
}

QString OAICheckout::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckout::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_recipients.size() > 0) {
        obj.insert(QString("additional_recipients"), ::OpenAPI::toJsonValue(m_additional_recipients));
    }
    if (m_ask_for_shipping_address_isSet) {
        obj.insert(QString("ask_for_shipping_address"), ::OpenAPI::toJsonValue(m_ask_for_shipping_address));
    }
    if (m_checkout_page_url_isSet) {
        obj.insert(QString("checkout_page_url"), ::OpenAPI::toJsonValue(m_checkout_page_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_merchant_support_email_isSet) {
        obj.insert(QString("merchant_support_email"), ::OpenAPI::toJsonValue(m_merchant_support_email));
    }
    if (m_order.isSet()) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_pre_populate_buyer_email_isSet) {
        obj.insert(QString("pre_populate_buyer_email"), ::OpenAPI::toJsonValue(m_pre_populate_buyer_email));
    }
    if (m_pre_populate_shipping_address.isSet()) {
        obj.insert(QString("pre_populate_shipping_address"), ::OpenAPI::toJsonValue(m_pre_populate_shipping_address));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("redirect_url"), ::OpenAPI::toJsonValue(m_redirect_url));
    }
    return obj;
}

QList<OAIAdditionalRecipient> OAICheckout::getAdditionalRecipients() const {
    return m_additional_recipients;
}
void OAICheckout::setAdditionalRecipients(const QList<OAIAdditionalRecipient> &additional_recipients) {
    m_additional_recipients = additional_recipients;
    m_additional_recipients_isSet = true;
}

bool OAICheckout::is_additional_recipients_Set() const{
    return m_additional_recipients_isSet;
}

bool OAICheckout::is_additional_recipients_Valid() const{
    return m_additional_recipients_isValid;
}

bool OAICheckout::isAskForShippingAddress() const {
    return m_ask_for_shipping_address;
}
void OAICheckout::setAskForShippingAddress(const bool &ask_for_shipping_address) {
    m_ask_for_shipping_address = ask_for_shipping_address;
    m_ask_for_shipping_address_isSet = true;
}

bool OAICheckout::is_ask_for_shipping_address_Set() const{
    return m_ask_for_shipping_address_isSet;
}

bool OAICheckout::is_ask_for_shipping_address_Valid() const{
    return m_ask_for_shipping_address_isValid;
}

QString OAICheckout::getCheckoutPageUrl() const {
    return m_checkout_page_url;
}
void OAICheckout::setCheckoutPageUrl(const QString &checkout_page_url) {
    m_checkout_page_url = checkout_page_url;
    m_checkout_page_url_isSet = true;
}

bool OAICheckout::is_checkout_page_url_Set() const{
    return m_checkout_page_url_isSet;
}

bool OAICheckout::is_checkout_page_url_Valid() const{
    return m_checkout_page_url_isValid;
}

QString OAICheckout::getCreatedAt() const {
    return m_created_at;
}
void OAICheckout::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICheckout::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICheckout::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICheckout::getId() const {
    return m_id;
}
void OAICheckout::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICheckout::is_id_Set() const{
    return m_id_isSet;
}

bool OAICheckout::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICheckout::getMerchantSupportEmail() const {
    return m_merchant_support_email;
}
void OAICheckout::setMerchantSupportEmail(const QString &merchant_support_email) {
    m_merchant_support_email = merchant_support_email;
    m_merchant_support_email_isSet = true;
}

bool OAICheckout::is_merchant_support_email_Set() const{
    return m_merchant_support_email_isSet;
}

bool OAICheckout::is_merchant_support_email_Valid() const{
    return m_merchant_support_email_isValid;
}

OAIOrder OAICheckout::getOrder() const {
    return m_order;
}
void OAICheckout::setOrder(const OAIOrder &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAICheckout::is_order_Set() const{
    return m_order_isSet;
}

bool OAICheckout::is_order_Valid() const{
    return m_order_isValid;
}

QString OAICheckout::getPrePopulateBuyerEmail() const {
    return m_pre_populate_buyer_email;
}
void OAICheckout::setPrePopulateBuyerEmail(const QString &pre_populate_buyer_email) {
    m_pre_populate_buyer_email = pre_populate_buyer_email;
    m_pre_populate_buyer_email_isSet = true;
}

bool OAICheckout::is_pre_populate_buyer_email_Set() const{
    return m_pre_populate_buyer_email_isSet;
}

bool OAICheckout::is_pre_populate_buyer_email_Valid() const{
    return m_pre_populate_buyer_email_isValid;
}

OAIAddress OAICheckout::getPrePopulateShippingAddress() const {
    return m_pre_populate_shipping_address;
}
void OAICheckout::setPrePopulateShippingAddress(const OAIAddress &pre_populate_shipping_address) {
    m_pre_populate_shipping_address = pre_populate_shipping_address;
    m_pre_populate_shipping_address_isSet = true;
}

bool OAICheckout::is_pre_populate_shipping_address_Set() const{
    return m_pre_populate_shipping_address_isSet;
}

bool OAICheckout::is_pre_populate_shipping_address_Valid() const{
    return m_pre_populate_shipping_address_isValid;
}

QString OAICheckout::getRedirectUrl() const {
    return m_redirect_url;
}
void OAICheckout::setRedirectUrl(const QString &redirect_url) {
    m_redirect_url = redirect_url;
    m_redirect_url_isSet = true;
}

bool OAICheckout::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAICheckout::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

bool OAICheckout::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ask_for_shipping_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkout_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_support_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_populate_buyer_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_populate_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckout::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
