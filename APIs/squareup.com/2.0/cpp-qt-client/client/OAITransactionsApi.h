/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransactionsApi_H
#define OAI_OAITransactionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICaptureTransactionResponse.h"
#include "OAIChargeRequest.h"
#include "OAIChargeResponse.h"
#include "OAICreateRefundRequest.h"
#include "OAICreateRefundResponse.h"
#include "OAIListRefundsResponse.h"
#include "OAIListTransactionsResponse.h"
#include "OAIRetrieveTransactionResponse.h"
#include "OAIVoidTransactionResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransactionsApi : public QObject {
    Q_OBJECT

public:
    OAITransactionsApi(const int timeOut = 0);
    ~OAITransactionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void captureTransaction(const QString &location_id, const QString &transaction_id);

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  oai_charge_request OAIChargeRequest [required]
    */
    virtual void charge(const QString &location_id, const OAIChargeRequest &oai_charge_request);

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  begin_time QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void listTransactions(const QString &location_id, const ::OpenAPI::OptionalParam<QString> &begin_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void retrieveTransaction(const QString &location_id, const QString &transaction_id);

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  begin_time QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void v2LocationsLocationIdRefundsGet(const QString &location_id, const ::OpenAPI::OptionalParam<QString> &begin_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  oai_create_refund_request OAICreateRefundRequest [required]
    */
    virtual void v2LocationsLocationIdTransactionsTransactionIdRefundPost(const QString &location_id, const QString &transaction_id, const OAICreateRefundRequest &oai_create_refund_request);

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void voidTransaction(const QString &location_id, const QString &transaction_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void captureTransactionCallback(OAIHttpRequestWorker *worker);
    void chargeCallback(OAIHttpRequestWorker *worker);
    void listTransactionsCallback(OAIHttpRequestWorker *worker);
    void retrieveTransactionCallback(OAIHttpRequestWorker *worker);
    void v2LocationsLocationIdRefundsGetCallback(OAIHttpRequestWorker *worker);
    void v2LocationsLocationIdTransactionsTransactionIdRefundPostCallback(OAIHttpRequestWorker *worker);
    void voidTransactionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void captureTransactionSignal(OAICaptureTransactionResponse summary);
    void chargeSignal(OAIChargeResponse summary);
    void listTransactionsSignal(OAIListTransactionsResponse summary);
    void retrieveTransactionSignal(OAIRetrieveTransactionResponse summary);
    void v2LocationsLocationIdRefundsGetSignal(OAIListRefundsResponse summary);
    void v2LocationsLocationIdTransactionsTransactionIdRefundPostSignal(OAICreateRefundResponse summary);
    void voidTransactionSignal(OAIVoidTransactionResponse summary);


    void captureTransactionSignalFull(OAIHttpRequestWorker *worker, OAICaptureTransactionResponse summary);
    void chargeSignalFull(OAIHttpRequestWorker *worker, OAIChargeResponse summary);
    void listTransactionsSignalFull(OAIHttpRequestWorker *worker, OAIListTransactionsResponse summary);
    void retrieveTransactionSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveTransactionResponse summary);
    void v2LocationsLocationIdRefundsGetSignalFull(OAIHttpRequestWorker *worker, OAIListRefundsResponse summary);
    void v2LocationsLocationIdTransactionsTransactionIdRefundPostSignalFull(OAIHttpRequestWorker *worker, OAICreateRefundResponse summary);
    void voidTransactionSignalFull(OAIHttpRequestWorker *worker, OAIVoidTransactionResponse summary);

    Q_DECL_DEPRECATED_X("Use captureTransactionSignalError() instead")
    void captureTransactionSignalE(OAICaptureTransactionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void captureTransactionSignalError(OAICaptureTransactionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chargeSignalError() instead")
    void chargeSignalE(OAIChargeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chargeSignalError(OAIChargeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTransactionsSignalError() instead")
    void listTransactionsSignalE(OAIListTransactionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTransactionsSignalError(OAIListTransactionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveTransactionSignalError() instead")
    void retrieveTransactionSignalE(OAIRetrieveTransactionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveTransactionSignalError(OAIRetrieveTransactionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2LocationsLocationIdRefundsGetSignalError() instead")
    void v2LocationsLocationIdRefundsGetSignalE(OAIListRefundsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2LocationsLocationIdRefundsGetSignalError(OAIListRefundsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2LocationsLocationIdTransactionsTransactionIdRefundPostSignalError() instead")
    void v2LocationsLocationIdTransactionsTransactionIdRefundPostSignalE(OAICreateRefundResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2LocationsLocationIdTransactionsTransactionIdRefundPostSignalError(OAICreateRefundResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use voidTransactionSignalError() instead")
    void voidTransactionSignalE(OAIVoidTransactionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void voidTransactionSignalError(OAIVoidTransactionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use captureTransactionSignalErrorFull() instead")
    void captureTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void captureTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chargeSignalErrorFull() instead")
    void chargeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chargeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTransactionsSignalErrorFull() instead")
    void listTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveTransactionSignalErrorFull() instead")
    void retrieveTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2LocationsLocationIdRefundsGetSignalErrorFull() instead")
    void v2LocationsLocationIdRefundsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2LocationsLocationIdRefundsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2LocationsLocationIdTransactionsTransactionIdRefundPostSignalErrorFull() instead")
    void v2LocationsLocationIdTransactionsTransactionIdRefundPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2LocationsLocationIdTransactionsTransactionIdRefundPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use voidTransactionSignalErrorFull() instead")
    void voidTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void voidTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
