/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogItemModifierListInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogItemModifierListInfo::OAICatalogItemModifierListInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogItemModifierListInfo::OAICatalogItemModifierListInfo() {
    this->initializeModel();
}

OAICatalogItemModifierListInfo::~OAICatalogItemModifierListInfo() {}

void OAICatalogItemModifierListInfo::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_max_selected_modifiers_isSet = false;
    m_max_selected_modifiers_isValid = false;

    m_min_selected_modifiers_isSet = false;
    m_min_selected_modifiers_isValid = false;

    m_modifier_list_id_isSet = false;
    m_modifier_list_id_isValid = false;

    m_modifier_overrides_isSet = false;
    m_modifier_overrides_isValid = false;
}

void OAICatalogItemModifierListInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogItemModifierListInfo::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_max_selected_modifiers_isValid = ::OpenAPI::fromJsonValue(m_max_selected_modifiers, json[QString("max_selected_modifiers")]);
    m_max_selected_modifiers_isSet = !json[QString("max_selected_modifiers")].isNull() && m_max_selected_modifiers_isValid;

    m_min_selected_modifiers_isValid = ::OpenAPI::fromJsonValue(m_min_selected_modifiers, json[QString("min_selected_modifiers")]);
    m_min_selected_modifiers_isSet = !json[QString("min_selected_modifiers")].isNull() && m_min_selected_modifiers_isValid;

    m_modifier_list_id_isValid = ::OpenAPI::fromJsonValue(m_modifier_list_id, json[QString("modifier_list_id")]);
    m_modifier_list_id_isSet = !json[QString("modifier_list_id")].isNull() && m_modifier_list_id_isValid;

    m_modifier_overrides_isValid = ::OpenAPI::fromJsonValue(m_modifier_overrides, json[QString("modifier_overrides")]);
    m_modifier_overrides_isSet = !json[QString("modifier_overrides")].isNull() && m_modifier_overrides_isValid;
}

QString OAICatalogItemModifierListInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogItemModifierListInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_max_selected_modifiers_isSet) {
        obj.insert(QString("max_selected_modifiers"), ::OpenAPI::toJsonValue(m_max_selected_modifiers));
    }
    if (m_min_selected_modifiers_isSet) {
        obj.insert(QString("min_selected_modifiers"), ::OpenAPI::toJsonValue(m_min_selected_modifiers));
    }
    if (m_modifier_list_id_isSet) {
        obj.insert(QString("modifier_list_id"), ::OpenAPI::toJsonValue(m_modifier_list_id));
    }
    if (m_modifier_overrides.size() > 0) {
        obj.insert(QString("modifier_overrides"), ::OpenAPI::toJsonValue(m_modifier_overrides));
    }
    return obj;
}

bool OAICatalogItemModifierListInfo::isEnabled() const {
    return m_enabled;
}
void OAICatalogItemModifierListInfo::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICatalogItemModifierListInfo::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICatalogItemModifierListInfo::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAICatalogItemModifierListInfo::getMaxSelectedModifiers() const {
    return m_max_selected_modifiers;
}
void OAICatalogItemModifierListInfo::setMaxSelectedModifiers(const qint32 &max_selected_modifiers) {
    m_max_selected_modifiers = max_selected_modifiers;
    m_max_selected_modifiers_isSet = true;
}

bool OAICatalogItemModifierListInfo::is_max_selected_modifiers_Set() const{
    return m_max_selected_modifiers_isSet;
}

bool OAICatalogItemModifierListInfo::is_max_selected_modifiers_Valid() const{
    return m_max_selected_modifiers_isValid;
}

qint32 OAICatalogItemModifierListInfo::getMinSelectedModifiers() const {
    return m_min_selected_modifiers;
}
void OAICatalogItemModifierListInfo::setMinSelectedModifiers(const qint32 &min_selected_modifiers) {
    m_min_selected_modifiers = min_selected_modifiers;
    m_min_selected_modifiers_isSet = true;
}

bool OAICatalogItemModifierListInfo::is_min_selected_modifiers_Set() const{
    return m_min_selected_modifiers_isSet;
}

bool OAICatalogItemModifierListInfo::is_min_selected_modifiers_Valid() const{
    return m_min_selected_modifiers_isValid;
}

QString OAICatalogItemModifierListInfo::getModifierListId() const {
    return m_modifier_list_id;
}
void OAICatalogItemModifierListInfo::setModifierListId(const QString &modifier_list_id) {
    m_modifier_list_id = modifier_list_id;
    m_modifier_list_id_isSet = true;
}

bool OAICatalogItemModifierListInfo::is_modifier_list_id_Set() const{
    return m_modifier_list_id_isSet;
}

bool OAICatalogItemModifierListInfo::is_modifier_list_id_Valid() const{
    return m_modifier_list_id_isValid;
}

QList<OAICatalogModifierOverride> OAICatalogItemModifierListInfo::getModifierOverrides() const {
    return m_modifier_overrides;
}
void OAICatalogItemModifierListInfo::setModifierOverrides(const QList<OAICatalogModifierOverride> &modifier_overrides) {
    m_modifier_overrides = modifier_overrides;
    m_modifier_overrides_isSet = true;
}

bool OAICatalogItemModifierListInfo::is_modifier_overrides_Set() const{
    return m_modifier_overrides_isSet;
}

bool OAICatalogItemModifierListInfo::is_modifier_overrides_Valid() const{
    return m_modifier_overrides_isValid;
}

bool OAICatalogItemModifierListInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_selected_modifiers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_selected_modifiers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modifier_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modifier_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogItemModifierListInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_modifier_list_id_isValid && true;
}

} // namespace OpenAPI
