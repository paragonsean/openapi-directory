/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCatalogRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCatalogRequest::OAIListCatalogRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCatalogRequest::OAIListCatalogRequest() {
    this->initializeModel();
}

OAIListCatalogRequest::~OAIListCatalogRequest() {}

void OAIListCatalogRequest::initializeModel() {

    m_catalog_version_isSet = false;
    m_catalog_version_isValid = false;

    m_cursor_isSet = false;
    m_cursor_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAIListCatalogRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCatalogRequest::fromJsonObject(QJsonObject json) {

    m_catalog_version_isValid = ::OpenAPI::fromJsonValue(m_catalog_version, json[QString("catalog_version")]);
    m_catalog_version_isSet = !json[QString("catalog_version")].isNull() && m_catalog_version_isValid;

    m_cursor_isValid = ::OpenAPI::fromJsonValue(m_cursor, json[QString("cursor")]);
    m_cursor_isSet = !json[QString("cursor")].isNull() && m_cursor_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAIListCatalogRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCatalogRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_version_isSet) {
        obj.insert(QString("catalog_version"), ::OpenAPI::toJsonValue(m_catalog_version));
    }
    if (m_cursor_isSet) {
        obj.insert(QString("cursor"), ::OpenAPI::toJsonValue(m_cursor));
    }
    if (m_types_isSet) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

qint64 OAIListCatalogRequest::getCatalogVersion() const {
    return m_catalog_version;
}
void OAIListCatalogRequest::setCatalogVersion(const qint64 &catalog_version) {
    m_catalog_version = catalog_version;
    m_catalog_version_isSet = true;
}

bool OAIListCatalogRequest::is_catalog_version_Set() const{
    return m_catalog_version_isSet;
}

bool OAIListCatalogRequest::is_catalog_version_Valid() const{
    return m_catalog_version_isValid;
}

QString OAIListCatalogRequest::getCursor() const {
    return m_cursor;
}
void OAIListCatalogRequest::setCursor(const QString &cursor) {
    m_cursor = cursor;
    m_cursor_isSet = true;
}

bool OAIListCatalogRequest::is_cursor_Set() const{
    return m_cursor_isSet;
}

bool OAIListCatalogRequest::is_cursor_Valid() const{
    return m_cursor_isValid;
}

QString OAIListCatalogRequest::getTypes() const {
    return m_types;
}
void OAIListCatalogRequest::setTypes(const QString &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIListCatalogRequest::is_types_Set() const{
    return m_types_isSet;
}

bool OAIListCatalogRequest::is_types_Valid() const{
    return m_types_isValid;
}

bool OAIListCatalogRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCatalogRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
