/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBreak.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBreak::OAIBreak(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBreak::OAIBreak() {
    this->initializeModel();
}

OAIBreak::~OAIBreak() {}

void OAIBreak::initializeModel() {

    m_break_type_id_isSet = false;
    m_break_type_id_isValid = false;

    m_end_at_isSet = false;
    m_end_at_isValid = false;

    m_expected_duration_isSet = false;
    m_expected_duration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_paid_isSet = false;
    m_is_paid_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_at_isSet = false;
    m_start_at_isValid = false;
}

void OAIBreak::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBreak::fromJsonObject(QJsonObject json) {

    m_break_type_id_isValid = ::OpenAPI::fromJsonValue(m_break_type_id, json[QString("break_type_id")]);
    m_break_type_id_isSet = !json[QString("break_type_id")].isNull() && m_break_type_id_isValid;

    m_end_at_isValid = ::OpenAPI::fromJsonValue(m_end_at, json[QString("end_at")]);
    m_end_at_isSet = !json[QString("end_at")].isNull() && m_end_at_isValid;

    m_expected_duration_isValid = ::OpenAPI::fromJsonValue(m_expected_duration, json[QString("expected_duration")]);
    m_expected_duration_isSet = !json[QString("expected_duration")].isNull() && m_expected_duration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_paid_isValid = ::OpenAPI::fromJsonValue(m_is_paid, json[QString("is_paid")]);
    m_is_paid_isSet = !json[QString("is_paid")].isNull() && m_is_paid_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_start_at_isValid = ::OpenAPI::fromJsonValue(m_start_at, json[QString("start_at")]);
    m_start_at_isSet = !json[QString("start_at")].isNull() && m_start_at_isValid;
}

QString OAIBreak::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBreak::asJsonObject() const {
    QJsonObject obj;
    if (m_break_type_id_isSet) {
        obj.insert(QString("break_type_id"), ::OpenAPI::toJsonValue(m_break_type_id));
    }
    if (m_end_at_isSet) {
        obj.insert(QString("end_at"), ::OpenAPI::toJsonValue(m_end_at));
    }
    if (m_expected_duration_isSet) {
        obj.insert(QString("expected_duration"), ::OpenAPI::toJsonValue(m_expected_duration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_paid_isSet) {
        obj.insert(QString("is_paid"), ::OpenAPI::toJsonValue(m_is_paid));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_at_isSet) {
        obj.insert(QString("start_at"), ::OpenAPI::toJsonValue(m_start_at));
    }
    return obj;
}

QString OAIBreak::getBreakTypeId() const {
    return m_break_type_id;
}
void OAIBreak::setBreakTypeId(const QString &break_type_id) {
    m_break_type_id = break_type_id;
    m_break_type_id_isSet = true;
}

bool OAIBreak::is_break_type_id_Set() const{
    return m_break_type_id_isSet;
}

bool OAIBreak::is_break_type_id_Valid() const{
    return m_break_type_id_isValid;
}

QString OAIBreak::getEndAt() const {
    return m_end_at;
}
void OAIBreak::setEndAt(const QString &end_at) {
    m_end_at = end_at;
    m_end_at_isSet = true;
}

bool OAIBreak::is_end_at_Set() const{
    return m_end_at_isSet;
}

bool OAIBreak::is_end_at_Valid() const{
    return m_end_at_isValid;
}

QString OAIBreak::getExpectedDuration() const {
    return m_expected_duration;
}
void OAIBreak::setExpectedDuration(const QString &expected_duration) {
    m_expected_duration = expected_duration;
    m_expected_duration_isSet = true;
}

bool OAIBreak::is_expected_duration_Set() const{
    return m_expected_duration_isSet;
}

bool OAIBreak::is_expected_duration_Valid() const{
    return m_expected_duration_isValid;
}

QString OAIBreak::getId() const {
    return m_id;
}
void OAIBreak::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBreak::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBreak::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIBreak::isIsPaid() const {
    return m_is_paid;
}
void OAIBreak::setIsPaid(const bool &is_paid) {
    m_is_paid = is_paid;
    m_is_paid_isSet = true;
}

bool OAIBreak::is_is_paid_Set() const{
    return m_is_paid_isSet;
}

bool OAIBreak::is_is_paid_Valid() const{
    return m_is_paid_isValid;
}

QString OAIBreak::getName() const {
    return m_name;
}
void OAIBreak::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBreak::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBreak::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBreak::getStartAt() const {
    return m_start_at;
}
void OAIBreak::setStartAt(const QString &start_at) {
    m_start_at = start_at;
    m_start_at_isSet = true;
}

bool OAIBreak::is_start_at_Set() const{
    return m_start_at_isSet;
}

bool OAIBreak::is_start_at_Valid() const{
    return m_start_at_isValid;
}

bool OAIBreak::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_break_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBreak::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_break_type_id_isValid && m_expected_duration_isValid && m_is_paid_isValid && m_name_isValid && m_start_at_isValid && true;
}

} // namespace OpenAPI
