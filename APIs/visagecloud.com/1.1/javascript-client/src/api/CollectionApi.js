/**
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestResponse from '../model/RestResponse';

/**
* Collection service.
* @module api/CollectionApi
* @version 1.1
*/
export default class CollectionApi {

    /**
    * Constructs a new CollectionApi. 
    * @alias module:api/CollectionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCollection2UsingPOST operation.
     * @callback module:api/CollectionApi~addCollection2UsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new empty collection with given name
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} collectionName The name of the collection that will be created
     * @param {Object} opts Optional parameters
     * @param {Boolean} [preload = false)] Defined whether to preload collection
     * @param {Boolean} [evictable = true)] Defined whether the collection can be evicted
     * @param {Array.<module:model/String>} [purposes] The newly declared purposes of the collection
     * @param {module:api/CollectionApi~addCollection2UsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    addCollection2UsingPOST(accessKey, secretKey, collectionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling addCollection2UsingPOST");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling addCollection2UsingPOST");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling addCollection2UsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'collectionName': collectionName,
        'preload': opts['preload'],
        'evictable': opts['evictable'],
        'purposes': this.apiClient.buildCollectionParam(opts['purposes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/collection/collection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCollectionUsingPOST operation.
     * @callback module:api/CollectionApi~addCollectionUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new empty collection with given name
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} name The name of the collection that will be created
     * @param {Object} opts Optional parameters
     * @param {Boolean} [preload = false)] Defined whether to preload collection
     * @param {Boolean} [evictable = true)] Defined whether the collection can be evicted
     * @param {Array.<module:model/String>} [purposes] The newly declared purposes of the collection
     * @param {module:api/CollectionApi~addCollectionUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    addCollectionUsingPOST(accessKey, secretKey, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling addCollectionUsingPOST");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling addCollectionUsingPOST");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addCollectionUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'name': name,
        'preload': opts['preload'],
        'evictable': opts['evictable'],
        'purposes': this.apiClient.buildCollectionParam(opts['purposes'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/collection/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollection2UsingDELETE operation.
     * @callback module:api/CollectionApi~deleteCollection2UsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete existing collection with associated profiles and faces.
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} collectionId The id of the collection that will be removed
     * @param {module:api/CollectionApi~deleteCollection2UsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    deleteCollection2UsingDELETE(accessKey, secretKey, collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling deleteCollection2UsingDELETE");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling deleteCollection2UsingDELETE");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling deleteCollection2UsingDELETE");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'collectionId': collectionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/collection/collection', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollectionUsingDELETE operation.
     * @callback module:api/CollectionApi~deleteCollectionUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete existing collection with associated profiles and faces.
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} id The id of the collection that will be removed
     * @param {module:api/CollectionApi~deleteCollectionUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    deleteCollectionUsingDELETE(accessKey, secretKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling deleteCollectionUsingDELETE");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling deleteCollectionUsingDELETE");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCollectionUsingDELETE");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/collection/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportCSVUsingGET operation.
     * @callback module:api/CollectionApi~exportCSVUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve collection content for data analysis.
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} collectionId The id of the collection for which the data will be retrieved
     * @param {module:api/CollectionApi~exportCSVUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    exportCSVUsingGET(accessKey, secretKey, collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling exportCSVUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling exportCSVUsingGET");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling exportCSVUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'collectionId': collectionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/v1.1/collection/export/csv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCollectionProfilesUsingGET operation.
     * @callback module:api/CollectionApi~getAllCollectionProfilesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the profiles associated to a collection
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} id The collection that contains the profile
     * @param {module:api/CollectionApi~getAllCollectionProfilesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    getAllCollectionProfilesUsingGET(accessKey, secretKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getAllCollectionProfilesUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getAllCollectionProfilesUsingGET");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllCollectionProfilesUsingGET");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/collection/{id}/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCollections2UsingGET operation.
     * @callback module:api/CollectionApi~getAllCollections2UsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all collections
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {module:api/CollectionApi~getAllCollections2UsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    getAllCollections2UsingGET(accessKey, secretKey, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getAllCollections2UsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getAllCollections2UsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/collection/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCollectionsUsingGET operation.
     * @callback module:api/CollectionApi~getAllCollectionsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all collections
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {module:api/CollectionApi~getAllCollectionsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    getAllCollectionsUsingGET(accessKey, secretKey, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getAllCollectionsUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getAllCollectionsUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/collection/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollection2UsingGET operation.
     * @callback module:api/CollectionApi~getCollection2UsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve existing collection content
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} collectionId The id of the collection for which the data will be retrieved
     * @param {module:api/CollectionApi~getCollection2UsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    getCollection2UsingGET(accessKey, secretKey, collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getCollection2UsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getCollection2UsingGET");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getCollection2UsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'collectionId': collectionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/collection/collection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollectionUsingGET operation.
     * @callback module:api/CollectionApi~getCollectionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve existing collection content
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} id The id of the collection for which the data will be retrieved
     * @param {module:api/CollectionApi~getCollectionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    getCollectionUsingGET(accessKey, secretKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getCollectionUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getCollectionUsingGET");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCollectionUsingGET");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/collection/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repurposeCollectionUsingPUT operation.
     * @callback module:api/CollectionApi~repurposeCollectionUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change purpose of existing collection
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} collectionId The id of the collection for which the data will be retrieved
     * @param {Array.<module:model/String>} purposes The newly declared purposes of the collection
     * @param {module:api/CollectionApi~repurposeCollectionUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    repurposeCollectionUsingPUT(accessKey, secretKey, collectionId, purposes, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling repurposeCollectionUsingPUT");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling repurposeCollectionUsingPUT");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling repurposeCollectionUsingPUT");
      }
      // verify the required parameter 'purposes' is set
      if (purposes === undefined || purposes === null) {
        throw new Error("Missing the required parameter 'purposes' when calling repurposeCollectionUsingPUT");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'collectionId': collectionId,
        'purposes': this.apiClient.buildCollectionParam(purposes, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/collection/purpose', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCollection2UsingPOST operation.
     * @callback module:api/CollectionApi~updateCollection2UsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing collection with a given id
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} id The id of the collection that will be updated
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of the collection that will be updated
     * @param {Array.<module:model/String>} [purposes] The newly declared purposes of the collection
     * @param {module:api/CollectionApi~updateCollection2UsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    updateCollection2UsingPOST(accessKey, secretKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling updateCollection2UsingPOST");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling updateCollection2UsingPOST");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCollection2UsingPOST");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'name': opts['name'],
        'purposes': this.apiClient.buildCollectionParam(opts['purposes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/collection/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCollectionUsingPATCH operation.
     * @callback module:api/CollectionApi~updateCollectionUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing collection with a given id
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} id The id of the collection that will be updated
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of the collection that will be updated
     * @param {Array.<module:model/String>} [purposes] The newly declared purposes of the collection
     * @param {module:api/CollectionApi~updateCollectionUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    updateCollectionUsingPATCH(accessKey, secretKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling updateCollectionUsingPATCH");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling updateCollectionUsingPATCH");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCollectionUsingPATCH");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'name': opts['name'],
        'purposes': this.apiClient.buildCollectionParam(opts['purposes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/collection/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
