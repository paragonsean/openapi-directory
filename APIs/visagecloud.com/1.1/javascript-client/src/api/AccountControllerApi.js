/**
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestResponse from '../model/RestResponse';

/**
* AccountController service.
* @module api/AccountControllerApi
* @version 1.1
*/
export default class AccountControllerApi {

    /**
    * Constructs a new AccountControllerApi. 
    * @alias module:api/AccountControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changePasswordUsingPOST operation.
     * @callback module:api/AccountControllerApi~changePasswordUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change password for an account using old password
     * @param {String} email email
     * @param {String} oldPassword oldPassword
     * @param {String} newPassword newPassword
     * @param {module:api/AccountControllerApi~changePasswordUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    changePasswordUsingPOST(email, oldPassword, newPassword, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling changePasswordUsingPOST");
      }
      // verify the required parameter 'oldPassword' is set
      if (oldPassword === undefined || oldPassword === null) {
        throw new Error("Missing the required parameter 'oldPassword' when calling changePasswordUsingPOST");
      }
      // verify the required parameter 'newPassword' is set
      if (newPassword === undefined || newPassword === null) {
        throw new Error("Missing the required parameter 'newPassword' when calling changePasswordUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email,
        'oldPassword': oldPassword,
        'newPassword': newPassword
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/account/changePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountByAccessKeyUsingGET operation.
     * @callback module:api/AccountControllerApi~getAccountByAccessKeyUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account information by accessKey and secretKey
     * @param {String} accessKey accessKey
     * @param {String} secretKey secretKey
     * @param {module:api/AccountControllerApi~getAccountByAccessKeyUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    getAccountByAccessKeyUsingGET(accessKey, secretKey, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getAccountByAccessKeyUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getAccountByAccessKeyUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/account/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBillingPerAccountUsingGET operation.
     * @callback module:api/AccountControllerApi~getBillingPerAccountUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get billing information by accessKey and secretKey
     * @param {String} accessKey accessKey
     * @param {String} secretKey secretKey
     * @param {Object} opts Optional parameters
     * @param {Date} [startDateTime] startDateTime
     * @param {Date} [endDateTime] endDateTime
     * @param {String} [dateTemplate] dateTemplate
     * @param {module:api/AccountControllerApi~getBillingPerAccountUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    getBillingPerAccountUsingGET(accessKey, secretKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getBillingPerAccountUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getBillingPerAccountUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'startDateTime': opts['startDateTime'],
        'endDateTime': opts['endDateTime'],
        'dateTemplate': opts['dateTemplate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/account/billing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginWithEmailUsingPOST operation.
     * @callback module:api/AccountControllerApi~loginWithEmailUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account information including accessKey and secretKey by email and password
     * @param {String} email email
     * @param {String} password password
     * @param {module:api/AccountControllerApi~loginWithEmailUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    loginWithEmailUsingPOST(email, password, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling loginWithEmailUsingPOST");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling loginWithEmailUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email,
        'password': password
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/account/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
