/**
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestResponse from '../model/RestResponse';

/**
* Stream service.
* @module api/StreamApi
* @version 1.1
*/
export default class StreamApi {

    /**
    * Constructs a new StreamApi. 
    * @alias module:api/StreamApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addStreamUsingPOST operation.
     * @callback module:api/StreamApi~addStreamUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new stream with given name
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} name The name of the stream that will be created
     * @param {String} url The url of the stream
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [method = 'WEBRTC_PUSH')] Streaming method
     * @param {String} [username] Username
     * @param {String} [password] Password
     * @param {Boolean} [skipFramesWithNoFaces = true)] Boolean value indicating whether you want the original picture to be stored for later retrieval
     * @param {Number} [retentionTime = 605000)] Number of seconds for frames to be kept. Default is 605000s (7 days)
     * @param {Boolean} [storeOriginalFrames = false)] Boolean value indicating whether you want the original picture to be stored for later retrieval
     * @param {Boolean} [storeAttendanceFaces = false)] Boolean value indicating whether you want to store permanently store faces clippings of the recognized faces
     * @param {Boolean} [storeAttendanceFrames = false)] Boolean value indicating whether you want to store permanently store frames with a recognized face in them
     * @param {Boolean} [isActive = false)] Boolean value indicating whether the stream is currently active or not
     * @param {Array.<String>} [associatedCollections] List of collection ids which will be used to measure attendance
     * @param {String} [attributes] Attributes of the stream
     * @param {module:api/StreamApi~addStreamUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    addStreamUsingPOST(accessKey, secretKey, name, url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling addStreamUsingPOST");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling addStreamUsingPOST");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addStreamUsingPOST");
      }
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling addStreamUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'name': name,
        'url': url,
        'method': opts['method'],
        'username': opts['username'],
        'password': opts['password'],
        'skipFramesWithNoFaces': opts['skipFramesWithNoFaces'],
        'retentionTime': opts['retentionTime'],
        'storeOriginalFrames': opts['storeOriginalFrames'],
        'storeAttendanceFaces': opts['storeAttendanceFaces'],
        'storeAttendanceFrames': opts['storeAttendanceFrames'],
        'isActive': opts['isActive'],
        'associatedCollections': this.apiClient.buildCollectionParam(opts['associatedCollections'], 'multi'),
        'attributes': opts['attributes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/stream/stream', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cleanupStreamUsingPATCH operation.
     * @callback module:api/StreamApi~cleanupStreamUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cleanup frames older than specified timeframe
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} streamId The id of the stream that will be stopped
     * @param {Number} interval Frames older than interval (seconds) will be cleaned up
     * @param {module:api/StreamApi~cleanupStreamUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    cleanupStreamUsingPATCH(accessKey, secretKey, streamId, interval, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling cleanupStreamUsingPATCH");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling cleanupStreamUsingPATCH");
      }
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling cleanupStreamUsingPATCH");
      }
      // verify the required parameter 'interval' is set
      if (interval === undefined || interval === null) {
        throw new Error("Missing the required parameter 'interval' when calling cleanupStreamUsingPATCH");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'streamId': streamId,
        'interval': interval
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/stream/cleanup', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFrameImageUsingGET operation.
     * @callback module:api/StreamApi~getFrameImageUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Blob>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get individual frame image
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} streamId The id of the stream for which the frames will be retrieved
     * @param {Number} timestamp Timestamp of frame to retrieve
     * @param {module:api/StreamApi~getFrameImageUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Blob>}
     */
    getFrameImageUsingGET(accessKey, secretKey, streamId, timestamp, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getFrameImageUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getFrameImageUsingGET");
      }
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling getFrameImageUsingGET");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling getFrameImageUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'streamId': streamId,
        'timestamp': timestamp
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/jpeg'];
      let returnType = ['Blob'];
      return this.apiClient.callApi(
        '/rest/v1.1/stream/frameImage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLastNAttedanceUsingGET operation.
     * @callback module:api/StreamApi~getLastNAttedanceUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get last N recognized individuals from stream
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [streamIds] The id of the stream for which the frames will be retrieved
     * @param {Number} [count = 10)] How many frames to retrieve at a time
     * @param {module:api/StreamApi~getLastNAttedanceUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    getLastNAttedanceUsingGET(accessKey, secretKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getLastNAttedanceUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getLastNAttedanceUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'streamIds': this.apiClient.buildCollectionParam(opts['streamIds'], 'multi'),
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/stream/attendance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLastNFramesUsingGET operation.
     * @callback module:api/StreamApi~getLastNFramesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get last processed N frames from stream
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} streamId The id of the stream for which the frames will be retrieved
     * @param {Object} opts Optional parameters
     * @param {Number} [count = 10)] How many frames to retrieve at a time
     * @param {String} [collectionId] The collection id you want to run recognition against
     * @param {Array.<String>} [labels] Labels associated with the given picture or picture URL
     * @param {Array.<module:model/String>} [attributeFilters] Filters that will be applied on the recognition operation
     * @param {module:api/StreamApi~getLastNFramesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    getLastNFramesUsingGET(accessKey, secretKey, streamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getLastNFramesUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getLastNFramesUsingGET");
      }
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling getLastNFramesUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'streamId': streamId,
        'count': opts['count'],
        'collectionId': opts['collectionId'],
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'attributeFilters': this.apiClient.buildCollectionParam(opts['attributeFilters'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/stream/frames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStreamUsingGET operation.
     * @callback module:api/StreamApi~getStreamUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an existing stream with a given ID
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} streamId The id of the stream for which the data will be retrieved
     * @param {module:api/StreamApi~getStreamUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    getStreamUsingGET(accessKey, secretKey, streamId, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getStreamUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getStreamUsingGET");
      }
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling getStreamUsingGET");
      }

      let pathParams = {
        'streamId': streamId
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/stream/{streamId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeStreamUsingDELETE operation.
     * @callback module:api/StreamApi~removeStreamUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete existing stream
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} id The id of the stream that will be removed
     * @param {module:api/StreamApi~removeStreamUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    removeStreamUsingDELETE(accessKey, secretKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling removeStreamUsingDELETE");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling removeStreamUsingDELETE");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeStreamUsingDELETE");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/stream/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startStreamUsingPATCH operation.
     * @callback module:api/StreamApi~startStreamUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start existing stream
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} streamId The id of the stream that will be started
     * @param {module:api/StreamApi~startStreamUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    startStreamUsingPATCH(accessKey, secretKey, streamId, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling startStreamUsingPATCH");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling startStreamUsingPATCH");
      }
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling startStreamUsingPATCH");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'streamId': streamId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/stream/start', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopStreamUsingPATCH operation.
     * @callback module:api/StreamApi~stopStreamUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop existing stream
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} streamId The id of the stream that will be stopped
     * @param {module:api/StreamApi~stopStreamUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    stopStreamUsingPATCH(accessKey, secretKey, streamId, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling stopStreamUsingPATCH");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling stopStreamUsingPATCH");
      }
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling stopStreamUsingPATCH");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'streamId': streamId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/stream/stop', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamsByAccountUsingGET operation.
     * @callback module:api/StreamApi~streamsByAccountUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show status of all streams from account
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {module:api/StreamApi~streamsByAccountUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    streamsByAccountUsingGET(accessKey, secretKey, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling streamsByAccountUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling streamsByAccountUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/stream/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStreamUsingPATCH operation.
     * @callback module:api/StreamApi~updateStreamUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing stream with a given ID
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} streamId The id of the stream that will be updated
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of the stream that will be updated
     * @param {String} [url] The url of the stream
     * @param {module:model/String} [method] Streaming method
     * @param {String} [username] Username
     * @param {String} [password] Password
     * @param {Boolean} [skipFramesWithNoFaces] Boolean value indicating whether you want the original picture to be stored for later retrieval
     * @param {Number} [retentionTime] Number of seconds for frames to be kept
     * @param {Boolean} [storeOriginalFrames] Boolean value indicating whether you want the original picture to be stored for later retrieval
     * @param {Boolean} [storeAttendanceFaces] Boolean value indicating whether you want to store permanently store faces clippings of the recognized faces
     * @param {Boolean} [storeAttendanceFrames] Boolean value indicating whether you want to store permanently store frames with a recognized face in them
     * @param {Boolean} [isActive] Boolean value indicating whether the stream is currently active or not
     * @param {Array.<String>} [associatedCollections] List of collection ids which will be used to measure attendance
     * @param {String} [attributes] Attributes of the stream
     * @param {module:api/StreamApi~updateStreamUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    updateStreamUsingPATCH(accessKey, secretKey, streamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling updateStreamUsingPATCH");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling updateStreamUsingPATCH");
      }
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling updateStreamUsingPATCH");
      }

      let pathParams = {
        'streamId': streamId
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'name': opts['name'],
        'url': opts['url'],
        'method': opts['method'],
        'username': opts['username'],
        'password': opts['password'],
        'skipFramesWithNoFaces': opts['skipFramesWithNoFaces'],
        'retentionTime': opts['retentionTime'],
        'storeOriginalFrames': opts['storeOriginalFrames'],
        'storeAttendanceFaces': opts['storeAttendanceFaces'],
        'storeAttendanceFrames': opts['storeAttendanceFrames'],
        'isActive': opts['isActive'],
        'associatedCollections': this.apiClient.buildCollectionParam(opts['associatedCollections'], 'multi'),
        'attributes': opts['attributes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/stream/{streamId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
