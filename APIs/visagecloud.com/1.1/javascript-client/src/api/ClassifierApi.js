/**
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestResponse from '../model/RestResponse';

/**
* Classifier service.
* @module api/ClassifierApi
* @version 1.1
*/
export default class ClassifierApi {

    /**
    * Constructs a new ClassifierApi. 
    * @alias module:api/ClassifierApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addSVMClassifierUsingPOST operation.
     * @callback module:api/ClassifierApi~addSVMClassifierUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new SVM classifier with given name
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} name The name of the SVM classifier that will be created
     * @param {Array.<String>} collectionIds Collection ids
     * @param {String} classificationAttributeName Classification attribute name
     * @param {Object} opts Optional parameters
     * @param {String} [preprocessor = 'FeaturePreprocessor')] Preprocessor
     * @param {Boolean} [considerViewPoints = false)] Consider view point
     * @param {Number} [seed = 179425537)] Seed for divididing training and evaluation sets
     * @param {Number} [trainingRatio = 0.8)] Training ratio
     * @param {Number} [probabilityParameter = 1)] Probability parameter
     * @param {Number} [gammaParameter = 0.5)] Gamma parameter
     * @param {Number} [nuParameter = 0.25)] Nu parameter
     * @param {Number} [cParameter = 1.0)] c parameter
     * @param {Number} [svmTypeParameter = 0)] SVM type parameter
     * @param {Number} [kernelTypeParameter = 0)] Kernel type parameter
     * @param {Number} [cacheSizeParameter = 500.0)] Cache size parameter
     * @param {Number} [epsParameter = 0.001)] Eps parameter
     * @param {module:api/ClassifierApi~addSVMClassifierUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    addSVMClassifierUsingPOST(accessKey, secretKey, name, collectionIds, classificationAttributeName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling addSVMClassifierUsingPOST");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling addSVMClassifierUsingPOST");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addSVMClassifierUsingPOST");
      }
      // verify the required parameter 'collectionIds' is set
      if (collectionIds === undefined || collectionIds === null) {
        throw new Error("Missing the required parameter 'collectionIds' when calling addSVMClassifierUsingPOST");
      }
      // verify the required parameter 'classificationAttributeName' is set
      if (classificationAttributeName === undefined || classificationAttributeName === null) {
        throw new Error("Missing the required parameter 'classificationAttributeName' when calling addSVMClassifierUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'name': name,
        'collectionIds': this.apiClient.buildCollectionParam(collectionIds, 'multi'),
        'preprocessor': opts['preprocessor'],
        'classificationAttributeName': classificationAttributeName,
        'considerViewPoints': opts['considerViewPoints'],
        'seed': opts['seed'],
        'trainingRatio': opts['trainingRatio'],
        'probabilityParameter': opts['probabilityParameter'],
        'gammaParameter': opts['gammaParameter'],
        'nuParameter': opts['nuParameter'],
        'cParameter': opts['cParameter'],
        'svmTypeParameter': opts['svmTypeParameter'],
        'kernelTypeParameter': opts['kernelTypeParameter'],
        'cacheSizeParameter': opts['cacheSizeParameter'],
        'epsParameter': opts['epsParameter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/classifier/svm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClassiferFullUsingGET operation.
     * @callback module:api/ClassifierApi~getClassiferFullUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get classifier full
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} id The id of the classifier that you want the status for
     * @param {module:api/ClassifierApi~getClassiferFullUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    getClassiferFullUsingGET(accessKey, secretKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getClassiferFullUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getClassiferFullUsingGET");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClassiferFullUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/classifier/svm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClassiferStatusUsingGET operation.
     * @callback module:api/ClassifierApi~getClassiferStatusUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get classifer status
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} id The id of the classifier that you want the status for
     * @param {module:api/ClassifierApi~getClassiferStatusUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    getClassiferStatusUsingGET(accessKey, secretKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getClassiferStatusUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getClassiferStatusUsingGET");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClassiferStatusUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/classifier/svm/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeClassiferUsingDELETE operation.
     * @callback module:api/ClassifierApi~removeClassiferUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete existing classifier
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} id The id of the classifier that will be removed
     * @param {module:api/ClassifierApi~removeClassiferUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    removeClassiferUsingDELETE(accessKey, secretKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling removeClassiferUsingDELETE");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling removeClassiferUsingDELETE");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeClassiferUsingDELETE");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/classifier/svm', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
