/**
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestResponse from '../model/RestResponse';

/**
* AnalyticsForPresenceAndAudience service.
* @module api/AnalyticsForPresenceAndAudienceApi
* @version 1.1
*/
export default class AnalyticsForPresenceAndAudienceApi {

    /**
    * Constructs a new AnalyticsForPresenceAndAudienceApi. 
    * @alias module:api/AnalyticsForPresenceAndAudienceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the counterUsingPOST operation.
     * @callback module:api/AnalyticsForPresenceAndAudienceApi~counterUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count individuals in streams or collections
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [collectionIds] Collection ids
     * @param {Array.<String>} [streamIds] Stream Ids
     * @param {Date} [startDateTime] startDateTime
     * @param {Date} [endDateTime] endDateTime
     * @param {Number} [visitDuration = 3600000)] visitDuration
     * @param {Number} [maxIterations = 1)] maxIterations
     * @param {Number} [maxBatchIterations = 1)] maxBatchIterations
     * @param {Number} [minNeighborsMergedPerIteration = 5)] minNeighborsMergedPerIteration
     * @param {Number} [mergingStep = 1.0)] mergingStep
     * @param {Boolean} [shuffling = false)] shuffling
     * @param {module:api/AnalyticsForPresenceAndAudienceApi~counterUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    counterUsingPOST(accessKey, secretKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling counterUsingPOST");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling counterUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'collectionIds': this.apiClient.buildCollectionParam(opts['collectionIds'], 'multi'),
        'streamIds': this.apiClient.buildCollectionParam(opts['streamIds'], 'multi'),
        'startDateTime': opts['startDateTime'],
        'endDateTime': opts['endDateTime'],
        'visitDuration': opts['visitDuration'],
        'maxIterations': opts['maxIterations'],
        'maxBatchIterations': opts['maxBatchIterations'],
        'minNeighborsMergedPerIteration': opts['minNeighborsMergedPerIteration'],
        'mergingStep': opts['mergingStep'],
        'shuffling': opts['shuffling']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/analytics/counting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the presenceTimeseriesUsingPOST operation.
     * @callback module:api/AnalyticsForPresenceAndAudienceApi~presenceTimeseriesUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show audience (based on number of occurrences of each person) breakdown per declared attribute (age, gender).
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {Array.<String>} attributes attributes
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [streamIds] Stream Ids
     * @param {Date} [startDateTime] startDateTime
     * @param {Date} [endDateTime] endDateTime
     * @param {Number} [step = 3600)] step
     * @param {module:api/AnalyticsForPresenceAndAudienceApi~presenceTimeseriesUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    presenceTimeseriesUsingPOST(accessKey, secretKey, attributes, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling presenceTimeseriesUsingPOST");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling presenceTimeseriesUsingPOST");
      }
      // verify the required parameter 'attributes' is set
      if (attributes === undefined || attributes === null) {
        throw new Error("Missing the required parameter 'attributes' when calling presenceTimeseriesUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'streamIds': this.apiClient.buildCollectionParam(opts['streamIds'], 'multi'),
        'startDateTime': opts['startDateTime'],
        'endDateTime': opts['endDateTime'],
        'step': opts['step'],
        'attributes': this.apiClient.buildCollectionParam(attributes, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/analytics/presence/timeseries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the presenceTotalUsingPOST operation.
     * @callback module:api/AnalyticsForPresenceAndAudienceApi~presenceTotalUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show presence (based on number of occurences of each face) breakdown per declared attribute (age, gender)
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {Array.<String>} streamIds Stream Ids
     * @param {Array.<String>} attributes attributes
     * @param {Object} opts Optional parameters
     * @param {Date} [startDateTime] startDateTime
     * @param {Date} [endDateTime] endDateTime
     * @param {module:api/AnalyticsForPresenceAndAudienceApi~presenceTotalUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    presenceTotalUsingPOST(accessKey, secretKey, streamIds, attributes, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling presenceTotalUsingPOST");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling presenceTotalUsingPOST");
      }
      // verify the required parameter 'streamIds' is set
      if (streamIds === undefined || streamIds === null) {
        throw new Error("Missing the required parameter 'streamIds' when calling presenceTotalUsingPOST");
      }
      // verify the required parameter 'attributes' is set
      if (attributes === undefined || attributes === null) {
        throw new Error("Missing the required parameter 'attributes' when calling presenceTotalUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'streamIds': this.apiClient.buildCollectionParam(streamIds, 'multi'),
        'startDateTime': opts['startDateTime'],
        'endDateTime': opts['endDateTime'],
        'attributes': this.apiClient.buildCollectionParam(attributes, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/analytics/presence/total', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
