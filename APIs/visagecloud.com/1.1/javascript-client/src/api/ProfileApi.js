/**
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestResponse from '../model/RestResponse';

/**
* Profile service.
* @module api/ProfileApi
* @version 1.1
*/
export default class ProfileApi {

    /**
    * Constructs a new ProfileApi. 
    * @alias module:api/ProfileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addProfileUsingPOST operation.
     * @callback module:api/ProfileApi~addProfileUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new profile with no faces associated to it (empty profile)
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} collectionId Uniquely identified collection that can store multiple profiles
     * @param {Object} opts Optional parameters
     * @param {String} [externalId] External reference to additional information you donâ€™t want to share with VisageCloud
     * @param {String} [screenName] Human-readable label for the profile
     * @param {Array.<String>} [labels] Allows you to do finer filtering in face recognition
     * @param {String} [classificationAttributes] Comma separated key:value classification attributes
     * @param {String} [details] Comma separated key:value details of profile
     * @param {module:api/ProfileApi~addProfileUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    addProfileUsingPOST(accessKey, secretKey, collectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling addProfileUsingPOST");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling addProfileUsingPOST");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling addProfileUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'collectionId': collectionId,
        'externalId': opts['externalId'],
        'screenName': opts['screenName'],
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'classificationAttributes': opts['classificationAttributes'],
        'details': opts['details']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/profile/profile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfile2UsingDELETE operation.
     * @callback module:api/ProfileApi~deleteProfile2UsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a profile and unmaps all its faces
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} collectionId Uniquely identified collection that can store multiple profiles
     * @param {String} profileId The profile id (provide this if you don't have the externalId
     * @param {module:api/ProfileApi~deleteProfile2UsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    deleteProfile2UsingDELETE(accessKey, secretKey, collectionId, profileId, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling deleteProfile2UsingDELETE");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling deleteProfile2UsingDELETE");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling deleteProfile2UsingDELETE");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling deleteProfile2UsingDELETE");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'collectionId': collectionId,
        'profileId': profileId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/profile/profile', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfileUsingDELETE operation.
     * @callback module:api/ProfileApi~deleteProfileUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a profile and unmaps all its faces
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} collectionId Uniquely identified collection that can store multiple profiles
     * @param {String} id The profile id (provide this if you don't have the externalId
     * @param {module:api/ProfileApi~deleteProfileUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    deleteProfileUsingDELETE(accessKey, secretKey, collectionId, id, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling deleteProfileUsingDELETE");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling deleteProfileUsingDELETE");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling deleteProfileUsingDELETE");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProfileUsingDELETE");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'collectionId': collectionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/profile/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClassificationAttributesFromProfileUsingGET operation.
     * @callback module:api/ProfileApi~getClassificationAttributesFromProfileUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets classification attributes from a profile
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} profileId The profile associated with the classification attributes
     * @param {String} collectionId The collection that contains the profile
     * @param {module:api/ProfileApi~getClassificationAttributesFromProfileUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    getClassificationAttributesFromProfileUsingGET(accessKey, secretKey, profileId, collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getClassificationAttributesFromProfileUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getClassificationAttributesFromProfileUsingGET");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getClassificationAttributesFromProfileUsingGET");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getClassificationAttributesFromProfileUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'profileId': profileId,
        'collectionId': collectionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/profile/classificationAttributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFacesFromProfileUsingGET operation.
     * @callback module:api/ProfileApi~getFacesFromProfileUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the faceHashes associated to a profile
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} profileId The profile that contains the faces
     * @param {String} collectionId The collection that contains the profile
     * @param {module:api/ProfileApi~getFacesFromProfileUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    getFacesFromProfileUsingGET(accessKey, secretKey, profileId, collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getFacesFromProfileUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getFacesFromProfileUsingGET");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getFacesFromProfileUsingGET");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getFacesFromProfileUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'profileId': profileId,
        'collectionId': collectionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/profile/map', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfileEnrollmentStatusUsingGET operation.
     * @callback module:api/ProfileApi~getProfileEnrollmentStatusUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the enrollment status of a profile: information on whether it is suitable for authentication.
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} profileId The profile that contains the faces
     * @param {String} collectionId The collection that contains the profile
     * @param {module:api/ProfileApi~getProfileEnrollmentStatusUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    getProfileEnrollmentStatusUsingGET(accessKey, secretKey, profileId, collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getProfileEnrollmentStatusUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getProfileEnrollmentStatusUsingGET");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getProfileEnrollmentStatusUsingGET");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getProfileEnrollmentStatusUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'profileId': profileId,
        'collectionId': collectionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/profile/enrollmentStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfileUsingGET operation.
     * @callback module:api/ProfileApi~getProfileUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a profile
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} collectionId Uniquely identified collection that can store multiple profiles
     * @param {String} id The profile id (provide this if you don't have the externalId
     * @param {Object} opts Optional parameters
     * @param {String} [withFaces = 'false')] Retrieves the profile with all its associated faces
     * @param {module:api/ProfileApi~getProfileUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    getProfileUsingGET(accessKey, secretKey, collectionId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getProfileUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling getProfileUsingGET");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getProfileUsingGET");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProfileUsingGET");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'collectionId': collectionId,
        'withFaces': opts['withFaces']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/profile/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapClassificationAttributesToProfileUsingPUT operation.
     * @callback module:api/ProfileApi~mapClassificationAttributesToProfileUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Maps classification attributes to a profile
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} profileId The profile associated with the classification attributes
     * @param {String} collectionId The collection that contains the profile
     * @param {String} classificationAttributes Comma separated key:value classification attributes
     * @param {module:api/ProfileApi~mapClassificationAttributesToProfileUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    mapClassificationAttributesToProfileUsingPUT(accessKey, secretKey, profileId, collectionId, classificationAttributes, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling mapClassificationAttributesToProfileUsingPUT");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling mapClassificationAttributesToProfileUsingPUT");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling mapClassificationAttributesToProfileUsingPUT");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling mapClassificationAttributesToProfileUsingPUT");
      }
      // verify the required parameter 'classificationAttributes' is set
      if (classificationAttributes === undefined || classificationAttributes === null) {
        throw new Error("Missing the required parameter 'classificationAttributes' when calling mapClassificationAttributesToProfileUsingPUT");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'profileId': profileId,
        'collectionId': collectionId,
        'classificationAttributes': classificationAttributes
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/profile/classificationAttributes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapFacesToProfileUsingPOST operation.
     * @callback module:api/ProfileApi~mapFacesToProfileUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds (maps) a list of faces, identified by faceHashes, to a profile, identified by profileId
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} faceHashes Comma separated face hashes, that will be associated to a profile
     * @param {String} profileId The profile that will store the face
     * @param {String} collectionId The collection that contains the profile
     * @param {module:api/ProfileApi~mapFacesToProfileUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    mapFacesToProfileUsingPOST(accessKey, secretKey, faceHashes, profileId, collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling mapFacesToProfileUsingPOST");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling mapFacesToProfileUsingPOST");
      }
      // verify the required parameter 'faceHashes' is set
      if (faceHashes === undefined || faceHashes === null) {
        throw new Error("Missing the required parameter 'faceHashes' when calling mapFacesToProfileUsingPOST");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling mapFacesToProfileUsingPOST");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling mapFacesToProfileUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'faceHashes': faceHashes,
        'profileId': profileId,
        'collectionId': collectionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/profile/map', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeClassificationAttributesFromProfileUsingDELETE operation.
     * @callback module:api/ProfileApi~removeClassificationAttributesFromProfileUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes classification attributes from a profile
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} profileId The profile associated with the classification attributes
     * @param {String} collectionId The collection that contains the profile
     * @param {module:api/ProfileApi~removeClassificationAttributesFromProfileUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    removeClassificationAttributesFromProfileUsingDELETE(accessKey, secretKey, profileId, collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling removeClassificationAttributesFromProfileUsingDELETE");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling removeClassificationAttributesFromProfileUsingDELETE");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling removeClassificationAttributesFromProfileUsingDELETE");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling removeClassificationAttributesFromProfileUsingDELETE");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'profileId': profileId,
        'collectionId': collectionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/profile/classificationAttributes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeFacesFromProfileUsingDELETE operation.
     * @callback module:api/ProfileApi~removeFacesFromProfileUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes (unmaps) a list of faces, identified by faceHashes, from a profile, identified by profileId
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey provided by VisageCloud
     * @param {String} faceHashes Comma separated face hashes, that will be removed from a profile
     * @param {String} profileId The profile that contains the face
     * @param {String} collectionId The collection that contains the profile
     * @param {module:api/ProfileApi~removeFacesFromProfileUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    removeFacesFromProfileUsingDELETE(accessKey, secretKey, faceHashes, profileId, collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling removeFacesFromProfileUsingDELETE");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling removeFacesFromProfileUsingDELETE");
      }
      // verify the required parameter 'faceHashes' is set
      if (faceHashes === undefined || faceHashes === null) {
        throw new Error("Missing the required parameter 'faceHashes' when calling removeFacesFromProfileUsingDELETE");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling removeFacesFromProfileUsingDELETE");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling removeFacesFromProfileUsingDELETE");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'faceHashes': faceHashes,
        'profileId': profileId,
        'collectionId': collectionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/profile/map', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProfileUsingPATCH operation.
     * @callback module:api/ProfileApi~updateProfileUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing profile with a given id
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} id The id of the profile that will be updated
     * @param {String} collectionId Uniquely identified collection that can store multiple profiles
     * @param {Object} opts Optional parameters
     * @param {String} [externalId] External reference to additional information you donâ€™t want to share with VisageCloud
     * @param {String} [screenName] Human-readable label for the profile
     * @param {Array.<String>} [labels] Allows you to do finer filtering in face recognition
     * @param {String} [classificationAttributes] Comma separated key:value classification attributes
     * @param {String} [details] Comma separated key:value details of profile
     * @param {module:api/ProfileApi~updateProfileUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    updateProfileUsingPATCH(accessKey, secretKey, id, collectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling updateProfileUsingPATCH");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling updateProfileUsingPATCH");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProfileUsingPATCH");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling updateProfileUsingPATCH");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'collectionId': collectionId,
        'externalId': opts['externalId'],
        'screenName': opts['screenName'],
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'classificationAttributes': opts['classificationAttributes'],
        'details': opts['details']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/profile/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
