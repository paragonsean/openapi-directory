/**
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestResponse from '../model/RestResponse';

/**
* Analysis service.
* @module api/AnalysisApi
* @version 1.1
*/
export default class AnalysisApi {

    /**
    * Constructs a new AnalysisApi. 
    * @alias module:api/AnalysisApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the compareFacesUsingGET operation.
     * @callback module:api/AnalysisApi~compareFacesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compare several faces identified by faceHash, without depending on mapping faces to profiles
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {Array.<String>} faceHashes The IDs of the faces which you want compared, comma-separated
     * @param {Object} opts Optional parameters
     * @param {Boolean} [showDetails = false)] Show details
     * @param {module:api/AnalysisApi~compareFacesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    compareFacesUsingGET(accessKey, secretKey, faceHashes, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling compareFacesUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling compareFacesUsingGET");
      }
      // verify the required parameter 'faceHashes' is set
      if (faceHashes === undefined || faceHashes === null) {
        throw new Error("Missing the required parameter 'faceHashes' when calling compareFacesUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'faceHashes': this.apiClient.buildCollectionParam(faceHashes, 'multi'),
        'showDetails': opts['showDetails']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/analysis/compare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the performAnalysisUsingPOST operation.
     * @callback module:api/AnalysisApi~performAnalysisUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform detection on a given picture or picture URL
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {Object} opts Optional parameters
     * @param {Boolean} [storeAnalysisPicture = true)] Boolean value indicating whether you want the picture of the analysis to be stored for later retrieval
     * @param {Boolean} [storeFacePictures = true)] Boolean value indicating whether you want the faces inside the picture to be stored for later retrieval
     * @param {Boolean} [storeResult = true)] Boolean value indicating whether you want the result of the analysis to be stored
     * @param {Number} [retentionTime] How many seconds the results should be retained in stoarage?
     * @param {String} [pictureURL] The URL of the picture, assuming it is served by a third party server. Server should be accesible from the Internet or through another netwoek by VisageCloud infrastructure
     * @param {module:model/String} [algorithmVersion = 'V2')] Algorithm version (V2 is more performant but not backward compatible)
     * @param {Boolean} [autoRotate = false)] Auto-rotate to find flipped or rotate faces
     * @param {Boolean} [skipEXIF = false)] Skip EXIF rotation procesing
     * @param {Boolean} [waitForPictureUpload = false)] Waits until the picture is successfully uploaded, before returning the response back the the client
     * @param {Array.<String>} [filters] [For advanced users only] Change feature filters for robustness of feature extraction. Tweaking this parameter may affect per
     * @param {String} [options] [For advanced users only] Options for preprocessing of image.
     * @param {String} [picture] The multipart/form-data version of the image, in case a direct upload is used. At least one of picture or pictureURL must be present
     * @param {module:api/AnalysisApi~performAnalysisUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    performAnalysisUsingPOST(accessKey, secretKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling performAnalysisUsingPOST");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling performAnalysisUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'storeAnalysisPicture': opts['storeAnalysisPicture'],
        'storeFacePictures': opts['storeFacePictures'],
        'storeResult': opts['storeResult'],
        'retentionTime': opts['retentionTime'],
        'pictureURL': opts['pictureURL'],
        'algorithmVersion': opts['algorithmVersion'],
        'autoRotate': opts['autoRotate'],
        'skipEXIF': opts['skipEXIF'],
        'waitForPictureUpload': opts['waitForPictureUpload'],
        'filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'options': opts['options']
      };
      let headerParams = {
      };
      let formParams = {
        'picture': opts['picture']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/analysis/detection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the performRecognitionUsingPOST operation.
     * @callback module:api/AnalysisApi~performRecognitionUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform labeled recognition on a given picture or picture URL
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} collectionId Uniquely identified collection that can store multiple profiles
     * @param {Object} opts Optional parameters
     * @param {Boolean} [storeAnalysisPicture = true)] Boolean value indicating whether you want the picture of the analysis to be stored for later retrieval
     * @param {Boolean} [storeFacePictures = true)] Boolean value indicating whether you want the faces inside the picture to be stored for later retrieval
     * @param {Boolean} [storeResult = true)] Boolean value indicating whether you want the result of the analysis to be stored
     * @param {Number} [retentionTime] How many seconds the results should be retained in stoarage?
     * @param {Array.<String>} [labels] Labels associated with the given picture or picture URL
     * @param {Array.<module:model/String>} [attributeFilters] Filters that will be applied on the recognition operation
     * @param {String} [pictureURL] The URL of the picture
     * @param {module:model/String} [algorithmVersion = 'V2')] Algorithm version (V2 is more performant but not backward compatible)
     * @param {Boolean} [autoRotate = false)] Auto-rotate to find flipped or rotate faces
     * @param {Boolean} [skipEXIFRotationProcessing = false)] Skip EXIF rotation procesing
     * @param {Boolean} [waitForPictureUpload = false)] Waits until the picture is successfully uploaded, before returning the response back the the client
     * @param {Array.<String>} [filters] [For advanced users only] Change feature filters for robustness of feature extraction. Tweaking this parameter may affect per
     * @param {String} [options] [For advanced users only] Options for preprocessing of image.
     * @param {String} [picture] The picture itself
     * @param {module:api/AnalysisApi~performRecognitionUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    performRecognitionUsingPOST(accessKey, secretKey, collectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling performRecognitionUsingPOST");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling performRecognitionUsingPOST");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling performRecognitionUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'storeAnalysisPicture': opts['storeAnalysisPicture'],
        'storeFacePictures': opts['storeFacePictures'],
        'storeResult': opts['storeResult'],
        'retentionTime': opts['retentionTime'],
        'collectionId': collectionId,
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'attributeFilters': this.apiClient.buildCollectionParam(opts['attributeFilters'], 'multi'),
        'pictureURL': opts['pictureURL'],
        'algorithmVersion': opts['algorithmVersion'],
        'autoRotate': opts['autoRotate'],
        'skipEXIF rotation processing': opts['skipEXIFRotationProcessing'],
        'waitForPictureUpload': opts['waitForPictureUpload'],
        'filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'options': opts['options']
      };
      let headerParams = {
      };
      let formParams = {
        'picture': opts['picture']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/analysis/recognition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAnalysisUsingGET operation.
     * @callback module:api/AnalysisApi~retrieveAnalysisUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a complete analysis object including both detection and recognition information
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {String} analysisId The ID of the analysis for which the data will be retrieved
     * @param {module:api/AnalysisApi~retrieveAnalysisUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    retrieveAnalysisUsingGET(accessKey, secretKey, analysisId, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling retrieveAnalysisUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling retrieveAnalysisUsingGET");
      }
      // verify the required parameter 'analysisId' is set
      if (analysisId === undefined || analysisId === null) {
        throw new Error("Missing the required parameter 'analysisId' when calling retrieveAnalysisUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'analysisId': analysisId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/analysis/retrieve', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retriveLatestUsingGET operation.
     * @callback module:api/AnalysisApi~retriveLatestUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the last *count* operations per current account
     * @param {String} accessKey The accessKey provided by VisageCloud
     * @param {String} secretKey The secretKey or readOnlyKey provided by VisageCloud
     * @param {Object} opts Optional parameters
     * @param {Number} [count = 100)] How many records to retrieve at a time
     * @param {module:api/AnalysisApi~retriveLatestUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestResponse}
     */
    retriveLatestUsingGET(accessKey, secretKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling retriveLatestUsingGET");
      }
      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling retriveLatestUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResponse;
      return this.apiClient.callApi(
        '/rest/v1.1/analysis/listLatest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
