/**
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VisageCloud);
  }
}(this, function(expect, VisageCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VisageCloud.StreamApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StreamApi', function() {
    describe('addStreamUsingPOST', function() {
      it('should call addStreamUsingPOST successfully', function(done) {
        //uncomment below and update the code to test addStreamUsingPOST
        //instance.addStreamUsingPOST(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cleanupStreamUsingPATCH', function() {
      it('should call cleanupStreamUsingPATCH successfully', function(done) {
        //uncomment below and update the code to test cleanupStreamUsingPATCH
        //instance.cleanupStreamUsingPATCH(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFrameImageUsingGET', function() {
      it('should call getFrameImageUsingGET successfully', function(done) {
        //uncomment below and update the code to test getFrameImageUsingGET
        //instance.getFrameImageUsingGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLastNAttedanceUsingGET', function() {
      it('should call getLastNAttedanceUsingGET successfully', function(done) {
        //uncomment below and update the code to test getLastNAttedanceUsingGET
        //instance.getLastNAttedanceUsingGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLastNFramesUsingGET', function() {
      it('should call getLastNFramesUsingGET successfully', function(done) {
        //uncomment below and update the code to test getLastNFramesUsingGET
        //instance.getLastNFramesUsingGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStreamUsingGET', function() {
      it('should call getStreamUsingGET successfully', function(done) {
        //uncomment below and update the code to test getStreamUsingGET
        //instance.getStreamUsingGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeStreamUsingDELETE', function() {
      it('should call removeStreamUsingDELETE successfully', function(done) {
        //uncomment below and update the code to test removeStreamUsingDELETE
        //instance.removeStreamUsingDELETE(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startStreamUsingPATCH', function() {
      it('should call startStreamUsingPATCH successfully', function(done) {
        //uncomment below and update the code to test startStreamUsingPATCH
        //instance.startStreamUsingPATCH(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopStreamUsingPATCH', function() {
      it('should call stopStreamUsingPATCH successfully', function(done) {
        //uncomment below and update the code to test stopStreamUsingPATCH
        //instance.stopStreamUsingPATCH(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamsByAccountUsingGET', function() {
      it('should call streamsByAccountUsingGET successfully', function(done) {
        //uncomment below and update the code to test streamsByAccountUsingGET
        //instance.streamsByAccountUsingGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateStreamUsingPATCH', function() {
      it('should call updateStreamUsingPATCH successfully', function(done) {
        //uncomment below and update the code to test updateStreamUsingPATCH
        //instance.updateStreamUsingPATCH(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
