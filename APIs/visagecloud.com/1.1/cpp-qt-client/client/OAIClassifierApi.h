/**
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClassifierApi_H
#define OAI_OAIClassifierApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRestResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClassifierApi : public QObject {
    Q_OBJECT

public:
    OAIClassifierApi(const int timeOut = 0);
    ~OAIClassifierApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  name QString [required]
    * @param[in]  collection_ids QList<QString> [required]
    * @param[in]  classification_attribute_name QString [required]
    * @param[in]  preprocessor QString [optional]
    * @param[in]  consider_view_points bool [optional]
    * @param[in]  seed qint32 [optional]
    * @param[in]  training_ratio double [optional]
    * @param[in]  probability_parameter qint32 [optional]
    * @param[in]  gamma_parameter double [optional]
    * @param[in]  nu_parameter double [optional]
    * @param[in]  c_parameter double [optional]
    * @param[in]  svm_type_parameter qint32 [optional]
    * @param[in]  kernel_type_parameter qint32 [optional]
    * @param[in]  cache_size_parameter double [optional]
    * @param[in]  eps_parameter double [optional]
    */
    virtual void addSVMClassifierUsingPOST(const QString &access_key, const QString &secret_key, const QString &name, const QList<QString> &collection_ids, const QString &classification_attribute_name, const ::OpenAPI::OptionalParam<QString> &preprocessor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &consider_view_points = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &seed = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &training_ratio = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &probability_parameter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &gamma_parameter = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &nu_parameter = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c_parameter = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &svm_type_parameter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &kernel_type_parameter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &cache_size_parameter = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &eps_parameter = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getClassiferFullUsingGET(const QString &access_key, const QString &secret_key, const QString &id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getClassiferStatusUsingGET(const QString &access_key, const QString &secret_key, const QString &id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  id QString [required]
    */
    virtual void removeClassiferUsingDELETE(const QString &access_key, const QString &secret_key, const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addSVMClassifierUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getClassiferFullUsingGETCallback(OAIHttpRequestWorker *worker);
    void getClassiferStatusUsingGETCallback(OAIHttpRequestWorker *worker);
    void removeClassiferUsingDELETECallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addSVMClassifierUsingPOSTSignal(OAIRestResponse summary);
    void getClassiferFullUsingGETSignal(OAIRestResponse summary);
    void getClassiferStatusUsingGETSignal(OAIRestResponse summary);
    void removeClassiferUsingDELETESignal(OAIRestResponse summary);


    void addSVMClassifierUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void getClassiferFullUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void getClassiferStatusUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void removeClassiferUsingDELETESignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);

    Q_DECL_DEPRECATED_X("Use addSVMClassifierUsingPOSTSignalError() instead")
    void addSVMClassifierUsingPOSTSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addSVMClassifierUsingPOSTSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClassiferFullUsingGETSignalError() instead")
    void getClassiferFullUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClassiferFullUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClassiferStatusUsingGETSignalError() instead")
    void getClassiferStatusUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClassiferStatusUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeClassiferUsingDELETESignalError() instead")
    void removeClassiferUsingDELETESignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeClassiferUsingDELETESignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addSVMClassifierUsingPOSTSignalErrorFull() instead")
    void addSVMClassifierUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addSVMClassifierUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClassiferFullUsingGETSignalErrorFull() instead")
    void getClassiferFullUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClassiferFullUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClassiferStatusUsingGETSignalErrorFull() instead")
    void getClassiferStatusUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClassiferStatusUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeClassiferUsingDELETESignalErrorFull() instead")
    void removeClassiferUsingDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeClassiferUsingDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
