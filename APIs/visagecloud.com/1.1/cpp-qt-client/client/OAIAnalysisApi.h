/**
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnalysisApi_H
#define OAI_OAIAnalysisApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRestResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnalysisApi : public QObject {
    Q_OBJECT

public:
    OAIAnalysisApi(const int timeOut = 0);
    ~OAIAnalysisApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  face_hashes QList<QString> [required]
    * @param[in]  show_details bool [optional]
    */
    virtual void compareFacesUsingGET(const QString &access_key, const QString &secret_key, const QList<QString> &face_hashes, const ::OpenAPI::OptionalParam<bool> &show_details = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  store_analysis_picture bool [optional]
    * @param[in]  store_face_pictures bool [optional]
    * @param[in]  store_result bool [optional]
    * @param[in]  retention_time qint32 [optional]
    * @param[in]  picture_url QString [optional]
    * @param[in]  algorithm_version QString [optional]
    * @param[in]  auto_rotate bool [optional]
    * @param[in]  skip_exif bool [optional]
    * @param[in]  wait_for_picture_upload bool [optional]
    * @param[in]  filters QList<QString> [optional]
    * @param[in]  options QString [optional]
    * @param[in]  picture QString [optional]
    */
    virtual void performAnalysisUsingPOST(const QString &access_key, const QString &secret_key, const ::OpenAPI::OptionalParam<bool> &store_analysis_picture = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &store_face_pictures = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &store_result = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &retention_time = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &picture_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &algorithm_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &auto_rotate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_exif = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &wait_for_picture_upload = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &options = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &picture = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  collection_id QString [required]
    * @param[in]  store_analysis_picture bool [optional]
    * @param[in]  store_face_pictures bool [optional]
    * @param[in]  store_result bool [optional]
    * @param[in]  retention_time qint32 [optional]
    * @param[in]  labels QList<QString> [optional]
    * @param[in]  attribute_filters QList<QString> [optional]
    * @param[in]  picture_url QString [optional]
    * @param[in]  algorithm_version QString [optional]
    * @param[in]  auto_rotate bool [optional]
    * @param[in]  skip_exif_rotation_processing bool [optional]
    * @param[in]  wait_for_picture_upload bool [optional]
    * @param[in]  filters QList<QString> [optional]
    * @param[in]  options QString [optional]
    * @param[in]  picture QString [optional]
    */
    virtual void performRecognitionUsingPOST(const QString &access_key, const QString &secret_key, const QString &collection_id, const ::OpenAPI::OptionalParam<bool> &store_analysis_picture = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &store_face_pictures = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &store_result = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &retention_time = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &labels = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &attribute_filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &picture_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &algorithm_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &auto_rotate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_exif_rotation_processing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &wait_for_picture_upload = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &options = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &picture = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  analysis_id QString [required]
    */
    virtual void retrieveAnalysisUsingGET(const QString &access_key, const QString &secret_key, const QString &analysis_id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  count qint32 [optional]
    */
    virtual void retriveLatestUsingGET(const QString &access_key, const QString &secret_key, const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void compareFacesUsingGETCallback(OAIHttpRequestWorker *worker);
    void performAnalysisUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void performRecognitionUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void retrieveAnalysisUsingGETCallback(OAIHttpRequestWorker *worker);
    void retriveLatestUsingGETCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void compareFacesUsingGETSignal(OAIRestResponse summary);
    void performAnalysisUsingPOSTSignal(OAIRestResponse summary);
    void performRecognitionUsingPOSTSignal(OAIRestResponse summary);
    void retrieveAnalysisUsingGETSignal(OAIRestResponse summary);
    void retriveLatestUsingGETSignal(OAIRestResponse summary);


    void compareFacesUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void performAnalysisUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void performRecognitionUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void retrieveAnalysisUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void retriveLatestUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);

    Q_DECL_DEPRECATED_X("Use compareFacesUsingGETSignalError() instead")
    void compareFacesUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void compareFacesUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use performAnalysisUsingPOSTSignalError() instead")
    void performAnalysisUsingPOSTSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void performAnalysisUsingPOSTSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use performRecognitionUsingPOSTSignalError() instead")
    void performRecognitionUsingPOSTSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void performRecognitionUsingPOSTSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnalysisUsingGETSignalError() instead")
    void retrieveAnalysisUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnalysisUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retriveLatestUsingGETSignalError() instead")
    void retriveLatestUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retriveLatestUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use compareFacesUsingGETSignalErrorFull() instead")
    void compareFacesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void compareFacesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use performAnalysisUsingPOSTSignalErrorFull() instead")
    void performAnalysisUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void performAnalysisUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use performRecognitionUsingPOSTSignalErrorFull() instead")
    void performRecognitionUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void performRecognitionUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnalysisUsingGETSignalErrorFull() instead")
    void retrieveAnalysisUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnalysisUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retriveLatestUsingGETSignalErrorFull() instead")
    void retriveLatestUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retriveLatestUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
