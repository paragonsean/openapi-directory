/**
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProfileApi_H
#define OAI_OAIProfileApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRestResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProfileApi : public QObject {
    Q_OBJECT

public:
    OAIProfileApi(const int timeOut = 0);
    ~OAIProfileApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  collection_id QString [required]
    * @param[in]  external_id QString [optional]
    * @param[in]  screen_name QString [optional]
    * @param[in]  labels QList<QString> [optional]
    * @param[in]  classification_attributes QString [optional]
    * @param[in]  details QString [optional]
    */
    virtual void addProfileUsingPOST(const QString &access_key, const QString &secret_key, const QString &collection_id, const ::OpenAPI::OptionalParam<QString> &external_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &labels = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &classification_attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &details = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  collection_id QString [required]
    * @param[in]  profile_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void deleteProfile2UsingDELETE(const QString &access_key, const QString &secret_key, const QString &collection_id, const QString &profile_id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  collection_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteProfileUsingDELETE(const QString &access_key, const QString &secret_key, const QString &collection_id, const QString &id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  collection_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void getClassificationAttributesFromProfileUsingGET(const QString &access_key, const QString &secret_key, const QString &profile_id, const QString &collection_id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  collection_id QString [required]
    */
    virtual void getFacesFromProfileUsingGET(const QString &access_key, const QString &secret_key, const QString &profile_id, const QString &collection_id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  collection_id QString [required]
    */
    virtual void getProfileEnrollmentStatusUsingGET(const QString &access_key, const QString &secret_key, const QString &profile_id, const QString &collection_id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  collection_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  with_faces QString [optional]
    */
    virtual void getProfileUsingGET(const QString &access_key, const QString &secret_key, const QString &collection_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &with_faces = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  collection_id QString [required]
    * @param[in]  classification_attributes QString [required]
    */
    Q_DECL_DEPRECATED virtual void mapClassificationAttributesToProfileUsingPUT(const QString &access_key, const QString &secret_key, const QString &profile_id, const QString &collection_id, const QString &classification_attributes);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  face_hashes QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  collection_id QString [required]
    */
    virtual void mapFacesToProfileUsingPOST(const QString &access_key, const QString &secret_key, const QString &face_hashes, const QString &profile_id, const QString &collection_id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  collection_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void removeClassificationAttributesFromProfileUsingDELETE(const QString &access_key, const QString &secret_key, const QString &profile_id, const QString &collection_id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  face_hashes QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  collection_id QString [required]
    */
    virtual void removeFacesFromProfileUsingDELETE(const QString &access_key, const QString &secret_key, const QString &face_hashes, const QString &profile_id, const QString &collection_id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  collection_id QString [required]
    * @param[in]  external_id QString [optional]
    * @param[in]  screen_name QString [optional]
    * @param[in]  labels QList<QString> [optional]
    * @param[in]  classification_attributes QString [optional]
    * @param[in]  details QString [optional]
    */
    virtual void updateProfileUsingPATCH(const QString &access_key, const QString &secret_key, const QString &id, const QString &collection_id, const ::OpenAPI::OptionalParam<QString> &external_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &labels = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &classification_attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &details = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addProfileUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void deleteProfile2UsingDELETECallback(OAIHttpRequestWorker *worker);
    void deleteProfileUsingDELETECallback(OAIHttpRequestWorker *worker);
    void getClassificationAttributesFromProfileUsingGETCallback(OAIHttpRequestWorker *worker);
    void getFacesFromProfileUsingGETCallback(OAIHttpRequestWorker *worker);
    void getProfileEnrollmentStatusUsingGETCallback(OAIHttpRequestWorker *worker);
    void getProfileUsingGETCallback(OAIHttpRequestWorker *worker);
    void mapClassificationAttributesToProfileUsingPUTCallback(OAIHttpRequestWorker *worker);
    void mapFacesToProfileUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void removeClassificationAttributesFromProfileUsingDELETECallback(OAIHttpRequestWorker *worker);
    void removeFacesFromProfileUsingDELETECallback(OAIHttpRequestWorker *worker);
    void updateProfileUsingPATCHCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addProfileUsingPOSTSignal(OAIRestResponse summary);
    void deleteProfile2UsingDELETESignal(OAIRestResponse summary);
    void deleteProfileUsingDELETESignal(OAIRestResponse summary);
    void getClassificationAttributesFromProfileUsingGETSignal(OAIRestResponse summary);
    void getFacesFromProfileUsingGETSignal(OAIRestResponse summary);
    void getProfileEnrollmentStatusUsingGETSignal(OAIRestResponse summary);
    void getProfileUsingGETSignal(OAIRestResponse summary);
    void mapClassificationAttributesToProfileUsingPUTSignal(OAIRestResponse summary);
    void mapFacesToProfileUsingPOSTSignal(OAIRestResponse summary);
    void removeClassificationAttributesFromProfileUsingDELETESignal(OAIRestResponse summary);
    void removeFacesFromProfileUsingDELETESignal(OAIRestResponse summary);
    void updateProfileUsingPATCHSignal(OAIRestResponse summary);


    void addProfileUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void deleteProfile2UsingDELETESignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void deleteProfileUsingDELETESignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void getClassificationAttributesFromProfileUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void getFacesFromProfileUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void getProfileEnrollmentStatusUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void getProfileUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void mapClassificationAttributesToProfileUsingPUTSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void mapFacesToProfileUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void removeClassificationAttributesFromProfileUsingDELETESignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void removeFacesFromProfileUsingDELETESignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void updateProfileUsingPATCHSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);

    Q_DECL_DEPRECATED_X("Use addProfileUsingPOSTSignalError() instead")
    void addProfileUsingPOSTSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addProfileUsingPOSTSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProfile2UsingDELETESignalError() instead")
    void deleteProfile2UsingDELETESignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProfile2UsingDELETESignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProfileUsingDELETESignalError() instead")
    void deleteProfileUsingDELETESignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProfileUsingDELETESignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClassificationAttributesFromProfileUsingGETSignalError() instead")
    void getClassificationAttributesFromProfileUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClassificationAttributesFromProfileUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFacesFromProfileUsingGETSignalError() instead")
    void getFacesFromProfileUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFacesFromProfileUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfileEnrollmentStatusUsingGETSignalError() instead")
    void getProfileEnrollmentStatusUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfileEnrollmentStatusUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfileUsingGETSignalError() instead")
    void getProfileUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfileUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapClassificationAttributesToProfileUsingPUTSignalError() instead")
    void mapClassificationAttributesToProfileUsingPUTSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapClassificationAttributesToProfileUsingPUTSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapFacesToProfileUsingPOSTSignalError() instead")
    void mapFacesToProfileUsingPOSTSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapFacesToProfileUsingPOSTSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeClassificationAttributesFromProfileUsingDELETESignalError() instead")
    void removeClassificationAttributesFromProfileUsingDELETESignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeClassificationAttributesFromProfileUsingDELETESignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFacesFromProfileUsingDELETESignalError() instead")
    void removeFacesFromProfileUsingDELETESignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFacesFromProfileUsingDELETESignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProfileUsingPATCHSignalError() instead")
    void updateProfileUsingPATCHSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProfileUsingPATCHSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addProfileUsingPOSTSignalErrorFull() instead")
    void addProfileUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addProfileUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProfile2UsingDELETESignalErrorFull() instead")
    void deleteProfile2UsingDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProfile2UsingDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProfileUsingDELETESignalErrorFull() instead")
    void deleteProfileUsingDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProfileUsingDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClassificationAttributesFromProfileUsingGETSignalErrorFull() instead")
    void getClassificationAttributesFromProfileUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClassificationAttributesFromProfileUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFacesFromProfileUsingGETSignalErrorFull() instead")
    void getFacesFromProfileUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFacesFromProfileUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfileEnrollmentStatusUsingGETSignalErrorFull() instead")
    void getProfileEnrollmentStatusUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfileEnrollmentStatusUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfileUsingGETSignalErrorFull() instead")
    void getProfileUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfileUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapClassificationAttributesToProfileUsingPUTSignalErrorFull() instead")
    void mapClassificationAttributesToProfileUsingPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapClassificationAttributesToProfileUsingPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapFacesToProfileUsingPOSTSignalErrorFull() instead")
    void mapFacesToProfileUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapFacesToProfileUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeClassificationAttributesFromProfileUsingDELETESignalErrorFull() instead")
    void removeClassificationAttributesFromProfileUsingDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeClassificationAttributesFromProfileUsingDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFacesFromProfileUsingDELETESignalErrorFull() instead")
    void removeFacesFromProfileUsingDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFacesFromProfileUsingDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProfileUsingPATCHSignalErrorFull() instead")
    void updateProfileUsingPATCHSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProfileUsingPATCHSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
