/**
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStreamApi_H
#define OAI_OAIStreamApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRestResponse.h"
#include <QByteArray>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStreamApi : public QObject {
    Q_OBJECT

public:
    OAIStreamApi(const int timeOut = 0);
    ~OAIStreamApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  name QString [required]
    * @param[in]  url QString [required]
    * @param[in]  method QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  password QString [optional]
    * @param[in]  skip_frames_with_no_faces bool [optional]
    * @param[in]  retention_time qint32 [optional]
    * @param[in]  store_original_frames bool [optional]
    * @param[in]  store_attendance_faces bool [optional]
    * @param[in]  store_attendance_frames bool [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  associated_collections QList<QString> [optional]
    * @param[in]  attributes QString [optional]
    */
    virtual void addStreamUsingPOST(const QString &access_key, const QString &secret_key, const QString &name, const QString &url, const ::OpenAPI::OptionalParam<QString> &method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &skip_frames_with_no_faces = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &retention_time = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &store_original_frames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &store_attendance_faces = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &store_attendance_frames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &associated_collections = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  stream_id QString [required]
    * @param[in]  interval qint32 [required]
    */
    virtual void cleanupStreamUsingPATCH(const QString &access_key, const QString &secret_key, const QString &stream_id, const qint32 &interval);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  stream_id QString [required]
    * @param[in]  timestamp qint64 [required]
    */
    virtual void getFrameImageUsingGET(const QString &access_key, const QString &secret_key, const QString &stream_id, const qint64 &timestamp);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  stream_ids QList<QString> [optional]
    * @param[in]  count qint32 [optional]
    */
    virtual void getLastNAttedanceUsingGET(const QString &access_key, const QString &secret_key, const ::OpenAPI::OptionalParam<QList<QString>> &stream_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  stream_id QString [required]
    * @param[in]  count qint32 [optional]
    * @param[in]  collection_id QString [optional]
    * @param[in]  labels QList<QString> [optional]
    * @param[in]  attribute_filters QList<QString> [optional]
    */
    virtual void getLastNFramesUsingGET(const QString &access_key, const QString &secret_key, const QString &stream_id, const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &collection_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &labels = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &attribute_filters = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  stream_id QString [required]
    */
    virtual void getStreamUsingGET(const QString &access_key, const QString &secret_key, const QString &stream_id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  id QString [required]
    */
    virtual void removeStreamUsingDELETE(const QString &access_key, const QString &secret_key, const QString &id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  stream_id QString [required]
    */
    virtual void startStreamUsingPATCH(const QString &access_key, const QString &secret_key, const QString &stream_id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  stream_id QString [required]
    */
    virtual void stopStreamUsingPATCH(const QString &access_key, const QString &secret_key, const QString &stream_id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    */
    virtual void streamsByAccountUsingGET(const QString &access_key, const QString &secret_key);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  stream_id QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  url QString [optional]
    * @param[in]  method QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  password QString [optional]
    * @param[in]  skip_frames_with_no_faces bool [optional]
    * @param[in]  retention_time qint32 [optional]
    * @param[in]  store_original_frames bool [optional]
    * @param[in]  store_attendance_faces bool [optional]
    * @param[in]  store_attendance_frames bool [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  associated_collections QList<QString> [optional]
    * @param[in]  attributes QString [optional]
    */
    virtual void updateStreamUsingPATCH(const QString &access_key, const QString &secret_key, const QString &stream_id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &skip_frames_with_no_faces = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &retention_time = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &store_original_frames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &store_attendance_faces = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &store_attendance_frames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &associated_collections = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addStreamUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void cleanupStreamUsingPATCHCallback(OAIHttpRequestWorker *worker);
    void getFrameImageUsingGETCallback(OAIHttpRequestWorker *worker);
    void getLastNAttedanceUsingGETCallback(OAIHttpRequestWorker *worker);
    void getLastNFramesUsingGETCallback(OAIHttpRequestWorker *worker);
    void getStreamUsingGETCallback(OAIHttpRequestWorker *worker);
    void removeStreamUsingDELETECallback(OAIHttpRequestWorker *worker);
    void startStreamUsingPATCHCallback(OAIHttpRequestWorker *worker);
    void stopStreamUsingPATCHCallback(OAIHttpRequestWorker *worker);
    void streamsByAccountUsingGETCallback(OAIHttpRequestWorker *worker);
    void updateStreamUsingPATCHCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addStreamUsingPOSTSignal(OAIRestResponse summary);
    void cleanupStreamUsingPATCHSignal(OAIRestResponse summary);
    void getFrameImageUsingGETSignal(QList<QByteArray> summary);
    void getLastNAttedanceUsingGETSignal(OAIRestResponse summary);
    void getLastNFramesUsingGETSignal(OAIRestResponse summary);
    void getStreamUsingGETSignal(OAIRestResponse summary);
    void removeStreamUsingDELETESignal(OAIRestResponse summary);
    void startStreamUsingPATCHSignal(OAIRestResponse summary);
    void stopStreamUsingPATCHSignal(OAIRestResponse summary);
    void streamsByAccountUsingGETSignal(OAIRestResponse summary);
    void updateStreamUsingPATCHSignal(OAIRestResponse summary);


    void addStreamUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void cleanupStreamUsingPATCHSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void getFrameImageUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<QByteArray> summary);
    void getLastNAttedanceUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void getLastNFramesUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void getStreamUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void removeStreamUsingDELETESignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void startStreamUsingPATCHSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void stopStreamUsingPATCHSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void streamsByAccountUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void updateStreamUsingPATCHSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);

    Q_DECL_DEPRECATED_X("Use addStreamUsingPOSTSignalError() instead")
    void addStreamUsingPOSTSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addStreamUsingPOSTSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cleanupStreamUsingPATCHSignalError() instead")
    void cleanupStreamUsingPATCHSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cleanupStreamUsingPATCHSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFrameImageUsingGETSignalError() instead")
    void getFrameImageUsingGETSignalE(QList<QByteArray> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFrameImageUsingGETSignalError(QList<QByteArray> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLastNAttedanceUsingGETSignalError() instead")
    void getLastNAttedanceUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLastNAttedanceUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLastNFramesUsingGETSignalError() instead")
    void getLastNFramesUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLastNFramesUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamUsingGETSignalError() instead")
    void getStreamUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeStreamUsingDELETESignalError() instead")
    void removeStreamUsingDELETESignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeStreamUsingDELETESignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startStreamUsingPATCHSignalError() instead")
    void startStreamUsingPATCHSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startStreamUsingPATCHSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopStreamUsingPATCHSignalError() instead")
    void stopStreamUsingPATCHSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopStreamUsingPATCHSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamsByAccountUsingGETSignalError() instead")
    void streamsByAccountUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamsByAccountUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStreamUsingPATCHSignalError() instead")
    void updateStreamUsingPATCHSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStreamUsingPATCHSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addStreamUsingPOSTSignalErrorFull() instead")
    void addStreamUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addStreamUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cleanupStreamUsingPATCHSignalErrorFull() instead")
    void cleanupStreamUsingPATCHSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cleanupStreamUsingPATCHSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFrameImageUsingGETSignalErrorFull() instead")
    void getFrameImageUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFrameImageUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLastNAttedanceUsingGETSignalErrorFull() instead")
    void getLastNAttedanceUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLastNAttedanceUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLastNFramesUsingGETSignalErrorFull() instead")
    void getLastNFramesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLastNFramesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamUsingGETSignalErrorFull() instead")
    void getStreamUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeStreamUsingDELETESignalErrorFull() instead")
    void removeStreamUsingDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeStreamUsingDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startStreamUsingPATCHSignalErrorFull() instead")
    void startStreamUsingPATCHSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startStreamUsingPATCHSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopStreamUsingPATCHSignalErrorFull() instead")
    void stopStreamUsingPATCHSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopStreamUsingPATCHSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamsByAccountUsingGETSignalErrorFull() instead")
    void streamsByAccountUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamsByAccountUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStreamUsingPATCHSignalErrorFull() instead")
    void updateStreamUsingPATCHSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStreamUsingPATCHSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
