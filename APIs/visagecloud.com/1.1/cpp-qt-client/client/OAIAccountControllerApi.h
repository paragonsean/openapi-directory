/**
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountControllerApi_H
#define OAI_OAIAccountControllerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRestResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountControllerApi : public QObject {
    Q_OBJECT

public:
    OAIAccountControllerApi(const int timeOut = 0);
    ~OAIAccountControllerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  email QString [required]
    * @param[in]  old_password QString [required]
    * @param[in]  new_password QString [required]
    */
    virtual void changePasswordUsingPOST(const QString &email, const QString &old_password, const QString &new_password);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    */
    virtual void getAccountByAccessKeyUsingGET(const QString &access_key, const QString &secret_key);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  start_date_time QDateTime [optional]
    * @param[in]  end_date_time QDateTime [optional]
    * @param[in]  date_template QString [optional]
    */
    virtual void getBillingPerAccountUsingGET(const QString &access_key, const QString &secret_key, const ::OpenAPI::OptionalParam<QDateTime> &start_date_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &date_template = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  email QString [required]
    * @param[in]  password QString [required]
    */
    virtual void loginWithEmailUsingPOST(const QString &email, const QString &password);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void changePasswordUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getAccountByAccessKeyUsingGETCallback(OAIHttpRequestWorker *worker);
    void getBillingPerAccountUsingGETCallback(OAIHttpRequestWorker *worker);
    void loginWithEmailUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void changePasswordUsingPOSTSignal(OAIRestResponse summary);
    void getAccountByAccessKeyUsingGETSignal(OAIRestResponse summary);
    void getBillingPerAccountUsingGETSignal(OAIRestResponse summary);
    void loginWithEmailUsingPOSTSignal(OAIRestResponse summary);


    void changePasswordUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void getAccountByAccessKeyUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void getBillingPerAccountUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void loginWithEmailUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);

    Q_DECL_DEPRECATED_X("Use changePasswordUsingPOSTSignalError() instead")
    void changePasswordUsingPOSTSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordUsingPOSTSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountByAccessKeyUsingGETSignalError() instead")
    void getAccountByAccessKeyUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountByAccessKeyUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBillingPerAccountUsingGETSignalError() instead")
    void getBillingPerAccountUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBillingPerAccountUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginWithEmailUsingPOSTSignalError() instead")
    void loginWithEmailUsingPOSTSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loginWithEmailUsingPOSTSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use changePasswordUsingPOSTSignalErrorFull() instead")
    void changePasswordUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountByAccessKeyUsingGETSignalErrorFull() instead")
    void getAccountByAccessKeyUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountByAccessKeyUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBillingPerAccountUsingGETSignalErrorFull() instead")
    void getBillingPerAccountUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBillingPerAccountUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginWithEmailUsingPOSTSignalErrorFull() instead")
    void loginWithEmailUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginWithEmailUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
