/**
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnalyticsForPresenceAndAudienceApi_H
#define OAI_OAIAnalyticsForPresenceAndAudienceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRestResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnalyticsForPresenceAndAudienceApi : public QObject {
    Q_OBJECT

public:
    OAIAnalyticsForPresenceAndAudienceApi(const int timeOut = 0);
    ~OAIAnalyticsForPresenceAndAudienceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  collection_ids QList<QString> [optional]
    * @param[in]  stream_ids QList<QString> [optional]
    * @param[in]  start_date_time QDateTime [optional]
    * @param[in]  end_date_time QDateTime [optional]
    * @param[in]  visit_duration qint64 [optional]
    * @param[in]  max_iterations qint32 [optional]
    * @param[in]  max_batch_iterations qint32 [optional]
    * @param[in]  min_neighbors_merged_per_iteration qint32 [optional]
    * @param[in]  merging_step double [optional]
    * @param[in]  shuffling bool [optional]
    */
    virtual void counterUsingPOST(const QString &access_key, const QString &secret_key, const ::OpenAPI::OptionalParam<QList<QString>> &collection_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &stream_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint64> &visit_duration = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_iterations = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_batch_iterations = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_neighbors_merged_per_iteration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &merging_step = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &shuffling = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  attributes QList<QString> [required]
    * @param[in]  stream_ids QList<QString> [optional]
    * @param[in]  start_date_time QDateTime [optional]
    * @param[in]  end_date_time QDateTime [optional]
    * @param[in]  step qint64 [optional]
    */
    virtual void presenceTimeseriesUsingPOST(const QString &access_key, const QString &secret_key, const QList<QString> &attributes, const ::OpenAPI::OptionalParam<QList<QString>> &stream_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint64> &step = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  stream_ids QList<QString> [required]
    * @param[in]  attributes QList<QString> [required]
    * @param[in]  start_date_time QDateTime [optional]
    * @param[in]  end_date_time QDateTime [optional]
    */
    virtual void presenceTotalUsingPOST(const QString &access_key, const QString &secret_key, const QList<QString> &stream_ids, const QList<QString> &attributes, const ::OpenAPI::OptionalParam<QDateTime> &start_date_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date_time = ::OpenAPI::OptionalParam<QDateTime>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void counterUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void presenceTimeseriesUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void presenceTotalUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void counterUsingPOSTSignal(OAIRestResponse summary);
    void presenceTimeseriesUsingPOSTSignal(OAIRestResponse summary);
    void presenceTotalUsingPOSTSignal(OAIRestResponse summary);


    void counterUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void presenceTimeseriesUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void presenceTotalUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);

    Q_DECL_DEPRECATED_X("Use counterUsingPOSTSignalError() instead")
    void counterUsingPOSTSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void counterUsingPOSTSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use presenceTimeseriesUsingPOSTSignalError() instead")
    void presenceTimeseriesUsingPOSTSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void presenceTimeseriesUsingPOSTSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use presenceTotalUsingPOSTSignalError() instead")
    void presenceTotalUsingPOSTSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void presenceTotalUsingPOSTSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use counterUsingPOSTSignalErrorFull() instead")
    void counterUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void counterUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use presenceTimeseriesUsingPOSTSignalErrorFull() instead")
    void presenceTimeseriesUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void presenceTimeseriesUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use presenceTotalUsingPOSTSignalErrorFull() instead")
    void presenceTotalUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void presenceTotalUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
