/**
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICollectionApi_H
#define OAI_OAICollectionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAIRestResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICollectionApi : public QObject {
    Q_OBJECT

public:
    OAICollectionApi(const int timeOut = 0);
    ~OAICollectionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  collection_name QString [required]
    * @param[in]  preload bool [optional]
    * @param[in]  evictable bool [optional]
    * @param[in]  purposes QList<QString> [optional]
    */
    Q_DECL_DEPRECATED virtual void addCollection2UsingPOST(const QString &access_key, const QString &secret_key, const QString &collection_name, const ::OpenAPI::OptionalParam<bool> &preload = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &evictable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &purposes = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  name QString [required]
    * @param[in]  preload bool [optional]
    * @param[in]  evictable bool [optional]
    * @param[in]  purposes QList<QString> [optional]
    */
    virtual void addCollectionUsingPOST(const QString &access_key, const QString &secret_key, const QString &name, const ::OpenAPI::OptionalParam<bool> &preload = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &evictable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &purposes = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  collection_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void deleteCollection2UsingDELETE(const QString &access_key, const QString &secret_key, const QString &collection_id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteCollectionUsingDELETE(const QString &access_key, const QString &secret_key, const QString &id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  collection_id QString [required]
    */
    virtual void exportCSVUsingGET(const QString &access_key, const QString &secret_key, const QString &collection_id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getAllCollectionProfilesUsingGET(const QString &access_key, const QString &secret_key, const QString &id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    */
    Q_DECL_DEPRECATED virtual void getAllCollections2UsingGET(const QString &access_key, const QString &secret_key);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    */
    virtual void getAllCollectionsUsingGET(const QString &access_key, const QString &secret_key);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  collection_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void getCollection2UsingGET(const QString &access_key, const QString &secret_key, const QString &collection_id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getCollectionUsingGET(const QString &access_key, const QString &secret_key, const QString &id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  collection_id QString [required]
    * @param[in]  purposes QList<QString> [required]
    */
    Q_DECL_DEPRECATED virtual void repurposeCollectionUsingPUT(const QString &access_key, const QString &secret_key, const QString &collection_id, const QList<QString> &purposes);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  purposes QList<QString> [optional]
    */
    Q_DECL_DEPRECATED virtual void updateCollection2UsingPOST(const QString &access_key, const QString &secret_key, const QString &id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &purposes = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  secret_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  purposes QList<QString> [optional]
    */
    virtual void updateCollectionUsingPATCH(const QString &access_key, const QString &secret_key, const QString &id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &purposes = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addCollection2UsingPOSTCallback(OAIHttpRequestWorker *worker);
    void addCollectionUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void deleteCollection2UsingDELETECallback(OAIHttpRequestWorker *worker);
    void deleteCollectionUsingDELETECallback(OAIHttpRequestWorker *worker);
    void exportCSVUsingGETCallback(OAIHttpRequestWorker *worker);
    void getAllCollectionProfilesUsingGETCallback(OAIHttpRequestWorker *worker);
    void getAllCollections2UsingGETCallback(OAIHttpRequestWorker *worker);
    void getAllCollectionsUsingGETCallback(OAIHttpRequestWorker *worker);
    void getCollection2UsingGETCallback(OAIHttpRequestWorker *worker);
    void getCollectionUsingGETCallback(OAIHttpRequestWorker *worker);
    void repurposeCollectionUsingPUTCallback(OAIHttpRequestWorker *worker);
    void updateCollection2UsingPOSTCallback(OAIHttpRequestWorker *worker);
    void updateCollectionUsingPATCHCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addCollection2UsingPOSTSignal(OAIRestResponse summary);
    void addCollectionUsingPOSTSignal(OAIRestResponse summary);
    void deleteCollection2UsingDELETESignal(OAIRestResponse summary);
    void deleteCollectionUsingDELETESignal(OAIRestResponse summary);
    void exportCSVUsingGETSignal(OAIObject summary);
    void getAllCollectionProfilesUsingGETSignal(OAIRestResponse summary);
    void getAllCollections2UsingGETSignal(OAIRestResponse summary);
    void getAllCollectionsUsingGETSignal(OAIRestResponse summary);
    void getCollection2UsingGETSignal(OAIRestResponse summary);
    void getCollectionUsingGETSignal(OAIRestResponse summary);
    void repurposeCollectionUsingPUTSignal(OAIRestResponse summary);
    void updateCollection2UsingPOSTSignal(OAIRestResponse summary);
    void updateCollectionUsingPATCHSignal(OAIRestResponse summary);


    void addCollection2UsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void addCollectionUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void deleteCollection2UsingDELETESignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void deleteCollectionUsingDELETESignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void exportCSVUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getAllCollectionProfilesUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void getAllCollections2UsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void getAllCollectionsUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void getCollection2UsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void getCollectionUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void repurposeCollectionUsingPUTSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void updateCollection2UsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);
    void updateCollectionUsingPATCHSignalFull(OAIHttpRequestWorker *worker, OAIRestResponse summary);

    Q_DECL_DEPRECATED_X("Use addCollection2UsingPOSTSignalError() instead")
    void addCollection2UsingPOSTSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addCollection2UsingPOSTSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addCollectionUsingPOSTSignalError() instead")
    void addCollectionUsingPOSTSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addCollectionUsingPOSTSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCollection2UsingDELETESignalError() instead")
    void deleteCollection2UsingDELETESignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCollection2UsingDELETESignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCollectionUsingDELETESignalError() instead")
    void deleteCollectionUsingDELETESignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCollectionUsingDELETESignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportCSVUsingGETSignalError() instead")
    void exportCSVUsingGETSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportCSVUsingGETSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllCollectionProfilesUsingGETSignalError() instead")
    void getAllCollectionProfilesUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllCollectionProfilesUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllCollections2UsingGETSignalError() instead")
    void getAllCollections2UsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllCollections2UsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllCollectionsUsingGETSignalError() instead")
    void getAllCollectionsUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllCollectionsUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCollection2UsingGETSignalError() instead")
    void getCollection2UsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCollection2UsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCollectionUsingGETSignalError() instead")
    void getCollectionUsingGETSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCollectionUsingGETSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repurposeCollectionUsingPUTSignalError() instead")
    void repurposeCollectionUsingPUTSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repurposeCollectionUsingPUTSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCollection2UsingPOSTSignalError() instead")
    void updateCollection2UsingPOSTSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCollection2UsingPOSTSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCollectionUsingPATCHSignalError() instead")
    void updateCollectionUsingPATCHSignalE(OAIRestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCollectionUsingPATCHSignalError(OAIRestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addCollection2UsingPOSTSignalErrorFull() instead")
    void addCollection2UsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addCollection2UsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addCollectionUsingPOSTSignalErrorFull() instead")
    void addCollectionUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addCollectionUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCollection2UsingDELETESignalErrorFull() instead")
    void deleteCollection2UsingDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCollection2UsingDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCollectionUsingDELETESignalErrorFull() instead")
    void deleteCollectionUsingDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCollectionUsingDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportCSVUsingGETSignalErrorFull() instead")
    void exportCSVUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportCSVUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllCollectionProfilesUsingGETSignalErrorFull() instead")
    void getAllCollectionProfilesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllCollectionProfilesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllCollections2UsingGETSignalErrorFull() instead")
    void getAllCollections2UsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllCollections2UsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllCollectionsUsingGETSignalErrorFull() instead")
    void getAllCollectionsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllCollectionsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCollection2UsingGETSignalErrorFull() instead")
    void getCollection2UsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCollection2UsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCollectionUsingGETSignalErrorFull() instead")
    void getCollectionUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCollectionUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repurposeCollectionUsingPUTSignalErrorFull() instead")
    void repurposeCollectionUsingPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repurposeCollectionUsingPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCollection2UsingPOSTSignalErrorFull() instead")
    void updateCollection2UsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCollection2UsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCollectionUsingPATCHSignalErrorFull() instead")
    void updateCollectionUsingPATCHSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCollectionUsingPATCHSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
