/*
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RestResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProfileApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProfileApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProfileApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addProfileUsingPOST
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param externalId External reference to additional information you don’t want to share with VisageCloud (optional)
     * @param screenName Human-readable label for the profile (optional)
     * @param labels Allows you to do finer filtering in face recognition (optional)
     * @param classificationAttributes Comma separated key:value classification attributes (optional)
     * @param details Comma separated key:value details of profile (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProfileUsingPOSTCall(String accessKey, String secretKey, String collectionId, String externalId, String screenName, List<String> labels, String classificationAttributes, String details, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/profile/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalId", externalId));
        }

        if (screenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screenName", screenName));
        }

        if (labels != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "labels", labels));
        }

        if (classificationAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classificationAttributes", classificationAttributes));
        }

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProfileUsingPOSTValidateBeforeCall(String accessKey, String secretKey, String collectionId, String externalId, String screenName, List<String> labels, String classificationAttributes, String details, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling addProfileUsingPOST(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling addProfileUsingPOST(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling addProfileUsingPOST(Async)");
        }

        return addProfileUsingPOSTCall(accessKey, secretKey, collectionId, externalId, screenName, labels, classificationAttributes, details, _callback);

    }

    /**
     * Creates a new profile with no faces associated to it (empty profile)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param externalId External reference to additional information you don’t want to share with VisageCloud (optional)
     * @param screenName Human-readable label for the profile (optional)
     * @param labels Allows you to do finer filtering in face recognition (optional)
     * @param classificationAttributes Comma separated key:value classification attributes (optional)
     * @param details Comma separated key:value details of profile (optional)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse addProfileUsingPOST(String accessKey, String secretKey, String collectionId, String externalId, String screenName, List<String> labels, String classificationAttributes, String details) throws ApiException {
        ApiResponse<RestResponse> localVarResp = addProfileUsingPOSTWithHttpInfo(accessKey, secretKey, collectionId, externalId, screenName, labels, classificationAttributes, details);
        return localVarResp.getData();
    }

    /**
     * Creates a new profile with no faces associated to it (empty profile)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param externalId External reference to additional information you don’t want to share with VisageCloud (optional)
     * @param screenName Human-readable label for the profile (optional)
     * @param labels Allows you to do finer filtering in face recognition (optional)
     * @param classificationAttributes Comma separated key:value classification attributes (optional)
     * @param details Comma separated key:value details of profile (optional)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> addProfileUsingPOSTWithHttpInfo(String accessKey, String secretKey, String collectionId, String externalId, String screenName, List<String> labels, String classificationAttributes, String details) throws ApiException {
        okhttp3.Call localVarCall = addProfileUsingPOSTValidateBeforeCall(accessKey, secretKey, collectionId, externalId, screenName, labels, classificationAttributes, details, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new profile with no faces associated to it (empty profile) (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param externalId External reference to additional information you don’t want to share with VisageCloud (optional)
     * @param screenName Human-readable label for the profile (optional)
     * @param labels Allows you to do finer filtering in face recognition (optional)
     * @param classificationAttributes Comma separated key:value classification attributes (optional)
     * @param details Comma separated key:value details of profile (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProfileUsingPOSTAsync(String accessKey, String secretKey, String collectionId, String externalId, String screenName, List<String> labels, String classificationAttributes, String details, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProfileUsingPOSTValidateBeforeCall(accessKey, secretKey, collectionId, externalId, screenName, labels, classificationAttributes, details, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProfile2UsingDELETE
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param profileId The profile id (provide this if you don&#39;t have the externalId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteProfile2UsingDELETECall(String accessKey, String secretKey, String collectionId, String profileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/profile/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        if (profileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profileId", profileId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProfile2UsingDELETEValidateBeforeCall(String accessKey, String secretKey, String collectionId, String profileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling deleteProfile2UsingDELETE(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling deleteProfile2UsingDELETE(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling deleteProfile2UsingDELETE(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling deleteProfile2UsingDELETE(Async)");
        }

        return deleteProfile2UsingDELETECall(accessKey, secretKey, collectionId, profileId, _callback);

    }

    /**
     * Deletes a profile and unmaps all its faces
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param profileId The profile id (provide this if you don&#39;t have the externalId (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RestResponse deleteProfile2UsingDELETE(String accessKey, String secretKey, String collectionId, String profileId) throws ApiException {
        ApiResponse<RestResponse> localVarResp = deleteProfile2UsingDELETEWithHttpInfo(accessKey, secretKey, collectionId, profileId);
        return localVarResp.getData();
    }

    /**
     * Deletes a profile and unmaps all its faces
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param profileId The profile id (provide this if you don&#39;t have the externalId (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RestResponse> deleteProfile2UsingDELETEWithHttpInfo(String accessKey, String secretKey, String collectionId, String profileId) throws ApiException {
        okhttp3.Call localVarCall = deleteProfile2UsingDELETEValidateBeforeCall(accessKey, secretKey, collectionId, profileId, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a profile and unmaps all its faces (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param profileId The profile id (provide this if you don&#39;t have the externalId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteProfile2UsingDELETEAsync(String accessKey, String secretKey, String collectionId, String profileId, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProfile2UsingDELETEValidateBeforeCall(accessKey, secretKey, collectionId, profileId, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProfileUsingDELETE
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param id The profile id (provide this if you don&#39;t have the externalId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProfileUsingDELETECall(String accessKey, String secretKey, String collectionId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/profile/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProfileUsingDELETEValidateBeforeCall(String accessKey, String secretKey, String collectionId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling deleteProfileUsingDELETE(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling deleteProfileUsingDELETE(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling deleteProfileUsingDELETE(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteProfileUsingDELETE(Async)");
        }

        return deleteProfileUsingDELETECall(accessKey, secretKey, collectionId, id, _callback);

    }

    /**
     * Deletes a profile and unmaps all its faces
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param id The profile id (provide this if you don&#39;t have the externalId (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse deleteProfileUsingDELETE(String accessKey, String secretKey, String collectionId, String id) throws ApiException {
        ApiResponse<RestResponse> localVarResp = deleteProfileUsingDELETEWithHttpInfo(accessKey, secretKey, collectionId, id);
        return localVarResp.getData();
    }

    /**
     * Deletes a profile and unmaps all its faces
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param id The profile id (provide this if you don&#39;t have the externalId (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> deleteProfileUsingDELETEWithHttpInfo(String accessKey, String secretKey, String collectionId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteProfileUsingDELETEValidateBeforeCall(accessKey, secretKey, collectionId, id, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a profile and unmaps all its faces (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param id The profile id (provide this if you don&#39;t have the externalId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProfileUsingDELETEAsync(String accessKey, String secretKey, String collectionId, String id, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProfileUsingDELETEValidateBeforeCall(accessKey, secretKey, collectionId, id, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClassificationAttributesFromProfileUsingGET
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param profileId The profile associated with the classification attributes (required)
     * @param collectionId The collection that contains the profile (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getClassificationAttributesFromProfileUsingGETCall(String accessKey, String secretKey, String profileId, String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/profile/classificationAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (profileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profileId", profileId));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClassificationAttributesFromProfileUsingGETValidateBeforeCall(String accessKey, String secretKey, String profileId, String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getClassificationAttributesFromProfileUsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling getClassificationAttributesFromProfileUsingGET(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getClassificationAttributesFromProfileUsingGET(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getClassificationAttributesFromProfileUsingGET(Async)");
        }

        return getClassificationAttributesFromProfileUsingGETCall(accessKey, secretKey, profileId, collectionId, _callback);

    }

    /**
     * Gets classification attributes from a profile
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param profileId The profile associated with the classification attributes (required)
     * @param collectionId The collection that contains the profile (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RestResponse getClassificationAttributesFromProfileUsingGET(String accessKey, String secretKey, String profileId, String collectionId) throws ApiException {
        ApiResponse<RestResponse> localVarResp = getClassificationAttributesFromProfileUsingGETWithHttpInfo(accessKey, secretKey, profileId, collectionId);
        return localVarResp.getData();
    }

    /**
     * Gets classification attributes from a profile
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param profileId The profile associated with the classification attributes (required)
     * @param collectionId The collection that contains the profile (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RestResponse> getClassificationAttributesFromProfileUsingGETWithHttpInfo(String accessKey, String secretKey, String profileId, String collectionId) throws ApiException {
        okhttp3.Call localVarCall = getClassificationAttributesFromProfileUsingGETValidateBeforeCall(accessKey, secretKey, profileId, collectionId, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets classification attributes from a profile (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param profileId The profile associated with the classification attributes (required)
     * @param collectionId The collection that contains the profile (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getClassificationAttributesFromProfileUsingGETAsync(String accessKey, String secretKey, String profileId, String collectionId, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClassificationAttributesFromProfileUsingGETValidateBeforeCall(accessKey, secretKey, profileId, collectionId, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFacesFromProfileUsingGET
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param profileId The profile that contains the faces (required)
     * @param collectionId The collection that contains the profile (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacesFromProfileUsingGETCall(String accessKey, String secretKey, String profileId, String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/profile/map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (profileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profileId", profileId));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFacesFromProfileUsingGETValidateBeforeCall(String accessKey, String secretKey, String profileId, String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getFacesFromProfileUsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling getFacesFromProfileUsingGET(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getFacesFromProfileUsingGET(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getFacesFromProfileUsingGET(Async)");
        }

        return getFacesFromProfileUsingGETCall(accessKey, secretKey, profileId, collectionId, _callback);

    }

    /**
     * Gets all the faceHashes associated to a profile
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param profileId The profile that contains the faces (required)
     * @param collectionId The collection that contains the profile (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse getFacesFromProfileUsingGET(String accessKey, String secretKey, String profileId, String collectionId) throws ApiException {
        ApiResponse<RestResponse> localVarResp = getFacesFromProfileUsingGETWithHttpInfo(accessKey, secretKey, profileId, collectionId);
        return localVarResp.getData();
    }

    /**
     * Gets all the faceHashes associated to a profile
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param profileId The profile that contains the faces (required)
     * @param collectionId The collection that contains the profile (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> getFacesFromProfileUsingGETWithHttpInfo(String accessKey, String secretKey, String profileId, String collectionId) throws ApiException {
        okhttp3.Call localVarCall = getFacesFromProfileUsingGETValidateBeforeCall(accessKey, secretKey, profileId, collectionId, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all the faceHashes associated to a profile (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param profileId The profile that contains the faces (required)
     * @param collectionId The collection that contains the profile (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacesFromProfileUsingGETAsync(String accessKey, String secretKey, String profileId, String collectionId, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFacesFromProfileUsingGETValidateBeforeCall(accessKey, secretKey, profileId, collectionId, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProfileEnrollmentStatusUsingGET
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param profileId The profile that contains the faces (required)
     * @param collectionId The collection that contains the profile (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfileEnrollmentStatusUsingGETCall(String accessKey, String secretKey, String profileId, String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/profile/enrollmentStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (profileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profileId", profileId));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileEnrollmentStatusUsingGETValidateBeforeCall(String accessKey, String secretKey, String profileId, String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getProfileEnrollmentStatusUsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling getProfileEnrollmentStatusUsingGET(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getProfileEnrollmentStatusUsingGET(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getProfileEnrollmentStatusUsingGET(Async)");
        }

        return getProfileEnrollmentStatusUsingGETCall(accessKey, secretKey, profileId, collectionId, _callback);

    }

    /**
     * Gets the enrollment status of a profile: information on whether it is suitable for authentication.
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param profileId The profile that contains the faces (required)
     * @param collectionId The collection that contains the profile (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse getProfileEnrollmentStatusUsingGET(String accessKey, String secretKey, String profileId, String collectionId) throws ApiException {
        ApiResponse<RestResponse> localVarResp = getProfileEnrollmentStatusUsingGETWithHttpInfo(accessKey, secretKey, profileId, collectionId);
        return localVarResp.getData();
    }

    /**
     * Gets the enrollment status of a profile: information on whether it is suitable for authentication.
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param profileId The profile that contains the faces (required)
     * @param collectionId The collection that contains the profile (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> getProfileEnrollmentStatusUsingGETWithHttpInfo(String accessKey, String secretKey, String profileId, String collectionId) throws ApiException {
        okhttp3.Call localVarCall = getProfileEnrollmentStatusUsingGETValidateBeforeCall(accessKey, secretKey, profileId, collectionId, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the enrollment status of a profile: information on whether it is suitable for authentication. (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param profileId The profile that contains the faces (required)
     * @param collectionId The collection that contains the profile (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfileEnrollmentStatusUsingGETAsync(String accessKey, String secretKey, String profileId, String collectionId, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfileEnrollmentStatusUsingGETValidateBeforeCall(accessKey, secretKey, profileId, collectionId, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProfileUsingGET
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param id The profile id (provide this if you don&#39;t have the externalId (required)
     * @param withFaces Retrieves the profile with all its associated faces (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfileUsingGETCall(String accessKey, String secretKey, String collectionId, String id, String withFaces, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/profile/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        if (withFaces != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withFaces", withFaces));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileUsingGETValidateBeforeCall(String accessKey, String secretKey, String collectionId, String id, String withFaces, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getProfileUsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling getProfileUsingGET(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getProfileUsingGET(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProfileUsingGET(Async)");
        }

        return getProfileUsingGETCall(accessKey, secretKey, collectionId, id, withFaces, _callback);

    }

    /**
     * Retrieves a profile
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param id The profile id (provide this if you don&#39;t have the externalId (required)
     * @param withFaces Retrieves the profile with all its associated faces (optional, default to false)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse getProfileUsingGET(String accessKey, String secretKey, String collectionId, String id, String withFaces) throws ApiException {
        ApiResponse<RestResponse> localVarResp = getProfileUsingGETWithHttpInfo(accessKey, secretKey, collectionId, id, withFaces);
        return localVarResp.getData();
    }

    /**
     * Retrieves a profile
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param id The profile id (provide this if you don&#39;t have the externalId (required)
     * @param withFaces Retrieves the profile with all its associated faces (optional, default to false)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> getProfileUsingGETWithHttpInfo(String accessKey, String secretKey, String collectionId, String id, String withFaces) throws ApiException {
        okhttp3.Call localVarCall = getProfileUsingGETValidateBeforeCall(accessKey, secretKey, collectionId, id, withFaces, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a profile (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param id The profile id (provide this if you don&#39;t have the externalId (required)
     * @param withFaces Retrieves the profile with all its associated faces (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfileUsingGETAsync(String accessKey, String secretKey, String collectionId, String id, String withFaces, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfileUsingGETValidateBeforeCall(accessKey, secretKey, collectionId, id, withFaces, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapClassificationAttributesToProfileUsingPUT
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param profileId The profile associated with the classification attributes (required)
     * @param collectionId The collection that contains the profile (required)
     * @param classificationAttributes Comma separated key:value classification attributes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call mapClassificationAttributesToProfileUsingPUTCall(String accessKey, String secretKey, String profileId, String collectionId, String classificationAttributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/profile/classificationAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (profileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profileId", profileId));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        if (classificationAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classificationAttributes", classificationAttributes));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapClassificationAttributesToProfileUsingPUTValidateBeforeCall(String accessKey, String secretKey, String profileId, String collectionId, String classificationAttributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling mapClassificationAttributesToProfileUsingPUT(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling mapClassificationAttributesToProfileUsingPUT(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling mapClassificationAttributesToProfileUsingPUT(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling mapClassificationAttributesToProfileUsingPUT(Async)");
        }

        // verify the required parameter 'classificationAttributes' is set
        if (classificationAttributes == null) {
            throw new ApiException("Missing the required parameter 'classificationAttributes' when calling mapClassificationAttributesToProfileUsingPUT(Async)");
        }

        return mapClassificationAttributesToProfileUsingPUTCall(accessKey, secretKey, profileId, collectionId, classificationAttributes, _callback);

    }

    /**
     * Maps classification attributes to a profile
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param profileId The profile associated with the classification attributes (required)
     * @param collectionId The collection that contains the profile (required)
     * @param classificationAttributes Comma separated key:value classification attributes (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RestResponse mapClassificationAttributesToProfileUsingPUT(String accessKey, String secretKey, String profileId, String collectionId, String classificationAttributes) throws ApiException {
        ApiResponse<RestResponse> localVarResp = mapClassificationAttributesToProfileUsingPUTWithHttpInfo(accessKey, secretKey, profileId, collectionId, classificationAttributes);
        return localVarResp.getData();
    }

    /**
     * Maps classification attributes to a profile
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param profileId The profile associated with the classification attributes (required)
     * @param collectionId The collection that contains the profile (required)
     * @param classificationAttributes Comma separated key:value classification attributes (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RestResponse> mapClassificationAttributesToProfileUsingPUTWithHttpInfo(String accessKey, String secretKey, String profileId, String collectionId, String classificationAttributes) throws ApiException {
        okhttp3.Call localVarCall = mapClassificationAttributesToProfileUsingPUTValidateBeforeCall(accessKey, secretKey, profileId, collectionId, classificationAttributes, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Maps classification attributes to a profile (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param profileId The profile associated with the classification attributes (required)
     * @param collectionId The collection that contains the profile (required)
     * @param classificationAttributes Comma separated key:value classification attributes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call mapClassificationAttributesToProfileUsingPUTAsync(String accessKey, String secretKey, String profileId, String collectionId, String classificationAttributes, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapClassificationAttributesToProfileUsingPUTValidateBeforeCall(accessKey, secretKey, profileId, collectionId, classificationAttributes, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapFacesToProfileUsingPOST
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param faceHashes Comma separated face hashes, that will be associated to a profile (required)
     * @param profileId The profile that will store the face (required)
     * @param collectionId The collection that contains the profile (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapFacesToProfileUsingPOSTCall(String accessKey, String secretKey, String faceHashes, String profileId, String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/profile/map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (faceHashes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("faceHashes", faceHashes));
        }

        if (profileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profileId", profileId));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapFacesToProfileUsingPOSTValidateBeforeCall(String accessKey, String secretKey, String faceHashes, String profileId, String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling mapFacesToProfileUsingPOST(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling mapFacesToProfileUsingPOST(Async)");
        }

        // verify the required parameter 'faceHashes' is set
        if (faceHashes == null) {
            throw new ApiException("Missing the required parameter 'faceHashes' when calling mapFacesToProfileUsingPOST(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling mapFacesToProfileUsingPOST(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling mapFacesToProfileUsingPOST(Async)");
        }

        return mapFacesToProfileUsingPOSTCall(accessKey, secretKey, faceHashes, profileId, collectionId, _callback);

    }

    /**
     * Adds (maps) a list of faces, identified by faceHashes, to a profile, identified by profileId
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param faceHashes Comma separated face hashes, that will be associated to a profile (required)
     * @param profileId The profile that will store the face (required)
     * @param collectionId The collection that contains the profile (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse mapFacesToProfileUsingPOST(String accessKey, String secretKey, String faceHashes, String profileId, String collectionId) throws ApiException {
        ApiResponse<RestResponse> localVarResp = mapFacesToProfileUsingPOSTWithHttpInfo(accessKey, secretKey, faceHashes, profileId, collectionId);
        return localVarResp.getData();
    }

    /**
     * Adds (maps) a list of faces, identified by faceHashes, to a profile, identified by profileId
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param faceHashes Comma separated face hashes, that will be associated to a profile (required)
     * @param profileId The profile that will store the face (required)
     * @param collectionId The collection that contains the profile (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> mapFacesToProfileUsingPOSTWithHttpInfo(String accessKey, String secretKey, String faceHashes, String profileId, String collectionId) throws ApiException {
        okhttp3.Call localVarCall = mapFacesToProfileUsingPOSTValidateBeforeCall(accessKey, secretKey, faceHashes, profileId, collectionId, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds (maps) a list of faces, identified by faceHashes, to a profile, identified by profileId (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param faceHashes Comma separated face hashes, that will be associated to a profile (required)
     * @param profileId The profile that will store the face (required)
     * @param collectionId The collection that contains the profile (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapFacesToProfileUsingPOSTAsync(String accessKey, String secretKey, String faceHashes, String profileId, String collectionId, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapFacesToProfileUsingPOSTValidateBeforeCall(accessKey, secretKey, faceHashes, profileId, collectionId, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeClassificationAttributesFromProfileUsingDELETE
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param profileId The profile associated with the classification attributes (required)
     * @param collectionId The collection that contains the profile (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call removeClassificationAttributesFromProfileUsingDELETECall(String accessKey, String secretKey, String profileId, String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/profile/classificationAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (profileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profileId", profileId));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeClassificationAttributesFromProfileUsingDELETEValidateBeforeCall(String accessKey, String secretKey, String profileId, String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling removeClassificationAttributesFromProfileUsingDELETE(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling removeClassificationAttributesFromProfileUsingDELETE(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling removeClassificationAttributesFromProfileUsingDELETE(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling removeClassificationAttributesFromProfileUsingDELETE(Async)");
        }

        return removeClassificationAttributesFromProfileUsingDELETECall(accessKey, secretKey, profileId, collectionId, _callback);

    }

    /**
     * Removes classification attributes from a profile
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param profileId The profile associated with the classification attributes (required)
     * @param collectionId The collection that contains the profile (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RestResponse removeClassificationAttributesFromProfileUsingDELETE(String accessKey, String secretKey, String profileId, String collectionId) throws ApiException {
        ApiResponse<RestResponse> localVarResp = removeClassificationAttributesFromProfileUsingDELETEWithHttpInfo(accessKey, secretKey, profileId, collectionId);
        return localVarResp.getData();
    }

    /**
     * Removes classification attributes from a profile
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param profileId The profile associated with the classification attributes (required)
     * @param collectionId The collection that contains the profile (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RestResponse> removeClassificationAttributesFromProfileUsingDELETEWithHttpInfo(String accessKey, String secretKey, String profileId, String collectionId) throws ApiException {
        okhttp3.Call localVarCall = removeClassificationAttributesFromProfileUsingDELETEValidateBeforeCall(accessKey, secretKey, profileId, collectionId, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes classification attributes from a profile (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param profileId The profile associated with the classification attributes (required)
     * @param collectionId The collection that contains the profile (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call removeClassificationAttributesFromProfileUsingDELETEAsync(String accessKey, String secretKey, String profileId, String collectionId, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeClassificationAttributesFromProfileUsingDELETEValidateBeforeCall(accessKey, secretKey, profileId, collectionId, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeFacesFromProfileUsingDELETE
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param faceHashes Comma separated face hashes, that will be removed from a profile (required)
     * @param profileId The profile that contains the face (required)
     * @param collectionId The collection that contains the profile (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeFacesFromProfileUsingDELETECall(String accessKey, String secretKey, String faceHashes, String profileId, String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/profile/map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (faceHashes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("faceHashes", faceHashes));
        }

        if (profileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profileId", profileId));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFacesFromProfileUsingDELETEValidateBeforeCall(String accessKey, String secretKey, String faceHashes, String profileId, String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling removeFacesFromProfileUsingDELETE(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling removeFacesFromProfileUsingDELETE(Async)");
        }

        // verify the required parameter 'faceHashes' is set
        if (faceHashes == null) {
            throw new ApiException("Missing the required parameter 'faceHashes' when calling removeFacesFromProfileUsingDELETE(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling removeFacesFromProfileUsingDELETE(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling removeFacesFromProfileUsingDELETE(Async)");
        }

        return removeFacesFromProfileUsingDELETECall(accessKey, secretKey, faceHashes, profileId, collectionId, _callback);

    }

    /**
     * Removes (unmaps) a list of faces, identified by faceHashes, from a profile, identified by profileId
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param faceHashes Comma separated face hashes, that will be removed from a profile (required)
     * @param profileId The profile that contains the face (required)
     * @param collectionId The collection that contains the profile (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse removeFacesFromProfileUsingDELETE(String accessKey, String secretKey, String faceHashes, String profileId, String collectionId) throws ApiException {
        ApiResponse<RestResponse> localVarResp = removeFacesFromProfileUsingDELETEWithHttpInfo(accessKey, secretKey, faceHashes, profileId, collectionId);
        return localVarResp.getData();
    }

    /**
     * Removes (unmaps) a list of faces, identified by faceHashes, from a profile, identified by profileId
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param faceHashes Comma separated face hashes, that will be removed from a profile (required)
     * @param profileId The profile that contains the face (required)
     * @param collectionId The collection that contains the profile (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> removeFacesFromProfileUsingDELETEWithHttpInfo(String accessKey, String secretKey, String faceHashes, String profileId, String collectionId) throws ApiException {
        okhttp3.Call localVarCall = removeFacesFromProfileUsingDELETEValidateBeforeCall(accessKey, secretKey, faceHashes, profileId, collectionId, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes (unmaps) a list of faces, identified by faceHashes, from a profile, identified by profileId (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param faceHashes Comma separated face hashes, that will be removed from a profile (required)
     * @param profileId The profile that contains the face (required)
     * @param collectionId The collection that contains the profile (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeFacesFromProfileUsingDELETEAsync(String accessKey, String secretKey, String faceHashes, String profileId, String collectionId, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFacesFromProfileUsingDELETEValidateBeforeCall(accessKey, secretKey, faceHashes, profileId, collectionId, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProfileUsingPATCH
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the profile that will be updated (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param externalId External reference to additional information you don’t want to share with VisageCloud (optional)
     * @param screenName Human-readable label for the profile (optional)
     * @param labels Allows you to do finer filtering in face recognition (optional)
     * @param classificationAttributes Comma separated key:value classification attributes (optional)
     * @param details Comma separated key:value details of profile (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProfileUsingPATCHCall(String accessKey, String secretKey, String id, String collectionId, String externalId, String screenName, List<String> labels, String classificationAttributes, String details, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/profile/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalId", externalId));
        }

        if (screenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screenName", screenName));
        }

        if (labels != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "labels", labels));
        }

        if (classificationAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classificationAttributes", classificationAttributes));
        }

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProfileUsingPATCHValidateBeforeCall(String accessKey, String secretKey, String id, String collectionId, String externalId, String screenName, List<String> labels, String classificationAttributes, String details, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling updateProfileUsingPATCH(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling updateProfileUsingPATCH(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateProfileUsingPATCH(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling updateProfileUsingPATCH(Async)");
        }

        return updateProfileUsingPATCHCall(accessKey, secretKey, id, collectionId, externalId, screenName, labels, classificationAttributes, details, _callback);

    }

    /**
     * Update an existing profile with a given id
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the profile that will be updated (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param externalId External reference to additional information you don’t want to share with VisageCloud (optional)
     * @param screenName Human-readable label for the profile (optional)
     * @param labels Allows you to do finer filtering in face recognition (optional)
     * @param classificationAttributes Comma separated key:value classification attributes (optional)
     * @param details Comma separated key:value details of profile (optional)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse updateProfileUsingPATCH(String accessKey, String secretKey, String id, String collectionId, String externalId, String screenName, List<String> labels, String classificationAttributes, String details) throws ApiException {
        ApiResponse<RestResponse> localVarResp = updateProfileUsingPATCHWithHttpInfo(accessKey, secretKey, id, collectionId, externalId, screenName, labels, classificationAttributes, details);
        return localVarResp.getData();
    }

    /**
     * Update an existing profile with a given id
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the profile that will be updated (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param externalId External reference to additional information you don’t want to share with VisageCloud (optional)
     * @param screenName Human-readable label for the profile (optional)
     * @param labels Allows you to do finer filtering in face recognition (optional)
     * @param classificationAttributes Comma separated key:value classification attributes (optional)
     * @param details Comma separated key:value details of profile (optional)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> updateProfileUsingPATCHWithHttpInfo(String accessKey, String secretKey, String id, String collectionId, String externalId, String screenName, List<String> labels, String classificationAttributes, String details) throws ApiException {
        okhttp3.Call localVarCall = updateProfileUsingPATCHValidateBeforeCall(accessKey, secretKey, id, collectionId, externalId, screenName, labels, classificationAttributes, details, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing profile with a given id (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the profile that will be updated (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param externalId External reference to additional information you don’t want to share with VisageCloud (optional)
     * @param screenName Human-readable label for the profile (optional)
     * @param labels Allows you to do finer filtering in face recognition (optional)
     * @param classificationAttributes Comma separated key:value classification attributes (optional)
     * @param details Comma separated key:value details of profile (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProfileUsingPATCHAsync(String accessKey, String secretKey, String id, String collectionId, String externalId, String screenName, List<String> labels, String classificationAttributes, String details, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProfileUsingPATCHValidateBeforeCall(accessKey, secretKey, id, collectionId, externalId, screenName, labels, classificationAttributes, details, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
