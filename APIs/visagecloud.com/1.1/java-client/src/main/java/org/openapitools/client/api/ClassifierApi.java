/*
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RestResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClassifierApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClassifierApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClassifierApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addSVMClassifierUsingPOST
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param name The name of the SVM classifier that will be created (required)
     * @param collectionIds Collection ids (required)
     * @param classificationAttributeName Classification attribute name (required)
     * @param preprocessor Preprocessor (optional, default to FeaturePreprocessor)
     * @param considerViewPoints Consider view point (optional, default to false)
     * @param seed Seed for divididing training and evaluation sets (optional, default to 179425537)
     * @param trainingRatio Training ratio (optional, default to 0.8)
     * @param probabilityParameter Probability parameter (optional, default to 1)
     * @param gammaParameter Gamma parameter (optional, default to 0.5)
     * @param nuParameter Nu parameter (optional, default to 0.25)
     * @param cParameter c parameter (optional, default to 1.0)
     * @param svmTypeParameter SVM type parameter (optional, default to 0)
     * @param kernelTypeParameter Kernel type parameter (optional, default to 0)
     * @param cacheSizeParameter Cache size parameter (optional, default to 500.0)
     * @param epsParameter Eps parameter (optional, default to 0.001)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSVMClassifierUsingPOSTCall(String accessKey, String secretKey, String name, List<String> collectionIds, String classificationAttributeName, String preprocessor, Boolean considerViewPoints, Integer seed, Double trainingRatio, Integer probabilityParameter, Double gammaParameter, Double nuParameter, Double cParameter, Integer svmTypeParameter, Integer kernelTypeParameter, Double cacheSizeParameter, Double epsParameter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/classifier/svm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (collectionIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "collectionIds", collectionIds));
        }

        if (preprocessor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preprocessor", preprocessor));
        }

        if (classificationAttributeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classificationAttributeName", classificationAttributeName));
        }

        if (considerViewPoints != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("considerViewPoints", considerViewPoints));
        }

        if (seed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seed", seed));
        }

        if (trainingRatio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trainingRatio", trainingRatio));
        }

        if (probabilityParameter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("probabilityParameter", probabilityParameter));
        }

        if (gammaParameter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gammaParameter", gammaParameter));
        }

        if (nuParameter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nuParameter", nuParameter));
        }

        if (cParameter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cParameter", cParameter));
        }

        if (svmTypeParameter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("svmTypeParameter", svmTypeParameter));
        }

        if (kernelTypeParameter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kernelTypeParameter", kernelTypeParameter));
        }

        if (cacheSizeParameter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cacheSizeParameter", cacheSizeParameter));
        }

        if (epsParameter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("epsParameter", epsParameter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSVMClassifierUsingPOSTValidateBeforeCall(String accessKey, String secretKey, String name, List<String> collectionIds, String classificationAttributeName, String preprocessor, Boolean considerViewPoints, Integer seed, Double trainingRatio, Integer probabilityParameter, Double gammaParameter, Double nuParameter, Double cParameter, Integer svmTypeParameter, Integer kernelTypeParameter, Double cacheSizeParameter, Double epsParameter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling addSVMClassifierUsingPOST(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling addSVMClassifierUsingPOST(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling addSVMClassifierUsingPOST(Async)");
        }

        // verify the required parameter 'collectionIds' is set
        if (collectionIds == null) {
            throw new ApiException("Missing the required parameter 'collectionIds' when calling addSVMClassifierUsingPOST(Async)");
        }

        // verify the required parameter 'classificationAttributeName' is set
        if (classificationAttributeName == null) {
            throw new ApiException("Missing the required parameter 'classificationAttributeName' when calling addSVMClassifierUsingPOST(Async)");
        }

        return addSVMClassifierUsingPOSTCall(accessKey, secretKey, name, collectionIds, classificationAttributeName, preprocessor, considerViewPoints, seed, trainingRatio, probabilityParameter, gammaParameter, nuParameter, cParameter, svmTypeParameter, kernelTypeParameter, cacheSizeParameter, epsParameter, _callback);

    }

    /**
     * Create new SVM classifier with given name
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param name The name of the SVM classifier that will be created (required)
     * @param collectionIds Collection ids (required)
     * @param classificationAttributeName Classification attribute name (required)
     * @param preprocessor Preprocessor (optional, default to FeaturePreprocessor)
     * @param considerViewPoints Consider view point (optional, default to false)
     * @param seed Seed for divididing training and evaluation sets (optional, default to 179425537)
     * @param trainingRatio Training ratio (optional, default to 0.8)
     * @param probabilityParameter Probability parameter (optional, default to 1)
     * @param gammaParameter Gamma parameter (optional, default to 0.5)
     * @param nuParameter Nu parameter (optional, default to 0.25)
     * @param cParameter c parameter (optional, default to 1.0)
     * @param svmTypeParameter SVM type parameter (optional, default to 0)
     * @param kernelTypeParameter Kernel type parameter (optional, default to 0)
     * @param cacheSizeParameter Cache size parameter (optional, default to 500.0)
     * @param epsParameter Eps parameter (optional, default to 0.001)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse addSVMClassifierUsingPOST(String accessKey, String secretKey, String name, List<String> collectionIds, String classificationAttributeName, String preprocessor, Boolean considerViewPoints, Integer seed, Double trainingRatio, Integer probabilityParameter, Double gammaParameter, Double nuParameter, Double cParameter, Integer svmTypeParameter, Integer kernelTypeParameter, Double cacheSizeParameter, Double epsParameter) throws ApiException {
        ApiResponse<RestResponse> localVarResp = addSVMClassifierUsingPOSTWithHttpInfo(accessKey, secretKey, name, collectionIds, classificationAttributeName, preprocessor, considerViewPoints, seed, trainingRatio, probabilityParameter, gammaParameter, nuParameter, cParameter, svmTypeParameter, kernelTypeParameter, cacheSizeParameter, epsParameter);
        return localVarResp.getData();
    }

    /**
     * Create new SVM classifier with given name
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param name The name of the SVM classifier that will be created (required)
     * @param collectionIds Collection ids (required)
     * @param classificationAttributeName Classification attribute name (required)
     * @param preprocessor Preprocessor (optional, default to FeaturePreprocessor)
     * @param considerViewPoints Consider view point (optional, default to false)
     * @param seed Seed for divididing training and evaluation sets (optional, default to 179425537)
     * @param trainingRatio Training ratio (optional, default to 0.8)
     * @param probabilityParameter Probability parameter (optional, default to 1)
     * @param gammaParameter Gamma parameter (optional, default to 0.5)
     * @param nuParameter Nu parameter (optional, default to 0.25)
     * @param cParameter c parameter (optional, default to 1.0)
     * @param svmTypeParameter SVM type parameter (optional, default to 0)
     * @param kernelTypeParameter Kernel type parameter (optional, default to 0)
     * @param cacheSizeParameter Cache size parameter (optional, default to 500.0)
     * @param epsParameter Eps parameter (optional, default to 0.001)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> addSVMClassifierUsingPOSTWithHttpInfo(String accessKey, String secretKey, String name, List<String> collectionIds, String classificationAttributeName, String preprocessor, Boolean considerViewPoints, Integer seed, Double trainingRatio, Integer probabilityParameter, Double gammaParameter, Double nuParameter, Double cParameter, Integer svmTypeParameter, Integer kernelTypeParameter, Double cacheSizeParameter, Double epsParameter) throws ApiException {
        okhttp3.Call localVarCall = addSVMClassifierUsingPOSTValidateBeforeCall(accessKey, secretKey, name, collectionIds, classificationAttributeName, preprocessor, considerViewPoints, seed, trainingRatio, probabilityParameter, gammaParameter, nuParameter, cParameter, svmTypeParameter, kernelTypeParameter, cacheSizeParameter, epsParameter, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new SVM classifier with given name (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param name The name of the SVM classifier that will be created (required)
     * @param collectionIds Collection ids (required)
     * @param classificationAttributeName Classification attribute name (required)
     * @param preprocessor Preprocessor (optional, default to FeaturePreprocessor)
     * @param considerViewPoints Consider view point (optional, default to false)
     * @param seed Seed for divididing training and evaluation sets (optional, default to 179425537)
     * @param trainingRatio Training ratio (optional, default to 0.8)
     * @param probabilityParameter Probability parameter (optional, default to 1)
     * @param gammaParameter Gamma parameter (optional, default to 0.5)
     * @param nuParameter Nu parameter (optional, default to 0.25)
     * @param cParameter c parameter (optional, default to 1.0)
     * @param svmTypeParameter SVM type parameter (optional, default to 0)
     * @param kernelTypeParameter Kernel type parameter (optional, default to 0)
     * @param cacheSizeParameter Cache size parameter (optional, default to 500.0)
     * @param epsParameter Eps parameter (optional, default to 0.001)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSVMClassifierUsingPOSTAsync(String accessKey, String secretKey, String name, List<String> collectionIds, String classificationAttributeName, String preprocessor, Boolean considerViewPoints, Integer seed, Double trainingRatio, Integer probabilityParameter, Double gammaParameter, Double nuParameter, Double cParameter, Integer svmTypeParameter, Integer kernelTypeParameter, Double cacheSizeParameter, Double epsParameter, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSVMClassifierUsingPOSTValidateBeforeCall(accessKey, secretKey, name, collectionIds, classificationAttributeName, preprocessor, considerViewPoints, seed, trainingRatio, probabilityParameter, gammaParameter, nuParameter, cParameter, svmTypeParameter, kernelTypeParameter, cacheSizeParameter, epsParameter, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClassiferFullUsingGET
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the classifier that you want the status for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassiferFullUsingGETCall(String accessKey, String secretKey, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/classifier/svm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClassiferFullUsingGETValidateBeforeCall(String accessKey, String secretKey, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getClassiferFullUsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling getClassiferFullUsingGET(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getClassiferFullUsingGET(Async)");
        }

        return getClassiferFullUsingGETCall(accessKey, secretKey, id, _callback);

    }

    /**
     * Get classifier full
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the classifier that you want the status for (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse getClassiferFullUsingGET(String accessKey, String secretKey, String id) throws ApiException {
        ApiResponse<RestResponse> localVarResp = getClassiferFullUsingGETWithHttpInfo(accessKey, secretKey, id);
        return localVarResp.getData();
    }

    /**
     * Get classifier full
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the classifier that you want the status for (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> getClassiferFullUsingGETWithHttpInfo(String accessKey, String secretKey, String id) throws ApiException {
        okhttp3.Call localVarCall = getClassiferFullUsingGETValidateBeforeCall(accessKey, secretKey, id, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get classifier full (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the classifier that you want the status for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassiferFullUsingGETAsync(String accessKey, String secretKey, String id, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClassiferFullUsingGETValidateBeforeCall(accessKey, secretKey, id, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClassiferStatusUsingGET
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the classifier that you want the status for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassiferStatusUsingGETCall(String accessKey, String secretKey, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/classifier/svm/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClassiferStatusUsingGETValidateBeforeCall(String accessKey, String secretKey, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getClassiferStatusUsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling getClassiferStatusUsingGET(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getClassiferStatusUsingGET(Async)");
        }

        return getClassiferStatusUsingGETCall(accessKey, secretKey, id, _callback);

    }

    /**
     * Get classifer status
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the classifier that you want the status for (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse getClassiferStatusUsingGET(String accessKey, String secretKey, String id) throws ApiException {
        ApiResponse<RestResponse> localVarResp = getClassiferStatusUsingGETWithHttpInfo(accessKey, secretKey, id);
        return localVarResp.getData();
    }

    /**
     * Get classifer status
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the classifier that you want the status for (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> getClassiferStatusUsingGETWithHttpInfo(String accessKey, String secretKey, String id) throws ApiException {
        okhttp3.Call localVarCall = getClassiferStatusUsingGETValidateBeforeCall(accessKey, secretKey, id, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get classifer status (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the classifier that you want the status for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassiferStatusUsingGETAsync(String accessKey, String secretKey, String id, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClassiferStatusUsingGETValidateBeforeCall(accessKey, secretKey, id, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeClassiferUsingDELETE
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the classifier that will be removed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeClassiferUsingDELETECall(String accessKey, String secretKey, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/classifier/svm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeClassiferUsingDELETEValidateBeforeCall(String accessKey, String secretKey, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling removeClassiferUsingDELETE(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling removeClassiferUsingDELETE(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeClassiferUsingDELETE(Async)");
        }

        return removeClassiferUsingDELETECall(accessKey, secretKey, id, _callback);

    }

    /**
     * Delete existing classifier
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the classifier that will be removed (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse removeClassiferUsingDELETE(String accessKey, String secretKey, String id) throws ApiException {
        ApiResponse<RestResponse> localVarResp = removeClassiferUsingDELETEWithHttpInfo(accessKey, secretKey, id);
        return localVarResp.getData();
    }

    /**
     * Delete existing classifier
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the classifier that will be removed (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> removeClassiferUsingDELETEWithHttpInfo(String accessKey, String secretKey, String id) throws ApiException {
        okhttp3.Call localVarCall = removeClassiferUsingDELETEValidateBeforeCall(accessKey, secretKey, id, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete existing classifier (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the classifier that will be removed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeClassiferUsingDELETEAsync(String accessKey, String secretKey, String id, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeClassiferUsingDELETEValidateBeforeCall(accessKey, secretKey, id, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
