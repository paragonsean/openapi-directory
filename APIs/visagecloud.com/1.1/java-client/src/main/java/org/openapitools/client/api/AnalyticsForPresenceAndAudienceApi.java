/*
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.RestResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalyticsForPresenceAndAudienceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnalyticsForPresenceAndAudienceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalyticsForPresenceAndAudienceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for counterUsingPOST
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionIds Collection ids (optional)
     * @param streamIds Stream Ids (optional)
     * @param startDateTime startDateTime (optional)
     * @param endDateTime endDateTime (optional)
     * @param visitDuration visitDuration (optional, default to 3600000)
     * @param maxIterations maxIterations (optional, default to 1)
     * @param maxBatchIterations maxBatchIterations (optional, default to 1)
     * @param minNeighborsMergedPerIteration minNeighborsMergedPerIteration (optional, default to 5)
     * @param mergingStep mergingStep (optional, default to 1.0)
     * @param shuffling shuffling (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call counterUsingPOSTCall(String accessKey, String secretKey, List<String> collectionIds, List<String> streamIds, OffsetDateTime startDateTime, OffsetDateTime endDateTime, Long visitDuration, Integer maxIterations, Integer maxBatchIterations, Integer minNeighborsMergedPerIteration, Double mergingStep, Boolean shuffling, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/analytics/counting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (collectionIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "collectionIds", collectionIds));
        }

        if (streamIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "streamIds", streamIds));
        }

        if (startDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime", startDateTime));
        }

        if (endDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime", endDateTime));
        }

        if (visitDuration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visitDuration", visitDuration));
        }

        if (maxIterations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxIterations", maxIterations));
        }

        if (maxBatchIterations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxBatchIterations", maxBatchIterations));
        }

        if (minNeighborsMergedPerIteration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minNeighborsMergedPerIteration", minNeighborsMergedPerIteration));
        }

        if (mergingStep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mergingStep", mergingStep));
        }

        if (shuffling != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shuffling", shuffling));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call counterUsingPOSTValidateBeforeCall(String accessKey, String secretKey, List<String> collectionIds, List<String> streamIds, OffsetDateTime startDateTime, OffsetDateTime endDateTime, Long visitDuration, Integer maxIterations, Integer maxBatchIterations, Integer minNeighborsMergedPerIteration, Double mergingStep, Boolean shuffling, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling counterUsingPOST(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling counterUsingPOST(Async)");
        }

        return counterUsingPOSTCall(accessKey, secretKey, collectionIds, streamIds, startDateTime, endDateTime, visitDuration, maxIterations, maxBatchIterations, minNeighborsMergedPerIteration, mergingStep, shuffling, _callback);

    }

    /**
     * Count individuals in streams or collections
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionIds Collection ids (optional)
     * @param streamIds Stream Ids (optional)
     * @param startDateTime startDateTime (optional)
     * @param endDateTime endDateTime (optional)
     * @param visitDuration visitDuration (optional, default to 3600000)
     * @param maxIterations maxIterations (optional, default to 1)
     * @param maxBatchIterations maxBatchIterations (optional, default to 1)
     * @param minNeighborsMergedPerIteration minNeighborsMergedPerIteration (optional, default to 5)
     * @param mergingStep mergingStep (optional, default to 1.0)
     * @param shuffling shuffling (optional, default to false)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse counterUsingPOST(String accessKey, String secretKey, List<String> collectionIds, List<String> streamIds, OffsetDateTime startDateTime, OffsetDateTime endDateTime, Long visitDuration, Integer maxIterations, Integer maxBatchIterations, Integer minNeighborsMergedPerIteration, Double mergingStep, Boolean shuffling) throws ApiException {
        ApiResponse<RestResponse> localVarResp = counterUsingPOSTWithHttpInfo(accessKey, secretKey, collectionIds, streamIds, startDateTime, endDateTime, visitDuration, maxIterations, maxBatchIterations, minNeighborsMergedPerIteration, mergingStep, shuffling);
        return localVarResp.getData();
    }

    /**
     * Count individuals in streams or collections
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionIds Collection ids (optional)
     * @param streamIds Stream Ids (optional)
     * @param startDateTime startDateTime (optional)
     * @param endDateTime endDateTime (optional)
     * @param visitDuration visitDuration (optional, default to 3600000)
     * @param maxIterations maxIterations (optional, default to 1)
     * @param maxBatchIterations maxBatchIterations (optional, default to 1)
     * @param minNeighborsMergedPerIteration minNeighborsMergedPerIteration (optional, default to 5)
     * @param mergingStep mergingStep (optional, default to 1.0)
     * @param shuffling shuffling (optional, default to false)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> counterUsingPOSTWithHttpInfo(String accessKey, String secretKey, List<String> collectionIds, List<String> streamIds, OffsetDateTime startDateTime, OffsetDateTime endDateTime, Long visitDuration, Integer maxIterations, Integer maxBatchIterations, Integer minNeighborsMergedPerIteration, Double mergingStep, Boolean shuffling) throws ApiException {
        okhttp3.Call localVarCall = counterUsingPOSTValidateBeforeCall(accessKey, secretKey, collectionIds, streamIds, startDateTime, endDateTime, visitDuration, maxIterations, maxBatchIterations, minNeighborsMergedPerIteration, mergingStep, shuffling, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count individuals in streams or collections (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionIds Collection ids (optional)
     * @param streamIds Stream Ids (optional)
     * @param startDateTime startDateTime (optional)
     * @param endDateTime endDateTime (optional)
     * @param visitDuration visitDuration (optional, default to 3600000)
     * @param maxIterations maxIterations (optional, default to 1)
     * @param maxBatchIterations maxBatchIterations (optional, default to 1)
     * @param minNeighborsMergedPerIteration minNeighborsMergedPerIteration (optional, default to 5)
     * @param mergingStep mergingStep (optional, default to 1.0)
     * @param shuffling shuffling (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call counterUsingPOSTAsync(String accessKey, String secretKey, List<String> collectionIds, List<String> streamIds, OffsetDateTime startDateTime, OffsetDateTime endDateTime, Long visitDuration, Integer maxIterations, Integer maxBatchIterations, Integer minNeighborsMergedPerIteration, Double mergingStep, Boolean shuffling, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = counterUsingPOSTValidateBeforeCall(accessKey, secretKey, collectionIds, streamIds, startDateTime, endDateTime, visitDuration, maxIterations, maxBatchIterations, minNeighborsMergedPerIteration, mergingStep, shuffling, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for presenceTimeseriesUsingPOST
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param attributes attributes (required)
     * @param streamIds Stream Ids (optional)
     * @param startDateTime startDateTime (optional)
     * @param endDateTime endDateTime (optional)
     * @param step step (optional, default to 3600)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presenceTimeseriesUsingPOSTCall(String accessKey, String secretKey, List<String> attributes, List<String> streamIds, OffsetDateTime startDateTime, OffsetDateTime endDateTime, Long step, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/analytics/presence/timeseries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (streamIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "streamIds", streamIds));
        }

        if (startDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime", startDateTime));
        }

        if (endDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime", endDateTime));
        }

        if (step != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("step", step));
        }

        if (attributes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "attributes", attributes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call presenceTimeseriesUsingPOSTValidateBeforeCall(String accessKey, String secretKey, List<String> attributes, List<String> streamIds, OffsetDateTime startDateTime, OffsetDateTime endDateTime, Long step, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling presenceTimeseriesUsingPOST(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling presenceTimeseriesUsingPOST(Async)");
        }

        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling presenceTimeseriesUsingPOST(Async)");
        }

        return presenceTimeseriesUsingPOSTCall(accessKey, secretKey, attributes, streamIds, startDateTime, endDateTime, step, _callback);

    }

    /**
     * Show audience (based on number of occurrences of each person) breakdown per declared attribute (age, gender).
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param attributes attributes (required)
     * @param streamIds Stream Ids (optional)
     * @param startDateTime startDateTime (optional)
     * @param endDateTime endDateTime (optional)
     * @param step step (optional, default to 3600)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse presenceTimeseriesUsingPOST(String accessKey, String secretKey, List<String> attributes, List<String> streamIds, OffsetDateTime startDateTime, OffsetDateTime endDateTime, Long step) throws ApiException {
        ApiResponse<RestResponse> localVarResp = presenceTimeseriesUsingPOSTWithHttpInfo(accessKey, secretKey, attributes, streamIds, startDateTime, endDateTime, step);
        return localVarResp.getData();
    }

    /**
     * Show audience (based on number of occurrences of each person) breakdown per declared attribute (age, gender).
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param attributes attributes (required)
     * @param streamIds Stream Ids (optional)
     * @param startDateTime startDateTime (optional)
     * @param endDateTime endDateTime (optional)
     * @param step step (optional, default to 3600)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> presenceTimeseriesUsingPOSTWithHttpInfo(String accessKey, String secretKey, List<String> attributes, List<String> streamIds, OffsetDateTime startDateTime, OffsetDateTime endDateTime, Long step) throws ApiException {
        okhttp3.Call localVarCall = presenceTimeseriesUsingPOSTValidateBeforeCall(accessKey, secretKey, attributes, streamIds, startDateTime, endDateTime, step, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show audience (based on number of occurrences of each person) breakdown per declared attribute (age, gender). (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param attributes attributes (required)
     * @param streamIds Stream Ids (optional)
     * @param startDateTime startDateTime (optional)
     * @param endDateTime endDateTime (optional)
     * @param step step (optional, default to 3600)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presenceTimeseriesUsingPOSTAsync(String accessKey, String secretKey, List<String> attributes, List<String> streamIds, OffsetDateTime startDateTime, OffsetDateTime endDateTime, Long step, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = presenceTimeseriesUsingPOSTValidateBeforeCall(accessKey, secretKey, attributes, streamIds, startDateTime, endDateTime, step, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for presenceTotalUsingPOST
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param streamIds Stream Ids (required)
     * @param attributes attributes (required)
     * @param startDateTime startDateTime (optional)
     * @param endDateTime endDateTime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presenceTotalUsingPOSTCall(String accessKey, String secretKey, List<String> streamIds, List<String> attributes, OffsetDateTime startDateTime, OffsetDateTime endDateTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/analytics/presence/total";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (streamIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "streamIds", streamIds));
        }

        if (startDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime", startDateTime));
        }

        if (endDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime", endDateTime));
        }

        if (attributes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "attributes", attributes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call presenceTotalUsingPOSTValidateBeforeCall(String accessKey, String secretKey, List<String> streamIds, List<String> attributes, OffsetDateTime startDateTime, OffsetDateTime endDateTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling presenceTotalUsingPOST(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling presenceTotalUsingPOST(Async)");
        }

        // verify the required parameter 'streamIds' is set
        if (streamIds == null) {
            throw new ApiException("Missing the required parameter 'streamIds' when calling presenceTotalUsingPOST(Async)");
        }

        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling presenceTotalUsingPOST(Async)");
        }

        return presenceTotalUsingPOSTCall(accessKey, secretKey, streamIds, attributes, startDateTime, endDateTime, _callback);

    }

    /**
     * Show presence (based on number of occurences of each face) breakdown per declared attribute (age, gender)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param streamIds Stream Ids (required)
     * @param attributes attributes (required)
     * @param startDateTime startDateTime (optional)
     * @param endDateTime endDateTime (optional)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse presenceTotalUsingPOST(String accessKey, String secretKey, List<String> streamIds, List<String> attributes, OffsetDateTime startDateTime, OffsetDateTime endDateTime) throws ApiException {
        ApiResponse<RestResponse> localVarResp = presenceTotalUsingPOSTWithHttpInfo(accessKey, secretKey, streamIds, attributes, startDateTime, endDateTime);
        return localVarResp.getData();
    }

    /**
     * Show presence (based on number of occurences of each face) breakdown per declared attribute (age, gender)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param streamIds Stream Ids (required)
     * @param attributes attributes (required)
     * @param startDateTime startDateTime (optional)
     * @param endDateTime endDateTime (optional)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> presenceTotalUsingPOSTWithHttpInfo(String accessKey, String secretKey, List<String> streamIds, List<String> attributes, OffsetDateTime startDateTime, OffsetDateTime endDateTime) throws ApiException {
        okhttp3.Call localVarCall = presenceTotalUsingPOSTValidateBeforeCall(accessKey, secretKey, streamIds, attributes, startDateTime, endDateTime, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show presence (based on number of occurences of each face) breakdown per declared attribute (age, gender) (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param streamIds Stream Ids (required)
     * @param attributes attributes (required)
     * @param startDateTime startDateTime (optional)
     * @param endDateTime endDateTime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presenceTotalUsingPOSTAsync(String accessKey, String secretKey, List<String> streamIds, List<String> attributes, OffsetDateTime startDateTime, OffsetDateTime endDateTime, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = presenceTotalUsingPOSTValidateBeforeCall(accessKey, secretKey, streamIds, attributes, startDateTime, endDateTime, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
