/*
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RestResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalysisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnalysisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalysisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for compareFacesUsingGET
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param faceHashes The IDs of the faces which you want compared, comma-separated (required)
     * @param showDetails Show details (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compareFacesUsingGETCall(String accessKey, String secretKey, List<String> faceHashes, Boolean showDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/analysis/compare";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (faceHashes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "faceHashes", faceHashes));
        }

        if (showDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showDetails", showDetails));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compareFacesUsingGETValidateBeforeCall(String accessKey, String secretKey, List<String> faceHashes, Boolean showDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling compareFacesUsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling compareFacesUsingGET(Async)");
        }

        // verify the required parameter 'faceHashes' is set
        if (faceHashes == null) {
            throw new ApiException("Missing the required parameter 'faceHashes' when calling compareFacesUsingGET(Async)");
        }

        return compareFacesUsingGETCall(accessKey, secretKey, faceHashes, showDetails, _callback);

    }

    /**
     * Compare several faces identified by faceHash, without depending on mapping faces to profiles
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param faceHashes The IDs of the faces which you want compared, comma-separated (required)
     * @param showDetails Show details (optional, default to false)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse compareFacesUsingGET(String accessKey, String secretKey, List<String> faceHashes, Boolean showDetails) throws ApiException {
        ApiResponse<RestResponse> localVarResp = compareFacesUsingGETWithHttpInfo(accessKey, secretKey, faceHashes, showDetails);
        return localVarResp.getData();
    }

    /**
     * Compare several faces identified by faceHash, without depending on mapping faces to profiles
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param faceHashes The IDs of the faces which you want compared, comma-separated (required)
     * @param showDetails Show details (optional, default to false)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> compareFacesUsingGETWithHttpInfo(String accessKey, String secretKey, List<String> faceHashes, Boolean showDetails) throws ApiException {
        okhttp3.Call localVarCall = compareFacesUsingGETValidateBeforeCall(accessKey, secretKey, faceHashes, showDetails, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compare several faces identified by faceHash, without depending on mapping faces to profiles (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param faceHashes The IDs of the faces which you want compared, comma-separated (required)
     * @param showDetails Show details (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compareFacesUsingGETAsync(String accessKey, String secretKey, List<String> faceHashes, Boolean showDetails, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = compareFacesUsingGETValidateBeforeCall(accessKey, secretKey, faceHashes, showDetails, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for performAnalysisUsingPOST
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param storeAnalysisPicture Boolean value indicating whether you want the picture of the analysis to be stored for later retrieval (optional, default to true)
     * @param storeFacePictures Boolean value indicating whether you want the faces inside the picture to be stored for later retrieval (optional, default to true)
     * @param storeResult Boolean value indicating whether you want the result of the analysis to be stored (optional, default to true)
     * @param retentionTime How many seconds the results should be retained in stoarage? (optional)
     * @param pictureURL The URL of the picture, assuming it is served by a third party server. Server should be accesible from the Internet or through another netwoek by VisageCloud infrastructure (optional)
     * @param algorithmVersion Algorithm version (V2 is more performant but not backward compatible) (optional, default to V2)
     * @param autoRotate Auto-rotate to find flipped or rotate faces (optional, default to false)
     * @param skipEXIF Skip EXIF rotation procesing (optional, default to false)
     * @param waitForPictureUpload Waits until the picture is successfully uploaded, before returning the response back the the client (optional, default to false)
     * @param filters [For advanced users only] Change feature filters for robustness of feature extraction. Tweaking this parameter may affect per (optional)
     * @param options [For advanced users only] Options for preprocessing of image. (optional)
     * @param picture The multipart/form-data version of the image, in case a direct upload is used. At least one of picture or pictureURL must be present (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performAnalysisUsingPOSTCall(String accessKey, String secretKey, Boolean storeAnalysisPicture, Boolean storeFacePictures, Boolean storeResult, Integer retentionTime, String pictureURL, String algorithmVersion, Boolean autoRotate, Boolean skipEXIF, Boolean waitForPictureUpload, List<String> filters, String options, String picture, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/analysis/detection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (picture != null) {
            localVarFormParams.put("picture", picture);
        }

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (storeAnalysisPicture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storeAnalysisPicture", storeAnalysisPicture));
        }

        if (storeFacePictures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storeFacePictures", storeFacePictures));
        }

        if (storeResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storeResult", storeResult));
        }

        if (retentionTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retentionTime", retentionTime));
        }

        if (pictureURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pictureURL", pictureURL));
        }

        if (algorithmVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("algorithmVersion", algorithmVersion));
        }

        if (autoRotate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("autoRotate", autoRotate));
        }

        if (skipEXIF != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipEXIF", skipEXIF));
        }

        if (waitForPictureUpload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("waitForPictureUpload", waitForPictureUpload));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters", filters));
        }

        if (options != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("options", options));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performAnalysisUsingPOSTValidateBeforeCall(String accessKey, String secretKey, Boolean storeAnalysisPicture, Boolean storeFacePictures, Boolean storeResult, Integer retentionTime, String pictureURL, String algorithmVersion, Boolean autoRotate, Boolean skipEXIF, Boolean waitForPictureUpload, List<String> filters, String options, String picture, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling performAnalysisUsingPOST(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling performAnalysisUsingPOST(Async)");
        }

        return performAnalysisUsingPOSTCall(accessKey, secretKey, storeAnalysisPicture, storeFacePictures, storeResult, retentionTime, pictureURL, algorithmVersion, autoRotate, skipEXIF, waitForPictureUpload, filters, options, picture, _callback);

    }

    /**
     * Perform detection on a given picture or picture URL
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param storeAnalysisPicture Boolean value indicating whether you want the picture of the analysis to be stored for later retrieval (optional, default to true)
     * @param storeFacePictures Boolean value indicating whether you want the faces inside the picture to be stored for later retrieval (optional, default to true)
     * @param storeResult Boolean value indicating whether you want the result of the analysis to be stored (optional, default to true)
     * @param retentionTime How many seconds the results should be retained in stoarage? (optional)
     * @param pictureURL The URL of the picture, assuming it is served by a third party server. Server should be accesible from the Internet or through another netwoek by VisageCloud infrastructure (optional)
     * @param algorithmVersion Algorithm version (V2 is more performant but not backward compatible) (optional, default to V2)
     * @param autoRotate Auto-rotate to find flipped or rotate faces (optional, default to false)
     * @param skipEXIF Skip EXIF rotation procesing (optional, default to false)
     * @param waitForPictureUpload Waits until the picture is successfully uploaded, before returning the response back the the client (optional, default to false)
     * @param filters [For advanced users only] Change feature filters for robustness of feature extraction. Tweaking this parameter may affect per (optional)
     * @param options [For advanced users only] Options for preprocessing of image. (optional)
     * @param picture The multipart/form-data version of the image, in case a direct upload is used. At least one of picture or pictureURL must be present (optional)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse performAnalysisUsingPOST(String accessKey, String secretKey, Boolean storeAnalysisPicture, Boolean storeFacePictures, Boolean storeResult, Integer retentionTime, String pictureURL, String algorithmVersion, Boolean autoRotate, Boolean skipEXIF, Boolean waitForPictureUpload, List<String> filters, String options, String picture) throws ApiException {
        ApiResponse<RestResponse> localVarResp = performAnalysisUsingPOSTWithHttpInfo(accessKey, secretKey, storeAnalysisPicture, storeFacePictures, storeResult, retentionTime, pictureURL, algorithmVersion, autoRotate, skipEXIF, waitForPictureUpload, filters, options, picture);
        return localVarResp.getData();
    }

    /**
     * Perform detection on a given picture or picture URL
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param storeAnalysisPicture Boolean value indicating whether you want the picture of the analysis to be stored for later retrieval (optional, default to true)
     * @param storeFacePictures Boolean value indicating whether you want the faces inside the picture to be stored for later retrieval (optional, default to true)
     * @param storeResult Boolean value indicating whether you want the result of the analysis to be stored (optional, default to true)
     * @param retentionTime How many seconds the results should be retained in stoarage? (optional)
     * @param pictureURL The URL of the picture, assuming it is served by a third party server. Server should be accesible from the Internet or through another netwoek by VisageCloud infrastructure (optional)
     * @param algorithmVersion Algorithm version (V2 is more performant but not backward compatible) (optional, default to V2)
     * @param autoRotate Auto-rotate to find flipped or rotate faces (optional, default to false)
     * @param skipEXIF Skip EXIF rotation procesing (optional, default to false)
     * @param waitForPictureUpload Waits until the picture is successfully uploaded, before returning the response back the the client (optional, default to false)
     * @param filters [For advanced users only] Change feature filters for robustness of feature extraction. Tweaking this parameter may affect per (optional)
     * @param options [For advanced users only] Options for preprocessing of image. (optional)
     * @param picture The multipart/form-data version of the image, in case a direct upload is used. At least one of picture or pictureURL must be present (optional)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> performAnalysisUsingPOSTWithHttpInfo(String accessKey, String secretKey, Boolean storeAnalysisPicture, Boolean storeFacePictures, Boolean storeResult, Integer retentionTime, String pictureURL, String algorithmVersion, Boolean autoRotate, Boolean skipEXIF, Boolean waitForPictureUpload, List<String> filters, String options, String picture) throws ApiException {
        okhttp3.Call localVarCall = performAnalysisUsingPOSTValidateBeforeCall(accessKey, secretKey, storeAnalysisPicture, storeFacePictures, storeResult, retentionTime, pictureURL, algorithmVersion, autoRotate, skipEXIF, waitForPictureUpload, filters, options, picture, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform detection on a given picture or picture URL (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param storeAnalysisPicture Boolean value indicating whether you want the picture of the analysis to be stored for later retrieval (optional, default to true)
     * @param storeFacePictures Boolean value indicating whether you want the faces inside the picture to be stored for later retrieval (optional, default to true)
     * @param storeResult Boolean value indicating whether you want the result of the analysis to be stored (optional, default to true)
     * @param retentionTime How many seconds the results should be retained in stoarage? (optional)
     * @param pictureURL The URL of the picture, assuming it is served by a third party server. Server should be accesible from the Internet or through another netwoek by VisageCloud infrastructure (optional)
     * @param algorithmVersion Algorithm version (V2 is more performant but not backward compatible) (optional, default to V2)
     * @param autoRotate Auto-rotate to find flipped or rotate faces (optional, default to false)
     * @param skipEXIF Skip EXIF rotation procesing (optional, default to false)
     * @param waitForPictureUpload Waits until the picture is successfully uploaded, before returning the response back the the client (optional, default to false)
     * @param filters [For advanced users only] Change feature filters for robustness of feature extraction. Tweaking this parameter may affect per (optional)
     * @param options [For advanced users only] Options for preprocessing of image. (optional)
     * @param picture The multipart/form-data version of the image, in case a direct upload is used. At least one of picture or pictureURL must be present (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performAnalysisUsingPOSTAsync(String accessKey, String secretKey, Boolean storeAnalysisPicture, Boolean storeFacePictures, Boolean storeResult, Integer retentionTime, String pictureURL, String algorithmVersion, Boolean autoRotate, Boolean skipEXIF, Boolean waitForPictureUpload, List<String> filters, String options, String picture, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = performAnalysisUsingPOSTValidateBeforeCall(accessKey, secretKey, storeAnalysisPicture, storeFacePictures, storeResult, retentionTime, pictureURL, algorithmVersion, autoRotate, skipEXIF, waitForPictureUpload, filters, options, picture, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for performRecognitionUsingPOST
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param storeAnalysisPicture Boolean value indicating whether you want the picture of the analysis to be stored for later retrieval (optional, default to true)
     * @param storeFacePictures Boolean value indicating whether you want the faces inside the picture to be stored for later retrieval (optional, default to true)
     * @param storeResult Boolean value indicating whether you want the result of the analysis to be stored (optional, default to true)
     * @param retentionTime How many seconds the results should be retained in stoarage? (optional)
     * @param labels Labels associated with the given picture or picture URL (optional)
     * @param attributeFilters Filters that will be applied on the recognition operation (optional)
     * @param pictureURL The URL of the picture (optional)
     * @param algorithmVersion Algorithm version (V2 is more performant but not backward compatible) (optional, default to V2)
     * @param autoRotate Auto-rotate to find flipped or rotate faces (optional, default to false)
     * @param skipEXIFRotationProcessing Skip EXIF rotation procesing (optional, default to false)
     * @param waitForPictureUpload Waits until the picture is successfully uploaded, before returning the response back the the client (optional, default to false)
     * @param filters [For advanced users only] Change feature filters for robustness of feature extraction. Tweaking this parameter may affect per (optional)
     * @param options [For advanced users only] Options for preprocessing of image. (optional)
     * @param picture The picture itself (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performRecognitionUsingPOSTCall(String accessKey, String secretKey, String collectionId, Boolean storeAnalysisPicture, Boolean storeFacePictures, Boolean storeResult, Integer retentionTime, List<String> labels, List<String> attributeFilters, String pictureURL, String algorithmVersion, Boolean autoRotate, Boolean skipEXIFRotationProcessing, Boolean waitForPictureUpload, List<String> filters, String options, String picture, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/analysis/recognition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (picture != null) {
            localVarFormParams.put("picture", picture);
        }

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (storeAnalysisPicture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storeAnalysisPicture", storeAnalysisPicture));
        }

        if (storeFacePictures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storeFacePictures", storeFacePictures));
        }

        if (storeResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storeResult", storeResult));
        }

        if (retentionTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retentionTime", retentionTime));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        if (labels != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "labels", labels));
        }

        if (attributeFilters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "attributeFilters", attributeFilters));
        }

        if (pictureURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pictureURL", pictureURL));
        }

        if (algorithmVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("algorithmVersion", algorithmVersion));
        }

        if (autoRotate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("autoRotate", autoRotate));
        }

        if (skipEXIFRotationProcessing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipEXIF rotation processing", skipEXIFRotationProcessing));
        }

        if (waitForPictureUpload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("waitForPictureUpload", waitForPictureUpload));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters", filters));
        }

        if (options != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("options", options));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performRecognitionUsingPOSTValidateBeforeCall(String accessKey, String secretKey, String collectionId, Boolean storeAnalysisPicture, Boolean storeFacePictures, Boolean storeResult, Integer retentionTime, List<String> labels, List<String> attributeFilters, String pictureURL, String algorithmVersion, Boolean autoRotate, Boolean skipEXIFRotationProcessing, Boolean waitForPictureUpload, List<String> filters, String options, String picture, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling performRecognitionUsingPOST(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling performRecognitionUsingPOST(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling performRecognitionUsingPOST(Async)");
        }

        return performRecognitionUsingPOSTCall(accessKey, secretKey, collectionId, storeAnalysisPicture, storeFacePictures, storeResult, retentionTime, labels, attributeFilters, pictureURL, algorithmVersion, autoRotate, skipEXIFRotationProcessing, waitForPictureUpload, filters, options, picture, _callback);

    }

    /**
     * Perform labeled recognition on a given picture or picture URL
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param storeAnalysisPicture Boolean value indicating whether you want the picture of the analysis to be stored for later retrieval (optional, default to true)
     * @param storeFacePictures Boolean value indicating whether you want the faces inside the picture to be stored for later retrieval (optional, default to true)
     * @param storeResult Boolean value indicating whether you want the result of the analysis to be stored (optional, default to true)
     * @param retentionTime How many seconds the results should be retained in stoarage? (optional)
     * @param labels Labels associated with the given picture or picture URL (optional)
     * @param attributeFilters Filters that will be applied on the recognition operation (optional)
     * @param pictureURL The URL of the picture (optional)
     * @param algorithmVersion Algorithm version (V2 is more performant but not backward compatible) (optional, default to V2)
     * @param autoRotate Auto-rotate to find flipped or rotate faces (optional, default to false)
     * @param skipEXIFRotationProcessing Skip EXIF rotation procesing (optional, default to false)
     * @param waitForPictureUpload Waits until the picture is successfully uploaded, before returning the response back the the client (optional, default to false)
     * @param filters [For advanced users only] Change feature filters for robustness of feature extraction. Tweaking this parameter may affect per (optional)
     * @param options [For advanced users only] Options for preprocessing of image. (optional)
     * @param picture The picture itself (optional)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse performRecognitionUsingPOST(String accessKey, String secretKey, String collectionId, Boolean storeAnalysisPicture, Boolean storeFacePictures, Boolean storeResult, Integer retentionTime, List<String> labels, List<String> attributeFilters, String pictureURL, String algorithmVersion, Boolean autoRotate, Boolean skipEXIFRotationProcessing, Boolean waitForPictureUpload, List<String> filters, String options, String picture) throws ApiException {
        ApiResponse<RestResponse> localVarResp = performRecognitionUsingPOSTWithHttpInfo(accessKey, secretKey, collectionId, storeAnalysisPicture, storeFacePictures, storeResult, retentionTime, labels, attributeFilters, pictureURL, algorithmVersion, autoRotate, skipEXIFRotationProcessing, waitForPictureUpload, filters, options, picture);
        return localVarResp.getData();
    }

    /**
     * Perform labeled recognition on a given picture or picture URL
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param storeAnalysisPicture Boolean value indicating whether you want the picture of the analysis to be stored for later retrieval (optional, default to true)
     * @param storeFacePictures Boolean value indicating whether you want the faces inside the picture to be stored for later retrieval (optional, default to true)
     * @param storeResult Boolean value indicating whether you want the result of the analysis to be stored (optional, default to true)
     * @param retentionTime How many seconds the results should be retained in stoarage? (optional)
     * @param labels Labels associated with the given picture or picture URL (optional)
     * @param attributeFilters Filters that will be applied on the recognition operation (optional)
     * @param pictureURL The URL of the picture (optional)
     * @param algorithmVersion Algorithm version (V2 is more performant but not backward compatible) (optional, default to V2)
     * @param autoRotate Auto-rotate to find flipped or rotate faces (optional, default to false)
     * @param skipEXIFRotationProcessing Skip EXIF rotation procesing (optional, default to false)
     * @param waitForPictureUpload Waits until the picture is successfully uploaded, before returning the response back the the client (optional, default to false)
     * @param filters [For advanced users only] Change feature filters for robustness of feature extraction. Tweaking this parameter may affect per (optional)
     * @param options [For advanced users only] Options for preprocessing of image. (optional)
     * @param picture The picture itself (optional)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> performRecognitionUsingPOSTWithHttpInfo(String accessKey, String secretKey, String collectionId, Boolean storeAnalysisPicture, Boolean storeFacePictures, Boolean storeResult, Integer retentionTime, List<String> labels, List<String> attributeFilters, String pictureURL, String algorithmVersion, Boolean autoRotate, Boolean skipEXIFRotationProcessing, Boolean waitForPictureUpload, List<String> filters, String options, String picture) throws ApiException {
        okhttp3.Call localVarCall = performRecognitionUsingPOSTValidateBeforeCall(accessKey, secretKey, collectionId, storeAnalysisPicture, storeFacePictures, storeResult, retentionTime, labels, attributeFilters, pictureURL, algorithmVersion, autoRotate, skipEXIFRotationProcessing, waitForPictureUpload, filters, options, picture, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform labeled recognition on a given picture or picture URL (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionId Uniquely identified collection that can store multiple profiles (required)
     * @param storeAnalysisPicture Boolean value indicating whether you want the picture of the analysis to be stored for later retrieval (optional, default to true)
     * @param storeFacePictures Boolean value indicating whether you want the faces inside the picture to be stored for later retrieval (optional, default to true)
     * @param storeResult Boolean value indicating whether you want the result of the analysis to be stored (optional, default to true)
     * @param retentionTime How many seconds the results should be retained in stoarage? (optional)
     * @param labels Labels associated with the given picture or picture URL (optional)
     * @param attributeFilters Filters that will be applied on the recognition operation (optional)
     * @param pictureURL The URL of the picture (optional)
     * @param algorithmVersion Algorithm version (V2 is more performant but not backward compatible) (optional, default to V2)
     * @param autoRotate Auto-rotate to find flipped or rotate faces (optional, default to false)
     * @param skipEXIFRotationProcessing Skip EXIF rotation procesing (optional, default to false)
     * @param waitForPictureUpload Waits until the picture is successfully uploaded, before returning the response back the the client (optional, default to false)
     * @param filters [For advanced users only] Change feature filters for robustness of feature extraction. Tweaking this parameter may affect per (optional)
     * @param options [For advanced users only] Options for preprocessing of image. (optional)
     * @param picture The picture itself (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performRecognitionUsingPOSTAsync(String accessKey, String secretKey, String collectionId, Boolean storeAnalysisPicture, Boolean storeFacePictures, Boolean storeResult, Integer retentionTime, List<String> labels, List<String> attributeFilters, String pictureURL, String algorithmVersion, Boolean autoRotate, Boolean skipEXIFRotationProcessing, Boolean waitForPictureUpload, List<String> filters, String options, String picture, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = performRecognitionUsingPOSTValidateBeforeCall(accessKey, secretKey, collectionId, storeAnalysisPicture, storeFacePictures, storeResult, retentionTime, labels, attributeFilters, pictureURL, algorithmVersion, autoRotate, skipEXIFRotationProcessing, waitForPictureUpload, filters, options, picture, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnalysisUsingGET
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param analysisId The ID of the analysis for which the data will be retrieved (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnalysisUsingGETCall(String accessKey, String secretKey, String analysisId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/analysis/retrieve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (analysisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("analysisId", analysisId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnalysisUsingGETValidateBeforeCall(String accessKey, String secretKey, String analysisId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling retrieveAnalysisUsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling retrieveAnalysisUsingGET(Async)");
        }

        // verify the required parameter 'analysisId' is set
        if (analysisId == null) {
            throw new ApiException("Missing the required parameter 'analysisId' when calling retrieveAnalysisUsingGET(Async)");
        }

        return retrieveAnalysisUsingGETCall(accessKey, secretKey, analysisId, _callback);

    }

    /**
     * Retrieve a complete analysis object including both detection and recognition information
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param analysisId The ID of the analysis for which the data will be retrieved (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse retrieveAnalysisUsingGET(String accessKey, String secretKey, String analysisId) throws ApiException {
        ApiResponse<RestResponse> localVarResp = retrieveAnalysisUsingGETWithHttpInfo(accessKey, secretKey, analysisId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a complete analysis object including both detection and recognition information
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param analysisId The ID of the analysis for which the data will be retrieved (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> retrieveAnalysisUsingGETWithHttpInfo(String accessKey, String secretKey, String analysisId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnalysisUsingGETValidateBeforeCall(accessKey, secretKey, analysisId, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a complete analysis object including both detection and recognition information (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param analysisId The ID of the analysis for which the data will be retrieved (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnalysisUsingGETAsync(String accessKey, String secretKey, String analysisId, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnalysisUsingGETValidateBeforeCall(accessKey, secretKey, analysisId, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retriveLatestUsingGET
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param count How many records to retrieve at a time (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retriveLatestUsingGETCall(String accessKey, String secretKey, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/analysis/listLatest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retriveLatestUsingGETValidateBeforeCall(String accessKey, String secretKey, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling retriveLatestUsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling retriveLatestUsingGET(Async)");
        }

        return retriveLatestUsingGETCall(accessKey, secretKey, count, _callback);

    }

    /**
     * Retrieve the last *count* operations per current account
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param count How many records to retrieve at a time (optional, default to 100)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse retriveLatestUsingGET(String accessKey, String secretKey, Integer count) throws ApiException {
        ApiResponse<RestResponse> localVarResp = retriveLatestUsingGETWithHttpInfo(accessKey, secretKey, count);
        return localVarResp.getData();
    }

    /**
     * Retrieve the last *count* operations per current account
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param count How many records to retrieve at a time (optional, default to 100)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> retriveLatestUsingGETWithHttpInfo(String accessKey, String secretKey, Integer count) throws ApiException {
        okhttp3.Call localVarCall = retriveLatestUsingGETValidateBeforeCall(accessKey, secretKey, count, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the last *count* operations per current account (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param count How many records to retrieve at a time (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retriveLatestUsingGETAsync(String accessKey, String secretKey, Integer count, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retriveLatestUsingGETValidateBeforeCall(accessKey, secretKey, count, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
