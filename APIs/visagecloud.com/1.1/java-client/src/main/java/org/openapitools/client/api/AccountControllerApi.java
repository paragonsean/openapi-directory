/*
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.RestResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changePasswordUsingPOST
     * @param email email (required)
     * @param oldPassword oldPassword (required)
     * @param newPassword newPassword (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordUsingPOSTCall(String email, String oldPassword, String newPassword, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/account/changePassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (oldPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oldPassword", oldPassword));
        }

        if (newPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newPassword", newPassword));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePasswordUsingPOSTValidateBeforeCall(String email, String oldPassword, String newPassword, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling changePasswordUsingPOST(Async)");
        }

        // verify the required parameter 'oldPassword' is set
        if (oldPassword == null) {
            throw new ApiException("Missing the required parameter 'oldPassword' when calling changePasswordUsingPOST(Async)");
        }

        // verify the required parameter 'newPassword' is set
        if (newPassword == null) {
            throw new ApiException("Missing the required parameter 'newPassword' when calling changePasswordUsingPOST(Async)");
        }

        return changePasswordUsingPOSTCall(email, oldPassword, newPassword, _callback);

    }

    /**
     * Change password for an account using old password
     * 
     * @param email email (required)
     * @param oldPassword oldPassword (required)
     * @param newPassword newPassword (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse changePasswordUsingPOST(String email, String oldPassword, String newPassword) throws ApiException {
        ApiResponse<RestResponse> localVarResp = changePasswordUsingPOSTWithHttpInfo(email, oldPassword, newPassword);
        return localVarResp.getData();
    }

    /**
     * Change password for an account using old password
     * 
     * @param email email (required)
     * @param oldPassword oldPassword (required)
     * @param newPassword newPassword (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> changePasswordUsingPOSTWithHttpInfo(String email, String oldPassword, String newPassword) throws ApiException {
        okhttp3.Call localVarCall = changePasswordUsingPOSTValidateBeforeCall(email, oldPassword, newPassword, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change password for an account using old password (asynchronously)
     * 
     * @param email email (required)
     * @param oldPassword oldPassword (required)
     * @param newPassword newPassword (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordUsingPOSTAsync(String email, String oldPassword, String newPassword, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePasswordUsingPOSTValidateBeforeCall(email, oldPassword, newPassword, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountByAccessKeyUsingGET
     * @param accessKey accessKey (required)
     * @param secretKey secretKey (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountByAccessKeyUsingGETCall(String accessKey, String secretKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/account/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountByAccessKeyUsingGETValidateBeforeCall(String accessKey, String secretKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getAccountByAccessKeyUsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling getAccountByAccessKeyUsingGET(Async)");
        }

        return getAccountByAccessKeyUsingGETCall(accessKey, secretKey, _callback);

    }

    /**
     * Get account information by accessKey and secretKey
     * 
     * @param accessKey accessKey (required)
     * @param secretKey secretKey (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse getAccountByAccessKeyUsingGET(String accessKey, String secretKey) throws ApiException {
        ApiResponse<RestResponse> localVarResp = getAccountByAccessKeyUsingGETWithHttpInfo(accessKey, secretKey);
        return localVarResp.getData();
    }

    /**
     * Get account information by accessKey and secretKey
     * 
     * @param accessKey accessKey (required)
     * @param secretKey secretKey (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> getAccountByAccessKeyUsingGETWithHttpInfo(String accessKey, String secretKey) throws ApiException {
        okhttp3.Call localVarCall = getAccountByAccessKeyUsingGETValidateBeforeCall(accessKey, secretKey, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account information by accessKey and secretKey (asynchronously)
     * 
     * @param accessKey accessKey (required)
     * @param secretKey secretKey (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountByAccessKeyUsingGETAsync(String accessKey, String secretKey, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountByAccessKeyUsingGETValidateBeforeCall(accessKey, secretKey, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBillingPerAccountUsingGET
     * @param accessKey accessKey (required)
     * @param secretKey secretKey (required)
     * @param startDateTime startDateTime (optional)
     * @param endDateTime endDateTime (optional)
     * @param dateTemplate dateTemplate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillingPerAccountUsingGETCall(String accessKey, String secretKey, OffsetDateTime startDateTime, OffsetDateTime endDateTime, String dateTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/account/billing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (startDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime", startDateTime));
        }

        if (endDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime", endDateTime));
        }

        if (dateTemplate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTemplate", dateTemplate));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBillingPerAccountUsingGETValidateBeforeCall(String accessKey, String secretKey, OffsetDateTime startDateTime, OffsetDateTime endDateTime, String dateTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getBillingPerAccountUsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling getBillingPerAccountUsingGET(Async)");
        }

        return getBillingPerAccountUsingGETCall(accessKey, secretKey, startDateTime, endDateTime, dateTemplate, _callback);

    }

    /**
     * Get billing information by accessKey and secretKey
     * 
     * @param accessKey accessKey (required)
     * @param secretKey secretKey (required)
     * @param startDateTime startDateTime (optional)
     * @param endDateTime endDateTime (optional)
     * @param dateTemplate dateTemplate (optional)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse getBillingPerAccountUsingGET(String accessKey, String secretKey, OffsetDateTime startDateTime, OffsetDateTime endDateTime, String dateTemplate) throws ApiException {
        ApiResponse<RestResponse> localVarResp = getBillingPerAccountUsingGETWithHttpInfo(accessKey, secretKey, startDateTime, endDateTime, dateTemplate);
        return localVarResp.getData();
    }

    /**
     * Get billing information by accessKey and secretKey
     * 
     * @param accessKey accessKey (required)
     * @param secretKey secretKey (required)
     * @param startDateTime startDateTime (optional)
     * @param endDateTime endDateTime (optional)
     * @param dateTemplate dateTemplate (optional)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> getBillingPerAccountUsingGETWithHttpInfo(String accessKey, String secretKey, OffsetDateTime startDateTime, OffsetDateTime endDateTime, String dateTemplate) throws ApiException {
        okhttp3.Call localVarCall = getBillingPerAccountUsingGETValidateBeforeCall(accessKey, secretKey, startDateTime, endDateTime, dateTemplate, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get billing information by accessKey and secretKey (asynchronously)
     * 
     * @param accessKey accessKey (required)
     * @param secretKey secretKey (required)
     * @param startDateTime startDateTime (optional)
     * @param endDateTime endDateTime (optional)
     * @param dateTemplate dateTemplate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillingPerAccountUsingGETAsync(String accessKey, String secretKey, OffsetDateTime startDateTime, OffsetDateTime endDateTime, String dateTemplate, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBillingPerAccountUsingGETValidateBeforeCall(accessKey, secretKey, startDateTime, endDateTime, dateTemplate, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loginWithEmailUsingPOST
     * @param email email (required)
     * @param password password (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginWithEmailUsingPOSTCall(String email, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/account/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginWithEmailUsingPOSTValidateBeforeCall(String email, String password, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling loginWithEmailUsingPOST(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling loginWithEmailUsingPOST(Async)");
        }

        return loginWithEmailUsingPOSTCall(email, password, _callback);

    }

    /**
     * Get account information including accessKey and secretKey by email and password
     * 
     * @param email email (required)
     * @param password password (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse loginWithEmailUsingPOST(String email, String password) throws ApiException {
        ApiResponse<RestResponse> localVarResp = loginWithEmailUsingPOSTWithHttpInfo(email, password);
        return localVarResp.getData();
    }

    /**
     * Get account information including accessKey and secretKey by email and password
     * 
     * @param email email (required)
     * @param password password (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> loginWithEmailUsingPOSTWithHttpInfo(String email, String password) throws ApiException {
        okhttp3.Call localVarCall = loginWithEmailUsingPOSTValidateBeforeCall(email, password, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account information including accessKey and secretKey by email and password (asynchronously)
     * 
     * @param email email (required)
     * @param password password (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginWithEmailUsingPOSTAsync(String email, String password, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginWithEmailUsingPOSTValidateBeforeCall(email, password, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
