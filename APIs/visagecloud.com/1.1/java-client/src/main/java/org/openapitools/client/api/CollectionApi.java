/*
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RestResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CollectionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CollectionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CollectionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addCollection2UsingPOST
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionName The name of the collection that will be created (required)
     * @param preload Defined whether to preload collection (optional, default to false)
     * @param evictable Defined whether the collection can be evicted (optional, default to true)
     * @param purposes The newly declared purposes of the collection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call addCollection2UsingPOSTCall(String accessKey, String secretKey, String collectionName, Boolean preload, Boolean evictable, List<String> purposes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/collection/collection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (collectionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionName", collectionName));
        }

        if (preload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preload", preload));
        }

        if (evictable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evictable", evictable));
        }

        if (purposes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "purposes", purposes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCollection2UsingPOSTValidateBeforeCall(String accessKey, String secretKey, String collectionName, Boolean preload, Boolean evictable, List<String> purposes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling addCollection2UsingPOST(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling addCollection2UsingPOST(Async)");
        }

        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling addCollection2UsingPOST(Async)");
        }

        return addCollection2UsingPOSTCall(accessKey, secretKey, collectionName, preload, evictable, purposes, _callback);

    }

    /**
     * Create new empty collection with given name
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionName The name of the collection that will be created (required)
     * @param preload Defined whether to preload collection (optional, default to false)
     * @param evictable Defined whether the collection can be evicted (optional, default to true)
     * @param purposes The newly declared purposes of the collection (optional)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RestResponse addCollection2UsingPOST(String accessKey, String secretKey, String collectionName, Boolean preload, Boolean evictable, List<String> purposes) throws ApiException {
        ApiResponse<RestResponse> localVarResp = addCollection2UsingPOSTWithHttpInfo(accessKey, secretKey, collectionName, preload, evictable, purposes);
        return localVarResp.getData();
    }

    /**
     * Create new empty collection with given name
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionName The name of the collection that will be created (required)
     * @param preload Defined whether to preload collection (optional, default to false)
     * @param evictable Defined whether the collection can be evicted (optional, default to true)
     * @param purposes The newly declared purposes of the collection (optional)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RestResponse> addCollection2UsingPOSTWithHttpInfo(String accessKey, String secretKey, String collectionName, Boolean preload, Boolean evictable, List<String> purposes) throws ApiException {
        okhttp3.Call localVarCall = addCollection2UsingPOSTValidateBeforeCall(accessKey, secretKey, collectionName, preload, evictable, purposes, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new empty collection with given name (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionName The name of the collection that will be created (required)
     * @param preload Defined whether to preload collection (optional, default to false)
     * @param evictable Defined whether the collection can be evicted (optional, default to true)
     * @param purposes The newly declared purposes of the collection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call addCollection2UsingPOSTAsync(String accessKey, String secretKey, String collectionName, Boolean preload, Boolean evictable, List<String> purposes, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCollection2UsingPOSTValidateBeforeCall(accessKey, secretKey, collectionName, preload, evictable, purposes, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCollectionUsingPOST
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param name The name of the collection that will be created (required)
     * @param preload Defined whether to preload collection (optional, default to false)
     * @param evictable Defined whether the collection can be evicted (optional, default to true)
     * @param purposes The newly declared purposes of the collection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCollectionUsingPOSTCall(String accessKey, String secretKey, String name, Boolean preload, Boolean evictable, List<String> purposes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/collection/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarFormParams.put("accessKey", accessKey);
        }

        if (secretKey != null) {
            localVarFormParams.put("secretKey", secretKey);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (preload != null) {
            localVarFormParams.put("preload", preload);
        }

        if (evictable != null) {
            localVarFormParams.put("evictable", evictable);
        }

        if (purposes != null) {
            localVarFormParams.put("purposes", purposes);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCollectionUsingPOSTValidateBeforeCall(String accessKey, String secretKey, String name, Boolean preload, Boolean evictable, List<String> purposes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling addCollectionUsingPOST(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling addCollectionUsingPOST(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling addCollectionUsingPOST(Async)");
        }

        return addCollectionUsingPOSTCall(accessKey, secretKey, name, preload, evictable, purposes, _callback);

    }

    /**
     * Create new empty collection with given name
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param name The name of the collection that will be created (required)
     * @param preload Defined whether to preload collection (optional, default to false)
     * @param evictable Defined whether the collection can be evicted (optional, default to true)
     * @param purposes The newly declared purposes of the collection (optional)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse addCollectionUsingPOST(String accessKey, String secretKey, String name, Boolean preload, Boolean evictable, List<String> purposes) throws ApiException {
        ApiResponse<RestResponse> localVarResp = addCollectionUsingPOSTWithHttpInfo(accessKey, secretKey, name, preload, evictable, purposes);
        return localVarResp.getData();
    }

    /**
     * Create new empty collection with given name
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param name The name of the collection that will be created (required)
     * @param preload Defined whether to preload collection (optional, default to false)
     * @param evictable Defined whether the collection can be evicted (optional, default to true)
     * @param purposes The newly declared purposes of the collection (optional)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> addCollectionUsingPOSTWithHttpInfo(String accessKey, String secretKey, String name, Boolean preload, Boolean evictable, List<String> purposes) throws ApiException {
        okhttp3.Call localVarCall = addCollectionUsingPOSTValidateBeforeCall(accessKey, secretKey, name, preload, evictable, purposes, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new empty collection with given name (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param name The name of the collection that will be created (required)
     * @param preload Defined whether to preload collection (optional, default to false)
     * @param evictable Defined whether the collection can be evicted (optional, default to true)
     * @param purposes The newly declared purposes of the collection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCollectionUsingPOSTAsync(String accessKey, String secretKey, String name, Boolean preload, Boolean evictable, List<String> purposes, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCollectionUsingPOSTValidateBeforeCall(accessKey, secretKey, name, preload, evictable, purposes, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCollection2UsingDELETE
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId The id of the collection that will be removed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteCollection2UsingDELETECall(String accessKey, String secretKey, String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/collection/collection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCollection2UsingDELETEValidateBeforeCall(String accessKey, String secretKey, String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling deleteCollection2UsingDELETE(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling deleteCollection2UsingDELETE(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling deleteCollection2UsingDELETE(Async)");
        }

        return deleteCollection2UsingDELETECall(accessKey, secretKey, collectionId, _callback);

    }

    /**
     * Delete existing collection with associated profiles and faces.
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId The id of the collection that will be removed (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RestResponse deleteCollection2UsingDELETE(String accessKey, String secretKey, String collectionId) throws ApiException {
        ApiResponse<RestResponse> localVarResp = deleteCollection2UsingDELETEWithHttpInfo(accessKey, secretKey, collectionId);
        return localVarResp.getData();
    }

    /**
     * Delete existing collection with associated profiles and faces.
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId The id of the collection that will be removed (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RestResponse> deleteCollection2UsingDELETEWithHttpInfo(String accessKey, String secretKey, String collectionId) throws ApiException {
        okhttp3.Call localVarCall = deleteCollection2UsingDELETEValidateBeforeCall(accessKey, secretKey, collectionId, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete existing collection with associated profiles and faces. (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId The id of the collection that will be removed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteCollection2UsingDELETEAsync(String accessKey, String secretKey, String collectionId, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCollection2UsingDELETEValidateBeforeCall(accessKey, secretKey, collectionId, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCollectionUsingDELETE
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param id The id of the collection that will be removed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCollectionUsingDELETECall(String accessKey, String secretKey, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/collection/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCollectionUsingDELETEValidateBeforeCall(String accessKey, String secretKey, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling deleteCollectionUsingDELETE(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling deleteCollectionUsingDELETE(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCollectionUsingDELETE(Async)");
        }

        return deleteCollectionUsingDELETECall(accessKey, secretKey, id, _callback);

    }

    /**
     * Delete existing collection with associated profiles and faces.
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param id The id of the collection that will be removed (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse deleteCollectionUsingDELETE(String accessKey, String secretKey, String id) throws ApiException {
        ApiResponse<RestResponse> localVarResp = deleteCollectionUsingDELETEWithHttpInfo(accessKey, secretKey, id);
        return localVarResp.getData();
    }

    /**
     * Delete existing collection with associated profiles and faces.
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param id The id of the collection that will be removed (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> deleteCollectionUsingDELETEWithHttpInfo(String accessKey, String secretKey, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteCollectionUsingDELETEValidateBeforeCall(accessKey, secretKey, id, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete existing collection with associated profiles and faces. (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param id The id of the collection that will be removed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCollectionUsingDELETEAsync(String accessKey, String secretKey, String id, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCollectionUsingDELETEValidateBeforeCall(accessKey, secretKey, id, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportCSVUsingGET
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionId The id of the collection for which the data will be retrieved (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportCSVUsingGETCall(String accessKey, String secretKey, String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/collection/export/csv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportCSVUsingGETValidateBeforeCall(String accessKey, String secretKey, String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling exportCSVUsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling exportCSVUsingGET(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling exportCSVUsingGET(Async)");
        }

        return exportCSVUsingGETCall(accessKey, secretKey, collectionId, _callback);

    }

    /**
     * Retrieve collection content for data analysis.
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionId The id of the collection for which the data will be retrieved (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Object exportCSVUsingGET(String accessKey, String secretKey, String collectionId) throws ApiException {
        ApiResponse<Object> localVarResp = exportCSVUsingGETWithHttpInfo(accessKey, secretKey, collectionId);
        return localVarResp.getData();
    }

    /**
     * Retrieve collection content for data analysis.
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionId The id of the collection for which the data will be retrieved (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> exportCSVUsingGETWithHttpInfo(String accessKey, String secretKey, String collectionId) throws ApiException {
        okhttp3.Call localVarCall = exportCSVUsingGETValidateBeforeCall(accessKey, secretKey, collectionId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve collection content for data analysis. (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionId The id of the collection for which the data will be retrieved (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportCSVUsingGETAsync(String accessKey, String secretKey, String collectionId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportCSVUsingGETValidateBeforeCall(accessKey, secretKey, collectionId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllCollectionProfilesUsingGET
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The collection that contains the profile (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCollectionProfilesUsingGETCall(String accessKey, String secretKey, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/collection/{id}/profile"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCollectionProfilesUsingGETValidateBeforeCall(String accessKey, String secretKey, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getAllCollectionProfilesUsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling getAllCollectionProfilesUsingGET(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAllCollectionProfilesUsingGET(Async)");
        }

        return getAllCollectionProfilesUsingGETCall(accessKey, secretKey, id, _callback);

    }

    /**
     * Gets all the profiles associated to a collection
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The collection that contains the profile (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse getAllCollectionProfilesUsingGET(String accessKey, String secretKey, String id) throws ApiException {
        ApiResponse<RestResponse> localVarResp = getAllCollectionProfilesUsingGETWithHttpInfo(accessKey, secretKey, id);
        return localVarResp.getData();
    }

    /**
     * Gets all the profiles associated to a collection
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The collection that contains the profile (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> getAllCollectionProfilesUsingGETWithHttpInfo(String accessKey, String secretKey, String id) throws ApiException {
        okhttp3.Call localVarCall = getAllCollectionProfilesUsingGETValidateBeforeCall(accessKey, secretKey, id, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all the profiles associated to a collection (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The collection that contains the profile (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCollectionProfilesUsingGETAsync(String accessKey, String secretKey, String id, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCollectionProfilesUsingGETValidateBeforeCall(accessKey, secretKey, id, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllCollections2UsingGET
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getAllCollections2UsingGETCall(String accessKey, String secretKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/collection/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCollections2UsingGETValidateBeforeCall(String accessKey, String secretKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getAllCollections2UsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling getAllCollections2UsingGET(Async)");
        }

        return getAllCollections2UsingGETCall(accessKey, secretKey, _callback);

    }

    /**
     * Retrieve all collections
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RestResponse getAllCollections2UsingGET(String accessKey, String secretKey) throws ApiException {
        ApiResponse<RestResponse> localVarResp = getAllCollections2UsingGETWithHttpInfo(accessKey, secretKey);
        return localVarResp.getData();
    }

    /**
     * Retrieve all collections
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RestResponse> getAllCollections2UsingGETWithHttpInfo(String accessKey, String secretKey) throws ApiException {
        okhttp3.Call localVarCall = getAllCollections2UsingGETValidateBeforeCall(accessKey, secretKey, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all collections (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getAllCollections2UsingGETAsync(String accessKey, String secretKey, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCollections2UsingGETValidateBeforeCall(accessKey, secretKey, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllCollectionsUsingGET
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCollectionsUsingGETCall(String accessKey, String secretKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/collection/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCollectionsUsingGETValidateBeforeCall(String accessKey, String secretKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getAllCollectionsUsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling getAllCollectionsUsingGET(Async)");
        }

        return getAllCollectionsUsingGETCall(accessKey, secretKey, _callback);

    }

    /**
     * Retrieve all collections
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse getAllCollectionsUsingGET(String accessKey, String secretKey) throws ApiException {
        ApiResponse<RestResponse> localVarResp = getAllCollectionsUsingGETWithHttpInfo(accessKey, secretKey);
        return localVarResp.getData();
    }

    /**
     * Retrieve all collections
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> getAllCollectionsUsingGETWithHttpInfo(String accessKey, String secretKey) throws ApiException {
        okhttp3.Call localVarCall = getAllCollectionsUsingGETValidateBeforeCall(accessKey, secretKey, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all collections (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCollectionsUsingGETAsync(String accessKey, String secretKey, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCollectionsUsingGETValidateBeforeCall(accessKey, secretKey, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollection2UsingGET
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionId The id of the collection for which the data will be retrieved (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getCollection2UsingGETCall(String accessKey, String secretKey, String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/collection/collection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollection2UsingGETValidateBeforeCall(String accessKey, String secretKey, String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getCollection2UsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling getCollection2UsingGET(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getCollection2UsingGET(Async)");
        }

        return getCollection2UsingGETCall(accessKey, secretKey, collectionId, _callback);

    }

    /**
     * Retrieve existing collection content
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionId The id of the collection for which the data will be retrieved (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RestResponse getCollection2UsingGET(String accessKey, String secretKey, String collectionId) throws ApiException {
        ApiResponse<RestResponse> localVarResp = getCollection2UsingGETWithHttpInfo(accessKey, secretKey, collectionId);
        return localVarResp.getData();
    }

    /**
     * Retrieve existing collection content
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionId The id of the collection for which the data will be retrieved (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RestResponse> getCollection2UsingGETWithHttpInfo(String accessKey, String secretKey, String collectionId) throws ApiException {
        okhttp3.Call localVarCall = getCollection2UsingGETValidateBeforeCall(accessKey, secretKey, collectionId, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve existing collection content (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param collectionId The id of the collection for which the data will be retrieved (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getCollection2UsingGETAsync(String accessKey, String secretKey, String collectionId, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollection2UsingGETValidateBeforeCall(accessKey, secretKey, collectionId, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionUsingGET
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the collection for which the data will be retrieved (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionUsingGETCall(String accessKey, String secretKey, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/collection/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionUsingGETValidateBeforeCall(String accessKey, String secretKey, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getCollectionUsingGET(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling getCollectionUsingGET(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCollectionUsingGET(Async)");
        }

        return getCollectionUsingGETCall(accessKey, secretKey, id, _callback);

    }

    /**
     * Retrieve existing collection content
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the collection for which the data will be retrieved (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse getCollectionUsingGET(String accessKey, String secretKey, String id) throws ApiException {
        ApiResponse<RestResponse> localVarResp = getCollectionUsingGETWithHttpInfo(accessKey, secretKey, id);
        return localVarResp.getData();
    }

    /**
     * Retrieve existing collection content
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the collection for which the data will be retrieved (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> getCollectionUsingGETWithHttpInfo(String accessKey, String secretKey, String id) throws ApiException {
        okhttp3.Call localVarCall = getCollectionUsingGETValidateBeforeCall(accessKey, secretKey, id, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve existing collection content (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey or readOnlyKey provided by VisageCloud (required)
     * @param id The id of the collection for which the data will be retrieved (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionUsingGETAsync(String accessKey, String secretKey, String id, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionUsingGETValidateBeforeCall(accessKey, secretKey, id, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repurposeCollectionUsingPUT
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId The id of the collection for which the data will be retrieved (required)
     * @param purposes The newly declared purposes of the collection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call repurposeCollectionUsingPUTCall(String accessKey, String secretKey, String collectionId, List<String> purposes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/collection/purpose";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        if (purposes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "purposes", purposes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call repurposeCollectionUsingPUTValidateBeforeCall(String accessKey, String secretKey, String collectionId, List<String> purposes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling repurposeCollectionUsingPUT(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling repurposeCollectionUsingPUT(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling repurposeCollectionUsingPUT(Async)");
        }

        // verify the required parameter 'purposes' is set
        if (purposes == null) {
            throw new ApiException("Missing the required parameter 'purposes' when calling repurposeCollectionUsingPUT(Async)");
        }

        return repurposeCollectionUsingPUTCall(accessKey, secretKey, collectionId, purposes, _callback);

    }

    /**
     * Change purpose of existing collection
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId The id of the collection for which the data will be retrieved (required)
     * @param purposes The newly declared purposes of the collection (required)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RestResponse repurposeCollectionUsingPUT(String accessKey, String secretKey, String collectionId, List<String> purposes) throws ApiException {
        ApiResponse<RestResponse> localVarResp = repurposeCollectionUsingPUTWithHttpInfo(accessKey, secretKey, collectionId, purposes);
        return localVarResp.getData();
    }

    /**
     * Change purpose of existing collection
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId The id of the collection for which the data will be retrieved (required)
     * @param purposes The newly declared purposes of the collection (required)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RestResponse> repurposeCollectionUsingPUTWithHttpInfo(String accessKey, String secretKey, String collectionId, List<String> purposes) throws ApiException {
        okhttp3.Call localVarCall = repurposeCollectionUsingPUTValidateBeforeCall(accessKey, secretKey, collectionId, purposes, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change purpose of existing collection (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param collectionId The id of the collection for which the data will be retrieved (required)
     * @param purposes The newly declared purposes of the collection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call repurposeCollectionUsingPUTAsync(String accessKey, String secretKey, String collectionId, List<String> purposes, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = repurposeCollectionUsingPUTValidateBeforeCall(accessKey, secretKey, collectionId, purposes, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCollection2UsingPOST
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param id The id of the collection that will be updated (required)
     * @param name The name of the collection that will be updated (optional)
     * @param purposes The newly declared purposes of the collection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateCollection2UsingPOSTCall(String accessKey, String secretKey, String id, String name, List<String> purposes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/collection/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (purposes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "purposes", purposes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCollection2UsingPOSTValidateBeforeCall(String accessKey, String secretKey, String id, String name, List<String> purposes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling updateCollection2UsingPOST(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling updateCollection2UsingPOST(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCollection2UsingPOST(Async)");
        }

        return updateCollection2UsingPOSTCall(accessKey, secretKey, id, name, purposes, _callback);

    }

    /**
     * Update an existing collection with a given id
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param id The id of the collection that will be updated (required)
     * @param name The name of the collection that will be updated (optional)
     * @param purposes The newly declared purposes of the collection (optional)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RestResponse updateCollection2UsingPOST(String accessKey, String secretKey, String id, String name, List<String> purposes) throws ApiException {
        ApiResponse<RestResponse> localVarResp = updateCollection2UsingPOSTWithHttpInfo(accessKey, secretKey, id, name, purposes);
        return localVarResp.getData();
    }

    /**
     * Update an existing collection with a given id
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param id The id of the collection that will be updated (required)
     * @param name The name of the collection that will be updated (optional)
     * @param purposes The newly declared purposes of the collection (optional)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RestResponse> updateCollection2UsingPOSTWithHttpInfo(String accessKey, String secretKey, String id, String name, List<String> purposes) throws ApiException {
        okhttp3.Call localVarCall = updateCollection2UsingPOSTValidateBeforeCall(accessKey, secretKey, id, name, purposes, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing collection with a given id (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param id The id of the collection that will be updated (required)
     * @param name The name of the collection that will be updated (optional)
     * @param purposes The newly declared purposes of the collection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateCollection2UsingPOSTAsync(String accessKey, String secretKey, String id, String name, List<String> purposes, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCollection2UsingPOSTValidateBeforeCall(accessKey, secretKey, id, name, purposes, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCollectionUsingPATCH
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param id The id of the collection that will be updated (required)
     * @param name The name of the collection that will be updated (optional)
     * @param purposes The newly declared purposes of the collection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCollectionUsingPATCHCall(String accessKey, String secretKey, String id, String name, List<String> purposes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v1.1/collection/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (secretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secretKey", secretKey));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (purposes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "purposes", purposes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCollectionUsingPATCHValidateBeforeCall(String accessKey, String secretKey, String id, String name, List<String> purposes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling updateCollectionUsingPATCH(Async)");
        }

        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling updateCollectionUsingPATCH(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCollectionUsingPATCH(Async)");
        }

        return updateCollectionUsingPATCHCall(accessKey, secretKey, id, name, purposes, _callback);

    }

    /**
     * Update an existing collection with a given id
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param id The id of the collection that will be updated (required)
     * @param name The name of the collection that will be updated (optional)
     * @param purposes The newly declared purposes of the collection (optional)
     * @return RestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RestResponse updateCollectionUsingPATCH(String accessKey, String secretKey, String id, String name, List<String> purposes) throws ApiException {
        ApiResponse<RestResponse> localVarResp = updateCollectionUsingPATCHWithHttpInfo(accessKey, secretKey, id, name, purposes);
        return localVarResp.getData();
    }

    /**
     * Update an existing collection with a given id
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param id The id of the collection that will be updated (required)
     * @param name The name of the collection that will be updated (optional)
     * @param purposes The newly declared purposes of the collection (optional)
     * @return ApiResponse&lt;RestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResponse> updateCollectionUsingPATCHWithHttpInfo(String accessKey, String secretKey, String id, String name, List<String> purposes) throws ApiException {
        okhttp3.Call localVarCall = updateCollectionUsingPATCHValidateBeforeCall(accessKey, secretKey, id, name, purposes, null);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing collection with a given id (asynchronously)
     * 
     * @param accessKey The accessKey provided by VisageCloud (required)
     * @param secretKey The secretKey provided by VisageCloud (required)
     * @param id The id of the collection that will be updated (required)
     * @param name The name of the collection that will be updated (optional)
     * @param purposes The newly declared purposes of the collection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCollectionUsingPATCHAsync(String accessKey, String secretKey, String id, String name, List<String> purposes, final ApiCallback<RestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCollectionUsingPATCHValidateBeforeCall(accessKey, secretKey, id, name, purposes, _callback);
        Type localVarReturnType = new TypeToken<RestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
