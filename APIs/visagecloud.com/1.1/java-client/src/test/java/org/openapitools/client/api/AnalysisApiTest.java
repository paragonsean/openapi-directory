/*
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RestResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnalysisApi
 */
@Disabled
public class AnalysisApiTest {

    private final AnalysisApi api = new AnalysisApi();

    /**
     * Compare several faces identified by faceHash, without depending on mapping faces to profiles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void compareFacesUsingGETTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        List<String> faceHashes = null;
        Boolean showDetails = null;
        RestResponse response = api.compareFacesUsingGET(accessKey, secretKey, faceHashes, showDetails);
        // TODO: test validations
    }

    /**
     * Perform detection on a given picture or picture URL
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performAnalysisUsingPOSTTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        Boolean storeAnalysisPicture = null;
        Boolean storeFacePictures = null;
        Boolean storeResult = null;
        Integer retentionTime = null;
        String pictureURL = null;
        String algorithmVersion = null;
        Boolean autoRotate = null;
        Boolean skipEXIF = null;
        Boolean waitForPictureUpload = null;
        List<String> filters = null;
        String options = null;
        String picture = null;
        RestResponse response = api.performAnalysisUsingPOST(accessKey, secretKey, storeAnalysisPicture, storeFacePictures, storeResult, retentionTime, pictureURL, algorithmVersion, autoRotate, skipEXIF, waitForPictureUpload, filters, options, picture);
        // TODO: test validations
    }

    /**
     * Perform labeled recognition on a given picture or picture URL
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performRecognitionUsingPOSTTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String collectionId = null;
        Boolean storeAnalysisPicture = null;
        Boolean storeFacePictures = null;
        Boolean storeResult = null;
        Integer retentionTime = null;
        List<String> labels = null;
        List<String> attributeFilters = null;
        String pictureURL = null;
        String algorithmVersion = null;
        Boolean autoRotate = null;
        Boolean skipEXIFRotationProcessing = null;
        Boolean waitForPictureUpload = null;
        List<String> filters = null;
        String options = null;
        String picture = null;
        RestResponse response = api.performRecognitionUsingPOST(accessKey, secretKey, collectionId, storeAnalysisPicture, storeFacePictures, storeResult, retentionTime, labels, attributeFilters, pictureURL, algorithmVersion, autoRotate, skipEXIFRotationProcessing, waitForPictureUpload, filters, options, picture);
        // TODO: test validations
    }

    /**
     * Retrieve a complete analysis object including both detection and recognition information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnalysisUsingGETTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String analysisId = null;
        RestResponse response = api.retrieveAnalysisUsingGET(accessKey, secretKey, analysisId);
        // TODO: test validations
    }

    /**
     * Retrieve the last *count* operations per current account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retriveLatestUsingGETTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        Integer count = null;
        RestResponse response = api.retriveLatestUsingGET(accessKey, secretKey, count);
        // TODO: test validations
    }

}
