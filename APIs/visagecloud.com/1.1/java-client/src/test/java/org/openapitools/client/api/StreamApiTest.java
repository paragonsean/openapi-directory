/*
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RestResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StreamApi
 */
@Disabled
public class StreamApiTest {

    private final StreamApi api = new StreamApi();

    /**
     * Create new stream with given name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addStreamUsingPOSTTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String name = null;
        String url = null;
        String method = null;
        String username = null;
        String password = null;
        Boolean skipFramesWithNoFaces = null;
        Integer retentionTime = null;
        Boolean storeOriginalFrames = null;
        Boolean storeAttendanceFaces = null;
        Boolean storeAttendanceFrames = null;
        Boolean isActive = null;
        List<String> associatedCollections = null;
        String attributes = null;
        RestResponse response = api.addStreamUsingPOST(accessKey, secretKey, name, url, method, username, password, skipFramesWithNoFaces, retentionTime, storeOriginalFrames, storeAttendanceFaces, storeAttendanceFrames, isActive, associatedCollections, attributes);
        // TODO: test validations
    }

    /**
     * Cleanup frames older than specified timeframe
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cleanupStreamUsingPATCHTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String streamId = null;
        Integer interval = null;
        RestResponse response = api.cleanupStreamUsingPATCH(accessKey, secretKey, streamId, interval);
        // TODO: test validations
    }

    /**
     * Get individual frame image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFrameImageUsingGETTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String streamId = null;
        Long timestamp = null;
        List<byte[]> response = api.getFrameImageUsingGET(accessKey, secretKey, streamId, timestamp);
        // TODO: test validations
    }

    /**
     * Get last N recognized individuals from stream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLastNAttedanceUsingGETTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        List<String> streamIds = null;
        Integer count = null;
        RestResponse response = api.getLastNAttedanceUsingGET(accessKey, secretKey, streamIds, count);
        // TODO: test validations
    }

    /**
     * Get last processed N frames from stream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLastNFramesUsingGETTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String streamId = null;
        Integer count = null;
        String collectionId = null;
        List<String> labels = null;
        List<String> attributeFilters = null;
        RestResponse response = api.getLastNFramesUsingGET(accessKey, secretKey, streamId, count, collectionId, labels, attributeFilters);
        // TODO: test validations
    }

    /**
     * Get an existing stream with a given ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamUsingGETTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String streamId = null;
        RestResponse response = api.getStreamUsingGET(accessKey, secretKey, streamId);
        // TODO: test validations
    }

    /**
     * Delete existing stream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeStreamUsingDELETETest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String id = null;
        RestResponse response = api.removeStreamUsingDELETE(accessKey, secretKey, id);
        // TODO: test validations
    }

    /**
     * Start existing stream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startStreamUsingPATCHTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String streamId = null;
        RestResponse response = api.startStreamUsingPATCH(accessKey, secretKey, streamId);
        // TODO: test validations
    }

    /**
     * Stop existing stream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopStreamUsingPATCHTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String streamId = null;
        RestResponse response = api.stopStreamUsingPATCH(accessKey, secretKey, streamId);
        // TODO: test validations
    }

    /**
     * Show status of all streams from account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamsByAccountUsingGETTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        RestResponse response = api.streamsByAccountUsingGET(accessKey, secretKey);
        // TODO: test validations
    }

    /**
     * Update an existing stream with a given ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStreamUsingPATCHTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String streamId = null;
        String name = null;
        String url = null;
        String method = null;
        String username = null;
        String password = null;
        Boolean skipFramesWithNoFaces = null;
        Integer retentionTime = null;
        Boolean storeOriginalFrames = null;
        Boolean storeAttendanceFaces = null;
        Boolean storeAttendanceFrames = null;
        Boolean isActive = null;
        List<String> associatedCollections = null;
        String attributes = null;
        RestResponse response = api.updateStreamUsingPATCH(accessKey, secretKey, streamId, name, url, method, username, password, skipFramesWithNoFaces, retentionTime, storeOriginalFrames, storeAttendanceFaces, storeAttendanceFrames, isActive, associatedCollections, attributes);
        // TODO: test validations
    }

}
