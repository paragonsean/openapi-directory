/*
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RestResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnalyticsForPresenceAndAudienceApi
 */
@Disabled
public class AnalyticsForPresenceAndAudienceApiTest {

    private final AnalyticsForPresenceAndAudienceApi api = new AnalyticsForPresenceAndAudienceApi();

    /**
     * Count individuals in streams or collections
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void counterUsingPOSTTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        List<String> collectionIds = null;
        List<String> streamIds = null;
        OffsetDateTime startDateTime = null;
        OffsetDateTime endDateTime = null;
        Long visitDuration = null;
        Integer maxIterations = null;
        Integer maxBatchIterations = null;
        Integer minNeighborsMergedPerIteration = null;
        Double mergingStep = null;
        Boolean shuffling = null;
        RestResponse response = api.counterUsingPOST(accessKey, secretKey, collectionIds, streamIds, startDateTime, endDateTime, visitDuration, maxIterations, maxBatchIterations, minNeighborsMergedPerIteration, mergingStep, shuffling);
        // TODO: test validations
    }

    /**
     * Show audience (based on number of occurrences of each person) breakdown per declared attribute (age, gender).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void presenceTimeseriesUsingPOSTTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        List<String> attributes = null;
        List<String> streamIds = null;
        OffsetDateTime startDateTime = null;
        OffsetDateTime endDateTime = null;
        Long step = null;
        RestResponse response = api.presenceTimeseriesUsingPOST(accessKey, secretKey, attributes, streamIds, startDateTime, endDateTime, step);
        // TODO: test validations
    }

    /**
     * Show presence (based on number of occurences of each face) breakdown per declared attribute (age, gender)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void presenceTotalUsingPOSTTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        List<String> streamIds = null;
        List<String> attributes = null;
        OffsetDateTime startDateTime = null;
        OffsetDateTime endDateTime = null;
        RestResponse response = api.presenceTotalUsingPOST(accessKey, secretKey, streamIds, attributes, startDateTime, endDateTime);
        // TODO: test validations
    }

}
