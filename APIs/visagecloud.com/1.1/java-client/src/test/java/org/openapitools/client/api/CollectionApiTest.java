/*
 * VisageCloud
 * Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: office@visagecloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RestResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CollectionApi
 */
@Disabled
public class CollectionApiTest {

    private final CollectionApi api = new CollectionApi();

    /**
     * Create new empty collection with given name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCollection2UsingPOSTTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String collectionName = null;
        Boolean preload = null;
        Boolean evictable = null;
        List<String> purposes = null;
        RestResponse response = api.addCollection2UsingPOST(accessKey, secretKey, collectionName, preload, evictable, purposes);
        // TODO: test validations
    }

    /**
     * Create new empty collection with given name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCollectionUsingPOSTTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String name = null;
        Boolean preload = null;
        Boolean evictable = null;
        List<String> purposes = null;
        RestResponse response = api.addCollectionUsingPOST(accessKey, secretKey, name, preload, evictable, purposes);
        // TODO: test validations
    }

    /**
     * Delete existing collection with associated profiles and faces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCollection2UsingDELETETest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String collectionId = null;
        RestResponse response = api.deleteCollection2UsingDELETE(accessKey, secretKey, collectionId);
        // TODO: test validations
    }

    /**
     * Delete existing collection with associated profiles and faces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCollectionUsingDELETETest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String id = null;
        RestResponse response = api.deleteCollectionUsingDELETE(accessKey, secretKey, id);
        // TODO: test validations
    }

    /**
     * Retrieve collection content for data analysis.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportCSVUsingGETTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String collectionId = null;
        Object response = api.exportCSVUsingGET(accessKey, secretKey, collectionId);
        // TODO: test validations
    }

    /**
     * Gets all the profiles associated to a collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCollectionProfilesUsingGETTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String id = null;
        RestResponse response = api.getAllCollectionProfilesUsingGET(accessKey, secretKey, id);
        // TODO: test validations
    }

    /**
     * Retrieve all collections
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCollections2UsingGETTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        RestResponse response = api.getAllCollections2UsingGET(accessKey, secretKey);
        // TODO: test validations
    }

    /**
     * Retrieve all collections
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCollectionsUsingGETTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        RestResponse response = api.getAllCollectionsUsingGET(accessKey, secretKey);
        // TODO: test validations
    }

    /**
     * Retrieve existing collection content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollection2UsingGETTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String collectionId = null;
        RestResponse response = api.getCollection2UsingGET(accessKey, secretKey, collectionId);
        // TODO: test validations
    }

    /**
     * Retrieve existing collection content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollectionUsingGETTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String id = null;
        RestResponse response = api.getCollectionUsingGET(accessKey, secretKey, id);
        // TODO: test validations
    }

    /**
     * Change purpose of existing collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repurposeCollectionUsingPUTTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String collectionId = null;
        List<String> purposes = null;
        RestResponse response = api.repurposeCollectionUsingPUT(accessKey, secretKey, collectionId, purposes);
        // TODO: test validations
    }

    /**
     * Update an existing collection with a given id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCollection2UsingPOSTTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String id = null;
        String name = null;
        List<String> purposes = null;
        RestResponse response = api.updateCollection2UsingPOST(accessKey, secretKey, id, name, purposes);
        // TODO: test validations
    }

    /**
     * Update an existing collection with a given id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCollectionUsingPATCHTest() throws ApiException {
        String accessKey = null;
        String secretKey = null;
        String id = null;
        String name = null;
        List<String> purposes = null;
        RestResponse response = api.updateCollectionUsingPATCH(accessKey, secretKey, id, name, purposes);
        // TODO: test validations
    }

}
