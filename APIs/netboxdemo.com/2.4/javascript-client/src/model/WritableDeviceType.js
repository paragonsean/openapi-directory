/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WritableDeviceType model module.
 * @module model/WritableDeviceType
 * @version 2.4
 */
class WritableDeviceType {
    /**
     * Constructs a new <code>WritableDeviceType</code>.
     * @alias module:model/WritableDeviceType
     * @param manufacturer {Number} 
     * @param model {String} 
     * @param slug {String} 
     */
    constructor(manufacturer, model, slug) { 
        
        WritableDeviceType.initialize(this, manufacturer, model, slug);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, manufacturer, model, slug) { 
        obj['manufacturer'] = manufacturer;
        obj['model'] = model;
        obj['slug'] = slug;
    }

    /**
     * Constructs a <code>WritableDeviceType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableDeviceType} obj Optional instance to populate.
     * @return {module:model/WritableDeviceType} The populated <code>WritableDeviceType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableDeviceType();

            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('instance_count')) {
                obj['instance_count'] = ApiClient.convertToType(data['instance_count'], 'Number');
            }
            if (data.hasOwnProperty('interface_ordering')) {
                obj['interface_ordering'] = ApiClient.convertToType(data['interface_ordering'], 'Number');
            }
            if (data.hasOwnProperty('is_console_server')) {
                obj['is_console_server'] = ApiClient.convertToType(data['is_console_server'], 'Boolean');
            }
            if (data.hasOwnProperty('is_full_depth')) {
                obj['is_full_depth'] = ApiClient.convertToType(data['is_full_depth'], 'Boolean');
            }
            if (data.hasOwnProperty('is_network_device')) {
                obj['is_network_device'] = ApiClient.convertToType(data['is_network_device'], 'Boolean');
            }
            if (data.hasOwnProperty('is_pdu')) {
                obj['is_pdu'] = ApiClient.convertToType(data['is_pdu'], 'Boolean');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('manufacturer')) {
                obj['manufacturer'] = ApiClient.convertToType(data['manufacturer'], 'Number');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('part_number')) {
                obj['part_number'] = ApiClient.convertToType(data['part_number'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('subdevice_role')) {
                obj['subdevice_role'] = ApiClient.convertToType(data['subdevice_role'], 'Boolean');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('u_height')) {
                obj['u_height'] = ApiClient.convertToType(data['u_height'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableDeviceType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableDeviceType</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableDeviceType.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['part_number'] && !(typeof data['part_number'] === 'string' || data['part_number'] instanceof String)) {
            throw new Error("Expected the field `part_number` to be a primitive type in the JSON string but got " + data['part_number']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

WritableDeviceType.RequiredProperties = ["manufacturer", "model", "slug"];

/**
 * @member {String} comments
 */
WritableDeviceType.prototype['comments'] = undefined;

/**
 * @member {Date} created
 */
WritableDeviceType.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
WritableDeviceType.prototype['custom_fields'] = undefined;

/**
 * @member {Number} id
 */
WritableDeviceType.prototype['id'] = undefined;

/**
 * @member {Number} instance_count
 */
WritableDeviceType.prototype['instance_count'] = undefined;

/**
 * @member {module:model/WritableDeviceType.InterfaceOrderingEnum} interface_ordering
 */
WritableDeviceType.prototype['interface_ordering'] = undefined;

/**
 * This type of device has console server ports
 * @member {Boolean} is_console_server
 */
WritableDeviceType.prototype['is_console_server'] = undefined;

/**
 * Device consumes both front and rear rack faces
 * @member {Boolean} is_full_depth
 */
WritableDeviceType.prototype['is_full_depth'] = undefined;

/**
 * This type of device has network interfaces
 * @member {Boolean} is_network_device
 */
WritableDeviceType.prototype['is_network_device'] = undefined;

/**
 * This type of device has power outlets
 * @member {Boolean} is_pdu
 */
WritableDeviceType.prototype['is_pdu'] = undefined;

/**
 * @member {Date} last_updated
 */
WritableDeviceType.prototype['last_updated'] = undefined;

/**
 * @member {Number} manufacturer
 */
WritableDeviceType.prototype['manufacturer'] = undefined;

/**
 * @member {String} model
 */
WritableDeviceType.prototype['model'] = undefined;

/**
 * Discrete part number (optional)
 * @member {String} part_number
 */
WritableDeviceType.prototype['part_number'] = undefined;

/**
 * @member {String} slug
 */
WritableDeviceType.prototype['slug'] = undefined;

/**
 * Parent devices house child devices in device bays. Select \"None\" if this device type is neither a parent nor a child.
 * @member {Boolean} subdevice_role
 */
WritableDeviceType.prototype['subdevice_role'] = undefined;

/**
 * @member {Array.<String>} tags
 */
WritableDeviceType.prototype['tags'] = undefined;

/**
 * @member {Number} u_height
 */
WritableDeviceType.prototype['u_height'] = undefined;





/**
 * Allowed values for the <code>interface_ordering</code> property.
 * @enum {Number}
 * @readonly
 */
WritableDeviceType['InterfaceOrderingEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2
};



export default WritableDeviceType;

