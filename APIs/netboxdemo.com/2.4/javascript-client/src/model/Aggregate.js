/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedRIR from './NestedRIR';

/**
 * The Aggregate model module.
 * @module model/Aggregate
 * @version 2.4
 */
class Aggregate {
    /**
     * Constructs a new <code>Aggregate</code>.
     * @alias module:model/Aggregate
     * @param prefix {String} 
     * @param rir {module:model/NestedRIR} 
     */
    constructor(prefix, rir) { 
        
        Aggregate.initialize(this, prefix, rir);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, prefix, rir) { 
        obj['prefix'] = prefix;
        obj['rir'] = rir;
    }

    /**
     * Constructs a <code>Aggregate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Aggregate} obj Optional instance to populate.
     * @return {module:model/Aggregate} The populated <code>Aggregate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Aggregate();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('date_added')) {
                obj['date_added'] = ApiClient.convertToType(data['date_added'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('family')) {
                obj['family'] = ApiClient.convertToType(data['family'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('rir')) {
                obj['rir'] = NestedRIR.constructFromObject(data['rir']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Aggregate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Aggregate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Aggregate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }
        // validate the optional field `rir`
        if (data['rir']) { // data not null
          NestedRIR.validateJSON(data['rir']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

Aggregate.RequiredProperties = ["prefix", "rir"];

/**
 * @member {Date} created
 */
Aggregate.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
Aggregate.prototype['custom_fields'] = undefined;

/**
 * @member {Date} date_added
 */
Aggregate.prototype['date_added'] = undefined;

/**
 * @member {String} description
 */
Aggregate.prototype['description'] = undefined;

/**
 * @member {module:model/Aggregate.FamilyEnum} family
 */
Aggregate.prototype['family'] = undefined;

/**
 * @member {Number} id
 */
Aggregate.prototype['id'] = undefined;

/**
 * @member {Date} last_updated
 */
Aggregate.prototype['last_updated'] = undefined;

/**
 * @member {String} prefix
 */
Aggregate.prototype['prefix'] = undefined;

/**
 * @member {module:model/NestedRIR} rir
 */
Aggregate.prototype['rir'] = undefined;

/**
 * @member {Array.<String>} tags
 */
Aggregate.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>family</code> property.
 * @enum {Number}
 * @readonly
 */
Aggregate['FamilyEnum'] = {

    /**
     * value: 4
     * @const
     */
    "4": 4,

    /**
     * value: 6
     * @const
     */
    "6": 6
};



export default Aggregate;

