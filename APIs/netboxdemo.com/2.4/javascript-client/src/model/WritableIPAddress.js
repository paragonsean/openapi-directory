/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WritableIPAddress model module.
 * @module model/WritableIPAddress
 * @version 2.4
 */
class WritableIPAddress {
    /**
     * Constructs a new <code>WritableIPAddress</code>.
     * @alias module:model/WritableIPAddress
     * @param address {String} IPv4 or IPv6 address (with mask)
     * @param natOutside {Number} 
     */
    constructor(address, natOutside) { 
        
        WritableIPAddress.initialize(this, address, natOutside);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, natOutside) { 
        obj['address'] = address;
        obj['nat_outside'] = natOutside;
    }

    /**
     * Constructs a <code>WritableIPAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableIPAddress} obj Optional instance to populate.
     * @return {module:model/WritableIPAddress} The populated <code>WritableIPAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableIPAddress();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('family')) {
                obj['family'] = ApiClient.convertToType(data['family'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('interface')) {
                obj['interface'] = ApiClient.convertToType(data['interface'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('nat_inside')) {
                obj['nat_inside'] = ApiClient.convertToType(data['nat_inside'], 'Number');
            }
            if (data.hasOwnProperty('nat_outside')) {
                obj['nat_outside'] = ApiClient.convertToType(data['nat_outside'], 'Number');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('tenant')) {
                obj['tenant'] = ApiClient.convertToType(data['tenant'], 'Number');
            }
            if (data.hasOwnProperty('vrf')) {
                obj['vrf'] = ApiClient.convertToType(data['vrf'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableIPAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableIPAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableIPAddress.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

WritableIPAddress.RequiredProperties = ["address", "nat_outside"];

/**
 * IPv4 or IPv6 address (with mask)
 * @member {String} address
 */
WritableIPAddress.prototype['address'] = undefined;

/**
 * @member {Date} created
 */
WritableIPAddress.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
WritableIPAddress.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
WritableIPAddress.prototype['description'] = undefined;

/**
 * @member {Number} family
 */
WritableIPAddress.prototype['family'] = undefined;

/**
 * @member {Number} id
 */
WritableIPAddress.prototype['id'] = undefined;

/**
 * @member {Number} interface
 */
WritableIPAddress.prototype['interface'] = undefined;

/**
 * @member {Date} last_updated
 */
WritableIPAddress.prototype['last_updated'] = undefined;

/**
 * The IP for which this address is the \"outside\" IP
 * @member {Number} nat_inside
 */
WritableIPAddress.prototype['nat_inside'] = undefined;

/**
 * @member {Number} nat_outside
 */
WritableIPAddress.prototype['nat_outside'] = undefined;

/**
 * The functional role of this IP
 * @member {module:model/WritableIPAddress.RoleEnum} role
 */
WritableIPAddress.prototype['role'] = undefined;

/**
 * The operational status of this IP
 * @member {module:model/WritableIPAddress.StatusEnum} status
 */
WritableIPAddress.prototype['status'] = undefined;

/**
 * @member {Array.<String>} tags
 */
WritableIPAddress.prototype['tags'] = undefined;

/**
 * @member {Number} tenant
 */
WritableIPAddress.prototype['tenant'] = undefined;

/**
 * @member {Number} vrf
 */
WritableIPAddress.prototype['vrf'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {Number}
 * @readonly
 */
WritableIPAddress['RoleEnum'] = {

    /**
     * value: 10
     * @const
     */
    "10": 10,

    /**
     * value: 20
     * @const
     */
    "20": 20,

    /**
     * value: 30
     * @const
     */
    "30": 30,

    /**
     * value: 40
     * @const
     */
    "40": 40,

    /**
     * value: 41
     * @const
     */
    "41": 41,

    /**
     * value: 42
     * @const
     */
    "42": 42,

    /**
     * value: 43
     * @const
     */
    "43": 43,

    /**
     * value: 44
     * @const
     */
    "44": 44
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {Number}
 * @readonly
 */
WritableIPAddress['StatusEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 5
     * @const
     */
    "5": 5
};



export default WritableIPAddress;

