/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WritableCluster model module.
 * @module model/WritableCluster
 * @version 2.4
 */
class WritableCluster {
    /**
     * Constructs a new <code>WritableCluster</code>.
     * @alias module:model/WritableCluster
     * @param name {String} 
     * @param type {Number} 
     */
    constructor(name, type) { 
        
        WritableCluster.initialize(this, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type) { 
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>WritableCluster</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableCluster} obj Optional instance to populate.
     * @return {module:model/WritableCluster} The populated <code>WritableCluster</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableCluster();

            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('site')) {
                obj['site'] = ApiClient.convertToType(data['site'], 'Number');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableCluster</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableCluster</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableCluster.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

WritableCluster.RequiredProperties = ["name", "type"];

/**
 * @member {String} comments
 */
WritableCluster.prototype['comments'] = undefined;

/**
 * @member {Date} created
 */
WritableCluster.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
WritableCluster.prototype['custom_fields'] = undefined;

/**
 * @member {Number} group
 */
WritableCluster.prototype['group'] = undefined;

/**
 * @member {Number} id
 */
WritableCluster.prototype['id'] = undefined;

/**
 * @member {Date} last_updated
 */
WritableCluster.prototype['last_updated'] = undefined;

/**
 * @member {String} name
 */
WritableCluster.prototype['name'] = undefined;

/**
 * @member {Number} site
 */
WritableCluster.prototype['site'] = undefined;

/**
 * @member {Array.<String>} tags
 */
WritableCluster.prototype['tags'] = undefined;

/**
 * @member {Number} type
 */
WritableCluster.prototype['type'] = undefined;






export default WritableCluster;

