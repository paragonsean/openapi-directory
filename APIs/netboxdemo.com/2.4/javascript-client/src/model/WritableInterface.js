/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WritableInterface model module.
 * @module model/WritableInterface
 * @version 2.4
 */
class WritableInterface {
    /**
     * Constructs a new <code>WritableInterface</code>.
     * @alias module:model/WritableInterface
     * @param circuitTermination {Number} 
     * @param device {Number} 
     * @param name {String} 
     */
    constructor(circuitTermination, device, name) { 
        
        WritableInterface.initialize(this, circuitTermination, device, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, circuitTermination, device, name) { 
        obj['circuit_termination'] = circuitTermination;
        obj['device'] = device;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>WritableInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableInterface} obj Optional instance to populate.
     * @return {module:model/WritableInterface} The populated <code>WritableInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableInterface();

            if (data.hasOwnProperty('circuit_termination')) {
                obj['circuit_termination'] = ApiClient.convertToType(data['circuit_termination'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'Number');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('form_factor')) {
                obj['form_factor'] = ApiClient.convertToType(data['form_factor'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('interface_connection')) {
                obj['interface_connection'] = ApiClient.convertToType(data['interface_connection'], 'String');
            }
            if (data.hasOwnProperty('is_connected')) {
                obj['is_connected'] = ApiClient.convertToType(data['is_connected'], 'String');
            }
            if (data.hasOwnProperty('lag')) {
                obj['lag'] = ApiClient.convertToType(data['lag'], 'Number');
            }
            if (data.hasOwnProperty('mac_address')) {
                obj['mac_address'] = ApiClient.convertToType(data['mac_address'], 'String');
            }
            if (data.hasOwnProperty('mgmt_only')) {
                obj['mgmt_only'] = ApiClient.convertToType(data['mgmt_only'], 'Boolean');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'Number');
            }
            if (data.hasOwnProperty('mtu')) {
                obj['mtu'] = ApiClient.convertToType(data['mtu'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tagged_vlans')) {
                obj['tagged_vlans'] = ApiClient.convertToType(data['tagged_vlans'], ['Number']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('untagged_vlan')) {
                obj['untagged_vlan'] = ApiClient.convertToType(data['untagged_vlan'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['interface_connection'] && !(typeof data['interface_connection'] === 'string' || data['interface_connection'] instanceof String)) {
            throw new Error("Expected the field `interface_connection` to be a primitive type in the JSON string but got " + data['interface_connection']);
        }
        // ensure the json data is a string
        if (data['is_connected'] && !(typeof data['is_connected'] === 'string' || data['is_connected'] instanceof String)) {
            throw new Error("Expected the field `is_connected` to be a primitive type in the JSON string but got " + data['is_connected']);
        }
        // ensure the json data is a string
        if (data['mac_address'] && !(typeof data['mac_address'] === 'string' || data['mac_address'] instanceof String)) {
            throw new Error("Expected the field `mac_address` to be a primitive type in the JSON string but got " + data['mac_address']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tagged_vlans'])) {
            throw new Error("Expected the field `tagged_vlans` to be an array in the JSON data but got " + data['tagged_vlans']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

WritableInterface.RequiredProperties = ["circuit_termination", "device", "name"];

/**
 * @member {Number} circuit_termination
 */
WritableInterface.prototype['circuit_termination'] = undefined;

/**
 * @member {String} description
 */
WritableInterface.prototype['description'] = undefined;

/**
 * @member {Number} device
 */
WritableInterface.prototype['device'] = undefined;

/**
 * @member {Boolean} enabled
 */
WritableInterface.prototype['enabled'] = undefined;

/**
 * @member {module:model/WritableInterface.FormFactorEnum} form_factor
 */
WritableInterface.prototype['form_factor'] = undefined;

/**
 * @member {Number} id
 */
WritableInterface.prototype['id'] = undefined;

/**
 * @member {String} interface_connection
 */
WritableInterface.prototype['interface_connection'] = undefined;

/**
 * @member {String} is_connected
 */
WritableInterface.prototype['is_connected'] = undefined;

/**
 * @member {Number} lag
 */
WritableInterface.prototype['lag'] = undefined;

/**
 * @member {String} mac_address
 */
WritableInterface.prototype['mac_address'] = undefined;

/**
 * This interface is used only for out-of-band management
 * @member {Boolean} mgmt_only
 */
WritableInterface.prototype['mgmt_only'] = undefined;

/**
 * @member {module:model/WritableInterface.ModeEnum} mode
 */
WritableInterface.prototype['mode'] = undefined;

/**
 * @member {Number} mtu
 */
WritableInterface.prototype['mtu'] = undefined;

/**
 * @member {String} name
 */
WritableInterface.prototype['name'] = undefined;

/**
 * @member {Array.<Number>} tagged_vlans
 */
WritableInterface.prototype['tagged_vlans'] = undefined;

/**
 * @member {Array.<String>} tags
 */
WritableInterface.prototype['tags'] = undefined;

/**
 * @member {Number} untagged_vlan
 */
WritableInterface.prototype['untagged_vlan'] = undefined;





/**
 * Allowed values for the <code>form_factor</code> property.
 * @enum {Number}
 * @readonly
 */
WritableInterface['FormFactorEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 200
     * @const
     */
    "200": 200,

    /**
     * value: 800
     * @const
     */
    "800": 800,

    /**
     * value: 1000
     * @const
     */
    "1000": 1000,

    /**
     * value: 1150
     * @const
     */
    "1150": 1150,

    /**
     * value: 1170
     * @const
     */
    "1170": 1170,

    /**
     * value: 1050
     * @const
     */
    "1050": 1050,

    /**
     * value: 1100
     * @const
     */
    "1100": 1100,

    /**
     * value: 1200
     * @const
     */
    "1200": 1200,

    /**
     * value: 1300
     * @const
     */
    "1300": 1300,

    /**
     * value: 1310
     * @const
     */
    "1310": 1310,

    /**
     * value: 1320
     * @const
     */
    "1320": 1320,

    /**
     * value: 1350
     * @const
     */
    "1350": 1350,

    /**
     * value: 1400
     * @const
     */
    "1400": 1400,

    /**
     * value: 1500
     * @const
     */
    "1500": 1500,

    /**
     * value: 1510
     * @const
     */
    "1510": 1510,

    /**
     * value: 1520
     * @const
     */
    "1520": 1520,

    /**
     * value: 1550
     * @const
     */
    "1550": 1550,

    /**
     * value: 1600
     * @const
     */
    "1600": 1600,

    /**
     * value: 2600
     * @const
     */
    "2600": 2600,

    /**
     * value: 2610
     * @const
     */
    "2610": 2610,

    /**
     * value: 2620
     * @const
     */
    "2620": 2620,

    /**
     * value: 2630
     * @const
     */
    "2630": 2630,

    /**
     * value: 2640
     * @const
     */
    "2640": 2640,

    /**
     * value: 6100
     * @const
     */
    "6100": 6100,

    /**
     * value: 6200
     * @const
     */
    "6200": 6200,

    /**
     * value: 6300
     * @const
     */
    "6300": 6300,

    /**
     * value: 6400
     * @const
     */
    "6400": 6400,

    /**
     * value: 6500
     * @const
     */
    "6500": 6500,

    /**
     * value: 6600
     * @const
     */
    "6600": 6600,

    /**
     * value: 6700
     * @const
     */
    "6700": 6700,

    /**
     * value: 3010
     * @const
     */
    "3010": 3010,

    /**
     * value: 3020
     * @const
     */
    "3020": 3020,

    /**
     * value: 3040
     * @const
     */
    "3040": 3040,

    /**
     * value: 3080
     * @const
     */
    "3080": 3080,

    /**
     * value: 3160
     * @const
     */
    "3160": 3160,

    /**
     * value: 3320
     * @const
     */
    "3320": 3320,

    /**
     * value: 4000
     * @const
     */
    "4000": 4000,

    /**
     * value: 4010
     * @const
     */
    "4010": 4010,

    /**
     * value: 4040
     * @const
     */
    "4040": 4040,

    /**
     * value: 4050
     * @const
     */
    "4050": 4050,

    /**
     * value: 5000
     * @const
     */
    "5000": 5000,

    /**
     * value: 5050
     * @const
     */
    "5050": 5050,

    /**
     * value: 5100
     * @const
     */
    "5100": 5100,

    /**
     * value: 5150
     * @const
     */
    "5150": 5150,

    /**
     * value: 5200
     * @const
     */
    "5200": 5200,

    /**
     * value: 5300
     * @const
     */
    "5300": 5300,

    /**
     * value: 5310
     * @const
     */
    "5310": 5310,

    /**
     * value: 5320
     * @const
     */
    "5320": 5320,

    /**
     * value: 5330
     * @const
     */
    "5330": 5330,

    /**
     * value: 32767
     * @const
     */
    "32767": 32767
};


/**
 * Allowed values for the <code>mode</code> property.
 * @enum {Number}
 * @readonly
 */
WritableInterface['ModeEnum'] = {

    /**
     * value: 100
     * @const
     */
    "100": 100,

    /**
     * value: 200
     * @const
     */
    "200": 200,

    /**
     * value: 300
     * @const
     */
    "300": 300
};



export default WritableInterface;

