/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WritableInterfaceTemplate model module.
 * @module model/WritableInterfaceTemplate
 * @version 2.4
 */
class WritableInterfaceTemplate {
    /**
     * Constructs a new <code>WritableInterfaceTemplate</code>.
     * @alias module:model/WritableInterfaceTemplate
     * @param deviceType {Number} 
     * @param name {String} 
     */
    constructor(deviceType, name) { 
        
        WritableInterfaceTemplate.initialize(this, deviceType, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceType, name) { 
        obj['device_type'] = deviceType;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>WritableInterfaceTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableInterfaceTemplate} obj Optional instance to populate.
     * @return {module:model/WritableInterfaceTemplate} The populated <code>WritableInterfaceTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableInterfaceTemplate();

            if (data.hasOwnProperty('device_type')) {
                obj['device_type'] = ApiClient.convertToType(data['device_type'], 'Number');
            }
            if (data.hasOwnProperty('form_factor')) {
                obj['form_factor'] = ApiClient.convertToType(data['form_factor'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('mgmt_only')) {
                obj['mgmt_only'] = ApiClient.convertToType(data['mgmt_only'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableInterfaceTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableInterfaceTemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableInterfaceTemplate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

WritableInterfaceTemplate.RequiredProperties = ["device_type", "name"];

/**
 * @member {Number} device_type
 */
WritableInterfaceTemplate.prototype['device_type'] = undefined;

/**
 * @member {module:model/WritableInterfaceTemplate.FormFactorEnum} form_factor
 */
WritableInterfaceTemplate.prototype['form_factor'] = undefined;

/**
 * @member {Number} id
 */
WritableInterfaceTemplate.prototype['id'] = undefined;

/**
 * @member {Boolean} mgmt_only
 */
WritableInterfaceTemplate.prototype['mgmt_only'] = undefined;

/**
 * @member {String} name
 */
WritableInterfaceTemplate.prototype['name'] = undefined;





/**
 * Allowed values for the <code>form_factor</code> property.
 * @enum {Number}
 * @readonly
 */
WritableInterfaceTemplate['FormFactorEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 200
     * @const
     */
    "200": 200,

    /**
     * value: 800
     * @const
     */
    "800": 800,

    /**
     * value: 1000
     * @const
     */
    "1000": 1000,

    /**
     * value: 1150
     * @const
     */
    "1150": 1150,

    /**
     * value: 1170
     * @const
     */
    "1170": 1170,

    /**
     * value: 1050
     * @const
     */
    "1050": 1050,

    /**
     * value: 1100
     * @const
     */
    "1100": 1100,

    /**
     * value: 1200
     * @const
     */
    "1200": 1200,

    /**
     * value: 1300
     * @const
     */
    "1300": 1300,

    /**
     * value: 1310
     * @const
     */
    "1310": 1310,

    /**
     * value: 1320
     * @const
     */
    "1320": 1320,

    /**
     * value: 1350
     * @const
     */
    "1350": 1350,

    /**
     * value: 1400
     * @const
     */
    "1400": 1400,

    /**
     * value: 1500
     * @const
     */
    "1500": 1500,

    /**
     * value: 1510
     * @const
     */
    "1510": 1510,

    /**
     * value: 1520
     * @const
     */
    "1520": 1520,

    /**
     * value: 1550
     * @const
     */
    "1550": 1550,

    /**
     * value: 1600
     * @const
     */
    "1600": 1600,

    /**
     * value: 2600
     * @const
     */
    "2600": 2600,

    /**
     * value: 2610
     * @const
     */
    "2610": 2610,

    /**
     * value: 2620
     * @const
     */
    "2620": 2620,

    /**
     * value: 2630
     * @const
     */
    "2630": 2630,

    /**
     * value: 2640
     * @const
     */
    "2640": 2640,

    /**
     * value: 6100
     * @const
     */
    "6100": 6100,

    /**
     * value: 6200
     * @const
     */
    "6200": 6200,

    /**
     * value: 6300
     * @const
     */
    "6300": 6300,

    /**
     * value: 6400
     * @const
     */
    "6400": 6400,

    /**
     * value: 6500
     * @const
     */
    "6500": 6500,

    /**
     * value: 6600
     * @const
     */
    "6600": 6600,

    /**
     * value: 6700
     * @const
     */
    "6700": 6700,

    /**
     * value: 3010
     * @const
     */
    "3010": 3010,

    /**
     * value: 3020
     * @const
     */
    "3020": 3020,

    /**
     * value: 3040
     * @const
     */
    "3040": 3040,

    /**
     * value: 3080
     * @const
     */
    "3080": 3080,

    /**
     * value: 3160
     * @const
     */
    "3160": 3160,

    /**
     * value: 3320
     * @const
     */
    "3320": 3320,

    /**
     * value: 4000
     * @const
     */
    "4000": 4000,

    /**
     * value: 4010
     * @const
     */
    "4010": 4010,

    /**
     * value: 4040
     * @const
     */
    "4040": 4040,

    /**
     * value: 4050
     * @const
     */
    "4050": 4050,

    /**
     * value: 5000
     * @const
     */
    "5000": 5000,

    /**
     * value: 5050
     * @const
     */
    "5050": 5050,

    /**
     * value: 5100
     * @const
     */
    "5100": 5100,

    /**
     * value: 5150
     * @const
     */
    "5150": 5150,

    /**
     * value: 5200
     * @const
     */
    "5200": 5200,

    /**
     * value: 5300
     * @const
     */
    "5300": 5300,

    /**
     * value: 5310
     * @const
     */
    "5310": 5310,

    /**
     * value: 5320
     * @const
     */
    "5320": 5320,

    /**
     * value: 5330
     * @const
     */
    "5330": 5330,

    /**
     * value: 32767
     * @const
     */
    "32767": 32767
};



export default WritableInterfaceTemplate;

