/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WritableConfigContext model module.
 * @module model/WritableConfigContext
 * @version 2.4
 */
class WritableConfigContext {
    /**
     * Constructs a new <code>WritableConfigContext</code>.
     * @alias module:model/WritableConfigContext
     * @param data {String} 
     * @param name {String} 
     */
    constructor(data, name) { 
        
        WritableConfigContext.initialize(this, data, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, name) { 
        obj['data'] = data;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>WritableConfigContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableConfigContext} obj Optional instance to populate.
     * @return {module:model/WritableConfigContext} The populated <code>WritableConfigContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableConfigContext();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('platforms')) {
                obj['platforms'] = ApiClient.convertToType(data['platforms'], ['Number']);
            }
            if (data.hasOwnProperty('regions')) {
                obj['regions'] = ApiClient.convertToType(data['regions'], ['Number']);
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], ['Number']);
            }
            if (data.hasOwnProperty('sites')) {
                obj['sites'] = ApiClient.convertToType(data['sites'], ['Number']);
            }
            if (data.hasOwnProperty('tenant_groups')) {
                obj['tenant_groups'] = ApiClient.convertToType(data['tenant_groups'], ['Number']);
            }
            if (data.hasOwnProperty('tenants')) {
                obj['tenants'] = ApiClient.convertToType(data['tenants'], ['Number']);
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableConfigContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableConfigContext</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableConfigContext.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['platforms'])) {
            throw new Error("Expected the field `platforms` to be an array in the JSON data but got " + data['platforms']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['regions'])) {
            throw new Error("Expected the field `regions` to be an array in the JSON data but got " + data['regions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['roles'])) {
            throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sites'])) {
            throw new Error("Expected the field `sites` to be an array in the JSON data but got " + data['sites']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tenant_groups'])) {
            throw new Error("Expected the field `tenant_groups` to be an array in the JSON data but got " + data['tenant_groups']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tenants'])) {
            throw new Error("Expected the field `tenants` to be an array in the JSON data but got " + data['tenants']);
        }

        return true;
    }


}

WritableConfigContext.RequiredProperties = ["data", "name"];

/**
 * @member {String} data
 */
WritableConfigContext.prototype['data'] = undefined;

/**
 * @member {String} description
 */
WritableConfigContext.prototype['description'] = undefined;

/**
 * @member {Number} id
 */
WritableConfigContext.prototype['id'] = undefined;

/**
 * @member {Boolean} is_active
 */
WritableConfigContext.prototype['is_active'] = undefined;

/**
 * @member {String} name
 */
WritableConfigContext.prototype['name'] = undefined;

/**
 * @member {Array.<Number>} platforms
 */
WritableConfigContext.prototype['platforms'] = undefined;

/**
 * @member {Array.<Number>} regions
 */
WritableConfigContext.prototype['regions'] = undefined;

/**
 * @member {Array.<Number>} roles
 */
WritableConfigContext.prototype['roles'] = undefined;

/**
 * @member {Array.<Number>} sites
 */
WritableConfigContext.prototype['sites'] = undefined;

/**
 * @member {Array.<Number>} tenant_groups
 */
WritableConfigContext.prototype['tenant_groups'] = undefined;

/**
 * @member {Array.<Number>} tenants
 */
WritableConfigContext.prototype['tenants'] = undefined;

/**
 * @member {Number} weight
 */
WritableConfigContext.prototype['weight'] = undefined;






export default WritableConfigContext;

