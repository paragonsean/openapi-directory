/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InterfaceNestedCircuit from './InterfaceNestedCircuit';

/**
 * The InterfaceCircuitTermination model module.
 * @module model/InterfaceCircuitTermination
 * @version 2.4
 */
class InterfaceCircuitTermination {
    /**
     * Constructs a new <code>InterfaceCircuitTermination</code>.
     * @alias module:model/InterfaceCircuitTermination
     * @param portSpeed {Number} 
     * @param termSide {module:model/InterfaceCircuitTermination.TermSideEnum} 
     */
    constructor(portSpeed, termSide) { 
        
        InterfaceCircuitTermination.initialize(this, portSpeed, termSide);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, portSpeed, termSide) { 
        obj['port_speed'] = portSpeed;
        obj['term_side'] = termSide;
    }

    /**
     * Constructs a <code>InterfaceCircuitTermination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InterfaceCircuitTermination} obj Optional instance to populate.
     * @return {module:model/InterfaceCircuitTermination} The populated <code>InterfaceCircuitTermination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InterfaceCircuitTermination();

            if (data.hasOwnProperty('circuit')) {
                obj['circuit'] = InterfaceNestedCircuit.constructFromObject(data['circuit']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('port_speed')) {
                obj['port_speed'] = ApiClient.convertToType(data['port_speed'], 'Number');
            }
            if (data.hasOwnProperty('pp_info')) {
                obj['pp_info'] = ApiClient.convertToType(data['pp_info'], 'String');
            }
            if (data.hasOwnProperty('term_side')) {
                obj['term_side'] = ApiClient.convertToType(data['term_side'], 'String');
            }
            if (data.hasOwnProperty('upstream_speed')) {
                obj['upstream_speed'] = ApiClient.convertToType(data['upstream_speed'], 'Number');
            }
            if (data.hasOwnProperty('xconnect_id')) {
                obj['xconnect_id'] = ApiClient.convertToType(data['xconnect_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InterfaceCircuitTermination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InterfaceCircuitTermination</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InterfaceCircuitTermination.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `circuit`
        if (data['circuit']) { // data not null
          InterfaceNestedCircuit.validateJSON(data['circuit']);
        }
        // ensure the json data is a string
        if (data['pp_info'] && !(typeof data['pp_info'] === 'string' || data['pp_info'] instanceof String)) {
            throw new Error("Expected the field `pp_info` to be a primitive type in the JSON string but got " + data['pp_info']);
        }
        // ensure the json data is a string
        if (data['term_side'] && !(typeof data['term_side'] === 'string' || data['term_side'] instanceof String)) {
            throw new Error("Expected the field `term_side` to be a primitive type in the JSON string but got " + data['term_side']);
        }
        // ensure the json data is a string
        if (data['xconnect_id'] && !(typeof data['xconnect_id'] === 'string' || data['xconnect_id'] instanceof String)) {
            throw new Error("Expected the field `xconnect_id` to be a primitive type in the JSON string but got " + data['xconnect_id']);
        }

        return true;
    }


}

InterfaceCircuitTermination.RequiredProperties = ["port_speed", "term_side"];

/**
 * @member {module:model/InterfaceNestedCircuit} circuit
 */
InterfaceCircuitTermination.prototype['circuit'] = undefined;

/**
 * @member {Number} id
 */
InterfaceCircuitTermination.prototype['id'] = undefined;

/**
 * @member {Number} port_speed
 */
InterfaceCircuitTermination.prototype['port_speed'] = undefined;

/**
 * @member {String} pp_info
 */
InterfaceCircuitTermination.prototype['pp_info'] = undefined;

/**
 * @member {module:model/InterfaceCircuitTermination.TermSideEnum} term_side
 */
InterfaceCircuitTermination.prototype['term_side'] = undefined;

/**
 * Upstream speed, if different from port speed
 * @member {Number} upstream_speed
 */
InterfaceCircuitTermination.prototype['upstream_speed'] = undefined;

/**
 * @member {String} xconnect_id
 */
InterfaceCircuitTermination.prototype['xconnect_id'] = undefined;





/**
 * Allowed values for the <code>term_side</code> property.
 * @enum {String}
 * @readonly
 */
InterfaceCircuitTermination['TermSideEnum'] = {

    /**
     * value: "A"
     * @const
     */
    "A": "A",

    /**
     * value: "Z"
     * @const
     */
    "Z": "Z"
};



export default InterfaceCircuitTermination;

