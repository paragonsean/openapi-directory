/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WritableGraph model module.
 * @module model/WritableGraph
 * @version 2.4
 */
class WritableGraph {
    /**
     * Constructs a new <code>WritableGraph</code>.
     * @alias module:model/WritableGraph
     * @param name {String} 
     * @param source {String} 
     * @param type {module:model/WritableGraph.TypeEnum} 
     */
    constructor(name, source, type) { 
        
        WritableGraph.initialize(this, name, source, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, source, type) { 
        obj['name'] = name;
        obj['source'] = source;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>WritableGraph</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableGraph} obj Optional instance to populate.
     * @return {module:model/WritableGraph} The populated <code>WritableGraph</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableGraph();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'Number');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableGraph</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableGraph</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableGraph.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}

WritableGraph.RequiredProperties = ["name", "source", "type"];

/**
 * @member {Number} id
 */
WritableGraph.prototype['id'] = undefined;

/**
 * @member {String} link
 */
WritableGraph.prototype['link'] = undefined;

/**
 * @member {String} name
 */
WritableGraph.prototype['name'] = undefined;

/**
 * @member {String} source
 */
WritableGraph.prototype['source'] = undefined;

/**
 * @member {module:model/WritableGraph.TypeEnum} type
 */
WritableGraph.prototype['type'] = undefined;

/**
 * @member {Number} weight
 */
WritableGraph.prototype['weight'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {Number}
 * @readonly
 */
WritableGraph['TypeEnum'] = {

    /**
     * value: 100
     * @const
     */
    "100": 100,

    /**
     * value: 200
     * @const
     */
    "200": 200,

    /**
     * value: 300
     * @const
     */
    "300": 300
};



export default WritableGraph;

