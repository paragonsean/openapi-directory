/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectionStatus from './ConnectionStatus';
import NestedInterface from './NestedInterface';

/**
 * The InterfaceConnection model module.
 * @module model/InterfaceConnection
 * @version 2.4
 */
class InterfaceConnection {
    /**
     * Constructs a new <code>InterfaceConnection</code>.
     * @alias module:model/InterfaceConnection
     * @param interfaceA {module:model/NestedInterface} 
     * @param interfaceB {module:model/NestedInterface} 
     */
    constructor(interfaceA, interfaceB) { 
        
        InterfaceConnection.initialize(this, interfaceA, interfaceB);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, interfaceA, interfaceB) { 
        obj['interface_a'] = interfaceA;
        obj['interface_b'] = interfaceB;
    }

    /**
     * Constructs a <code>InterfaceConnection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InterfaceConnection} obj Optional instance to populate.
     * @return {module:model/InterfaceConnection} The populated <code>InterfaceConnection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InterfaceConnection();

            if (data.hasOwnProperty('connection_status')) {
                obj['connection_status'] = ConnectionStatus.constructFromObject(data['connection_status']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('interface_a')) {
                obj['interface_a'] = NestedInterface.constructFromObject(data['interface_a']);
            }
            if (data.hasOwnProperty('interface_b')) {
                obj['interface_b'] = NestedInterface.constructFromObject(data['interface_b']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InterfaceConnection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InterfaceConnection</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InterfaceConnection.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `connection_status`
        if (data['connection_status']) { // data not null
          ConnectionStatus.validateJSON(data['connection_status']);
        }
        // validate the optional field `interface_a`
        if (data['interface_a']) { // data not null
          NestedInterface.validateJSON(data['interface_a']);
        }
        // validate the optional field `interface_b`
        if (data['interface_b']) { // data not null
          NestedInterface.validateJSON(data['interface_b']);
        }

        return true;
    }


}

InterfaceConnection.RequiredProperties = ["interface_a", "interface_b"];

/**
 * @member {module:model/ConnectionStatus} connection_status
 */
InterfaceConnection.prototype['connection_status'] = undefined;

/**
 * @member {Number} id
 */
InterfaceConnection.prototype['id'] = undefined;

/**
 * @member {module:model/NestedInterface} interface_a
 */
InterfaceConnection.prototype['interface_a'] = undefined;

/**
 * @member {module:model/NestedInterface} interface_b
 */
InterfaceConnection.prototype['interface_b'] = undefined;






export default InterfaceConnection;

