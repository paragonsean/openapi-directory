/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceIPAddress from './DeviceIPAddress';
import DeviceVirtualChassis from './DeviceVirtualChassis';
import Face from './Face';
import NestedCluster from './NestedCluster';
import NestedDeviceRole from './NestedDeviceRole';
import NestedDeviceType from './NestedDeviceType';
import NestedPlatform from './NestedPlatform';
import NestedRack from './NestedRack';
import NestedSite from './NestedSite';
import NestedTenant from './NestedTenant';
import Status from './Status';

/**
 * The DeviceWithConfigContext model module.
 * @module model/DeviceWithConfigContext
 * @version 2.4
 */
class DeviceWithConfigContext {
    /**
     * Constructs a new <code>DeviceWithConfigContext</code>.
     * @alias module:model/DeviceWithConfigContext
     * @param deviceRole {module:model/NestedDeviceRole} 
     * @param deviceType {module:model/NestedDeviceType} 
     * @param site {module:model/NestedSite} 
     */
    constructor(deviceRole, deviceType, site) { 
        
        DeviceWithConfigContext.initialize(this, deviceRole, deviceType, site);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceRole, deviceType, site) { 
        obj['device_role'] = deviceRole;
        obj['device_type'] = deviceType;
        obj['site'] = site;
    }

    /**
     * Constructs a <code>DeviceWithConfigContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceWithConfigContext} obj Optional instance to populate.
     * @return {module:model/DeviceWithConfigContext} The populated <code>DeviceWithConfigContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceWithConfigContext();

            if (data.hasOwnProperty('asset_tag')) {
                obj['asset_tag'] = ApiClient.convertToType(data['asset_tag'], 'String');
            }
            if (data.hasOwnProperty('cluster')) {
                obj['cluster'] = NestedCluster.constructFromObject(data['cluster']);
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('config_context')) {
                obj['config_context'] = ApiClient.convertToType(data['config_context'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('device_role')) {
                obj['device_role'] = NestedDeviceRole.constructFromObject(data['device_role']);
            }
            if (data.hasOwnProperty('device_type')) {
                obj['device_type'] = NestedDeviceType.constructFromObject(data['device_type']);
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('face')) {
                obj['face'] = Face.constructFromObject(data['face']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('local_context_data')) {
                obj['local_context_data'] = ApiClient.convertToType(data['local_context_data'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parent_device')) {
                obj['parent_device'] = ApiClient.convertToType(data['parent_device'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = NestedPlatform.constructFromObject(data['platform']);
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('primary_ip')) {
                obj['primary_ip'] = DeviceIPAddress.constructFromObject(data['primary_ip']);
            }
            if (data.hasOwnProperty('primary_ip4')) {
                obj['primary_ip4'] = DeviceIPAddress.constructFromObject(data['primary_ip4']);
            }
            if (data.hasOwnProperty('primary_ip6')) {
                obj['primary_ip6'] = DeviceIPAddress.constructFromObject(data['primary_ip6']);
            }
            if (data.hasOwnProperty('rack')) {
                obj['rack'] = NestedRack.constructFromObject(data['rack']);
            }
            if (data.hasOwnProperty('serial')) {
                obj['serial'] = ApiClient.convertToType(data['serial'], 'String');
            }
            if (data.hasOwnProperty('site')) {
                obj['site'] = NestedSite.constructFromObject(data['site']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('tenant')) {
                obj['tenant'] = NestedTenant.constructFromObject(data['tenant']);
            }
            if (data.hasOwnProperty('vc_position')) {
                obj['vc_position'] = ApiClient.convertToType(data['vc_position'], 'Number');
            }
            if (data.hasOwnProperty('vc_priority')) {
                obj['vc_priority'] = ApiClient.convertToType(data['vc_priority'], 'Number');
            }
            if (data.hasOwnProperty('virtual_chassis')) {
                obj['virtual_chassis'] = DeviceVirtualChassis.constructFromObject(data['virtual_chassis']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceWithConfigContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceWithConfigContext</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceWithConfigContext.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['asset_tag'] && !(typeof data['asset_tag'] === 'string' || data['asset_tag'] instanceof String)) {
            throw new Error("Expected the field `asset_tag` to be a primitive type in the JSON string but got " + data['asset_tag']);
        }
        // validate the optional field `cluster`
        if (data['cluster']) { // data not null
          NestedCluster.validateJSON(data['cluster']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['config_context'] && !(typeof data['config_context'] === 'string' || data['config_context'] instanceof String)) {
            throw new Error("Expected the field `config_context` to be a primitive type in the JSON string but got " + data['config_context']);
        }
        // validate the optional field `device_role`
        if (data['device_role']) { // data not null
          NestedDeviceRole.validateJSON(data['device_role']);
        }
        // validate the optional field `device_type`
        if (data['device_type']) { // data not null
          NestedDeviceType.validateJSON(data['device_type']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // validate the optional field `face`
        if (data['face']) { // data not null
          Face.validateJSON(data['face']);
        }
        // ensure the json data is a string
        if (data['local_context_data'] && !(typeof data['local_context_data'] === 'string' || data['local_context_data'] instanceof String)) {
            throw new Error("Expected the field `local_context_data` to be a primitive type in the JSON string but got " + data['local_context_data']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parent_device'] && !(typeof data['parent_device'] === 'string' || data['parent_device'] instanceof String)) {
            throw new Error("Expected the field `parent_device` to be a primitive type in the JSON string but got " + data['parent_device']);
        }
        // validate the optional field `platform`
        if (data['platform']) { // data not null
          NestedPlatform.validateJSON(data['platform']);
        }
        // validate the optional field `primary_ip`
        if (data['primary_ip']) { // data not null
          DeviceIPAddress.validateJSON(data['primary_ip']);
        }
        // validate the optional field `primary_ip4`
        if (data['primary_ip4']) { // data not null
          DeviceIPAddress.validateJSON(data['primary_ip4']);
        }
        // validate the optional field `primary_ip6`
        if (data['primary_ip6']) { // data not null
          DeviceIPAddress.validateJSON(data['primary_ip6']);
        }
        // validate the optional field `rack`
        if (data['rack']) { // data not null
          NestedRack.validateJSON(data['rack']);
        }
        // ensure the json data is a string
        if (data['serial'] && !(typeof data['serial'] === 'string' || data['serial'] instanceof String)) {
            throw new Error("Expected the field `serial` to be a primitive type in the JSON string but got " + data['serial']);
        }
        // validate the optional field `site`
        if (data['site']) { // data not null
          NestedSite.validateJSON(data['site']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Status.validateJSON(data['status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // validate the optional field `tenant`
        if (data['tenant']) { // data not null
          NestedTenant.validateJSON(data['tenant']);
        }
        // validate the optional field `virtual_chassis`
        if (data['virtual_chassis']) { // data not null
          DeviceVirtualChassis.validateJSON(data['virtual_chassis']);
        }

        return true;
    }


}

DeviceWithConfigContext.RequiredProperties = ["device_role", "device_type", "site"];

/**
 * A unique tag used to identify this device
 * @member {String} asset_tag
 */
DeviceWithConfigContext.prototype['asset_tag'] = undefined;

/**
 * @member {module:model/NestedCluster} cluster
 */
DeviceWithConfigContext.prototype['cluster'] = undefined;

/**
 * @member {String} comments
 */
DeviceWithConfigContext.prototype['comments'] = undefined;

/**
 * @member {String} config_context
 */
DeviceWithConfigContext.prototype['config_context'] = undefined;

/**
 * @member {Date} created
 */
DeviceWithConfigContext.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
DeviceWithConfigContext.prototype['custom_fields'] = undefined;

/**
 * @member {module:model/NestedDeviceRole} device_role
 */
DeviceWithConfigContext.prototype['device_role'] = undefined;

/**
 * @member {module:model/NestedDeviceType} device_type
 */
DeviceWithConfigContext.prototype['device_type'] = undefined;

/**
 * @member {String} display_name
 */
DeviceWithConfigContext.prototype['display_name'] = undefined;

/**
 * @member {module:model/Face} face
 */
DeviceWithConfigContext.prototype['face'] = undefined;

/**
 * @member {Number} id
 */
DeviceWithConfigContext.prototype['id'] = undefined;

/**
 * @member {Date} last_updated
 */
DeviceWithConfigContext.prototype['last_updated'] = undefined;

/**
 * @member {String} local_context_data
 */
DeviceWithConfigContext.prototype['local_context_data'] = undefined;

/**
 * @member {String} name
 */
DeviceWithConfigContext.prototype['name'] = undefined;

/**
 * @member {String} parent_device
 */
DeviceWithConfigContext.prototype['parent_device'] = undefined;

/**
 * @member {module:model/NestedPlatform} platform
 */
DeviceWithConfigContext.prototype['platform'] = undefined;

/**
 * The lowest-numbered unit occupied by the device
 * @member {Number} position
 */
DeviceWithConfigContext.prototype['position'] = undefined;

/**
 * @member {module:model/DeviceIPAddress} primary_ip
 */
DeviceWithConfigContext.prototype['primary_ip'] = undefined;

/**
 * @member {module:model/DeviceIPAddress} primary_ip4
 */
DeviceWithConfigContext.prototype['primary_ip4'] = undefined;

/**
 * @member {module:model/DeviceIPAddress} primary_ip6
 */
DeviceWithConfigContext.prototype['primary_ip6'] = undefined;

/**
 * @member {module:model/NestedRack} rack
 */
DeviceWithConfigContext.prototype['rack'] = undefined;

/**
 * @member {String} serial
 */
DeviceWithConfigContext.prototype['serial'] = undefined;

/**
 * @member {module:model/NestedSite} site
 */
DeviceWithConfigContext.prototype['site'] = undefined;

/**
 * @member {module:model/Status} status
 */
DeviceWithConfigContext.prototype['status'] = undefined;

/**
 * @member {Array.<String>} tags
 */
DeviceWithConfigContext.prototype['tags'] = undefined;

/**
 * @member {module:model/NestedTenant} tenant
 */
DeviceWithConfigContext.prototype['tenant'] = undefined;

/**
 * @member {Number} vc_position
 */
DeviceWithConfigContext.prototype['vc_position'] = undefined;

/**
 * @member {Number} vc_priority
 */
DeviceWithConfigContext.prototype['vc_priority'] = undefined;

/**
 * @member {module:model/DeviceVirtualChassis} virtual_chassis
 */
DeviceWithConfigContext.prototype['virtual_chassis'] = undefined;






export default DeviceWithConfigContext;

