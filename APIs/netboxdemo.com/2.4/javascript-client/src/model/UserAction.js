/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Action from './Action';
import NestedUser from './NestedUser';

/**
 * The UserAction model module.
 * @module model/UserAction
 * @version 2.4
 */
class UserAction {
    /**
     * Constructs a new <code>UserAction</code>.
     * @alias module:model/UserAction
     * @param action {module:model/Action} 
     * @param user {module:model/NestedUser} 
     */
    constructor(action, user) { 
        
        UserAction.initialize(this, action, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, user) { 
        obj['action'] = action;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>UserAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserAction} obj Optional instance to populate.
     * @return {module:model/UserAction} The populated <code>UserAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserAction();

            if (data.hasOwnProperty('action')) {
                obj['action'] = Action.constructFromObject(data['action']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = NestedUser.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserAction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserAction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `action`
        if (data['action']) { // data not null
          Action.validateJSON(data['action']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          NestedUser.validateJSON(data['user']);
        }

        return true;
    }


}

UserAction.RequiredProperties = ["action", "user"];

/**
 * @member {module:model/Action} action
 */
UserAction.prototype['action'] = undefined;

/**
 * @member {Number} id
 */
UserAction.prototype['id'] = undefined;

/**
 * @member {String} message
 */
UserAction.prototype['message'] = undefined;

/**
 * @member {Date} time
 */
UserAction.prototype['time'] = undefined;

/**
 * @member {module:model/NestedUser} user
 */
UserAction.prototype['user'] = undefined;






export default UserAction;

