/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Secret from '../model/Secret';
import SecretRole from '../model/SecretRole';
import SecretsSecretRolesList200Response from '../model/SecretsSecretRolesList200Response';
import SecretsSecretsList200Response from '../model/SecretsSecretsList200Response';
import WritableSecret from '../model/WritableSecret';

/**
* Secrets service.
* @module api/SecretsApi
* @version 2.4
*/
export default class SecretsApi {

    /**
    * Constructs a new SecretsApi. 
    * @alias module:api/SecretsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the secretsChoicesList operation.
     * @callback module:api/SecretsApi~secretsChoicesListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/SecretsApi~secretsChoicesListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    secretsChoicesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/secrets/_choices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsChoicesRead operation.
     * @callback module:api/SecretsApi~secretsChoicesReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/SecretsApi~secretsChoicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    secretsChoicesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling secretsChoicesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/secrets/_choices/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsGenerateRsaKeyPairList operation.
     * @callback module:api/SecretsApi~secretsGenerateRsaKeyPairListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint can be used to generate a new RSA key pair. The keys are returned in PEM format.      {         \"public_key\": \"<public key>\",         \"private_key\": \"<private key>\"     }
     * @param {module:api/SecretsApi~secretsGenerateRsaKeyPairListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    secretsGenerateRsaKeyPairList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/secrets/generate-rsa-key-pair/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsGetSessionKeyCreate operation.
     * @callback module:api/SecretsApi~secretsGetSessionKeyCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a temporary session key to use for encrypting and decrypting secrets via the API. The user's private RSA key is POSTed with the name `private_key`. An example:      curl -v -X POST -H \"Authorization: Token <token>\" -H \"Accept: application/json; indent=4\" \\     --data-urlencode \"private_key@<filename>\" https://netbox/api/secrets/get-session-key/  This request will yield a base64-encoded session key to be included in an `X-Session-Key` header in future requests:      {         \"session_key\": \"+8t4SI6XikgVmB5+/urhozx9O5qCQANyOk1MNe6taRf=\"     }  This endpoint accepts one optional parameter: `preserve_key`. If True and a session key exists, the existing session key will be returned instead of a new one.
     * @param {module:api/SecretsApi~secretsGetSessionKeyCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    secretsGetSessionKeyCreate(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/secrets/get-session-key/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsSecretRolesCreate operation.
     * @callback module:api/SecretsApi~secretsSecretRolesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/SecretRole} secretRole 
     * @param {module:api/SecretsApi~secretsSecretRolesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretRole}
     */
    secretsSecretRolesCreate(secretRole, callback) {
      let postBody = secretRole;
      // verify the required parameter 'secretRole' is set
      if (secretRole === undefined || secretRole === null) {
        throw new Error("Missing the required parameter 'secretRole' when calling secretsSecretRolesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecretRole;
      return this.apiClient.callApi(
        '/secrets/secret-roles/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsSecretRolesDelete operation.
     * @callback module:api/SecretsApi~secretsSecretRolesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this secret role.
     * @param {module:api/SecretsApi~secretsSecretRolesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    secretsSecretRolesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling secretsSecretRolesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/secrets/secret-roles/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsSecretRolesList operation.
     * @callback module:api/SecretsApi~secretsSecretRolesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretsSecretRolesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/SecretsApi~secretsSecretRolesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretsSecretRolesList200Response}
     */
    secretsSecretRolesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'slug': opts['slug'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretsSecretRolesList200Response;
      return this.apiClient.callApi(
        '/secrets/secret-roles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsSecretRolesPartialUpdate operation.
     * @callback module:api/SecretsApi~secretsSecretRolesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this secret role.
     * @param {module:model/SecretRole} secretRole 
     * @param {module:api/SecretsApi~secretsSecretRolesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretRole}
     */
    secretsSecretRolesPartialUpdate(id, secretRole, callback) {
      let postBody = secretRole;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling secretsSecretRolesPartialUpdate");
      }
      // verify the required parameter 'secretRole' is set
      if (secretRole === undefined || secretRole === null) {
        throw new Error("Missing the required parameter 'secretRole' when calling secretsSecretRolesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecretRole;
      return this.apiClient.callApi(
        '/secrets/secret-roles/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsSecretRolesRead operation.
     * @callback module:api/SecretsApi~secretsSecretRolesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this secret role.
     * @param {module:api/SecretsApi~secretsSecretRolesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretRole}
     */
    secretsSecretRolesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling secretsSecretRolesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretRole;
      return this.apiClient.callApi(
        '/secrets/secret-roles/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsSecretRolesUpdate operation.
     * @callback module:api/SecretsApi~secretsSecretRolesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this secret role.
     * @param {module:model/SecretRole} secretRole 
     * @param {module:api/SecretsApi~secretsSecretRolesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretRole}
     */
    secretsSecretRolesUpdate(id, secretRole, callback) {
      let postBody = secretRole;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling secretsSecretRolesUpdate");
      }
      // verify the required parameter 'secretRole' is set
      if (secretRole === undefined || secretRole === null) {
        throw new Error("Missing the required parameter 'secretRole' when calling secretsSecretRolesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecretRole;
      return this.apiClient.callApi(
        '/secrets/secret-roles/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsSecretsCreate operation.
     * @callback module:api/SecretsApi~secretsSecretsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableSecret} writableSecret 
     * @param {module:api/SecretsApi~secretsSecretsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Secret}
     */
    secretsSecretsCreate(writableSecret, callback) {
      let postBody = writableSecret;
      // verify the required parameter 'writableSecret' is set
      if (writableSecret === undefined || writableSecret === null) {
        throw new Error("Missing the required parameter 'writableSecret' when calling secretsSecretsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Secret;
      return this.apiClient.callApi(
        '/secrets/secrets/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsSecretsDelete operation.
     * @callback module:api/SecretsApi~secretsSecretsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this secret.
     * @param {module:api/SecretsApi~secretsSecretsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    secretsSecretsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling secretsSecretsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/secrets/secrets/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsSecretsList operation.
     * @callback module:api/SecretsApi~secretsSecretsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretsSecretsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [idIn] Multiple values may be separated by commas.
     * @param {String} [q] 
     * @param {String} [roleId] 
     * @param {String} [role] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [tag] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/SecretsApi~secretsSecretsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretsSecretsList200Response}
     */
    secretsSecretsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'id__in': opts['idIn'],
        'q': opts['q'],
        'role_id': opts['roleId'],
        'role': opts['role'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'tag': opts['tag'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretsSecretsList200Response;
      return this.apiClient.callApi(
        '/secrets/secrets/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsSecretsPartialUpdate operation.
     * @callback module:api/SecretsApi~secretsSecretsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this secret.
     * @param {module:model/WritableSecret} writableSecret 
     * @param {module:api/SecretsApi~secretsSecretsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Secret}
     */
    secretsSecretsPartialUpdate(id, writableSecret, callback) {
      let postBody = writableSecret;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling secretsSecretsPartialUpdate");
      }
      // verify the required parameter 'writableSecret' is set
      if (writableSecret === undefined || writableSecret === null) {
        throw new Error("Missing the required parameter 'writableSecret' when calling secretsSecretsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Secret;
      return this.apiClient.callApi(
        '/secrets/secrets/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsSecretsRead operation.
     * @callback module:api/SecretsApi~secretsSecretsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this secret.
     * @param {module:api/SecretsApi~secretsSecretsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Secret}
     */
    secretsSecretsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling secretsSecretsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Secret;
      return this.apiClient.callApi(
        '/secrets/secrets/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsSecretsUpdate operation.
     * @callback module:api/SecretsApi~secretsSecretsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this secret.
     * @param {module:model/WritableSecret} writableSecret 
     * @param {module:api/SecretsApi~secretsSecretsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Secret}
     */
    secretsSecretsUpdate(id, writableSecret, callback) {
      let postBody = writableSecret;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling secretsSecretsUpdate");
      }
      // verify the required parameter 'writableSecret' is set
      if (writableSecret === undefined || writableSecret === null) {
        throw new Error("Missing the required parameter 'writableSecret' when calling secretsSecretsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Secret;
      return this.apiClient.callApi(
        '/secrets/secrets/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
