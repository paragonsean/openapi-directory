/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigContext from '../model/ConfigContext';
import ExportTemplate from '../model/ExportTemplate';
import ExtrasConfigContextsList200Response from '../model/ExtrasConfigContextsList200Response';
import ExtrasExportTemplatesList200Response from '../model/ExtrasExportTemplatesList200Response';
import ExtrasGraphsList200Response from '../model/ExtrasGraphsList200Response';
import ExtrasImageAttachmentsList200Response from '../model/ExtrasImageAttachmentsList200Response';
import ExtrasObjectChangesList200Response from '../model/ExtrasObjectChangesList200Response';
import ExtrasRecentActivityList200Response from '../model/ExtrasRecentActivityList200Response';
import ExtrasTagsList200Response from '../model/ExtrasTagsList200Response';
import ExtrasTopologyMapsList200Response from '../model/ExtrasTopologyMapsList200Response';
import Graph from '../model/Graph';
import ImageAttachment from '../model/ImageAttachment';
import ObjectChange from '../model/ObjectChange';
import Tag from '../model/Tag';
import TopologyMap from '../model/TopologyMap';
import UserAction from '../model/UserAction';
import WritableConfigContext from '../model/WritableConfigContext';
import WritableGraph from '../model/WritableGraph';
import WritableTopologyMap from '../model/WritableTopologyMap';

/**
* Extras service.
* @module api/ExtrasApi
* @version 2.4
*/
export default class ExtrasApi {

    /**
    * Constructs a new ExtrasApi. 
    * @alias module:api/ExtrasApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the extrasChoicesList operation.
     * @callback module:api/ExtrasApi~extrasChoicesListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ExtrasApi~extrasChoicesListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasChoicesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/_choices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasChoicesRead operation.
     * @callback module:api/ExtrasApi~extrasChoicesReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ExtrasApi~extrasChoicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasChoicesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasChoicesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/_choices/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasConfigContextsCreate operation.
     * @callback module:api/ExtrasApi~extrasConfigContextsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableConfigContext} writableConfigContext 
     * @param {module:api/ExtrasApi~extrasConfigContextsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigContext}
     */
    extrasConfigContextsCreate(writableConfigContext, callback) {
      let postBody = writableConfigContext;
      // verify the required parameter 'writableConfigContext' is set
      if (writableConfigContext === undefined || writableConfigContext === null) {
        throw new Error("Missing the required parameter 'writableConfigContext' when calling extrasConfigContextsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigContext;
      return this.apiClient.callApi(
        '/extras/config-contexts/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasConfigContextsDelete operation.
     * @callback module:api/ExtrasApi~extrasConfigContextsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this config context.
     * @param {module:api/ExtrasApi~extrasConfigContextsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasConfigContextsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasConfigContextsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/config-contexts/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasConfigContextsList operation.
     * @callback module:api/ExtrasApi~extrasConfigContextsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtrasConfigContextsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [isActive] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [roleId] 
     * @param {String} [role] 
     * @param {String} [platformId] 
     * @param {String} [platform] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/ExtrasApi~extrasConfigContextsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtrasConfigContextsList200Response}
     */
    extrasConfigContextsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'is_active': opts['isActive'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'role_id': opts['roleId'],
        'role': opts['role'],
        'platform_id': opts['platformId'],
        'platform': opts['platform'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtrasConfigContextsList200Response;
      return this.apiClient.callApi(
        '/extras/config-contexts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasConfigContextsPartialUpdate operation.
     * @callback module:api/ExtrasApi~extrasConfigContextsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this config context.
     * @param {module:model/WritableConfigContext} writableConfigContext 
     * @param {module:api/ExtrasApi~extrasConfigContextsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigContext}
     */
    extrasConfigContextsPartialUpdate(id, writableConfigContext, callback) {
      let postBody = writableConfigContext;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasConfigContextsPartialUpdate");
      }
      // verify the required parameter 'writableConfigContext' is set
      if (writableConfigContext === undefined || writableConfigContext === null) {
        throw new Error("Missing the required parameter 'writableConfigContext' when calling extrasConfigContextsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigContext;
      return this.apiClient.callApi(
        '/extras/config-contexts/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasConfigContextsRead operation.
     * @callback module:api/ExtrasApi~extrasConfigContextsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this config context.
     * @param {module:api/ExtrasApi~extrasConfigContextsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigContext}
     */
    extrasConfigContextsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasConfigContextsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigContext;
      return this.apiClient.callApi(
        '/extras/config-contexts/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasConfigContextsUpdate operation.
     * @callback module:api/ExtrasApi~extrasConfigContextsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this config context.
     * @param {module:model/WritableConfigContext} writableConfigContext 
     * @param {module:api/ExtrasApi~extrasConfigContextsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigContext}
     */
    extrasConfigContextsUpdate(id, writableConfigContext, callback) {
      let postBody = writableConfigContext;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasConfigContextsUpdate");
      }
      // verify the required parameter 'writableConfigContext' is set
      if (writableConfigContext === undefined || writableConfigContext === null) {
        throw new Error("Missing the required parameter 'writableConfigContext' when calling extrasConfigContextsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigContext;
      return this.apiClient.callApi(
        '/extras/config-contexts/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasExportTemplatesCreate operation.
     * @callback module:api/ExtrasApi~extrasExportTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/ExportTemplate} exportTemplate 
     * @param {module:api/ExtrasApi~extrasExportTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportTemplate}
     */
    extrasExportTemplatesCreate(exportTemplate, callback) {
      let postBody = exportTemplate;
      // verify the required parameter 'exportTemplate' is set
      if (exportTemplate === undefined || exportTemplate === null) {
        throw new Error("Missing the required parameter 'exportTemplate' when calling extrasExportTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExportTemplate;
      return this.apiClient.callApi(
        '/extras/export-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasExportTemplatesDelete operation.
     * @callback module:api/ExtrasApi~extrasExportTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this export template.
     * @param {module:api/ExtrasApi~extrasExportTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasExportTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasExportTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/export-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasExportTemplatesList operation.
     * @callback module:api/ExtrasApi~extrasExportTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtrasExportTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [contentType] 
     * @param {String} [name] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/ExtrasApi~extrasExportTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtrasExportTemplatesList200Response}
     */
    extrasExportTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'content_type': opts['contentType'],
        'name': opts['name'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtrasExportTemplatesList200Response;
      return this.apiClient.callApi(
        '/extras/export-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasExportTemplatesPartialUpdate operation.
     * @callback module:api/ExtrasApi~extrasExportTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this export template.
     * @param {module:model/ExportTemplate} exportTemplate 
     * @param {module:api/ExtrasApi~extrasExportTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportTemplate}
     */
    extrasExportTemplatesPartialUpdate(id, exportTemplate, callback) {
      let postBody = exportTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasExportTemplatesPartialUpdate");
      }
      // verify the required parameter 'exportTemplate' is set
      if (exportTemplate === undefined || exportTemplate === null) {
        throw new Error("Missing the required parameter 'exportTemplate' when calling extrasExportTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExportTemplate;
      return this.apiClient.callApi(
        '/extras/export-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasExportTemplatesRead operation.
     * @callback module:api/ExtrasApi~extrasExportTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this export template.
     * @param {module:api/ExtrasApi~extrasExportTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportTemplate}
     */
    extrasExportTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasExportTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportTemplate;
      return this.apiClient.callApi(
        '/extras/export-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasExportTemplatesUpdate operation.
     * @callback module:api/ExtrasApi~extrasExportTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this export template.
     * @param {module:model/ExportTemplate} exportTemplate 
     * @param {module:api/ExtrasApi~extrasExportTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportTemplate}
     */
    extrasExportTemplatesUpdate(id, exportTemplate, callback) {
      let postBody = exportTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasExportTemplatesUpdate");
      }
      // verify the required parameter 'exportTemplate' is set
      if (exportTemplate === undefined || exportTemplate === null) {
        throw new Error("Missing the required parameter 'exportTemplate' when calling extrasExportTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExportTemplate;
      return this.apiClient.callApi(
        '/extras/export-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasGraphsCreate operation.
     * @callback module:api/ExtrasApi~extrasGraphsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Graph} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableGraph} writableGraph 
     * @param {module:api/ExtrasApi~extrasGraphsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Graph}
     */
    extrasGraphsCreate(writableGraph, callback) {
      let postBody = writableGraph;
      // verify the required parameter 'writableGraph' is set
      if (writableGraph === undefined || writableGraph === null) {
        throw new Error("Missing the required parameter 'writableGraph' when calling extrasGraphsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Graph;
      return this.apiClient.callApi(
        '/extras/graphs/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasGraphsDelete operation.
     * @callback module:api/ExtrasApi~extrasGraphsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this graph.
     * @param {module:api/ExtrasApi~extrasGraphsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasGraphsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasGraphsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/graphs/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasGraphsList operation.
     * @callback module:api/ExtrasApi~extrasGraphsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtrasGraphsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [type] 
     * @param {String} [name] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/ExtrasApi~extrasGraphsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtrasGraphsList200Response}
     */
    extrasGraphsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'name': opts['name'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtrasGraphsList200Response;
      return this.apiClient.callApi(
        '/extras/graphs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasGraphsPartialUpdate operation.
     * @callback module:api/ExtrasApi~extrasGraphsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Graph} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this graph.
     * @param {module:model/WritableGraph} writableGraph 
     * @param {module:api/ExtrasApi~extrasGraphsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Graph}
     */
    extrasGraphsPartialUpdate(id, writableGraph, callback) {
      let postBody = writableGraph;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasGraphsPartialUpdate");
      }
      // verify the required parameter 'writableGraph' is set
      if (writableGraph === undefined || writableGraph === null) {
        throw new Error("Missing the required parameter 'writableGraph' when calling extrasGraphsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Graph;
      return this.apiClient.callApi(
        '/extras/graphs/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasGraphsRead operation.
     * @callback module:api/ExtrasApi~extrasGraphsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Graph} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this graph.
     * @param {module:api/ExtrasApi~extrasGraphsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Graph}
     */
    extrasGraphsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasGraphsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Graph;
      return this.apiClient.callApi(
        '/extras/graphs/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasGraphsUpdate operation.
     * @callback module:api/ExtrasApi~extrasGraphsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Graph} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this graph.
     * @param {module:model/WritableGraph} writableGraph 
     * @param {module:api/ExtrasApi~extrasGraphsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Graph}
     */
    extrasGraphsUpdate(id, writableGraph, callback) {
      let postBody = writableGraph;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasGraphsUpdate");
      }
      // verify the required parameter 'writableGraph' is set
      if (writableGraph === undefined || writableGraph === null) {
        throw new Error("Missing the required parameter 'writableGraph' when calling extrasGraphsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Graph;
      return this.apiClient.callApi(
        '/extras/graphs/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasImageAttachmentsCreate operation.
     * @callback module:api/ExtrasApi~extrasImageAttachmentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageAttachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/ImageAttachment} imageAttachment 
     * @param {module:api/ExtrasApi~extrasImageAttachmentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageAttachment}
     */
    extrasImageAttachmentsCreate(imageAttachment, callback) {
      let postBody = imageAttachment;
      // verify the required parameter 'imageAttachment' is set
      if (imageAttachment === undefined || imageAttachment === null) {
        throw new Error("Missing the required parameter 'imageAttachment' when calling extrasImageAttachmentsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImageAttachment;
      return this.apiClient.callApi(
        '/extras/image-attachments/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasImageAttachmentsDelete operation.
     * @callback module:api/ExtrasApi~extrasImageAttachmentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this image attachment.
     * @param {module:api/ExtrasApi~extrasImageAttachmentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasImageAttachmentsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasImageAttachmentsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/image-attachments/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasImageAttachmentsList operation.
     * @callback module:api/ExtrasApi~extrasImageAttachmentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtrasImageAttachmentsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/ExtrasApi~extrasImageAttachmentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtrasImageAttachmentsList200Response}
     */
    extrasImageAttachmentsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtrasImageAttachmentsList200Response;
      return this.apiClient.callApi(
        '/extras/image-attachments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasImageAttachmentsPartialUpdate operation.
     * @callback module:api/ExtrasApi~extrasImageAttachmentsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageAttachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this image attachment.
     * @param {module:model/ImageAttachment} imageAttachment 
     * @param {module:api/ExtrasApi~extrasImageAttachmentsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageAttachment}
     */
    extrasImageAttachmentsPartialUpdate(id, imageAttachment, callback) {
      let postBody = imageAttachment;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasImageAttachmentsPartialUpdate");
      }
      // verify the required parameter 'imageAttachment' is set
      if (imageAttachment === undefined || imageAttachment === null) {
        throw new Error("Missing the required parameter 'imageAttachment' when calling extrasImageAttachmentsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImageAttachment;
      return this.apiClient.callApi(
        '/extras/image-attachments/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasImageAttachmentsRead operation.
     * @callback module:api/ExtrasApi~extrasImageAttachmentsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageAttachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this image attachment.
     * @param {module:api/ExtrasApi~extrasImageAttachmentsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageAttachment}
     */
    extrasImageAttachmentsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasImageAttachmentsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageAttachment;
      return this.apiClient.callApi(
        '/extras/image-attachments/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasImageAttachmentsUpdate operation.
     * @callback module:api/ExtrasApi~extrasImageAttachmentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageAttachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this image attachment.
     * @param {module:model/ImageAttachment} imageAttachment 
     * @param {module:api/ExtrasApi~extrasImageAttachmentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageAttachment}
     */
    extrasImageAttachmentsUpdate(id, imageAttachment, callback) {
      let postBody = imageAttachment;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasImageAttachmentsUpdate");
      }
      // verify the required parameter 'imageAttachment' is set
      if (imageAttachment === undefined || imageAttachment === null) {
        throw new Error("Missing the required parameter 'imageAttachment' when calling extrasImageAttachmentsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImageAttachment;
      return this.apiClient.callApi(
        '/extras/image-attachments/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasObjectChangesList operation.
     * @callback module:api/ExtrasApi~extrasObjectChangesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtrasObjectChangesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of recent changes.
     * @param {Object} opts Optional parameters
     * @param {String} [user] 
     * @param {String} [userName] 
     * @param {String} [requestId] 
     * @param {String} [action] 
     * @param {String} [changedObjectType] 
     * @param {String} [objectRepr] 
     * @param {String} [q] 
     * @param {String} [time] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/ExtrasApi~extrasObjectChangesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtrasObjectChangesList200Response}
     */
    extrasObjectChangesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'user': opts['user'],
        'user_name': opts['userName'],
        'request_id': opts['requestId'],
        'action': opts['action'],
        'changed_object_type': opts['changedObjectType'],
        'object_repr': opts['objectRepr'],
        'q': opts['q'],
        'time': opts['time'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtrasObjectChangesList200Response;
      return this.apiClient.callApi(
        '/extras/object-changes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasObjectChangesRead operation.
     * @callback module:api/ExtrasApi~extrasObjectChangesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectChange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of recent changes.
     * @param {Number} id A unique integer value identifying this object change.
     * @param {module:api/ExtrasApi~extrasObjectChangesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectChange}
     */
    extrasObjectChangesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasObjectChangesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ObjectChange;
      return this.apiClient.callApi(
        '/extras/object-changes/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasRecentActivityList operation.
     * @callback module:api/ExtrasApi~extrasRecentActivityListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtrasRecentActivityList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [user] 
     * @param {String} [username] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/ExtrasApi~extrasRecentActivityListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtrasRecentActivityList200Response}
     */
    extrasRecentActivityList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'user': opts['user'],
        'username': opts['username'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtrasRecentActivityList200Response;
      return this.apiClient.callApi(
        '/extras/recent-activity/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasRecentActivityRead operation.
     * @callback module:api/ExtrasApi~extrasRecentActivityReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this user action.
     * @param {module:api/ExtrasApi~extrasRecentActivityReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAction}
     */
    extrasRecentActivityRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasRecentActivityRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserAction;
      return this.apiClient.callApi(
        '/extras/recent-activity/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTagsCreate operation.
     * @callback module:api/ExtrasApi~extrasTagsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Tag} tag 
     * @param {module:api/ExtrasApi~extrasTagsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    extrasTagsCreate(tag, callback) {
      let postBody = tag;
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling extrasTagsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/extras/tags/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTagsDelete operation.
     * @callback module:api/ExtrasApi~extrasTagsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this Tag.
     * @param {module:api/ExtrasApi~extrasTagsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasTagsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasTagsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/tags/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTagsList operation.
     * @callback module:api/ExtrasApi~extrasTagsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtrasTagsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [q] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/ExtrasApi~extrasTagsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtrasTagsList200Response}
     */
    extrasTagsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'slug': opts['slug'],
        'q': opts['q'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtrasTagsList200Response;
      return this.apiClient.callApi(
        '/extras/tags/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTagsPartialUpdate operation.
     * @callback module:api/ExtrasApi~extrasTagsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this Tag.
     * @param {module:model/Tag} tag 
     * @param {module:api/ExtrasApi~extrasTagsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    extrasTagsPartialUpdate(id, tag, callback) {
      let postBody = tag;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasTagsPartialUpdate");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling extrasTagsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/extras/tags/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTagsRead operation.
     * @callback module:api/ExtrasApi~extrasTagsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this Tag.
     * @param {module:api/ExtrasApi~extrasTagsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    extrasTagsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasTagsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/extras/tags/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTagsUpdate operation.
     * @callback module:api/ExtrasApi~extrasTagsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this Tag.
     * @param {module:model/Tag} tag 
     * @param {module:api/ExtrasApi~extrasTagsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    extrasTagsUpdate(id, tag, callback) {
      let postBody = tag;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasTagsUpdate");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling extrasTagsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/extras/tags/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTopologyMapsCreate operation.
     * @callback module:api/ExtrasApi~extrasTopologyMapsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopologyMap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableTopologyMap} writableTopologyMap 
     * @param {module:api/ExtrasApi~extrasTopologyMapsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopologyMap}
     */
    extrasTopologyMapsCreate(writableTopologyMap, callback) {
      let postBody = writableTopologyMap;
      // verify the required parameter 'writableTopologyMap' is set
      if (writableTopologyMap === undefined || writableTopologyMap === null) {
        throw new Error("Missing the required parameter 'writableTopologyMap' when calling extrasTopologyMapsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TopologyMap;
      return this.apiClient.callApi(
        '/extras/topology-maps/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTopologyMapsDelete operation.
     * @callback module:api/ExtrasApi~extrasTopologyMapsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this topology map.
     * @param {module:api/ExtrasApi~extrasTopologyMapsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasTopologyMapsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasTopologyMapsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/topology-maps/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTopologyMapsList operation.
     * @callback module:api/ExtrasApi~extrasTopologyMapsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtrasTopologyMapsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/ExtrasApi~extrasTopologyMapsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtrasTopologyMapsList200Response}
     */
    extrasTopologyMapsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'slug': opts['slug'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtrasTopologyMapsList200Response;
      return this.apiClient.callApi(
        '/extras/topology-maps/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTopologyMapsPartialUpdate operation.
     * @callback module:api/ExtrasApi~extrasTopologyMapsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopologyMap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this topology map.
     * @param {module:model/WritableTopologyMap} writableTopologyMap 
     * @param {module:api/ExtrasApi~extrasTopologyMapsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopologyMap}
     */
    extrasTopologyMapsPartialUpdate(id, writableTopologyMap, callback) {
      let postBody = writableTopologyMap;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasTopologyMapsPartialUpdate");
      }
      // verify the required parameter 'writableTopologyMap' is set
      if (writableTopologyMap === undefined || writableTopologyMap === null) {
        throw new Error("Missing the required parameter 'writableTopologyMap' when calling extrasTopologyMapsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TopologyMap;
      return this.apiClient.callApi(
        '/extras/topology-maps/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTopologyMapsRead operation.
     * @callback module:api/ExtrasApi~extrasTopologyMapsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopologyMap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this topology map.
     * @param {module:api/ExtrasApi~extrasTopologyMapsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopologyMap}
     */
    extrasTopologyMapsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasTopologyMapsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TopologyMap;
      return this.apiClient.callApi(
        '/extras/topology-maps/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTopologyMapsRender operation.
     * @callback module:api/ExtrasApi~extrasTopologyMapsRenderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopologyMap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this topology map.
     * @param {module:api/ExtrasApi~extrasTopologyMapsRenderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopologyMap}
     */
    extrasTopologyMapsRender(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasTopologyMapsRender");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TopologyMap;
      return this.apiClient.callApi(
        '/extras/topology-maps/{id}/render/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTopologyMapsUpdate operation.
     * @callback module:api/ExtrasApi~extrasTopologyMapsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopologyMap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this topology map.
     * @param {module:model/WritableTopologyMap} writableTopologyMap 
     * @param {module:api/ExtrasApi~extrasTopologyMapsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopologyMap}
     */
    extrasTopologyMapsUpdate(id, writableTopologyMap, callback) {
      let postBody = writableTopologyMap;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasTopologyMapsUpdate");
      }
      // verify the required parameter 'writableTopologyMap' is set
      if (writableTopologyMap === undefined || writableTopologyMap === null) {
        throw new Error("Missing the required parameter 'writableTopologyMap' when calling extrasTopologyMapsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TopologyMap;
      return this.apiClient.callApi(
        '/extras/topology-maps/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
