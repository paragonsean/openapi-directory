/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TenancyTenantGroupsList200Response from '../model/TenancyTenantGroupsList200Response';
import TenancyTenantsList200Response from '../model/TenancyTenantsList200Response';
import Tenant from '../model/Tenant';
import TenantGroup from '../model/TenantGroup';
import WritableTenant from '../model/WritableTenant';

/**
* Tenancy service.
* @module api/TenancyApi
* @version 2.4
*/
export default class TenancyApi {

    /**
    * Constructs a new TenancyApi. 
    * @alias module:api/TenancyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tenancyChoicesList operation.
     * @callback module:api/TenancyApi~tenancyChoicesListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/TenancyApi~tenancyChoicesListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyChoicesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/_choices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyChoicesRead operation.
     * @callback module:api/TenancyApi~tenancyChoicesReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/TenancyApi~tenancyChoicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyChoicesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyChoicesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/_choices/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsCreate operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/TenantGroup} tenantGroup 
     * @param {module:api/TenancyApi~tenancyTenantGroupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantGroup}
     */
    tenancyTenantGroupsCreate(tenantGroup, callback) {
      let postBody = tenantGroup;
      // verify the required parameter 'tenantGroup' is set
      if (tenantGroup === undefined || tenantGroup === null) {
        throw new Error("Missing the required parameter 'tenantGroup' when calling tenancyTenantGroupsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TenantGroup;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsDelete operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant group.
     * @param {module:api/TenancyApi~tenancyTenantGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyTenantGroupsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantGroupsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsList operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenancyTenantGroupsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/TenancyApi~tenancyTenantGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenancyTenantGroupsList200Response}
     */
    tenancyTenantGroupsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'slug': opts['slug'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TenancyTenantGroupsList200Response;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsPartialUpdate operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant group.
     * @param {module:model/TenantGroup} tenantGroup 
     * @param {module:api/TenancyApi~tenancyTenantGroupsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantGroup}
     */
    tenancyTenantGroupsPartialUpdate(id, tenantGroup, callback) {
      let postBody = tenantGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantGroupsPartialUpdate");
      }
      // verify the required parameter 'tenantGroup' is set
      if (tenantGroup === undefined || tenantGroup === null) {
        throw new Error("Missing the required parameter 'tenantGroup' when calling tenancyTenantGroupsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TenantGroup;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsRead operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant group.
     * @param {module:api/TenancyApi~tenancyTenantGroupsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantGroup}
     */
    tenancyTenantGroupsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantGroupsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TenantGroup;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsUpdate operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant group.
     * @param {module:model/TenantGroup} tenantGroup 
     * @param {module:api/TenancyApi~tenancyTenantGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantGroup}
     */
    tenancyTenantGroupsUpdate(id, tenantGroup, callback) {
      let postBody = tenantGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantGroupsUpdate");
      }
      // verify the required parameter 'tenantGroup' is set
      if (tenantGroup === undefined || tenantGroup === null) {
        throw new Error("Missing the required parameter 'tenantGroup' when calling tenancyTenantGroupsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TenantGroup;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsCreate operation.
     * @callback module:api/TenancyApi~tenancyTenantsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableTenant} writableTenant 
     * @param {module:api/TenancyApi~tenancyTenantsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    tenancyTenantsCreate(writableTenant, callback) {
      let postBody = writableTenant;
      // verify the required parameter 'writableTenant' is set
      if (writableTenant === undefined || writableTenant === null) {
        throw new Error("Missing the required parameter 'writableTenant' when calling tenancyTenantsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/tenancy/tenants/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsDelete operation.
     * @callback module:api/TenancyApi~tenancyTenantsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant.
     * @param {module:api/TenancyApi~tenancyTenantsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyTenantsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/tenants/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsList operation.
     * @callback module:api/TenancyApi~tenancyTenantsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenancyTenantsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [idIn] Multiple values may be separated by commas.
     * @param {String} [q] 
     * @param {String} [groupId] 
     * @param {String} [group] 
     * @param {String} [tag] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/TenancyApi~tenancyTenantsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenancyTenantsList200Response}
     */
    tenancyTenantsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'id__in': opts['idIn'],
        'q': opts['q'],
        'group_id': opts['groupId'],
        'group': opts['group'],
        'tag': opts['tag'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TenancyTenantsList200Response;
      return this.apiClient.callApi(
        '/tenancy/tenants/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsPartialUpdate operation.
     * @callback module:api/TenancyApi~tenancyTenantsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant.
     * @param {module:model/WritableTenant} writableTenant 
     * @param {module:api/TenancyApi~tenancyTenantsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    tenancyTenantsPartialUpdate(id, writableTenant, callback) {
      let postBody = writableTenant;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantsPartialUpdate");
      }
      // verify the required parameter 'writableTenant' is set
      if (writableTenant === undefined || writableTenant === null) {
        throw new Error("Missing the required parameter 'writableTenant' when calling tenancyTenantsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/tenancy/tenants/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsRead operation.
     * @callback module:api/TenancyApi~tenancyTenantsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant.
     * @param {module:api/TenancyApi~tenancyTenantsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    tenancyTenantsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/tenancy/tenants/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsUpdate operation.
     * @callback module:api/TenancyApi~tenancyTenantsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant.
     * @param {module:model/WritableTenant} writableTenant 
     * @param {module:api/TenancyApi~tenancyTenantsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    tenancyTenantsUpdate(id, writableTenant, callback) {
      let postBody = writableTenant;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantsUpdate");
      }
      // verify the required parameter 'writableTenant' is set
      if (writableTenant === undefined || writableTenant === null) {
        throw new Error("Missing the required parameter 'writableTenant' when calling tenancyTenantsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/tenancy/tenants/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
