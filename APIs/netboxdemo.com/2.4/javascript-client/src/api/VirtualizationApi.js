/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Cluster from '../model/Cluster';
import ClusterGroup from '../model/ClusterGroup';
import ClusterType from '../model/ClusterType';
import DcimInterfacesList200Response from '../model/DcimInterfacesList200Response';
import Interface from '../model/Interface';
import VirtualMachine from '../model/VirtualMachine';
import VirtualMachineWithConfigContext from '../model/VirtualMachineWithConfigContext';
import VirtualizationClusterGroupsList200Response from '../model/VirtualizationClusterGroupsList200Response';
import VirtualizationClusterTypesList200Response from '../model/VirtualizationClusterTypesList200Response';
import VirtualizationClustersList200Response from '../model/VirtualizationClustersList200Response';
import VirtualizationVirtualMachinesList200Response from '../model/VirtualizationVirtualMachinesList200Response';
import WritableCluster from '../model/WritableCluster';
import WritableInterface from '../model/WritableInterface';
import WritableVirtualMachine from '../model/WritableVirtualMachine';

/**
* Virtualization service.
* @module api/VirtualizationApi
* @version 2.4
*/
export default class VirtualizationApi {

    /**
    * Constructs a new VirtualizationApi. 
    * @alias module:api/VirtualizationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the virtualizationChoicesList operation.
     * @callback module:api/VirtualizationApi~virtualizationChoicesListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/VirtualizationApi~virtualizationChoicesListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationChoicesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/_choices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationChoicesRead operation.
     * @callback module:api/VirtualizationApi~virtualizationChoicesReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/VirtualizationApi~virtualizationChoicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationChoicesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationChoicesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/_choices/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterGroupsCreate operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterGroupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/ClusterGroup} clusterGroup 
     * @param {module:api/VirtualizationApi~virtualizationClusterGroupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterGroup}
     */
    virtualizationClusterGroupsCreate(clusterGroup, callback) {
      let postBody = clusterGroup;
      // verify the required parameter 'clusterGroup' is set
      if (clusterGroup === undefined || clusterGroup === null) {
        throw new Error("Missing the required parameter 'clusterGroup' when calling virtualizationClusterGroupsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterGroup;
      return this.apiClient.callApi(
        '/virtualization/cluster-groups/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterGroupsDelete operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster group.
     * @param {module:api/VirtualizationApi~virtualizationClusterGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationClusterGroupsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClusterGroupsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/cluster-groups/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterGroupsList operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualizationClusterGroupsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/VirtualizationApi~virtualizationClusterGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualizationClusterGroupsList200Response}
     */
    virtualizationClusterGroupsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'slug': opts['slug'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualizationClusterGroupsList200Response;
      return this.apiClient.callApi(
        '/virtualization/cluster-groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterGroupsPartialUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterGroupsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster group.
     * @param {module:model/ClusterGroup} clusterGroup 
     * @param {module:api/VirtualizationApi~virtualizationClusterGroupsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterGroup}
     */
    virtualizationClusterGroupsPartialUpdate(id, clusterGroup, callback) {
      let postBody = clusterGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClusterGroupsPartialUpdate");
      }
      // verify the required parameter 'clusterGroup' is set
      if (clusterGroup === undefined || clusterGroup === null) {
        throw new Error("Missing the required parameter 'clusterGroup' when calling virtualizationClusterGroupsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterGroup;
      return this.apiClient.callApi(
        '/virtualization/cluster-groups/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterGroupsRead operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterGroupsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster group.
     * @param {module:api/VirtualizationApi~virtualizationClusterGroupsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterGroup}
     */
    virtualizationClusterGroupsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClusterGroupsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterGroup;
      return this.apiClient.callApi(
        '/virtualization/cluster-groups/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterGroupsUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster group.
     * @param {module:model/ClusterGroup} clusterGroup 
     * @param {module:api/VirtualizationApi~virtualizationClusterGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterGroup}
     */
    virtualizationClusterGroupsUpdate(id, clusterGroup, callback) {
      let postBody = clusterGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClusterGroupsUpdate");
      }
      // verify the required parameter 'clusterGroup' is set
      if (clusterGroup === undefined || clusterGroup === null) {
        throw new Error("Missing the required parameter 'clusterGroup' when calling virtualizationClusterGroupsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterGroup;
      return this.apiClient.callApi(
        '/virtualization/cluster-groups/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterTypesCreate operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterTypesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/ClusterType} clusterType 
     * @param {module:api/VirtualizationApi~virtualizationClusterTypesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterType}
     */
    virtualizationClusterTypesCreate(clusterType, callback) {
      let postBody = clusterType;
      // verify the required parameter 'clusterType' is set
      if (clusterType === undefined || clusterType === null) {
        throw new Error("Missing the required parameter 'clusterType' when calling virtualizationClusterTypesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterType;
      return this.apiClient.callApi(
        '/virtualization/cluster-types/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterTypesDelete operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterTypesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster type.
     * @param {module:api/VirtualizationApi~virtualizationClusterTypesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationClusterTypesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClusterTypesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/cluster-types/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterTypesList operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterTypesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualizationClusterTypesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/VirtualizationApi~virtualizationClusterTypesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualizationClusterTypesList200Response}
     */
    virtualizationClusterTypesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'slug': opts['slug'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualizationClusterTypesList200Response;
      return this.apiClient.callApi(
        '/virtualization/cluster-types/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterTypesPartialUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterTypesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster type.
     * @param {module:model/ClusterType} clusterType 
     * @param {module:api/VirtualizationApi~virtualizationClusterTypesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterType}
     */
    virtualizationClusterTypesPartialUpdate(id, clusterType, callback) {
      let postBody = clusterType;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClusterTypesPartialUpdate");
      }
      // verify the required parameter 'clusterType' is set
      if (clusterType === undefined || clusterType === null) {
        throw new Error("Missing the required parameter 'clusterType' when calling virtualizationClusterTypesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterType;
      return this.apiClient.callApi(
        '/virtualization/cluster-types/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterTypesRead operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterTypesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster type.
     * @param {module:api/VirtualizationApi~virtualizationClusterTypesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterType}
     */
    virtualizationClusterTypesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClusterTypesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterType;
      return this.apiClient.callApi(
        '/virtualization/cluster-types/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterTypesUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterTypesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster type.
     * @param {module:model/ClusterType} clusterType 
     * @param {module:api/VirtualizationApi~virtualizationClusterTypesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterType}
     */
    virtualizationClusterTypesUpdate(id, clusterType, callback) {
      let postBody = clusterType;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClusterTypesUpdate");
      }
      // verify the required parameter 'clusterType' is set
      if (clusterType === undefined || clusterType === null) {
        throw new Error("Missing the required parameter 'clusterType' when calling virtualizationClusterTypesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterType;
      return this.apiClient.callApi(
        '/virtualization/cluster-types/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClustersCreate operation.
     * @callback module:api/VirtualizationApi~virtualizationClustersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cluster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableCluster} writableCluster 
     * @param {module:api/VirtualizationApi~virtualizationClustersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cluster}
     */
    virtualizationClustersCreate(writableCluster, callback) {
      let postBody = writableCluster;
      // verify the required parameter 'writableCluster' is set
      if (writableCluster === undefined || writableCluster === null) {
        throw new Error("Missing the required parameter 'writableCluster' when calling virtualizationClustersCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cluster;
      return this.apiClient.callApi(
        '/virtualization/clusters/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClustersDelete operation.
     * @callback module:api/VirtualizationApi~virtualizationClustersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster.
     * @param {module:api/VirtualizationApi~virtualizationClustersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationClustersDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClustersDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/clusters/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClustersList operation.
     * @callback module:api/VirtualizationApi~virtualizationClustersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualizationClustersList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [idIn] Multiple values may be separated by commas.
     * @param {String} [q] 
     * @param {String} [groupId] 
     * @param {String} [group] 
     * @param {String} [typeId] 
     * @param {String} [type] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [tag] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/VirtualizationApi~virtualizationClustersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualizationClustersList200Response}
     */
    virtualizationClustersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'id__in': opts['idIn'],
        'q': opts['q'],
        'group_id': opts['groupId'],
        'group': opts['group'],
        'type_id': opts['typeId'],
        'type': opts['type'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'tag': opts['tag'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualizationClustersList200Response;
      return this.apiClient.callApi(
        '/virtualization/clusters/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClustersPartialUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClustersPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cluster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster.
     * @param {module:model/WritableCluster} writableCluster 
     * @param {module:api/VirtualizationApi~virtualizationClustersPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cluster}
     */
    virtualizationClustersPartialUpdate(id, writableCluster, callback) {
      let postBody = writableCluster;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClustersPartialUpdate");
      }
      // verify the required parameter 'writableCluster' is set
      if (writableCluster === undefined || writableCluster === null) {
        throw new Error("Missing the required parameter 'writableCluster' when calling virtualizationClustersPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cluster;
      return this.apiClient.callApi(
        '/virtualization/clusters/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClustersRead operation.
     * @callback module:api/VirtualizationApi~virtualizationClustersReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cluster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster.
     * @param {module:api/VirtualizationApi~virtualizationClustersReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cluster}
     */
    virtualizationClustersRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClustersRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Cluster;
      return this.apiClient.callApi(
        '/virtualization/clusters/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClustersUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClustersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cluster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster.
     * @param {module:model/WritableCluster} writableCluster 
     * @param {module:api/VirtualizationApi~virtualizationClustersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cluster}
     */
    virtualizationClustersUpdate(id, writableCluster, callback) {
      let postBody = writableCluster;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClustersUpdate");
      }
      // verify the required parameter 'writableCluster' is set
      if (writableCluster === undefined || writableCluster === null) {
        throw new Error("Missing the required parameter 'writableCluster' when calling virtualizationClustersUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cluster;
      return this.apiClient.callApi(
        '/virtualization/clusters/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationInterfacesCreate operation.
     * @callback module:api/VirtualizationApi~virtualizationInterfacesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Interface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableInterface} writableInterface 
     * @param {module:api/VirtualizationApi~virtualizationInterfacesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Interface}
     */
    virtualizationInterfacesCreate(writableInterface, callback) {
      let postBody = writableInterface;
      // verify the required parameter 'writableInterface' is set
      if (writableInterface === undefined || writableInterface === null) {
        throw new Error("Missing the required parameter 'writableInterface' when calling virtualizationInterfacesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Interface;
      return this.apiClient.callApi(
        '/virtualization/interfaces/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationInterfacesDelete operation.
     * @callback module:api/VirtualizationApi~virtualizationInterfacesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:api/VirtualizationApi~virtualizationInterfacesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationInterfacesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationInterfacesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/interfaces/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationInterfacesList operation.
     * @callback module:api/VirtualizationApi~virtualizationInterfacesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimInterfacesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [enabled] 
     * @param {Number} [mtu] 
     * @param {String} [virtualMachineId] 
     * @param {String} [virtualMachine] 
     * @param {String} [macAddress] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/VirtualizationApi~virtualizationInterfacesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimInterfacesList200Response}
     */
    virtualizationInterfacesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'enabled': opts['enabled'],
        'mtu': opts['mtu'],
        'virtual_machine_id': opts['virtualMachineId'],
        'virtual_machine': opts['virtualMachine'],
        'mac_address': opts['macAddress'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimInterfacesList200Response;
      return this.apiClient.callApi(
        '/virtualization/interfaces/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationInterfacesPartialUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationInterfacesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Interface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:model/WritableInterface} writableInterface 
     * @param {module:api/VirtualizationApi~virtualizationInterfacesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Interface}
     */
    virtualizationInterfacesPartialUpdate(id, writableInterface, callback) {
      let postBody = writableInterface;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationInterfacesPartialUpdate");
      }
      // verify the required parameter 'writableInterface' is set
      if (writableInterface === undefined || writableInterface === null) {
        throw new Error("Missing the required parameter 'writableInterface' when calling virtualizationInterfacesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Interface;
      return this.apiClient.callApi(
        '/virtualization/interfaces/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationInterfacesRead operation.
     * @callback module:api/VirtualizationApi~virtualizationInterfacesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Interface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:api/VirtualizationApi~virtualizationInterfacesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Interface}
     */
    virtualizationInterfacesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationInterfacesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Interface;
      return this.apiClient.callApi(
        '/virtualization/interfaces/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationInterfacesUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationInterfacesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Interface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:model/WritableInterface} writableInterface 
     * @param {module:api/VirtualizationApi~virtualizationInterfacesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Interface}
     */
    virtualizationInterfacesUpdate(id, writableInterface, callback) {
      let postBody = writableInterface;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationInterfacesUpdate");
      }
      // verify the required parameter 'writableInterface' is set
      if (writableInterface === undefined || writableInterface === null) {
        throw new Error("Missing the required parameter 'writableInterface' when calling virtualizationInterfacesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Interface;
      return this.apiClient.callApi(
        '/virtualization/interfaces/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationVirtualMachinesCreate operation.
     * @callback module:api/VirtualizationApi~virtualizationVirtualMachinesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualMachine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVirtualMachine} writableVirtualMachine 
     * @param {module:api/VirtualizationApi~virtualizationVirtualMachinesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualMachine}
     */
    virtualizationVirtualMachinesCreate(writableVirtualMachine, callback) {
      let postBody = writableVirtualMachine;
      // verify the required parameter 'writableVirtualMachine' is set
      if (writableVirtualMachine === undefined || writableVirtualMachine === null) {
        throw new Error("Missing the required parameter 'writableVirtualMachine' when calling virtualizationVirtualMachinesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualMachine;
      return this.apiClient.callApi(
        '/virtualization/virtual-machines/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationVirtualMachinesDelete operation.
     * @callback module:api/VirtualizationApi~virtualizationVirtualMachinesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this virtual machine.
     * @param {module:api/VirtualizationApi~virtualizationVirtualMachinesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationVirtualMachinesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationVirtualMachinesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/virtual-machines/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationVirtualMachinesList operation.
     * @callback module:api/VirtualizationApi~virtualizationVirtualMachinesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualizationVirtualMachinesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [cluster] 
     * @param {String} [idIn] Multiple values may be separated by commas.
     * @param {String} [q] 
     * @param {String} [status] 
     * @param {String} [clusterGroupId] 
     * @param {String} [clusterGroup] 
     * @param {String} [clusterTypeId] 
     * @param {String} [clusterType] 
     * @param {String} [clusterId] 
     * @param {Number} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [roleId] 
     * @param {String} [role] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [platformId] 
     * @param {String} [platform] 
     * @param {String} [tag] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/VirtualizationApi~virtualizationVirtualMachinesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualizationVirtualMachinesList200Response}
     */
    virtualizationVirtualMachinesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'cluster': opts['cluster'],
        'id__in': opts['idIn'],
        'q': opts['q'],
        'status': opts['status'],
        'cluster_group_id': opts['clusterGroupId'],
        'cluster_group': opts['clusterGroup'],
        'cluster_type_id': opts['clusterTypeId'],
        'cluster_type': opts['clusterType'],
        'cluster_id': opts['clusterId'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'role_id': opts['roleId'],
        'role': opts['role'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'platform_id': opts['platformId'],
        'platform': opts['platform'],
        'tag': opts['tag'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualizationVirtualMachinesList200Response;
      return this.apiClient.callApi(
        '/virtualization/virtual-machines/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationVirtualMachinesPartialUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationVirtualMachinesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualMachine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this virtual machine.
     * @param {module:model/WritableVirtualMachine} writableVirtualMachine 
     * @param {module:api/VirtualizationApi~virtualizationVirtualMachinesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualMachine}
     */
    virtualizationVirtualMachinesPartialUpdate(id, writableVirtualMachine, callback) {
      let postBody = writableVirtualMachine;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationVirtualMachinesPartialUpdate");
      }
      // verify the required parameter 'writableVirtualMachine' is set
      if (writableVirtualMachine === undefined || writableVirtualMachine === null) {
        throw new Error("Missing the required parameter 'writableVirtualMachine' when calling virtualizationVirtualMachinesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualMachine;
      return this.apiClient.callApi(
        '/virtualization/virtual-machines/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationVirtualMachinesRead operation.
     * @callback module:api/VirtualizationApi~virtualizationVirtualMachinesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualMachineWithConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this virtual machine.
     * @param {module:api/VirtualizationApi~virtualizationVirtualMachinesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualMachineWithConfigContext}
     */
    virtualizationVirtualMachinesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationVirtualMachinesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualMachineWithConfigContext;
      return this.apiClient.callApi(
        '/virtualization/virtual-machines/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationVirtualMachinesUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationVirtualMachinesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualMachine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this virtual machine.
     * @param {module:model/WritableVirtualMachine} writableVirtualMachine 
     * @param {module:api/VirtualizationApi~virtualizationVirtualMachinesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualMachine}
     */
    virtualizationVirtualMachinesUpdate(id, writableVirtualMachine, callback) {
      let postBody = writableVirtualMachine;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationVirtualMachinesUpdate");
      }
      // verify the required parameter 'writableVirtualMachine' is set
      if (writableVirtualMachine === undefined || writableVirtualMachine === null) {
        throw new Error("Missing the required parameter 'writableVirtualMachine' when calling virtualizationVirtualMachinesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualMachine;
      return this.apiClient.callApi(
        '/virtualization/virtual-machines/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
