/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConsolePort from '../model/ConsolePort';
import ConsolePortTemplate from '../model/ConsolePortTemplate';
import ConsoleServerPort from '../model/ConsoleServerPort';
import ConsoleServerPortTemplate from '../model/ConsoleServerPortTemplate';
import DcimConsoleConnectionsList200Response from '../model/DcimConsoleConnectionsList200Response';
import DcimConsolePortTemplatesList200Response from '../model/DcimConsolePortTemplatesList200Response';
import DcimConsoleServerPortTemplatesList200Response from '../model/DcimConsoleServerPortTemplatesList200Response';
import DcimConsoleServerPortsList200Response from '../model/DcimConsoleServerPortsList200Response';
import DcimDeviceBayTemplatesList200Response from '../model/DcimDeviceBayTemplatesList200Response';
import DcimDeviceBaysList200Response from '../model/DcimDeviceBaysList200Response';
import DcimDeviceRolesList200Response from '../model/DcimDeviceRolesList200Response';
import DcimDeviceTypesList200Response from '../model/DcimDeviceTypesList200Response';
import DcimDevicesList200Response from '../model/DcimDevicesList200Response';
import DcimInterfaceConnectionsList200Response from '../model/DcimInterfaceConnectionsList200Response';
import DcimInterfaceTemplatesList200Response from '../model/DcimInterfaceTemplatesList200Response';
import DcimInterfacesList200Response from '../model/DcimInterfacesList200Response';
import DcimInventoryItemsList200Response from '../model/DcimInventoryItemsList200Response';
import DcimManufacturersList200Response from '../model/DcimManufacturersList200Response';
import DcimPlatformsList200Response from '../model/DcimPlatformsList200Response';
import DcimPowerConnectionsList200Response from '../model/DcimPowerConnectionsList200Response';
import DcimPowerOutletTemplatesList200Response from '../model/DcimPowerOutletTemplatesList200Response';
import DcimPowerOutletsList200Response from '../model/DcimPowerOutletsList200Response';
import DcimPowerPortTemplatesList200Response from '../model/DcimPowerPortTemplatesList200Response';
import DcimRackGroupsList200Response from '../model/DcimRackGroupsList200Response';
import DcimRackReservationsList200Response from '../model/DcimRackReservationsList200Response';
import DcimRackRolesList200Response from '../model/DcimRackRolesList200Response';
import DcimRacksList200Response from '../model/DcimRacksList200Response';
import DcimRegionsList200Response from '../model/DcimRegionsList200Response';
import DcimSitesList200Response from '../model/DcimSitesList200Response';
import DcimVirtualChassisList200Response from '../model/DcimVirtualChassisList200Response';
import Device from '../model/Device';
import DeviceBay from '../model/DeviceBay';
import DeviceBayTemplate from '../model/DeviceBayTemplate';
import DeviceRole from '../model/DeviceRole';
import DeviceType from '../model/DeviceType';
import DeviceWithConfigContext from '../model/DeviceWithConfigContext';
import Interface from '../model/Interface';
import InterfaceConnection from '../model/InterfaceConnection';
import InterfaceTemplate from '../model/InterfaceTemplate';
import InventoryItem from '../model/InventoryItem';
import Manufacturer from '../model/Manufacturer';
import Platform from '../model/Platform';
import PowerOutlet from '../model/PowerOutlet';
import PowerOutletTemplate from '../model/PowerOutletTemplate';
import PowerPort from '../model/PowerPort';
import PowerPortTemplate from '../model/PowerPortTemplate';
import Rack from '../model/Rack';
import RackGroup from '../model/RackGroup';
import RackReservation from '../model/RackReservation';
import RackRole from '../model/RackRole';
import Region from '../model/Region';
import Site from '../model/Site';
import VirtualChassis from '../model/VirtualChassis';
import WritableConsolePort from '../model/WritableConsolePort';
import WritableConsolePortTemplate from '../model/WritableConsolePortTemplate';
import WritableConsoleServerPort from '../model/WritableConsoleServerPort';
import WritableConsoleServerPortTemplate from '../model/WritableConsoleServerPortTemplate';
import WritableDevice from '../model/WritableDevice';
import WritableDeviceBay from '../model/WritableDeviceBay';
import WritableDeviceBayTemplate from '../model/WritableDeviceBayTemplate';
import WritableDeviceType from '../model/WritableDeviceType';
import WritableInterface from '../model/WritableInterface';
import WritableInterfaceConnection from '../model/WritableInterfaceConnection';
import WritableInterfaceTemplate from '../model/WritableInterfaceTemplate';
import WritableInventoryItem from '../model/WritableInventoryItem';
import WritablePlatform from '../model/WritablePlatform';
import WritablePowerOutlet from '../model/WritablePowerOutlet';
import WritablePowerOutletTemplate from '../model/WritablePowerOutletTemplate';
import WritablePowerPort from '../model/WritablePowerPort';
import WritablePowerPortTemplate from '../model/WritablePowerPortTemplate';
import WritableRack from '../model/WritableRack';
import WritableRackGroup from '../model/WritableRackGroup';
import WritableRackReservation from '../model/WritableRackReservation';
import WritableRegion from '../model/WritableRegion';
import WritableSite from '../model/WritableSite';
import WritableVirtualChassis from '../model/WritableVirtualChassis';

/**
* Dcim service.
* @module api/DcimApi
* @version 2.4
*/
export default class DcimApi {

    /**
    * Constructs a new DcimApi. 
    * @alias module:api/DcimApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dcimChoicesList operation.
     * @callback module:api/DcimApi~dcimChoicesListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/DcimApi~dcimChoicesListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimChoicesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/_choices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimChoicesRead operation.
     * @callback module:api/DcimApi~dcimChoicesReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/DcimApi~dcimChoicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimChoicesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimChoicesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/_choices/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConnectedDeviceList operation.
     * @callback module:api/DcimApi~dcimConnectedDeviceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * `peer_device`: The name of the peer device * `peer_interface`: The name of the peer interface
     * @param {String} peerDevice The name of the peer device
     * @param {String} peerInterface The name of the peer interface
     * @param {module:api/DcimApi~dcimConnectedDeviceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    dcimConnectedDeviceList(peerDevice, peerInterface, callback) {
      let postBody = null;
      // verify the required parameter 'peerDevice' is set
      if (peerDevice === undefined || peerDevice === null) {
        throw new Error("Missing the required parameter 'peerDevice' when calling dcimConnectedDeviceList");
      }
      // verify the required parameter 'peerInterface' is set
      if (peerInterface === undefined || peerInterface === null) {
        throw new Error("Missing the required parameter 'peerInterface' when calling dcimConnectedDeviceList");
      }

      let pathParams = {
      };
      let queryParams = {
        'peer_device': peerDevice,
        'peer_interface': peerInterface
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/dcim/connected-device/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleConnectionsList operation.
     * @callback module:api/DcimApi~dcimConsoleConnectionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimConsoleConnectionsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [connectionStatus] 
     * @param {String} [site] 
     * @param {String} [device] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimConsoleConnectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimConsoleConnectionsList200Response}
     */
    dcimConsoleConnectionsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'connection_status': opts['connectionStatus'],
        'site': opts['site'],
        'device': opts['device'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimConsoleConnectionsList200Response;
      return this.apiClient.callApi(
        '/dcim/console-connections/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortTemplatesCreate operation.
     * @callback module:api/DcimApi~dcimConsolePortTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableConsolePortTemplate} writableConsolePortTemplate 
     * @param {module:api/DcimApi~dcimConsolePortTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePortTemplate}
     */
    dcimConsolePortTemplatesCreate(writableConsolePortTemplate, callback) {
      let postBody = writableConsolePortTemplate;
      // verify the required parameter 'writableConsolePortTemplate' is set
      if (writableConsolePortTemplate === undefined || writableConsolePortTemplate === null) {
        throw new Error("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsolePortTemplate;
      return this.apiClient.callApi(
        '/dcim/console-port-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortTemplatesDelete operation.
     * @callback module:api/DcimApi~dcimConsolePortTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console port template.
     * @param {module:api/DcimApi~dcimConsolePortTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimConsolePortTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/console-port-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortTemplatesList operation.
     * @callback module:api/DcimApi~dcimConsolePortTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimConsolePortTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [devicetypeId] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimConsolePortTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimConsolePortTemplatesList200Response}
     */
    dcimConsolePortTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'devicetype_id': opts['devicetypeId'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimConsolePortTemplatesList200Response;
      return this.apiClient.callApi(
        '/dcim/console-port-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortTemplatesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimConsolePortTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console port template.
     * @param {module:model/WritableConsolePortTemplate} writableConsolePortTemplate 
     * @param {module:api/DcimApi~dcimConsolePortTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePortTemplate}
     */
    dcimConsolePortTemplatesPartialUpdate(id, writableConsolePortTemplate, callback) {
      let postBody = writableConsolePortTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortTemplatesPartialUpdate");
      }
      // verify the required parameter 'writableConsolePortTemplate' is set
      if (writableConsolePortTemplate === undefined || writableConsolePortTemplate === null) {
        throw new Error("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsolePortTemplate;
      return this.apiClient.callApi(
        '/dcim/console-port-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortTemplatesRead operation.
     * @callback module:api/DcimApi~dcimConsolePortTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console port template.
     * @param {module:api/DcimApi~dcimConsolePortTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePortTemplate}
     */
    dcimConsolePortTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConsolePortTemplate;
      return this.apiClient.callApi(
        '/dcim/console-port-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortTemplatesUpdate operation.
     * @callback module:api/DcimApi~dcimConsolePortTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console port template.
     * @param {module:model/WritableConsolePortTemplate} writableConsolePortTemplate 
     * @param {module:api/DcimApi~dcimConsolePortTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePortTemplate}
     */
    dcimConsolePortTemplatesUpdate(id, writableConsolePortTemplate, callback) {
      let postBody = writableConsolePortTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortTemplatesUpdate");
      }
      // verify the required parameter 'writableConsolePortTemplate' is set
      if (writableConsolePortTemplate === undefined || writableConsolePortTemplate === null) {
        throw new Error("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsolePortTemplate;
      return this.apiClient.callApi(
        '/dcim/console-port-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortsCreate operation.
     * @callback module:api/DcimApi~dcimConsolePortsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableConsolePort} writableConsolePort 
     * @param {module:api/DcimApi~dcimConsolePortsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePort}
     */
    dcimConsolePortsCreate(writableConsolePort, callback) {
      let postBody = writableConsolePort;
      // verify the required parameter 'writableConsolePort' is set
      if (writableConsolePort === undefined || writableConsolePort === null) {
        throw new Error("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsolePort;
      return this.apiClient.callApi(
        '/dcim/console-ports/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortsDelete operation.
     * @callback module:api/DcimApi~dcimConsolePortsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console port.
     * @param {module:api/DcimApi~dcimConsolePortsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimConsolePortsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/console-ports/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortsList operation.
     * @callback module:api/DcimApi~dcimConsolePortsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimConsoleConnectionsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [tag] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimConsolePortsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimConsoleConnectionsList200Response}
     */
    dcimConsolePortsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'tag': opts['tag'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimConsoleConnectionsList200Response;
      return this.apiClient.callApi(
        '/dcim/console-ports/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimConsolePortsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console port.
     * @param {module:model/WritableConsolePort} writableConsolePort 
     * @param {module:api/DcimApi~dcimConsolePortsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePort}
     */
    dcimConsolePortsPartialUpdate(id, writableConsolePort, callback) {
      let postBody = writableConsolePort;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortsPartialUpdate");
      }
      // verify the required parameter 'writableConsolePort' is set
      if (writableConsolePort === undefined || writableConsolePort === null) {
        throw new Error("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsolePort;
      return this.apiClient.callApi(
        '/dcim/console-ports/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortsRead operation.
     * @callback module:api/DcimApi~dcimConsolePortsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console port.
     * @param {module:api/DcimApi~dcimConsolePortsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePort}
     */
    dcimConsolePortsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConsolePort;
      return this.apiClient.callApi(
        '/dcim/console-ports/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortsUpdate operation.
     * @callback module:api/DcimApi~dcimConsolePortsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console port.
     * @param {module:model/WritableConsolePort} writableConsolePort 
     * @param {module:api/DcimApi~dcimConsolePortsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePort}
     */
    dcimConsolePortsUpdate(id, writableConsolePort, callback) {
      let postBody = writableConsolePort;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortsUpdate");
      }
      // verify the required parameter 'writableConsolePort' is set
      if (writableConsolePort === undefined || writableConsolePort === null) {
        throw new Error("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsolePort;
      return this.apiClient.callApi(
        '/dcim/console-ports/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortTemplatesCreate operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableConsoleServerPortTemplate} writableConsoleServerPortTemplate 
     * @param {module:api/DcimApi~dcimConsoleServerPortTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPortTemplate}
     */
    dcimConsoleServerPortTemplatesCreate(writableConsoleServerPortTemplate, callback) {
      let postBody = writableConsoleServerPortTemplate;
      // verify the required parameter 'writableConsoleServerPortTemplate' is set
      if (writableConsoleServerPortTemplate === undefined || writableConsoleServerPortTemplate === null) {
        throw new Error("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPortTemplate;
      return this.apiClient.callApi(
        '/dcim/console-server-port-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortTemplatesDelete operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console server port template.
     * @param {module:api/DcimApi~dcimConsoleServerPortTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimConsoleServerPortTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/console-server-port-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortTemplatesList operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimConsoleServerPortTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [devicetypeId] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimConsoleServerPortTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimConsoleServerPortTemplatesList200Response}
     */
    dcimConsoleServerPortTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'devicetype_id': opts['devicetypeId'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimConsoleServerPortTemplatesList200Response;
      return this.apiClient.callApi(
        '/dcim/console-server-port-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortTemplatesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console server port template.
     * @param {module:model/WritableConsoleServerPortTemplate} writableConsoleServerPortTemplate 
     * @param {module:api/DcimApi~dcimConsoleServerPortTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPortTemplate}
     */
    dcimConsoleServerPortTemplatesPartialUpdate(id, writableConsoleServerPortTemplate, callback) {
      let postBody = writableConsoleServerPortTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesPartialUpdate");
      }
      // verify the required parameter 'writableConsoleServerPortTemplate' is set
      if (writableConsoleServerPortTemplate === undefined || writableConsoleServerPortTemplate === null) {
        throw new Error("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPortTemplate;
      return this.apiClient.callApi(
        '/dcim/console-server-port-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortTemplatesRead operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console server port template.
     * @param {module:api/DcimApi~dcimConsoleServerPortTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPortTemplate}
     */
    dcimConsoleServerPortTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPortTemplate;
      return this.apiClient.callApi(
        '/dcim/console-server-port-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortTemplatesUpdate operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console server port template.
     * @param {module:model/WritableConsoleServerPortTemplate} writableConsoleServerPortTemplate 
     * @param {module:api/DcimApi~dcimConsoleServerPortTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPortTemplate}
     */
    dcimConsoleServerPortTemplatesUpdate(id, writableConsoleServerPortTemplate, callback) {
      let postBody = writableConsoleServerPortTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesUpdate");
      }
      // verify the required parameter 'writableConsoleServerPortTemplate' is set
      if (writableConsoleServerPortTemplate === undefined || writableConsoleServerPortTemplate === null) {
        throw new Error("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPortTemplate;
      return this.apiClient.callApi(
        '/dcim/console-server-port-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortsCreate operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableConsoleServerPort} writableConsoleServerPort 
     * @param {module:api/DcimApi~dcimConsoleServerPortsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPort}
     */
    dcimConsoleServerPortsCreate(writableConsoleServerPort, callback) {
      let postBody = writableConsoleServerPort;
      // verify the required parameter 'writableConsoleServerPort' is set
      if (writableConsoleServerPort === undefined || writableConsoleServerPort === null) {
        throw new Error("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPort;
      return this.apiClient.callApi(
        '/dcim/console-server-ports/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortsDelete operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console server port.
     * @param {module:api/DcimApi~dcimConsoleServerPortsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimConsoleServerPortsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/console-server-ports/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortsList operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimConsoleServerPortsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [tag] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimConsoleServerPortsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimConsoleServerPortsList200Response}
     */
    dcimConsoleServerPortsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'tag': opts['tag'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimConsoleServerPortsList200Response;
      return this.apiClient.callApi(
        '/dcim/console-server-ports/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console server port.
     * @param {module:model/WritableConsoleServerPort} writableConsoleServerPort 
     * @param {module:api/DcimApi~dcimConsoleServerPortsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPort}
     */
    dcimConsoleServerPortsPartialUpdate(id, writableConsoleServerPort, callback) {
      let postBody = writableConsoleServerPort;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortsPartialUpdate");
      }
      // verify the required parameter 'writableConsoleServerPort' is set
      if (writableConsoleServerPort === undefined || writableConsoleServerPort === null) {
        throw new Error("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPort;
      return this.apiClient.callApi(
        '/dcim/console-server-ports/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortsRead operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console server port.
     * @param {module:api/DcimApi~dcimConsoleServerPortsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPort}
     */
    dcimConsoleServerPortsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPort;
      return this.apiClient.callApi(
        '/dcim/console-server-ports/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortsUpdate operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console server port.
     * @param {module:model/WritableConsoleServerPort} writableConsoleServerPort 
     * @param {module:api/DcimApi~dcimConsoleServerPortsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPort}
     */
    dcimConsoleServerPortsUpdate(id, writableConsoleServerPort, callback) {
      let postBody = writableConsoleServerPort;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortsUpdate");
      }
      // verify the required parameter 'writableConsoleServerPort' is set
      if (writableConsoleServerPort === undefined || writableConsoleServerPort === null) {
        throw new Error("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPort;
      return this.apiClient.callApi(
        '/dcim/console-server-ports/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBayTemplatesCreate operation.
     * @callback module:api/DcimApi~dcimDeviceBayTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceBayTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableDeviceBayTemplate} writableDeviceBayTemplate 
     * @param {module:api/DcimApi~dcimDeviceBayTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceBayTemplate}
     */
    dcimDeviceBayTemplatesCreate(writableDeviceBayTemplate, callback) {
      let postBody = writableDeviceBayTemplate;
      // verify the required parameter 'writableDeviceBayTemplate' is set
      if (writableDeviceBayTemplate === undefined || writableDeviceBayTemplate === null) {
        throw new Error("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceBayTemplate;
      return this.apiClient.callApi(
        '/dcim/device-bay-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBayTemplatesDelete operation.
     * @callback module:api/DcimApi~dcimDeviceBayTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device bay template.
     * @param {module:api/DcimApi~dcimDeviceBayTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimDeviceBayTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/device-bay-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBayTemplatesList operation.
     * @callback module:api/DcimApi~dcimDeviceBayTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimDeviceBayTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [devicetypeId] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimDeviceBayTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimDeviceBayTemplatesList200Response}
     */
    dcimDeviceBayTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'devicetype_id': opts['devicetypeId'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimDeviceBayTemplatesList200Response;
      return this.apiClient.callApi(
        '/dcim/device-bay-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBayTemplatesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimDeviceBayTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceBayTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device bay template.
     * @param {module:model/WritableDeviceBayTemplate} writableDeviceBayTemplate 
     * @param {module:api/DcimApi~dcimDeviceBayTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceBayTemplate}
     */
    dcimDeviceBayTemplatesPartialUpdate(id, writableDeviceBayTemplate, callback) {
      let postBody = writableDeviceBayTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesPartialUpdate");
      }
      // verify the required parameter 'writableDeviceBayTemplate' is set
      if (writableDeviceBayTemplate === undefined || writableDeviceBayTemplate === null) {
        throw new Error("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceBayTemplate;
      return this.apiClient.callApi(
        '/dcim/device-bay-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBayTemplatesRead operation.
     * @callback module:api/DcimApi~dcimDeviceBayTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceBayTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device bay template.
     * @param {module:api/DcimApi~dcimDeviceBayTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceBayTemplate}
     */
    dcimDeviceBayTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceBayTemplate;
      return this.apiClient.callApi(
        '/dcim/device-bay-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBayTemplatesUpdate operation.
     * @callback module:api/DcimApi~dcimDeviceBayTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceBayTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device bay template.
     * @param {module:model/WritableDeviceBayTemplate} writableDeviceBayTemplate 
     * @param {module:api/DcimApi~dcimDeviceBayTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceBayTemplate}
     */
    dcimDeviceBayTemplatesUpdate(id, writableDeviceBayTemplate, callback) {
      let postBody = writableDeviceBayTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesUpdate");
      }
      // verify the required parameter 'writableDeviceBayTemplate' is set
      if (writableDeviceBayTemplate === undefined || writableDeviceBayTemplate === null) {
        throw new Error("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceBayTemplate;
      return this.apiClient.callApi(
        '/dcim/device-bay-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBaysCreate operation.
     * @callback module:api/DcimApi~dcimDeviceBaysCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceBay} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableDeviceBay} writableDeviceBay 
     * @param {module:api/DcimApi~dcimDeviceBaysCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceBay}
     */
    dcimDeviceBaysCreate(writableDeviceBay, callback) {
      let postBody = writableDeviceBay;
      // verify the required parameter 'writableDeviceBay' is set
      if (writableDeviceBay === undefined || writableDeviceBay === null) {
        throw new Error("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceBay;
      return this.apiClient.callApi(
        '/dcim/device-bays/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBaysDelete operation.
     * @callback module:api/DcimApi~dcimDeviceBaysDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device bay.
     * @param {module:api/DcimApi~dcimDeviceBaysDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimDeviceBaysDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceBaysDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/device-bays/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBaysList operation.
     * @callback module:api/DcimApi~dcimDeviceBaysListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimDeviceBaysList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [tag] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimDeviceBaysListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimDeviceBaysList200Response}
     */
    dcimDeviceBaysList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'tag': opts['tag'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimDeviceBaysList200Response;
      return this.apiClient.callApi(
        '/dcim/device-bays/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBaysPartialUpdate operation.
     * @callback module:api/DcimApi~dcimDeviceBaysPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceBay} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device bay.
     * @param {module:model/WritableDeviceBay} writableDeviceBay 
     * @param {module:api/DcimApi~dcimDeviceBaysPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceBay}
     */
    dcimDeviceBaysPartialUpdate(id, writableDeviceBay, callback) {
      let postBody = writableDeviceBay;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceBaysPartialUpdate");
      }
      // verify the required parameter 'writableDeviceBay' is set
      if (writableDeviceBay === undefined || writableDeviceBay === null) {
        throw new Error("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceBay;
      return this.apiClient.callApi(
        '/dcim/device-bays/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBaysRead operation.
     * @callback module:api/DcimApi~dcimDeviceBaysReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceBay} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device bay.
     * @param {module:api/DcimApi~dcimDeviceBaysReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceBay}
     */
    dcimDeviceBaysRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceBaysRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceBay;
      return this.apiClient.callApi(
        '/dcim/device-bays/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBaysUpdate operation.
     * @callback module:api/DcimApi~dcimDeviceBaysUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceBay} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device bay.
     * @param {module:model/WritableDeviceBay} writableDeviceBay 
     * @param {module:api/DcimApi~dcimDeviceBaysUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceBay}
     */
    dcimDeviceBaysUpdate(id, writableDeviceBay, callback) {
      let postBody = writableDeviceBay;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceBaysUpdate");
      }
      // verify the required parameter 'writableDeviceBay' is set
      if (writableDeviceBay === undefined || writableDeviceBay === null) {
        throw new Error("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceBay;
      return this.apiClient.callApi(
        '/dcim/device-bays/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceRolesCreate operation.
     * @callback module:api/DcimApi~dcimDeviceRolesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/DeviceRole} deviceRole 
     * @param {module:api/DcimApi~dcimDeviceRolesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceRole}
     */
    dcimDeviceRolesCreate(deviceRole, callback) {
      let postBody = deviceRole;
      // verify the required parameter 'deviceRole' is set
      if (deviceRole === undefined || deviceRole === null) {
        throw new Error("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceRole;
      return this.apiClient.callApi(
        '/dcim/device-roles/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceRolesDelete operation.
     * @callback module:api/DcimApi~dcimDeviceRolesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device role.
     * @param {module:api/DcimApi~dcimDeviceRolesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimDeviceRolesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceRolesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/device-roles/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceRolesList operation.
     * @callback module:api/DcimApi~dcimDeviceRolesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimDeviceRolesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [color] 
     * @param {String} [vmRole] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimDeviceRolesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimDeviceRolesList200Response}
     */
    dcimDeviceRolesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'slug': opts['slug'],
        'color': opts['color'],
        'vm_role': opts['vmRole'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimDeviceRolesList200Response;
      return this.apiClient.callApi(
        '/dcim/device-roles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceRolesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimDeviceRolesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device role.
     * @param {module:model/DeviceRole} deviceRole 
     * @param {module:api/DcimApi~dcimDeviceRolesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceRole}
     */
    dcimDeviceRolesPartialUpdate(id, deviceRole, callback) {
      let postBody = deviceRole;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceRolesPartialUpdate");
      }
      // verify the required parameter 'deviceRole' is set
      if (deviceRole === undefined || deviceRole === null) {
        throw new Error("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceRole;
      return this.apiClient.callApi(
        '/dcim/device-roles/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceRolesRead operation.
     * @callback module:api/DcimApi~dcimDeviceRolesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device role.
     * @param {module:api/DcimApi~dcimDeviceRolesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceRole}
     */
    dcimDeviceRolesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceRolesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceRole;
      return this.apiClient.callApi(
        '/dcim/device-roles/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceRolesUpdate operation.
     * @callback module:api/DcimApi~dcimDeviceRolesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device role.
     * @param {module:model/DeviceRole} deviceRole 
     * @param {module:api/DcimApi~dcimDeviceRolesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceRole}
     */
    dcimDeviceRolesUpdate(id, deviceRole, callback) {
      let postBody = deviceRole;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceRolesUpdate");
      }
      // verify the required parameter 'deviceRole' is set
      if (deviceRole === undefined || deviceRole === null) {
        throw new Error("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceRole;
      return this.apiClient.callApi(
        '/dcim/device-roles/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceTypesCreate operation.
     * @callback module:api/DcimApi~dcimDeviceTypesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableDeviceType} writableDeviceType 
     * @param {module:api/DcimApi~dcimDeviceTypesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceType}
     */
    dcimDeviceTypesCreate(writableDeviceType, callback) {
      let postBody = writableDeviceType;
      // verify the required parameter 'writableDeviceType' is set
      if (writableDeviceType === undefined || writableDeviceType === null) {
        throw new Error("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceType;
      return this.apiClient.callApi(
        '/dcim/device-types/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceTypesDelete operation.
     * @callback module:api/DcimApi~dcimDeviceTypesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device type.
     * @param {module:api/DcimApi~dcimDeviceTypesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimDeviceTypesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceTypesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/device-types/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceTypesList operation.
     * @callback module:api/DcimApi~dcimDeviceTypesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimDeviceTypesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [model] 
     * @param {String} [slug] 
     * @param {String} [partNumber] 
     * @param {Number} [uHeight] 
     * @param {String} [isFullDepth] 
     * @param {String} [isConsoleServer] 
     * @param {String} [isPdu] 
     * @param {String} [isNetworkDevice] 
     * @param {String} [subdeviceRole] 
     * @param {String} [idIn] Multiple values may be separated by commas.
     * @param {String} [q] 
     * @param {String} [manufacturerId] 
     * @param {String} [manufacturer] 
     * @param {String} [tag] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimDeviceTypesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimDeviceTypesList200Response}
     */
    dcimDeviceTypesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'model': opts['model'],
        'slug': opts['slug'],
        'part_number': opts['partNumber'],
        'u_height': opts['uHeight'],
        'is_full_depth': opts['isFullDepth'],
        'is_console_server': opts['isConsoleServer'],
        'is_pdu': opts['isPdu'],
        'is_network_device': opts['isNetworkDevice'],
        'subdevice_role': opts['subdeviceRole'],
        'id__in': opts['idIn'],
        'q': opts['q'],
        'manufacturer_id': opts['manufacturerId'],
        'manufacturer': opts['manufacturer'],
        'tag': opts['tag'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimDeviceTypesList200Response;
      return this.apiClient.callApi(
        '/dcim/device-types/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceTypesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimDeviceTypesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device type.
     * @param {module:model/WritableDeviceType} writableDeviceType 
     * @param {module:api/DcimApi~dcimDeviceTypesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceType}
     */
    dcimDeviceTypesPartialUpdate(id, writableDeviceType, callback) {
      let postBody = writableDeviceType;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceTypesPartialUpdate");
      }
      // verify the required parameter 'writableDeviceType' is set
      if (writableDeviceType === undefined || writableDeviceType === null) {
        throw new Error("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceType;
      return this.apiClient.callApi(
        '/dcim/device-types/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceTypesRead operation.
     * @callback module:api/DcimApi~dcimDeviceTypesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device type.
     * @param {module:api/DcimApi~dcimDeviceTypesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceType}
     */
    dcimDeviceTypesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceTypesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceType;
      return this.apiClient.callApi(
        '/dcim/device-types/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceTypesUpdate operation.
     * @callback module:api/DcimApi~dcimDeviceTypesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device type.
     * @param {module:model/WritableDeviceType} writableDeviceType 
     * @param {module:api/DcimApi~dcimDeviceTypesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceType}
     */
    dcimDeviceTypesUpdate(id, writableDeviceType, callback) {
      let postBody = writableDeviceType;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceTypesUpdate");
      }
      // verify the required parameter 'writableDeviceType' is set
      if (writableDeviceType === undefined || writableDeviceType === null) {
        throw new Error("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceType;
      return this.apiClient.callApi(
        '/dcim/device-types/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDevicesCreate operation.
     * @callback module:api/DcimApi~dcimDevicesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableDevice} writableDevice 
     * @param {module:api/DcimApi~dcimDevicesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    dcimDevicesCreate(writableDevice, callback) {
      let postBody = writableDevice;
      // verify the required parameter 'writableDevice' is set
      if (writableDevice === undefined || writableDevice === null) {
        throw new Error("Missing the required parameter 'writableDevice' when calling dcimDevicesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/dcim/devices/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDevicesDelete operation.
     * @callback module:api/DcimApi~dcimDevicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device.
     * @param {module:api/DcimApi~dcimDevicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimDevicesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDevicesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/devices/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDevicesList operation.
     * @callback module:api/DcimApi~dcimDevicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimDevicesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [serial] 
     * @param {Number} [position] 
     * @param {String} [idIn] Multiple values may be separated by commas.
     * @param {String} [q] 
     * @param {String} [manufacturerId] 
     * @param {String} [manufacturer] 
     * @param {String} [deviceTypeId] 
     * @param {String} [roleId] 
     * @param {String} [role] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [platformId] 
     * @param {String} [platform] 
     * @param {String} [name] 
     * @param {String} [assetTag] 
     * @param {Number} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [rackGroupId] 
     * @param {String} [rackId] 
     * @param {String} [clusterId] 
     * @param {String} [model] 
     * @param {String} [status] 
     * @param {String} [isFullDepth] 
     * @param {String} [isConsoleServer] 
     * @param {String} [isPdu] 
     * @param {String} [isNetworkDevice] 
     * @param {String} [macAddress] 
     * @param {String} [hasPrimaryIp] 
     * @param {String} [virtualChassisId] 
     * @param {String} [tag] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimDevicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimDevicesList200Response}
     */
    dcimDevicesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'serial': opts['serial'],
        'position': opts['position'],
        'id__in': opts['idIn'],
        'q': opts['q'],
        'manufacturer_id': opts['manufacturerId'],
        'manufacturer': opts['manufacturer'],
        'device_type_id': opts['deviceTypeId'],
        'role_id': opts['roleId'],
        'role': opts['role'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'platform_id': opts['platformId'],
        'platform': opts['platform'],
        'name': opts['name'],
        'asset_tag': opts['assetTag'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'rack_group_id': opts['rackGroupId'],
        'rack_id': opts['rackId'],
        'cluster_id': opts['clusterId'],
        'model': opts['model'],
        'status': opts['status'],
        'is_full_depth': opts['isFullDepth'],
        'is_console_server': opts['isConsoleServer'],
        'is_pdu': opts['isPdu'],
        'is_network_device': opts['isNetworkDevice'],
        'mac_address': opts['macAddress'],
        'has_primary_ip': opts['hasPrimaryIp'],
        'virtual_chassis_id': opts['virtualChassisId'],
        'tag': opts['tag'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimDevicesList200Response;
      return this.apiClient.callApi(
        '/dcim/devices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDevicesNapalm operation.
     * @callback module:api/DcimApi~dcimDevicesNapalmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a NAPALM method on a Device
     * @param {Number} id A unique integer value identifying this device.
     * @param {module:api/DcimApi~dcimDevicesNapalmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    dcimDevicesNapalm(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDevicesNapalm");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/dcim/devices/{id}/napalm/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDevicesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimDevicesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device.
     * @param {module:model/WritableDevice} writableDevice 
     * @param {module:api/DcimApi~dcimDevicesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    dcimDevicesPartialUpdate(id, writableDevice, callback) {
      let postBody = writableDevice;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDevicesPartialUpdate");
      }
      // verify the required parameter 'writableDevice' is set
      if (writableDevice === undefined || writableDevice === null) {
        throw new Error("Missing the required parameter 'writableDevice' when calling dcimDevicesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/dcim/devices/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDevicesRead operation.
     * @callback module:api/DcimApi~dcimDevicesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceWithConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device.
     * @param {module:api/DcimApi~dcimDevicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceWithConfigContext}
     */
    dcimDevicesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDevicesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceWithConfigContext;
      return this.apiClient.callApi(
        '/dcim/devices/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDevicesUpdate operation.
     * @callback module:api/DcimApi~dcimDevicesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device.
     * @param {module:model/WritableDevice} writableDevice 
     * @param {module:api/DcimApi~dcimDevicesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    dcimDevicesUpdate(id, writableDevice, callback) {
      let postBody = writableDevice;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDevicesUpdate");
      }
      // verify the required parameter 'writableDevice' is set
      if (writableDevice === undefined || writableDevice === null) {
        throw new Error("Missing the required parameter 'writableDevice' when calling dcimDevicesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/dcim/devices/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceConnectionsCreate operation.
     * @callback module:api/DcimApi~dcimInterfaceConnectionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InterfaceConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableInterfaceConnection} writableInterfaceConnection 
     * @param {module:api/DcimApi~dcimInterfaceConnectionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InterfaceConnection}
     */
    dcimInterfaceConnectionsCreate(writableInterfaceConnection, callback) {
      let postBody = writableInterfaceConnection;
      // verify the required parameter 'writableInterfaceConnection' is set
      if (writableInterfaceConnection === undefined || writableInterfaceConnection === null) {
        throw new Error("Missing the required parameter 'writableInterfaceConnection' when calling dcimInterfaceConnectionsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InterfaceConnection;
      return this.apiClient.callApi(
        '/dcim/interface-connections/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceConnectionsDelete operation.
     * @callback module:api/DcimApi~dcimInterfaceConnectionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface connection.
     * @param {module:api/DcimApi~dcimInterfaceConnectionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimInterfaceConnectionsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfaceConnectionsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/interface-connections/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceConnectionsList operation.
     * @callback module:api/DcimApi~dcimInterfaceConnectionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimInterfaceConnectionsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [connectionStatus] 
     * @param {String} [site] 
     * @param {String} [device] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimInterfaceConnectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimInterfaceConnectionsList200Response}
     */
    dcimInterfaceConnectionsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'connection_status': opts['connectionStatus'],
        'site': opts['site'],
        'device': opts['device'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimInterfaceConnectionsList200Response;
      return this.apiClient.callApi(
        '/dcim/interface-connections/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceConnectionsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimInterfaceConnectionsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InterfaceConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface connection.
     * @param {module:model/WritableInterfaceConnection} writableInterfaceConnection 
     * @param {module:api/DcimApi~dcimInterfaceConnectionsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InterfaceConnection}
     */
    dcimInterfaceConnectionsPartialUpdate(id, writableInterfaceConnection, callback) {
      let postBody = writableInterfaceConnection;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfaceConnectionsPartialUpdate");
      }
      // verify the required parameter 'writableInterfaceConnection' is set
      if (writableInterfaceConnection === undefined || writableInterfaceConnection === null) {
        throw new Error("Missing the required parameter 'writableInterfaceConnection' when calling dcimInterfaceConnectionsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InterfaceConnection;
      return this.apiClient.callApi(
        '/dcim/interface-connections/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceConnectionsRead operation.
     * @callback module:api/DcimApi~dcimInterfaceConnectionsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InterfaceConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface connection.
     * @param {module:api/DcimApi~dcimInterfaceConnectionsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InterfaceConnection}
     */
    dcimInterfaceConnectionsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfaceConnectionsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InterfaceConnection;
      return this.apiClient.callApi(
        '/dcim/interface-connections/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceConnectionsUpdate operation.
     * @callback module:api/DcimApi~dcimInterfaceConnectionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InterfaceConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface connection.
     * @param {module:model/WritableInterfaceConnection} writableInterfaceConnection 
     * @param {module:api/DcimApi~dcimInterfaceConnectionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InterfaceConnection}
     */
    dcimInterfaceConnectionsUpdate(id, writableInterfaceConnection, callback) {
      let postBody = writableInterfaceConnection;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfaceConnectionsUpdate");
      }
      // verify the required parameter 'writableInterfaceConnection' is set
      if (writableInterfaceConnection === undefined || writableInterfaceConnection === null) {
        throw new Error("Missing the required parameter 'writableInterfaceConnection' when calling dcimInterfaceConnectionsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InterfaceConnection;
      return this.apiClient.callApi(
        '/dcim/interface-connections/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceTemplatesCreate operation.
     * @callback module:api/DcimApi~dcimInterfaceTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InterfaceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableInterfaceTemplate} writableInterfaceTemplate 
     * @param {module:api/DcimApi~dcimInterfaceTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InterfaceTemplate}
     */
    dcimInterfaceTemplatesCreate(writableInterfaceTemplate, callback) {
      let postBody = writableInterfaceTemplate;
      // verify the required parameter 'writableInterfaceTemplate' is set
      if (writableInterfaceTemplate === undefined || writableInterfaceTemplate === null) {
        throw new Error("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InterfaceTemplate;
      return this.apiClient.callApi(
        '/dcim/interface-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceTemplatesDelete operation.
     * @callback module:api/DcimApi~dcimInterfaceTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface template.
     * @param {module:api/DcimApi~dcimInterfaceTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimInterfaceTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfaceTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/interface-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceTemplatesList operation.
     * @callback module:api/DcimApi~dcimInterfaceTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimInterfaceTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [formFactor] 
     * @param {String} [mgmtOnly] 
     * @param {String} [devicetypeId] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimInterfaceTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimInterfaceTemplatesList200Response}
     */
    dcimInterfaceTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'form_factor': opts['formFactor'],
        'mgmt_only': opts['mgmtOnly'],
        'devicetype_id': opts['devicetypeId'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimInterfaceTemplatesList200Response;
      return this.apiClient.callApi(
        '/dcim/interface-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceTemplatesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimInterfaceTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InterfaceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface template.
     * @param {module:model/WritableInterfaceTemplate} writableInterfaceTemplate 
     * @param {module:api/DcimApi~dcimInterfaceTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InterfaceTemplate}
     */
    dcimInterfaceTemplatesPartialUpdate(id, writableInterfaceTemplate, callback) {
      let postBody = writableInterfaceTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfaceTemplatesPartialUpdate");
      }
      // verify the required parameter 'writableInterfaceTemplate' is set
      if (writableInterfaceTemplate === undefined || writableInterfaceTemplate === null) {
        throw new Error("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InterfaceTemplate;
      return this.apiClient.callApi(
        '/dcim/interface-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceTemplatesRead operation.
     * @callback module:api/DcimApi~dcimInterfaceTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InterfaceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface template.
     * @param {module:api/DcimApi~dcimInterfaceTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InterfaceTemplate}
     */
    dcimInterfaceTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfaceTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InterfaceTemplate;
      return this.apiClient.callApi(
        '/dcim/interface-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceTemplatesUpdate operation.
     * @callback module:api/DcimApi~dcimInterfaceTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InterfaceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface template.
     * @param {module:model/WritableInterfaceTemplate} writableInterfaceTemplate 
     * @param {module:api/DcimApi~dcimInterfaceTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InterfaceTemplate}
     */
    dcimInterfaceTemplatesUpdate(id, writableInterfaceTemplate, callback) {
      let postBody = writableInterfaceTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfaceTemplatesUpdate");
      }
      // verify the required parameter 'writableInterfaceTemplate' is set
      if (writableInterfaceTemplate === undefined || writableInterfaceTemplate === null) {
        throw new Error("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InterfaceTemplate;
      return this.apiClient.callApi(
        '/dcim/interface-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfacesCreate operation.
     * @callback module:api/DcimApi~dcimInterfacesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Interface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableInterface} writableInterface 
     * @param {module:api/DcimApi~dcimInterfacesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Interface}
     */
    dcimInterfacesCreate(writableInterface, callback) {
      let postBody = writableInterface;
      // verify the required parameter 'writableInterface' is set
      if (writableInterface === undefined || writableInterface === null) {
        throw new Error("Missing the required parameter 'writableInterface' when calling dcimInterfacesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Interface;
      return this.apiClient.callApi(
        '/dcim/interfaces/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfacesDelete operation.
     * @callback module:api/DcimApi~dcimInterfacesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:api/DcimApi~dcimInterfacesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimInterfacesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfacesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/interfaces/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfacesGraphs operation.
     * @callback module:api/DcimApi~dcimInterfacesGraphsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Interface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A convenience method for rendering graphs for a particular interface.
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:api/DcimApi~dcimInterfacesGraphsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Interface}
     */
    dcimInterfacesGraphs(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfacesGraphs");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Interface;
      return this.apiClient.callApi(
        '/dcim/interfaces/{id}/graphs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfacesList operation.
     * @callback module:api/DcimApi~dcimInterfacesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimInterfacesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [enabled] 
     * @param {Number} [mtu] 
     * @param {String} [mgmtOnly] 
     * @param {String} [device] 
     * @param {Number} [deviceId] 
     * @param {String} [type] 
     * @param {String} [lagId] 
     * @param {String} [macAddress] 
     * @param {String} [tag] 
     * @param {String} [vlanId] 
     * @param {String} [vlan] 
     * @param {String} [formFactor] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimInterfacesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimInterfacesList200Response}
     */
    dcimInterfacesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'enabled': opts['enabled'],
        'mtu': opts['mtu'],
        'mgmt_only': opts['mgmtOnly'],
        'device': opts['device'],
        'device_id': opts['deviceId'],
        'type': opts['type'],
        'lag_id': opts['lagId'],
        'mac_address': opts['macAddress'],
        'tag': opts['tag'],
        'vlan_id': opts['vlanId'],
        'vlan': opts['vlan'],
        'form_factor': opts['formFactor'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimInterfacesList200Response;
      return this.apiClient.callApi(
        '/dcim/interfaces/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfacesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimInterfacesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Interface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:model/WritableInterface} writableInterface 
     * @param {module:api/DcimApi~dcimInterfacesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Interface}
     */
    dcimInterfacesPartialUpdate(id, writableInterface, callback) {
      let postBody = writableInterface;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfacesPartialUpdate");
      }
      // verify the required parameter 'writableInterface' is set
      if (writableInterface === undefined || writableInterface === null) {
        throw new Error("Missing the required parameter 'writableInterface' when calling dcimInterfacesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Interface;
      return this.apiClient.callApi(
        '/dcim/interfaces/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfacesRead operation.
     * @callback module:api/DcimApi~dcimInterfacesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Interface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:api/DcimApi~dcimInterfacesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Interface}
     */
    dcimInterfacesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfacesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Interface;
      return this.apiClient.callApi(
        '/dcim/interfaces/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfacesUpdate operation.
     * @callback module:api/DcimApi~dcimInterfacesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Interface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:model/WritableInterface} writableInterface 
     * @param {module:api/DcimApi~dcimInterfacesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Interface}
     */
    dcimInterfacesUpdate(id, writableInterface, callback) {
      let postBody = writableInterface;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfacesUpdate");
      }
      // verify the required parameter 'writableInterface' is set
      if (writableInterface === undefined || writableInterface === null) {
        throw new Error("Missing the required parameter 'writableInterface' when calling dcimInterfacesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Interface;
      return this.apiClient.callApi(
        '/dcim/interfaces/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInventoryItemsCreate operation.
     * @callback module:api/DcimApi~dcimInventoryItemsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventoryItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableInventoryItem} writableInventoryItem 
     * @param {module:api/DcimApi~dcimInventoryItemsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventoryItem}
     */
    dcimInventoryItemsCreate(writableInventoryItem, callback) {
      let postBody = writableInventoryItem;
      // verify the required parameter 'writableInventoryItem' is set
      if (writableInventoryItem === undefined || writableInventoryItem === null) {
        throw new Error("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InventoryItem;
      return this.apiClient.callApi(
        '/dcim/inventory-items/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInventoryItemsDelete operation.
     * @callback module:api/DcimApi~dcimInventoryItemsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this inventory item.
     * @param {module:api/DcimApi~dcimInventoryItemsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimInventoryItemsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInventoryItemsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/inventory-items/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInventoryItemsList operation.
     * @callback module:api/DcimApi~dcimInventoryItemsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimInventoryItemsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [partId] 
     * @param {String} [serial] 
     * @param {String} [assetTag] 
     * @param {String} [discovered] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [tag] 
     * @param {String} [q] 
     * @param {String} [parentId] 
     * @param {String} [manufacturerId] 
     * @param {String} [manufacturer] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimInventoryItemsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimInventoryItemsList200Response}
     */
    dcimInventoryItemsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'part_id': opts['partId'],
        'serial': opts['serial'],
        'asset_tag': opts['assetTag'],
        'discovered': opts['discovered'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'tag': opts['tag'],
        'q': opts['q'],
        'parent_id': opts['parentId'],
        'manufacturer_id': opts['manufacturerId'],
        'manufacturer': opts['manufacturer'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimInventoryItemsList200Response;
      return this.apiClient.callApi(
        '/dcim/inventory-items/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInventoryItemsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimInventoryItemsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventoryItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this inventory item.
     * @param {module:model/WritableInventoryItem} writableInventoryItem 
     * @param {module:api/DcimApi~dcimInventoryItemsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventoryItem}
     */
    dcimInventoryItemsPartialUpdate(id, writableInventoryItem, callback) {
      let postBody = writableInventoryItem;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInventoryItemsPartialUpdate");
      }
      // verify the required parameter 'writableInventoryItem' is set
      if (writableInventoryItem === undefined || writableInventoryItem === null) {
        throw new Error("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InventoryItem;
      return this.apiClient.callApi(
        '/dcim/inventory-items/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInventoryItemsRead operation.
     * @callback module:api/DcimApi~dcimInventoryItemsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventoryItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this inventory item.
     * @param {module:api/DcimApi~dcimInventoryItemsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventoryItem}
     */
    dcimInventoryItemsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInventoryItemsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InventoryItem;
      return this.apiClient.callApi(
        '/dcim/inventory-items/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInventoryItemsUpdate operation.
     * @callback module:api/DcimApi~dcimInventoryItemsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventoryItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this inventory item.
     * @param {module:model/WritableInventoryItem} writableInventoryItem 
     * @param {module:api/DcimApi~dcimInventoryItemsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventoryItem}
     */
    dcimInventoryItemsUpdate(id, writableInventoryItem, callback) {
      let postBody = writableInventoryItem;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInventoryItemsUpdate");
      }
      // verify the required parameter 'writableInventoryItem' is set
      if (writableInventoryItem === undefined || writableInventoryItem === null) {
        throw new Error("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InventoryItem;
      return this.apiClient.callApi(
        '/dcim/inventory-items/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimManufacturersCreate operation.
     * @callback module:api/DcimApi~dcimManufacturersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Manufacturer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Manufacturer} manufacturer 
     * @param {module:api/DcimApi~dcimManufacturersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Manufacturer}
     */
    dcimManufacturersCreate(manufacturer, callback) {
      let postBody = manufacturer;
      // verify the required parameter 'manufacturer' is set
      if (manufacturer === undefined || manufacturer === null) {
        throw new Error("Missing the required parameter 'manufacturer' when calling dcimManufacturersCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Manufacturer;
      return this.apiClient.callApi(
        '/dcim/manufacturers/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimManufacturersDelete operation.
     * @callback module:api/DcimApi~dcimManufacturersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this manufacturer.
     * @param {module:api/DcimApi~dcimManufacturersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimManufacturersDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimManufacturersDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/manufacturers/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimManufacturersList operation.
     * @callback module:api/DcimApi~dcimManufacturersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimManufacturersList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimManufacturersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimManufacturersList200Response}
     */
    dcimManufacturersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'slug': opts['slug'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimManufacturersList200Response;
      return this.apiClient.callApi(
        '/dcim/manufacturers/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimManufacturersPartialUpdate operation.
     * @callback module:api/DcimApi~dcimManufacturersPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Manufacturer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this manufacturer.
     * @param {module:model/Manufacturer} manufacturer 
     * @param {module:api/DcimApi~dcimManufacturersPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Manufacturer}
     */
    dcimManufacturersPartialUpdate(id, manufacturer, callback) {
      let postBody = manufacturer;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimManufacturersPartialUpdate");
      }
      // verify the required parameter 'manufacturer' is set
      if (manufacturer === undefined || manufacturer === null) {
        throw new Error("Missing the required parameter 'manufacturer' when calling dcimManufacturersPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Manufacturer;
      return this.apiClient.callApi(
        '/dcim/manufacturers/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimManufacturersRead operation.
     * @callback module:api/DcimApi~dcimManufacturersReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Manufacturer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this manufacturer.
     * @param {module:api/DcimApi~dcimManufacturersReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Manufacturer}
     */
    dcimManufacturersRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimManufacturersRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Manufacturer;
      return this.apiClient.callApi(
        '/dcim/manufacturers/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimManufacturersUpdate operation.
     * @callback module:api/DcimApi~dcimManufacturersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Manufacturer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this manufacturer.
     * @param {module:model/Manufacturer} manufacturer 
     * @param {module:api/DcimApi~dcimManufacturersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Manufacturer}
     */
    dcimManufacturersUpdate(id, manufacturer, callback) {
      let postBody = manufacturer;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimManufacturersUpdate");
      }
      // verify the required parameter 'manufacturer' is set
      if (manufacturer === undefined || manufacturer === null) {
        throw new Error("Missing the required parameter 'manufacturer' when calling dcimManufacturersUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Manufacturer;
      return this.apiClient.callApi(
        '/dcim/manufacturers/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPlatformsCreate operation.
     * @callback module:api/DcimApi~dcimPlatformsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Platform} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritablePlatform} writablePlatform 
     * @param {module:api/DcimApi~dcimPlatformsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Platform}
     */
    dcimPlatformsCreate(writablePlatform, callback) {
      let postBody = writablePlatform;
      // verify the required parameter 'writablePlatform' is set
      if (writablePlatform === undefined || writablePlatform === null) {
        throw new Error("Missing the required parameter 'writablePlatform' when calling dcimPlatformsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Platform;
      return this.apiClient.callApi(
        '/dcim/platforms/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPlatformsDelete operation.
     * @callback module:api/DcimApi~dcimPlatformsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this platform.
     * @param {module:api/DcimApi~dcimPlatformsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimPlatformsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPlatformsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/platforms/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPlatformsList operation.
     * @callback module:api/DcimApi~dcimPlatformsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimPlatformsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [manufacturerId] 
     * @param {String} [manufacturer] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimPlatformsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimPlatformsList200Response}
     */
    dcimPlatformsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'slug': opts['slug'],
        'manufacturer_id': opts['manufacturerId'],
        'manufacturer': opts['manufacturer'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimPlatformsList200Response;
      return this.apiClient.callApi(
        '/dcim/platforms/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPlatformsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimPlatformsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Platform} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this platform.
     * @param {module:model/WritablePlatform} writablePlatform 
     * @param {module:api/DcimApi~dcimPlatformsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Platform}
     */
    dcimPlatformsPartialUpdate(id, writablePlatform, callback) {
      let postBody = writablePlatform;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPlatformsPartialUpdate");
      }
      // verify the required parameter 'writablePlatform' is set
      if (writablePlatform === undefined || writablePlatform === null) {
        throw new Error("Missing the required parameter 'writablePlatform' when calling dcimPlatformsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Platform;
      return this.apiClient.callApi(
        '/dcim/platforms/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPlatformsRead operation.
     * @callback module:api/DcimApi~dcimPlatformsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Platform} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this platform.
     * @param {module:api/DcimApi~dcimPlatformsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Platform}
     */
    dcimPlatformsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPlatformsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Platform;
      return this.apiClient.callApi(
        '/dcim/platforms/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPlatformsUpdate operation.
     * @callback module:api/DcimApi~dcimPlatformsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Platform} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this platform.
     * @param {module:model/WritablePlatform} writablePlatform 
     * @param {module:api/DcimApi~dcimPlatformsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Platform}
     */
    dcimPlatformsUpdate(id, writablePlatform, callback) {
      let postBody = writablePlatform;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPlatformsUpdate");
      }
      // verify the required parameter 'writablePlatform' is set
      if (writablePlatform === undefined || writablePlatform === null) {
        throw new Error("Missing the required parameter 'writablePlatform' when calling dcimPlatformsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Platform;
      return this.apiClient.callApi(
        '/dcim/platforms/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerConnectionsList operation.
     * @callback module:api/DcimApi~dcimPowerConnectionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimPowerConnectionsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [connectionStatus] 
     * @param {String} [site] 
     * @param {String} [device] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimPowerConnectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimPowerConnectionsList200Response}
     */
    dcimPowerConnectionsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'connection_status': opts['connectionStatus'],
        'site': opts['site'],
        'device': opts['device'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimPowerConnectionsList200Response;
      return this.apiClient.callApi(
        '/dcim/power-connections/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletTemplatesCreate operation.
     * @callback module:api/DcimApi~dcimPowerOutletTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutletTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritablePowerOutletTemplate} writablePowerOutletTemplate 
     * @param {module:api/DcimApi~dcimPowerOutletTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutletTemplate}
     */
    dcimPowerOutletTemplatesCreate(writablePowerOutletTemplate, callback) {
      let postBody = writablePowerOutletTemplate;
      // verify the required parameter 'writablePowerOutletTemplate' is set
      if (writablePowerOutletTemplate === undefined || writablePowerOutletTemplate === null) {
        throw new Error("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerOutletTemplate;
      return this.apiClient.callApi(
        '/dcim/power-outlet-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletTemplatesDelete operation.
     * @callback module:api/DcimApi~dcimPowerOutletTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power outlet template.
     * @param {module:api/DcimApi~dcimPowerOutletTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimPowerOutletTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/power-outlet-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletTemplatesList operation.
     * @callback module:api/DcimApi~dcimPowerOutletTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimPowerOutletTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [devicetypeId] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimPowerOutletTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimPowerOutletTemplatesList200Response}
     */
    dcimPowerOutletTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'devicetype_id': opts['devicetypeId'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimPowerOutletTemplatesList200Response;
      return this.apiClient.callApi(
        '/dcim/power-outlet-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletTemplatesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimPowerOutletTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutletTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power outlet template.
     * @param {module:model/WritablePowerOutletTemplate} writablePowerOutletTemplate 
     * @param {module:api/DcimApi~dcimPowerOutletTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutletTemplate}
     */
    dcimPowerOutletTemplatesPartialUpdate(id, writablePowerOutletTemplate, callback) {
      let postBody = writablePowerOutletTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesPartialUpdate");
      }
      // verify the required parameter 'writablePowerOutletTemplate' is set
      if (writablePowerOutletTemplate === undefined || writablePowerOutletTemplate === null) {
        throw new Error("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerOutletTemplate;
      return this.apiClient.callApi(
        '/dcim/power-outlet-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletTemplatesRead operation.
     * @callback module:api/DcimApi~dcimPowerOutletTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutletTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power outlet template.
     * @param {module:api/DcimApi~dcimPowerOutletTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutletTemplate}
     */
    dcimPowerOutletTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PowerOutletTemplate;
      return this.apiClient.callApi(
        '/dcim/power-outlet-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletTemplatesUpdate operation.
     * @callback module:api/DcimApi~dcimPowerOutletTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutletTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power outlet template.
     * @param {module:model/WritablePowerOutletTemplate} writablePowerOutletTemplate 
     * @param {module:api/DcimApi~dcimPowerOutletTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutletTemplate}
     */
    dcimPowerOutletTemplatesUpdate(id, writablePowerOutletTemplate, callback) {
      let postBody = writablePowerOutletTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesUpdate");
      }
      // verify the required parameter 'writablePowerOutletTemplate' is set
      if (writablePowerOutletTemplate === undefined || writablePowerOutletTemplate === null) {
        throw new Error("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerOutletTemplate;
      return this.apiClient.callApi(
        '/dcim/power-outlet-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletsCreate operation.
     * @callback module:api/DcimApi~dcimPowerOutletsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutlet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritablePowerOutlet} writablePowerOutlet 
     * @param {module:api/DcimApi~dcimPowerOutletsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutlet}
     */
    dcimPowerOutletsCreate(writablePowerOutlet, callback) {
      let postBody = writablePowerOutlet;
      // verify the required parameter 'writablePowerOutlet' is set
      if (writablePowerOutlet === undefined || writablePowerOutlet === null) {
        throw new Error("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerOutlet;
      return this.apiClient.callApi(
        '/dcim/power-outlets/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletsDelete operation.
     * @callback module:api/DcimApi~dcimPowerOutletsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power outlet.
     * @param {module:api/DcimApi~dcimPowerOutletsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimPowerOutletsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/power-outlets/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletsList operation.
     * @callback module:api/DcimApi~dcimPowerOutletsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimPowerOutletsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [tag] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimPowerOutletsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimPowerOutletsList200Response}
     */
    dcimPowerOutletsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'tag': opts['tag'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimPowerOutletsList200Response;
      return this.apiClient.callApi(
        '/dcim/power-outlets/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimPowerOutletsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutlet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power outlet.
     * @param {module:model/WritablePowerOutlet} writablePowerOutlet 
     * @param {module:api/DcimApi~dcimPowerOutletsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutlet}
     */
    dcimPowerOutletsPartialUpdate(id, writablePowerOutlet, callback) {
      let postBody = writablePowerOutlet;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletsPartialUpdate");
      }
      // verify the required parameter 'writablePowerOutlet' is set
      if (writablePowerOutlet === undefined || writablePowerOutlet === null) {
        throw new Error("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerOutlet;
      return this.apiClient.callApi(
        '/dcim/power-outlets/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletsRead operation.
     * @callback module:api/DcimApi~dcimPowerOutletsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutlet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power outlet.
     * @param {module:api/DcimApi~dcimPowerOutletsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutlet}
     */
    dcimPowerOutletsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PowerOutlet;
      return this.apiClient.callApi(
        '/dcim/power-outlets/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletsUpdate operation.
     * @callback module:api/DcimApi~dcimPowerOutletsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutlet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power outlet.
     * @param {module:model/WritablePowerOutlet} writablePowerOutlet 
     * @param {module:api/DcimApi~dcimPowerOutletsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutlet}
     */
    dcimPowerOutletsUpdate(id, writablePowerOutlet, callback) {
      let postBody = writablePowerOutlet;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletsUpdate");
      }
      // verify the required parameter 'writablePowerOutlet' is set
      if (writablePowerOutlet === undefined || writablePowerOutlet === null) {
        throw new Error("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerOutlet;
      return this.apiClient.callApi(
        '/dcim/power-outlets/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortTemplatesCreate operation.
     * @callback module:api/DcimApi~dcimPowerPortTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritablePowerPortTemplate} writablePowerPortTemplate 
     * @param {module:api/DcimApi~dcimPowerPortTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPortTemplate}
     */
    dcimPowerPortTemplatesCreate(writablePowerPortTemplate, callback) {
      let postBody = writablePowerPortTemplate;
      // verify the required parameter 'writablePowerPortTemplate' is set
      if (writablePowerPortTemplate === undefined || writablePowerPortTemplate === null) {
        throw new Error("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerPortTemplate;
      return this.apiClient.callApi(
        '/dcim/power-port-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortTemplatesDelete operation.
     * @callback module:api/DcimApi~dcimPowerPortTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power port template.
     * @param {module:api/DcimApi~dcimPowerPortTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimPowerPortTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/power-port-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortTemplatesList operation.
     * @callback module:api/DcimApi~dcimPowerPortTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimPowerPortTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [devicetypeId] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimPowerPortTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimPowerPortTemplatesList200Response}
     */
    dcimPowerPortTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'devicetype_id': opts['devicetypeId'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimPowerPortTemplatesList200Response;
      return this.apiClient.callApi(
        '/dcim/power-port-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortTemplatesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimPowerPortTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power port template.
     * @param {module:model/WritablePowerPortTemplate} writablePowerPortTemplate 
     * @param {module:api/DcimApi~dcimPowerPortTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPortTemplate}
     */
    dcimPowerPortTemplatesPartialUpdate(id, writablePowerPortTemplate, callback) {
      let postBody = writablePowerPortTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortTemplatesPartialUpdate");
      }
      // verify the required parameter 'writablePowerPortTemplate' is set
      if (writablePowerPortTemplate === undefined || writablePowerPortTemplate === null) {
        throw new Error("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerPortTemplate;
      return this.apiClient.callApi(
        '/dcim/power-port-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortTemplatesRead operation.
     * @callback module:api/DcimApi~dcimPowerPortTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power port template.
     * @param {module:api/DcimApi~dcimPowerPortTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPortTemplate}
     */
    dcimPowerPortTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PowerPortTemplate;
      return this.apiClient.callApi(
        '/dcim/power-port-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortTemplatesUpdate operation.
     * @callback module:api/DcimApi~dcimPowerPortTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power port template.
     * @param {module:model/WritablePowerPortTemplate} writablePowerPortTemplate 
     * @param {module:api/DcimApi~dcimPowerPortTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPortTemplate}
     */
    dcimPowerPortTemplatesUpdate(id, writablePowerPortTemplate, callback) {
      let postBody = writablePowerPortTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortTemplatesUpdate");
      }
      // verify the required parameter 'writablePowerPortTemplate' is set
      if (writablePowerPortTemplate === undefined || writablePowerPortTemplate === null) {
        throw new Error("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerPortTemplate;
      return this.apiClient.callApi(
        '/dcim/power-port-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortsCreate operation.
     * @callback module:api/DcimApi~dcimPowerPortsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritablePowerPort} writablePowerPort 
     * @param {module:api/DcimApi~dcimPowerPortsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPort}
     */
    dcimPowerPortsCreate(writablePowerPort, callback) {
      let postBody = writablePowerPort;
      // verify the required parameter 'writablePowerPort' is set
      if (writablePowerPort === undefined || writablePowerPort === null) {
        throw new Error("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerPort;
      return this.apiClient.callApi(
        '/dcim/power-ports/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortsDelete operation.
     * @callback module:api/DcimApi~dcimPowerPortsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power port.
     * @param {module:api/DcimApi~dcimPowerPortsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimPowerPortsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/power-ports/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortsList operation.
     * @callback module:api/DcimApi~dcimPowerPortsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimPowerConnectionsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [tag] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimPowerPortsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimPowerConnectionsList200Response}
     */
    dcimPowerPortsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'tag': opts['tag'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimPowerConnectionsList200Response;
      return this.apiClient.callApi(
        '/dcim/power-ports/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimPowerPortsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power port.
     * @param {module:model/WritablePowerPort} writablePowerPort 
     * @param {module:api/DcimApi~dcimPowerPortsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPort}
     */
    dcimPowerPortsPartialUpdate(id, writablePowerPort, callback) {
      let postBody = writablePowerPort;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortsPartialUpdate");
      }
      // verify the required parameter 'writablePowerPort' is set
      if (writablePowerPort === undefined || writablePowerPort === null) {
        throw new Error("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerPort;
      return this.apiClient.callApi(
        '/dcim/power-ports/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortsRead operation.
     * @callback module:api/DcimApi~dcimPowerPortsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power port.
     * @param {module:api/DcimApi~dcimPowerPortsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPort}
     */
    dcimPowerPortsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PowerPort;
      return this.apiClient.callApi(
        '/dcim/power-ports/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortsUpdate operation.
     * @callback module:api/DcimApi~dcimPowerPortsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power port.
     * @param {module:model/WritablePowerPort} writablePowerPort 
     * @param {module:api/DcimApi~dcimPowerPortsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPort}
     */
    dcimPowerPortsUpdate(id, writablePowerPort, callback) {
      let postBody = writablePowerPort;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortsUpdate");
      }
      // verify the required parameter 'writablePowerPort' is set
      if (writablePowerPort === undefined || writablePowerPort === null) {
        throw new Error("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerPort;
      return this.apiClient.callApi(
        '/dcim/power-ports/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackGroupsCreate operation.
     * @callback module:api/DcimApi~dcimRackGroupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableRackGroup} writableRackGroup 
     * @param {module:api/DcimApi~dcimRackGroupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackGroup}
     */
    dcimRackGroupsCreate(writableRackGroup, callback) {
      let postBody = writableRackGroup;
      // verify the required parameter 'writableRackGroup' is set
      if (writableRackGroup === undefined || writableRackGroup === null) {
        throw new Error("Missing the required parameter 'writableRackGroup' when calling dcimRackGroupsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackGroup;
      return this.apiClient.callApi(
        '/dcim/rack-groups/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackGroupsDelete operation.
     * @callback module:api/DcimApi~dcimRackGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack group.
     * @param {module:api/DcimApi~dcimRackGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimRackGroupsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackGroupsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/rack-groups/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackGroupsList operation.
     * @callback module:api/DcimApi~dcimRackGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimRackGroupsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [siteId] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [q] 
     * @param {String} [site] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimRackGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimRackGroupsList200Response}
     */
    dcimRackGroupsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'site_id': opts['siteId'],
        'name': opts['name'],
        'slug': opts['slug'],
        'q': opts['q'],
        'site': opts['site'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimRackGroupsList200Response;
      return this.apiClient.callApi(
        '/dcim/rack-groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackGroupsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimRackGroupsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack group.
     * @param {module:model/WritableRackGroup} writableRackGroup 
     * @param {module:api/DcimApi~dcimRackGroupsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackGroup}
     */
    dcimRackGroupsPartialUpdate(id, writableRackGroup, callback) {
      let postBody = writableRackGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackGroupsPartialUpdate");
      }
      // verify the required parameter 'writableRackGroup' is set
      if (writableRackGroup === undefined || writableRackGroup === null) {
        throw new Error("Missing the required parameter 'writableRackGroup' when calling dcimRackGroupsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackGroup;
      return this.apiClient.callApi(
        '/dcim/rack-groups/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackGroupsRead operation.
     * @callback module:api/DcimApi~dcimRackGroupsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack group.
     * @param {module:api/DcimApi~dcimRackGroupsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackGroup}
     */
    dcimRackGroupsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackGroupsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RackGroup;
      return this.apiClient.callApi(
        '/dcim/rack-groups/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackGroupsUpdate operation.
     * @callback module:api/DcimApi~dcimRackGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack group.
     * @param {module:model/WritableRackGroup} writableRackGroup 
     * @param {module:api/DcimApi~dcimRackGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackGroup}
     */
    dcimRackGroupsUpdate(id, writableRackGroup, callback) {
      let postBody = writableRackGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackGroupsUpdate");
      }
      // verify the required parameter 'writableRackGroup' is set
      if (writableRackGroup === undefined || writableRackGroup === null) {
        throw new Error("Missing the required parameter 'writableRackGroup' when calling dcimRackGroupsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackGroup;
      return this.apiClient.callApi(
        '/dcim/rack-groups/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackReservationsCreate operation.
     * @callback module:api/DcimApi~dcimRackReservationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackReservation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableRackReservation} writableRackReservation 
     * @param {module:api/DcimApi~dcimRackReservationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackReservation}
     */
    dcimRackReservationsCreate(writableRackReservation, callback) {
      let postBody = writableRackReservation;
      // verify the required parameter 'writableRackReservation' is set
      if (writableRackReservation === undefined || writableRackReservation === null) {
        throw new Error("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackReservation;
      return this.apiClient.callApi(
        '/dcim/rack-reservations/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackReservationsDelete operation.
     * @callback module:api/DcimApi~dcimRackReservationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack reservation.
     * @param {module:api/DcimApi~dcimRackReservationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimRackReservationsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackReservationsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/rack-reservations/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackReservationsList operation.
     * @callback module:api/DcimApi~dcimRackReservationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimRackReservationsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [created] 
     * @param {String} [idIn] Multiple values may be separated by commas.
     * @param {String} [q] 
     * @param {String} [rackId] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [groupId] 
     * @param {String} [group] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [userId] 
     * @param {String} [user] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimRackReservationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimRackReservationsList200Response}
     */
    dcimRackReservationsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'created': opts['created'],
        'id__in': opts['idIn'],
        'q': opts['q'],
        'rack_id': opts['rackId'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'group_id': opts['groupId'],
        'group': opts['group'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'user_id': opts['userId'],
        'user': opts['user'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimRackReservationsList200Response;
      return this.apiClient.callApi(
        '/dcim/rack-reservations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackReservationsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimRackReservationsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackReservation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack reservation.
     * @param {module:model/WritableRackReservation} writableRackReservation 
     * @param {module:api/DcimApi~dcimRackReservationsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackReservation}
     */
    dcimRackReservationsPartialUpdate(id, writableRackReservation, callback) {
      let postBody = writableRackReservation;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackReservationsPartialUpdate");
      }
      // verify the required parameter 'writableRackReservation' is set
      if (writableRackReservation === undefined || writableRackReservation === null) {
        throw new Error("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackReservation;
      return this.apiClient.callApi(
        '/dcim/rack-reservations/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackReservationsRead operation.
     * @callback module:api/DcimApi~dcimRackReservationsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackReservation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack reservation.
     * @param {module:api/DcimApi~dcimRackReservationsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackReservation}
     */
    dcimRackReservationsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackReservationsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RackReservation;
      return this.apiClient.callApi(
        '/dcim/rack-reservations/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackReservationsUpdate operation.
     * @callback module:api/DcimApi~dcimRackReservationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackReservation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack reservation.
     * @param {module:model/WritableRackReservation} writableRackReservation 
     * @param {module:api/DcimApi~dcimRackReservationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackReservation}
     */
    dcimRackReservationsUpdate(id, writableRackReservation, callback) {
      let postBody = writableRackReservation;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackReservationsUpdate");
      }
      // verify the required parameter 'writableRackReservation' is set
      if (writableRackReservation === undefined || writableRackReservation === null) {
        throw new Error("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackReservation;
      return this.apiClient.callApi(
        '/dcim/rack-reservations/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackRolesCreate operation.
     * @callback module:api/DcimApi~dcimRackRolesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/RackRole} rackRole 
     * @param {module:api/DcimApi~dcimRackRolesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackRole}
     */
    dcimRackRolesCreate(rackRole, callback) {
      let postBody = rackRole;
      // verify the required parameter 'rackRole' is set
      if (rackRole === undefined || rackRole === null) {
        throw new Error("Missing the required parameter 'rackRole' when calling dcimRackRolesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackRole;
      return this.apiClient.callApi(
        '/dcim/rack-roles/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackRolesDelete operation.
     * @callback module:api/DcimApi~dcimRackRolesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack role.
     * @param {module:api/DcimApi~dcimRackRolesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimRackRolesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackRolesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/rack-roles/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackRolesList operation.
     * @callback module:api/DcimApi~dcimRackRolesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimRackRolesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [color] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimRackRolesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimRackRolesList200Response}
     */
    dcimRackRolesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'slug': opts['slug'],
        'color': opts['color'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimRackRolesList200Response;
      return this.apiClient.callApi(
        '/dcim/rack-roles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackRolesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimRackRolesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack role.
     * @param {module:model/RackRole} rackRole 
     * @param {module:api/DcimApi~dcimRackRolesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackRole}
     */
    dcimRackRolesPartialUpdate(id, rackRole, callback) {
      let postBody = rackRole;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackRolesPartialUpdate");
      }
      // verify the required parameter 'rackRole' is set
      if (rackRole === undefined || rackRole === null) {
        throw new Error("Missing the required parameter 'rackRole' when calling dcimRackRolesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackRole;
      return this.apiClient.callApi(
        '/dcim/rack-roles/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackRolesRead operation.
     * @callback module:api/DcimApi~dcimRackRolesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack role.
     * @param {module:api/DcimApi~dcimRackRolesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackRole}
     */
    dcimRackRolesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackRolesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RackRole;
      return this.apiClient.callApi(
        '/dcim/rack-roles/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackRolesUpdate operation.
     * @callback module:api/DcimApi~dcimRackRolesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack role.
     * @param {module:model/RackRole} rackRole 
     * @param {module:api/DcimApi~dcimRackRolesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackRole}
     */
    dcimRackRolesUpdate(id, rackRole, callback) {
      let postBody = rackRole;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackRolesUpdate");
      }
      // verify the required parameter 'rackRole' is set
      if (rackRole === undefined || rackRole === null) {
        throw new Error("Missing the required parameter 'rackRole' when calling dcimRackRolesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackRole;
      return this.apiClient.callApi(
        '/dcim/rack-roles/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRacksCreate operation.
     * @callback module:api/DcimApi~dcimRacksCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableRack} writableRack 
     * @param {module:api/DcimApi~dcimRacksCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rack}
     */
    dcimRacksCreate(writableRack, callback) {
      let postBody = writableRack;
      // verify the required parameter 'writableRack' is set
      if (writableRack === undefined || writableRack === null) {
        throw new Error("Missing the required parameter 'writableRack' when calling dcimRacksCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rack;
      return this.apiClient.callApi(
        '/dcim/racks/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRacksDelete operation.
     * @callback module:api/DcimApi~dcimRacksDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack.
     * @param {module:api/DcimApi~dcimRacksDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimRacksDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRacksDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/racks/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRacksList operation.
     * @callback module:api/DcimApi~dcimRacksListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimRacksList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [serial] 
     * @param {String} [type] 
     * @param {String} [width] 
     * @param {Number} [uHeight] 
     * @param {String} [descUnits] 
     * @param {String} [idIn] Multiple values may be separated by commas.
     * @param {String} [q] 
     * @param {String} [facilityId] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [groupId] 
     * @param {String} [group] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [roleId] 
     * @param {String} [role] 
     * @param {String} [tag] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimRacksListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimRacksList200Response}
     */
    dcimRacksList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'serial': opts['serial'],
        'type': opts['type'],
        'width': opts['width'],
        'u_height': opts['uHeight'],
        'desc_units': opts['descUnits'],
        'id__in': opts['idIn'],
        'q': opts['q'],
        'facility_id': opts['facilityId'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'group_id': opts['groupId'],
        'group': opts['group'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'role_id': opts['roleId'],
        'role': opts['role'],
        'tag': opts['tag'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimRacksList200Response;
      return this.apiClient.callApi(
        '/dcim/racks/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRacksPartialUpdate operation.
     * @callback module:api/DcimApi~dcimRacksPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack.
     * @param {module:model/WritableRack} writableRack 
     * @param {module:api/DcimApi~dcimRacksPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rack}
     */
    dcimRacksPartialUpdate(id, writableRack, callback) {
      let postBody = writableRack;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRacksPartialUpdate");
      }
      // verify the required parameter 'writableRack' is set
      if (writableRack === undefined || writableRack === null) {
        throw new Error("Missing the required parameter 'writableRack' when calling dcimRacksPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rack;
      return this.apiClient.callApi(
        '/dcim/racks/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRacksRead operation.
     * @callback module:api/DcimApi~dcimRacksReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack.
     * @param {module:api/DcimApi~dcimRacksReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rack}
     */
    dcimRacksRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRacksRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Rack;
      return this.apiClient.callApi(
        '/dcim/racks/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRacksUnits operation.
     * @callback module:api/DcimApi~dcimRacksUnitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List rack units (by rack)
     * @param {Number} id A unique integer value identifying this rack.
     * @param {module:api/DcimApi~dcimRacksUnitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rack}
     */
    dcimRacksUnits(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRacksUnits");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Rack;
      return this.apiClient.callApi(
        '/dcim/racks/{id}/units/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRacksUpdate operation.
     * @callback module:api/DcimApi~dcimRacksUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack.
     * @param {module:model/WritableRack} writableRack 
     * @param {module:api/DcimApi~dcimRacksUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rack}
     */
    dcimRacksUpdate(id, writableRack, callback) {
      let postBody = writableRack;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRacksUpdate");
      }
      // verify the required parameter 'writableRack' is set
      if (writableRack === undefined || writableRack === null) {
        throw new Error("Missing the required parameter 'writableRack' when calling dcimRacksUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rack;
      return this.apiClient.callApi(
        '/dcim/racks/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRegionsCreate operation.
     * @callback module:api/DcimApi~dcimRegionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Region} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableRegion} writableRegion 
     * @param {module:api/DcimApi~dcimRegionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Region}
     */
    dcimRegionsCreate(writableRegion, callback) {
      let postBody = writableRegion;
      // verify the required parameter 'writableRegion' is set
      if (writableRegion === undefined || writableRegion === null) {
        throw new Error("Missing the required parameter 'writableRegion' when calling dcimRegionsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Region;
      return this.apiClient.callApi(
        '/dcim/regions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRegionsDelete operation.
     * @callback module:api/DcimApi~dcimRegionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this region.
     * @param {module:api/DcimApi~dcimRegionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimRegionsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRegionsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/regions/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRegionsList operation.
     * @callback module:api/DcimApi~dcimRegionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimRegionsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [q] 
     * @param {String} [parentId] 
     * @param {String} [parent] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimRegionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimRegionsList200Response}
     */
    dcimRegionsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'slug': opts['slug'],
        'q': opts['q'],
        'parent_id': opts['parentId'],
        'parent': opts['parent'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimRegionsList200Response;
      return this.apiClient.callApi(
        '/dcim/regions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRegionsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimRegionsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Region} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this region.
     * @param {module:model/WritableRegion} writableRegion 
     * @param {module:api/DcimApi~dcimRegionsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Region}
     */
    dcimRegionsPartialUpdate(id, writableRegion, callback) {
      let postBody = writableRegion;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRegionsPartialUpdate");
      }
      // verify the required parameter 'writableRegion' is set
      if (writableRegion === undefined || writableRegion === null) {
        throw new Error("Missing the required parameter 'writableRegion' when calling dcimRegionsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Region;
      return this.apiClient.callApi(
        '/dcim/regions/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRegionsRead operation.
     * @callback module:api/DcimApi~dcimRegionsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Region} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this region.
     * @param {module:api/DcimApi~dcimRegionsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Region}
     */
    dcimRegionsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRegionsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Region;
      return this.apiClient.callApi(
        '/dcim/regions/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRegionsUpdate operation.
     * @callback module:api/DcimApi~dcimRegionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Region} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this region.
     * @param {module:model/WritableRegion} writableRegion 
     * @param {module:api/DcimApi~dcimRegionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Region}
     */
    dcimRegionsUpdate(id, writableRegion, callback) {
      let postBody = writableRegion;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRegionsUpdate");
      }
      // verify the required parameter 'writableRegion' is set
      if (writableRegion === undefined || writableRegion === null) {
        throw new Error("Missing the required parameter 'writableRegion' when calling dcimRegionsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Region;
      return this.apiClient.callApi(
        '/dcim/regions/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimSitesCreate operation.
     * @callback module:api/DcimApi~dcimSitesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableSite} writableSite 
     * @param {module:api/DcimApi~dcimSitesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    dcimSitesCreate(writableSite, callback) {
      let postBody = writableSite;
      // verify the required parameter 'writableSite' is set
      if (writableSite === undefined || writableSite === null) {
        throw new Error("Missing the required parameter 'writableSite' when calling dcimSitesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/dcim/sites/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimSitesDelete operation.
     * @callback module:api/DcimApi~dcimSitesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this site.
     * @param {module:api/DcimApi~dcimSitesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimSitesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimSitesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/sites/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimSitesGraphs operation.
     * @callback module:api/DcimApi~dcimSitesGraphsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A convenience method for rendering graphs for a particular site.
     * @param {Number} id A unique integer value identifying this site.
     * @param {module:api/DcimApi~dcimSitesGraphsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    dcimSitesGraphs(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimSitesGraphs");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/dcim/sites/{id}/graphs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimSitesList operation.
     * @callback module:api/DcimApi~dcimSitesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimSitesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [q] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [facility] 
     * @param {Number} [asn] 
     * @param {String} [contactName] 
     * @param {String} [contactPhone] 
     * @param {String} [contactEmail] 
     * @param {String} [idIn] Multiple values may be separated by commas.
     * @param {String} [status] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [tag] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimSitesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimSitesList200Response}
     */
    dcimSitesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'name': opts['name'],
        'slug': opts['slug'],
        'facility': opts['facility'],
        'asn': opts['asn'],
        'contact_name': opts['contactName'],
        'contact_phone': opts['contactPhone'],
        'contact_email': opts['contactEmail'],
        'id__in': opts['idIn'],
        'status': opts['status'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'tag': opts['tag'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimSitesList200Response;
      return this.apiClient.callApi(
        '/dcim/sites/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimSitesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimSitesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this site.
     * @param {module:model/WritableSite} writableSite 
     * @param {module:api/DcimApi~dcimSitesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    dcimSitesPartialUpdate(id, writableSite, callback) {
      let postBody = writableSite;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimSitesPartialUpdate");
      }
      // verify the required parameter 'writableSite' is set
      if (writableSite === undefined || writableSite === null) {
        throw new Error("Missing the required parameter 'writableSite' when calling dcimSitesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/dcim/sites/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimSitesRead operation.
     * @callback module:api/DcimApi~dcimSitesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this site.
     * @param {module:api/DcimApi~dcimSitesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    dcimSitesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimSitesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/dcim/sites/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimSitesUpdate operation.
     * @callback module:api/DcimApi~dcimSitesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this site.
     * @param {module:model/WritableSite} writableSite 
     * @param {module:api/DcimApi~dcimSitesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    dcimSitesUpdate(id, writableSite, callback) {
      let postBody = writableSite;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimSitesUpdate");
      }
      // verify the required parameter 'writableSite' is set
      if (writableSite === undefined || writableSite === null) {
        throw new Error("Missing the required parameter 'writableSite' when calling dcimSitesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/dcim/sites/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimVirtualChassisCreate operation.
     * @callback module:api/DcimApi~dcimVirtualChassisCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualChassis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVirtualChassis} writableVirtualChassis 
     * @param {module:api/DcimApi~dcimVirtualChassisCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualChassis}
     */
    dcimVirtualChassisCreate(writableVirtualChassis, callback) {
      let postBody = writableVirtualChassis;
      // verify the required parameter 'writableVirtualChassis' is set
      if (writableVirtualChassis === undefined || writableVirtualChassis === null) {
        throw new Error("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualChassis;
      return this.apiClient.callApi(
        '/dcim/virtual-chassis/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimVirtualChassisDelete operation.
     * @callback module:api/DcimApi~dcimVirtualChassisDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this virtual chassis.
     * @param {module:api/DcimApi~dcimVirtualChassisDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimVirtualChassisDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimVirtualChassisDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/virtual-chassis/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimVirtualChassisList operation.
     * @callback module:api/DcimApi~dcimVirtualChassisListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimVirtualChassisList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimVirtualChassisListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimVirtualChassisList200Response}
     */
    dcimVirtualChassisList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimVirtualChassisList200Response;
      return this.apiClient.callApi(
        '/dcim/virtual-chassis/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimVirtualChassisPartialUpdate operation.
     * @callback module:api/DcimApi~dcimVirtualChassisPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualChassis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this virtual chassis.
     * @param {module:model/WritableVirtualChassis} writableVirtualChassis 
     * @param {module:api/DcimApi~dcimVirtualChassisPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualChassis}
     */
    dcimVirtualChassisPartialUpdate(id, writableVirtualChassis, callback) {
      let postBody = writableVirtualChassis;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimVirtualChassisPartialUpdate");
      }
      // verify the required parameter 'writableVirtualChassis' is set
      if (writableVirtualChassis === undefined || writableVirtualChassis === null) {
        throw new Error("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualChassis;
      return this.apiClient.callApi(
        '/dcim/virtual-chassis/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimVirtualChassisRead operation.
     * @callback module:api/DcimApi~dcimVirtualChassisReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualChassis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this virtual chassis.
     * @param {module:api/DcimApi~dcimVirtualChassisReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualChassis}
     */
    dcimVirtualChassisRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimVirtualChassisRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualChassis;
      return this.apiClient.callApi(
        '/dcim/virtual-chassis/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimVirtualChassisUpdate operation.
     * @callback module:api/DcimApi~dcimVirtualChassisUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualChassis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this virtual chassis.
     * @param {module:model/WritableVirtualChassis} writableVirtualChassis 
     * @param {module:api/DcimApi~dcimVirtualChassisUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualChassis}
     */
    dcimVirtualChassisUpdate(id, writableVirtualChassis, callback) {
      let postBody = writableVirtualChassis;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimVirtualChassisUpdate");
      }
      // verify the required parameter 'writableVirtualChassis' is set
      if (writableVirtualChassis === undefined || writableVirtualChassis === null) {
        throw new Error("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualChassis;
      return this.apiClient.callApi(
        '/dcim/virtual-chassis/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
