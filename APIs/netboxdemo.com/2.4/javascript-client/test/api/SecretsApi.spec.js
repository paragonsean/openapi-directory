/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetBoxApi);
  }
}(this, function(expect, NetBoxApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetBoxApi.SecretsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SecretsApi', function() {
    describe('secretsChoicesList', function() {
      it('should call secretsChoicesList successfully', function(done) {
        //uncomment below and update the code to test secretsChoicesList
        //instance.secretsChoicesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsChoicesRead', function() {
      it('should call secretsChoicesRead successfully', function(done) {
        //uncomment below and update the code to test secretsChoicesRead
        //instance.secretsChoicesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsGenerateRsaKeyPairList', function() {
      it('should call secretsGenerateRsaKeyPairList successfully', function(done) {
        //uncomment below and update the code to test secretsGenerateRsaKeyPairList
        //instance.secretsGenerateRsaKeyPairList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsGetSessionKeyCreate', function() {
      it('should call secretsGetSessionKeyCreate successfully', function(done) {
        //uncomment below and update the code to test secretsGetSessionKeyCreate
        //instance.secretsGetSessionKeyCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsSecretRolesCreate', function() {
      it('should call secretsSecretRolesCreate successfully', function(done) {
        //uncomment below and update the code to test secretsSecretRolesCreate
        //instance.secretsSecretRolesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsSecretRolesDelete', function() {
      it('should call secretsSecretRolesDelete successfully', function(done) {
        //uncomment below and update the code to test secretsSecretRolesDelete
        //instance.secretsSecretRolesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsSecretRolesList', function() {
      it('should call secretsSecretRolesList successfully', function(done) {
        //uncomment below and update the code to test secretsSecretRolesList
        //instance.secretsSecretRolesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsSecretRolesPartialUpdate', function() {
      it('should call secretsSecretRolesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test secretsSecretRolesPartialUpdate
        //instance.secretsSecretRolesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsSecretRolesRead', function() {
      it('should call secretsSecretRolesRead successfully', function(done) {
        //uncomment below and update the code to test secretsSecretRolesRead
        //instance.secretsSecretRolesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsSecretRolesUpdate', function() {
      it('should call secretsSecretRolesUpdate successfully', function(done) {
        //uncomment below and update the code to test secretsSecretRolesUpdate
        //instance.secretsSecretRolesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsSecretsCreate', function() {
      it('should call secretsSecretsCreate successfully', function(done) {
        //uncomment below and update the code to test secretsSecretsCreate
        //instance.secretsSecretsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsSecretsDelete', function() {
      it('should call secretsSecretsDelete successfully', function(done) {
        //uncomment below and update the code to test secretsSecretsDelete
        //instance.secretsSecretsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsSecretsList', function() {
      it('should call secretsSecretsList successfully', function(done) {
        //uncomment below and update the code to test secretsSecretsList
        //instance.secretsSecretsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsSecretsPartialUpdate', function() {
      it('should call secretsSecretsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test secretsSecretsPartialUpdate
        //instance.secretsSecretsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsSecretsRead', function() {
      it('should call secretsSecretsRead successfully', function(done) {
        //uncomment below and update the code to test secretsSecretsRead
        //instance.secretsSecretsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsSecretsUpdate', function() {
      it('should call secretsSecretsUpdate successfully', function(done) {
        //uncomment below and update the code to test secretsSecretsUpdate
        //instance.secretsSecretsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
