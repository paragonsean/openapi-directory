/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetBoxApi);
  }
}(this, function(expect, NetBoxApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetBoxApi.CircuitsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CircuitsApi', function() {
    describe('circuitsChoicesList', function() {
      it('should call circuitsChoicesList successfully', function(done) {
        //uncomment below and update the code to test circuitsChoicesList
        //instance.circuitsChoicesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsChoicesRead', function() {
      it('should call circuitsChoicesRead successfully', function(done) {
        //uncomment below and update the code to test circuitsChoicesRead
        //instance.circuitsChoicesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitTerminationsCreate', function() {
      it('should call circuitsCircuitTerminationsCreate successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitTerminationsCreate
        //instance.circuitsCircuitTerminationsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitTerminationsDelete', function() {
      it('should call circuitsCircuitTerminationsDelete successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitTerminationsDelete
        //instance.circuitsCircuitTerminationsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitTerminationsList', function() {
      it('should call circuitsCircuitTerminationsList successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitTerminationsList
        //instance.circuitsCircuitTerminationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitTerminationsPartialUpdate', function() {
      it('should call circuitsCircuitTerminationsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitTerminationsPartialUpdate
        //instance.circuitsCircuitTerminationsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitTerminationsRead', function() {
      it('should call circuitsCircuitTerminationsRead successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitTerminationsRead
        //instance.circuitsCircuitTerminationsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitTerminationsUpdate', function() {
      it('should call circuitsCircuitTerminationsUpdate successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitTerminationsUpdate
        //instance.circuitsCircuitTerminationsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitTypesCreate', function() {
      it('should call circuitsCircuitTypesCreate successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitTypesCreate
        //instance.circuitsCircuitTypesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitTypesDelete', function() {
      it('should call circuitsCircuitTypesDelete successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitTypesDelete
        //instance.circuitsCircuitTypesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitTypesList', function() {
      it('should call circuitsCircuitTypesList successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitTypesList
        //instance.circuitsCircuitTypesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitTypesPartialUpdate', function() {
      it('should call circuitsCircuitTypesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitTypesPartialUpdate
        //instance.circuitsCircuitTypesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitTypesRead', function() {
      it('should call circuitsCircuitTypesRead successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitTypesRead
        //instance.circuitsCircuitTypesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitTypesUpdate', function() {
      it('should call circuitsCircuitTypesUpdate successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitTypesUpdate
        //instance.circuitsCircuitTypesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitsCreate', function() {
      it('should call circuitsCircuitsCreate successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitsCreate
        //instance.circuitsCircuitsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitsDelete', function() {
      it('should call circuitsCircuitsDelete successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitsDelete
        //instance.circuitsCircuitsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitsList', function() {
      it('should call circuitsCircuitsList successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitsList
        //instance.circuitsCircuitsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitsPartialUpdate', function() {
      it('should call circuitsCircuitsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitsPartialUpdate
        //instance.circuitsCircuitsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitsRead', function() {
      it('should call circuitsCircuitsRead successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitsRead
        //instance.circuitsCircuitsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsCircuitsUpdate', function() {
      it('should call circuitsCircuitsUpdate successfully', function(done) {
        //uncomment below and update the code to test circuitsCircuitsUpdate
        //instance.circuitsCircuitsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsProvidersCreate', function() {
      it('should call circuitsProvidersCreate successfully', function(done) {
        //uncomment below and update the code to test circuitsProvidersCreate
        //instance.circuitsProvidersCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsProvidersDelete', function() {
      it('should call circuitsProvidersDelete successfully', function(done) {
        //uncomment below and update the code to test circuitsProvidersDelete
        //instance.circuitsProvidersDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsProvidersGraphs', function() {
      it('should call circuitsProvidersGraphs successfully', function(done) {
        //uncomment below and update the code to test circuitsProvidersGraphs
        //instance.circuitsProvidersGraphs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsProvidersList', function() {
      it('should call circuitsProvidersList successfully', function(done) {
        //uncomment below and update the code to test circuitsProvidersList
        //instance.circuitsProvidersList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsProvidersPartialUpdate', function() {
      it('should call circuitsProvidersPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test circuitsProvidersPartialUpdate
        //instance.circuitsProvidersPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsProvidersRead', function() {
      it('should call circuitsProvidersRead successfully', function(done) {
        //uncomment below and update the code to test circuitsProvidersRead
        //instance.circuitsProvidersRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('circuitsProvidersUpdate', function() {
      it('should call circuitsProvidersUpdate successfully', function(done) {
        //uncomment below and update the code to test circuitsProvidersUpdate
        //instance.circuitsProvidersUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
