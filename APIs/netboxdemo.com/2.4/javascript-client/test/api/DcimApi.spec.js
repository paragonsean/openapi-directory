/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetBoxApi);
  }
}(this, function(expect, NetBoxApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetBoxApi.DcimApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DcimApi', function() {
    describe('dcimChoicesList', function() {
      it('should call dcimChoicesList successfully', function(done) {
        //uncomment below and update the code to test dcimChoicesList
        //instance.dcimChoicesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimChoicesRead', function() {
      it('should call dcimChoicesRead successfully', function(done) {
        //uncomment below and update the code to test dcimChoicesRead
        //instance.dcimChoicesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConnectedDeviceList', function() {
      it('should call dcimConnectedDeviceList successfully', function(done) {
        //uncomment below and update the code to test dcimConnectedDeviceList
        //instance.dcimConnectedDeviceList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsoleConnectionsList', function() {
      it('should call dcimConsoleConnectionsList successfully', function(done) {
        //uncomment below and update the code to test dcimConsoleConnectionsList
        //instance.dcimConsoleConnectionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsolePortTemplatesCreate', function() {
      it('should call dcimConsolePortTemplatesCreate successfully', function(done) {
        //uncomment below and update the code to test dcimConsolePortTemplatesCreate
        //instance.dcimConsolePortTemplatesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsolePortTemplatesDelete', function() {
      it('should call dcimConsolePortTemplatesDelete successfully', function(done) {
        //uncomment below and update the code to test dcimConsolePortTemplatesDelete
        //instance.dcimConsolePortTemplatesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsolePortTemplatesList', function() {
      it('should call dcimConsolePortTemplatesList successfully', function(done) {
        //uncomment below and update the code to test dcimConsolePortTemplatesList
        //instance.dcimConsolePortTemplatesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsolePortTemplatesPartialUpdate', function() {
      it('should call dcimConsolePortTemplatesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimConsolePortTemplatesPartialUpdate
        //instance.dcimConsolePortTemplatesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsolePortTemplatesRead', function() {
      it('should call dcimConsolePortTemplatesRead successfully', function(done) {
        //uncomment below and update the code to test dcimConsolePortTemplatesRead
        //instance.dcimConsolePortTemplatesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsolePortTemplatesUpdate', function() {
      it('should call dcimConsolePortTemplatesUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimConsolePortTemplatesUpdate
        //instance.dcimConsolePortTemplatesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsolePortsCreate', function() {
      it('should call dcimConsolePortsCreate successfully', function(done) {
        //uncomment below and update the code to test dcimConsolePortsCreate
        //instance.dcimConsolePortsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsolePortsDelete', function() {
      it('should call dcimConsolePortsDelete successfully', function(done) {
        //uncomment below and update the code to test dcimConsolePortsDelete
        //instance.dcimConsolePortsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsolePortsList', function() {
      it('should call dcimConsolePortsList successfully', function(done) {
        //uncomment below and update the code to test dcimConsolePortsList
        //instance.dcimConsolePortsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsolePortsPartialUpdate', function() {
      it('should call dcimConsolePortsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimConsolePortsPartialUpdate
        //instance.dcimConsolePortsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsolePortsRead', function() {
      it('should call dcimConsolePortsRead successfully', function(done) {
        //uncomment below and update the code to test dcimConsolePortsRead
        //instance.dcimConsolePortsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsolePortsUpdate', function() {
      it('should call dcimConsolePortsUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimConsolePortsUpdate
        //instance.dcimConsolePortsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsoleServerPortTemplatesCreate', function() {
      it('should call dcimConsoleServerPortTemplatesCreate successfully', function(done) {
        //uncomment below and update the code to test dcimConsoleServerPortTemplatesCreate
        //instance.dcimConsoleServerPortTemplatesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsoleServerPortTemplatesDelete', function() {
      it('should call dcimConsoleServerPortTemplatesDelete successfully', function(done) {
        //uncomment below and update the code to test dcimConsoleServerPortTemplatesDelete
        //instance.dcimConsoleServerPortTemplatesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsoleServerPortTemplatesList', function() {
      it('should call dcimConsoleServerPortTemplatesList successfully', function(done) {
        //uncomment below and update the code to test dcimConsoleServerPortTemplatesList
        //instance.dcimConsoleServerPortTemplatesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsoleServerPortTemplatesPartialUpdate', function() {
      it('should call dcimConsoleServerPortTemplatesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimConsoleServerPortTemplatesPartialUpdate
        //instance.dcimConsoleServerPortTemplatesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsoleServerPortTemplatesRead', function() {
      it('should call dcimConsoleServerPortTemplatesRead successfully', function(done) {
        //uncomment below and update the code to test dcimConsoleServerPortTemplatesRead
        //instance.dcimConsoleServerPortTemplatesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsoleServerPortTemplatesUpdate', function() {
      it('should call dcimConsoleServerPortTemplatesUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimConsoleServerPortTemplatesUpdate
        //instance.dcimConsoleServerPortTemplatesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsoleServerPortsCreate', function() {
      it('should call dcimConsoleServerPortsCreate successfully', function(done) {
        //uncomment below and update the code to test dcimConsoleServerPortsCreate
        //instance.dcimConsoleServerPortsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsoleServerPortsDelete', function() {
      it('should call dcimConsoleServerPortsDelete successfully', function(done) {
        //uncomment below and update the code to test dcimConsoleServerPortsDelete
        //instance.dcimConsoleServerPortsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsoleServerPortsList', function() {
      it('should call dcimConsoleServerPortsList successfully', function(done) {
        //uncomment below and update the code to test dcimConsoleServerPortsList
        //instance.dcimConsoleServerPortsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsoleServerPortsPartialUpdate', function() {
      it('should call dcimConsoleServerPortsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimConsoleServerPortsPartialUpdate
        //instance.dcimConsoleServerPortsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsoleServerPortsRead', function() {
      it('should call dcimConsoleServerPortsRead successfully', function(done) {
        //uncomment below and update the code to test dcimConsoleServerPortsRead
        //instance.dcimConsoleServerPortsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimConsoleServerPortsUpdate', function() {
      it('should call dcimConsoleServerPortsUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimConsoleServerPortsUpdate
        //instance.dcimConsoleServerPortsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceBayTemplatesCreate', function() {
      it('should call dcimDeviceBayTemplatesCreate successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceBayTemplatesCreate
        //instance.dcimDeviceBayTemplatesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceBayTemplatesDelete', function() {
      it('should call dcimDeviceBayTemplatesDelete successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceBayTemplatesDelete
        //instance.dcimDeviceBayTemplatesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceBayTemplatesList', function() {
      it('should call dcimDeviceBayTemplatesList successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceBayTemplatesList
        //instance.dcimDeviceBayTemplatesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceBayTemplatesPartialUpdate', function() {
      it('should call dcimDeviceBayTemplatesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceBayTemplatesPartialUpdate
        //instance.dcimDeviceBayTemplatesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceBayTemplatesRead', function() {
      it('should call dcimDeviceBayTemplatesRead successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceBayTemplatesRead
        //instance.dcimDeviceBayTemplatesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceBayTemplatesUpdate', function() {
      it('should call dcimDeviceBayTemplatesUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceBayTemplatesUpdate
        //instance.dcimDeviceBayTemplatesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceBaysCreate', function() {
      it('should call dcimDeviceBaysCreate successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceBaysCreate
        //instance.dcimDeviceBaysCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceBaysDelete', function() {
      it('should call dcimDeviceBaysDelete successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceBaysDelete
        //instance.dcimDeviceBaysDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceBaysList', function() {
      it('should call dcimDeviceBaysList successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceBaysList
        //instance.dcimDeviceBaysList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceBaysPartialUpdate', function() {
      it('should call dcimDeviceBaysPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceBaysPartialUpdate
        //instance.dcimDeviceBaysPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceBaysRead', function() {
      it('should call dcimDeviceBaysRead successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceBaysRead
        //instance.dcimDeviceBaysRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceBaysUpdate', function() {
      it('should call dcimDeviceBaysUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceBaysUpdate
        //instance.dcimDeviceBaysUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceRolesCreate', function() {
      it('should call dcimDeviceRolesCreate successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceRolesCreate
        //instance.dcimDeviceRolesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceRolesDelete', function() {
      it('should call dcimDeviceRolesDelete successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceRolesDelete
        //instance.dcimDeviceRolesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceRolesList', function() {
      it('should call dcimDeviceRolesList successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceRolesList
        //instance.dcimDeviceRolesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceRolesPartialUpdate', function() {
      it('should call dcimDeviceRolesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceRolesPartialUpdate
        //instance.dcimDeviceRolesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceRolesRead', function() {
      it('should call dcimDeviceRolesRead successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceRolesRead
        //instance.dcimDeviceRolesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceRolesUpdate', function() {
      it('should call dcimDeviceRolesUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceRolesUpdate
        //instance.dcimDeviceRolesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceTypesCreate', function() {
      it('should call dcimDeviceTypesCreate successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceTypesCreate
        //instance.dcimDeviceTypesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceTypesDelete', function() {
      it('should call dcimDeviceTypesDelete successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceTypesDelete
        //instance.dcimDeviceTypesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceTypesList', function() {
      it('should call dcimDeviceTypesList successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceTypesList
        //instance.dcimDeviceTypesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceTypesPartialUpdate', function() {
      it('should call dcimDeviceTypesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceTypesPartialUpdate
        //instance.dcimDeviceTypesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceTypesRead', function() {
      it('should call dcimDeviceTypesRead successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceTypesRead
        //instance.dcimDeviceTypesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDeviceTypesUpdate', function() {
      it('should call dcimDeviceTypesUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimDeviceTypesUpdate
        //instance.dcimDeviceTypesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDevicesCreate', function() {
      it('should call dcimDevicesCreate successfully', function(done) {
        //uncomment below and update the code to test dcimDevicesCreate
        //instance.dcimDevicesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDevicesDelete', function() {
      it('should call dcimDevicesDelete successfully', function(done) {
        //uncomment below and update the code to test dcimDevicesDelete
        //instance.dcimDevicesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDevicesList', function() {
      it('should call dcimDevicesList successfully', function(done) {
        //uncomment below and update the code to test dcimDevicesList
        //instance.dcimDevicesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDevicesNapalm', function() {
      it('should call dcimDevicesNapalm successfully', function(done) {
        //uncomment below and update the code to test dcimDevicesNapalm
        //instance.dcimDevicesNapalm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDevicesPartialUpdate', function() {
      it('should call dcimDevicesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimDevicesPartialUpdate
        //instance.dcimDevicesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDevicesRead', function() {
      it('should call dcimDevicesRead successfully', function(done) {
        //uncomment below and update the code to test dcimDevicesRead
        //instance.dcimDevicesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimDevicesUpdate', function() {
      it('should call dcimDevicesUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimDevicesUpdate
        //instance.dcimDevicesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfaceConnectionsCreate', function() {
      it('should call dcimInterfaceConnectionsCreate successfully', function(done) {
        //uncomment below and update the code to test dcimInterfaceConnectionsCreate
        //instance.dcimInterfaceConnectionsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfaceConnectionsDelete', function() {
      it('should call dcimInterfaceConnectionsDelete successfully', function(done) {
        //uncomment below and update the code to test dcimInterfaceConnectionsDelete
        //instance.dcimInterfaceConnectionsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfaceConnectionsList', function() {
      it('should call dcimInterfaceConnectionsList successfully', function(done) {
        //uncomment below and update the code to test dcimInterfaceConnectionsList
        //instance.dcimInterfaceConnectionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfaceConnectionsPartialUpdate', function() {
      it('should call dcimInterfaceConnectionsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimInterfaceConnectionsPartialUpdate
        //instance.dcimInterfaceConnectionsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfaceConnectionsRead', function() {
      it('should call dcimInterfaceConnectionsRead successfully', function(done) {
        //uncomment below and update the code to test dcimInterfaceConnectionsRead
        //instance.dcimInterfaceConnectionsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfaceConnectionsUpdate', function() {
      it('should call dcimInterfaceConnectionsUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimInterfaceConnectionsUpdate
        //instance.dcimInterfaceConnectionsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfaceTemplatesCreate', function() {
      it('should call dcimInterfaceTemplatesCreate successfully', function(done) {
        //uncomment below and update the code to test dcimInterfaceTemplatesCreate
        //instance.dcimInterfaceTemplatesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfaceTemplatesDelete', function() {
      it('should call dcimInterfaceTemplatesDelete successfully', function(done) {
        //uncomment below and update the code to test dcimInterfaceTemplatesDelete
        //instance.dcimInterfaceTemplatesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfaceTemplatesList', function() {
      it('should call dcimInterfaceTemplatesList successfully', function(done) {
        //uncomment below and update the code to test dcimInterfaceTemplatesList
        //instance.dcimInterfaceTemplatesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfaceTemplatesPartialUpdate', function() {
      it('should call dcimInterfaceTemplatesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimInterfaceTemplatesPartialUpdate
        //instance.dcimInterfaceTemplatesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfaceTemplatesRead', function() {
      it('should call dcimInterfaceTemplatesRead successfully', function(done) {
        //uncomment below and update the code to test dcimInterfaceTemplatesRead
        //instance.dcimInterfaceTemplatesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfaceTemplatesUpdate', function() {
      it('should call dcimInterfaceTemplatesUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimInterfaceTemplatesUpdate
        //instance.dcimInterfaceTemplatesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfacesCreate', function() {
      it('should call dcimInterfacesCreate successfully', function(done) {
        //uncomment below and update the code to test dcimInterfacesCreate
        //instance.dcimInterfacesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfacesDelete', function() {
      it('should call dcimInterfacesDelete successfully', function(done) {
        //uncomment below and update the code to test dcimInterfacesDelete
        //instance.dcimInterfacesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfacesGraphs', function() {
      it('should call dcimInterfacesGraphs successfully', function(done) {
        //uncomment below and update the code to test dcimInterfacesGraphs
        //instance.dcimInterfacesGraphs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfacesList', function() {
      it('should call dcimInterfacesList successfully', function(done) {
        //uncomment below and update the code to test dcimInterfacesList
        //instance.dcimInterfacesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfacesPartialUpdate', function() {
      it('should call dcimInterfacesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimInterfacesPartialUpdate
        //instance.dcimInterfacesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfacesRead', function() {
      it('should call dcimInterfacesRead successfully', function(done) {
        //uncomment below and update the code to test dcimInterfacesRead
        //instance.dcimInterfacesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInterfacesUpdate', function() {
      it('should call dcimInterfacesUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimInterfacesUpdate
        //instance.dcimInterfacesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInventoryItemsCreate', function() {
      it('should call dcimInventoryItemsCreate successfully', function(done) {
        //uncomment below and update the code to test dcimInventoryItemsCreate
        //instance.dcimInventoryItemsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInventoryItemsDelete', function() {
      it('should call dcimInventoryItemsDelete successfully', function(done) {
        //uncomment below and update the code to test dcimInventoryItemsDelete
        //instance.dcimInventoryItemsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInventoryItemsList', function() {
      it('should call dcimInventoryItemsList successfully', function(done) {
        //uncomment below and update the code to test dcimInventoryItemsList
        //instance.dcimInventoryItemsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInventoryItemsPartialUpdate', function() {
      it('should call dcimInventoryItemsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimInventoryItemsPartialUpdate
        //instance.dcimInventoryItemsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInventoryItemsRead', function() {
      it('should call dcimInventoryItemsRead successfully', function(done) {
        //uncomment below and update the code to test dcimInventoryItemsRead
        //instance.dcimInventoryItemsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimInventoryItemsUpdate', function() {
      it('should call dcimInventoryItemsUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimInventoryItemsUpdate
        //instance.dcimInventoryItemsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimManufacturersCreate', function() {
      it('should call dcimManufacturersCreate successfully', function(done) {
        //uncomment below and update the code to test dcimManufacturersCreate
        //instance.dcimManufacturersCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimManufacturersDelete', function() {
      it('should call dcimManufacturersDelete successfully', function(done) {
        //uncomment below and update the code to test dcimManufacturersDelete
        //instance.dcimManufacturersDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimManufacturersList', function() {
      it('should call dcimManufacturersList successfully', function(done) {
        //uncomment below and update the code to test dcimManufacturersList
        //instance.dcimManufacturersList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimManufacturersPartialUpdate', function() {
      it('should call dcimManufacturersPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimManufacturersPartialUpdate
        //instance.dcimManufacturersPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimManufacturersRead', function() {
      it('should call dcimManufacturersRead successfully', function(done) {
        //uncomment below and update the code to test dcimManufacturersRead
        //instance.dcimManufacturersRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimManufacturersUpdate', function() {
      it('should call dcimManufacturersUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimManufacturersUpdate
        //instance.dcimManufacturersUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPlatformsCreate', function() {
      it('should call dcimPlatformsCreate successfully', function(done) {
        //uncomment below and update the code to test dcimPlatformsCreate
        //instance.dcimPlatformsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPlatformsDelete', function() {
      it('should call dcimPlatformsDelete successfully', function(done) {
        //uncomment below and update the code to test dcimPlatformsDelete
        //instance.dcimPlatformsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPlatformsList', function() {
      it('should call dcimPlatformsList successfully', function(done) {
        //uncomment below and update the code to test dcimPlatformsList
        //instance.dcimPlatformsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPlatformsPartialUpdate', function() {
      it('should call dcimPlatformsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimPlatformsPartialUpdate
        //instance.dcimPlatformsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPlatformsRead', function() {
      it('should call dcimPlatformsRead successfully', function(done) {
        //uncomment below and update the code to test dcimPlatformsRead
        //instance.dcimPlatformsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPlatformsUpdate', function() {
      it('should call dcimPlatformsUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimPlatformsUpdate
        //instance.dcimPlatformsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerConnectionsList', function() {
      it('should call dcimPowerConnectionsList successfully', function(done) {
        //uncomment below and update the code to test dcimPowerConnectionsList
        //instance.dcimPowerConnectionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerOutletTemplatesCreate', function() {
      it('should call dcimPowerOutletTemplatesCreate successfully', function(done) {
        //uncomment below and update the code to test dcimPowerOutletTemplatesCreate
        //instance.dcimPowerOutletTemplatesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerOutletTemplatesDelete', function() {
      it('should call dcimPowerOutletTemplatesDelete successfully', function(done) {
        //uncomment below and update the code to test dcimPowerOutletTemplatesDelete
        //instance.dcimPowerOutletTemplatesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerOutletTemplatesList', function() {
      it('should call dcimPowerOutletTemplatesList successfully', function(done) {
        //uncomment below and update the code to test dcimPowerOutletTemplatesList
        //instance.dcimPowerOutletTemplatesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerOutletTemplatesPartialUpdate', function() {
      it('should call dcimPowerOutletTemplatesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimPowerOutletTemplatesPartialUpdate
        //instance.dcimPowerOutletTemplatesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerOutletTemplatesRead', function() {
      it('should call dcimPowerOutletTemplatesRead successfully', function(done) {
        //uncomment below and update the code to test dcimPowerOutletTemplatesRead
        //instance.dcimPowerOutletTemplatesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerOutletTemplatesUpdate', function() {
      it('should call dcimPowerOutletTemplatesUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimPowerOutletTemplatesUpdate
        //instance.dcimPowerOutletTemplatesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerOutletsCreate', function() {
      it('should call dcimPowerOutletsCreate successfully', function(done) {
        //uncomment below and update the code to test dcimPowerOutletsCreate
        //instance.dcimPowerOutletsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerOutletsDelete', function() {
      it('should call dcimPowerOutletsDelete successfully', function(done) {
        //uncomment below and update the code to test dcimPowerOutletsDelete
        //instance.dcimPowerOutletsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerOutletsList', function() {
      it('should call dcimPowerOutletsList successfully', function(done) {
        //uncomment below and update the code to test dcimPowerOutletsList
        //instance.dcimPowerOutletsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerOutletsPartialUpdate', function() {
      it('should call dcimPowerOutletsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimPowerOutletsPartialUpdate
        //instance.dcimPowerOutletsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerOutletsRead', function() {
      it('should call dcimPowerOutletsRead successfully', function(done) {
        //uncomment below and update the code to test dcimPowerOutletsRead
        //instance.dcimPowerOutletsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerOutletsUpdate', function() {
      it('should call dcimPowerOutletsUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimPowerOutletsUpdate
        //instance.dcimPowerOutletsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerPortTemplatesCreate', function() {
      it('should call dcimPowerPortTemplatesCreate successfully', function(done) {
        //uncomment below and update the code to test dcimPowerPortTemplatesCreate
        //instance.dcimPowerPortTemplatesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerPortTemplatesDelete', function() {
      it('should call dcimPowerPortTemplatesDelete successfully', function(done) {
        //uncomment below and update the code to test dcimPowerPortTemplatesDelete
        //instance.dcimPowerPortTemplatesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerPortTemplatesList', function() {
      it('should call dcimPowerPortTemplatesList successfully', function(done) {
        //uncomment below and update the code to test dcimPowerPortTemplatesList
        //instance.dcimPowerPortTemplatesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerPortTemplatesPartialUpdate', function() {
      it('should call dcimPowerPortTemplatesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimPowerPortTemplatesPartialUpdate
        //instance.dcimPowerPortTemplatesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerPortTemplatesRead', function() {
      it('should call dcimPowerPortTemplatesRead successfully', function(done) {
        //uncomment below and update the code to test dcimPowerPortTemplatesRead
        //instance.dcimPowerPortTemplatesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerPortTemplatesUpdate', function() {
      it('should call dcimPowerPortTemplatesUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimPowerPortTemplatesUpdate
        //instance.dcimPowerPortTemplatesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerPortsCreate', function() {
      it('should call dcimPowerPortsCreate successfully', function(done) {
        //uncomment below and update the code to test dcimPowerPortsCreate
        //instance.dcimPowerPortsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerPortsDelete', function() {
      it('should call dcimPowerPortsDelete successfully', function(done) {
        //uncomment below and update the code to test dcimPowerPortsDelete
        //instance.dcimPowerPortsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerPortsList', function() {
      it('should call dcimPowerPortsList successfully', function(done) {
        //uncomment below and update the code to test dcimPowerPortsList
        //instance.dcimPowerPortsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerPortsPartialUpdate', function() {
      it('should call dcimPowerPortsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimPowerPortsPartialUpdate
        //instance.dcimPowerPortsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerPortsRead', function() {
      it('should call dcimPowerPortsRead successfully', function(done) {
        //uncomment below and update the code to test dcimPowerPortsRead
        //instance.dcimPowerPortsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimPowerPortsUpdate', function() {
      it('should call dcimPowerPortsUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimPowerPortsUpdate
        //instance.dcimPowerPortsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackGroupsCreate', function() {
      it('should call dcimRackGroupsCreate successfully', function(done) {
        //uncomment below and update the code to test dcimRackGroupsCreate
        //instance.dcimRackGroupsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackGroupsDelete', function() {
      it('should call dcimRackGroupsDelete successfully', function(done) {
        //uncomment below and update the code to test dcimRackGroupsDelete
        //instance.dcimRackGroupsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackGroupsList', function() {
      it('should call dcimRackGroupsList successfully', function(done) {
        //uncomment below and update the code to test dcimRackGroupsList
        //instance.dcimRackGroupsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackGroupsPartialUpdate', function() {
      it('should call dcimRackGroupsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimRackGroupsPartialUpdate
        //instance.dcimRackGroupsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackGroupsRead', function() {
      it('should call dcimRackGroupsRead successfully', function(done) {
        //uncomment below and update the code to test dcimRackGroupsRead
        //instance.dcimRackGroupsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackGroupsUpdate', function() {
      it('should call dcimRackGroupsUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimRackGroupsUpdate
        //instance.dcimRackGroupsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackReservationsCreate', function() {
      it('should call dcimRackReservationsCreate successfully', function(done) {
        //uncomment below and update the code to test dcimRackReservationsCreate
        //instance.dcimRackReservationsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackReservationsDelete', function() {
      it('should call dcimRackReservationsDelete successfully', function(done) {
        //uncomment below and update the code to test dcimRackReservationsDelete
        //instance.dcimRackReservationsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackReservationsList', function() {
      it('should call dcimRackReservationsList successfully', function(done) {
        //uncomment below and update the code to test dcimRackReservationsList
        //instance.dcimRackReservationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackReservationsPartialUpdate', function() {
      it('should call dcimRackReservationsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimRackReservationsPartialUpdate
        //instance.dcimRackReservationsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackReservationsRead', function() {
      it('should call dcimRackReservationsRead successfully', function(done) {
        //uncomment below and update the code to test dcimRackReservationsRead
        //instance.dcimRackReservationsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackReservationsUpdate', function() {
      it('should call dcimRackReservationsUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimRackReservationsUpdate
        //instance.dcimRackReservationsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackRolesCreate', function() {
      it('should call dcimRackRolesCreate successfully', function(done) {
        //uncomment below and update the code to test dcimRackRolesCreate
        //instance.dcimRackRolesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackRolesDelete', function() {
      it('should call dcimRackRolesDelete successfully', function(done) {
        //uncomment below and update the code to test dcimRackRolesDelete
        //instance.dcimRackRolesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackRolesList', function() {
      it('should call dcimRackRolesList successfully', function(done) {
        //uncomment below and update the code to test dcimRackRolesList
        //instance.dcimRackRolesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackRolesPartialUpdate', function() {
      it('should call dcimRackRolesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimRackRolesPartialUpdate
        //instance.dcimRackRolesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackRolesRead', function() {
      it('should call dcimRackRolesRead successfully', function(done) {
        //uncomment below and update the code to test dcimRackRolesRead
        //instance.dcimRackRolesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRackRolesUpdate', function() {
      it('should call dcimRackRolesUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimRackRolesUpdate
        //instance.dcimRackRolesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRacksCreate', function() {
      it('should call dcimRacksCreate successfully', function(done) {
        //uncomment below and update the code to test dcimRacksCreate
        //instance.dcimRacksCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRacksDelete', function() {
      it('should call dcimRacksDelete successfully', function(done) {
        //uncomment below and update the code to test dcimRacksDelete
        //instance.dcimRacksDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRacksList', function() {
      it('should call dcimRacksList successfully', function(done) {
        //uncomment below and update the code to test dcimRacksList
        //instance.dcimRacksList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRacksPartialUpdate', function() {
      it('should call dcimRacksPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimRacksPartialUpdate
        //instance.dcimRacksPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRacksRead', function() {
      it('should call dcimRacksRead successfully', function(done) {
        //uncomment below and update the code to test dcimRacksRead
        //instance.dcimRacksRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRacksUnits', function() {
      it('should call dcimRacksUnits successfully', function(done) {
        //uncomment below and update the code to test dcimRacksUnits
        //instance.dcimRacksUnits(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRacksUpdate', function() {
      it('should call dcimRacksUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimRacksUpdate
        //instance.dcimRacksUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRegionsCreate', function() {
      it('should call dcimRegionsCreate successfully', function(done) {
        //uncomment below and update the code to test dcimRegionsCreate
        //instance.dcimRegionsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRegionsDelete', function() {
      it('should call dcimRegionsDelete successfully', function(done) {
        //uncomment below and update the code to test dcimRegionsDelete
        //instance.dcimRegionsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRegionsList', function() {
      it('should call dcimRegionsList successfully', function(done) {
        //uncomment below and update the code to test dcimRegionsList
        //instance.dcimRegionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRegionsPartialUpdate', function() {
      it('should call dcimRegionsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimRegionsPartialUpdate
        //instance.dcimRegionsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRegionsRead', function() {
      it('should call dcimRegionsRead successfully', function(done) {
        //uncomment below and update the code to test dcimRegionsRead
        //instance.dcimRegionsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimRegionsUpdate', function() {
      it('should call dcimRegionsUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimRegionsUpdate
        //instance.dcimRegionsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimSitesCreate', function() {
      it('should call dcimSitesCreate successfully', function(done) {
        //uncomment below and update the code to test dcimSitesCreate
        //instance.dcimSitesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimSitesDelete', function() {
      it('should call dcimSitesDelete successfully', function(done) {
        //uncomment below and update the code to test dcimSitesDelete
        //instance.dcimSitesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimSitesGraphs', function() {
      it('should call dcimSitesGraphs successfully', function(done) {
        //uncomment below and update the code to test dcimSitesGraphs
        //instance.dcimSitesGraphs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimSitesList', function() {
      it('should call dcimSitesList successfully', function(done) {
        //uncomment below and update the code to test dcimSitesList
        //instance.dcimSitesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimSitesPartialUpdate', function() {
      it('should call dcimSitesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimSitesPartialUpdate
        //instance.dcimSitesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimSitesRead', function() {
      it('should call dcimSitesRead successfully', function(done) {
        //uncomment below and update the code to test dcimSitesRead
        //instance.dcimSitesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimSitesUpdate', function() {
      it('should call dcimSitesUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimSitesUpdate
        //instance.dcimSitesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimVirtualChassisCreate', function() {
      it('should call dcimVirtualChassisCreate successfully', function(done) {
        //uncomment below and update the code to test dcimVirtualChassisCreate
        //instance.dcimVirtualChassisCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimVirtualChassisDelete', function() {
      it('should call dcimVirtualChassisDelete successfully', function(done) {
        //uncomment below and update the code to test dcimVirtualChassisDelete
        //instance.dcimVirtualChassisDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimVirtualChassisList', function() {
      it('should call dcimVirtualChassisList successfully', function(done) {
        //uncomment below and update the code to test dcimVirtualChassisList
        //instance.dcimVirtualChassisList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimVirtualChassisPartialUpdate', function() {
      it('should call dcimVirtualChassisPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimVirtualChassisPartialUpdate
        //instance.dcimVirtualChassisPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimVirtualChassisRead', function() {
      it('should call dcimVirtualChassisRead successfully', function(done) {
        //uncomment below and update the code to test dcimVirtualChassisRead
        //instance.dcimVirtualChassisRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dcimVirtualChassisUpdate', function() {
      it('should call dcimVirtualChassisUpdate successfully', function(done) {
        //uncomment below and update the code to test dcimVirtualChassisUpdate
        //instance.dcimVirtualChassisUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
