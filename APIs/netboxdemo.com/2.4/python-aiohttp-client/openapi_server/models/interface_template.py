# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.form_factor import FormFactor
from openapi_server.models.nested_device_type import NestedDeviceType
from openapi_server import util


class InterfaceTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_type: NestedDeviceType=None, form_factor: FormFactor=None, id: int=None, mgmt_only: bool=None, name: str=None):
        """InterfaceTemplate - a model defined in OpenAPI

        :param device_type: The device_type of this InterfaceTemplate.
        :param form_factor: The form_factor of this InterfaceTemplate.
        :param id: The id of this InterfaceTemplate.
        :param mgmt_only: The mgmt_only of this InterfaceTemplate.
        :param name: The name of this InterfaceTemplate.
        """
        self.openapi_types = {
            'device_type': NestedDeviceType,
            'form_factor': FormFactor,
            'id': int,
            'mgmt_only': bool,
            'name': str
        }

        self.attribute_map = {
            'device_type': 'device_type',
            'form_factor': 'form_factor',
            'id': 'id',
            'mgmt_only': 'mgmt_only',
            'name': 'name'
        }

        self._device_type = device_type
        self._form_factor = form_factor
        self._id = id
        self._mgmt_only = mgmt_only
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InterfaceTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InterfaceTemplate of this InterfaceTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_type(self):
        """Gets the device_type of this InterfaceTemplate.


        :return: The device_type of this InterfaceTemplate.
        :rtype: NestedDeviceType
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this InterfaceTemplate.


        :param device_type: The device_type of this InterfaceTemplate.
        :type device_type: NestedDeviceType
        """
        if device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")

        self._device_type = device_type

    @property
    def form_factor(self):
        """Gets the form_factor of this InterfaceTemplate.


        :return: The form_factor of this InterfaceTemplate.
        :rtype: FormFactor
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this InterfaceTemplate.


        :param form_factor: The form_factor of this InterfaceTemplate.
        :type form_factor: FormFactor
        """

        self._form_factor = form_factor

    @property
    def id(self):
        """Gets the id of this InterfaceTemplate.


        :return: The id of this InterfaceTemplate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InterfaceTemplate.


        :param id: The id of this InterfaceTemplate.
        :type id: int
        """

        self._id = id

    @property
    def mgmt_only(self):
        """Gets the mgmt_only of this InterfaceTemplate.


        :return: The mgmt_only of this InterfaceTemplate.
        :rtype: bool
        """
        return self._mgmt_only

    @mgmt_only.setter
    def mgmt_only(self, mgmt_only):
        """Sets the mgmt_only of this InterfaceTemplate.


        :param mgmt_only: The mgmt_only of this InterfaceTemplate.
        :type mgmt_only: bool
        """

        self._mgmt_only = mgmt_only

    @property
    def name(self):
        """Gets the name of this InterfaceTemplate.


        :return: The name of this InterfaceTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InterfaceTemplate.


        :param name: The name of this InterfaceTemplate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name
