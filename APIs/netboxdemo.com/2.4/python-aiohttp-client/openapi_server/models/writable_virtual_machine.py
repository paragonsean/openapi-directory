# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WritableVirtualMachine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: int=None, comments: str=None, created: date=None, custom_fields: object=None, disk: int=None, id: int=None, last_updated: datetime=None, local_context_data: str=None, memory: int=None, name: str=None, platform: int=None, primary_ip: str=None, primary_ip4: int=None, primary_ip6: int=None, role: int=None, site: str=None, status: int=None, tags: List[str]=None, tenant: int=None, vcpus: int=None):
        """WritableVirtualMachine - a model defined in OpenAPI

        :param cluster: The cluster of this WritableVirtualMachine.
        :param comments: The comments of this WritableVirtualMachine.
        :param created: The created of this WritableVirtualMachine.
        :param custom_fields: The custom_fields of this WritableVirtualMachine.
        :param disk: The disk of this WritableVirtualMachine.
        :param id: The id of this WritableVirtualMachine.
        :param last_updated: The last_updated of this WritableVirtualMachine.
        :param local_context_data: The local_context_data of this WritableVirtualMachine.
        :param memory: The memory of this WritableVirtualMachine.
        :param name: The name of this WritableVirtualMachine.
        :param platform: The platform of this WritableVirtualMachine.
        :param primary_ip: The primary_ip of this WritableVirtualMachine.
        :param primary_ip4: The primary_ip4 of this WritableVirtualMachine.
        :param primary_ip6: The primary_ip6 of this WritableVirtualMachine.
        :param role: The role of this WritableVirtualMachine.
        :param site: The site of this WritableVirtualMachine.
        :param status: The status of this WritableVirtualMachine.
        :param tags: The tags of this WritableVirtualMachine.
        :param tenant: The tenant of this WritableVirtualMachine.
        :param vcpus: The vcpus of this WritableVirtualMachine.
        """
        self.openapi_types = {
            'cluster': int,
            'comments': str,
            'created': date,
            'custom_fields': object,
            'disk': int,
            'id': int,
            'last_updated': datetime,
            'local_context_data': str,
            'memory': int,
            'name': str,
            'platform': int,
            'primary_ip': str,
            'primary_ip4': int,
            'primary_ip6': int,
            'role': int,
            'site': str,
            'status': int,
            'tags': List[str],
            'tenant': int,
            'vcpus': int
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'comments': 'comments',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'disk': 'disk',
            'id': 'id',
            'last_updated': 'last_updated',
            'local_context_data': 'local_context_data',
            'memory': 'memory',
            'name': 'name',
            'platform': 'platform',
            'primary_ip': 'primary_ip',
            'primary_ip4': 'primary_ip4',
            'primary_ip6': 'primary_ip6',
            'role': 'role',
            'site': 'site',
            'status': 'status',
            'tags': 'tags',
            'tenant': 'tenant',
            'vcpus': 'vcpus'
        }

        self._cluster = cluster
        self._comments = comments
        self._created = created
        self._custom_fields = custom_fields
        self._disk = disk
        self._id = id
        self._last_updated = last_updated
        self._local_context_data = local_context_data
        self._memory = memory
        self._name = name
        self._platform = platform
        self._primary_ip = primary_ip
        self._primary_ip4 = primary_ip4
        self._primary_ip6 = primary_ip6
        self._role = role
        self._site = site
        self._status = status
        self._tags = tags
        self._tenant = tenant
        self._vcpus = vcpus

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableVirtualMachine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableVirtualMachine of this WritableVirtualMachine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this WritableVirtualMachine.


        :return: The cluster of this WritableVirtualMachine.
        :rtype: int
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this WritableVirtualMachine.


        :param cluster: The cluster of this WritableVirtualMachine.
        :type cluster: int
        """
        if cluster is None:
            raise ValueError("Invalid value for `cluster`, must not be `None`")

        self._cluster = cluster

    @property
    def comments(self):
        """Gets the comments of this WritableVirtualMachine.


        :return: The comments of this WritableVirtualMachine.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WritableVirtualMachine.


        :param comments: The comments of this WritableVirtualMachine.
        :type comments: str
        """

        self._comments = comments

    @property
    def created(self):
        """Gets the created of this WritableVirtualMachine.


        :return: The created of this WritableVirtualMachine.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritableVirtualMachine.


        :param created: The created of this WritableVirtualMachine.
        :type created: date
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this WritableVirtualMachine.


        :return: The custom_fields of this WritableVirtualMachine.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this WritableVirtualMachine.


        :param custom_fields: The custom_fields of this WritableVirtualMachine.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def disk(self):
        """Gets the disk of this WritableVirtualMachine.


        :return: The disk of this WritableVirtualMachine.
        :rtype: int
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this WritableVirtualMachine.


        :param disk: The disk of this WritableVirtualMachine.
        :type disk: int
        """
        if disk is not None and disk > 2147483647:
            raise ValueError("Invalid value for `disk`, must be a value less than or equal to `2147483647`")
        if disk is not None and disk < 0:
            raise ValueError("Invalid value for `disk`, must be a value greater than or equal to `0`")

        self._disk = disk

    @property
    def id(self):
        """Gets the id of this WritableVirtualMachine.


        :return: The id of this WritableVirtualMachine.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableVirtualMachine.


        :param id: The id of this WritableVirtualMachine.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this WritableVirtualMachine.


        :return: The last_updated of this WritableVirtualMachine.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this WritableVirtualMachine.


        :param last_updated: The last_updated of this WritableVirtualMachine.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def local_context_data(self):
        """Gets the local_context_data of this WritableVirtualMachine.


        :return: The local_context_data of this WritableVirtualMachine.
        :rtype: str
        """
        return self._local_context_data

    @local_context_data.setter
    def local_context_data(self, local_context_data):
        """Sets the local_context_data of this WritableVirtualMachine.


        :param local_context_data: The local_context_data of this WritableVirtualMachine.
        :type local_context_data: str
        """

        self._local_context_data = local_context_data

    @property
    def memory(self):
        """Gets the memory of this WritableVirtualMachine.


        :return: The memory of this WritableVirtualMachine.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this WritableVirtualMachine.


        :param memory: The memory of this WritableVirtualMachine.
        :type memory: int
        """
        if memory is not None and memory > 2147483647:
            raise ValueError("Invalid value for `memory`, must be a value less than or equal to `2147483647`")
        if memory is not None and memory < 0:
            raise ValueError("Invalid value for `memory`, must be a value greater than or equal to `0`")

        self._memory = memory

    @property
    def name(self):
        """Gets the name of this WritableVirtualMachine.


        :return: The name of this WritableVirtualMachine.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritableVirtualMachine.


        :param name: The name of this WritableVirtualMachine.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this WritableVirtualMachine.


        :return: The platform of this WritableVirtualMachine.
        :rtype: int
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this WritableVirtualMachine.


        :param platform: The platform of this WritableVirtualMachine.
        :type platform: int
        """

        self._platform = platform

    @property
    def primary_ip(self):
        """Gets the primary_ip of this WritableVirtualMachine.


        :return: The primary_ip of this WritableVirtualMachine.
        :rtype: str
        """
        return self._primary_ip

    @primary_ip.setter
    def primary_ip(self, primary_ip):
        """Sets the primary_ip of this WritableVirtualMachine.


        :param primary_ip: The primary_ip of this WritableVirtualMachine.
        :type primary_ip: str
        """

        self._primary_ip = primary_ip

    @property
    def primary_ip4(self):
        """Gets the primary_ip4 of this WritableVirtualMachine.


        :return: The primary_ip4 of this WritableVirtualMachine.
        :rtype: int
        """
        return self._primary_ip4

    @primary_ip4.setter
    def primary_ip4(self, primary_ip4):
        """Sets the primary_ip4 of this WritableVirtualMachine.


        :param primary_ip4: The primary_ip4 of this WritableVirtualMachine.
        :type primary_ip4: int
        """

        self._primary_ip4 = primary_ip4

    @property
    def primary_ip6(self):
        """Gets the primary_ip6 of this WritableVirtualMachine.


        :return: The primary_ip6 of this WritableVirtualMachine.
        :rtype: int
        """
        return self._primary_ip6

    @primary_ip6.setter
    def primary_ip6(self, primary_ip6):
        """Sets the primary_ip6 of this WritableVirtualMachine.


        :param primary_ip6: The primary_ip6 of this WritableVirtualMachine.
        :type primary_ip6: int
        """

        self._primary_ip6 = primary_ip6

    @property
    def role(self):
        """Gets the role of this WritableVirtualMachine.


        :return: The role of this WritableVirtualMachine.
        :rtype: int
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this WritableVirtualMachine.


        :param role: The role of this WritableVirtualMachine.
        :type role: int
        """

        self._role = role

    @property
    def site(self):
        """Gets the site of this WritableVirtualMachine.


        :return: The site of this WritableVirtualMachine.
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this WritableVirtualMachine.


        :param site: The site of this WritableVirtualMachine.
        :type site: str
        """

        self._site = site

    @property
    def status(self):
        """Gets the status of this WritableVirtualMachine.


        :return: The status of this WritableVirtualMachine.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WritableVirtualMachine.


        :param status: The status of this WritableVirtualMachine.
        :type status: int
        """
        allowed_values = [1, 0, 3]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this WritableVirtualMachine.


        :return: The tags of this WritableVirtualMachine.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritableVirtualMachine.


        :param tags: The tags of this WritableVirtualMachine.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def tenant(self):
        """Gets the tenant of this WritableVirtualMachine.


        :return: The tenant of this WritableVirtualMachine.
        :rtype: int
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this WritableVirtualMachine.


        :param tenant: The tenant of this WritableVirtualMachine.
        :type tenant: int
        """

        self._tenant = tenant

    @property
    def vcpus(self):
        """Gets the vcpus of this WritableVirtualMachine.


        :return: The vcpus of this WritableVirtualMachine.
        :rtype: int
        """
        return self._vcpus

    @vcpus.setter
    def vcpus(self, vcpus):
        """Sets the vcpus of this WritableVirtualMachine.


        :param vcpus: The vcpus of this WritableVirtualMachine.
        :type vcpus: int
        """
        if vcpus is not None and vcpus > 32767:
            raise ValueError("Invalid value for `vcpus`, must be a value less than or equal to `32767`")
        if vcpus is not None and vcpus < 0:
            raise ValueError("Invalid value for `vcpus`, must be a value greater than or equal to `0`")

        self._vcpus = vcpus
