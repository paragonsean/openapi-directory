# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WritableGraph(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, link: str=None, name: str=None, source: str=None, type: int=None, weight: int=None):
        """WritableGraph - a model defined in OpenAPI

        :param id: The id of this WritableGraph.
        :param link: The link of this WritableGraph.
        :param name: The name of this WritableGraph.
        :param source: The source of this WritableGraph.
        :param type: The type of this WritableGraph.
        :param weight: The weight of this WritableGraph.
        """
        self.openapi_types = {
            'id': int,
            'link': str,
            'name': str,
            'source': str,
            'type': int,
            'weight': int
        }

        self.attribute_map = {
            'id': 'id',
            'link': 'link',
            'name': 'name',
            'source': 'source',
            'type': 'type',
            'weight': 'weight'
        }

        self._id = id
        self._link = link
        self._name = name
        self._source = source
        self._type = type
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableGraph':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableGraph of this WritableGraph.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this WritableGraph.


        :return: The id of this WritableGraph.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableGraph.


        :param id: The id of this WritableGraph.
        :type id: int
        """

        self._id = id

    @property
    def link(self):
        """Gets the link of this WritableGraph.


        :return: The link of this WritableGraph.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this WritableGraph.


        :param link: The link of this WritableGraph.
        :type link: str
        """
        if link is not None and len(link) > 200:
            raise ValueError("Invalid value for `link`, length must be less than or equal to `200`")

        self._link = link

    @property
    def name(self):
        """Gets the name of this WritableGraph.


        :return: The name of this WritableGraph.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritableGraph.


        :param name: The name of this WritableGraph.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def source(self):
        """Gets the source of this WritableGraph.


        :return: The source of this WritableGraph.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this WritableGraph.


        :param source: The source of this WritableGraph.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")
        if source is not None and len(source) > 500:
            raise ValueError("Invalid value for `source`, length must be less than or equal to `500`")
        if source is not None and len(source) < 1:
            raise ValueError("Invalid value for `source`, length must be greater than or equal to `1`")

        self._source = source

    @property
    def type(self):
        """Gets the type of this WritableGraph.


        :return: The type of this WritableGraph.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WritableGraph.


        :param type: The type of this WritableGraph.
        :type type: int
        """
        allowed_values = [100, 200, 300]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def weight(self):
        """Gets the weight of this WritableGraph.


        :return: The weight of this WritableGraph.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this WritableGraph.


        :param weight: The weight of this WritableGraph.
        :type weight: int
        """
        if weight is not None and weight > 32767:
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `32767`")
        if weight is not None and weight < 0:
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `0`")

        self._weight = weight
