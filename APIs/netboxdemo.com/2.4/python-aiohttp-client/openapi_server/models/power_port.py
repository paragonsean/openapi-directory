# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_device import NestedDevice
from openapi_server.models.nested_power_outlet import NestedPowerOutlet
from openapi_server import util


class PowerPort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_status: bool=None, device: NestedDevice=None, id: int=None, name: str=None, power_outlet: NestedPowerOutlet=None, tags: List[str]=None):
        """PowerPort - a model defined in OpenAPI

        :param connection_status: The connection_status of this PowerPort.
        :param device: The device of this PowerPort.
        :param id: The id of this PowerPort.
        :param name: The name of this PowerPort.
        :param power_outlet: The power_outlet of this PowerPort.
        :param tags: The tags of this PowerPort.
        """
        self.openapi_types = {
            'connection_status': bool,
            'device': NestedDevice,
            'id': int,
            'name': str,
            'power_outlet': NestedPowerOutlet,
            'tags': List[str]
        }

        self.attribute_map = {
            'connection_status': 'connection_status',
            'device': 'device',
            'id': 'id',
            'name': 'name',
            'power_outlet': 'power_outlet',
            'tags': 'tags'
        }

        self._connection_status = connection_status
        self._device = device
        self._id = id
        self._name = name
        self._power_outlet = power_outlet
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PowerPort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PowerPort of this PowerPort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_status(self):
        """Gets the connection_status of this PowerPort.


        :return: The connection_status of this PowerPort.
        :rtype: bool
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this PowerPort.


        :param connection_status: The connection_status of this PowerPort.
        :type connection_status: bool
        """

        self._connection_status = connection_status

    @property
    def device(self):
        """Gets the device of this PowerPort.


        :return: The device of this PowerPort.
        :rtype: NestedDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this PowerPort.


        :param device: The device of this PowerPort.
        :type device: NestedDevice
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def id(self):
        """Gets the id of this PowerPort.


        :return: The id of this PowerPort.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PowerPort.


        :param id: The id of this PowerPort.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PowerPort.


        :return: The name of this PowerPort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PowerPort.


        :param name: The name of this PowerPort.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def power_outlet(self):
        """Gets the power_outlet of this PowerPort.


        :return: The power_outlet of this PowerPort.
        :rtype: NestedPowerOutlet
        """
        return self._power_outlet

    @power_outlet.setter
    def power_outlet(self, power_outlet):
        """Sets the power_outlet of this PowerPort.


        :param power_outlet: The power_outlet of this PowerPort.
        :type power_outlet: NestedPowerOutlet
        """

        self._power_outlet = power_outlet

    @property
    def tags(self):
        """Gets the tags of this PowerPort.


        :return: The tags of this PowerPort.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PowerPort.


        :param tags: The tags of this PowerPort.
        :type tags: List[str]
        """

        self._tags = tags
