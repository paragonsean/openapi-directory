# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.nested_user import NestedUser
from openapi_server import util


class UserAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: Action=None, id: int=None, message: str=None, time: datetime=None, user: NestedUser=None):
        """UserAction - a model defined in OpenAPI

        :param action: The action of this UserAction.
        :param id: The id of this UserAction.
        :param message: The message of this UserAction.
        :param time: The time of this UserAction.
        :param user: The user of this UserAction.
        """
        self.openapi_types = {
            'action': Action,
            'id': int,
            'message': str,
            'time': datetime,
            'user': NestedUser
        }

        self.attribute_map = {
            'action': 'action',
            'id': 'id',
            'message': 'message',
            'time': 'time',
            'user': 'user'
        }

        self._action = action
        self._id = id
        self._message = message
        self._time = time
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserAction of this UserAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this UserAction.


        :return: The action of this UserAction.
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this UserAction.


        :param action: The action of this UserAction.
        :type action: Action
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def id(self):
        """Gets the id of this UserAction.


        :return: The id of this UserAction.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserAction.


        :param id: The id of this UserAction.
        :type id: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this UserAction.


        :return: The message of this UserAction.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this UserAction.


        :param message: The message of this UserAction.
        :type message: str
        """

        self._message = message

    @property
    def time(self):
        """Gets the time of this UserAction.


        :return: The time of this UserAction.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this UserAction.


        :param time: The time of this UserAction.
        :type time: datetime
        """

        self._time = time

    @property
    def user(self):
        """Gets the user of this UserAction.


        :return: The user of this UserAction.
        :rtype: NestedUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserAction.


        :param user: The user of this UserAction.
        :type user: NestedUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
