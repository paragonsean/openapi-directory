# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageAttachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, created: datetime=None, id: int=None, image: str=None, image_height: int=None, image_width: int=None, name: str=None, object_id: int=None, parent: str=None):
        """ImageAttachment - a model defined in OpenAPI

        :param content_type: The content_type of this ImageAttachment.
        :param created: The created of this ImageAttachment.
        :param id: The id of this ImageAttachment.
        :param image: The image of this ImageAttachment.
        :param image_height: The image_height of this ImageAttachment.
        :param image_width: The image_width of this ImageAttachment.
        :param name: The name of this ImageAttachment.
        :param object_id: The object_id of this ImageAttachment.
        :param parent: The parent of this ImageAttachment.
        """
        self.openapi_types = {
            'content_type': str,
            'created': datetime,
            'id': int,
            'image': str,
            'image_height': int,
            'image_width': int,
            'name': str,
            'object_id': int,
            'parent': str
        }

        self.attribute_map = {
            'content_type': 'content_type',
            'created': 'created',
            'id': 'id',
            'image': 'image',
            'image_height': 'image_height',
            'image_width': 'image_width',
            'name': 'name',
            'object_id': 'object_id',
            'parent': 'parent'
        }

        self._content_type = content_type
        self._created = created
        self._id = id
        self._image = image
        self._image_height = image_height
        self._image_width = image_width
        self._name = name
        self._object_id = object_id
        self._parent = parent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageAttachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageAttachment of this ImageAttachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this ImageAttachment.


        :return: The content_type of this ImageAttachment.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ImageAttachment.


        :param content_type: The content_type of this ImageAttachment.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def created(self):
        """Gets the created of this ImageAttachment.


        :return: The created of this ImageAttachment.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ImageAttachment.


        :param created: The created of this ImageAttachment.
        :type created: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this ImageAttachment.


        :return: The id of this ImageAttachment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImageAttachment.


        :param id: The id of this ImageAttachment.
        :type id: int
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this ImageAttachment.


        :return: The image of this ImageAttachment.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ImageAttachment.


        :param image: The image of this ImageAttachment.
        :type image: str
        """

        self._image = image

    @property
    def image_height(self):
        """Gets the image_height of this ImageAttachment.


        :return: The image_height of this ImageAttachment.
        :rtype: int
        """
        return self._image_height

    @image_height.setter
    def image_height(self, image_height):
        """Sets the image_height of this ImageAttachment.


        :param image_height: The image_height of this ImageAttachment.
        :type image_height: int
        """
        if image_height is None:
            raise ValueError("Invalid value for `image_height`, must not be `None`")
        if image_height is not None and image_height > 32767:
            raise ValueError("Invalid value for `image_height`, must be a value less than or equal to `32767`")
        if image_height is not None and image_height < 0:
            raise ValueError("Invalid value for `image_height`, must be a value greater than or equal to `0`")

        self._image_height = image_height

    @property
    def image_width(self):
        """Gets the image_width of this ImageAttachment.


        :return: The image_width of this ImageAttachment.
        :rtype: int
        """
        return self._image_width

    @image_width.setter
    def image_width(self, image_width):
        """Sets the image_width of this ImageAttachment.


        :param image_width: The image_width of this ImageAttachment.
        :type image_width: int
        """
        if image_width is None:
            raise ValueError("Invalid value for `image_width`, must not be `None`")
        if image_width is not None and image_width > 32767:
            raise ValueError("Invalid value for `image_width`, must be a value less than or equal to `32767`")
        if image_width is not None and image_width < 0:
            raise ValueError("Invalid value for `image_width`, must be a value greater than or equal to `0`")

        self._image_width = image_width

    @property
    def name(self):
        """Gets the name of this ImageAttachment.


        :return: The name of this ImageAttachment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImageAttachment.


        :param name: The name of this ImageAttachment.
        :type name: str
        """
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")

        self._name = name

    @property
    def object_id(self):
        """Gets the object_id of this ImageAttachment.


        :return: The object_id of this ImageAttachment.
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this ImageAttachment.


        :param object_id: The object_id of this ImageAttachment.
        :type object_id: int
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")
        if object_id is not None and object_id > 2147483647:
            raise ValueError("Invalid value for `object_id`, must be a value less than or equal to `2147483647`")
        if object_id is not None and object_id < 0:
            raise ValueError("Invalid value for `object_id`, must be a value greater than or equal to `0`")

        self._object_id = object_id

    @property
    def parent(self):
        """Gets the parent of this ImageAttachment.


        :return: The parent of this ImageAttachment.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this ImageAttachment.


        :param parent: The parent of this ImageAttachment.
        :type parent: str
        """

        self._parent = parent
