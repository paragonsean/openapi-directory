# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WritableVirtualChassis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, id: int=None, master: int=None, tags: List[str]=None):
        """WritableVirtualChassis - a model defined in OpenAPI

        :param domain: The domain of this WritableVirtualChassis.
        :param id: The id of this WritableVirtualChassis.
        :param master: The master of this WritableVirtualChassis.
        :param tags: The tags of this WritableVirtualChassis.
        """
        self.openapi_types = {
            'domain': str,
            'id': int,
            'master': int,
            'tags': List[str]
        }

        self.attribute_map = {
            'domain': 'domain',
            'id': 'id',
            'master': 'master',
            'tags': 'tags'
        }

        self._domain = domain
        self._id = id
        self._master = master
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableVirtualChassis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableVirtualChassis of this WritableVirtualChassis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this WritableVirtualChassis.


        :return: The domain of this WritableVirtualChassis.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this WritableVirtualChassis.


        :param domain: The domain of this WritableVirtualChassis.
        :type domain: str
        """
        if domain is not None and len(domain) > 30:
            raise ValueError("Invalid value for `domain`, length must be less than or equal to `30`")

        self._domain = domain

    @property
    def id(self):
        """Gets the id of this WritableVirtualChassis.


        :return: The id of this WritableVirtualChassis.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableVirtualChassis.


        :param id: The id of this WritableVirtualChassis.
        :type id: int
        """

        self._id = id

    @property
    def master(self):
        """Gets the master of this WritableVirtualChassis.


        :return: The master of this WritableVirtualChassis.
        :rtype: int
        """
        return self._master

    @master.setter
    def master(self, master):
        """Sets the master of this WritableVirtualChassis.


        :param master: The master of this WritableVirtualChassis.
        :type master: int
        """
        if master is None:
            raise ValueError("Invalid value for `master`, must not be `None`")

        self._master = master

    @property
    def tags(self):
        """Gets the tags of this WritableVirtualChassis.


        :return: The tags of this WritableVirtualChassis.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritableVirtualChassis.


        :param tags: The tags of this WritableVirtualChassis.
        :type tags: List[str]
        """

        self._tags = tags
