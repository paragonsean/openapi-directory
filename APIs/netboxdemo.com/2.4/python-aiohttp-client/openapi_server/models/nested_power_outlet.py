# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_device import NestedDevice
from openapi_server import util


class NestedPowerOutlet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device: NestedDevice=None, id: int=None, is_connected: str=None, name: str=None, url: str=None):
        """NestedPowerOutlet - a model defined in OpenAPI

        :param device: The device of this NestedPowerOutlet.
        :param id: The id of this NestedPowerOutlet.
        :param is_connected: The is_connected of this NestedPowerOutlet.
        :param name: The name of this NestedPowerOutlet.
        :param url: The url of this NestedPowerOutlet.
        """
        self.openapi_types = {
            'device': NestedDevice,
            'id': int,
            'is_connected': str,
            'name': str,
            'url': str
        }

        self.attribute_map = {
            'device': 'device',
            'id': 'id',
            'is_connected': 'is_connected',
            'name': 'name',
            'url': 'url'
        }

        self._device = device
        self._id = id
        self._is_connected = is_connected
        self._name = name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NestedPowerOutlet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NestedPowerOutlet of this NestedPowerOutlet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device(self):
        """Gets the device of this NestedPowerOutlet.


        :return: The device of this NestedPowerOutlet.
        :rtype: NestedDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this NestedPowerOutlet.


        :param device: The device of this NestedPowerOutlet.
        :type device: NestedDevice
        """

        self._device = device

    @property
    def id(self):
        """Gets the id of this NestedPowerOutlet.


        :return: The id of this NestedPowerOutlet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NestedPowerOutlet.


        :param id: The id of this NestedPowerOutlet.
        :type id: int
        """

        self._id = id

    @property
    def is_connected(self):
        """Gets the is_connected of this NestedPowerOutlet.


        :return: The is_connected of this NestedPowerOutlet.
        :rtype: str
        """
        return self._is_connected

    @is_connected.setter
    def is_connected(self, is_connected):
        """Sets the is_connected of this NestedPowerOutlet.


        :param is_connected: The is_connected of this NestedPowerOutlet.
        :type is_connected: str
        """

        self._is_connected = is_connected

    @property
    def name(self):
        """Gets the name of this NestedPowerOutlet.


        :return: The name of this NestedPowerOutlet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NestedPowerOutlet.


        :param name: The name of this NestedPowerOutlet.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def url(self):
        """Gets the url of this NestedPowerOutlet.


        :return: The url of this NestedPowerOutlet.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NestedPowerOutlet.


        :param url: The url of this NestedPowerOutlet.
        :type url: str
        """

        self._url = url
