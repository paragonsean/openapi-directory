# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InterfaceNestedCircuit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cid: str=None, id: int=None, url: str=None):
        """InterfaceNestedCircuit - a model defined in OpenAPI

        :param cid: The cid of this InterfaceNestedCircuit.
        :param id: The id of this InterfaceNestedCircuit.
        :param url: The url of this InterfaceNestedCircuit.
        """
        self.openapi_types = {
            'cid': str,
            'id': int,
            'url': str
        }

        self.attribute_map = {
            'cid': 'cid',
            'id': 'id',
            'url': 'url'
        }

        self._cid = cid
        self._id = id
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InterfaceNestedCircuit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InterfaceNestedCircuit of this InterfaceNestedCircuit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cid(self):
        """Gets the cid of this InterfaceNestedCircuit.


        :return: The cid of this InterfaceNestedCircuit.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this InterfaceNestedCircuit.


        :param cid: The cid of this InterfaceNestedCircuit.
        :type cid: str
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")
        if cid is not None and len(cid) > 50:
            raise ValueError("Invalid value for `cid`, length must be less than or equal to `50`")
        if cid is not None and len(cid) < 1:
            raise ValueError("Invalid value for `cid`, length must be greater than or equal to `1`")

        self._cid = cid

    @property
    def id(self):
        """Gets the id of this InterfaceNestedCircuit.


        :return: The id of this InterfaceNestedCircuit.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InterfaceNestedCircuit.


        :param id: The id of this InterfaceNestedCircuit.
        :type id: int
        """

        self._id = id

    @property
    def url(self):
        """Gets the url of this InterfaceNestedCircuit.


        :return: The url of this InterfaceNestedCircuit.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InterfaceNestedCircuit.


        :param url: The url of this InterfaceNestedCircuit.
        :type url: str
        """

        self._url = url
