# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualMachineIPAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, family: int=None, id: int=None, url: str=None):
        """VirtualMachineIPAddress - a model defined in OpenAPI

        :param address: The address of this VirtualMachineIPAddress.
        :param family: The family of this VirtualMachineIPAddress.
        :param id: The id of this VirtualMachineIPAddress.
        :param url: The url of this VirtualMachineIPAddress.
        """
        self.openapi_types = {
            'address': str,
            'family': int,
            'id': int,
            'url': str
        }

        self.attribute_map = {
            'address': 'address',
            'family': 'family',
            'id': 'id',
            'url': 'url'
        }

        self._address = address
        self._family = family
        self._id = id
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineIPAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineIPAddress of this VirtualMachineIPAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this VirtualMachineIPAddress.

        IPv4 or IPv6 address (with mask)

        :return: The address of this VirtualMachineIPAddress.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this VirtualMachineIPAddress.

        IPv4 or IPv6 address (with mask)

        :param address: The address of this VirtualMachineIPAddress.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def family(self):
        """Gets the family of this VirtualMachineIPAddress.


        :return: The family of this VirtualMachineIPAddress.
        :rtype: int
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this VirtualMachineIPAddress.


        :param family: The family of this VirtualMachineIPAddress.
        :type family: int
        """

        self._family = family

    @property
    def id(self):
        """Gets the id of this VirtualMachineIPAddress.


        :return: The id of this VirtualMachineIPAddress.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualMachineIPAddress.


        :param id: The id of this VirtualMachineIPAddress.
        :type id: int
        """

        self._id = id

    @property
    def url(self):
        """Gets the url of this VirtualMachineIPAddress.


        :return: The url of this VirtualMachineIPAddress.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this VirtualMachineIPAddress.


        :param url: The url of this VirtualMachineIPAddress.
        :type url: str
        """

        self._url = url
