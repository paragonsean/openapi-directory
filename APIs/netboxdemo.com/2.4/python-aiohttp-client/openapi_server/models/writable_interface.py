# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WritableInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, circuit_termination: int=None, description: str=None, device: int=None, enabled: bool=None, form_factor: int=None, id: int=None, interface_connection: str=None, is_connected: str=None, lag: int=None, mac_address: str=None, mgmt_only: bool=None, mode: int=None, mtu: int=None, name: str=None, tagged_vlans: list[int]=None, tags: List[str]=None, untagged_vlan: int=None):
        """WritableInterface - a model defined in OpenAPI

        :param circuit_termination: The circuit_termination of this WritableInterface.
        :param description: The description of this WritableInterface.
        :param device: The device of this WritableInterface.
        :param enabled: The enabled of this WritableInterface.
        :param form_factor: The form_factor of this WritableInterface.
        :param id: The id of this WritableInterface.
        :param interface_connection: The interface_connection of this WritableInterface.
        :param is_connected: The is_connected of this WritableInterface.
        :param lag: The lag of this WritableInterface.
        :param mac_address: The mac_address of this WritableInterface.
        :param mgmt_only: The mgmt_only of this WritableInterface.
        :param mode: The mode of this WritableInterface.
        :param mtu: The mtu of this WritableInterface.
        :param name: The name of this WritableInterface.
        :param tagged_vlans: The tagged_vlans of this WritableInterface.
        :param tags: The tags of this WritableInterface.
        :param untagged_vlan: The untagged_vlan of this WritableInterface.
        """
        self.openapi_types = {
            'circuit_termination': int,
            'description': str,
            'device': int,
            'enabled': bool,
            'form_factor': int,
            'id': int,
            'interface_connection': str,
            'is_connected': str,
            'lag': int,
            'mac_address': str,
            'mgmt_only': bool,
            'mode': int,
            'mtu': int,
            'name': str,
            'tagged_vlans': list[int],
            'tags': List[str],
            'untagged_vlan': int
        }

        self.attribute_map = {
            'circuit_termination': 'circuit_termination',
            'description': 'description',
            'device': 'device',
            'enabled': 'enabled',
            'form_factor': 'form_factor',
            'id': 'id',
            'interface_connection': 'interface_connection',
            'is_connected': 'is_connected',
            'lag': 'lag',
            'mac_address': 'mac_address',
            'mgmt_only': 'mgmt_only',
            'mode': 'mode',
            'mtu': 'mtu',
            'name': 'name',
            'tagged_vlans': 'tagged_vlans',
            'tags': 'tags',
            'untagged_vlan': 'untagged_vlan'
        }

        self._circuit_termination = circuit_termination
        self._description = description
        self._device = device
        self._enabled = enabled
        self._form_factor = form_factor
        self._id = id
        self._interface_connection = interface_connection
        self._is_connected = is_connected
        self._lag = lag
        self._mac_address = mac_address
        self._mgmt_only = mgmt_only
        self._mode = mode
        self._mtu = mtu
        self._name = name
        self._tagged_vlans = tagged_vlans
        self._tags = tags
        self._untagged_vlan = untagged_vlan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableInterface of this WritableInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def circuit_termination(self):
        """Gets the circuit_termination of this WritableInterface.


        :return: The circuit_termination of this WritableInterface.
        :rtype: int
        """
        return self._circuit_termination

    @circuit_termination.setter
    def circuit_termination(self, circuit_termination):
        """Sets the circuit_termination of this WritableInterface.


        :param circuit_termination: The circuit_termination of this WritableInterface.
        :type circuit_termination: int
        """
        if circuit_termination is None:
            raise ValueError("Invalid value for `circuit_termination`, must not be `None`")

        self._circuit_termination = circuit_termination

    @property
    def description(self):
        """Gets the description of this WritableInterface.


        :return: The description of this WritableInterface.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritableInterface.


        :param description: The description of this WritableInterface.
        :type description: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")

        self._description = description

    @property
    def device(self):
        """Gets the device of this WritableInterface.


        :return: The device of this WritableInterface.
        :rtype: int
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this WritableInterface.


        :param device: The device of this WritableInterface.
        :type device: int
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def enabled(self):
        """Gets the enabled of this WritableInterface.


        :return: The enabled of this WritableInterface.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this WritableInterface.


        :param enabled: The enabled of this WritableInterface.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def form_factor(self):
        """Gets the form_factor of this WritableInterface.


        :return: The form_factor of this WritableInterface.
        :rtype: int
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this WritableInterface.


        :param form_factor: The form_factor of this WritableInterface.
        :type form_factor: int
        """
        allowed_values = [0, 200, 800, 1000, 1150, 1170, 1050, 1100, 1200, 1300, 1310, 1320, 1350, 1400, 1500, 1510, 1520, 1550, 1600, 2600, 2610, 2620, 2630, 2640, 6100, 6200, 6300, 6400, 6500, 6600, 6700, 3010, 3020, 3040, 3080, 3160, 3320, 4000, 4010, 4040, 4050, 5000, 5050, 5100, 5150, 5200, 5300, 5310, 5320, 5330, 32767]  # noqa: E501
        if form_factor not in allowed_values:
            raise ValueError(
                "Invalid value for `form_factor` ({0}), must be one of {1}"
                .format(form_factor, allowed_values)
            )

        self._form_factor = form_factor

    @property
    def id(self):
        """Gets the id of this WritableInterface.


        :return: The id of this WritableInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableInterface.


        :param id: The id of this WritableInterface.
        :type id: int
        """

        self._id = id

    @property
    def interface_connection(self):
        """Gets the interface_connection of this WritableInterface.


        :return: The interface_connection of this WritableInterface.
        :rtype: str
        """
        return self._interface_connection

    @interface_connection.setter
    def interface_connection(self, interface_connection):
        """Sets the interface_connection of this WritableInterface.


        :param interface_connection: The interface_connection of this WritableInterface.
        :type interface_connection: str
        """

        self._interface_connection = interface_connection

    @property
    def is_connected(self):
        """Gets the is_connected of this WritableInterface.


        :return: The is_connected of this WritableInterface.
        :rtype: str
        """
        return self._is_connected

    @is_connected.setter
    def is_connected(self, is_connected):
        """Sets the is_connected of this WritableInterface.


        :param is_connected: The is_connected of this WritableInterface.
        :type is_connected: str
        """

        self._is_connected = is_connected

    @property
    def lag(self):
        """Gets the lag of this WritableInterface.


        :return: The lag of this WritableInterface.
        :rtype: int
        """
        return self._lag

    @lag.setter
    def lag(self, lag):
        """Sets the lag of this WritableInterface.


        :param lag: The lag of this WritableInterface.
        :type lag: int
        """

        self._lag = lag

    @property
    def mac_address(self):
        """Gets the mac_address of this WritableInterface.


        :return: The mac_address of this WritableInterface.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this WritableInterface.


        :param mac_address: The mac_address of this WritableInterface.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def mgmt_only(self):
        """Gets the mgmt_only of this WritableInterface.

        This interface is used only for out-of-band management

        :return: The mgmt_only of this WritableInterface.
        :rtype: bool
        """
        return self._mgmt_only

    @mgmt_only.setter
    def mgmt_only(self, mgmt_only):
        """Sets the mgmt_only of this WritableInterface.

        This interface is used only for out-of-band management

        :param mgmt_only: The mgmt_only of this WritableInterface.
        :type mgmt_only: bool
        """

        self._mgmt_only = mgmt_only

    @property
    def mode(self):
        """Gets the mode of this WritableInterface.


        :return: The mode of this WritableInterface.
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this WritableInterface.


        :param mode: The mode of this WritableInterface.
        :type mode: int
        """
        allowed_values = [100, 200, 300]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def mtu(self):
        """Gets the mtu of this WritableInterface.


        :return: The mtu of this WritableInterface.
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this WritableInterface.


        :param mtu: The mtu of this WritableInterface.
        :type mtu: int
        """
        if mtu is not None and mtu > 65536:
            raise ValueError("Invalid value for `mtu`, must be a value less than or equal to `65536`")
        if mtu is not None and mtu < 1:
            raise ValueError("Invalid value for `mtu`, must be a value greater than or equal to `1`")

        self._mtu = mtu

    @property
    def name(self):
        """Gets the name of this WritableInterface.


        :return: The name of this WritableInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritableInterface.


        :param name: The name of this WritableInterface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def tagged_vlans(self):
        """Gets the tagged_vlans of this WritableInterface.


        :return: The tagged_vlans of this WritableInterface.
        :rtype: list[int]
        """
        return self._tagged_vlans

    @tagged_vlans.setter
    def tagged_vlans(self, tagged_vlans):
        """Sets the tagged_vlans of this WritableInterface.


        :param tagged_vlans: The tagged_vlans of this WritableInterface.
        :type tagged_vlans: list[int]
        """

        self._tagged_vlans = tagged_vlans

    @property
    def tags(self):
        """Gets the tags of this WritableInterface.


        :return: The tags of this WritableInterface.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritableInterface.


        :param tags: The tags of this WritableInterface.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def untagged_vlan(self):
        """Gets the untagged_vlan of this WritableInterface.


        :return: The untagged_vlan of this WritableInterface.
        :rtype: int
        """
        return self._untagged_vlan

    @untagged_vlan.setter
    def untagged_vlan(self, untagged_vlan):
        """Sets the untagged_vlan of this WritableInterface.


        :param untagged_vlan: The untagged_vlan of this WritableInterface.
        :type untagged_vlan: int
        """

        self._untagged_vlan = untagged_vlan
