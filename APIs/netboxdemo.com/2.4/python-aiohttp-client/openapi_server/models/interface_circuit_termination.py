# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.interface_nested_circuit import InterfaceNestedCircuit
from openapi_server import util


class InterfaceCircuitTermination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, circuit: InterfaceNestedCircuit=None, id: int=None, port_speed: int=None, pp_info: str=None, term_side: str=None, upstream_speed: int=None, xconnect_id: str=None):
        """InterfaceCircuitTermination - a model defined in OpenAPI

        :param circuit: The circuit of this InterfaceCircuitTermination.
        :param id: The id of this InterfaceCircuitTermination.
        :param port_speed: The port_speed of this InterfaceCircuitTermination.
        :param pp_info: The pp_info of this InterfaceCircuitTermination.
        :param term_side: The term_side of this InterfaceCircuitTermination.
        :param upstream_speed: The upstream_speed of this InterfaceCircuitTermination.
        :param xconnect_id: The xconnect_id of this InterfaceCircuitTermination.
        """
        self.openapi_types = {
            'circuit': InterfaceNestedCircuit,
            'id': int,
            'port_speed': int,
            'pp_info': str,
            'term_side': str,
            'upstream_speed': int,
            'xconnect_id': str
        }

        self.attribute_map = {
            'circuit': 'circuit',
            'id': 'id',
            'port_speed': 'port_speed',
            'pp_info': 'pp_info',
            'term_side': 'term_side',
            'upstream_speed': 'upstream_speed',
            'xconnect_id': 'xconnect_id'
        }

        self._circuit = circuit
        self._id = id
        self._port_speed = port_speed
        self._pp_info = pp_info
        self._term_side = term_side
        self._upstream_speed = upstream_speed
        self._xconnect_id = xconnect_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InterfaceCircuitTermination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InterfaceCircuitTermination of this InterfaceCircuitTermination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def circuit(self):
        """Gets the circuit of this InterfaceCircuitTermination.


        :return: The circuit of this InterfaceCircuitTermination.
        :rtype: InterfaceNestedCircuit
        """
        return self._circuit

    @circuit.setter
    def circuit(self, circuit):
        """Sets the circuit of this InterfaceCircuitTermination.


        :param circuit: The circuit of this InterfaceCircuitTermination.
        :type circuit: InterfaceNestedCircuit
        """

        self._circuit = circuit

    @property
    def id(self):
        """Gets the id of this InterfaceCircuitTermination.


        :return: The id of this InterfaceCircuitTermination.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InterfaceCircuitTermination.


        :param id: The id of this InterfaceCircuitTermination.
        :type id: int
        """

        self._id = id

    @property
    def port_speed(self):
        """Gets the port_speed of this InterfaceCircuitTermination.


        :return: The port_speed of this InterfaceCircuitTermination.
        :rtype: int
        """
        return self._port_speed

    @port_speed.setter
    def port_speed(self, port_speed):
        """Sets the port_speed of this InterfaceCircuitTermination.


        :param port_speed: The port_speed of this InterfaceCircuitTermination.
        :type port_speed: int
        """
        if port_speed is None:
            raise ValueError("Invalid value for `port_speed`, must not be `None`")
        if port_speed is not None and port_speed > 2147483647:
            raise ValueError("Invalid value for `port_speed`, must be a value less than or equal to `2147483647`")
        if port_speed is not None and port_speed < 0:
            raise ValueError("Invalid value for `port_speed`, must be a value greater than or equal to `0`")

        self._port_speed = port_speed

    @property
    def pp_info(self):
        """Gets the pp_info of this InterfaceCircuitTermination.


        :return: The pp_info of this InterfaceCircuitTermination.
        :rtype: str
        """
        return self._pp_info

    @pp_info.setter
    def pp_info(self, pp_info):
        """Sets the pp_info of this InterfaceCircuitTermination.


        :param pp_info: The pp_info of this InterfaceCircuitTermination.
        :type pp_info: str
        """
        if pp_info is not None and len(pp_info) > 100:
            raise ValueError("Invalid value for `pp_info`, length must be less than or equal to `100`")

        self._pp_info = pp_info

    @property
    def term_side(self):
        """Gets the term_side of this InterfaceCircuitTermination.


        :return: The term_side of this InterfaceCircuitTermination.
        :rtype: str
        """
        return self._term_side

    @term_side.setter
    def term_side(self, term_side):
        """Sets the term_side of this InterfaceCircuitTermination.


        :param term_side: The term_side of this InterfaceCircuitTermination.
        :type term_side: str
        """
        allowed_values = ["A", "Z"]  # noqa: E501
        if term_side not in allowed_values:
            raise ValueError(
                "Invalid value for `term_side` ({0}), must be one of {1}"
                .format(term_side, allowed_values)
            )

        self._term_side = term_side

    @property
    def upstream_speed(self):
        """Gets the upstream_speed of this InterfaceCircuitTermination.

        Upstream speed, if different from port speed

        :return: The upstream_speed of this InterfaceCircuitTermination.
        :rtype: int
        """
        return self._upstream_speed

    @upstream_speed.setter
    def upstream_speed(self, upstream_speed):
        """Sets the upstream_speed of this InterfaceCircuitTermination.

        Upstream speed, if different from port speed

        :param upstream_speed: The upstream_speed of this InterfaceCircuitTermination.
        :type upstream_speed: int
        """
        if upstream_speed is not None and upstream_speed > 2147483647:
            raise ValueError("Invalid value for `upstream_speed`, must be a value less than or equal to `2147483647`")
        if upstream_speed is not None and upstream_speed < 0:
            raise ValueError("Invalid value for `upstream_speed`, must be a value greater than or equal to `0`")

        self._upstream_speed = upstream_speed

    @property
    def xconnect_id(self):
        """Gets the xconnect_id of this InterfaceCircuitTermination.


        :return: The xconnect_id of this InterfaceCircuitTermination.
        :rtype: str
        """
        return self._xconnect_id

    @xconnect_id.setter
    def xconnect_id(self, xconnect_id):
        """Sets the xconnect_id of this InterfaceCircuitTermination.


        :param xconnect_id: The xconnect_id of this InterfaceCircuitTermination.
        :type xconnect_id: str
        """
        if xconnect_id is not None and len(xconnect_id) > 50:
            raise ValueError("Invalid value for `xconnect_id`, length must be less than or equal to `50`")

        self._xconnect_id = xconnect_id
