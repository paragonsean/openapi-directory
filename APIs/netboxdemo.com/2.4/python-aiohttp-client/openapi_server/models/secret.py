# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_device import NestedDevice
from openapi_server.models.nested_secret_role import NestedSecretRole
from openapi_server import util


class Secret(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: date=None, custom_fields: object=None, device: NestedDevice=None, hash: str=None, id: int=None, last_updated: datetime=None, name: str=None, plaintext: str=None, role: NestedSecretRole=None, tags: List[str]=None):
        """Secret - a model defined in OpenAPI

        :param created: The created of this Secret.
        :param custom_fields: The custom_fields of this Secret.
        :param device: The device of this Secret.
        :param hash: The hash of this Secret.
        :param id: The id of this Secret.
        :param last_updated: The last_updated of this Secret.
        :param name: The name of this Secret.
        :param plaintext: The plaintext of this Secret.
        :param role: The role of this Secret.
        :param tags: The tags of this Secret.
        """
        self.openapi_types = {
            'created': date,
            'custom_fields': object,
            'device': NestedDevice,
            'hash': str,
            'id': int,
            'last_updated': datetime,
            'name': str,
            'plaintext': str,
            'role': NestedSecretRole,
            'tags': List[str]
        }

        self.attribute_map = {
            'created': 'created',
            'custom_fields': 'custom_fields',
            'device': 'device',
            'hash': 'hash',
            'id': 'id',
            'last_updated': 'last_updated',
            'name': 'name',
            'plaintext': 'plaintext',
            'role': 'role',
            'tags': 'tags'
        }

        self._created = created
        self._custom_fields = custom_fields
        self._device = device
        self._hash = hash
        self._id = id
        self._last_updated = last_updated
        self._name = name
        self._plaintext = plaintext
        self._role = role
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Secret':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Secret of this Secret.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Secret.


        :return: The created of this Secret.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Secret.


        :param created: The created of this Secret.
        :type created: date
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Secret.


        :return: The custom_fields of this Secret.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Secret.


        :param custom_fields: The custom_fields of this Secret.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def device(self):
        """Gets the device of this Secret.


        :return: The device of this Secret.
        :rtype: NestedDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this Secret.


        :param device: The device of this Secret.
        :type device: NestedDevice
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def hash(self):
        """Gets the hash of this Secret.


        :return: The hash of this Secret.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Secret.


        :param hash: The hash of this Secret.
        :type hash: str
        """
        if hash is not None and len(hash) < 1:
            raise ValueError("Invalid value for `hash`, length must be greater than or equal to `1`")

        self._hash = hash

    @property
    def id(self):
        """Gets the id of this Secret.


        :return: The id of this Secret.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Secret.


        :param id: The id of this Secret.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this Secret.


        :return: The last_updated of this Secret.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Secret.


        :param last_updated: The last_updated of this Secret.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this Secret.


        :return: The name of this Secret.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Secret.


        :param name: The name of this Secret.
        :type name: str
        """
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")

        self._name = name

    @property
    def plaintext(self):
        """Gets the plaintext of this Secret.


        :return: The plaintext of this Secret.
        :rtype: str
        """
        return self._plaintext

    @plaintext.setter
    def plaintext(self, plaintext):
        """Sets the plaintext of this Secret.


        :param plaintext: The plaintext of this Secret.
        :type plaintext: str
        """
        if plaintext is None:
            raise ValueError("Invalid value for `plaintext`, must not be `None`")
        if plaintext is not None and len(plaintext) < 1:
            raise ValueError("Invalid value for `plaintext`, length must be greater than or equal to `1`")

        self._plaintext = plaintext

    @property
    def role(self):
        """Gets the role of this Secret.


        :return: The role of this Secret.
        :rtype: NestedSecretRole
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Secret.


        :param role: The role of this Secret.
        :type role: NestedSecretRole
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def tags(self):
        """Gets the tags of this Secret.


        :return: The tags of this Secret.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Secret.


        :param tags: The tags of this Secret.
        :type tags: List[str]
        """

        self._tags = tags
