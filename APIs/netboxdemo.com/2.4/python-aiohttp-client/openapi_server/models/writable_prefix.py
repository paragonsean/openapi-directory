# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WritablePrefix(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: date=None, custom_fields: object=None, description: str=None, family: int=None, id: int=None, is_pool: bool=None, last_updated: datetime=None, prefix: str=None, role: int=None, site: int=None, status: int=None, tags: List[str]=None, tenant: int=None, vlan: int=None, vrf: int=None):
        """WritablePrefix - a model defined in OpenAPI

        :param created: The created of this WritablePrefix.
        :param custom_fields: The custom_fields of this WritablePrefix.
        :param description: The description of this WritablePrefix.
        :param family: The family of this WritablePrefix.
        :param id: The id of this WritablePrefix.
        :param is_pool: The is_pool of this WritablePrefix.
        :param last_updated: The last_updated of this WritablePrefix.
        :param prefix: The prefix of this WritablePrefix.
        :param role: The role of this WritablePrefix.
        :param site: The site of this WritablePrefix.
        :param status: The status of this WritablePrefix.
        :param tags: The tags of this WritablePrefix.
        :param tenant: The tenant of this WritablePrefix.
        :param vlan: The vlan of this WritablePrefix.
        :param vrf: The vrf of this WritablePrefix.
        """
        self.openapi_types = {
            'created': date,
            'custom_fields': object,
            'description': str,
            'family': int,
            'id': int,
            'is_pool': bool,
            'last_updated': datetime,
            'prefix': str,
            'role': int,
            'site': int,
            'status': int,
            'tags': List[str],
            'tenant': int,
            'vlan': int,
            'vrf': int
        }

        self.attribute_map = {
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'family': 'family',
            'id': 'id',
            'is_pool': 'is_pool',
            'last_updated': 'last_updated',
            'prefix': 'prefix',
            'role': 'role',
            'site': 'site',
            'status': 'status',
            'tags': 'tags',
            'tenant': 'tenant',
            'vlan': 'vlan',
            'vrf': 'vrf'
        }

        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._family = family
        self._id = id
        self._is_pool = is_pool
        self._last_updated = last_updated
        self._prefix = prefix
        self._role = role
        self._site = site
        self._status = status
        self._tags = tags
        self._tenant = tenant
        self._vlan = vlan
        self._vrf = vrf

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritablePrefix':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritablePrefix of this WritablePrefix.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this WritablePrefix.


        :return: The created of this WritablePrefix.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritablePrefix.


        :param created: The created of this WritablePrefix.
        :type created: date
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this WritablePrefix.


        :return: The custom_fields of this WritablePrefix.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this WritablePrefix.


        :param custom_fields: The custom_fields of this WritablePrefix.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this WritablePrefix.


        :return: The description of this WritablePrefix.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritablePrefix.


        :param description: The description of this WritablePrefix.
        :type description: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")

        self._description = description

    @property
    def family(self):
        """Gets the family of this WritablePrefix.


        :return: The family of this WritablePrefix.
        :rtype: int
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this WritablePrefix.


        :param family: The family of this WritablePrefix.
        :type family: int
        """

        self._family = family

    @property
    def id(self):
        """Gets the id of this WritablePrefix.


        :return: The id of this WritablePrefix.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritablePrefix.


        :param id: The id of this WritablePrefix.
        :type id: int
        """

        self._id = id

    @property
    def is_pool(self):
        """Gets the is_pool of this WritablePrefix.

        All IP addresses within this prefix are considered usable

        :return: The is_pool of this WritablePrefix.
        :rtype: bool
        """
        return self._is_pool

    @is_pool.setter
    def is_pool(self, is_pool):
        """Sets the is_pool of this WritablePrefix.

        All IP addresses within this prefix are considered usable

        :param is_pool: The is_pool of this WritablePrefix.
        :type is_pool: bool
        """

        self._is_pool = is_pool

    @property
    def last_updated(self):
        """Gets the last_updated of this WritablePrefix.


        :return: The last_updated of this WritablePrefix.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this WritablePrefix.


        :param last_updated: The last_updated of this WritablePrefix.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def prefix(self):
        """Gets the prefix of this WritablePrefix.

        IPv4 or IPv6 network with mask

        :return: The prefix of this WritablePrefix.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this WritablePrefix.

        IPv4 or IPv6 network with mask

        :param prefix: The prefix of this WritablePrefix.
        :type prefix: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")

        self._prefix = prefix

    @property
    def role(self):
        """Gets the role of this WritablePrefix.

        The primary function of this prefix

        :return: The role of this WritablePrefix.
        :rtype: int
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this WritablePrefix.

        The primary function of this prefix

        :param role: The role of this WritablePrefix.
        :type role: int
        """

        self._role = role

    @property
    def site(self):
        """Gets the site of this WritablePrefix.


        :return: The site of this WritablePrefix.
        :rtype: int
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this WritablePrefix.


        :param site: The site of this WritablePrefix.
        :type site: int
        """

        self._site = site

    @property
    def status(self):
        """Gets the status of this WritablePrefix.

        Operational status of this prefix

        :return: The status of this WritablePrefix.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WritablePrefix.

        Operational status of this prefix

        :param status: The status of this WritablePrefix.
        :type status: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this WritablePrefix.


        :return: The tags of this WritablePrefix.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritablePrefix.


        :param tags: The tags of this WritablePrefix.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def tenant(self):
        """Gets the tenant of this WritablePrefix.


        :return: The tenant of this WritablePrefix.
        :rtype: int
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this WritablePrefix.


        :param tenant: The tenant of this WritablePrefix.
        :type tenant: int
        """

        self._tenant = tenant

    @property
    def vlan(self):
        """Gets the vlan of this WritablePrefix.


        :return: The vlan of this WritablePrefix.
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this WritablePrefix.


        :param vlan: The vlan of this WritablePrefix.
        :type vlan: int
        """

        self._vlan = vlan

    @property
    def vrf(self):
        """Gets the vrf of this WritablePrefix.


        :return: The vrf of this WritablePrefix.
        :rtype: int
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """Sets the vrf of this WritablePrefix.


        :param vrf: The vrf of this WritablePrefix.
        :type vrf: int
        """

        self._vrf = vrf
