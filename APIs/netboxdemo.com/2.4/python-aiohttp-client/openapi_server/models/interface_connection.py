# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_status import ConnectionStatus
from openapi_server.models.nested_interface import NestedInterface
from openapi_server import util


class InterfaceConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_status: ConnectionStatus=None, id: int=None, interface_a: NestedInterface=None, interface_b: NestedInterface=None):
        """InterfaceConnection - a model defined in OpenAPI

        :param connection_status: The connection_status of this InterfaceConnection.
        :param id: The id of this InterfaceConnection.
        :param interface_a: The interface_a of this InterfaceConnection.
        :param interface_b: The interface_b of this InterfaceConnection.
        """
        self.openapi_types = {
            'connection_status': ConnectionStatus,
            'id': int,
            'interface_a': NestedInterface,
            'interface_b': NestedInterface
        }

        self.attribute_map = {
            'connection_status': 'connection_status',
            'id': 'id',
            'interface_a': 'interface_a',
            'interface_b': 'interface_b'
        }

        self._connection_status = connection_status
        self._id = id
        self._interface_a = interface_a
        self._interface_b = interface_b

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InterfaceConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InterfaceConnection of this InterfaceConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_status(self):
        """Gets the connection_status of this InterfaceConnection.


        :return: The connection_status of this InterfaceConnection.
        :rtype: ConnectionStatus
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this InterfaceConnection.


        :param connection_status: The connection_status of this InterfaceConnection.
        :type connection_status: ConnectionStatus
        """

        self._connection_status = connection_status

    @property
    def id(self):
        """Gets the id of this InterfaceConnection.


        :return: The id of this InterfaceConnection.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InterfaceConnection.


        :param id: The id of this InterfaceConnection.
        :type id: int
        """

        self._id = id

    @property
    def interface_a(self):
        """Gets the interface_a of this InterfaceConnection.


        :return: The interface_a of this InterfaceConnection.
        :rtype: NestedInterface
        """
        return self._interface_a

    @interface_a.setter
    def interface_a(self, interface_a):
        """Sets the interface_a of this InterfaceConnection.


        :param interface_a: The interface_a of this InterfaceConnection.
        :type interface_a: NestedInterface
        """
        if interface_a is None:
            raise ValueError("Invalid value for `interface_a`, must not be `None`")

        self._interface_a = interface_a

    @property
    def interface_b(self):
        """Gets the interface_b of this InterfaceConnection.


        :return: The interface_b of this InterfaceConnection.
        :rtype: NestedInterface
        """
        return self._interface_b

    @interface_b.setter
    def interface_b(self, interface_b):
        """Sets the interface_b of this InterfaceConnection.


        :param interface_b: The interface_b of this InterfaceConnection.
        :type interface_b: NestedInterface
        """
        if interface_b is None:
            raise ValueError("Invalid value for `interface_b`, must not be `None`")

        self._interface_b = interface_b
