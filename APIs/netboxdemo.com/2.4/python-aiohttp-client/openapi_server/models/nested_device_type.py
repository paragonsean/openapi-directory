# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_manufacturer import NestedManufacturer
import re
from openapi_server import util


class NestedDeviceType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, manufacturer: NestedManufacturer=None, model: str=None, slug: str=None, url: str=None):
        """NestedDeviceType - a model defined in OpenAPI

        :param id: The id of this NestedDeviceType.
        :param manufacturer: The manufacturer of this NestedDeviceType.
        :param model: The model of this NestedDeviceType.
        :param slug: The slug of this NestedDeviceType.
        :param url: The url of this NestedDeviceType.
        """
        self.openapi_types = {
            'id': int,
            'manufacturer': NestedManufacturer,
            'model': str,
            'slug': str,
            'url': str
        }

        self.attribute_map = {
            'id': 'id',
            'manufacturer': 'manufacturer',
            'model': 'model',
            'slug': 'slug',
            'url': 'url'
        }

        self._id = id
        self._manufacturer = manufacturer
        self._model = model
        self._slug = slug
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NestedDeviceType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NestedDeviceType of this NestedDeviceType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NestedDeviceType.


        :return: The id of this NestedDeviceType.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NestedDeviceType.


        :param id: The id of this NestedDeviceType.
        :type id: int
        """

        self._id = id

    @property
    def manufacturer(self):
        """Gets the manufacturer of this NestedDeviceType.


        :return: The manufacturer of this NestedDeviceType.
        :rtype: NestedManufacturer
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this NestedDeviceType.


        :param manufacturer: The manufacturer of this NestedDeviceType.
        :type manufacturer: NestedManufacturer
        """

        self._manufacturer = manufacturer

    @property
    def model(self):
        """Gets the model of this NestedDeviceType.


        :return: The model of this NestedDeviceType.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this NestedDeviceType.


        :param model: The model of this NestedDeviceType.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")
        if model is not None and len(model) > 50:
            raise ValueError("Invalid value for `model`, length must be less than or equal to `50`")
        if model is not None and len(model) < 1:
            raise ValueError("Invalid value for `model`, length must be greater than or equal to `1`")

        self._model = model

    @property
    def slug(self):
        """Gets the slug of this NestedDeviceType.


        :return: The slug of this NestedDeviceType.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this NestedDeviceType.


        :param slug: The slug of this NestedDeviceType.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def url(self):
        """Gets the url of this NestedDeviceType.


        :return: The url of this NestedDeviceType.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NestedDeviceType.


        :param url: The url of this NestedDeviceType.
        :type url: str
        """

        self._url = url
