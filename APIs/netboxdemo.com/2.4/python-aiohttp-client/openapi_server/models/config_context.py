# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_device_role import NestedDeviceRole
from openapi_server.models.nested_platform import NestedPlatform
from openapi_server.models.nested_region import NestedRegion
from openapi_server.models.nested_site import NestedSite
from openapi_server.models.nested_tenant import NestedTenant
from openapi_server.models.nested_tenant_group import NestedTenantGroup
from openapi_server import util


class ConfigContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: str=None, description: str=None, id: int=None, is_active: bool=None, name: str=None, platforms: list[NestedPlatform]=None, regions: list[NestedRegion]=None, roles: list[NestedDeviceRole]=None, sites: list[NestedSite]=None, tenant_groups: list[NestedTenantGroup]=None, tenants: list[NestedTenant]=None, weight: int=None):
        """ConfigContext - a model defined in OpenAPI

        :param data: The data of this ConfigContext.
        :param description: The description of this ConfigContext.
        :param id: The id of this ConfigContext.
        :param is_active: The is_active of this ConfigContext.
        :param name: The name of this ConfigContext.
        :param platforms: The platforms of this ConfigContext.
        :param regions: The regions of this ConfigContext.
        :param roles: The roles of this ConfigContext.
        :param sites: The sites of this ConfigContext.
        :param tenant_groups: The tenant_groups of this ConfigContext.
        :param tenants: The tenants of this ConfigContext.
        :param weight: The weight of this ConfigContext.
        """
        self.openapi_types = {
            'data': str,
            'description': str,
            'id': int,
            'is_active': bool,
            'name': str,
            'platforms': list[NestedPlatform],
            'regions': list[NestedRegion],
            'roles': list[NestedDeviceRole],
            'sites': list[NestedSite],
            'tenant_groups': list[NestedTenantGroup],
            'tenants': list[NestedTenant],
            'weight': int
        }

        self.attribute_map = {
            'data': 'data',
            'description': 'description',
            'id': 'id',
            'is_active': 'is_active',
            'name': 'name',
            'platforms': 'platforms',
            'regions': 'regions',
            'roles': 'roles',
            'sites': 'sites',
            'tenant_groups': 'tenant_groups',
            'tenants': 'tenants',
            'weight': 'weight'
        }

        self._data = data
        self._description = description
        self._id = id
        self._is_active = is_active
        self._name = name
        self._platforms = platforms
        self._regions = regions
        self._roles = roles
        self._sites = sites
        self._tenant_groups = tenant_groups
        self._tenants = tenants
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigContext of this ConfigContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this ConfigContext.


        :return: The data of this ConfigContext.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ConfigContext.


        :param data: The data of this ConfigContext.
        :type data: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def description(self):
        """Gets the description of this ConfigContext.


        :return: The description of this ConfigContext.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigContext.


        :param description: The description of this ConfigContext.
        :type description: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this ConfigContext.


        :return: The id of this ConfigContext.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConfigContext.


        :param id: The id of this ConfigContext.
        :type id: int
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this ConfigContext.


        :return: The is_active of this ConfigContext.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ConfigContext.


        :param is_active: The is_active of this ConfigContext.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def name(self):
        """Gets the name of this ConfigContext.


        :return: The name of this ConfigContext.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigContext.


        :param name: The name of this ConfigContext.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def platforms(self):
        """Gets the platforms of this ConfigContext.


        :return: The platforms of this ConfigContext.
        :rtype: list[NestedPlatform]
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this ConfigContext.


        :param platforms: The platforms of this ConfigContext.
        :type platforms: list[NestedPlatform]
        """

        self._platforms = platforms

    @property
    def regions(self):
        """Gets the regions of this ConfigContext.


        :return: The regions of this ConfigContext.
        :rtype: list[NestedRegion]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this ConfigContext.


        :param regions: The regions of this ConfigContext.
        :type regions: list[NestedRegion]
        """

        self._regions = regions

    @property
    def roles(self):
        """Gets the roles of this ConfigContext.


        :return: The roles of this ConfigContext.
        :rtype: list[NestedDeviceRole]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this ConfigContext.


        :param roles: The roles of this ConfigContext.
        :type roles: list[NestedDeviceRole]
        """

        self._roles = roles

    @property
    def sites(self):
        """Gets the sites of this ConfigContext.


        :return: The sites of this ConfigContext.
        :rtype: list[NestedSite]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this ConfigContext.


        :param sites: The sites of this ConfigContext.
        :type sites: list[NestedSite]
        """

        self._sites = sites

    @property
    def tenant_groups(self):
        """Gets the tenant_groups of this ConfigContext.


        :return: The tenant_groups of this ConfigContext.
        :rtype: list[NestedTenantGroup]
        """
        return self._tenant_groups

    @tenant_groups.setter
    def tenant_groups(self, tenant_groups):
        """Sets the tenant_groups of this ConfigContext.


        :param tenant_groups: The tenant_groups of this ConfigContext.
        :type tenant_groups: list[NestedTenantGroup]
        """

        self._tenant_groups = tenant_groups

    @property
    def tenants(self):
        """Gets the tenants of this ConfigContext.


        :return: The tenants of this ConfigContext.
        :rtype: list[NestedTenant]
        """
        return self._tenants

    @tenants.setter
    def tenants(self, tenants):
        """Sets the tenants of this ConfigContext.


        :param tenants: The tenants of this ConfigContext.
        :type tenants: list[NestedTenant]
        """

        self._tenants = tenants

    @property
    def weight(self):
        """Gets the weight of this ConfigContext.


        :return: The weight of this ConfigContext.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ConfigContext.


        :param weight: The weight of this ConfigContext.
        :type weight: int
        """
        if weight is not None and weight > 32767:
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `32767`")
        if weight is not None and weight < 0:
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `0`")

        self._weight = weight
