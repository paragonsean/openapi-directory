/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Secret;
import org.openapitools.client.model.SecretRole;
import org.openapitools.client.model.SecretsSecretRolesList200Response;
import org.openapitools.client.model.SecretsSecretsList200Response;
import org.openapitools.client.model.WritableSecret;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SecretsApi
 */
@Disabled
public class SecretsApiTest {

    private final SecretsApi api = new SecretsApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsChoicesListTest() throws ApiException {
        api.secretsChoicesList();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsChoicesReadTest() throws ApiException {
        String id = null;
        api.secretsChoicesRead(id);
        // TODO: test validations
    }

    /**
     * This endpoint can be used to generate a new RSA key pair. The keys are returned in PEM format.      {         \&quot;public_key\&quot;: \&quot;&lt;public key&gt;\&quot;,         \&quot;private_key\&quot;: \&quot;&lt;private key&gt;\&quot;     }
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsGenerateRsaKeyPairListTest() throws ApiException {
        api.secretsGenerateRsaKeyPairList();
        // TODO: test validations
    }

    /**
     * Retrieve a temporary session key to use for encrypting and decrypting secrets via the API. The user&#39;s private RSA key is POSTed with the name &#x60;private_key&#x60;. An example:      curl -v -X POST -H \&quot;Authorization: Token &lt;token&gt;\&quot; -H \&quot;Accept: application/json; indent&#x3D;4\&quot; \\     --data-urlencode \&quot;private_key@&lt;filename&gt;\&quot; https://netbox/api/secrets/get-session-key/  This request will yield a base64-encoded session key to be included in an &#x60;X-Session-Key&#x60; header in future requests:      {         \&quot;session_key\&quot;: \&quot;+8t4SI6XikgVmB5+/urhozx9O5qCQANyOk1MNe6taRf&#x3D;\&quot;     }  This endpoint accepts one optional parameter: &#x60;preserve_key&#x60;. If True and a session key exists, the existing session key will be returned instead of a new one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsGetSessionKeyCreateTest() throws ApiException {
        api.secretsGetSessionKeyCreate();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsSecretRolesCreateTest() throws ApiException {
        SecretRole secretRole = null;
        SecretRole response = api.secretsSecretRolesCreate(secretRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsSecretRolesDeleteTest() throws ApiException {
        Integer id = null;
        api.secretsSecretRolesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsSecretRolesListTest() throws ApiException {
        String name = null;
        String slug = null;
        Integer limit = null;
        Integer offset = null;
        SecretsSecretRolesList200Response response = api.secretsSecretRolesList(name, slug, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsSecretRolesPartialUpdateTest() throws ApiException {
        Integer id = null;
        SecretRole secretRole = null;
        SecretRole response = api.secretsSecretRolesPartialUpdate(id, secretRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsSecretRolesReadTest() throws ApiException {
        Integer id = null;
        SecretRole response = api.secretsSecretRolesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsSecretRolesUpdateTest() throws ApiException {
        Integer id = null;
        SecretRole secretRole = null;
        SecretRole response = api.secretsSecretRolesUpdate(id, secretRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsSecretsCreateTest() throws ApiException {
        WritableSecret writableSecret = null;
        Secret response = api.secretsSecretsCreate(writableSecret);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsSecretsDeleteTest() throws ApiException {
        Integer id = null;
        api.secretsSecretsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsSecretsListTest() throws ApiException {
        String name = null;
        String idIn = null;
        String q = null;
        String roleId = null;
        String role = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        SecretsSecretsList200Response response = api.secretsSecretsList(name, idIn, q, roleId, role, deviceId, device, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsSecretsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableSecret writableSecret = null;
        Secret response = api.secretsSecretsPartialUpdate(id, writableSecret);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsSecretsReadTest() throws ApiException {
        Integer id = null;
        Secret response = api.secretsSecretsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsSecretsUpdateTest() throws ApiException {
        Integer id = null;
        WritableSecret writableSecret = null;
        Secret response = api.secretsSecretsUpdate(id, writableSecret);
        // TODO: test validations
    }

}
