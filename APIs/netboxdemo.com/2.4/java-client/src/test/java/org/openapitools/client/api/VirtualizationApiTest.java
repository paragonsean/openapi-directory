/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Cluster;
import org.openapitools.client.model.ClusterGroup;
import org.openapitools.client.model.ClusterType;
import org.openapitools.client.model.DcimInterfacesList200Response;
import org.openapitools.client.model.ModelInterface;
import org.openapitools.client.model.VirtualMachine;
import org.openapitools.client.model.VirtualMachineWithConfigContext;
import org.openapitools.client.model.VirtualizationClusterGroupsList200Response;
import org.openapitools.client.model.VirtualizationClusterTypesList200Response;
import org.openapitools.client.model.VirtualizationClustersList200Response;
import org.openapitools.client.model.VirtualizationVirtualMachinesList200Response;
import org.openapitools.client.model.WritableCluster;
import org.openapitools.client.model.WritableInterface;
import org.openapitools.client.model.WritableVirtualMachine;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VirtualizationApi
 */
@Disabled
public class VirtualizationApiTest {

    private final VirtualizationApi api = new VirtualizationApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationChoicesListTest() throws ApiException {
        api.virtualizationChoicesList();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationChoicesReadTest() throws ApiException {
        String id = null;
        api.virtualizationChoicesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterGroupsCreateTest() throws ApiException {
        ClusterGroup clusterGroup = null;
        ClusterGroup response = api.virtualizationClusterGroupsCreate(clusterGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterGroupsDeleteTest() throws ApiException {
        Integer id = null;
        api.virtualizationClusterGroupsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterGroupsListTest() throws ApiException {
        String name = null;
        String slug = null;
        Integer limit = null;
        Integer offset = null;
        VirtualizationClusterGroupsList200Response response = api.virtualizationClusterGroupsList(name, slug, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterGroupsPartialUpdateTest() throws ApiException {
        Integer id = null;
        ClusterGroup clusterGroup = null;
        ClusterGroup response = api.virtualizationClusterGroupsPartialUpdate(id, clusterGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterGroupsReadTest() throws ApiException {
        Integer id = null;
        ClusterGroup response = api.virtualizationClusterGroupsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterGroupsUpdateTest() throws ApiException {
        Integer id = null;
        ClusterGroup clusterGroup = null;
        ClusterGroup response = api.virtualizationClusterGroupsUpdate(id, clusterGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterTypesCreateTest() throws ApiException {
        ClusterType clusterType = null;
        ClusterType response = api.virtualizationClusterTypesCreate(clusterType);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterTypesDeleteTest() throws ApiException {
        Integer id = null;
        api.virtualizationClusterTypesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterTypesListTest() throws ApiException {
        String name = null;
        String slug = null;
        Integer limit = null;
        Integer offset = null;
        VirtualizationClusterTypesList200Response response = api.virtualizationClusterTypesList(name, slug, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterTypesPartialUpdateTest() throws ApiException {
        Integer id = null;
        ClusterType clusterType = null;
        ClusterType response = api.virtualizationClusterTypesPartialUpdate(id, clusterType);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterTypesReadTest() throws ApiException {
        Integer id = null;
        ClusterType response = api.virtualizationClusterTypesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClusterTypesUpdateTest() throws ApiException {
        Integer id = null;
        ClusterType clusterType = null;
        ClusterType response = api.virtualizationClusterTypesUpdate(id, clusterType);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClustersCreateTest() throws ApiException {
        WritableCluster writableCluster = null;
        Cluster response = api.virtualizationClustersCreate(writableCluster);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClustersDeleteTest() throws ApiException {
        Integer id = null;
        api.virtualizationClustersDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClustersListTest() throws ApiException {
        String name = null;
        String idIn = null;
        String q = null;
        String groupId = null;
        String group = null;
        String typeId = null;
        String type = null;
        String siteId = null;
        String site = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        VirtualizationClustersList200Response response = api.virtualizationClustersList(name, idIn, q, groupId, group, typeId, type, siteId, site, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClustersPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableCluster writableCluster = null;
        Cluster response = api.virtualizationClustersPartialUpdate(id, writableCluster);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClustersReadTest() throws ApiException {
        Integer id = null;
        Cluster response = api.virtualizationClustersRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationClustersUpdateTest() throws ApiException {
        Integer id = null;
        WritableCluster writableCluster = null;
        Cluster response = api.virtualizationClustersUpdate(id, writableCluster);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationInterfacesCreateTest() throws ApiException {
        WritableInterface writableInterface = null;
        ModelInterface response = api.virtualizationInterfacesCreate(writableInterface);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationInterfacesDeleteTest() throws ApiException {
        Integer id = null;
        api.virtualizationInterfacesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationInterfacesListTest() throws ApiException {
        String name = null;
        String enabled = null;
        BigDecimal mtu = null;
        String virtualMachineId = null;
        String virtualMachine = null;
        String macAddress = null;
        Integer limit = null;
        Integer offset = null;
        DcimInterfacesList200Response response = api.virtualizationInterfacesList(name, enabled, mtu, virtualMachineId, virtualMachine, macAddress, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationInterfacesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableInterface writableInterface = null;
        ModelInterface response = api.virtualizationInterfacesPartialUpdate(id, writableInterface);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationInterfacesReadTest() throws ApiException {
        Integer id = null;
        ModelInterface response = api.virtualizationInterfacesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationInterfacesUpdateTest() throws ApiException {
        Integer id = null;
        WritableInterface writableInterface = null;
        ModelInterface response = api.virtualizationInterfacesUpdate(id, writableInterface);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationVirtualMachinesCreateTest() throws ApiException {
        WritableVirtualMachine writableVirtualMachine = null;
        VirtualMachine response = api.virtualizationVirtualMachinesCreate(writableVirtualMachine);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationVirtualMachinesDeleteTest() throws ApiException {
        Integer id = null;
        api.virtualizationVirtualMachinesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationVirtualMachinesListTest() throws ApiException {
        String name = null;
        String cluster = null;
        String idIn = null;
        String q = null;
        String status = null;
        String clusterGroupId = null;
        String clusterGroup = null;
        String clusterTypeId = null;
        String clusterType = null;
        String clusterId = null;
        BigDecimal regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String roleId = null;
        String role = null;
        String tenantId = null;
        String tenant = null;
        String platformId = null;
        String platform = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        VirtualizationVirtualMachinesList200Response response = api.virtualizationVirtualMachinesList(name, cluster, idIn, q, status, clusterGroupId, clusterGroup, clusterTypeId, clusterType, clusterId, regionId, region, siteId, site, roleId, role, tenantId, tenant, platformId, platform, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationVirtualMachinesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableVirtualMachine writableVirtualMachine = null;
        VirtualMachine response = api.virtualizationVirtualMachinesPartialUpdate(id, writableVirtualMachine);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationVirtualMachinesReadTest() throws ApiException {
        Integer id = null;
        VirtualMachineWithConfigContext response = api.virtualizationVirtualMachinesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualizationVirtualMachinesUpdateTest() throws ApiException {
        Integer id = null;
        WritableVirtualMachine writableVirtualMachine = null;
        VirtualMachine response = api.virtualizationVirtualMachinesUpdate(id, writableVirtualMachine);
        // TODO: test validations
    }

}
