/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Aggregate;
import java.math.BigDecimal;
import org.openapitools.client.model.IPAddress;
import org.openapitools.client.model.IpamAggregatesList200Response;
import org.openapitools.client.model.IpamIpAddressesList200Response;
import org.openapitools.client.model.IpamPrefixesList200Response;
import org.openapitools.client.model.IpamRirsList200Response;
import org.openapitools.client.model.IpamRolesList200Response;
import org.openapitools.client.model.IpamServicesList200Response;
import org.openapitools.client.model.IpamVlanGroupsList200Response;
import org.openapitools.client.model.IpamVlansList200Response;
import org.openapitools.client.model.IpamVrfsList200Response;
import org.openapitools.client.model.Prefix;
import org.openapitools.client.model.RIR;
import org.openapitools.client.model.Role;
import org.openapitools.client.model.Service;
import org.openapitools.client.model.VLAN;
import org.openapitools.client.model.VLANGroup;
import org.openapitools.client.model.VRF;
import org.openapitools.client.model.WritableAggregate;
import org.openapitools.client.model.WritableIPAddress;
import org.openapitools.client.model.WritablePrefix;
import org.openapitools.client.model.WritableService;
import org.openapitools.client.model.WritableVLAN;
import org.openapitools.client.model.WritableVLANGroup;
import org.openapitools.client.model.WritableVRF;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IpamApi
 */
@Disabled
public class IpamApiTest {

    private final IpamApi api = new IpamApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAggregatesCreateTest() throws ApiException {
        WritableAggregate writableAggregate = null;
        Aggregate response = api.ipamAggregatesCreate(writableAggregate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAggregatesDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamAggregatesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAggregatesListTest() throws ApiException {
        String family = null;
        String dateAdded = null;
        String idIn = null;
        String q = null;
        String rirId = null;
        String rir = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        IpamAggregatesList200Response response = api.ipamAggregatesList(family, dateAdded, idIn, q, rirId, rir, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAggregatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableAggregate writableAggregate = null;
        Aggregate response = api.ipamAggregatesPartialUpdate(id, writableAggregate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAggregatesReadTest() throws ApiException {
        Integer id = null;
        Aggregate response = api.ipamAggregatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamAggregatesUpdateTest() throws ApiException {
        Integer id = null;
        WritableAggregate writableAggregate = null;
        Aggregate response = api.ipamAggregatesUpdate(id, writableAggregate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamChoicesListTest() throws ApiException {
        api.ipamChoicesList();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamChoicesReadTest() throws ApiException {
        String id = null;
        api.ipamChoicesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpAddressesCreateTest() throws ApiException {
        WritableIPAddress writableIPAddress = null;
        IPAddress response = api.ipamIpAddressesCreate(writableIPAddress);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpAddressesDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamIpAddressesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpAddressesListTest() throws ApiException {
        String family = null;
        String idIn = null;
        String q = null;
        String parent = null;
        String address = null;
        BigDecimal maskLength = null;
        String vrfId = null;
        String vrf = null;
        String tenantId = null;
        String tenant = null;
        String device = null;
        BigDecimal deviceId = null;
        String virtualMachineId = null;
        String virtualMachine = null;
        String interfaceId = null;
        String status = null;
        String role = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        IpamIpAddressesList200Response response = api.ipamIpAddressesList(family, idIn, q, parent, address, maskLength, vrfId, vrf, tenantId, tenant, device, deviceId, virtualMachineId, virtualMachine, interfaceId, status, role, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpAddressesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableIPAddress writableIPAddress = null;
        IPAddress response = api.ipamIpAddressesPartialUpdate(id, writableIPAddress);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpAddressesReadTest() throws ApiException {
        Integer id = null;
        IPAddress response = api.ipamIpAddressesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamIpAddressesUpdateTest() throws ApiException {
        Integer id = null;
        WritableIPAddress writableIPAddress = null;
        IPAddress response = api.ipamIpAddressesUpdate(id, writableIPAddress);
        // TODO: test validations
    }

    /**
     * A convenience method for returning available IP addresses within a prefix. By default, the number of IPs returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed, however results will not be paginated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesAvailableIpsCreateTest() throws ApiException {
        Integer id = null;
        WritablePrefix writablePrefix = null;
        Prefix response = api.ipamPrefixesAvailableIpsCreate(id, writablePrefix);
        // TODO: test validations
    }

    /**
     * A convenience method for returning available IP addresses within a prefix. By default, the number of IPs returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed, however results will not be paginated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesAvailableIpsReadTest() throws ApiException {
        Integer id = null;
        Prefix response = api.ipamPrefixesAvailableIpsRead(id);
        // TODO: test validations
    }

    /**
     * A convenience method for returning available child prefixes within a parent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesAvailablePrefixesCreateTest() throws ApiException {
        Integer id = null;
        WritablePrefix writablePrefix = null;
        Prefix response = api.ipamPrefixesAvailablePrefixesCreate(id, writablePrefix);
        // TODO: test validations
    }

    /**
     * A convenience method for returning available child prefixes within a parent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesAvailablePrefixesReadTest() throws ApiException {
        Integer id = null;
        Prefix response = api.ipamPrefixesAvailablePrefixesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesCreateTest() throws ApiException {
        WritablePrefix writablePrefix = null;
        Prefix response = api.ipamPrefixesCreate(writablePrefix);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamPrefixesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesListTest() throws ApiException {
        String family = null;
        String isPool = null;
        String idIn = null;
        String q = null;
        String within = null;
        String withinInclude = null;
        String contains = null;
        BigDecimal maskLength = null;
        String vrfId = null;
        String vrf = null;
        String tenantId = null;
        String tenant = null;
        String siteId = null;
        String site = null;
        String vlanId = null;
        BigDecimal vlanVid = null;
        String roleId = null;
        String role = null;
        String status = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        IpamPrefixesList200Response response = api.ipamPrefixesList(family, isPool, idIn, q, within, withinInclude, contains, maskLength, vrfId, vrf, tenantId, tenant, siteId, site, vlanId, vlanVid, roleId, role, status, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritablePrefix writablePrefix = null;
        Prefix response = api.ipamPrefixesPartialUpdate(id, writablePrefix);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesReadTest() throws ApiException {
        Integer id = null;
        Prefix response = api.ipamPrefixesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamPrefixesUpdateTest() throws ApiException {
        Integer id = null;
        WritablePrefix writablePrefix = null;
        Prefix response = api.ipamPrefixesUpdate(id, writablePrefix);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRirsCreateTest() throws ApiException {
        RIR RIR = null;
        RIR response = api.ipamRirsCreate(RIR);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRirsDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamRirsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRirsListTest() throws ApiException {
        String name = null;
        String slug = null;
        String isPrivate = null;
        String idIn = null;
        Integer limit = null;
        Integer offset = null;
        IpamRirsList200Response response = api.ipamRirsList(name, slug, isPrivate, idIn, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRirsPartialUpdateTest() throws ApiException {
        Integer id = null;
        RIR RIR = null;
        RIR response = api.ipamRirsPartialUpdate(id, RIR);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRirsReadTest() throws ApiException {
        Integer id = null;
        RIR response = api.ipamRirsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRirsUpdateTest() throws ApiException {
        Integer id = null;
        RIR RIR = null;
        RIR response = api.ipamRirsUpdate(id, RIR);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRolesCreateTest() throws ApiException {
        Role role = null;
        Role response = api.ipamRolesCreate(role);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRolesDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamRolesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRolesListTest() throws ApiException {
        String name = null;
        String slug = null;
        Integer limit = null;
        Integer offset = null;
        IpamRolesList200Response response = api.ipamRolesList(name, slug, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRolesPartialUpdateTest() throws ApiException {
        Integer id = null;
        Role role = null;
        Role response = api.ipamRolesPartialUpdate(id, role);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRolesReadTest() throws ApiException {
        Integer id = null;
        Role response = api.ipamRolesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamRolesUpdateTest() throws ApiException {
        Integer id = null;
        Role role = null;
        Role response = api.ipamRolesUpdate(id, role);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServicesCreateTest() throws ApiException {
        WritableService writableService = null;
        Service response = api.ipamServicesCreate(writableService);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServicesDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamServicesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServicesListTest() throws ApiException {
        String name = null;
        String protocol = null;
        BigDecimal port = null;
        String q = null;
        String deviceId = null;
        String device = null;
        String virtualMachineId = null;
        String virtualMachine = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        IpamServicesList200Response response = api.ipamServicesList(name, protocol, port, q, deviceId, device, virtualMachineId, virtualMachine, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServicesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableService writableService = null;
        Service response = api.ipamServicesPartialUpdate(id, writableService);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServicesReadTest() throws ApiException {
        Integer id = null;
        Service response = api.ipamServicesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamServicesUpdateTest() throws ApiException {
        Integer id = null;
        WritableService writableService = null;
        Service response = api.ipamServicesUpdate(id, writableService);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsCreateTest() throws ApiException {
        WritableVLANGroup writableVLANGroup = null;
        VLANGroup response = api.ipamVlanGroupsCreate(writableVLANGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamVlanGroupsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsListTest() throws ApiException {
        String name = null;
        String slug = null;
        String siteId = null;
        String site = null;
        Integer limit = null;
        Integer offset = null;
        IpamVlanGroupsList200Response response = api.ipamVlanGroupsList(name, slug, siteId, site, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableVLANGroup writableVLANGroup = null;
        VLANGroup response = api.ipamVlanGroupsPartialUpdate(id, writableVLANGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsReadTest() throws ApiException {
        Integer id = null;
        VLANGroup response = api.ipamVlanGroupsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlanGroupsUpdateTest() throws ApiException {
        Integer id = null;
        WritableVLANGroup writableVLANGroup = null;
        VLANGroup response = api.ipamVlanGroupsUpdate(id, writableVLANGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlansCreateTest() throws ApiException {
        WritableVLAN writableVLAN = null;
        VLAN response = api.ipamVlansCreate(writableVLAN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlansDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamVlansDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlansListTest() throws ApiException {
        BigDecimal vid = null;
        String name = null;
        String idIn = null;
        String q = null;
        String siteId = null;
        String site = null;
        String groupId = null;
        String group = null;
        String tenantId = null;
        String tenant = null;
        String roleId = null;
        String role = null;
        String status = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        IpamVlansList200Response response = api.ipamVlansList(vid, name, idIn, q, siteId, site, groupId, group, tenantId, tenant, roleId, role, status, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlansPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableVLAN writableVLAN = null;
        VLAN response = api.ipamVlansPartialUpdate(id, writableVLAN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlansReadTest() throws ApiException {
        Integer id = null;
        VLAN response = api.ipamVlansRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVlansUpdateTest() throws ApiException {
        Integer id = null;
        WritableVLAN writableVLAN = null;
        VLAN response = api.ipamVlansUpdate(id, writableVLAN);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVrfsCreateTest() throws ApiException {
        WritableVRF writableVRF = null;
        VRF response = api.ipamVrfsCreate(writableVRF);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVrfsDeleteTest() throws ApiException {
        Integer id = null;
        api.ipamVrfsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVrfsListTest() throws ApiException {
        String name = null;
        String rd = null;
        String enforceUnique = null;
        String idIn = null;
        String q = null;
        String tenantId = null;
        String tenant = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        IpamVrfsList200Response response = api.ipamVrfsList(name, rd, enforceUnique, idIn, q, tenantId, tenant, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVrfsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableVRF writableVRF = null;
        VRF response = api.ipamVrfsPartialUpdate(id, writableVRF);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVrfsReadTest() throws ApiException {
        Integer id = null;
        VRF response = api.ipamVrfsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipamVrfsUpdateTest() throws ApiException {
        Integer id = null;
        WritableVRF writableVRF = null;
        VRF response = api.ipamVrfsUpdate(id, writableVRF);
        // TODO: test validations
    }

}
