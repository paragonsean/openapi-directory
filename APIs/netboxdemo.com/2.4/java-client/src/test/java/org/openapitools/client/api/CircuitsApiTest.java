/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Circuit;
import org.openapitools.client.model.CircuitTermination;
import org.openapitools.client.model.CircuitType;
import org.openapitools.client.model.CircuitsCircuitTerminationsList200Response;
import org.openapitools.client.model.CircuitsCircuitTypesList200Response;
import org.openapitools.client.model.CircuitsCircuitsList200Response;
import org.openapitools.client.model.CircuitsProvidersList200Response;
import org.openapitools.client.model.Provider;
import org.openapitools.client.model.WritableCircuit;
import org.openapitools.client.model.WritableCircuitTermination;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CircuitsApi
 */
@Disabled
public class CircuitsApiTest {

    private final CircuitsApi api = new CircuitsApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsChoicesListTest() throws ApiException {
        api.circuitsChoicesList();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsChoicesReadTest() throws ApiException {
        String id = null;
        api.circuitsChoicesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitTerminationsCreateTest() throws ApiException {
        WritableCircuitTermination writableCircuitTermination = null;
        CircuitTermination response = api.circuitsCircuitTerminationsCreate(writableCircuitTermination);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitTerminationsDeleteTest() throws ApiException {
        Integer id = null;
        api.circuitsCircuitTerminationsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitTerminationsListTest() throws ApiException {
        String termSide = null;
        BigDecimal portSpeed = null;
        BigDecimal upstreamSpeed = null;
        String xconnectId = null;
        String q = null;
        String circuitId = null;
        String siteId = null;
        String site = null;
        Integer limit = null;
        Integer offset = null;
        CircuitsCircuitTerminationsList200Response response = api.circuitsCircuitTerminationsList(termSide, portSpeed, upstreamSpeed, xconnectId, q, circuitId, siteId, site, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitTerminationsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableCircuitTermination writableCircuitTermination = null;
        CircuitTermination response = api.circuitsCircuitTerminationsPartialUpdate(id, writableCircuitTermination);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitTerminationsReadTest() throws ApiException {
        Integer id = null;
        CircuitTermination response = api.circuitsCircuitTerminationsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitTerminationsUpdateTest() throws ApiException {
        Integer id = null;
        WritableCircuitTermination writableCircuitTermination = null;
        CircuitTermination response = api.circuitsCircuitTerminationsUpdate(id, writableCircuitTermination);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitTypesCreateTest() throws ApiException {
        CircuitType circuitType = null;
        CircuitType response = api.circuitsCircuitTypesCreate(circuitType);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitTypesDeleteTest() throws ApiException {
        Integer id = null;
        api.circuitsCircuitTypesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitTypesListTest() throws ApiException {
        String name = null;
        String slug = null;
        Integer limit = null;
        Integer offset = null;
        CircuitsCircuitTypesList200Response response = api.circuitsCircuitTypesList(name, slug, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitTypesPartialUpdateTest() throws ApiException {
        Integer id = null;
        CircuitType circuitType = null;
        CircuitType response = api.circuitsCircuitTypesPartialUpdate(id, circuitType);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitTypesReadTest() throws ApiException {
        Integer id = null;
        CircuitType response = api.circuitsCircuitTypesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitTypesUpdateTest() throws ApiException {
        Integer id = null;
        CircuitType circuitType = null;
        CircuitType response = api.circuitsCircuitTypesUpdate(id, circuitType);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitsCreateTest() throws ApiException {
        WritableCircuit writableCircuit = null;
        Circuit response = api.circuitsCircuitsCreate(writableCircuit);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitsDeleteTest() throws ApiException {
        Integer id = null;
        api.circuitsCircuitsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitsListTest() throws ApiException {
        String cid = null;
        String installDate = null;
        BigDecimal commitRate = null;
        String idIn = null;
        String q = null;
        String providerId = null;
        String provider = null;
        String typeId = null;
        String type = null;
        String status = null;
        String tenantId = null;
        String tenant = null;
        String siteId = null;
        String site = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        CircuitsCircuitsList200Response response = api.circuitsCircuitsList(cid, installDate, commitRate, idIn, q, providerId, provider, typeId, type, status, tenantId, tenant, siteId, site, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableCircuit writableCircuit = null;
        Circuit response = api.circuitsCircuitsPartialUpdate(id, writableCircuit);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitsReadTest() throws ApiException {
        Integer id = null;
        Circuit response = api.circuitsCircuitsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsCircuitsUpdateTest() throws ApiException {
        Integer id = null;
        WritableCircuit writableCircuit = null;
        Circuit response = api.circuitsCircuitsUpdate(id, writableCircuit);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsProvidersCreateTest() throws ApiException {
        Provider provider = null;
        Provider response = api.circuitsProvidersCreate(provider);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsProvidersDeleteTest() throws ApiException {
        Integer id = null;
        api.circuitsProvidersDelete(id);
        // TODO: test validations
    }

    /**
     * A convenience method for rendering graphs for a particular provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsProvidersGraphsTest() throws ApiException {
        Integer id = null;
        Provider response = api.circuitsProvidersGraphs(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsProvidersListTest() throws ApiException {
        String name = null;
        String slug = null;
        BigDecimal asn = null;
        String account = null;
        String idIn = null;
        String q = null;
        String siteId = null;
        String site = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        CircuitsProvidersList200Response response = api.circuitsProvidersList(name, slug, asn, account, idIn, q, siteId, site, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsProvidersPartialUpdateTest() throws ApiException {
        Integer id = null;
        Provider provider = null;
        Provider response = api.circuitsProvidersPartialUpdate(id, provider);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsProvidersReadTest() throws ApiException {
        Integer id = null;
        Provider response = api.circuitsProvidersRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void circuitsProvidersUpdateTest() throws ApiException {
        Integer id = null;
        Provider provider = null;
        Provider response = api.circuitsProvidersUpdate(id, provider);
        // TODO: test validations
    }

}
