/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.ConsolePort;
import org.openapitools.client.model.ConsolePortTemplate;
import org.openapitools.client.model.ConsoleServerPort;
import org.openapitools.client.model.ConsoleServerPortTemplate;
import org.openapitools.client.model.DcimConsoleConnectionsList200Response;
import org.openapitools.client.model.DcimConsolePortTemplatesList200Response;
import org.openapitools.client.model.DcimConsoleServerPortTemplatesList200Response;
import org.openapitools.client.model.DcimConsoleServerPortsList200Response;
import org.openapitools.client.model.DcimDeviceBayTemplatesList200Response;
import org.openapitools.client.model.DcimDeviceBaysList200Response;
import org.openapitools.client.model.DcimDeviceRolesList200Response;
import org.openapitools.client.model.DcimDeviceTypesList200Response;
import org.openapitools.client.model.DcimDevicesList200Response;
import org.openapitools.client.model.DcimInterfaceConnectionsList200Response;
import org.openapitools.client.model.DcimInterfaceTemplatesList200Response;
import org.openapitools.client.model.DcimInterfacesList200Response;
import org.openapitools.client.model.DcimInventoryItemsList200Response;
import org.openapitools.client.model.DcimManufacturersList200Response;
import org.openapitools.client.model.DcimPlatformsList200Response;
import org.openapitools.client.model.DcimPowerConnectionsList200Response;
import org.openapitools.client.model.DcimPowerOutletTemplatesList200Response;
import org.openapitools.client.model.DcimPowerOutletsList200Response;
import org.openapitools.client.model.DcimPowerPortTemplatesList200Response;
import org.openapitools.client.model.DcimRackGroupsList200Response;
import org.openapitools.client.model.DcimRackReservationsList200Response;
import org.openapitools.client.model.DcimRackRolesList200Response;
import org.openapitools.client.model.DcimRacksList200Response;
import org.openapitools.client.model.DcimRegionsList200Response;
import org.openapitools.client.model.DcimSitesList200Response;
import org.openapitools.client.model.DcimVirtualChassisList200Response;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceBay;
import org.openapitools.client.model.DeviceBayTemplate;
import org.openapitools.client.model.DeviceRole;
import org.openapitools.client.model.DeviceType;
import org.openapitools.client.model.DeviceWithConfigContext;
import org.openapitools.client.model.InterfaceConnection;
import org.openapitools.client.model.InterfaceTemplate;
import org.openapitools.client.model.InventoryItem;
import org.openapitools.client.model.Manufacturer;
import org.openapitools.client.model.ModelInterface;
import org.openapitools.client.model.Platform;
import org.openapitools.client.model.PowerOutlet;
import org.openapitools.client.model.PowerOutletTemplate;
import org.openapitools.client.model.PowerPort;
import org.openapitools.client.model.PowerPortTemplate;
import org.openapitools.client.model.Rack;
import org.openapitools.client.model.RackGroup;
import org.openapitools.client.model.RackReservation;
import org.openapitools.client.model.RackRole;
import org.openapitools.client.model.Region;
import org.openapitools.client.model.Site;
import org.openapitools.client.model.VirtualChassis;
import org.openapitools.client.model.WritableConsolePort;
import org.openapitools.client.model.WritableConsolePortTemplate;
import org.openapitools.client.model.WritableConsoleServerPort;
import org.openapitools.client.model.WritableConsoleServerPortTemplate;
import org.openapitools.client.model.WritableDevice;
import org.openapitools.client.model.WritableDeviceBay;
import org.openapitools.client.model.WritableDeviceBayTemplate;
import org.openapitools.client.model.WritableDeviceType;
import org.openapitools.client.model.WritableInterface;
import org.openapitools.client.model.WritableInterfaceConnection;
import org.openapitools.client.model.WritableInterfaceTemplate;
import org.openapitools.client.model.WritableInventoryItem;
import org.openapitools.client.model.WritablePlatform;
import org.openapitools.client.model.WritablePowerOutlet;
import org.openapitools.client.model.WritablePowerOutletTemplate;
import org.openapitools.client.model.WritablePowerPort;
import org.openapitools.client.model.WritablePowerPortTemplate;
import org.openapitools.client.model.WritableRack;
import org.openapitools.client.model.WritableRackGroup;
import org.openapitools.client.model.WritableRackReservation;
import org.openapitools.client.model.WritableRegion;
import org.openapitools.client.model.WritableSite;
import org.openapitools.client.model.WritableVirtualChassis;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DcimApi
 */
@Disabled
public class DcimApiTest {

    private final DcimApi api = new DcimApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimChoicesListTest() throws ApiException {
        api.dcimChoicesList();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimChoicesReadTest() throws ApiException {
        String id = null;
        api.dcimChoicesRead(id);
        // TODO: test validations
    }

    /**
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConnectedDeviceListTest() throws ApiException {
        String peerDevice = null;
        String peerInterface = null;
        Device response = api.dcimConnectedDeviceList(peerDevice, peerInterface);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleConnectionsListTest() throws ApiException {
        String name = null;
        String connectionStatus = null;
        String site = null;
        String device = null;
        Integer limit = null;
        Integer offset = null;
        DcimConsoleConnectionsList200Response response = api.dcimConsoleConnectionsList(name, connectionStatus, site, device, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortTemplatesCreateTest() throws ApiException {
        WritableConsolePortTemplate writableConsolePortTemplate = null;
        ConsolePortTemplate response = api.dcimConsolePortTemplatesCreate(writableConsolePortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimConsolePortTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortTemplatesListTest() throws ApiException {
        String name = null;
        String devicetypeId = null;
        Integer limit = null;
        Integer offset = null;
        DcimConsolePortTemplatesList200Response response = api.dcimConsolePortTemplatesList(name, devicetypeId, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableConsolePortTemplate writableConsolePortTemplate = null;
        ConsolePortTemplate response = api.dcimConsolePortTemplatesPartialUpdate(id, writableConsolePortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortTemplatesReadTest() throws ApiException {
        Integer id = null;
        ConsolePortTemplate response = api.dcimConsolePortTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        WritableConsolePortTemplate writableConsolePortTemplate = null;
        ConsolePortTemplate response = api.dcimConsolePortTemplatesUpdate(id, writableConsolePortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortsCreateTest() throws ApiException {
        WritableConsolePort writableConsolePort = null;
        ConsolePort response = api.dcimConsolePortsCreate(writableConsolePort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimConsolePortsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortsListTest() throws ApiException {
        String name = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        DcimConsoleConnectionsList200Response response = api.dcimConsolePortsList(name, deviceId, device, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableConsolePort writableConsolePort = null;
        ConsolePort response = api.dcimConsolePortsPartialUpdate(id, writableConsolePort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortsReadTest() throws ApiException {
        Integer id = null;
        ConsolePort response = api.dcimConsolePortsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortsUpdateTest() throws ApiException {
        Integer id = null;
        WritableConsolePort writableConsolePort = null;
        ConsolePort response = api.dcimConsolePortsUpdate(id, writableConsolePort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortTemplatesCreateTest() throws ApiException {
        WritableConsoleServerPortTemplate writableConsoleServerPortTemplate = null;
        ConsoleServerPortTemplate response = api.dcimConsoleServerPortTemplatesCreate(writableConsoleServerPortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimConsoleServerPortTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortTemplatesListTest() throws ApiException {
        String name = null;
        String devicetypeId = null;
        Integer limit = null;
        Integer offset = null;
        DcimConsoleServerPortTemplatesList200Response response = api.dcimConsoleServerPortTemplatesList(name, devicetypeId, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableConsoleServerPortTemplate writableConsoleServerPortTemplate = null;
        ConsoleServerPortTemplate response = api.dcimConsoleServerPortTemplatesPartialUpdate(id, writableConsoleServerPortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortTemplatesReadTest() throws ApiException {
        Integer id = null;
        ConsoleServerPortTemplate response = api.dcimConsoleServerPortTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        WritableConsoleServerPortTemplate writableConsoleServerPortTemplate = null;
        ConsoleServerPortTemplate response = api.dcimConsoleServerPortTemplatesUpdate(id, writableConsoleServerPortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortsCreateTest() throws ApiException {
        WritableConsoleServerPort writableConsoleServerPort = null;
        ConsoleServerPort response = api.dcimConsoleServerPortsCreate(writableConsoleServerPort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimConsoleServerPortsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortsListTest() throws ApiException {
        String name = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        DcimConsoleServerPortsList200Response response = api.dcimConsoleServerPortsList(name, deviceId, device, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableConsoleServerPort writableConsoleServerPort = null;
        ConsoleServerPort response = api.dcimConsoleServerPortsPartialUpdate(id, writableConsoleServerPort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortsReadTest() throws ApiException {
        Integer id = null;
        ConsoleServerPort response = api.dcimConsoleServerPortsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortsUpdateTest() throws ApiException {
        Integer id = null;
        WritableConsoleServerPort writableConsoleServerPort = null;
        ConsoleServerPort response = api.dcimConsoleServerPortsUpdate(id, writableConsoleServerPort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBayTemplatesCreateTest() throws ApiException {
        WritableDeviceBayTemplate writableDeviceBayTemplate = null;
        DeviceBayTemplate response = api.dcimDeviceBayTemplatesCreate(writableDeviceBayTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBayTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimDeviceBayTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBayTemplatesListTest() throws ApiException {
        String name = null;
        String devicetypeId = null;
        Integer limit = null;
        Integer offset = null;
        DcimDeviceBayTemplatesList200Response response = api.dcimDeviceBayTemplatesList(name, devicetypeId, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBayTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableDeviceBayTemplate writableDeviceBayTemplate = null;
        DeviceBayTemplate response = api.dcimDeviceBayTemplatesPartialUpdate(id, writableDeviceBayTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBayTemplatesReadTest() throws ApiException {
        Integer id = null;
        DeviceBayTemplate response = api.dcimDeviceBayTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBayTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        WritableDeviceBayTemplate writableDeviceBayTemplate = null;
        DeviceBayTemplate response = api.dcimDeviceBayTemplatesUpdate(id, writableDeviceBayTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBaysCreateTest() throws ApiException {
        WritableDeviceBay writableDeviceBay = null;
        DeviceBay response = api.dcimDeviceBaysCreate(writableDeviceBay);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBaysDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimDeviceBaysDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBaysListTest() throws ApiException {
        String name = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        DcimDeviceBaysList200Response response = api.dcimDeviceBaysList(name, deviceId, device, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBaysPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableDeviceBay writableDeviceBay = null;
        DeviceBay response = api.dcimDeviceBaysPartialUpdate(id, writableDeviceBay);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBaysReadTest() throws ApiException {
        Integer id = null;
        DeviceBay response = api.dcimDeviceBaysRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBaysUpdateTest() throws ApiException {
        Integer id = null;
        WritableDeviceBay writableDeviceBay = null;
        DeviceBay response = api.dcimDeviceBaysUpdate(id, writableDeviceBay);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceRolesCreateTest() throws ApiException {
        DeviceRole deviceRole = null;
        DeviceRole response = api.dcimDeviceRolesCreate(deviceRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceRolesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimDeviceRolesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceRolesListTest() throws ApiException {
        String name = null;
        String slug = null;
        String color = null;
        String vmRole = null;
        Integer limit = null;
        Integer offset = null;
        DcimDeviceRolesList200Response response = api.dcimDeviceRolesList(name, slug, color, vmRole, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceRolesPartialUpdateTest() throws ApiException {
        Integer id = null;
        DeviceRole deviceRole = null;
        DeviceRole response = api.dcimDeviceRolesPartialUpdate(id, deviceRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceRolesReadTest() throws ApiException {
        Integer id = null;
        DeviceRole response = api.dcimDeviceRolesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceRolesUpdateTest() throws ApiException {
        Integer id = null;
        DeviceRole deviceRole = null;
        DeviceRole response = api.dcimDeviceRolesUpdate(id, deviceRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceTypesCreateTest() throws ApiException {
        WritableDeviceType writableDeviceType = null;
        DeviceType response = api.dcimDeviceTypesCreate(writableDeviceType);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceTypesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimDeviceTypesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceTypesListTest() throws ApiException {
        String model = null;
        String slug = null;
        String partNumber = null;
        BigDecimal uHeight = null;
        String isFullDepth = null;
        String isConsoleServer = null;
        String isPdu = null;
        String isNetworkDevice = null;
        String subdeviceRole = null;
        String idIn = null;
        String q = null;
        String manufacturerId = null;
        String manufacturer = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        DcimDeviceTypesList200Response response = api.dcimDeviceTypesList(model, slug, partNumber, uHeight, isFullDepth, isConsoleServer, isPdu, isNetworkDevice, subdeviceRole, idIn, q, manufacturerId, manufacturer, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceTypesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableDeviceType writableDeviceType = null;
        DeviceType response = api.dcimDeviceTypesPartialUpdate(id, writableDeviceType);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceTypesReadTest() throws ApiException {
        Integer id = null;
        DeviceType response = api.dcimDeviceTypesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceTypesUpdateTest() throws ApiException {
        Integer id = null;
        WritableDeviceType writableDeviceType = null;
        DeviceType response = api.dcimDeviceTypesUpdate(id, writableDeviceType);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDevicesCreateTest() throws ApiException {
        WritableDevice writableDevice = null;
        Device response = api.dcimDevicesCreate(writableDevice);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDevicesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimDevicesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDevicesListTest() throws ApiException {
        String serial = null;
        BigDecimal position = null;
        String idIn = null;
        String q = null;
        String manufacturerId = null;
        String manufacturer = null;
        String deviceTypeId = null;
        String roleId = null;
        String role = null;
        String tenantId = null;
        String tenant = null;
        String platformId = null;
        String platform = null;
        String name = null;
        String assetTag = null;
        BigDecimal regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String rackGroupId = null;
        String rackId = null;
        String clusterId = null;
        String model = null;
        String status = null;
        String isFullDepth = null;
        String isConsoleServer = null;
        String isPdu = null;
        String isNetworkDevice = null;
        String macAddress = null;
        String hasPrimaryIp = null;
        String virtualChassisId = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        DcimDevicesList200Response response = api.dcimDevicesList(serial, position, idIn, q, manufacturerId, manufacturer, deviceTypeId, roleId, role, tenantId, tenant, platformId, platform, name, assetTag, regionId, region, siteId, site, rackGroupId, rackId, clusterId, model, status, isFullDepth, isConsoleServer, isPdu, isNetworkDevice, macAddress, hasPrimaryIp, virtualChassisId, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * Execute a NAPALM method on a Device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDevicesNapalmTest() throws ApiException {
        Integer id = null;
        Device response = api.dcimDevicesNapalm(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDevicesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableDevice writableDevice = null;
        Device response = api.dcimDevicesPartialUpdate(id, writableDevice);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDevicesReadTest() throws ApiException {
        Integer id = null;
        DeviceWithConfigContext response = api.dcimDevicesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDevicesUpdateTest() throws ApiException {
        Integer id = null;
        WritableDevice writableDevice = null;
        Device response = api.dcimDevicesUpdate(id, writableDevice);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceConnectionsCreateTest() throws ApiException {
        WritableInterfaceConnection writableInterfaceConnection = null;
        InterfaceConnection response = api.dcimInterfaceConnectionsCreate(writableInterfaceConnection);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceConnectionsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimInterfaceConnectionsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceConnectionsListTest() throws ApiException {
        String connectionStatus = null;
        String site = null;
        String device = null;
        Integer limit = null;
        Integer offset = null;
        DcimInterfaceConnectionsList200Response response = api.dcimInterfaceConnectionsList(connectionStatus, site, device, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceConnectionsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableInterfaceConnection writableInterfaceConnection = null;
        InterfaceConnection response = api.dcimInterfaceConnectionsPartialUpdate(id, writableInterfaceConnection);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceConnectionsReadTest() throws ApiException {
        Integer id = null;
        InterfaceConnection response = api.dcimInterfaceConnectionsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceConnectionsUpdateTest() throws ApiException {
        Integer id = null;
        WritableInterfaceConnection writableInterfaceConnection = null;
        InterfaceConnection response = api.dcimInterfaceConnectionsUpdate(id, writableInterfaceConnection);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceTemplatesCreateTest() throws ApiException {
        WritableInterfaceTemplate writableInterfaceTemplate = null;
        InterfaceTemplate response = api.dcimInterfaceTemplatesCreate(writableInterfaceTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimInterfaceTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceTemplatesListTest() throws ApiException {
        String name = null;
        String formFactor = null;
        String mgmtOnly = null;
        String devicetypeId = null;
        Integer limit = null;
        Integer offset = null;
        DcimInterfaceTemplatesList200Response response = api.dcimInterfaceTemplatesList(name, formFactor, mgmtOnly, devicetypeId, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableInterfaceTemplate writableInterfaceTemplate = null;
        InterfaceTemplate response = api.dcimInterfaceTemplatesPartialUpdate(id, writableInterfaceTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceTemplatesReadTest() throws ApiException {
        Integer id = null;
        InterfaceTemplate response = api.dcimInterfaceTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        WritableInterfaceTemplate writableInterfaceTemplate = null;
        InterfaceTemplate response = api.dcimInterfaceTemplatesUpdate(id, writableInterfaceTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfacesCreateTest() throws ApiException {
        WritableInterface writableInterface = null;
        ModelInterface response = api.dcimInterfacesCreate(writableInterface);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfacesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimInterfacesDelete(id);
        // TODO: test validations
    }

    /**
     * A convenience method for rendering graphs for a particular interface.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfacesGraphsTest() throws ApiException {
        Integer id = null;
        ModelInterface response = api.dcimInterfacesGraphs(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfacesListTest() throws ApiException {
        String name = null;
        String enabled = null;
        BigDecimal mtu = null;
        String mgmtOnly = null;
        String device = null;
        BigDecimal deviceId = null;
        String type = null;
        String lagId = null;
        String macAddress = null;
        String tag = null;
        String vlanId = null;
        String vlan = null;
        String formFactor = null;
        Integer limit = null;
        Integer offset = null;
        DcimInterfacesList200Response response = api.dcimInterfacesList(name, enabled, mtu, mgmtOnly, device, deviceId, type, lagId, macAddress, tag, vlanId, vlan, formFactor, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfacesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableInterface writableInterface = null;
        ModelInterface response = api.dcimInterfacesPartialUpdate(id, writableInterface);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfacesReadTest() throws ApiException {
        Integer id = null;
        ModelInterface response = api.dcimInterfacesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfacesUpdateTest() throws ApiException {
        Integer id = null;
        WritableInterface writableInterface = null;
        ModelInterface response = api.dcimInterfacesUpdate(id, writableInterface);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInventoryItemsCreateTest() throws ApiException {
        WritableInventoryItem writableInventoryItem = null;
        InventoryItem response = api.dcimInventoryItemsCreate(writableInventoryItem);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInventoryItemsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimInventoryItemsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInventoryItemsListTest() throws ApiException {
        String name = null;
        String partId = null;
        String serial = null;
        String assetTag = null;
        String discovered = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String q = null;
        String parentId = null;
        String manufacturerId = null;
        String manufacturer = null;
        Integer limit = null;
        Integer offset = null;
        DcimInventoryItemsList200Response response = api.dcimInventoryItemsList(name, partId, serial, assetTag, discovered, deviceId, device, tag, q, parentId, manufacturerId, manufacturer, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInventoryItemsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableInventoryItem writableInventoryItem = null;
        InventoryItem response = api.dcimInventoryItemsPartialUpdate(id, writableInventoryItem);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInventoryItemsReadTest() throws ApiException {
        Integer id = null;
        InventoryItem response = api.dcimInventoryItemsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInventoryItemsUpdateTest() throws ApiException {
        Integer id = null;
        WritableInventoryItem writableInventoryItem = null;
        InventoryItem response = api.dcimInventoryItemsUpdate(id, writableInventoryItem);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimManufacturersCreateTest() throws ApiException {
        Manufacturer manufacturer = null;
        Manufacturer response = api.dcimManufacturersCreate(manufacturer);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimManufacturersDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimManufacturersDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimManufacturersListTest() throws ApiException {
        String name = null;
        String slug = null;
        Integer limit = null;
        Integer offset = null;
        DcimManufacturersList200Response response = api.dcimManufacturersList(name, slug, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimManufacturersPartialUpdateTest() throws ApiException {
        Integer id = null;
        Manufacturer manufacturer = null;
        Manufacturer response = api.dcimManufacturersPartialUpdate(id, manufacturer);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimManufacturersReadTest() throws ApiException {
        Integer id = null;
        Manufacturer response = api.dcimManufacturersRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimManufacturersUpdateTest() throws ApiException {
        Integer id = null;
        Manufacturer manufacturer = null;
        Manufacturer response = api.dcimManufacturersUpdate(id, manufacturer);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPlatformsCreateTest() throws ApiException {
        WritablePlatform writablePlatform = null;
        Platform response = api.dcimPlatformsCreate(writablePlatform);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPlatformsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimPlatformsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPlatformsListTest() throws ApiException {
        String name = null;
        String slug = null;
        String manufacturerId = null;
        String manufacturer = null;
        Integer limit = null;
        Integer offset = null;
        DcimPlatformsList200Response response = api.dcimPlatformsList(name, slug, manufacturerId, manufacturer, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPlatformsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritablePlatform writablePlatform = null;
        Platform response = api.dcimPlatformsPartialUpdate(id, writablePlatform);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPlatformsReadTest() throws ApiException {
        Integer id = null;
        Platform response = api.dcimPlatformsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPlatformsUpdateTest() throws ApiException {
        Integer id = null;
        WritablePlatform writablePlatform = null;
        Platform response = api.dcimPlatformsUpdate(id, writablePlatform);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerConnectionsListTest() throws ApiException {
        String name = null;
        String connectionStatus = null;
        String site = null;
        String device = null;
        Integer limit = null;
        Integer offset = null;
        DcimPowerConnectionsList200Response response = api.dcimPowerConnectionsList(name, connectionStatus, site, device, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletTemplatesCreateTest() throws ApiException {
        WritablePowerOutletTemplate writablePowerOutletTemplate = null;
        PowerOutletTemplate response = api.dcimPowerOutletTemplatesCreate(writablePowerOutletTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimPowerOutletTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletTemplatesListTest() throws ApiException {
        String name = null;
        String devicetypeId = null;
        Integer limit = null;
        Integer offset = null;
        DcimPowerOutletTemplatesList200Response response = api.dcimPowerOutletTemplatesList(name, devicetypeId, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerOutletTemplate writablePowerOutletTemplate = null;
        PowerOutletTemplate response = api.dcimPowerOutletTemplatesPartialUpdate(id, writablePowerOutletTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletTemplatesReadTest() throws ApiException {
        Integer id = null;
        PowerOutletTemplate response = api.dcimPowerOutletTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerOutletTemplate writablePowerOutletTemplate = null;
        PowerOutletTemplate response = api.dcimPowerOutletTemplatesUpdate(id, writablePowerOutletTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletsCreateTest() throws ApiException {
        WritablePowerOutlet writablePowerOutlet = null;
        PowerOutlet response = api.dcimPowerOutletsCreate(writablePowerOutlet);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimPowerOutletsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletsListTest() throws ApiException {
        String name = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        DcimPowerOutletsList200Response response = api.dcimPowerOutletsList(name, deviceId, device, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerOutlet writablePowerOutlet = null;
        PowerOutlet response = api.dcimPowerOutletsPartialUpdate(id, writablePowerOutlet);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletsReadTest() throws ApiException {
        Integer id = null;
        PowerOutlet response = api.dcimPowerOutletsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletsUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerOutlet writablePowerOutlet = null;
        PowerOutlet response = api.dcimPowerOutletsUpdate(id, writablePowerOutlet);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortTemplatesCreateTest() throws ApiException {
        WritablePowerPortTemplate writablePowerPortTemplate = null;
        PowerPortTemplate response = api.dcimPowerPortTemplatesCreate(writablePowerPortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimPowerPortTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortTemplatesListTest() throws ApiException {
        String name = null;
        String devicetypeId = null;
        Integer limit = null;
        Integer offset = null;
        DcimPowerPortTemplatesList200Response response = api.dcimPowerPortTemplatesList(name, devicetypeId, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerPortTemplate writablePowerPortTemplate = null;
        PowerPortTemplate response = api.dcimPowerPortTemplatesPartialUpdate(id, writablePowerPortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortTemplatesReadTest() throws ApiException {
        Integer id = null;
        PowerPortTemplate response = api.dcimPowerPortTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerPortTemplate writablePowerPortTemplate = null;
        PowerPortTemplate response = api.dcimPowerPortTemplatesUpdate(id, writablePowerPortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortsCreateTest() throws ApiException {
        WritablePowerPort writablePowerPort = null;
        PowerPort response = api.dcimPowerPortsCreate(writablePowerPort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimPowerPortsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortsListTest() throws ApiException {
        String name = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        DcimPowerConnectionsList200Response response = api.dcimPowerPortsList(name, deviceId, device, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerPort writablePowerPort = null;
        PowerPort response = api.dcimPowerPortsPartialUpdate(id, writablePowerPort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortsReadTest() throws ApiException {
        Integer id = null;
        PowerPort response = api.dcimPowerPortsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortsUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerPort writablePowerPort = null;
        PowerPort response = api.dcimPowerPortsUpdate(id, writablePowerPort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackGroupsCreateTest() throws ApiException {
        WritableRackGroup writableRackGroup = null;
        RackGroup response = api.dcimRackGroupsCreate(writableRackGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackGroupsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimRackGroupsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackGroupsListTest() throws ApiException {
        String siteId = null;
        String name = null;
        String slug = null;
        String q = null;
        String site = null;
        Integer limit = null;
        Integer offset = null;
        DcimRackGroupsList200Response response = api.dcimRackGroupsList(siteId, name, slug, q, site, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackGroupsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableRackGroup writableRackGroup = null;
        RackGroup response = api.dcimRackGroupsPartialUpdate(id, writableRackGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackGroupsReadTest() throws ApiException {
        Integer id = null;
        RackGroup response = api.dcimRackGroupsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackGroupsUpdateTest() throws ApiException {
        Integer id = null;
        WritableRackGroup writableRackGroup = null;
        RackGroup response = api.dcimRackGroupsUpdate(id, writableRackGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackReservationsCreateTest() throws ApiException {
        WritableRackReservation writableRackReservation = null;
        RackReservation response = api.dcimRackReservationsCreate(writableRackReservation);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackReservationsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimRackReservationsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackReservationsListTest() throws ApiException {
        String created = null;
        String idIn = null;
        String q = null;
        String rackId = null;
        String siteId = null;
        String site = null;
        String groupId = null;
        String group = null;
        String tenantId = null;
        String tenant = null;
        String userId = null;
        String user = null;
        Integer limit = null;
        Integer offset = null;
        DcimRackReservationsList200Response response = api.dcimRackReservationsList(created, idIn, q, rackId, siteId, site, groupId, group, tenantId, tenant, userId, user, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackReservationsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableRackReservation writableRackReservation = null;
        RackReservation response = api.dcimRackReservationsPartialUpdate(id, writableRackReservation);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackReservationsReadTest() throws ApiException {
        Integer id = null;
        RackReservation response = api.dcimRackReservationsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackReservationsUpdateTest() throws ApiException {
        Integer id = null;
        WritableRackReservation writableRackReservation = null;
        RackReservation response = api.dcimRackReservationsUpdate(id, writableRackReservation);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackRolesCreateTest() throws ApiException {
        RackRole rackRole = null;
        RackRole response = api.dcimRackRolesCreate(rackRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackRolesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimRackRolesDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackRolesListTest() throws ApiException {
        String name = null;
        String slug = null;
        String color = null;
        Integer limit = null;
        Integer offset = null;
        DcimRackRolesList200Response response = api.dcimRackRolesList(name, slug, color, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackRolesPartialUpdateTest() throws ApiException {
        Integer id = null;
        RackRole rackRole = null;
        RackRole response = api.dcimRackRolesPartialUpdate(id, rackRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackRolesReadTest() throws ApiException {
        Integer id = null;
        RackRole response = api.dcimRackRolesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackRolesUpdateTest() throws ApiException {
        Integer id = null;
        RackRole rackRole = null;
        RackRole response = api.dcimRackRolesUpdate(id, rackRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRacksCreateTest() throws ApiException {
        WritableRack writableRack = null;
        Rack response = api.dcimRacksCreate(writableRack);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRacksDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimRacksDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRacksListTest() throws ApiException {
        String name = null;
        String serial = null;
        String type = null;
        String width = null;
        BigDecimal uHeight = null;
        String descUnits = null;
        String idIn = null;
        String q = null;
        String facilityId = null;
        String siteId = null;
        String site = null;
        String groupId = null;
        String group = null;
        String tenantId = null;
        String tenant = null;
        String roleId = null;
        String role = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        DcimRacksList200Response response = api.dcimRacksList(name, serial, type, width, uHeight, descUnits, idIn, q, facilityId, siteId, site, groupId, group, tenantId, tenant, roleId, role, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRacksPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableRack writableRack = null;
        Rack response = api.dcimRacksPartialUpdate(id, writableRack);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRacksReadTest() throws ApiException {
        Integer id = null;
        Rack response = api.dcimRacksRead(id);
        // TODO: test validations
    }

    /**
     * List rack units (by rack)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRacksUnitsTest() throws ApiException {
        Integer id = null;
        Rack response = api.dcimRacksUnits(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRacksUpdateTest() throws ApiException {
        Integer id = null;
        WritableRack writableRack = null;
        Rack response = api.dcimRacksUpdate(id, writableRack);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRegionsCreateTest() throws ApiException {
        WritableRegion writableRegion = null;
        Region response = api.dcimRegionsCreate(writableRegion);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRegionsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimRegionsDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRegionsListTest() throws ApiException {
        String name = null;
        String slug = null;
        String q = null;
        String parentId = null;
        String parent = null;
        Integer limit = null;
        Integer offset = null;
        DcimRegionsList200Response response = api.dcimRegionsList(name, slug, q, parentId, parent, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRegionsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableRegion writableRegion = null;
        Region response = api.dcimRegionsPartialUpdate(id, writableRegion);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRegionsReadTest() throws ApiException {
        Integer id = null;
        Region response = api.dcimRegionsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRegionsUpdateTest() throws ApiException {
        Integer id = null;
        WritableRegion writableRegion = null;
        Region response = api.dcimRegionsUpdate(id, writableRegion);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimSitesCreateTest() throws ApiException {
        WritableSite writableSite = null;
        Site response = api.dcimSitesCreate(writableSite);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimSitesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimSitesDelete(id);
        // TODO: test validations
    }

    /**
     * A convenience method for rendering graphs for a particular site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimSitesGraphsTest() throws ApiException {
        Integer id = null;
        Site response = api.dcimSitesGraphs(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimSitesListTest() throws ApiException {
        String q = null;
        String name = null;
        String slug = null;
        String facility = null;
        BigDecimal asn = null;
        String contactName = null;
        String contactPhone = null;
        String contactEmail = null;
        String idIn = null;
        String status = null;
        String regionId = null;
        String region = null;
        String tenantId = null;
        String tenant = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        DcimSitesList200Response response = api.dcimSitesList(q, name, slug, facility, asn, contactName, contactPhone, contactEmail, idIn, status, regionId, region, tenantId, tenant, tag, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimSitesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableSite writableSite = null;
        Site response = api.dcimSitesPartialUpdate(id, writableSite);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimSitesReadTest() throws ApiException {
        Integer id = null;
        Site response = api.dcimSitesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimSitesUpdateTest() throws ApiException {
        Integer id = null;
        WritableSite writableSite = null;
        Site response = api.dcimSitesUpdate(id, writableSite);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimVirtualChassisCreateTest() throws ApiException {
        WritableVirtualChassis writableVirtualChassis = null;
        VirtualChassis response = api.dcimVirtualChassisCreate(writableVirtualChassis);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimVirtualChassisDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimVirtualChassisDelete(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimVirtualChassisListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        DcimVirtualChassisList200Response response = api.dcimVirtualChassisList(limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimVirtualChassisPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableVirtualChassis writableVirtualChassis = null;
        VirtualChassis response = api.dcimVirtualChassisPartialUpdate(id, writableVirtualChassis);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimVirtualChassisReadTest() throws ApiException {
        Integer id = null;
        VirtualChassis response = api.dcimVirtualChassisRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimVirtualChassisUpdateTest() throws ApiException {
        Integer id = null;
        WritableVirtualChassis writableVirtualChassis = null;
        VirtualChassis response = api.dcimVirtualChassisUpdate(id, writableVirtualChassis);
        // TODO: test validations
    }

}
