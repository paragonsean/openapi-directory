/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Aggregate;
import java.math.BigDecimal;
import org.openapitools.client.model.IPAddress;
import org.openapitools.client.model.IpamAggregatesList200Response;
import org.openapitools.client.model.IpamIpAddressesList200Response;
import org.openapitools.client.model.IpamPrefixesList200Response;
import org.openapitools.client.model.IpamRirsList200Response;
import org.openapitools.client.model.IpamRolesList200Response;
import org.openapitools.client.model.IpamServicesList200Response;
import org.openapitools.client.model.IpamVlanGroupsList200Response;
import org.openapitools.client.model.IpamVlansList200Response;
import org.openapitools.client.model.IpamVrfsList200Response;
import org.openapitools.client.model.Prefix;
import org.openapitools.client.model.RIR;
import org.openapitools.client.model.Role;
import org.openapitools.client.model.Service;
import org.openapitools.client.model.VLAN;
import org.openapitools.client.model.VLANGroup;
import org.openapitools.client.model.VRF;
import org.openapitools.client.model.WritableAggregate;
import org.openapitools.client.model.WritableIPAddress;
import org.openapitools.client.model.WritablePrefix;
import org.openapitools.client.model.WritableService;
import org.openapitools.client.model.WritableVLAN;
import org.openapitools.client.model.WritableVLANGroup;
import org.openapitools.client.model.WritableVRF;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IpamApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IpamApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IpamApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ipamAggregatesCreate
     * @param writableAggregate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamAggregatesCreateCall(WritableAggregate writableAggregate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableAggregate;

        // create path and map variables
        String localVarPath = "/ipam/aggregates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAggregatesCreateValidateBeforeCall(WritableAggregate writableAggregate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableAggregate' is set
        if (writableAggregate == null) {
            throw new ApiException("Missing the required parameter 'writableAggregate' when calling ipamAggregatesCreate(Async)");
        }

        return ipamAggregatesCreateCall(writableAggregate, _callback);

    }

    /**
     * 
     * 
     * @param writableAggregate  (required)
     * @return Aggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Aggregate ipamAggregatesCreate(WritableAggregate writableAggregate) throws ApiException {
        ApiResponse<Aggregate> localVarResp = ipamAggregatesCreateWithHttpInfo(writableAggregate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableAggregate  (required)
     * @return ApiResponse&lt;Aggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Aggregate> ipamAggregatesCreateWithHttpInfo(WritableAggregate writableAggregate) throws ApiException {
        okhttp3.Call localVarCall = ipamAggregatesCreateValidateBeforeCall(writableAggregate, null);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableAggregate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamAggregatesCreateAsync(WritableAggregate writableAggregate, final ApiCallback<Aggregate> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamAggregatesCreateValidateBeforeCall(writableAggregate, _callback);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamAggregatesDelete
     * @param id A unique integer value identifying this aggregate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamAggregatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/aggregates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAggregatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamAggregatesDelete(Async)");
        }

        return ipamAggregatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this aggregate. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ipamAggregatesDelete(Integer id) throws ApiException {
        ipamAggregatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this aggregate. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ipamAggregatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamAggregatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this aggregate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamAggregatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamAggregatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamAggregatesList
     * @param family  (optional)
     * @param dateAdded  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param rirId  (optional)
     * @param rir  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamAggregatesListCall(String family, String dateAdded, String idIn, String q, String rirId, String rir, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/aggregates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (family != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("family", family));
        }

        if (dateAdded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_added", dateAdded));
        }

        if (idIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__in", idIn));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (rirId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rir_id", rirId));
        }

        if (rir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rir", rir));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAggregatesListValidateBeforeCall(String family, String dateAdded, String idIn, String q, String rirId, String rir, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return ipamAggregatesListCall(family, dateAdded, idIn, q, rirId, rir, tag, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param family  (optional)
     * @param dateAdded  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param rirId  (optional)
     * @param rir  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return IpamAggregatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IpamAggregatesList200Response ipamAggregatesList(String family, String dateAdded, String idIn, String q, String rirId, String rir, String tag, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamAggregatesList200Response> localVarResp = ipamAggregatesListWithHttpInfo(family, dateAdded, idIn, q, rirId, rir, tag, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param family  (optional)
     * @param dateAdded  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param rirId  (optional)
     * @param rir  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;IpamAggregatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpamAggregatesList200Response> ipamAggregatesListWithHttpInfo(String family, String dateAdded, String idIn, String q, String rirId, String rir, String tag, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamAggregatesListValidateBeforeCall(family, dateAdded, idIn, q, rirId, rir, tag, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamAggregatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param family  (optional)
     * @param dateAdded  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param rirId  (optional)
     * @param rir  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamAggregatesListAsync(String family, String dateAdded, String idIn, String q, String rirId, String rir, String tag, Integer limit, Integer offset, final ApiCallback<IpamAggregatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamAggregatesListValidateBeforeCall(family, dateAdded, idIn, q, rirId, rir, tag, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamAggregatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamAggregatesPartialUpdate
     * @param id A unique integer value identifying this aggregate. (required)
     * @param writableAggregate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamAggregatesPartialUpdateCall(Integer id, WritableAggregate writableAggregate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableAggregate;

        // create path and map variables
        String localVarPath = "/ipam/aggregates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAggregatesPartialUpdateValidateBeforeCall(Integer id, WritableAggregate writableAggregate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamAggregatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableAggregate' is set
        if (writableAggregate == null) {
            throw new ApiException("Missing the required parameter 'writableAggregate' when calling ipamAggregatesPartialUpdate(Async)");
        }

        return ipamAggregatesPartialUpdateCall(id, writableAggregate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this aggregate. (required)
     * @param writableAggregate  (required)
     * @return Aggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Aggregate ipamAggregatesPartialUpdate(Integer id, WritableAggregate writableAggregate) throws ApiException {
        ApiResponse<Aggregate> localVarResp = ipamAggregatesPartialUpdateWithHttpInfo(id, writableAggregate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this aggregate. (required)
     * @param writableAggregate  (required)
     * @return ApiResponse&lt;Aggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Aggregate> ipamAggregatesPartialUpdateWithHttpInfo(Integer id, WritableAggregate writableAggregate) throws ApiException {
        okhttp3.Call localVarCall = ipamAggregatesPartialUpdateValidateBeforeCall(id, writableAggregate, null);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this aggregate. (required)
     * @param writableAggregate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamAggregatesPartialUpdateAsync(Integer id, WritableAggregate writableAggregate, final ApiCallback<Aggregate> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamAggregatesPartialUpdateValidateBeforeCall(id, writableAggregate, _callback);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamAggregatesRead
     * @param id A unique integer value identifying this aggregate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamAggregatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/aggregates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAggregatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamAggregatesRead(Async)");
        }

        return ipamAggregatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this aggregate. (required)
     * @return Aggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Aggregate ipamAggregatesRead(Integer id) throws ApiException {
        ApiResponse<Aggregate> localVarResp = ipamAggregatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this aggregate. (required)
     * @return ApiResponse&lt;Aggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Aggregate> ipamAggregatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamAggregatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this aggregate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamAggregatesReadAsync(Integer id, final ApiCallback<Aggregate> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamAggregatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamAggregatesUpdate
     * @param id A unique integer value identifying this aggregate. (required)
     * @param writableAggregate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamAggregatesUpdateCall(Integer id, WritableAggregate writableAggregate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableAggregate;

        // create path and map variables
        String localVarPath = "/ipam/aggregates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAggregatesUpdateValidateBeforeCall(Integer id, WritableAggregate writableAggregate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamAggregatesUpdate(Async)");
        }

        // verify the required parameter 'writableAggregate' is set
        if (writableAggregate == null) {
            throw new ApiException("Missing the required parameter 'writableAggregate' when calling ipamAggregatesUpdate(Async)");
        }

        return ipamAggregatesUpdateCall(id, writableAggregate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this aggregate. (required)
     * @param writableAggregate  (required)
     * @return Aggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Aggregate ipamAggregatesUpdate(Integer id, WritableAggregate writableAggregate) throws ApiException {
        ApiResponse<Aggregate> localVarResp = ipamAggregatesUpdateWithHttpInfo(id, writableAggregate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this aggregate. (required)
     * @param writableAggregate  (required)
     * @return ApiResponse&lt;Aggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Aggregate> ipamAggregatesUpdateWithHttpInfo(Integer id, WritableAggregate writableAggregate) throws ApiException {
        okhttp3.Call localVarCall = ipamAggregatesUpdateValidateBeforeCall(id, writableAggregate, null);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this aggregate. (required)
     * @param writableAggregate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamAggregatesUpdateAsync(Integer id, WritableAggregate writableAggregate, final ApiCallback<Aggregate> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamAggregatesUpdateValidateBeforeCall(id, writableAggregate, _callback);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamChoicesList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamChoicesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/_choices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamChoicesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return ipamChoicesListCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ipamChoicesList() throws ApiException {
        ipamChoicesListWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ipamChoicesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamChoicesListValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamChoicesListAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamChoicesListValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamChoicesRead
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamChoicesReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/_choices/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamChoicesReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamChoicesRead(Async)");
        }

        return ipamChoicesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ipamChoicesRead(String id) throws ApiException {
        ipamChoicesReadWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ipamChoicesReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = ipamChoicesReadValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamChoicesReadAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamChoicesReadValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamIpAddressesCreate
     * @param writableIPAddress  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamIpAddressesCreateCall(WritableIPAddress writableIPAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableIPAddress;

        // create path and map variables
        String localVarPath = "/ipam/ip-addresses/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpAddressesCreateValidateBeforeCall(WritableIPAddress writableIPAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableIPAddress' is set
        if (writableIPAddress == null) {
            throw new ApiException("Missing the required parameter 'writableIPAddress' when calling ipamIpAddressesCreate(Async)");
        }

        return ipamIpAddressesCreateCall(writableIPAddress, _callback);

    }

    /**
     * 
     * 
     * @param writableIPAddress  (required)
     * @return IPAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IPAddress ipamIpAddressesCreate(WritableIPAddress writableIPAddress) throws ApiException {
        ApiResponse<IPAddress> localVarResp = ipamIpAddressesCreateWithHttpInfo(writableIPAddress);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableIPAddress  (required)
     * @return ApiResponse&lt;IPAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IPAddress> ipamIpAddressesCreateWithHttpInfo(WritableIPAddress writableIPAddress) throws ApiException {
        okhttp3.Call localVarCall = ipamIpAddressesCreateValidateBeforeCall(writableIPAddress, null);
        Type localVarReturnType = new TypeToken<IPAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableIPAddress  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamIpAddressesCreateAsync(WritableIPAddress writableIPAddress, final ApiCallback<IPAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamIpAddressesCreateValidateBeforeCall(writableIPAddress, _callback);
        Type localVarReturnType = new TypeToken<IPAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamIpAddressesDelete
     * @param id A unique integer value identifying this IP address. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamIpAddressesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/ip-addresses/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpAddressesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamIpAddressesDelete(Async)");
        }

        return ipamIpAddressesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this IP address. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ipamIpAddressesDelete(Integer id) throws ApiException {
        ipamIpAddressesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this IP address. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ipamIpAddressesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamIpAddressesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this IP address. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamIpAddressesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamIpAddressesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamIpAddressesList
     * @param family  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param parent  (optional)
     * @param address  (optional)
     * @param maskLength  (optional)
     * @param vrfId  (optional)
     * @param vrf  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param device  (optional)
     * @param deviceId  (optional)
     * @param virtualMachineId  (optional)
     * @param virtualMachine  (optional)
     * @param interfaceId  (optional)
     * @param status  (optional)
     * @param role  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamIpAddressesListCall(String family, String idIn, String q, String parent, String address, BigDecimal maskLength, String vrfId, String vrf, String tenantId, String tenant, String device, BigDecimal deviceId, String virtualMachineId, String virtualMachine, String interfaceId, String status, String role, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/ip-addresses/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (family != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("family", family));
        }

        if (idIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__in", idIn));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (maskLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mask_length", maskLength));
        }

        if (vrfId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf_id", vrfId));
        }

        if (vrf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf", vrf));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (virtualMachineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine_id", virtualMachineId));
        }

        if (virtualMachine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine", virtualMachine));
        }

        if (interfaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_id", interfaceId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpAddressesListValidateBeforeCall(String family, String idIn, String q, String parent, String address, BigDecimal maskLength, String vrfId, String vrf, String tenantId, String tenant, String device, BigDecimal deviceId, String virtualMachineId, String virtualMachine, String interfaceId, String status, String role, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return ipamIpAddressesListCall(family, idIn, q, parent, address, maskLength, vrfId, vrf, tenantId, tenant, device, deviceId, virtualMachineId, virtualMachine, interfaceId, status, role, tag, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param family  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param parent  (optional)
     * @param address  (optional)
     * @param maskLength  (optional)
     * @param vrfId  (optional)
     * @param vrf  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param device  (optional)
     * @param deviceId  (optional)
     * @param virtualMachineId  (optional)
     * @param virtualMachine  (optional)
     * @param interfaceId  (optional)
     * @param status  (optional)
     * @param role  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return IpamIpAddressesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IpamIpAddressesList200Response ipamIpAddressesList(String family, String idIn, String q, String parent, String address, BigDecimal maskLength, String vrfId, String vrf, String tenantId, String tenant, String device, BigDecimal deviceId, String virtualMachineId, String virtualMachine, String interfaceId, String status, String role, String tag, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamIpAddressesList200Response> localVarResp = ipamIpAddressesListWithHttpInfo(family, idIn, q, parent, address, maskLength, vrfId, vrf, tenantId, tenant, device, deviceId, virtualMachineId, virtualMachine, interfaceId, status, role, tag, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param family  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param parent  (optional)
     * @param address  (optional)
     * @param maskLength  (optional)
     * @param vrfId  (optional)
     * @param vrf  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param device  (optional)
     * @param deviceId  (optional)
     * @param virtualMachineId  (optional)
     * @param virtualMachine  (optional)
     * @param interfaceId  (optional)
     * @param status  (optional)
     * @param role  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;IpamIpAddressesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpamIpAddressesList200Response> ipamIpAddressesListWithHttpInfo(String family, String idIn, String q, String parent, String address, BigDecimal maskLength, String vrfId, String vrf, String tenantId, String tenant, String device, BigDecimal deviceId, String virtualMachineId, String virtualMachine, String interfaceId, String status, String role, String tag, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamIpAddressesListValidateBeforeCall(family, idIn, q, parent, address, maskLength, vrfId, vrf, tenantId, tenant, device, deviceId, virtualMachineId, virtualMachine, interfaceId, status, role, tag, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamIpAddressesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param family  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param parent  (optional)
     * @param address  (optional)
     * @param maskLength  (optional)
     * @param vrfId  (optional)
     * @param vrf  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param device  (optional)
     * @param deviceId  (optional)
     * @param virtualMachineId  (optional)
     * @param virtualMachine  (optional)
     * @param interfaceId  (optional)
     * @param status  (optional)
     * @param role  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamIpAddressesListAsync(String family, String idIn, String q, String parent, String address, BigDecimal maskLength, String vrfId, String vrf, String tenantId, String tenant, String device, BigDecimal deviceId, String virtualMachineId, String virtualMachine, String interfaceId, String status, String role, String tag, Integer limit, Integer offset, final ApiCallback<IpamIpAddressesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamIpAddressesListValidateBeforeCall(family, idIn, q, parent, address, maskLength, vrfId, vrf, tenantId, tenant, device, deviceId, virtualMachineId, virtualMachine, interfaceId, status, role, tag, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamIpAddressesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamIpAddressesPartialUpdate
     * @param id A unique integer value identifying this IP address. (required)
     * @param writableIPAddress  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamIpAddressesPartialUpdateCall(Integer id, WritableIPAddress writableIPAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableIPAddress;

        // create path and map variables
        String localVarPath = "/ipam/ip-addresses/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpAddressesPartialUpdateValidateBeforeCall(Integer id, WritableIPAddress writableIPAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamIpAddressesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableIPAddress' is set
        if (writableIPAddress == null) {
            throw new ApiException("Missing the required parameter 'writableIPAddress' when calling ipamIpAddressesPartialUpdate(Async)");
        }

        return ipamIpAddressesPartialUpdateCall(id, writableIPAddress, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this IP address. (required)
     * @param writableIPAddress  (required)
     * @return IPAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IPAddress ipamIpAddressesPartialUpdate(Integer id, WritableIPAddress writableIPAddress) throws ApiException {
        ApiResponse<IPAddress> localVarResp = ipamIpAddressesPartialUpdateWithHttpInfo(id, writableIPAddress);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this IP address. (required)
     * @param writableIPAddress  (required)
     * @return ApiResponse&lt;IPAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IPAddress> ipamIpAddressesPartialUpdateWithHttpInfo(Integer id, WritableIPAddress writableIPAddress) throws ApiException {
        okhttp3.Call localVarCall = ipamIpAddressesPartialUpdateValidateBeforeCall(id, writableIPAddress, null);
        Type localVarReturnType = new TypeToken<IPAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this IP address. (required)
     * @param writableIPAddress  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamIpAddressesPartialUpdateAsync(Integer id, WritableIPAddress writableIPAddress, final ApiCallback<IPAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamIpAddressesPartialUpdateValidateBeforeCall(id, writableIPAddress, _callback);
        Type localVarReturnType = new TypeToken<IPAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamIpAddressesRead
     * @param id A unique integer value identifying this IP address. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamIpAddressesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/ip-addresses/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpAddressesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamIpAddressesRead(Async)");
        }

        return ipamIpAddressesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this IP address. (required)
     * @return IPAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IPAddress ipamIpAddressesRead(Integer id) throws ApiException {
        ApiResponse<IPAddress> localVarResp = ipamIpAddressesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this IP address. (required)
     * @return ApiResponse&lt;IPAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IPAddress> ipamIpAddressesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamIpAddressesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<IPAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this IP address. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamIpAddressesReadAsync(Integer id, final ApiCallback<IPAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamIpAddressesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<IPAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamIpAddressesUpdate
     * @param id A unique integer value identifying this IP address. (required)
     * @param writableIPAddress  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamIpAddressesUpdateCall(Integer id, WritableIPAddress writableIPAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableIPAddress;

        // create path and map variables
        String localVarPath = "/ipam/ip-addresses/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpAddressesUpdateValidateBeforeCall(Integer id, WritableIPAddress writableIPAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamIpAddressesUpdate(Async)");
        }

        // verify the required parameter 'writableIPAddress' is set
        if (writableIPAddress == null) {
            throw new ApiException("Missing the required parameter 'writableIPAddress' when calling ipamIpAddressesUpdate(Async)");
        }

        return ipamIpAddressesUpdateCall(id, writableIPAddress, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this IP address. (required)
     * @param writableIPAddress  (required)
     * @return IPAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IPAddress ipamIpAddressesUpdate(Integer id, WritableIPAddress writableIPAddress) throws ApiException {
        ApiResponse<IPAddress> localVarResp = ipamIpAddressesUpdateWithHttpInfo(id, writableIPAddress);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this IP address. (required)
     * @param writableIPAddress  (required)
     * @return ApiResponse&lt;IPAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IPAddress> ipamIpAddressesUpdateWithHttpInfo(Integer id, WritableIPAddress writableIPAddress) throws ApiException {
        okhttp3.Call localVarCall = ipamIpAddressesUpdateValidateBeforeCall(id, writableIPAddress, null);
        Type localVarReturnType = new TypeToken<IPAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this IP address. (required)
     * @param writableIPAddress  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamIpAddressesUpdateAsync(Integer id, WritableIPAddress writableIPAddress, final ApiCallback<IPAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamIpAddressesUpdateValidateBeforeCall(id, writableIPAddress, _callback);
        Type localVarReturnType = new TypeToken<IPAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamPrefixesAvailableIpsCreate
     * @param id A unique integer value identifying this prefix. (required)
     * @param writablePrefix  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesAvailableIpsCreateCall(Integer id, WritablePrefix writablePrefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePrefix;

        // create path and map variables
        String localVarPath = "/ipam/prefixes/{id}/available-ips/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesAvailableIpsCreateValidateBeforeCall(Integer id, WritablePrefix writablePrefix, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamPrefixesAvailableIpsCreate(Async)");
        }

        // verify the required parameter 'writablePrefix' is set
        if (writablePrefix == null) {
            throw new ApiException("Missing the required parameter 'writablePrefix' when calling ipamPrefixesAvailableIpsCreate(Async)");
        }

        return ipamPrefixesAvailableIpsCreateCall(id, writablePrefix, _callback);

    }

    /**
     * 
     * A convenience method for returning available IP addresses within a prefix. By default, the number of IPs returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed, however results will not be paginated.
     * @param id A unique integer value identifying this prefix. (required)
     * @param writablePrefix  (required)
     * @return Prefix
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Prefix ipamPrefixesAvailableIpsCreate(Integer id, WritablePrefix writablePrefix) throws ApiException {
        ApiResponse<Prefix> localVarResp = ipamPrefixesAvailableIpsCreateWithHttpInfo(id, writablePrefix);
        return localVarResp.getData();
    }

    /**
     * 
     * A convenience method for returning available IP addresses within a prefix. By default, the number of IPs returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed, however results will not be paginated.
     * @param id A unique integer value identifying this prefix. (required)
     * @param writablePrefix  (required)
     * @return ApiResponse&lt;Prefix&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prefix> ipamPrefixesAvailableIpsCreateWithHttpInfo(Integer id, WritablePrefix writablePrefix) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesAvailableIpsCreateValidateBeforeCall(id, writablePrefix, null);
        Type localVarReturnType = new TypeToken<Prefix>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A convenience method for returning available IP addresses within a prefix. By default, the number of IPs returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed, however results will not be paginated.
     * @param id A unique integer value identifying this prefix. (required)
     * @param writablePrefix  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesAvailableIpsCreateAsync(Integer id, WritablePrefix writablePrefix, final ApiCallback<Prefix> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamPrefixesAvailableIpsCreateValidateBeforeCall(id, writablePrefix, _callback);
        Type localVarReturnType = new TypeToken<Prefix>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamPrefixesAvailableIpsRead
     * @param id A unique integer value identifying this prefix. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesAvailableIpsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/prefixes/{id}/available-ips/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesAvailableIpsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamPrefixesAvailableIpsRead(Async)");
        }

        return ipamPrefixesAvailableIpsReadCall(id, _callback);

    }

    /**
     * 
     * A convenience method for returning available IP addresses within a prefix. By default, the number of IPs returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed, however results will not be paginated.
     * @param id A unique integer value identifying this prefix. (required)
     * @return Prefix
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Prefix ipamPrefixesAvailableIpsRead(Integer id) throws ApiException {
        ApiResponse<Prefix> localVarResp = ipamPrefixesAvailableIpsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * A convenience method for returning available IP addresses within a prefix. By default, the number of IPs returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed, however results will not be paginated.
     * @param id A unique integer value identifying this prefix. (required)
     * @return ApiResponse&lt;Prefix&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prefix> ipamPrefixesAvailableIpsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesAvailableIpsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Prefix>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A convenience method for returning available IP addresses within a prefix. By default, the number of IPs returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed, however results will not be paginated.
     * @param id A unique integer value identifying this prefix. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesAvailableIpsReadAsync(Integer id, final ApiCallback<Prefix> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamPrefixesAvailableIpsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Prefix>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamPrefixesAvailablePrefixesCreate
     * @param id A unique integer value identifying this prefix. (required)
     * @param writablePrefix  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesAvailablePrefixesCreateCall(Integer id, WritablePrefix writablePrefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePrefix;

        // create path and map variables
        String localVarPath = "/ipam/prefixes/{id}/available-prefixes/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesAvailablePrefixesCreateValidateBeforeCall(Integer id, WritablePrefix writablePrefix, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamPrefixesAvailablePrefixesCreate(Async)");
        }

        // verify the required parameter 'writablePrefix' is set
        if (writablePrefix == null) {
            throw new ApiException("Missing the required parameter 'writablePrefix' when calling ipamPrefixesAvailablePrefixesCreate(Async)");
        }

        return ipamPrefixesAvailablePrefixesCreateCall(id, writablePrefix, _callback);

    }

    /**
     * 
     * A convenience method for returning available child prefixes within a parent.
     * @param id A unique integer value identifying this prefix. (required)
     * @param writablePrefix  (required)
     * @return Prefix
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Prefix ipamPrefixesAvailablePrefixesCreate(Integer id, WritablePrefix writablePrefix) throws ApiException {
        ApiResponse<Prefix> localVarResp = ipamPrefixesAvailablePrefixesCreateWithHttpInfo(id, writablePrefix);
        return localVarResp.getData();
    }

    /**
     * 
     * A convenience method for returning available child prefixes within a parent.
     * @param id A unique integer value identifying this prefix. (required)
     * @param writablePrefix  (required)
     * @return ApiResponse&lt;Prefix&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prefix> ipamPrefixesAvailablePrefixesCreateWithHttpInfo(Integer id, WritablePrefix writablePrefix) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesAvailablePrefixesCreateValidateBeforeCall(id, writablePrefix, null);
        Type localVarReturnType = new TypeToken<Prefix>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A convenience method for returning available child prefixes within a parent.
     * @param id A unique integer value identifying this prefix. (required)
     * @param writablePrefix  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesAvailablePrefixesCreateAsync(Integer id, WritablePrefix writablePrefix, final ApiCallback<Prefix> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamPrefixesAvailablePrefixesCreateValidateBeforeCall(id, writablePrefix, _callback);
        Type localVarReturnType = new TypeToken<Prefix>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamPrefixesAvailablePrefixesRead
     * @param id A unique integer value identifying this prefix. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesAvailablePrefixesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/prefixes/{id}/available-prefixes/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesAvailablePrefixesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamPrefixesAvailablePrefixesRead(Async)");
        }

        return ipamPrefixesAvailablePrefixesReadCall(id, _callback);

    }

    /**
     * 
     * A convenience method for returning available child prefixes within a parent.
     * @param id A unique integer value identifying this prefix. (required)
     * @return Prefix
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Prefix ipamPrefixesAvailablePrefixesRead(Integer id) throws ApiException {
        ApiResponse<Prefix> localVarResp = ipamPrefixesAvailablePrefixesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * A convenience method for returning available child prefixes within a parent.
     * @param id A unique integer value identifying this prefix. (required)
     * @return ApiResponse&lt;Prefix&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prefix> ipamPrefixesAvailablePrefixesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesAvailablePrefixesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Prefix>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A convenience method for returning available child prefixes within a parent.
     * @param id A unique integer value identifying this prefix. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesAvailablePrefixesReadAsync(Integer id, final ApiCallback<Prefix> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamPrefixesAvailablePrefixesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Prefix>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamPrefixesCreate
     * @param writablePrefix  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesCreateCall(WritablePrefix writablePrefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePrefix;

        // create path and map variables
        String localVarPath = "/ipam/prefixes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesCreateValidateBeforeCall(WritablePrefix writablePrefix, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePrefix' is set
        if (writablePrefix == null) {
            throw new ApiException("Missing the required parameter 'writablePrefix' when calling ipamPrefixesCreate(Async)");
        }

        return ipamPrefixesCreateCall(writablePrefix, _callback);

    }

    /**
     * 
     * 
     * @param writablePrefix  (required)
     * @return Prefix
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Prefix ipamPrefixesCreate(WritablePrefix writablePrefix) throws ApiException {
        ApiResponse<Prefix> localVarResp = ipamPrefixesCreateWithHttpInfo(writablePrefix);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePrefix  (required)
     * @return ApiResponse&lt;Prefix&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prefix> ipamPrefixesCreateWithHttpInfo(WritablePrefix writablePrefix) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesCreateValidateBeforeCall(writablePrefix, null);
        Type localVarReturnType = new TypeToken<Prefix>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePrefix  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesCreateAsync(WritablePrefix writablePrefix, final ApiCallback<Prefix> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamPrefixesCreateValidateBeforeCall(writablePrefix, _callback);
        Type localVarReturnType = new TypeToken<Prefix>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamPrefixesDelete
     * @param id A unique integer value identifying this prefix. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/prefixes/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamPrefixesDelete(Async)");
        }

        return ipamPrefixesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this prefix. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ipamPrefixesDelete(Integer id) throws ApiException {
        ipamPrefixesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this prefix. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ipamPrefixesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this prefix. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamPrefixesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamPrefixesList
     * @param family  (optional)
     * @param isPool  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param within  (optional)
     * @param withinInclude  (optional)
     * @param contains  (optional)
     * @param maskLength  (optional)
     * @param vrfId  (optional)
     * @param vrf  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param vlanId  (optional)
     * @param vlanVid  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param status  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesListCall(String family, String isPool, String idIn, String q, String within, String withinInclude, String contains, BigDecimal maskLength, String vrfId, String vrf, String tenantId, String tenant, String siteId, String site, String vlanId, BigDecimal vlanVid, String roleId, String role, String status, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/prefixes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (family != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("family", family));
        }

        if (isPool != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_pool", isPool));
        }

        if (idIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__in", idIn));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (within != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("within", within));
        }

        if (withinInclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("within_include", withinInclude));
        }

        if (contains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contains", contains));
        }

        if (maskLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mask_length", maskLength));
        }

        if (vrfId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf_id", vrfId));
        }

        if (vrf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf", vrf));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (vlanId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_id", vlanId));
        }

        if (vlanVid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_vid", vlanVid));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesListValidateBeforeCall(String family, String isPool, String idIn, String q, String within, String withinInclude, String contains, BigDecimal maskLength, String vrfId, String vrf, String tenantId, String tenant, String siteId, String site, String vlanId, BigDecimal vlanVid, String roleId, String role, String status, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return ipamPrefixesListCall(family, isPool, idIn, q, within, withinInclude, contains, maskLength, vrfId, vrf, tenantId, tenant, siteId, site, vlanId, vlanVid, roleId, role, status, tag, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param family  (optional)
     * @param isPool  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param within  (optional)
     * @param withinInclude  (optional)
     * @param contains  (optional)
     * @param maskLength  (optional)
     * @param vrfId  (optional)
     * @param vrf  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param vlanId  (optional)
     * @param vlanVid  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param status  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return IpamPrefixesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IpamPrefixesList200Response ipamPrefixesList(String family, String isPool, String idIn, String q, String within, String withinInclude, String contains, BigDecimal maskLength, String vrfId, String vrf, String tenantId, String tenant, String siteId, String site, String vlanId, BigDecimal vlanVid, String roleId, String role, String status, String tag, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamPrefixesList200Response> localVarResp = ipamPrefixesListWithHttpInfo(family, isPool, idIn, q, within, withinInclude, contains, maskLength, vrfId, vrf, tenantId, tenant, siteId, site, vlanId, vlanVid, roleId, role, status, tag, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param family  (optional)
     * @param isPool  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param within  (optional)
     * @param withinInclude  (optional)
     * @param contains  (optional)
     * @param maskLength  (optional)
     * @param vrfId  (optional)
     * @param vrf  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param vlanId  (optional)
     * @param vlanVid  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param status  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;IpamPrefixesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpamPrefixesList200Response> ipamPrefixesListWithHttpInfo(String family, String isPool, String idIn, String q, String within, String withinInclude, String contains, BigDecimal maskLength, String vrfId, String vrf, String tenantId, String tenant, String siteId, String site, String vlanId, BigDecimal vlanVid, String roleId, String role, String status, String tag, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesListValidateBeforeCall(family, isPool, idIn, q, within, withinInclude, contains, maskLength, vrfId, vrf, tenantId, tenant, siteId, site, vlanId, vlanVid, roleId, role, status, tag, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamPrefixesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param family  (optional)
     * @param isPool  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param within  (optional)
     * @param withinInclude  (optional)
     * @param contains  (optional)
     * @param maskLength  (optional)
     * @param vrfId  (optional)
     * @param vrf  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param vlanId  (optional)
     * @param vlanVid  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param status  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesListAsync(String family, String isPool, String idIn, String q, String within, String withinInclude, String contains, BigDecimal maskLength, String vrfId, String vrf, String tenantId, String tenant, String siteId, String site, String vlanId, BigDecimal vlanVid, String roleId, String role, String status, String tag, Integer limit, Integer offset, final ApiCallback<IpamPrefixesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamPrefixesListValidateBeforeCall(family, isPool, idIn, q, within, withinInclude, contains, maskLength, vrfId, vrf, tenantId, tenant, siteId, site, vlanId, vlanVid, roleId, role, status, tag, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamPrefixesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamPrefixesPartialUpdate
     * @param id A unique integer value identifying this prefix. (required)
     * @param writablePrefix  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesPartialUpdateCall(Integer id, WritablePrefix writablePrefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePrefix;

        // create path and map variables
        String localVarPath = "/ipam/prefixes/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesPartialUpdateValidateBeforeCall(Integer id, WritablePrefix writablePrefix, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamPrefixesPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePrefix' is set
        if (writablePrefix == null) {
            throw new ApiException("Missing the required parameter 'writablePrefix' when calling ipamPrefixesPartialUpdate(Async)");
        }

        return ipamPrefixesPartialUpdateCall(id, writablePrefix, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this prefix. (required)
     * @param writablePrefix  (required)
     * @return Prefix
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Prefix ipamPrefixesPartialUpdate(Integer id, WritablePrefix writablePrefix) throws ApiException {
        ApiResponse<Prefix> localVarResp = ipamPrefixesPartialUpdateWithHttpInfo(id, writablePrefix);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this prefix. (required)
     * @param writablePrefix  (required)
     * @return ApiResponse&lt;Prefix&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prefix> ipamPrefixesPartialUpdateWithHttpInfo(Integer id, WritablePrefix writablePrefix) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesPartialUpdateValidateBeforeCall(id, writablePrefix, null);
        Type localVarReturnType = new TypeToken<Prefix>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this prefix. (required)
     * @param writablePrefix  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesPartialUpdateAsync(Integer id, WritablePrefix writablePrefix, final ApiCallback<Prefix> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamPrefixesPartialUpdateValidateBeforeCall(id, writablePrefix, _callback);
        Type localVarReturnType = new TypeToken<Prefix>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamPrefixesRead
     * @param id A unique integer value identifying this prefix. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/prefixes/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamPrefixesRead(Async)");
        }

        return ipamPrefixesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this prefix. (required)
     * @return Prefix
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Prefix ipamPrefixesRead(Integer id) throws ApiException {
        ApiResponse<Prefix> localVarResp = ipamPrefixesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this prefix. (required)
     * @return ApiResponse&lt;Prefix&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prefix> ipamPrefixesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Prefix>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this prefix. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesReadAsync(Integer id, final ApiCallback<Prefix> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamPrefixesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Prefix>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamPrefixesUpdate
     * @param id A unique integer value identifying this prefix. (required)
     * @param writablePrefix  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesUpdateCall(Integer id, WritablePrefix writablePrefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePrefix;

        // create path and map variables
        String localVarPath = "/ipam/prefixes/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesUpdateValidateBeforeCall(Integer id, WritablePrefix writablePrefix, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamPrefixesUpdate(Async)");
        }

        // verify the required parameter 'writablePrefix' is set
        if (writablePrefix == null) {
            throw new ApiException("Missing the required parameter 'writablePrefix' when calling ipamPrefixesUpdate(Async)");
        }

        return ipamPrefixesUpdateCall(id, writablePrefix, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this prefix. (required)
     * @param writablePrefix  (required)
     * @return Prefix
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Prefix ipamPrefixesUpdate(Integer id, WritablePrefix writablePrefix) throws ApiException {
        ApiResponse<Prefix> localVarResp = ipamPrefixesUpdateWithHttpInfo(id, writablePrefix);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this prefix. (required)
     * @param writablePrefix  (required)
     * @return ApiResponse&lt;Prefix&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prefix> ipamPrefixesUpdateWithHttpInfo(Integer id, WritablePrefix writablePrefix) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesUpdateValidateBeforeCall(id, writablePrefix, null);
        Type localVarReturnType = new TypeToken<Prefix>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this prefix. (required)
     * @param writablePrefix  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamPrefixesUpdateAsync(Integer id, WritablePrefix writablePrefix, final ApiCallback<Prefix> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamPrefixesUpdateValidateBeforeCall(id, writablePrefix, _callback);
        Type localVarReturnType = new TypeToken<Prefix>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamRirsCreate
     * @param RIR  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRirsCreateCall(RIR RIR, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = RIR;

        // create path and map variables
        String localVarPath = "/ipam/rirs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRirsCreateValidateBeforeCall(RIR RIR, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'RIR' is set
        if (RIR == null) {
            throw new ApiException("Missing the required parameter 'RIR' when calling ipamRirsCreate(Async)");
        }

        return ipamRirsCreateCall(RIR, _callback);

    }

    /**
     * 
     * 
     * @param RIR  (required)
     * @return RIR
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RIR ipamRirsCreate(RIR RIR) throws ApiException {
        ApiResponse<RIR> localVarResp = ipamRirsCreateWithHttpInfo(RIR);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param RIR  (required)
     * @return ApiResponse&lt;RIR&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RIR> ipamRirsCreateWithHttpInfo(RIR RIR) throws ApiException {
        okhttp3.Call localVarCall = ipamRirsCreateValidateBeforeCall(RIR, null);
        Type localVarReturnType = new TypeToken<RIR>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param RIR  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRirsCreateAsync(RIR RIR, final ApiCallback<RIR> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamRirsCreateValidateBeforeCall(RIR, _callback);
        Type localVarReturnType = new TypeToken<RIR>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamRirsDelete
     * @param id A unique integer value identifying this RIR. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRirsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/rirs/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRirsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRirsDelete(Async)");
        }

        return ipamRirsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this RIR. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ipamRirsDelete(Integer id) throws ApiException {
        ipamRirsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this RIR. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ipamRirsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamRirsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this RIR. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRirsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamRirsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamRirsList
     * @param name  (optional)
     * @param slug  (optional)
     * @param isPrivate  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRirsListCall(String name, String slug, String isPrivate, String idIn, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/rirs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (isPrivate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_private", isPrivate));
        }

        if (idIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__in", idIn));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRirsListValidateBeforeCall(String name, String slug, String isPrivate, String idIn, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return ipamRirsListCall(name, slug, isPrivate, idIn, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param isPrivate  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return IpamRirsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IpamRirsList200Response ipamRirsList(String name, String slug, String isPrivate, String idIn, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamRirsList200Response> localVarResp = ipamRirsListWithHttpInfo(name, slug, isPrivate, idIn, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param isPrivate  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;IpamRirsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpamRirsList200Response> ipamRirsListWithHttpInfo(String name, String slug, String isPrivate, String idIn, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamRirsListValidateBeforeCall(name, slug, isPrivate, idIn, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamRirsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param isPrivate  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRirsListAsync(String name, String slug, String isPrivate, String idIn, Integer limit, Integer offset, final ApiCallback<IpamRirsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamRirsListValidateBeforeCall(name, slug, isPrivate, idIn, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamRirsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamRirsPartialUpdate
     * @param id A unique integer value identifying this RIR. (required)
     * @param RIR  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRirsPartialUpdateCall(Integer id, RIR RIR, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = RIR;

        // create path and map variables
        String localVarPath = "/ipam/rirs/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRirsPartialUpdateValidateBeforeCall(Integer id, RIR RIR, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRirsPartialUpdate(Async)");
        }

        // verify the required parameter 'RIR' is set
        if (RIR == null) {
            throw new ApiException("Missing the required parameter 'RIR' when calling ipamRirsPartialUpdate(Async)");
        }

        return ipamRirsPartialUpdateCall(id, RIR, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this RIR. (required)
     * @param RIR  (required)
     * @return RIR
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RIR ipamRirsPartialUpdate(Integer id, RIR RIR) throws ApiException {
        ApiResponse<RIR> localVarResp = ipamRirsPartialUpdateWithHttpInfo(id, RIR);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this RIR. (required)
     * @param RIR  (required)
     * @return ApiResponse&lt;RIR&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RIR> ipamRirsPartialUpdateWithHttpInfo(Integer id, RIR RIR) throws ApiException {
        okhttp3.Call localVarCall = ipamRirsPartialUpdateValidateBeforeCall(id, RIR, null);
        Type localVarReturnType = new TypeToken<RIR>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this RIR. (required)
     * @param RIR  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRirsPartialUpdateAsync(Integer id, RIR RIR, final ApiCallback<RIR> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamRirsPartialUpdateValidateBeforeCall(id, RIR, _callback);
        Type localVarReturnType = new TypeToken<RIR>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamRirsRead
     * @param id A unique integer value identifying this RIR. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRirsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/rirs/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRirsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRirsRead(Async)");
        }

        return ipamRirsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this RIR. (required)
     * @return RIR
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RIR ipamRirsRead(Integer id) throws ApiException {
        ApiResponse<RIR> localVarResp = ipamRirsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this RIR. (required)
     * @return ApiResponse&lt;RIR&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RIR> ipamRirsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamRirsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RIR>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this RIR. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRirsReadAsync(Integer id, final ApiCallback<RIR> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamRirsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RIR>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamRirsUpdate
     * @param id A unique integer value identifying this RIR. (required)
     * @param RIR  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRirsUpdateCall(Integer id, RIR RIR, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = RIR;

        // create path and map variables
        String localVarPath = "/ipam/rirs/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRirsUpdateValidateBeforeCall(Integer id, RIR RIR, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRirsUpdate(Async)");
        }

        // verify the required parameter 'RIR' is set
        if (RIR == null) {
            throw new ApiException("Missing the required parameter 'RIR' when calling ipamRirsUpdate(Async)");
        }

        return ipamRirsUpdateCall(id, RIR, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this RIR. (required)
     * @param RIR  (required)
     * @return RIR
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RIR ipamRirsUpdate(Integer id, RIR RIR) throws ApiException {
        ApiResponse<RIR> localVarResp = ipamRirsUpdateWithHttpInfo(id, RIR);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this RIR. (required)
     * @param RIR  (required)
     * @return ApiResponse&lt;RIR&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RIR> ipamRirsUpdateWithHttpInfo(Integer id, RIR RIR) throws ApiException {
        okhttp3.Call localVarCall = ipamRirsUpdateValidateBeforeCall(id, RIR, null);
        Type localVarReturnType = new TypeToken<RIR>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this RIR. (required)
     * @param RIR  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRirsUpdateAsync(Integer id, RIR RIR, final ApiCallback<RIR> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamRirsUpdateValidateBeforeCall(id, RIR, _callback);
        Type localVarReturnType = new TypeToken<RIR>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamRolesCreate
     * @param role  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRolesCreateCall(Role role, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = role;

        // create path and map variables
        String localVarPath = "/ipam/roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRolesCreateValidateBeforeCall(Role role, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling ipamRolesCreate(Async)");
        }

        return ipamRolesCreateCall(role, _callback);

    }

    /**
     * 
     * 
     * @param role  (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Role ipamRolesCreate(Role role) throws ApiException {
        ApiResponse<Role> localVarResp = ipamRolesCreateWithHttpInfo(role);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param role  (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> ipamRolesCreateWithHttpInfo(Role role) throws ApiException {
        okhttp3.Call localVarCall = ipamRolesCreateValidateBeforeCall(role, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param role  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRolesCreateAsync(Role role, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamRolesCreateValidateBeforeCall(role, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamRolesDelete
     * @param id A unique integer value identifying this role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRolesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRolesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRolesDelete(Async)");
        }

        return ipamRolesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ipamRolesDelete(Integer id) throws ApiException {
        ipamRolesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ipamRolesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamRolesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRolesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamRolesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamRolesList
     * @param name  (optional)
     * @param slug  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRolesListCall(String name, String slug, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRolesListValidateBeforeCall(String name, String slug, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return ipamRolesListCall(name, slug, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return IpamRolesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IpamRolesList200Response ipamRolesList(String name, String slug, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamRolesList200Response> localVarResp = ipamRolesListWithHttpInfo(name, slug, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;IpamRolesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpamRolesList200Response> ipamRolesListWithHttpInfo(String name, String slug, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamRolesListValidateBeforeCall(name, slug, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamRolesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRolesListAsync(String name, String slug, Integer limit, Integer offset, final ApiCallback<IpamRolesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamRolesListValidateBeforeCall(name, slug, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamRolesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamRolesPartialUpdate
     * @param id A unique integer value identifying this role. (required)
     * @param role  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRolesPartialUpdateCall(Integer id, Role role, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = role;

        // create path and map variables
        String localVarPath = "/ipam/roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRolesPartialUpdateValidateBeforeCall(Integer id, Role role, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRolesPartialUpdate(Async)");
        }

        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling ipamRolesPartialUpdate(Async)");
        }

        return ipamRolesPartialUpdateCall(id, role, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this role. (required)
     * @param role  (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Role ipamRolesPartialUpdate(Integer id, Role role) throws ApiException {
        ApiResponse<Role> localVarResp = ipamRolesPartialUpdateWithHttpInfo(id, role);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this role. (required)
     * @param role  (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> ipamRolesPartialUpdateWithHttpInfo(Integer id, Role role) throws ApiException {
        okhttp3.Call localVarCall = ipamRolesPartialUpdateValidateBeforeCall(id, role, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this role. (required)
     * @param role  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRolesPartialUpdateAsync(Integer id, Role role, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamRolesPartialUpdateValidateBeforeCall(id, role, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamRolesRead
     * @param id A unique integer value identifying this role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRolesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRolesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRolesRead(Async)");
        }

        return ipamRolesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this role. (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Role ipamRolesRead(Integer id) throws ApiException {
        ApiResponse<Role> localVarResp = ipamRolesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this role. (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> ipamRolesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamRolesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRolesReadAsync(Integer id, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamRolesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamRolesUpdate
     * @param id A unique integer value identifying this role. (required)
     * @param role  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRolesUpdateCall(Integer id, Role role, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = role;

        // create path and map variables
        String localVarPath = "/ipam/roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRolesUpdateValidateBeforeCall(Integer id, Role role, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRolesUpdate(Async)");
        }

        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling ipamRolesUpdate(Async)");
        }

        return ipamRolesUpdateCall(id, role, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this role. (required)
     * @param role  (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Role ipamRolesUpdate(Integer id, Role role) throws ApiException {
        ApiResponse<Role> localVarResp = ipamRolesUpdateWithHttpInfo(id, role);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this role. (required)
     * @param role  (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> ipamRolesUpdateWithHttpInfo(Integer id, Role role) throws ApiException {
        okhttp3.Call localVarCall = ipamRolesUpdateValidateBeforeCall(id, role, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this role. (required)
     * @param role  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamRolesUpdateAsync(Integer id, Role role, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamRolesUpdateValidateBeforeCall(id, role, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamServicesCreate
     * @param writableService  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamServicesCreateCall(WritableService writableService, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableService;

        // create path and map variables
        String localVarPath = "/ipam/services/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServicesCreateValidateBeforeCall(WritableService writableService, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableService' is set
        if (writableService == null) {
            throw new ApiException("Missing the required parameter 'writableService' when calling ipamServicesCreate(Async)");
        }

        return ipamServicesCreateCall(writableService, _callback);

    }

    /**
     * 
     * 
     * @param writableService  (required)
     * @return Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Service ipamServicesCreate(WritableService writableService) throws ApiException {
        ApiResponse<Service> localVarResp = ipamServicesCreateWithHttpInfo(writableService);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableService  (required)
     * @return ApiResponse&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Service> ipamServicesCreateWithHttpInfo(WritableService writableService) throws ApiException {
        okhttp3.Call localVarCall = ipamServicesCreateValidateBeforeCall(writableService, null);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableService  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamServicesCreateAsync(WritableService writableService, final ApiCallback<Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamServicesCreateValidateBeforeCall(writableService, _callback);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamServicesDelete
     * @param id A unique integer value identifying this service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamServicesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/services/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServicesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamServicesDelete(Async)");
        }

        return ipamServicesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this service. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ipamServicesDelete(Integer id) throws ApiException {
        ipamServicesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this service. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ipamServicesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamServicesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamServicesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamServicesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamServicesList
     * @param name  (optional)
     * @param protocol  (optional)
     * @param port  (optional)
     * @param q  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualMachineId  (optional)
     * @param virtualMachine  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamServicesListCall(String name, String protocol, BigDecimal port, String q, String deviceId, String device, String virtualMachineId, String virtualMachine, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/services/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (protocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("protocol", protocol));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port", port));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualMachineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine_id", virtualMachineId));
        }

        if (virtualMachine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine", virtualMachine));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServicesListValidateBeforeCall(String name, String protocol, BigDecimal port, String q, String deviceId, String device, String virtualMachineId, String virtualMachine, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return ipamServicesListCall(name, protocol, port, q, deviceId, device, virtualMachineId, virtualMachine, tag, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param protocol  (optional)
     * @param port  (optional)
     * @param q  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualMachineId  (optional)
     * @param virtualMachine  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return IpamServicesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IpamServicesList200Response ipamServicesList(String name, String protocol, BigDecimal port, String q, String deviceId, String device, String virtualMachineId, String virtualMachine, String tag, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamServicesList200Response> localVarResp = ipamServicesListWithHttpInfo(name, protocol, port, q, deviceId, device, virtualMachineId, virtualMachine, tag, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param protocol  (optional)
     * @param port  (optional)
     * @param q  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualMachineId  (optional)
     * @param virtualMachine  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;IpamServicesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpamServicesList200Response> ipamServicesListWithHttpInfo(String name, String protocol, BigDecimal port, String q, String deviceId, String device, String virtualMachineId, String virtualMachine, String tag, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamServicesListValidateBeforeCall(name, protocol, port, q, deviceId, device, virtualMachineId, virtualMachine, tag, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamServicesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param protocol  (optional)
     * @param port  (optional)
     * @param q  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualMachineId  (optional)
     * @param virtualMachine  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamServicesListAsync(String name, String protocol, BigDecimal port, String q, String deviceId, String device, String virtualMachineId, String virtualMachine, String tag, Integer limit, Integer offset, final ApiCallback<IpamServicesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamServicesListValidateBeforeCall(name, protocol, port, q, deviceId, device, virtualMachineId, virtualMachine, tag, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamServicesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamServicesPartialUpdate
     * @param id A unique integer value identifying this service. (required)
     * @param writableService  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamServicesPartialUpdateCall(Integer id, WritableService writableService, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableService;

        // create path and map variables
        String localVarPath = "/ipam/services/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServicesPartialUpdateValidateBeforeCall(Integer id, WritableService writableService, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamServicesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableService' is set
        if (writableService == null) {
            throw new ApiException("Missing the required parameter 'writableService' when calling ipamServicesPartialUpdate(Async)");
        }

        return ipamServicesPartialUpdateCall(id, writableService, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this service. (required)
     * @param writableService  (required)
     * @return Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Service ipamServicesPartialUpdate(Integer id, WritableService writableService) throws ApiException {
        ApiResponse<Service> localVarResp = ipamServicesPartialUpdateWithHttpInfo(id, writableService);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this service. (required)
     * @param writableService  (required)
     * @return ApiResponse&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Service> ipamServicesPartialUpdateWithHttpInfo(Integer id, WritableService writableService) throws ApiException {
        okhttp3.Call localVarCall = ipamServicesPartialUpdateValidateBeforeCall(id, writableService, null);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this service. (required)
     * @param writableService  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamServicesPartialUpdateAsync(Integer id, WritableService writableService, final ApiCallback<Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamServicesPartialUpdateValidateBeforeCall(id, writableService, _callback);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamServicesRead
     * @param id A unique integer value identifying this service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamServicesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/services/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServicesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamServicesRead(Async)");
        }

        return ipamServicesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this service. (required)
     * @return Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Service ipamServicesRead(Integer id) throws ApiException {
        ApiResponse<Service> localVarResp = ipamServicesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this service. (required)
     * @return ApiResponse&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Service> ipamServicesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamServicesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamServicesReadAsync(Integer id, final ApiCallback<Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamServicesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamServicesUpdate
     * @param id A unique integer value identifying this service. (required)
     * @param writableService  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamServicesUpdateCall(Integer id, WritableService writableService, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableService;

        // create path and map variables
        String localVarPath = "/ipam/services/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServicesUpdateValidateBeforeCall(Integer id, WritableService writableService, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamServicesUpdate(Async)");
        }

        // verify the required parameter 'writableService' is set
        if (writableService == null) {
            throw new ApiException("Missing the required parameter 'writableService' when calling ipamServicesUpdate(Async)");
        }

        return ipamServicesUpdateCall(id, writableService, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this service. (required)
     * @param writableService  (required)
     * @return Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Service ipamServicesUpdate(Integer id, WritableService writableService) throws ApiException {
        ApiResponse<Service> localVarResp = ipamServicesUpdateWithHttpInfo(id, writableService);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this service. (required)
     * @param writableService  (required)
     * @return ApiResponse&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Service> ipamServicesUpdateWithHttpInfo(Integer id, WritableService writableService) throws ApiException {
        okhttp3.Call localVarCall = ipamServicesUpdateValidateBeforeCall(id, writableService, null);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this service. (required)
     * @param writableService  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamServicesUpdateAsync(Integer id, WritableService writableService, final ApiCallback<Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamServicesUpdateValidateBeforeCall(id, writableService, _callback);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVlanGroupsCreate
     * @param writableVLANGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlanGroupsCreateCall(WritableVLANGroup writableVLANGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVLANGroup;

        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsCreateValidateBeforeCall(WritableVLANGroup writableVLANGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableVLANGroup' is set
        if (writableVLANGroup == null) {
            throw new ApiException("Missing the required parameter 'writableVLANGroup' when calling ipamVlanGroupsCreate(Async)");
        }

        return ipamVlanGroupsCreateCall(writableVLANGroup, _callback);

    }

    /**
     * 
     * 
     * @param writableVLANGroup  (required)
     * @return VLANGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VLANGroup ipamVlanGroupsCreate(WritableVLANGroup writableVLANGroup) throws ApiException {
        ApiResponse<VLANGroup> localVarResp = ipamVlanGroupsCreateWithHttpInfo(writableVLANGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableVLANGroup  (required)
     * @return ApiResponse&lt;VLANGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VLANGroup> ipamVlanGroupsCreateWithHttpInfo(WritableVLANGroup writableVLANGroup) throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsCreateValidateBeforeCall(writableVLANGroup, null);
        Type localVarReturnType = new TypeToken<VLANGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableVLANGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlanGroupsCreateAsync(WritableVLANGroup writableVLANGroup, final ApiCallback<VLANGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVlanGroupsCreateValidateBeforeCall(writableVLANGroup, _callback);
        Type localVarReturnType = new TypeToken<VLANGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVlanGroupsDelete
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlanGroupsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlanGroupsDelete(Async)");
        }

        return ipamVlanGroupsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VLAN group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ipamVlanGroupsDelete(Integer id) throws ApiException {
        ipamVlanGroupsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VLAN group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ipamVlanGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlanGroupsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVlanGroupsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVlanGroupsList
     * @param name  (optional)
     * @param slug  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlanGroupsListCall(String name, String slug, String siteId, String site, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsListValidateBeforeCall(String name, String slug, String siteId, String site, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return ipamVlanGroupsListCall(name, slug, siteId, site, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return IpamVlanGroupsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IpamVlanGroupsList200Response ipamVlanGroupsList(String name, String slug, String siteId, String site, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamVlanGroupsList200Response> localVarResp = ipamVlanGroupsListWithHttpInfo(name, slug, siteId, site, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;IpamVlanGroupsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpamVlanGroupsList200Response> ipamVlanGroupsListWithHttpInfo(String name, String slug, String siteId, String site, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsListValidateBeforeCall(name, slug, siteId, site, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamVlanGroupsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlanGroupsListAsync(String name, String slug, String siteId, String site, Integer limit, Integer offset, final ApiCallback<IpamVlanGroupsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVlanGroupsListValidateBeforeCall(name, slug, siteId, site, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamVlanGroupsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVlanGroupsPartialUpdate
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param writableVLANGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlanGroupsPartialUpdateCall(Integer id, WritableVLANGroup writableVLANGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVLANGroup;

        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsPartialUpdateValidateBeforeCall(Integer id, WritableVLANGroup writableVLANGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlanGroupsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableVLANGroup' is set
        if (writableVLANGroup == null) {
            throw new ApiException("Missing the required parameter 'writableVLANGroup' when calling ipamVlanGroupsPartialUpdate(Async)");
        }

        return ipamVlanGroupsPartialUpdateCall(id, writableVLANGroup, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param writableVLANGroup  (required)
     * @return VLANGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VLANGroup ipamVlanGroupsPartialUpdate(Integer id, WritableVLANGroup writableVLANGroup) throws ApiException {
        ApiResponse<VLANGroup> localVarResp = ipamVlanGroupsPartialUpdateWithHttpInfo(id, writableVLANGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param writableVLANGroup  (required)
     * @return ApiResponse&lt;VLANGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VLANGroup> ipamVlanGroupsPartialUpdateWithHttpInfo(Integer id, WritableVLANGroup writableVLANGroup) throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsPartialUpdateValidateBeforeCall(id, writableVLANGroup, null);
        Type localVarReturnType = new TypeToken<VLANGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param writableVLANGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlanGroupsPartialUpdateAsync(Integer id, WritableVLANGroup writableVLANGroup, final ApiCallback<VLANGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVlanGroupsPartialUpdateValidateBeforeCall(id, writableVLANGroup, _callback);
        Type localVarReturnType = new TypeToken<VLANGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVlanGroupsRead
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlanGroupsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlanGroupsRead(Async)");
        }

        return ipamVlanGroupsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VLAN group. (required)
     * @return VLANGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VLANGroup ipamVlanGroupsRead(Integer id) throws ApiException {
        ApiResponse<VLANGroup> localVarResp = ipamVlanGroupsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VLAN group. (required)
     * @return ApiResponse&lt;VLANGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VLANGroup> ipamVlanGroupsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VLANGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlanGroupsReadAsync(Integer id, final ApiCallback<VLANGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVlanGroupsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VLANGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVlanGroupsUpdate
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param writableVLANGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlanGroupsUpdateCall(Integer id, WritableVLANGroup writableVLANGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVLANGroup;

        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsUpdateValidateBeforeCall(Integer id, WritableVLANGroup writableVLANGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlanGroupsUpdate(Async)");
        }

        // verify the required parameter 'writableVLANGroup' is set
        if (writableVLANGroup == null) {
            throw new ApiException("Missing the required parameter 'writableVLANGroup' when calling ipamVlanGroupsUpdate(Async)");
        }

        return ipamVlanGroupsUpdateCall(id, writableVLANGroup, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param writableVLANGroup  (required)
     * @return VLANGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VLANGroup ipamVlanGroupsUpdate(Integer id, WritableVLANGroup writableVLANGroup) throws ApiException {
        ApiResponse<VLANGroup> localVarResp = ipamVlanGroupsUpdateWithHttpInfo(id, writableVLANGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param writableVLANGroup  (required)
     * @return ApiResponse&lt;VLANGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VLANGroup> ipamVlanGroupsUpdateWithHttpInfo(Integer id, WritableVLANGroup writableVLANGroup) throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsUpdateValidateBeforeCall(id, writableVLANGroup, null);
        Type localVarReturnType = new TypeToken<VLANGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param writableVLANGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlanGroupsUpdateAsync(Integer id, WritableVLANGroup writableVLANGroup, final ApiCallback<VLANGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVlanGroupsUpdateValidateBeforeCall(id, writableVLANGroup, _callback);
        Type localVarReturnType = new TypeToken<VLANGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVlansCreate
     * @param writableVLAN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlansCreateCall(WritableVLAN writableVLAN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVLAN;

        // create path and map variables
        String localVarPath = "/ipam/vlans/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlansCreateValidateBeforeCall(WritableVLAN writableVLAN, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableVLAN' is set
        if (writableVLAN == null) {
            throw new ApiException("Missing the required parameter 'writableVLAN' when calling ipamVlansCreate(Async)");
        }

        return ipamVlansCreateCall(writableVLAN, _callback);

    }

    /**
     * 
     * 
     * @param writableVLAN  (required)
     * @return VLAN
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VLAN ipamVlansCreate(WritableVLAN writableVLAN) throws ApiException {
        ApiResponse<VLAN> localVarResp = ipamVlansCreateWithHttpInfo(writableVLAN);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableVLAN  (required)
     * @return ApiResponse&lt;VLAN&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VLAN> ipamVlansCreateWithHttpInfo(WritableVLAN writableVLAN) throws ApiException {
        okhttp3.Call localVarCall = ipamVlansCreateValidateBeforeCall(writableVLAN, null);
        Type localVarReturnType = new TypeToken<VLAN>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableVLAN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlansCreateAsync(WritableVLAN writableVLAN, final ApiCallback<VLAN> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVlansCreateValidateBeforeCall(writableVLAN, _callback);
        Type localVarReturnType = new TypeToken<VLAN>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVlansDelete
     * @param id A unique integer value identifying this VLAN. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlansDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/vlans/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlansDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlansDelete(Async)");
        }

        return ipamVlansDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VLAN. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ipamVlansDelete(Integer id) throws ApiException {
        ipamVlansDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VLAN. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ipamVlansDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamVlansDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this VLAN. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlansDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVlansDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVlansList
     * @param vid  (optional)
     * @param name  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param status  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlansListCall(BigDecimal vid, String name, String idIn, String q, String siteId, String site, String groupId, String group, String tenantId, String tenant, String roleId, String role, String status, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/vlans/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vid", vid));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (idIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__in", idIn));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlansListValidateBeforeCall(BigDecimal vid, String name, String idIn, String q, String siteId, String site, String groupId, String group, String tenantId, String tenant, String roleId, String role, String status, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return ipamVlansListCall(vid, name, idIn, q, siteId, site, groupId, group, tenantId, tenant, roleId, role, status, tag, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param vid  (optional)
     * @param name  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param status  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return IpamVlansList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IpamVlansList200Response ipamVlansList(BigDecimal vid, String name, String idIn, String q, String siteId, String site, String groupId, String group, String tenantId, String tenant, String roleId, String role, String status, String tag, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamVlansList200Response> localVarResp = ipamVlansListWithHttpInfo(vid, name, idIn, q, siteId, site, groupId, group, tenantId, tenant, roleId, role, status, tag, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vid  (optional)
     * @param name  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param status  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;IpamVlansList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpamVlansList200Response> ipamVlansListWithHttpInfo(BigDecimal vid, String name, String idIn, String q, String siteId, String site, String groupId, String group, String tenantId, String tenant, String roleId, String role, String status, String tag, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamVlansListValidateBeforeCall(vid, name, idIn, q, siteId, site, groupId, group, tenantId, tenant, roleId, role, status, tag, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamVlansList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vid  (optional)
     * @param name  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param status  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlansListAsync(BigDecimal vid, String name, String idIn, String q, String siteId, String site, String groupId, String group, String tenantId, String tenant, String roleId, String role, String status, String tag, Integer limit, Integer offset, final ApiCallback<IpamVlansList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVlansListValidateBeforeCall(vid, name, idIn, q, siteId, site, groupId, group, tenantId, tenant, roleId, role, status, tag, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamVlansList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVlansPartialUpdate
     * @param id A unique integer value identifying this VLAN. (required)
     * @param writableVLAN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlansPartialUpdateCall(Integer id, WritableVLAN writableVLAN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVLAN;

        // create path and map variables
        String localVarPath = "/ipam/vlans/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlansPartialUpdateValidateBeforeCall(Integer id, WritableVLAN writableVLAN, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlansPartialUpdate(Async)");
        }

        // verify the required parameter 'writableVLAN' is set
        if (writableVLAN == null) {
            throw new ApiException("Missing the required parameter 'writableVLAN' when calling ipamVlansPartialUpdate(Async)");
        }

        return ipamVlansPartialUpdateCall(id, writableVLAN, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VLAN. (required)
     * @param writableVLAN  (required)
     * @return VLAN
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VLAN ipamVlansPartialUpdate(Integer id, WritableVLAN writableVLAN) throws ApiException {
        ApiResponse<VLAN> localVarResp = ipamVlansPartialUpdateWithHttpInfo(id, writableVLAN);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VLAN. (required)
     * @param writableVLAN  (required)
     * @return ApiResponse&lt;VLAN&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VLAN> ipamVlansPartialUpdateWithHttpInfo(Integer id, WritableVLAN writableVLAN) throws ApiException {
        okhttp3.Call localVarCall = ipamVlansPartialUpdateValidateBeforeCall(id, writableVLAN, null);
        Type localVarReturnType = new TypeToken<VLAN>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this VLAN. (required)
     * @param writableVLAN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlansPartialUpdateAsync(Integer id, WritableVLAN writableVLAN, final ApiCallback<VLAN> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVlansPartialUpdateValidateBeforeCall(id, writableVLAN, _callback);
        Type localVarReturnType = new TypeToken<VLAN>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVlansRead
     * @param id A unique integer value identifying this VLAN. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlansReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/vlans/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlansReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlansRead(Async)");
        }

        return ipamVlansReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VLAN. (required)
     * @return VLAN
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VLAN ipamVlansRead(Integer id) throws ApiException {
        ApiResponse<VLAN> localVarResp = ipamVlansReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VLAN. (required)
     * @return ApiResponse&lt;VLAN&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VLAN> ipamVlansReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamVlansReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VLAN>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this VLAN. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlansReadAsync(Integer id, final ApiCallback<VLAN> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVlansReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VLAN>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVlansUpdate
     * @param id A unique integer value identifying this VLAN. (required)
     * @param writableVLAN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlansUpdateCall(Integer id, WritableVLAN writableVLAN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVLAN;

        // create path and map variables
        String localVarPath = "/ipam/vlans/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlansUpdateValidateBeforeCall(Integer id, WritableVLAN writableVLAN, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlansUpdate(Async)");
        }

        // verify the required parameter 'writableVLAN' is set
        if (writableVLAN == null) {
            throw new ApiException("Missing the required parameter 'writableVLAN' when calling ipamVlansUpdate(Async)");
        }

        return ipamVlansUpdateCall(id, writableVLAN, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VLAN. (required)
     * @param writableVLAN  (required)
     * @return VLAN
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VLAN ipamVlansUpdate(Integer id, WritableVLAN writableVLAN) throws ApiException {
        ApiResponse<VLAN> localVarResp = ipamVlansUpdateWithHttpInfo(id, writableVLAN);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VLAN. (required)
     * @param writableVLAN  (required)
     * @return ApiResponse&lt;VLAN&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VLAN> ipamVlansUpdateWithHttpInfo(Integer id, WritableVLAN writableVLAN) throws ApiException {
        okhttp3.Call localVarCall = ipamVlansUpdateValidateBeforeCall(id, writableVLAN, null);
        Type localVarReturnType = new TypeToken<VLAN>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this VLAN. (required)
     * @param writableVLAN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVlansUpdateAsync(Integer id, WritableVLAN writableVLAN, final ApiCallback<VLAN> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVlansUpdateValidateBeforeCall(id, writableVLAN, _callback);
        Type localVarReturnType = new TypeToken<VLAN>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVrfsCreate
     * @param writableVRF  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVrfsCreateCall(WritableVRF writableVRF, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVRF;

        // create path and map variables
        String localVarPath = "/ipam/vrfs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVrfsCreateValidateBeforeCall(WritableVRF writableVRF, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableVRF' is set
        if (writableVRF == null) {
            throw new ApiException("Missing the required parameter 'writableVRF' when calling ipamVrfsCreate(Async)");
        }

        return ipamVrfsCreateCall(writableVRF, _callback);

    }

    /**
     * 
     * 
     * @param writableVRF  (required)
     * @return VRF
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VRF ipamVrfsCreate(WritableVRF writableVRF) throws ApiException {
        ApiResponse<VRF> localVarResp = ipamVrfsCreateWithHttpInfo(writableVRF);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableVRF  (required)
     * @return ApiResponse&lt;VRF&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRF> ipamVrfsCreateWithHttpInfo(WritableVRF writableVRF) throws ApiException {
        okhttp3.Call localVarCall = ipamVrfsCreateValidateBeforeCall(writableVRF, null);
        Type localVarReturnType = new TypeToken<VRF>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableVRF  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVrfsCreateAsync(WritableVRF writableVRF, final ApiCallback<VRF> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVrfsCreateValidateBeforeCall(writableVRF, _callback);
        Type localVarReturnType = new TypeToken<VRF>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVrfsDelete
     * @param id A unique integer value identifying this VRF. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVrfsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/vrfs/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVrfsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVrfsDelete(Async)");
        }

        return ipamVrfsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VRF. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ipamVrfsDelete(Integer id) throws ApiException {
        ipamVrfsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VRF. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ipamVrfsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamVrfsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this VRF. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVrfsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVrfsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVrfsList
     * @param name  (optional)
     * @param rd  (optional)
     * @param enforceUnique  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVrfsListCall(String name, String rd, String enforceUnique, String idIn, String q, String tenantId, String tenant, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/vrfs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (rd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rd", rd));
        }

        if (enforceUnique != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enforce_unique", enforceUnique));
        }

        if (idIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__in", idIn));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVrfsListValidateBeforeCall(String name, String rd, String enforceUnique, String idIn, String q, String tenantId, String tenant, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return ipamVrfsListCall(name, rd, enforceUnique, idIn, q, tenantId, tenant, tag, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param rd  (optional)
     * @param enforceUnique  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return IpamVrfsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IpamVrfsList200Response ipamVrfsList(String name, String rd, String enforceUnique, String idIn, String q, String tenantId, String tenant, String tag, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamVrfsList200Response> localVarResp = ipamVrfsListWithHttpInfo(name, rd, enforceUnique, idIn, q, tenantId, tenant, tag, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param rd  (optional)
     * @param enforceUnique  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;IpamVrfsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpamVrfsList200Response> ipamVrfsListWithHttpInfo(String name, String rd, String enforceUnique, String idIn, String q, String tenantId, String tenant, String tag, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamVrfsListValidateBeforeCall(name, rd, enforceUnique, idIn, q, tenantId, tenant, tag, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamVrfsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param rd  (optional)
     * @param enforceUnique  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVrfsListAsync(String name, String rd, String enforceUnique, String idIn, String q, String tenantId, String tenant, String tag, Integer limit, Integer offset, final ApiCallback<IpamVrfsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVrfsListValidateBeforeCall(name, rd, enforceUnique, idIn, q, tenantId, tenant, tag, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamVrfsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVrfsPartialUpdate
     * @param id A unique integer value identifying this VRF. (required)
     * @param writableVRF  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVrfsPartialUpdateCall(Integer id, WritableVRF writableVRF, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVRF;

        // create path and map variables
        String localVarPath = "/ipam/vrfs/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVrfsPartialUpdateValidateBeforeCall(Integer id, WritableVRF writableVRF, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVrfsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableVRF' is set
        if (writableVRF == null) {
            throw new ApiException("Missing the required parameter 'writableVRF' when calling ipamVrfsPartialUpdate(Async)");
        }

        return ipamVrfsPartialUpdateCall(id, writableVRF, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VRF. (required)
     * @param writableVRF  (required)
     * @return VRF
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VRF ipamVrfsPartialUpdate(Integer id, WritableVRF writableVRF) throws ApiException {
        ApiResponse<VRF> localVarResp = ipamVrfsPartialUpdateWithHttpInfo(id, writableVRF);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VRF. (required)
     * @param writableVRF  (required)
     * @return ApiResponse&lt;VRF&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRF> ipamVrfsPartialUpdateWithHttpInfo(Integer id, WritableVRF writableVRF) throws ApiException {
        okhttp3.Call localVarCall = ipamVrfsPartialUpdateValidateBeforeCall(id, writableVRF, null);
        Type localVarReturnType = new TypeToken<VRF>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this VRF. (required)
     * @param writableVRF  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVrfsPartialUpdateAsync(Integer id, WritableVRF writableVRF, final ApiCallback<VRF> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVrfsPartialUpdateValidateBeforeCall(id, writableVRF, _callback);
        Type localVarReturnType = new TypeToken<VRF>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVrfsRead
     * @param id A unique integer value identifying this VRF. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVrfsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ipam/vrfs/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVrfsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVrfsRead(Async)");
        }

        return ipamVrfsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VRF. (required)
     * @return VRF
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VRF ipamVrfsRead(Integer id) throws ApiException {
        ApiResponse<VRF> localVarResp = ipamVrfsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VRF. (required)
     * @return ApiResponse&lt;VRF&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRF> ipamVrfsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamVrfsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VRF>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this VRF. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVrfsReadAsync(Integer id, final ApiCallback<VRF> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVrfsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VRF>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipamVrfsUpdate
     * @param id A unique integer value identifying this VRF. (required)
     * @param writableVRF  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVrfsUpdateCall(Integer id, WritableVRF writableVRF, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVRF;

        // create path and map variables
        String localVarPath = "/ipam/vrfs/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVrfsUpdateValidateBeforeCall(Integer id, WritableVRF writableVRF, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVrfsUpdate(Async)");
        }

        // verify the required parameter 'writableVRF' is set
        if (writableVRF == null) {
            throw new ApiException("Missing the required parameter 'writableVRF' when calling ipamVrfsUpdate(Async)");
        }

        return ipamVrfsUpdateCall(id, writableVRF, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VRF. (required)
     * @param writableVRF  (required)
     * @return VRF
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VRF ipamVrfsUpdate(Integer id, WritableVRF writableVRF) throws ApiException {
        ApiResponse<VRF> localVarResp = ipamVrfsUpdateWithHttpInfo(id, writableVRF);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this VRF. (required)
     * @param writableVRF  (required)
     * @return ApiResponse&lt;VRF&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRF> ipamVrfsUpdateWithHttpInfo(Integer id, WritableVRF writableVRF) throws ApiException {
        okhttp3.Call localVarCall = ipamVrfsUpdateValidateBeforeCall(id, writableVRF, null);
        Type localVarReturnType = new TypeToken<VRF>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this VRF. (required)
     * @param writableVRF  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipamVrfsUpdateAsync(Integer id, WritableVRF writableVRF, final ApiCallback<VRF> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipamVrfsUpdateValidateBeforeCall(id, writableVRF, _callback);
        Type localVarReturnType = new TypeToken<VRF>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
