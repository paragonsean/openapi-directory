/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.ConsolePort;
import org.openapitools.client.model.ConsolePortTemplate;
import org.openapitools.client.model.ConsoleServerPort;
import org.openapitools.client.model.ConsoleServerPortTemplate;
import org.openapitools.client.model.DcimConsoleConnectionsList200Response;
import org.openapitools.client.model.DcimConsolePortTemplatesList200Response;
import org.openapitools.client.model.DcimConsoleServerPortTemplatesList200Response;
import org.openapitools.client.model.DcimConsoleServerPortsList200Response;
import org.openapitools.client.model.DcimDeviceBayTemplatesList200Response;
import org.openapitools.client.model.DcimDeviceBaysList200Response;
import org.openapitools.client.model.DcimDeviceRolesList200Response;
import org.openapitools.client.model.DcimDeviceTypesList200Response;
import org.openapitools.client.model.DcimDevicesList200Response;
import org.openapitools.client.model.DcimInterfaceConnectionsList200Response;
import org.openapitools.client.model.DcimInterfaceTemplatesList200Response;
import org.openapitools.client.model.DcimInterfacesList200Response;
import org.openapitools.client.model.DcimInventoryItemsList200Response;
import org.openapitools.client.model.DcimManufacturersList200Response;
import org.openapitools.client.model.DcimPlatformsList200Response;
import org.openapitools.client.model.DcimPowerConnectionsList200Response;
import org.openapitools.client.model.DcimPowerOutletTemplatesList200Response;
import org.openapitools.client.model.DcimPowerOutletsList200Response;
import org.openapitools.client.model.DcimPowerPortTemplatesList200Response;
import org.openapitools.client.model.DcimRackGroupsList200Response;
import org.openapitools.client.model.DcimRackReservationsList200Response;
import org.openapitools.client.model.DcimRackRolesList200Response;
import org.openapitools.client.model.DcimRacksList200Response;
import org.openapitools.client.model.DcimRegionsList200Response;
import org.openapitools.client.model.DcimSitesList200Response;
import org.openapitools.client.model.DcimVirtualChassisList200Response;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceBay;
import org.openapitools.client.model.DeviceBayTemplate;
import org.openapitools.client.model.DeviceRole;
import org.openapitools.client.model.DeviceType;
import org.openapitools.client.model.DeviceWithConfigContext;
import org.openapitools.client.model.InterfaceConnection;
import org.openapitools.client.model.InterfaceTemplate;
import org.openapitools.client.model.InventoryItem;
import org.openapitools.client.model.Manufacturer;
import org.openapitools.client.model.ModelInterface;
import org.openapitools.client.model.Platform;
import org.openapitools.client.model.PowerOutlet;
import org.openapitools.client.model.PowerOutletTemplate;
import org.openapitools.client.model.PowerPort;
import org.openapitools.client.model.PowerPortTemplate;
import org.openapitools.client.model.Rack;
import org.openapitools.client.model.RackGroup;
import org.openapitools.client.model.RackReservation;
import org.openapitools.client.model.RackRole;
import org.openapitools.client.model.Region;
import org.openapitools.client.model.Site;
import org.openapitools.client.model.VirtualChassis;
import org.openapitools.client.model.WritableConsolePort;
import org.openapitools.client.model.WritableConsolePortTemplate;
import org.openapitools.client.model.WritableConsoleServerPort;
import org.openapitools.client.model.WritableConsoleServerPortTemplate;
import org.openapitools.client.model.WritableDevice;
import org.openapitools.client.model.WritableDeviceBay;
import org.openapitools.client.model.WritableDeviceBayTemplate;
import org.openapitools.client.model.WritableDeviceType;
import org.openapitools.client.model.WritableInterface;
import org.openapitools.client.model.WritableInterfaceConnection;
import org.openapitools.client.model.WritableInterfaceTemplate;
import org.openapitools.client.model.WritableInventoryItem;
import org.openapitools.client.model.WritablePlatform;
import org.openapitools.client.model.WritablePowerOutlet;
import org.openapitools.client.model.WritablePowerOutletTemplate;
import org.openapitools.client.model.WritablePowerPort;
import org.openapitools.client.model.WritablePowerPortTemplate;
import org.openapitools.client.model.WritableRack;
import org.openapitools.client.model.WritableRackGroup;
import org.openapitools.client.model.WritableRackReservation;
import org.openapitools.client.model.WritableRegion;
import org.openapitools.client.model.WritableSite;
import org.openapitools.client.model.WritableVirtualChassis;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DcimApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DcimApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DcimApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dcimChoicesList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimChoicesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/_choices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimChoicesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimChoicesListCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimChoicesList() throws ApiException {
        dcimChoicesListWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimChoicesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimChoicesListValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimChoicesListAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimChoicesListValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimChoicesRead
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimChoicesReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/_choices/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimChoicesReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimChoicesRead(Async)");
        }

        return dcimChoicesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimChoicesRead(String id) throws ApiException {
        dcimChoicesReadWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimChoicesReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = dcimChoicesReadValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimChoicesReadAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimChoicesReadValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConnectedDeviceList
     * @param peerDevice The name of the peer device (required)
     * @param peerInterface The name of the peer interface (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConnectedDeviceListCall(String peerDevice, String peerInterface, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/connected-device/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (peerDevice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("peer_device", peerDevice));
        }

        if (peerInterface != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("peer_interface", peerInterface));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConnectedDeviceListValidateBeforeCall(String peerDevice, String peerInterface, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'peerDevice' is set
        if (peerDevice == null) {
            throw new ApiException("Missing the required parameter 'peerDevice' when calling dcimConnectedDeviceList(Async)");
        }

        // verify the required parameter 'peerInterface' is set
        if (peerInterface == null) {
            throw new ApiException("Missing the required parameter 'peerInterface' when calling dcimConnectedDeviceList(Async)");
        }

        return dcimConnectedDeviceListCall(peerDevice, peerInterface, _callback);

    }

    /**
     * 
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
     * @param peerDevice The name of the peer device (required)
     * @param peerInterface The name of the peer interface (required)
     * @return Device
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Device dcimConnectedDeviceList(String peerDevice, String peerInterface) throws ApiException {
        ApiResponse<Device> localVarResp = dcimConnectedDeviceListWithHttpInfo(peerDevice, peerInterface);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
     * @param peerDevice The name of the peer device (required)
     * @param peerInterface The name of the peer interface (required)
     * @return ApiResponse&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Device> dcimConnectedDeviceListWithHttpInfo(String peerDevice, String peerInterface) throws ApiException {
        okhttp3.Call localVarCall = dcimConnectedDeviceListValidateBeforeCall(peerDevice, peerInterface, null);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
     * @param peerDevice The name of the peer device (required)
     * @param peerInterface The name of the peer interface (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConnectedDeviceListAsync(String peerDevice, String peerInterface, final ApiCallback<Device> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConnectedDeviceListValidateBeforeCall(peerDevice, peerInterface, _callback);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleConnectionsList
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param device  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleConnectionsListCall(String name, String connectionStatus, String site, String device, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-connections/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (connectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status", connectionStatus));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleConnectionsListValidateBeforeCall(String name, String connectionStatus, String site, String device, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimConsoleConnectionsListCall(name, connectionStatus, site, device, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param device  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsoleConnectionsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsoleConnectionsList200Response dcimConsoleConnectionsList(String name, String connectionStatus, String site, String device, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsoleConnectionsList200Response> localVarResp = dcimConsoleConnectionsListWithHttpInfo(name, connectionStatus, site, device, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param device  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsoleConnectionsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsoleConnectionsList200Response> dcimConsoleConnectionsListWithHttpInfo(String name, String connectionStatus, String site, String device, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleConnectionsListValidateBeforeCall(name, connectionStatus, site, device, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsoleConnectionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param device  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleConnectionsListAsync(String name, String connectionStatus, String site, String device, Integer limit, Integer offset, final ApiCallback<DcimConsoleConnectionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleConnectionsListValidateBeforeCall(name, connectionStatus, site, device, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsoleConnectionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesCreate
     * @param writableConsolePortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesCreateCall(WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesCreateValidateBeforeCall(WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsolePortTemplate' is set
        if (writableConsolePortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesCreate(Async)");
        }

        return dcimConsolePortTemplatesCreateCall(writableConsolePortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableConsolePortTemplate  (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesCreate(WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesCreateWithHttpInfo(writableConsolePortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsolePortTemplate  (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesCreateWithHttpInfo(WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesCreateValidateBeforeCall(writableConsolePortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsolePortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesCreateAsync(WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesCreateValidateBeforeCall(writableConsolePortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesDelete
     * @param id A unique integer value identifying this console port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortTemplatesDelete(Async)");
        }

        return dcimConsolePortTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsolePortTemplatesDelete(Integer id) throws ApiException {
        dcimConsolePortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsolePortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesList
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesListCall(String name, String devicetypeId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesListValidateBeforeCall(String name, String devicetypeId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimConsolePortTemplatesListCall(name, devicetypeId, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsolePortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsolePortTemplatesList200Response dcimConsolePortTemplatesList(String name, String devicetypeId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsolePortTemplatesList200Response> localVarResp = dcimConsolePortTemplatesListWithHttpInfo(name, devicetypeId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsolePortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsolePortTemplatesList200Response> dcimConsolePortTemplatesListWithHttpInfo(String name, String devicetypeId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesListValidateBeforeCall(name, devicetypeId, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsolePortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesListAsync(String name, String devicetypeId, Integer limit, Integer offset, final ApiCallback<DcimConsolePortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesListValidateBeforeCall(name, devicetypeId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsolePortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesPartialUpdate
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesPartialUpdateCall(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableConsolePortTemplate' is set
        if (writableConsolePortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesPartialUpdate(Async)");
        }

        return dcimConsolePortTemplatesPartialUpdateCall(id, writableConsolePortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesPartialUpdate(Integer id, WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesPartialUpdateWithHttpInfo(id, writableConsolePortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesPartialUpdateValidateBeforeCall(id, writableConsolePortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesPartialUpdateAsync(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesPartialUpdateValidateBeforeCall(id, writableConsolePortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesRead
     * @param id A unique integer value identifying this console port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortTemplatesRead(Async)");
        }

        return dcimConsolePortTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesReadAsync(Integer id, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesUpdate
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesUpdateCall(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesUpdateValidateBeforeCall(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableConsolePortTemplate' is set
        if (writableConsolePortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesUpdate(Async)");
        }

        return dcimConsolePortTemplatesUpdateCall(id, writableConsolePortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesUpdate(Integer id, WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesUpdateWithHttpInfo(id, writableConsolePortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesUpdateWithHttpInfo(Integer id, WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesUpdateValidateBeforeCall(id, writableConsolePortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesUpdateAsync(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesUpdateValidateBeforeCall(id, writableConsolePortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsCreate
     * @param writableConsolePort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsCreateCall(WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePort;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsCreateValidateBeforeCall(WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsolePort' is set
        if (writableConsolePort == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsCreate(Async)");
        }

        return dcimConsolePortsCreateCall(writableConsolePort, _callback);

    }

    /**
     * 
     * 
     * @param writableConsolePort  (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsCreate(WritableConsolePort writableConsolePort) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsCreateWithHttpInfo(writableConsolePort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsolePort  (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsCreateWithHttpInfo(WritableConsolePort writableConsolePort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsCreateValidateBeforeCall(writableConsolePort, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsolePort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsCreateAsync(WritableConsolePort writableConsolePort, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsCreateValidateBeforeCall(writableConsolePort, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsDelete
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsDelete(Async)");
        }

        return dcimConsolePortsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsolePortsDelete(Integer id) throws ApiException {
        dcimConsolePortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsolePortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsList
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsListCall(String name, String deviceId, String device, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsListValidateBeforeCall(String name, String deviceId, String device, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimConsolePortsListCall(name, deviceId, device, tag, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsoleConnectionsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsoleConnectionsList200Response dcimConsolePortsList(String name, String deviceId, String device, String tag, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsoleConnectionsList200Response> localVarResp = dcimConsolePortsListWithHttpInfo(name, deviceId, device, tag, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsoleConnectionsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsoleConnectionsList200Response> dcimConsolePortsListWithHttpInfo(String name, String deviceId, String device, String tag, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsListValidateBeforeCall(name, deviceId, device, tag, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsoleConnectionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsListAsync(String name, String deviceId, String device, String tag, Integer limit, Integer offset, final ApiCallback<DcimConsoleConnectionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsListValidateBeforeCall(name, deviceId, device, tag, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsoleConnectionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsPartialUpdate
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsPartialUpdateCall(Integer id, WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePort;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsPartialUpdateValidateBeforeCall(Integer id, WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableConsolePort' is set
        if (writableConsolePort == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsPartialUpdate(Async)");
        }

        return dcimConsolePortsPartialUpdateCall(id, writableConsolePort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsPartialUpdate(Integer id, WritableConsolePort writableConsolePort) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsPartialUpdateWithHttpInfo(id, writableConsolePort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsPartialUpdateWithHttpInfo(Integer id, WritableConsolePort writableConsolePort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsPartialUpdateValidateBeforeCall(id, writableConsolePort, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsPartialUpdateAsync(Integer id, WritableConsolePort writableConsolePort, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsPartialUpdateValidateBeforeCall(id, writableConsolePort, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsRead
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsRead(Async)");
        }

        return dcimConsolePortsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsRead(Integer id) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsReadAsync(Integer id, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsUpdate
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsUpdateCall(Integer id, WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePort;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsUpdateValidateBeforeCall(Integer id, WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsUpdate(Async)");
        }

        // verify the required parameter 'writableConsolePort' is set
        if (writableConsolePort == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsUpdate(Async)");
        }

        return dcimConsolePortsUpdateCall(id, writableConsolePort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsUpdate(Integer id, WritableConsolePort writableConsolePort) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsUpdateWithHttpInfo(id, writableConsolePort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsUpdateWithHttpInfo(Integer id, WritableConsolePort writableConsolePort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsUpdateValidateBeforeCall(id, writableConsolePort, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsUpdateAsync(Integer id, WritableConsolePort writableConsolePort, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsUpdateValidateBeforeCall(id, writableConsolePort, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesCreate
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesCreateCall(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesCreateValidateBeforeCall(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsoleServerPortTemplate' is set
        if (writableConsoleServerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesCreate(Async)");
        }

        return dcimConsoleServerPortTemplatesCreateCall(writableConsoleServerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableConsoleServerPortTemplate  (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesCreate(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesCreateWithHttpInfo(writableConsoleServerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsoleServerPortTemplate  (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesCreateWithHttpInfo(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesCreateValidateBeforeCall(writableConsoleServerPortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesCreateAsync(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesCreateValidateBeforeCall(writableConsoleServerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesDelete
     * @param id A unique integer value identifying this console server port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesDelete(Async)");
        }

        return dcimConsoleServerPortTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsoleServerPortTemplatesDelete(Integer id) throws ApiException {
        dcimConsoleServerPortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsoleServerPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesList
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesListCall(String name, String devicetypeId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesListValidateBeforeCall(String name, String devicetypeId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimConsoleServerPortTemplatesListCall(name, devicetypeId, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsoleServerPortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsoleServerPortTemplatesList200Response dcimConsoleServerPortTemplatesList(String name, String devicetypeId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsoleServerPortTemplatesList200Response> localVarResp = dcimConsoleServerPortTemplatesListWithHttpInfo(name, devicetypeId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsoleServerPortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsoleServerPortTemplatesList200Response> dcimConsoleServerPortTemplatesListWithHttpInfo(String name, String devicetypeId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesListValidateBeforeCall(name, devicetypeId, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsoleServerPortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesListAsync(String name, String devicetypeId, Integer limit, Integer offset, final ApiCallback<DcimConsoleServerPortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesListValidateBeforeCall(name, devicetypeId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsoleServerPortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesPartialUpdate
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesPartialUpdateCall(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableConsoleServerPortTemplate' is set
        if (writableConsoleServerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesPartialUpdate(Async)");
        }

        return dcimConsoleServerPortTemplatesPartialUpdateCall(id, writableConsoleServerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesPartialUpdate(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesPartialUpdateWithHttpInfo(id, writableConsoleServerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesPartialUpdateValidateBeforeCall(id, writableConsoleServerPortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesPartialUpdateAsync(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesPartialUpdateValidateBeforeCall(id, writableConsoleServerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesRead
     * @param id A unique integer value identifying this console server port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesRead(Async)");
        }

        return dcimConsoleServerPortTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesReadAsync(Integer id, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesUpdate
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesUpdateCall(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesUpdateValidateBeforeCall(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableConsoleServerPortTemplate' is set
        if (writableConsoleServerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesUpdate(Async)");
        }

        return dcimConsoleServerPortTemplatesUpdateCall(id, writableConsoleServerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesUpdate(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesUpdateWithHttpInfo(id, writableConsoleServerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesUpdateWithHttpInfo(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesUpdateValidateBeforeCall(id, writableConsoleServerPortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesUpdateAsync(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesUpdateValidateBeforeCall(id, writableConsoleServerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsCreate
     * @param writableConsoleServerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsCreateCall(WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPort;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsCreateValidateBeforeCall(WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsoleServerPort' is set
        if (writableConsoleServerPort == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsCreate(Async)");
        }

        return dcimConsoleServerPortsCreateCall(writableConsoleServerPort, _callback);

    }

    /**
     * 
     * 
     * @param writableConsoleServerPort  (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsCreate(WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsCreateWithHttpInfo(writableConsoleServerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsoleServerPort  (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsCreateWithHttpInfo(WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsCreateValidateBeforeCall(writableConsoleServerPort, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsoleServerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsCreateAsync(WritableConsoleServerPort writableConsoleServerPort, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsCreateValidateBeforeCall(writableConsoleServerPort, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsDelete
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsDelete(Async)");
        }

        return dcimConsoleServerPortsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsoleServerPortsDelete(Integer id) throws ApiException {
        dcimConsoleServerPortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsoleServerPortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsList
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsListCall(String name, String deviceId, String device, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsListValidateBeforeCall(String name, String deviceId, String device, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimConsoleServerPortsListCall(name, deviceId, device, tag, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsoleServerPortsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsoleServerPortsList200Response dcimConsoleServerPortsList(String name, String deviceId, String device, String tag, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsoleServerPortsList200Response> localVarResp = dcimConsoleServerPortsListWithHttpInfo(name, deviceId, device, tag, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsoleServerPortsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsoleServerPortsList200Response> dcimConsoleServerPortsListWithHttpInfo(String name, String deviceId, String device, String tag, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsListValidateBeforeCall(name, deviceId, device, tag, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsoleServerPortsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsListAsync(String name, String deviceId, String device, String tag, Integer limit, Integer offset, final ApiCallback<DcimConsoleServerPortsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsListValidateBeforeCall(name, deviceId, device, tag, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsoleServerPortsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsPartialUpdate
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsPartialUpdateCall(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPort;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsPartialUpdateValidateBeforeCall(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableConsoleServerPort' is set
        if (writableConsoleServerPort == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsPartialUpdate(Async)");
        }

        return dcimConsoleServerPortsPartialUpdateCall(id, writableConsoleServerPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsPartialUpdate(Integer id, WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsPartialUpdateWithHttpInfo(id, writableConsoleServerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsPartialUpdateWithHttpInfo(Integer id, WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsPartialUpdateValidateBeforeCall(id, writableConsoleServerPort, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsPartialUpdateAsync(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsPartialUpdateValidateBeforeCall(id, writableConsoleServerPort, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsRead
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsRead(Async)");
        }

        return dcimConsoleServerPortsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsRead(Integer id) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsReadAsync(Integer id, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsUpdate
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsUpdateCall(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPort;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsUpdateValidateBeforeCall(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsUpdate(Async)");
        }

        // verify the required parameter 'writableConsoleServerPort' is set
        if (writableConsoleServerPort == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsUpdate(Async)");
        }

        return dcimConsoleServerPortsUpdateCall(id, writableConsoleServerPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsUpdate(Integer id, WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsUpdateWithHttpInfo(id, writableConsoleServerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsUpdateWithHttpInfo(Integer id, WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsUpdateValidateBeforeCall(id, writableConsoleServerPort, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsUpdateAsync(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsUpdateValidateBeforeCall(id, writableConsoleServerPort, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesCreate
     * @param writableDeviceBayTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesCreateCall(WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBayTemplate;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesCreateValidateBeforeCall(WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceBayTemplate' is set
        if (writableDeviceBayTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesCreate(Async)");
        }

        return dcimDeviceBayTemplatesCreateCall(writableDeviceBayTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceBayTemplate  (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesCreate(WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesCreateWithHttpInfo(writableDeviceBayTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceBayTemplate  (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesCreateWithHttpInfo(WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesCreateValidateBeforeCall(writableDeviceBayTemplate, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceBayTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesCreateAsync(WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesCreateValidateBeforeCall(writableDeviceBayTemplate, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesDelete
     * @param id A unique integer value identifying this device bay template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesDelete(Async)");
        }

        return dcimDeviceBayTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceBayTemplatesDelete(Integer id) throws ApiException {
        dcimDeviceBayTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceBayTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesList
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesListCall(String name, String devicetypeId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesListValidateBeforeCall(String name, String devicetypeId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimDeviceBayTemplatesListCall(name, devicetypeId, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDeviceBayTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDeviceBayTemplatesList200Response dcimDeviceBayTemplatesList(String name, String devicetypeId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDeviceBayTemplatesList200Response> localVarResp = dcimDeviceBayTemplatesListWithHttpInfo(name, devicetypeId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDeviceBayTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDeviceBayTemplatesList200Response> dcimDeviceBayTemplatesListWithHttpInfo(String name, String devicetypeId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesListValidateBeforeCall(name, devicetypeId, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDeviceBayTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesListAsync(String name, String devicetypeId, Integer limit, Integer offset, final ApiCallback<DcimDeviceBayTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesListValidateBeforeCall(name, devicetypeId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDeviceBayTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesPartialUpdate
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesPartialUpdateCall(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBayTemplate;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceBayTemplate' is set
        if (writableDeviceBayTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesPartialUpdate(Async)");
        }

        return dcimDeviceBayTemplatesPartialUpdateCall(id, writableDeviceBayTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesPartialUpdate(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesPartialUpdateWithHttpInfo(id, writableDeviceBayTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesPartialUpdateWithHttpInfo(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesPartialUpdateValidateBeforeCall(id, writableDeviceBayTemplate, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesPartialUpdateAsync(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesPartialUpdateValidateBeforeCall(id, writableDeviceBayTemplate, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesRead
     * @param id A unique integer value identifying this device bay template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesRead(Async)");
        }

        return dcimDeviceBayTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesRead(Integer id) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesReadAsync(Integer id, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesUpdate
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesUpdateCall(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBayTemplate;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesUpdateValidateBeforeCall(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceBayTemplate' is set
        if (writableDeviceBayTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesUpdate(Async)");
        }

        return dcimDeviceBayTemplatesUpdateCall(id, writableDeviceBayTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesUpdate(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesUpdateWithHttpInfo(id, writableDeviceBayTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesUpdateWithHttpInfo(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesUpdateValidateBeforeCall(id, writableDeviceBayTemplate, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesUpdateAsync(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesUpdateValidateBeforeCall(id, writableDeviceBayTemplate, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysCreate
     * @param writableDeviceBay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysCreateCall(WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBay;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysCreateValidateBeforeCall(WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceBay' is set
        if (writableDeviceBay == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysCreate(Async)");
        }

        return dcimDeviceBaysCreateCall(writableDeviceBay, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceBay  (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysCreate(WritableDeviceBay writableDeviceBay) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysCreateWithHttpInfo(writableDeviceBay);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceBay  (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysCreateWithHttpInfo(WritableDeviceBay writableDeviceBay) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysCreateValidateBeforeCall(writableDeviceBay, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceBay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysCreateAsync(WritableDeviceBay writableDeviceBay, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysCreateValidateBeforeCall(writableDeviceBay, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysDelete
     * @param id A unique integer value identifying this device bay. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBaysDelete(Async)");
        }

        return dcimDeviceBaysDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceBaysDelete(Integer id) throws ApiException {
        dcimDeviceBaysDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceBaysDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysList
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysListCall(String name, String deviceId, String device, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysListValidateBeforeCall(String name, String deviceId, String device, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimDeviceBaysListCall(name, deviceId, device, tag, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDeviceBaysList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDeviceBaysList200Response dcimDeviceBaysList(String name, String deviceId, String device, String tag, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDeviceBaysList200Response> localVarResp = dcimDeviceBaysListWithHttpInfo(name, deviceId, device, tag, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDeviceBaysList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDeviceBaysList200Response> dcimDeviceBaysListWithHttpInfo(String name, String deviceId, String device, String tag, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysListValidateBeforeCall(name, deviceId, device, tag, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDeviceBaysList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysListAsync(String name, String deviceId, String device, String tag, Integer limit, Integer offset, final ApiCallback<DcimDeviceBaysList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysListValidateBeforeCall(name, deviceId, device, tag, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDeviceBaysList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysPartialUpdate
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysPartialUpdateCall(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBay;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysPartialUpdateValidateBeforeCall(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBaysPartialUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceBay' is set
        if (writableDeviceBay == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysPartialUpdate(Async)");
        }

        return dcimDeviceBaysPartialUpdateCall(id, writableDeviceBay, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysPartialUpdate(Integer id, WritableDeviceBay writableDeviceBay) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysPartialUpdateWithHttpInfo(id, writableDeviceBay);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysPartialUpdateWithHttpInfo(Integer id, WritableDeviceBay writableDeviceBay) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysPartialUpdateValidateBeforeCall(id, writableDeviceBay, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysPartialUpdateAsync(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysPartialUpdateValidateBeforeCall(id, writableDeviceBay, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysRead
     * @param id A unique integer value identifying this device bay. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBaysRead(Async)");
        }

        return dcimDeviceBaysReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysRead(Integer id) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysReadAsync(Integer id, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysUpdate
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysUpdateCall(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBay;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysUpdateValidateBeforeCall(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBaysUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceBay' is set
        if (writableDeviceBay == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysUpdate(Async)");
        }

        return dcimDeviceBaysUpdateCall(id, writableDeviceBay, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysUpdate(Integer id, WritableDeviceBay writableDeviceBay) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysUpdateWithHttpInfo(id, writableDeviceBay);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysUpdateWithHttpInfo(Integer id, WritableDeviceBay writableDeviceBay) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysUpdateValidateBeforeCall(id, writableDeviceBay, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysUpdateAsync(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysUpdateValidateBeforeCall(id, writableDeviceBay, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesCreate
     * @param deviceRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesCreateCall(DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceRole;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesCreateValidateBeforeCall(DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceRole' is set
        if (deviceRole == null) {
            throw new ApiException("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesCreate(Async)");
        }

        return dcimDeviceRolesCreateCall(deviceRole, _callback);

    }

    /**
     * 
     * 
     * @param deviceRole  (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesCreate(DeviceRole deviceRole) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesCreateWithHttpInfo(deviceRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deviceRole  (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesCreateWithHttpInfo(DeviceRole deviceRole) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesCreateValidateBeforeCall(deviceRole, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deviceRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesCreateAsync(DeviceRole deviceRole, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesCreateValidateBeforeCall(deviceRole, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesDelete
     * @param id A unique integer value identifying this device role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceRolesDelete(Async)");
        }

        return dcimDeviceRolesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceRolesDelete(Integer id) throws ApiException {
        dcimDeviceRolesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceRolesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesList
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param vmRole  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesListCall(String name, String slug, String color, String vmRole, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (vmRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vm_role", vmRole));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesListValidateBeforeCall(String name, String slug, String color, String vmRole, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimDeviceRolesListCall(name, slug, color, vmRole, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param vmRole  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDeviceRolesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDeviceRolesList200Response dcimDeviceRolesList(String name, String slug, String color, String vmRole, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDeviceRolesList200Response> localVarResp = dcimDeviceRolesListWithHttpInfo(name, slug, color, vmRole, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param vmRole  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDeviceRolesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDeviceRolesList200Response> dcimDeviceRolesListWithHttpInfo(String name, String slug, String color, String vmRole, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesListValidateBeforeCall(name, slug, color, vmRole, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDeviceRolesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param vmRole  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesListAsync(String name, String slug, String color, String vmRole, Integer limit, Integer offset, final ApiCallback<DcimDeviceRolesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesListValidateBeforeCall(name, slug, color, vmRole, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDeviceRolesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesPartialUpdate
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesPartialUpdateCall(Integer id, DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceRole;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesPartialUpdateValidateBeforeCall(Integer id, DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceRolesPartialUpdate(Async)");
        }

        // verify the required parameter 'deviceRole' is set
        if (deviceRole == null) {
            throw new ApiException("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesPartialUpdate(Async)");
        }

        return dcimDeviceRolesPartialUpdateCall(id, deviceRole, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesPartialUpdate(Integer id, DeviceRole deviceRole) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesPartialUpdateWithHttpInfo(id, deviceRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesPartialUpdateWithHttpInfo(Integer id, DeviceRole deviceRole) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesPartialUpdateValidateBeforeCall(id, deviceRole, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesPartialUpdateAsync(Integer id, DeviceRole deviceRole, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesPartialUpdateValidateBeforeCall(id, deviceRole, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesRead
     * @param id A unique integer value identifying this device role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceRolesRead(Async)");
        }

        return dcimDeviceRolesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesRead(Integer id) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesReadAsync(Integer id, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesUpdate
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesUpdateCall(Integer id, DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceRole;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesUpdateValidateBeforeCall(Integer id, DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceRolesUpdate(Async)");
        }

        // verify the required parameter 'deviceRole' is set
        if (deviceRole == null) {
            throw new ApiException("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesUpdate(Async)");
        }

        return dcimDeviceRolesUpdateCall(id, deviceRole, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesUpdate(Integer id, DeviceRole deviceRole) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesUpdateWithHttpInfo(id, deviceRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesUpdateWithHttpInfo(Integer id, DeviceRole deviceRole) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesUpdateValidateBeforeCall(id, deviceRole, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesUpdateAsync(Integer id, DeviceRole deviceRole, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesUpdateValidateBeforeCall(id, deviceRole, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesCreate
     * @param writableDeviceType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesCreateCall(WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceType;

        // create path and map variables
        String localVarPath = "/dcim/device-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesCreateValidateBeforeCall(WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceType' is set
        if (writableDeviceType == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesCreate(Async)");
        }

        return dcimDeviceTypesCreateCall(writableDeviceType, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceType  (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesCreate(WritableDeviceType writableDeviceType) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesCreateWithHttpInfo(writableDeviceType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceType  (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesCreateWithHttpInfo(WritableDeviceType writableDeviceType) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesCreateValidateBeforeCall(writableDeviceType, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesCreateAsync(WritableDeviceType writableDeviceType, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesCreateValidateBeforeCall(writableDeviceType, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesDelete
     * @param id A unique integer value identifying this device type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceTypesDelete(Async)");
        }

        return dcimDeviceTypesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceTypesDelete(Integer id) throws ApiException {
        dcimDeviceTypesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceTypesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesList
     * @param model  (optional)
     * @param slug  (optional)
     * @param partNumber  (optional)
     * @param uHeight  (optional)
     * @param isFullDepth  (optional)
     * @param isConsoleServer  (optional)
     * @param isPdu  (optional)
     * @param isNetworkDevice  (optional)
     * @param subdeviceRole  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesListCall(String model, String slug, String partNumber, BigDecimal uHeight, String isFullDepth, String isConsoleServer, String isPdu, String isNetworkDevice, String subdeviceRole, String idIn, String q, String manufacturerId, String manufacturer, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (partNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number", partNumber));
        }

        if (uHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height", uHeight));
        }

        if (isFullDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_full_depth", isFullDepth));
        }

        if (isConsoleServer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_console_server", isConsoleServer));
        }

        if (isPdu != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_pdu", isPdu));
        }

        if (isNetworkDevice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_network_device", isNetworkDevice));
        }

        if (subdeviceRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subdevice_role", subdeviceRole));
        }

        if (idIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__in", idIn));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesListValidateBeforeCall(String model, String slug, String partNumber, BigDecimal uHeight, String isFullDepth, String isConsoleServer, String isPdu, String isNetworkDevice, String subdeviceRole, String idIn, String q, String manufacturerId, String manufacturer, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimDeviceTypesListCall(model, slug, partNumber, uHeight, isFullDepth, isConsoleServer, isPdu, isNetworkDevice, subdeviceRole, idIn, q, manufacturerId, manufacturer, tag, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param model  (optional)
     * @param slug  (optional)
     * @param partNumber  (optional)
     * @param uHeight  (optional)
     * @param isFullDepth  (optional)
     * @param isConsoleServer  (optional)
     * @param isPdu  (optional)
     * @param isNetworkDevice  (optional)
     * @param subdeviceRole  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDeviceTypesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDeviceTypesList200Response dcimDeviceTypesList(String model, String slug, String partNumber, BigDecimal uHeight, String isFullDepth, String isConsoleServer, String isPdu, String isNetworkDevice, String subdeviceRole, String idIn, String q, String manufacturerId, String manufacturer, String tag, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDeviceTypesList200Response> localVarResp = dcimDeviceTypesListWithHttpInfo(model, slug, partNumber, uHeight, isFullDepth, isConsoleServer, isPdu, isNetworkDevice, subdeviceRole, idIn, q, manufacturerId, manufacturer, tag, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param model  (optional)
     * @param slug  (optional)
     * @param partNumber  (optional)
     * @param uHeight  (optional)
     * @param isFullDepth  (optional)
     * @param isConsoleServer  (optional)
     * @param isPdu  (optional)
     * @param isNetworkDevice  (optional)
     * @param subdeviceRole  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDeviceTypesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDeviceTypesList200Response> dcimDeviceTypesListWithHttpInfo(String model, String slug, String partNumber, BigDecimal uHeight, String isFullDepth, String isConsoleServer, String isPdu, String isNetworkDevice, String subdeviceRole, String idIn, String q, String manufacturerId, String manufacturer, String tag, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesListValidateBeforeCall(model, slug, partNumber, uHeight, isFullDepth, isConsoleServer, isPdu, isNetworkDevice, subdeviceRole, idIn, q, manufacturerId, manufacturer, tag, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDeviceTypesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param model  (optional)
     * @param slug  (optional)
     * @param partNumber  (optional)
     * @param uHeight  (optional)
     * @param isFullDepth  (optional)
     * @param isConsoleServer  (optional)
     * @param isPdu  (optional)
     * @param isNetworkDevice  (optional)
     * @param subdeviceRole  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesListAsync(String model, String slug, String partNumber, BigDecimal uHeight, String isFullDepth, String isConsoleServer, String isPdu, String isNetworkDevice, String subdeviceRole, String idIn, String q, String manufacturerId, String manufacturer, String tag, Integer limit, Integer offset, final ApiCallback<DcimDeviceTypesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesListValidateBeforeCall(model, slug, partNumber, uHeight, isFullDepth, isConsoleServer, isPdu, isNetworkDevice, subdeviceRole, idIn, q, manufacturerId, manufacturer, tag, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDeviceTypesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesPartialUpdate
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesPartialUpdateCall(Integer id, WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceType;

        // create path and map variables
        String localVarPath = "/dcim/device-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesPartialUpdateValidateBeforeCall(Integer id, WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceTypesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceType' is set
        if (writableDeviceType == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesPartialUpdate(Async)");
        }

        return dcimDeviceTypesPartialUpdateCall(id, writableDeviceType, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesPartialUpdate(Integer id, WritableDeviceType writableDeviceType) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesPartialUpdateWithHttpInfo(id, writableDeviceType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesPartialUpdateWithHttpInfo(Integer id, WritableDeviceType writableDeviceType) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesPartialUpdateValidateBeforeCall(id, writableDeviceType, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesPartialUpdateAsync(Integer id, WritableDeviceType writableDeviceType, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesPartialUpdateValidateBeforeCall(id, writableDeviceType, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesRead
     * @param id A unique integer value identifying this device type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceTypesRead(Async)");
        }

        return dcimDeviceTypesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesRead(Integer id) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesReadAsync(Integer id, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesUpdate
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesUpdateCall(Integer id, WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceType;

        // create path and map variables
        String localVarPath = "/dcim/device-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesUpdateValidateBeforeCall(Integer id, WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceTypesUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceType' is set
        if (writableDeviceType == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesUpdate(Async)");
        }

        return dcimDeviceTypesUpdateCall(id, writableDeviceType, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesUpdate(Integer id, WritableDeviceType writableDeviceType) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesUpdateWithHttpInfo(id, writableDeviceType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesUpdateWithHttpInfo(Integer id, WritableDeviceType writableDeviceType) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesUpdateValidateBeforeCall(id, writableDeviceType, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesUpdateAsync(Integer id, WritableDeviceType writableDeviceType, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesUpdateValidateBeforeCall(id, writableDeviceType, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesCreate
     * @param writableDevice  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesCreateCall(WritableDevice writableDevice, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDevice;

        // create path and map variables
        String localVarPath = "/dcim/devices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesCreateValidateBeforeCall(WritableDevice writableDevice, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDevice' is set
        if (writableDevice == null) {
            throw new ApiException("Missing the required parameter 'writableDevice' when calling dcimDevicesCreate(Async)");
        }

        return dcimDevicesCreateCall(writableDevice, _callback);

    }

    /**
     * 
     * 
     * @param writableDevice  (required)
     * @return Device
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Device dcimDevicesCreate(WritableDevice writableDevice) throws ApiException {
        ApiResponse<Device> localVarResp = dcimDevicesCreateWithHttpInfo(writableDevice);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDevice  (required)
     * @return ApiResponse&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Device> dcimDevicesCreateWithHttpInfo(WritableDevice writableDevice) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesCreateValidateBeforeCall(writableDevice, null);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDevice  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesCreateAsync(WritableDevice writableDevice, final ApiCallback<Device> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesCreateValidateBeforeCall(writableDevice, _callback);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesDelete
     * @param id A unique integer value identifying this device. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesDelete(Async)");
        }

        return dcimDevicesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDevicesDelete(Integer id) throws ApiException {
        dcimDevicesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDevicesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesList
     * @param serial  (optional)
     * @param position  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param name  (optional)
     * @param assetTag  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param rackGroupId  (optional)
     * @param rackId  (optional)
     * @param clusterId  (optional)
     * @param model  (optional)
     * @param status  (optional)
     * @param isFullDepth  (optional)
     * @param isConsoleServer  (optional)
     * @param isPdu  (optional)
     * @param isNetworkDevice  (optional)
     * @param macAddress  (optional)
     * @param hasPrimaryIp  (optional)
     * @param virtualChassisId  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesListCall(String serial, BigDecimal position, String idIn, String q, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String tenantId, String tenant, String platformId, String platform, String name, String assetTag, BigDecimal regionId, String region, String siteId, String site, String rackGroupId, String rackId, String clusterId, String model, String status, String isFullDepth, String isConsoleServer, String isPdu, String isNetworkDevice, String macAddress, String hasPrimaryIp, String virtualChassisId, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (idIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__in", idIn));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (deviceTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_type_id", deviceTypeId));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (platformId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform_id", platformId));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (assetTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag", assetTag));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (rackGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_group_id", rackGroupId));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (clusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id", clusterId));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (isFullDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_full_depth", isFullDepth));
        }

        if (isConsoleServer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_console_server", isConsoleServer));
        }

        if (isPdu != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_pdu", isPdu));
        }

        if (isNetworkDevice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_network_device", isNetworkDevice));
        }

        if (macAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address", macAddress));
        }

        if (hasPrimaryIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_primary_ip", hasPrimaryIp));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesListValidateBeforeCall(String serial, BigDecimal position, String idIn, String q, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String tenantId, String tenant, String platformId, String platform, String name, String assetTag, BigDecimal regionId, String region, String siteId, String site, String rackGroupId, String rackId, String clusterId, String model, String status, String isFullDepth, String isConsoleServer, String isPdu, String isNetworkDevice, String macAddress, String hasPrimaryIp, String virtualChassisId, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimDevicesListCall(serial, position, idIn, q, manufacturerId, manufacturer, deviceTypeId, roleId, role, tenantId, tenant, platformId, platform, name, assetTag, regionId, region, siteId, site, rackGroupId, rackId, clusterId, model, status, isFullDepth, isConsoleServer, isPdu, isNetworkDevice, macAddress, hasPrimaryIp, virtualChassisId, tag, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param serial  (optional)
     * @param position  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param name  (optional)
     * @param assetTag  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param rackGroupId  (optional)
     * @param rackId  (optional)
     * @param clusterId  (optional)
     * @param model  (optional)
     * @param status  (optional)
     * @param isFullDepth  (optional)
     * @param isConsoleServer  (optional)
     * @param isPdu  (optional)
     * @param isNetworkDevice  (optional)
     * @param macAddress  (optional)
     * @param hasPrimaryIp  (optional)
     * @param virtualChassisId  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDevicesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDevicesList200Response dcimDevicesList(String serial, BigDecimal position, String idIn, String q, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String tenantId, String tenant, String platformId, String platform, String name, String assetTag, BigDecimal regionId, String region, String siteId, String site, String rackGroupId, String rackId, String clusterId, String model, String status, String isFullDepth, String isConsoleServer, String isPdu, String isNetworkDevice, String macAddress, String hasPrimaryIp, String virtualChassisId, String tag, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDevicesList200Response> localVarResp = dcimDevicesListWithHttpInfo(serial, position, idIn, q, manufacturerId, manufacturer, deviceTypeId, roleId, role, tenantId, tenant, platformId, platform, name, assetTag, regionId, region, siteId, site, rackGroupId, rackId, clusterId, model, status, isFullDepth, isConsoleServer, isPdu, isNetworkDevice, macAddress, hasPrimaryIp, virtualChassisId, tag, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serial  (optional)
     * @param position  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param name  (optional)
     * @param assetTag  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param rackGroupId  (optional)
     * @param rackId  (optional)
     * @param clusterId  (optional)
     * @param model  (optional)
     * @param status  (optional)
     * @param isFullDepth  (optional)
     * @param isConsoleServer  (optional)
     * @param isPdu  (optional)
     * @param isNetworkDevice  (optional)
     * @param macAddress  (optional)
     * @param hasPrimaryIp  (optional)
     * @param virtualChassisId  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDevicesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDevicesList200Response> dcimDevicesListWithHttpInfo(String serial, BigDecimal position, String idIn, String q, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String tenantId, String tenant, String platformId, String platform, String name, String assetTag, BigDecimal regionId, String region, String siteId, String site, String rackGroupId, String rackId, String clusterId, String model, String status, String isFullDepth, String isConsoleServer, String isPdu, String isNetworkDevice, String macAddress, String hasPrimaryIp, String virtualChassisId, String tag, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesListValidateBeforeCall(serial, position, idIn, q, manufacturerId, manufacturer, deviceTypeId, roleId, role, tenantId, tenant, platformId, platform, name, assetTag, regionId, region, siteId, site, rackGroupId, rackId, clusterId, model, status, isFullDepth, isConsoleServer, isPdu, isNetworkDevice, macAddress, hasPrimaryIp, virtualChassisId, tag, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDevicesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serial  (optional)
     * @param position  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param name  (optional)
     * @param assetTag  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param rackGroupId  (optional)
     * @param rackId  (optional)
     * @param clusterId  (optional)
     * @param model  (optional)
     * @param status  (optional)
     * @param isFullDepth  (optional)
     * @param isConsoleServer  (optional)
     * @param isPdu  (optional)
     * @param isNetworkDevice  (optional)
     * @param macAddress  (optional)
     * @param hasPrimaryIp  (optional)
     * @param virtualChassisId  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesListAsync(String serial, BigDecimal position, String idIn, String q, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String tenantId, String tenant, String platformId, String platform, String name, String assetTag, BigDecimal regionId, String region, String siteId, String site, String rackGroupId, String rackId, String clusterId, String model, String status, String isFullDepth, String isConsoleServer, String isPdu, String isNetworkDevice, String macAddress, String hasPrimaryIp, String virtualChassisId, String tag, Integer limit, Integer offset, final ApiCallback<DcimDevicesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesListValidateBeforeCall(serial, position, idIn, q, manufacturerId, manufacturer, deviceTypeId, roleId, role, tenantId, tenant, platformId, platform, name, assetTag, regionId, region, siteId, site, rackGroupId, rackId, clusterId, model, status, isFullDepth, isConsoleServer, isPdu, isNetworkDevice, macAddress, hasPrimaryIp, virtualChassisId, tag, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDevicesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesNapalm
     * @param id A unique integer value identifying this device. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesNapalmCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/napalm/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesNapalmValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesNapalm(Async)");
        }

        return dcimDevicesNapalmCall(id, _callback);

    }

    /**
     * 
     * Execute a NAPALM method on a Device
     * @param id A unique integer value identifying this device. (required)
     * @return Device
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Device dcimDevicesNapalm(Integer id) throws ApiException {
        ApiResponse<Device> localVarResp = dcimDevicesNapalmWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Execute a NAPALM method on a Device
     * @param id A unique integer value identifying this device. (required)
     * @return ApiResponse&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Device> dcimDevicesNapalmWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesNapalmValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Execute a NAPALM method on a Device
     * @param id A unique integer value identifying this device. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesNapalmAsync(Integer id, final ApiCallback<Device> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesNapalmValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesPartialUpdate
     * @param id A unique integer value identifying this device. (required)
     * @param writableDevice  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesPartialUpdateCall(Integer id, WritableDevice writableDevice, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDevice;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesPartialUpdateValidateBeforeCall(Integer id, WritableDevice writableDevice, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableDevice' is set
        if (writableDevice == null) {
            throw new ApiException("Missing the required parameter 'writableDevice' when calling dcimDevicesPartialUpdate(Async)");
        }

        return dcimDevicesPartialUpdateCall(id, writableDevice, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDevice  (required)
     * @return Device
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Device dcimDevicesPartialUpdate(Integer id, WritableDevice writableDevice) throws ApiException {
        ApiResponse<Device> localVarResp = dcimDevicesPartialUpdateWithHttpInfo(id, writableDevice);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDevice  (required)
     * @return ApiResponse&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Device> dcimDevicesPartialUpdateWithHttpInfo(Integer id, WritableDevice writableDevice) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesPartialUpdateValidateBeforeCall(id, writableDevice, null);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDevice  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesPartialUpdateAsync(Integer id, WritableDevice writableDevice, final ApiCallback<Device> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesPartialUpdateValidateBeforeCall(id, writableDevice, _callback);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesRead
     * @param id A unique integer value identifying this device. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesRead(Async)");
        }

        return dcimDevicesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesRead(Integer id) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesReadAsync(Integer id, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesUpdate
     * @param id A unique integer value identifying this device. (required)
     * @param writableDevice  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesUpdateCall(Integer id, WritableDevice writableDevice, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDevice;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesUpdateValidateBeforeCall(Integer id, WritableDevice writableDevice, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesUpdate(Async)");
        }

        // verify the required parameter 'writableDevice' is set
        if (writableDevice == null) {
            throw new ApiException("Missing the required parameter 'writableDevice' when calling dcimDevicesUpdate(Async)");
        }

        return dcimDevicesUpdateCall(id, writableDevice, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDevice  (required)
     * @return Device
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Device dcimDevicesUpdate(Integer id, WritableDevice writableDevice) throws ApiException {
        ApiResponse<Device> localVarResp = dcimDevicesUpdateWithHttpInfo(id, writableDevice);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDevice  (required)
     * @return ApiResponse&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Device> dcimDevicesUpdateWithHttpInfo(Integer id, WritableDevice writableDevice) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesUpdateValidateBeforeCall(id, writableDevice, null);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDevice  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesUpdateAsync(Integer id, WritableDevice writableDevice, final ApiCallback<Device> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesUpdateValidateBeforeCall(id, writableDevice, _callback);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceConnectionsCreate
     * @param writableInterfaceConnection  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceConnectionsCreateCall(WritableInterfaceConnection writableInterfaceConnection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterfaceConnection;

        // create path and map variables
        String localVarPath = "/dcim/interface-connections/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceConnectionsCreateValidateBeforeCall(WritableInterfaceConnection writableInterfaceConnection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInterfaceConnection' is set
        if (writableInterfaceConnection == null) {
            throw new ApiException("Missing the required parameter 'writableInterfaceConnection' when calling dcimInterfaceConnectionsCreate(Async)");
        }

        return dcimInterfaceConnectionsCreateCall(writableInterfaceConnection, _callback);

    }

    /**
     * 
     * 
     * @param writableInterfaceConnection  (required)
     * @return InterfaceConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceConnection dcimInterfaceConnectionsCreate(WritableInterfaceConnection writableInterfaceConnection) throws ApiException {
        ApiResponse<InterfaceConnection> localVarResp = dcimInterfaceConnectionsCreateWithHttpInfo(writableInterfaceConnection);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInterfaceConnection  (required)
     * @return ApiResponse&lt;InterfaceConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceConnection> dcimInterfaceConnectionsCreateWithHttpInfo(WritableInterfaceConnection writableInterfaceConnection) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceConnectionsCreateValidateBeforeCall(writableInterfaceConnection, null);
        Type localVarReturnType = new TypeToken<InterfaceConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInterfaceConnection  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceConnectionsCreateAsync(WritableInterfaceConnection writableInterfaceConnection, final ApiCallback<InterfaceConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceConnectionsCreateValidateBeforeCall(writableInterfaceConnection, _callback);
        Type localVarReturnType = new TypeToken<InterfaceConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceConnectionsDelete
     * @param id A unique integer value identifying this interface connection. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceConnectionsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-connections/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceConnectionsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceConnectionsDelete(Async)");
        }

        return dcimInterfaceConnectionsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface connection. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInterfaceConnectionsDelete(Integer id) throws ApiException {
        dcimInterfaceConnectionsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface connection. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInterfaceConnectionsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceConnectionsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface connection. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceConnectionsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceConnectionsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceConnectionsList
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param device  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceConnectionsListCall(String connectionStatus, String site, String device, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-connections/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (connectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status", connectionStatus));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceConnectionsListValidateBeforeCall(String connectionStatus, String site, String device, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimInterfaceConnectionsListCall(connectionStatus, site, device, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param device  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInterfaceConnectionsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInterfaceConnectionsList200Response dcimInterfaceConnectionsList(String connectionStatus, String site, String device, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInterfaceConnectionsList200Response> localVarResp = dcimInterfaceConnectionsListWithHttpInfo(connectionStatus, site, device, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param device  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInterfaceConnectionsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInterfaceConnectionsList200Response> dcimInterfaceConnectionsListWithHttpInfo(String connectionStatus, String site, String device, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceConnectionsListValidateBeforeCall(connectionStatus, site, device, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInterfaceConnectionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param device  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceConnectionsListAsync(String connectionStatus, String site, String device, Integer limit, Integer offset, final ApiCallback<DcimInterfaceConnectionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceConnectionsListValidateBeforeCall(connectionStatus, site, device, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInterfaceConnectionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceConnectionsPartialUpdate
     * @param id A unique integer value identifying this interface connection. (required)
     * @param writableInterfaceConnection  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceConnectionsPartialUpdateCall(Integer id, WritableInterfaceConnection writableInterfaceConnection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterfaceConnection;

        // create path and map variables
        String localVarPath = "/dcim/interface-connections/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceConnectionsPartialUpdateValidateBeforeCall(Integer id, WritableInterfaceConnection writableInterfaceConnection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceConnectionsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableInterfaceConnection' is set
        if (writableInterfaceConnection == null) {
            throw new ApiException("Missing the required parameter 'writableInterfaceConnection' when calling dcimInterfaceConnectionsPartialUpdate(Async)");
        }

        return dcimInterfaceConnectionsPartialUpdateCall(id, writableInterfaceConnection, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface connection. (required)
     * @param writableInterfaceConnection  (required)
     * @return InterfaceConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceConnection dcimInterfaceConnectionsPartialUpdate(Integer id, WritableInterfaceConnection writableInterfaceConnection) throws ApiException {
        ApiResponse<InterfaceConnection> localVarResp = dcimInterfaceConnectionsPartialUpdateWithHttpInfo(id, writableInterfaceConnection);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface connection. (required)
     * @param writableInterfaceConnection  (required)
     * @return ApiResponse&lt;InterfaceConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceConnection> dcimInterfaceConnectionsPartialUpdateWithHttpInfo(Integer id, WritableInterfaceConnection writableInterfaceConnection) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceConnectionsPartialUpdateValidateBeforeCall(id, writableInterfaceConnection, null);
        Type localVarReturnType = new TypeToken<InterfaceConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface connection. (required)
     * @param writableInterfaceConnection  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceConnectionsPartialUpdateAsync(Integer id, WritableInterfaceConnection writableInterfaceConnection, final ApiCallback<InterfaceConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceConnectionsPartialUpdateValidateBeforeCall(id, writableInterfaceConnection, _callback);
        Type localVarReturnType = new TypeToken<InterfaceConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceConnectionsRead
     * @param id A unique integer value identifying this interface connection. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceConnectionsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-connections/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceConnectionsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceConnectionsRead(Async)");
        }

        return dcimInterfaceConnectionsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface connection. (required)
     * @return InterfaceConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceConnection dcimInterfaceConnectionsRead(Integer id) throws ApiException {
        ApiResponse<InterfaceConnection> localVarResp = dcimInterfaceConnectionsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface connection. (required)
     * @return ApiResponse&lt;InterfaceConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceConnection> dcimInterfaceConnectionsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceConnectionsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InterfaceConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface connection. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceConnectionsReadAsync(Integer id, final ApiCallback<InterfaceConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceConnectionsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InterfaceConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceConnectionsUpdate
     * @param id A unique integer value identifying this interface connection. (required)
     * @param writableInterfaceConnection  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceConnectionsUpdateCall(Integer id, WritableInterfaceConnection writableInterfaceConnection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterfaceConnection;

        // create path and map variables
        String localVarPath = "/dcim/interface-connections/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceConnectionsUpdateValidateBeforeCall(Integer id, WritableInterfaceConnection writableInterfaceConnection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceConnectionsUpdate(Async)");
        }

        // verify the required parameter 'writableInterfaceConnection' is set
        if (writableInterfaceConnection == null) {
            throw new ApiException("Missing the required parameter 'writableInterfaceConnection' when calling dcimInterfaceConnectionsUpdate(Async)");
        }

        return dcimInterfaceConnectionsUpdateCall(id, writableInterfaceConnection, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface connection. (required)
     * @param writableInterfaceConnection  (required)
     * @return InterfaceConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceConnection dcimInterfaceConnectionsUpdate(Integer id, WritableInterfaceConnection writableInterfaceConnection) throws ApiException {
        ApiResponse<InterfaceConnection> localVarResp = dcimInterfaceConnectionsUpdateWithHttpInfo(id, writableInterfaceConnection);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface connection. (required)
     * @param writableInterfaceConnection  (required)
     * @return ApiResponse&lt;InterfaceConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceConnection> dcimInterfaceConnectionsUpdateWithHttpInfo(Integer id, WritableInterfaceConnection writableInterfaceConnection) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceConnectionsUpdateValidateBeforeCall(id, writableInterfaceConnection, null);
        Type localVarReturnType = new TypeToken<InterfaceConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface connection. (required)
     * @param writableInterfaceConnection  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceConnectionsUpdateAsync(Integer id, WritableInterfaceConnection writableInterfaceConnection, final ApiCallback<InterfaceConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceConnectionsUpdateValidateBeforeCall(id, writableInterfaceConnection, _callback);
        Type localVarReturnType = new TypeToken<InterfaceConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesCreate
     * @param writableInterfaceTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesCreateCall(WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterfaceTemplate;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesCreateValidateBeforeCall(WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInterfaceTemplate' is set
        if (writableInterfaceTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesCreate(Async)");
        }

        return dcimInterfaceTemplatesCreateCall(writableInterfaceTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableInterfaceTemplate  (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesCreate(WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesCreateWithHttpInfo(writableInterfaceTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInterfaceTemplate  (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesCreateWithHttpInfo(WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesCreateValidateBeforeCall(writableInterfaceTemplate, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInterfaceTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesCreateAsync(WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesCreateValidateBeforeCall(writableInterfaceTemplate, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesDelete
     * @param id A unique integer value identifying this interface template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceTemplatesDelete(Async)");
        }

        return dcimInterfaceTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInterfaceTemplatesDelete(Integer id) throws ApiException {
        dcimInterfaceTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInterfaceTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesList
     * @param name  (optional)
     * @param formFactor  (optional)
     * @param mgmtOnly  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesListCall(String name, String formFactor, String mgmtOnly, String devicetypeId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (formFactor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("form_factor", formFactor));
        }

        if (mgmtOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mgmt_only", mgmtOnly));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesListValidateBeforeCall(String name, String formFactor, String mgmtOnly, String devicetypeId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimInterfaceTemplatesListCall(name, formFactor, mgmtOnly, devicetypeId, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param formFactor  (optional)
     * @param mgmtOnly  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInterfaceTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInterfaceTemplatesList200Response dcimInterfaceTemplatesList(String name, String formFactor, String mgmtOnly, String devicetypeId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInterfaceTemplatesList200Response> localVarResp = dcimInterfaceTemplatesListWithHttpInfo(name, formFactor, mgmtOnly, devicetypeId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param formFactor  (optional)
     * @param mgmtOnly  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInterfaceTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInterfaceTemplatesList200Response> dcimInterfaceTemplatesListWithHttpInfo(String name, String formFactor, String mgmtOnly, String devicetypeId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesListValidateBeforeCall(name, formFactor, mgmtOnly, devicetypeId, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInterfaceTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param formFactor  (optional)
     * @param mgmtOnly  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesListAsync(String name, String formFactor, String mgmtOnly, String devicetypeId, Integer limit, Integer offset, final ApiCallback<DcimInterfaceTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesListValidateBeforeCall(name, formFactor, mgmtOnly, devicetypeId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInterfaceTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesPartialUpdate
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesPartialUpdateCall(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterfaceTemplate;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableInterfaceTemplate' is set
        if (writableInterfaceTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesPartialUpdate(Async)");
        }

        return dcimInterfaceTemplatesPartialUpdateCall(id, writableInterfaceTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesPartialUpdate(Integer id, WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesPartialUpdateWithHttpInfo(id, writableInterfaceTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesPartialUpdateWithHttpInfo(Integer id, WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesPartialUpdateValidateBeforeCall(id, writableInterfaceTemplate, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesPartialUpdateAsync(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesPartialUpdateValidateBeforeCall(id, writableInterfaceTemplate, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesRead
     * @param id A unique integer value identifying this interface template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceTemplatesRead(Async)");
        }

        return dcimInterfaceTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesRead(Integer id) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesReadAsync(Integer id, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesUpdate
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesUpdateCall(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterfaceTemplate;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesUpdateValidateBeforeCall(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableInterfaceTemplate' is set
        if (writableInterfaceTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesUpdate(Async)");
        }

        return dcimInterfaceTemplatesUpdateCall(id, writableInterfaceTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesUpdate(Integer id, WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesUpdateWithHttpInfo(id, writableInterfaceTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesUpdateWithHttpInfo(Integer id, WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesUpdateValidateBeforeCall(id, writableInterfaceTemplate, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesUpdateAsync(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesUpdateValidateBeforeCall(id, writableInterfaceTemplate, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesCreate
     * @param writableInterface  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesCreateCall(WritableInterface writableInterface, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterface;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesCreateValidateBeforeCall(WritableInterface writableInterface, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInterface' is set
        if (writableInterface == null) {
            throw new ApiException("Missing the required parameter 'writableInterface' when calling dcimInterfacesCreate(Async)");
        }

        return dcimInterfacesCreateCall(writableInterface, _callback);

    }

    /**
     * 
     * 
     * @param writableInterface  (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesCreate(WritableInterface writableInterface) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesCreateWithHttpInfo(writableInterface);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInterface  (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesCreateWithHttpInfo(WritableInterface writableInterface) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesCreateValidateBeforeCall(writableInterface, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInterface  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesCreateAsync(WritableInterface writableInterface, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesCreateValidateBeforeCall(writableInterface, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesDelete
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesDelete(Async)");
        }

        return dcimInterfacesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInterfacesDelete(Integer id) throws ApiException {
        dcimInterfacesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInterfacesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesGraphs
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesGraphsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/graphs/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesGraphsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesGraphs(Async)");
        }

        return dcimInterfacesGraphsCall(id, _callback);

    }

    /**
     * 
     * A convenience method for rendering graphs for a particular interface.
     * @param id A unique integer value identifying this interface. (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesGraphs(Integer id) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesGraphsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * A convenience method for rendering graphs for a particular interface.
     * @param id A unique integer value identifying this interface. (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesGraphsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesGraphsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A convenience method for rendering graphs for a particular interface.
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesGraphsAsync(Integer id, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesGraphsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesList
     * @param name  (optional)
     * @param enabled  (optional)
     * @param mtu  (optional)
     * @param mgmtOnly  (optional)
     * @param device  (optional)
     * @param deviceId  (optional)
     * @param type  (optional)
     * @param lagId  (optional)
     * @param macAddress  (optional)
     * @param tag  (optional)
     * @param vlanId  (optional)
     * @param vlan  (optional)
     * @param formFactor  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesListCall(String name, String enabled, BigDecimal mtu, String mgmtOnly, String device, BigDecimal deviceId, String type, String lagId, String macAddress, String tag, String vlanId, String vlan, String formFactor, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        if (mtu != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu", mtu));
        }

        if (mgmtOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mgmt_only", mgmtOnly));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (lagId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lag_id", lagId));
        }

        if (macAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address", macAddress));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (vlanId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_id", vlanId));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (formFactor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("form_factor", formFactor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesListValidateBeforeCall(String name, String enabled, BigDecimal mtu, String mgmtOnly, String device, BigDecimal deviceId, String type, String lagId, String macAddress, String tag, String vlanId, String vlan, String formFactor, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimInterfacesListCall(name, enabled, mtu, mgmtOnly, device, deviceId, type, lagId, macAddress, tag, vlanId, vlan, formFactor, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param enabled  (optional)
     * @param mtu  (optional)
     * @param mgmtOnly  (optional)
     * @param device  (optional)
     * @param deviceId  (optional)
     * @param type  (optional)
     * @param lagId  (optional)
     * @param macAddress  (optional)
     * @param tag  (optional)
     * @param vlanId  (optional)
     * @param vlan  (optional)
     * @param formFactor  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInterfacesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInterfacesList200Response dcimInterfacesList(String name, String enabled, BigDecimal mtu, String mgmtOnly, String device, BigDecimal deviceId, String type, String lagId, String macAddress, String tag, String vlanId, String vlan, String formFactor, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInterfacesList200Response> localVarResp = dcimInterfacesListWithHttpInfo(name, enabled, mtu, mgmtOnly, device, deviceId, type, lagId, macAddress, tag, vlanId, vlan, formFactor, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param enabled  (optional)
     * @param mtu  (optional)
     * @param mgmtOnly  (optional)
     * @param device  (optional)
     * @param deviceId  (optional)
     * @param type  (optional)
     * @param lagId  (optional)
     * @param macAddress  (optional)
     * @param tag  (optional)
     * @param vlanId  (optional)
     * @param vlan  (optional)
     * @param formFactor  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInterfacesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInterfacesList200Response> dcimInterfacesListWithHttpInfo(String name, String enabled, BigDecimal mtu, String mgmtOnly, String device, BigDecimal deviceId, String type, String lagId, String macAddress, String tag, String vlanId, String vlan, String formFactor, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesListValidateBeforeCall(name, enabled, mtu, mgmtOnly, device, deviceId, type, lagId, macAddress, tag, vlanId, vlan, formFactor, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInterfacesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param enabled  (optional)
     * @param mtu  (optional)
     * @param mgmtOnly  (optional)
     * @param device  (optional)
     * @param deviceId  (optional)
     * @param type  (optional)
     * @param lagId  (optional)
     * @param macAddress  (optional)
     * @param tag  (optional)
     * @param vlanId  (optional)
     * @param vlan  (optional)
     * @param formFactor  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesListAsync(String name, String enabled, BigDecimal mtu, String mgmtOnly, String device, BigDecimal deviceId, String type, String lagId, String macAddress, String tag, String vlanId, String vlan, String formFactor, Integer limit, Integer offset, final ApiCallback<DcimInterfacesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesListValidateBeforeCall(name, enabled, mtu, mgmtOnly, device, deviceId, type, lagId, macAddress, tag, vlanId, vlan, formFactor, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInterfacesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesPartialUpdate
     * @param id A unique integer value identifying this interface. (required)
     * @param writableInterface  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesPartialUpdateCall(Integer id, WritableInterface writableInterface, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterface;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesPartialUpdateValidateBeforeCall(Integer id, WritableInterface writableInterface, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableInterface' is set
        if (writableInterface == null) {
            throw new ApiException("Missing the required parameter 'writableInterface' when calling dcimInterfacesPartialUpdate(Async)");
        }

        return dcimInterfacesPartialUpdateCall(id, writableInterface, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableInterface  (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesPartialUpdate(Integer id, WritableInterface writableInterface) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesPartialUpdateWithHttpInfo(id, writableInterface);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableInterface  (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesPartialUpdateWithHttpInfo(Integer id, WritableInterface writableInterface) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesPartialUpdateValidateBeforeCall(id, writableInterface, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableInterface  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesPartialUpdateAsync(Integer id, WritableInterface writableInterface, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesPartialUpdateValidateBeforeCall(id, writableInterface, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesRead
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesRead(Async)");
        }

        return dcimInterfacesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesRead(Integer id) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesReadAsync(Integer id, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesUpdate
     * @param id A unique integer value identifying this interface. (required)
     * @param writableInterface  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesUpdateCall(Integer id, WritableInterface writableInterface, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterface;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesUpdateValidateBeforeCall(Integer id, WritableInterface writableInterface, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesUpdate(Async)");
        }

        // verify the required parameter 'writableInterface' is set
        if (writableInterface == null) {
            throw new ApiException("Missing the required parameter 'writableInterface' when calling dcimInterfacesUpdate(Async)");
        }

        return dcimInterfacesUpdateCall(id, writableInterface, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableInterface  (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesUpdate(Integer id, WritableInterface writableInterface) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesUpdateWithHttpInfo(id, writableInterface);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableInterface  (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesUpdateWithHttpInfo(Integer id, WritableInterface writableInterface) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesUpdateValidateBeforeCall(id, writableInterface, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableInterface  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesUpdateAsync(Integer id, WritableInterface writableInterface, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesUpdateValidateBeforeCall(id, writableInterface, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsCreate
     * @param writableInventoryItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsCreateCall(WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInventoryItem;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsCreateValidateBeforeCall(WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInventoryItem' is set
        if (writableInventoryItem == null) {
            throw new ApiException("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsCreate(Async)");
        }

        return dcimInventoryItemsCreateCall(writableInventoryItem, _callback);

    }

    /**
     * 
     * 
     * @param writableInventoryItem  (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsCreate(WritableInventoryItem writableInventoryItem) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsCreateWithHttpInfo(writableInventoryItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInventoryItem  (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsCreateWithHttpInfo(WritableInventoryItem writableInventoryItem) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsCreateValidateBeforeCall(writableInventoryItem, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInventoryItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsCreateAsync(WritableInventoryItem writableInventoryItem, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsCreateValidateBeforeCall(writableInventoryItem, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsDelete
     * @param id A unique integer value identifying this inventory item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemsDelete(Async)");
        }

        return dcimInventoryItemsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInventoryItemsDelete(Integer id) throws ApiException {
        dcimInventoryItemsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInventoryItemsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsList
     * @param name  (optional)
     * @param partId  (optional)
     * @param serial  (optional)
     * @param assetTag  (optional)
     * @param discovered  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param q  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsListCall(String name, String partId, String serial, String assetTag, String discovered, String deviceId, String device, String tag, String q, String parentId, String manufacturerId, String manufacturer, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (partId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id", partId));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (assetTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag", assetTag));
        }

        if (discovered != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("discovered", discovered));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsListValidateBeforeCall(String name, String partId, String serial, String assetTag, String discovered, String deviceId, String device, String tag, String q, String parentId, String manufacturerId, String manufacturer, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimInventoryItemsListCall(name, partId, serial, assetTag, discovered, deviceId, device, tag, q, parentId, manufacturerId, manufacturer, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param partId  (optional)
     * @param serial  (optional)
     * @param assetTag  (optional)
     * @param discovered  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param q  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInventoryItemsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInventoryItemsList200Response dcimInventoryItemsList(String name, String partId, String serial, String assetTag, String discovered, String deviceId, String device, String tag, String q, String parentId, String manufacturerId, String manufacturer, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInventoryItemsList200Response> localVarResp = dcimInventoryItemsListWithHttpInfo(name, partId, serial, assetTag, discovered, deviceId, device, tag, q, parentId, manufacturerId, manufacturer, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param partId  (optional)
     * @param serial  (optional)
     * @param assetTag  (optional)
     * @param discovered  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param q  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInventoryItemsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInventoryItemsList200Response> dcimInventoryItemsListWithHttpInfo(String name, String partId, String serial, String assetTag, String discovered, String deviceId, String device, String tag, String q, String parentId, String manufacturerId, String manufacturer, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsListValidateBeforeCall(name, partId, serial, assetTag, discovered, deviceId, device, tag, q, parentId, manufacturerId, manufacturer, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInventoryItemsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param partId  (optional)
     * @param serial  (optional)
     * @param assetTag  (optional)
     * @param discovered  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param q  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsListAsync(String name, String partId, String serial, String assetTag, String discovered, String deviceId, String device, String tag, String q, String parentId, String manufacturerId, String manufacturer, Integer limit, Integer offset, final ApiCallback<DcimInventoryItemsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsListValidateBeforeCall(name, partId, serial, assetTag, discovered, deviceId, device, tag, q, parentId, manufacturerId, manufacturer, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInventoryItemsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsPartialUpdate
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsPartialUpdateCall(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInventoryItem;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsPartialUpdateValidateBeforeCall(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableInventoryItem' is set
        if (writableInventoryItem == null) {
            throw new ApiException("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsPartialUpdate(Async)");
        }

        return dcimInventoryItemsPartialUpdateCall(id, writableInventoryItem, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsPartialUpdate(Integer id, WritableInventoryItem writableInventoryItem) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsPartialUpdateWithHttpInfo(id, writableInventoryItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsPartialUpdateWithHttpInfo(Integer id, WritableInventoryItem writableInventoryItem) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsPartialUpdateValidateBeforeCall(id, writableInventoryItem, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsPartialUpdateAsync(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsPartialUpdateValidateBeforeCall(id, writableInventoryItem, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsRead
     * @param id A unique integer value identifying this inventory item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemsRead(Async)");
        }

        return dcimInventoryItemsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsRead(Integer id) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsReadAsync(Integer id, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsUpdate
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsUpdateCall(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInventoryItem;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsUpdateValidateBeforeCall(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemsUpdate(Async)");
        }

        // verify the required parameter 'writableInventoryItem' is set
        if (writableInventoryItem == null) {
            throw new ApiException("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsUpdate(Async)");
        }

        return dcimInventoryItemsUpdateCall(id, writableInventoryItem, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsUpdate(Integer id, WritableInventoryItem writableInventoryItem) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsUpdateWithHttpInfo(id, writableInventoryItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsUpdateWithHttpInfo(Integer id, WritableInventoryItem writableInventoryItem) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsUpdateValidateBeforeCall(id, writableInventoryItem, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsUpdateAsync(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsUpdateValidateBeforeCall(id, writableInventoryItem, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersCreate
     * @param manufacturer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersCreateCall(Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manufacturer;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersCreateValidateBeforeCall(Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'manufacturer' is set
        if (manufacturer == null) {
            throw new ApiException("Missing the required parameter 'manufacturer' when calling dcimManufacturersCreate(Async)");
        }

        return dcimManufacturersCreateCall(manufacturer, _callback);

    }

    /**
     * 
     * 
     * @param manufacturer  (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersCreate(Manufacturer manufacturer) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersCreateWithHttpInfo(manufacturer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param manufacturer  (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersCreateWithHttpInfo(Manufacturer manufacturer) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersCreateValidateBeforeCall(manufacturer, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param manufacturer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersCreateAsync(Manufacturer manufacturer, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersCreateValidateBeforeCall(manufacturer, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersDelete
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimManufacturersDelete(Async)");
        }

        return dcimManufacturersDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimManufacturersDelete(Integer id) throws ApiException {
        dcimManufacturersDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimManufacturersDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersList
     * @param name  (optional)
     * @param slug  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersListCall(String name, String slug, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersListValidateBeforeCall(String name, String slug, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimManufacturersListCall(name, slug, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimManufacturersList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimManufacturersList200Response dcimManufacturersList(String name, String slug, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimManufacturersList200Response> localVarResp = dcimManufacturersListWithHttpInfo(name, slug, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimManufacturersList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimManufacturersList200Response> dcimManufacturersListWithHttpInfo(String name, String slug, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersListValidateBeforeCall(name, slug, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimManufacturersList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersListAsync(String name, String slug, Integer limit, Integer offset, final ApiCallback<DcimManufacturersList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersListValidateBeforeCall(name, slug, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimManufacturersList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersPartialUpdate
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersPartialUpdateCall(Integer id, Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manufacturer;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersPartialUpdateValidateBeforeCall(Integer id, Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimManufacturersPartialUpdate(Async)");
        }

        // verify the required parameter 'manufacturer' is set
        if (manufacturer == null) {
            throw new ApiException("Missing the required parameter 'manufacturer' when calling dcimManufacturersPartialUpdate(Async)");
        }

        return dcimManufacturersPartialUpdateCall(id, manufacturer, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersPartialUpdate(Integer id, Manufacturer manufacturer) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersPartialUpdateWithHttpInfo(id, manufacturer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersPartialUpdateWithHttpInfo(Integer id, Manufacturer manufacturer) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersPartialUpdateValidateBeforeCall(id, manufacturer, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersPartialUpdateAsync(Integer id, Manufacturer manufacturer, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersPartialUpdateValidateBeforeCall(id, manufacturer, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersRead
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimManufacturersRead(Async)");
        }

        return dcimManufacturersReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersRead(Integer id) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersReadAsync(Integer id, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersUpdate
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersUpdateCall(Integer id, Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manufacturer;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersUpdateValidateBeforeCall(Integer id, Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimManufacturersUpdate(Async)");
        }

        // verify the required parameter 'manufacturer' is set
        if (manufacturer == null) {
            throw new ApiException("Missing the required parameter 'manufacturer' when calling dcimManufacturersUpdate(Async)");
        }

        return dcimManufacturersUpdateCall(id, manufacturer, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersUpdate(Integer id, Manufacturer manufacturer) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersUpdateWithHttpInfo(id, manufacturer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersUpdateWithHttpInfo(Integer id, Manufacturer manufacturer) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersUpdateValidateBeforeCall(id, manufacturer, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersUpdateAsync(Integer id, Manufacturer manufacturer, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersUpdateValidateBeforeCall(id, manufacturer, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsCreate
     * @param writablePlatform  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsCreateCall(WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePlatform;

        // create path and map variables
        String localVarPath = "/dcim/platforms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsCreateValidateBeforeCall(WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePlatform' is set
        if (writablePlatform == null) {
            throw new ApiException("Missing the required parameter 'writablePlatform' when calling dcimPlatformsCreate(Async)");
        }

        return dcimPlatformsCreateCall(writablePlatform, _callback);

    }

    /**
     * 
     * 
     * @param writablePlatform  (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsCreate(WritablePlatform writablePlatform) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsCreateWithHttpInfo(writablePlatform);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePlatform  (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsCreateWithHttpInfo(WritablePlatform writablePlatform) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsCreateValidateBeforeCall(writablePlatform, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePlatform  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsCreateAsync(WritablePlatform writablePlatform, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsCreateValidateBeforeCall(writablePlatform, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsDelete
     * @param id A unique integer value identifying this platform. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/platforms/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPlatformsDelete(Async)");
        }

        return dcimPlatformsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPlatformsDelete(Integer id) throws ApiException {
        dcimPlatformsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPlatformsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsList
     * @param name  (optional)
     * @param slug  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsListCall(String name, String slug, String manufacturerId, String manufacturer, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/platforms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsListValidateBeforeCall(String name, String slug, String manufacturerId, String manufacturer, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPlatformsListCall(name, slug, manufacturerId, manufacturer, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPlatformsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPlatformsList200Response dcimPlatformsList(String name, String slug, String manufacturerId, String manufacturer, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPlatformsList200Response> localVarResp = dcimPlatformsListWithHttpInfo(name, slug, manufacturerId, manufacturer, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPlatformsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPlatformsList200Response> dcimPlatformsListWithHttpInfo(String name, String slug, String manufacturerId, String manufacturer, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsListValidateBeforeCall(name, slug, manufacturerId, manufacturer, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPlatformsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsListAsync(String name, String slug, String manufacturerId, String manufacturer, Integer limit, Integer offset, final ApiCallback<DcimPlatformsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsListValidateBeforeCall(name, slug, manufacturerId, manufacturer, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPlatformsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsPartialUpdate
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsPartialUpdateCall(Integer id, WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePlatform;

        // create path and map variables
        String localVarPath = "/dcim/platforms/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsPartialUpdateValidateBeforeCall(Integer id, WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPlatformsPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePlatform' is set
        if (writablePlatform == null) {
            throw new ApiException("Missing the required parameter 'writablePlatform' when calling dcimPlatformsPartialUpdate(Async)");
        }

        return dcimPlatformsPartialUpdateCall(id, writablePlatform, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsPartialUpdate(Integer id, WritablePlatform writablePlatform) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsPartialUpdateWithHttpInfo(id, writablePlatform);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsPartialUpdateWithHttpInfo(Integer id, WritablePlatform writablePlatform) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsPartialUpdateValidateBeforeCall(id, writablePlatform, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsPartialUpdateAsync(Integer id, WritablePlatform writablePlatform, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsPartialUpdateValidateBeforeCall(id, writablePlatform, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsRead
     * @param id A unique integer value identifying this platform. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/platforms/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPlatformsRead(Async)");
        }

        return dcimPlatformsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsRead(Integer id) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsReadAsync(Integer id, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsUpdate
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsUpdateCall(Integer id, WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePlatform;

        // create path and map variables
        String localVarPath = "/dcim/platforms/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsUpdateValidateBeforeCall(Integer id, WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPlatformsUpdate(Async)");
        }

        // verify the required parameter 'writablePlatform' is set
        if (writablePlatform == null) {
            throw new ApiException("Missing the required parameter 'writablePlatform' when calling dcimPlatformsUpdate(Async)");
        }

        return dcimPlatformsUpdateCall(id, writablePlatform, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsUpdate(Integer id, WritablePlatform writablePlatform) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsUpdateWithHttpInfo(id, writablePlatform);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsUpdateWithHttpInfo(Integer id, WritablePlatform writablePlatform) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsUpdateValidateBeforeCall(id, writablePlatform, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsUpdateAsync(Integer id, WritablePlatform writablePlatform, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsUpdateValidateBeforeCall(id, writablePlatform, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerConnectionsList
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param device  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerConnectionsListCall(String name, String connectionStatus, String site, String device, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-connections/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (connectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status", connectionStatus));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerConnectionsListValidateBeforeCall(String name, String connectionStatus, String site, String device, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerConnectionsListCall(name, connectionStatus, site, device, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param device  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerConnectionsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerConnectionsList200Response dcimPowerConnectionsList(String name, String connectionStatus, String site, String device, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerConnectionsList200Response> localVarResp = dcimPowerConnectionsListWithHttpInfo(name, connectionStatus, site, device, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param device  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerConnectionsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerConnectionsList200Response> dcimPowerConnectionsListWithHttpInfo(String name, String connectionStatus, String site, String device, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerConnectionsListValidateBeforeCall(name, connectionStatus, site, device, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerConnectionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param device  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerConnectionsListAsync(String name, String connectionStatus, String site, String device, Integer limit, Integer offset, final ApiCallback<DcimPowerConnectionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerConnectionsListValidateBeforeCall(name, connectionStatus, site, device, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerConnectionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesCreate
     * @param writablePowerOutletTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesCreateCall(WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutletTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesCreateValidateBeforeCall(WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerOutletTemplate' is set
        if (writablePowerOutletTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesCreate(Async)");
        }

        return dcimPowerOutletTemplatesCreateCall(writablePowerOutletTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerOutletTemplate  (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesCreate(WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesCreateWithHttpInfo(writablePowerOutletTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerOutletTemplate  (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesCreateWithHttpInfo(WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesCreateValidateBeforeCall(writablePowerOutletTemplate, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerOutletTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesCreateAsync(WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesCreateValidateBeforeCall(writablePowerOutletTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesDelete
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesDelete(Async)");
        }

        return dcimPowerOutletTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerOutletTemplatesDelete(Integer id) throws ApiException {
        dcimPowerOutletTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerOutletTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesList
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesListCall(String name, String devicetypeId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesListValidateBeforeCall(String name, String devicetypeId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerOutletTemplatesListCall(name, devicetypeId, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerOutletTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerOutletTemplatesList200Response dcimPowerOutletTemplatesList(String name, String devicetypeId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerOutletTemplatesList200Response> localVarResp = dcimPowerOutletTemplatesListWithHttpInfo(name, devicetypeId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerOutletTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerOutletTemplatesList200Response> dcimPowerOutletTemplatesListWithHttpInfo(String name, String devicetypeId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesListValidateBeforeCall(name, devicetypeId, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerOutletTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesListAsync(String name, String devicetypeId, Integer limit, Integer offset, final ApiCallback<DcimPowerOutletTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesListValidateBeforeCall(name, devicetypeId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerOutletTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesPartialUpdate
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesPartialUpdateCall(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutletTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesPartialUpdateValidateBeforeCall(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePowerOutletTemplate' is set
        if (writablePowerOutletTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesPartialUpdate(Async)");
        }

        return dcimPowerOutletTemplatesPartialUpdateCall(id, writablePowerOutletTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesPartialUpdate(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesPartialUpdateWithHttpInfo(id, writablePowerOutletTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesPartialUpdateWithHttpInfo(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesPartialUpdateValidateBeforeCall(id, writablePowerOutletTemplate, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesPartialUpdateAsync(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesPartialUpdateValidateBeforeCall(id, writablePowerOutletTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesRead
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesRead(Async)");
        }

        return dcimPowerOutletTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesRead(Integer id) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesReadAsync(Integer id, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesUpdate
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesUpdateCall(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutletTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesUpdateValidateBeforeCall(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writablePowerOutletTemplate' is set
        if (writablePowerOutletTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesUpdate(Async)");
        }

        return dcimPowerOutletTemplatesUpdateCall(id, writablePowerOutletTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesUpdate(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesUpdateWithHttpInfo(id, writablePowerOutletTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesUpdateWithHttpInfo(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesUpdateValidateBeforeCall(id, writablePowerOutletTemplate, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesUpdateAsync(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesUpdateValidateBeforeCall(id, writablePowerOutletTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsCreate
     * @param writablePowerOutlet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsCreateCall(WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutlet;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsCreateValidateBeforeCall(WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerOutlet' is set
        if (writablePowerOutlet == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsCreate(Async)");
        }

        return dcimPowerOutletsCreateCall(writablePowerOutlet, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerOutlet  (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsCreate(WritablePowerOutlet writablePowerOutlet) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsCreateWithHttpInfo(writablePowerOutlet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerOutlet  (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsCreateWithHttpInfo(WritablePowerOutlet writablePowerOutlet) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsCreateValidateBeforeCall(writablePowerOutlet, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerOutlet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsCreateAsync(WritablePowerOutlet writablePowerOutlet, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsCreateValidateBeforeCall(writablePowerOutlet, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsDelete
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsDelete(Async)");
        }

        return dcimPowerOutletsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerOutletsDelete(Integer id) throws ApiException {
        dcimPowerOutletsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerOutletsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsList
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsListCall(String name, String deviceId, String device, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsListValidateBeforeCall(String name, String deviceId, String device, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerOutletsListCall(name, deviceId, device, tag, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerOutletsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerOutletsList200Response dcimPowerOutletsList(String name, String deviceId, String device, String tag, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerOutletsList200Response> localVarResp = dcimPowerOutletsListWithHttpInfo(name, deviceId, device, tag, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerOutletsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerOutletsList200Response> dcimPowerOutletsListWithHttpInfo(String name, String deviceId, String device, String tag, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsListValidateBeforeCall(name, deviceId, device, tag, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerOutletsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsListAsync(String name, String deviceId, String device, String tag, Integer limit, Integer offset, final ApiCallback<DcimPowerOutletsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsListValidateBeforeCall(name, deviceId, device, tag, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerOutletsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsPartialUpdate
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsPartialUpdateCall(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutlet;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsPartialUpdateValidateBeforeCall(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePowerOutlet' is set
        if (writablePowerOutlet == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsPartialUpdate(Async)");
        }

        return dcimPowerOutletsPartialUpdateCall(id, writablePowerOutlet, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsPartialUpdate(Integer id, WritablePowerOutlet writablePowerOutlet) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsPartialUpdateWithHttpInfo(id, writablePowerOutlet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsPartialUpdateWithHttpInfo(Integer id, WritablePowerOutlet writablePowerOutlet) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsPartialUpdateValidateBeforeCall(id, writablePowerOutlet, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsPartialUpdateAsync(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsPartialUpdateValidateBeforeCall(id, writablePowerOutlet, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsRead
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsRead(Async)");
        }

        return dcimPowerOutletsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsRead(Integer id) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsReadAsync(Integer id, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsUpdate
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsUpdateCall(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutlet;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsUpdateValidateBeforeCall(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsUpdate(Async)");
        }

        // verify the required parameter 'writablePowerOutlet' is set
        if (writablePowerOutlet == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsUpdate(Async)");
        }

        return dcimPowerOutletsUpdateCall(id, writablePowerOutlet, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsUpdate(Integer id, WritablePowerOutlet writablePowerOutlet) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsUpdateWithHttpInfo(id, writablePowerOutlet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsUpdateWithHttpInfo(Integer id, WritablePowerOutlet writablePowerOutlet) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsUpdateValidateBeforeCall(id, writablePowerOutlet, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsUpdateAsync(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsUpdateValidateBeforeCall(id, writablePowerOutlet, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesCreate
     * @param writablePowerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesCreateCall(WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesCreateValidateBeforeCall(WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerPortTemplate' is set
        if (writablePowerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesCreate(Async)");
        }

        return dcimPowerPortTemplatesCreateCall(writablePowerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerPortTemplate  (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesCreate(WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesCreateWithHttpInfo(writablePowerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerPortTemplate  (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesCreateWithHttpInfo(WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesCreateValidateBeforeCall(writablePowerPortTemplate, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesCreateAsync(WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesCreateValidateBeforeCall(writablePowerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesDelete
     * @param id A unique integer value identifying this power port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortTemplatesDelete(Async)");
        }

        return dcimPowerPortTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPortTemplatesDelete(Integer id) throws ApiException {
        dcimPowerPortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesList
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesListCall(String name, String devicetypeId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesListValidateBeforeCall(String name, String devicetypeId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerPortTemplatesListCall(name, devicetypeId, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerPortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerPortTemplatesList200Response dcimPowerPortTemplatesList(String name, String devicetypeId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerPortTemplatesList200Response> localVarResp = dcimPowerPortTemplatesListWithHttpInfo(name, devicetypeId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerPortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerPortTemplatesList200Response> dcimPowerPortTemplatesListWithHttpInfo(String name, String devicetypeId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesListValidateBeforeCall(name, devicetypeId, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerPortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param devicetypeId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesListAsync(String name, String devicetypeId, Integer limit, Integer offset, final ApiCallback<DcimPowerPortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesListValidateBeforeCall(name, devicetypeId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerPortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesPartialUpdate
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesPartialUpdateCall(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePowerPortTemplate' is set
        if (writablePowerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesPartialUpdate(Async)");
        }

        return dcimPowerPortTemplatesPartialUpdateCall(id, writablePowerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesPartialUpdate(Integer id, WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesPartialUpdateWithHttpInfo(id, writablePowerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesPartialUpdateValidateBeforeCall(id, writablePowerPortTemplate, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesPartialUpdateAsync(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesPartialUpdateValidateBeforeCall(id, writablePowerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesRead
     * @param id A unique integer value identifying this power port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortTemplatesRead(Async)");
        }

        return dcimPowerPortTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesReadAsync(Integer id, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesUpdate
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesUpdateCall(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesUpdateValidateBeforeCall(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writablePowerPortTemplate' is set
        if (writablePowerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesUpdate(Async)");
        }

        return dcimPowerPortTemplatesUpdateCall(id, writablePowerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesUpdate(Integer id, WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesUpdateWithHttpInfo(id, writablePowerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesUpdateWithHttpInfo(Integer id, WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesUpdateValidateBeforeCall(id, writablePowerPortTemplate, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesUpdateAsync(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesUpdateValidateBeforeCall(id, writablePowerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsCreate
     * @param writablePowerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsCreateCall(WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPort;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsCreateValidateBeforeCall(WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerPort' is set
        if (writablePowerPort == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsCreate(Async)");
        }

        return dcimPowerPortsCreateCall(writablePowerPort, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerPort  (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsCreate(WritablePowerPort writablePowerPort) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsCreateWithHttpInfo(writablePowerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerPort  (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsCreateWithHttpInfo(WritablePowerPort writablePowerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsCreateValidateBeforeCall(writablePowerPort, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsCreateAsync(WritablePowerPort writablePowerPort, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsCreateValidateBeforeCall(writablePowerPort, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsDelete
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsDelete(Async)");
        }

        return dcimPowerPortsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPortsDelete(Integer id) throws ApiException {
        dcimPowerPortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsList
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsListCall(String name, String deviceId, String device, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsListValidateBeforeCall(String name, String deviceId, String device, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerPortsListCall(name, deviceId, device, tag, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerConnectionsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerConnectionsList200Response dcimPowerPortsList(String name, String deviceId, String device, String tag, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerConnectionsList200Response> localVarResp = dcimPowerPortsListWithHttpInfo(name, deviceId, device, tag, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerConnectionsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerConnectionsList200Response> dcimPowerPortsListWithHttpInfo(String name, String deviceId, String device, String tag, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsListValidateBeforeCall(name, deviceId, device, tag, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerConnectionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsListAsync(String name, String deviceId, String device, String tag, Integer limit, Integer offset, final ApiCallback<DcimPowerConnectionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsListValidateBeforeCall(name, deviceId, device, tag, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerConnectionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsPartialUpdate
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsPartialUpdateCall(Integer id, WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPort;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsPartialUpdateValidateBeforeCall(Integer id, WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePowerPort' is set
        if (writablePowerPort == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsPartialUpdate(Async)");
        }

        return dcimPowerPortsPartialUpdateCall(id, writablePowerPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsPartialUpdate(Integer id, WritablePowerPort writablePowerPort) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsPartialUpdateWithHttpInfo(id, writablePowerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsPartialUpdateWithHttpInfo(Integer id, WritablePowerPort writablePowerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsPartialUpdateValidateBeforeCall(id, writablePowerPort, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsPartialUpdateAsync(Integer id, WritablePowerPort writablePowerPort, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsPartialUpdateValidateBeforeCall(id, writablePowerPort, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsRead
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsRead(Async)");
        }

        return dcimPowerPortsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsRead(Integer id) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsReadAsync(Integer id, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsUpdate
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsUpdateCall(Integer id, WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPort;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsUpdateValidateBeforeCall(Integer id, WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsUpdate(Async)");
        }

        // verify the required parameter 'writablePowerPort' is set
        if (writablePowerPort == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsUpdate(Async)");
        }

        return dcimPowerPortsUpdateCall(id, writablePowerPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsUpdate(Integer id, WritablePowerPort writablePowerPort) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsUpdateWithHttpInfo(id, writablePowerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsUpdateWithHttpInfo(Integer id, WritablePowerPort writablePowerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsUpdateValidateBeforeCall(id, writablePowerPort, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsUpdateAsync(Integer id, WritablePowerPort writablePowerPort, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsUpdateValidateBeforeCall(id, writablePowerPort, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackGroupsCreate
     * @param writableRackGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsCreateCall(WritableRackGroup writableRackGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackGroup;

        // create path and map variables
        String localVarPath = "/dcim/rack-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackGroupsCreateValidateBeforeCall(WritableRackGroup writableRackGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRackGroup' is set
        if (writableRackGroup == null) {
            throw new ApiException("Missing the required parameter 'writableRackGroup' when calling dcimRackGroupsCreate(Async)");
        }

        return dcimRackGroupsCreateCall(writableRackGroup, _callback);

    }

    /**
     * 
     * 
     * @param writableRackGroup  (required)
     * @return RackGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackGroup dcimRackGroupsCreate(WritableRackGroup writableRackGroup) throws ApiException {
        ApiResponse<RackGroup> localVarResp = dcimRackGroupsCreateWithHttpInfo(writableRackGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRackGroup  (required)
     * @return ApiResponse&lt;RackGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackGroup> dcimRackGroupsCreateWithHttpInfo(WritableRackGroup writableRackGroup) throws ApiException {
        okhttp3.Call localVarCall = dcimRackGroupsCreateValidateBeforeCall(writableRackGroup, null);
        Type localVarReturnType = new TypeToken<RackGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRackGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsCreateAsync(WritableRackGroup writableRackGroup, final ApiCallback<RackGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackGroupsCreateValidateBeforeCall(writableRackGroup, _callback);
        Type localVarReturnType = new TypeToken<RackGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackGroupsDelete
     * @param id A unique integer value identifying this rack group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackGroupsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackGroupsDelete(Async)");
        }

        return dcimRackGroupsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRackGroupsDelete(Integer id) throws ApiException {
        dcimRackGroupsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRackGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackGroupsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackGroupsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackGroupsList
     * @param siteId  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param q  (optional)
     * @param site  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsListCall(String siteId, String name, String slug, String q, String site, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackGroupsListValidateBeforeCall(String siteId, String name, String slug, String q, String site, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRackGroupsListCall(siteId, name, slug, q, site, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param siteId  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param q  (optional)
     * @param site  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRackGroupsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRackGroupsList200Response dcimRackGroupsList(String siteId, String name, String slug, String q, String site, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRackGroupsList200Response> localVarResp = dcimRackGroupsListWithHttpInfo(siteId, name, slug, q, site, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param siteId  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param q  (optional)
     * @param site  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRackGroupsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRackGroupsList200Response> dcimRackGroupsListWithHttpInfo(String siteId, String name, String slug, String q, String site, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRackGroupsListValidateBeforeCall(siteId, name, slug, q, site, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRackGroupsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param siteId  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param q  (optional)
     * @param site  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsListAsync(String siteId, String name, String slug, String q, String site, Integer limit, Integer offset, final ApiCallback<DcimRackGroupsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackGroupsListValidateBeforeCall(siteId, name, slug, q, site, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRackGroupsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackGroupsPartialUpdate
     * @param id A unique integer value identifying this rack group. (required)
     * @param writableRackGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsPartialUpdateCall(Integer id, WritableRackGroup writableRackGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackGroup;

        // create path and map variables
        String localVarPath = "/dcim/rack-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackGroupsPartialUpdateValidateBeforeCall(Integer id, WritableRackGroup writableRackGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackGroupsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableRackGroup' is set
        if (writableRackGroup == null) {
            throw new ApiException("Missing the required parameter 'writableRackGroup' when calling dcimRackGroupsPartialUpdate(Async)");
        }

        return dcimRackGroupsPartialUpdateCall(id, writableRackGroup, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @param writableRackGroup  (required)
     * @return RackGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackGroup dcimRackGroupsPartialUpdate(Integer id, WritableRackGroup writableRackGroup) throws ApiException {
        ApiResponse<RackGroup> localVarResp = dcimRackGroupsPartialUpdateWithHttpInfo(id, writableRackGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @param writableRackGroup  (required)
     * @return ApiResponse&lt;RackGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackGroup> dcimRackGroupsPartialUpdateWithHttpInfo(Integer id, WritableRackGroup writableRackGroup) throws ApiException {
        okhttp3.Call localVarCall = dcimRackGroupsPartialUpdateValidateBeforeCall(id, writableRackGroup, null);
        Type localVarReturnType = new TypeToken<RackGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @param writableRackGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsPartialUpdateAsync(Integer id, WritableRackGroup writableRackGroup, final ApiCallback<RackGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackGroupsPartialUpdateValidateBeforeCall(id, writableRackGroup, _callback);
        Type localVarReturnType = new TypeToken<RackGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackGroupsRead
     * @param id A unique integer value identifying this rack group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackGroupsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackGroupsRead(Async)");
        }

        return dcimRackGroupsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @return RackGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackGroup dcimRackGroupsRead(Integer id) throws ApiException {
        ApiResponse<RackGroup> localVarResp = dcimRackGroupsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @return ApiResponse&lt;RackGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackGroup> dcimRackGroupsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackGroupsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RackGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsReadAsync(Integer id, final ApiCallback<RackGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackGroupsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RackGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackGroupsUpdate
     * @param id A unique integer value identifying this rack group. (required)
     * @param writableRackGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsUpdateCall(Integer id, WritableRackGroup writableRackGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackGroup;

        // create path and map variables
        String localVarPath = "/dcim/rack-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackGroupsUpdateValidateBeforeCall(Integer id, WritableRackGroup writableRackGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackGroupsUpdate(Async)");
        }

        // verify the required parameter 'writableRackGroup' is set
        if (writableRackGroup == null) {
            throw new ApiException("Missing the required parameter 'writableRackGroup' when calling dcimRackGroupsUpdate(Async)");
        }

        return dcimRackGroupsUpdateCall(id, writableRackGroup, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @param writableRackGroup  (required)
     * @return RackGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackGroup dcimRackGroupsUpdate(Integer id, WritableRackGroup writableRackGroup) throws ApiException {
        ApiResponse<RackGroup> localVarResp = dcimRackGroupsUpdateWithHttpInfo(id, writableRackGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @param writableRackGroup  (required)
     * @return ApiResponse&lt;RackGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackGroup> dcimRackGroupsUpdateWithHttpInfo(Integer id, WritableRackGroup writableRackGroup) throws ApiException {
        okhttp3.Call localVarCall = dcimRackGroupsUpdateValidateBeforeCall(id, writableRackGroup, null);
        Type localVarReturnType = new TypeToken<RackGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @param writableRackGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsUpdateAsync(Integer id, WritableRackGroup writableRackGroup, final ApiCallback<RackGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackGroupsUpdateValidateBeforeCall(id, writableRackGroup, _callback);
        Type localVarReturnType = new TypeToken<RackGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsCreate
     * @param writableRackReservation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsCreateCall(WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackReservation;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsCreateValidateBeforeCall(WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRackReservation' is set
        if (writableRackReservation == null) {
            throw new ApiException("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsCreate(Async)");
        }

        return dcimRackReservationsCreateCall(writableRackReservation, _callback);

    }

    /**
     * 
     * 
     * @param writableRackReservation  (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsCreate(WritableRackReservation writableRackReservation) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsCreateWithHttpInfo(writableRackReservation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRackReservation  (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsCreateWithHttpInfo(WritableRackReservation writableRackReservation) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsCreateValidateBeforeCall(writableRackReservation, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRackReservation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsCreateAsync(WritableRackReservation writableRackReservation, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsCreateValidateBeforeCall(writableRackReservation, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsDelete
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackReservationsDelete(Async)");
        }

        return dcimRackReservationsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRackReservationsDelete(Integer id) throws ApiException {
        dcimRackReservationsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRackReservationsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsList
     * @param created  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param rackId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param userId  (optional)
     * @param user  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsListCall(String created, String idIn, String q, String rackId, String siteId, String site, String groupId, String group, String tenantId, String tenant, String userId, String user, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (idIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__in", idIn));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsListValidateBeforeCall(String created, String idIn, String q, String rackId, String siteId, String site, String groupId, String group, String tenantId, String tenant, String userId, String user, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRackReservationsListCall(created, idIn, q, rackId, siteId, site, groupId, group, tenantId, tenant, userId, user, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param created  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param rackId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param userId  (optional)
     * @param user  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRackReservationsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRackReservationsList200Response dcimRackReservationsList(String created, String idIn, String q, String rackId, String siteId, String site, String groupId, String group, String tenantId, String tenant, String userId, String user, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRackReservationsList200Response> localVarResp = dcimRackReservationsListWithHttpInfo(created, idIn, q, rackId, siteId, site, groupId, group, tenantId, tenant, userId, user, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param created  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param rackId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param userId  (optional)
     * @param user  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRackReservationsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRackReservationsList200Response> dcimRackReservationsListWithHttpInfo(String created, String idIn, String q, String rackId, String siteId, String site, String groupId, String group, String tenantId, String tenant, String userId, String user, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsListValidateBeforeCall(created, idIn, q, rackId, siteId, site, groupId, group, tenantId, tenant, userId, user, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRackReservationsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param created  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param rackId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param userId  (optional)
     * @param user  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsListAsync(String created, String idIn, String q, String rackId, String siteId, String site, String groupId, String group, String tenantId, String tenant, String userId, String user, Integer limit, Integer offset, final ApiCallback<DcimRackReservationsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsListValidateBeforeCall(created, idIn, q, rackId, siteId, site, groupId, group, tenantId, tenant, userId, user, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRackReservationsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsPartialUpdate
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsPartialUpdateCall(Integer id, WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackReservation;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsPartialUpdateValidateBeforeCall(Integer id, WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackReservationsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableRackReservation' is set
        if (writableRackReservation == null) {
            throw new ApiException("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsPartialUpdate(Async)");
        }

        return dcimRackReservationsPartialUpdateCall(id, writableRackReservation, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsPartialUpdate(Integer id, WritableRackReservation writableRackReservation) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsPartialUpdateWithHttpInfo(id, writableRackReservation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsPartialUpdateWithHttpInfo(Integer id, WritableRackReservation writableRackReservation) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsPartialUpdateValidateBeforeCall(id, writableRackReservation, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsPartialUpdateAsync(Integer id, WritableRackReservation writableRackReservation, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsPartialUpdateValidateBeforeCall(id, writableRackReservation, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsRead
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackReservationsRead(Async)");
        }

        return dcimRackReservationsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsRead(Integer id) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsReadAsync(Integer id, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsUpdate
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsUpdateCall(Integer id, WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackReservation;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsUpdateValidateBeforeCall(Integer id, WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackReservationsUpdate(Async)");
        }

        // verify the required parameter 'writableRackReservation' is set
        if (writableRackReservation == null) {
            throw new ApiException("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsUpdate(Async)");
        }

        return dcimRackReservationsUpdateCall(id, writableRackReservation, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsUpdate(Integer id, WritableRackReservation writableRackReservation) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsUpdateWithHttpInfo(id, writableRackReservation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsUpdateWithHttpInfo(Integer id, WritableRackReservation writableRackReservation) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsUpdateValidateBeforeCall(id, writableRackReservation, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsUpdateAsync(Integer id, WritableRackReservation writableRackReservation, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsUpdateValidateBeforeCall(id, writableRackReservation, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesCreate
     * @param rackRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesCreateCall(RackRole rackRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rackRole;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesCreateValidateBeforeCall(RackRole rackRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rackRole' is set
        if (rackRole == null) {
            throw new ApiException("Missing the required parameter 'rackRole' when calling dcimRackRolesCreate(Async)");
        }

        return dcimRackRolesCreateCall(rackRole, _callback);

    }

    /**
     * 
     * 
     * @param rackRole  (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesCreate(RackRole rackRole) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesCreateWithHttpInfo(rackRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rackRole  (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesCreateWithHttpInfo(RackRole rackRole) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesCreateValidateBeforeCall(rackRole, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rackRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesCreateAsync(RackRole rackRole, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesCreateValidateBeforeCall(rackRole, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesDelete
     * @param id A unique integer value identifying this rack role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackRolesDelete(Async)");
        }

        return dcimRackRolesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRackRolesDelete(Integer id) throws ApiException {
        dcimRackRolesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRackRolesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesList
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesListCall(String name, String slug, String color, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesListValidateBeforeCall(String name, String slug, String color, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRackRolesListCall(name, slug, color, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRackRolesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRackRolesList200Response dcimRackRolesList(String name, String slug, String color, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRackRolesList200Response> localVarResp = dcimRackRolesListWithHttpInfo(name, slug, color, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRackRolesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRackRolesList200Response> dcimRackRolesListWithHttpInfo(String name, String slug, String color, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesListValidateBeforeCall(name, slug, color, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRackRolesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesListAsync(String name, String slug, String color, Integer limit, Integer offset, final ApiCallback<DcimRackRolesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesListValidateBeforeCall(name, slug, color, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRackRolesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesPartialUpdate
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesPartialUpdateCall(Integer id, RackRole rackRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rackRole;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesPartialUpdateValidateBeforeCall(Integer id, RackRole rackRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackRolesPartialUpdate(Async)");
        }

        // verify the required parameter 'rackRole' is set
        if (rackRole == null) {
            throw new ApiException("Missing the required parameter 'rackRole' when calling dcimRackRolesPartialUpdate(Async)");
        }

        return dcimRackRolesPartialUpdateCall(id, rackRole, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesPartialUpdate(Integer id, RackRole rackRole) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesPartialUpdateWithHttpInfo(id, rackRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesPartialUpdateWithHttpInfo(Integer id, RackRole rackRole) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesPartialUpdateValidateBeforeCall(id, rackRole, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesPartialUpdateAsync(Integer id, RackRole rackRole, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesPartialUpdateValidateBeforeCall(id, rackRole, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesRead
     * @param id A unique integer value identifying this rack role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackRolesRead(Async)");
        }

        return dcimRackRolesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesRead(Integer id) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesReadAsync(Integer id, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesUpdate
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesUpdateCall(Integer id, RackRole rackRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rackRole;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesUpdateValidateBeforeCall(Integer id, RackRole rackRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackRolesUpdate(Async)");
        }

        // verify the required parameter 'rackRole' is set
        if (rackRole == null) {
            throw new ApiException("Missing the required parameter 'rackRole' when calling dcimRackRolesUpdate(Async)");
        }

        return dcimRackRolesUpdateCall(id, rackRole, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesUpdate(Integer id, RackRole rackRole) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesUpdateWithHttpInfo(id, rackRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesUpdateWithHttpInfo(Integer id, RackRole rackRole) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesUpdateValidateBeforeCall(id, rackRole, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesUpdateAsync(Integer id, RackRole rackRole, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesUpdateValidateBeforeCall(id, rackRole, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksCreate
     * @param writableRack  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksCreateCall(WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRack;

        // create path and map variables
        String localVarPath = "/dcim/racks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksCreateValidateBeforeCall(WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRack' is set
        if (writableRack == null) {
            throw new ApiException("Missing the required parameter 'writableRack' when calling dcimRacksCreate(Async)");
        }

        return dcimRacksCreateCall(writableRack, _callback);

    }

    /**
     * 
     * 
     * @param writableRack  (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksCreate(WritableRack writableRack) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksCreateWithHttpInfo(writableRack);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRack  (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksCreateWithHttpInfo(WritableRack writableRack) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksCreateValidateBeforeCall(writableRack, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRack  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksCreateAsync(WritableRack writableRack, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksCreateValidateBeforeCall(writableRack, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksDelete
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksDelete(Async)");
        }

        return dcimRacksDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRacksDelete(Integer id) throws ApiException {
        dcimRacksDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRacksDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksList
     * @param name  (optional)
     * @param serial  (optional)
     * @param type  (optional)
     * @param width  (optional)
     * @param uHeight  (optional)
     * @param descUnits  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param facilityId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksListCall(String name, String serial, String type, String width, BigDecimal uHeight, String descUnits, String idIn, String q, String facilityId, String siteId, String site, String groupId, String group, String tenantId, String tenant, String roleId, String role, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (uHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height", uHeight));
        }

        if (descUnits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desc_units", descUnits));
        }

        if (idIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__in", idIn));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (facilityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id", facilityId));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksListValidateBeforeCall(String name, String serial, String type, String width, BigDecimal uHeight, String descUnits, String idIn, String q, String facilityId, String siteId, String site, String groupId, String group, String tenantId, String tenant, String roleId, String role, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRacksListCall(name, serial, type, width, uHeight, descUnits, idIn, q, facilityId, siteId, site, groupId, group, tenantId, tenant, roleId, role, tag, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param serial  (optional)
     * @param type  (optional)
     * @param width  (optional)
     * @param uHeight  (optional)
     * @param descUnits  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param facilityId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRacksList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRacksList200Response dcimRacksList(String name, String serial, String type, String width, BigDecimal uHeight, String descUnits, String idIn, String q, String facilityId, String siteId, String site, String groupId, String group, String tenantId, String tenant, String roleId, String role, String tag, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRacksList200Response> localVarResp = dcimRacksListWithHttpInfo(name, serial, type, width, uHeight, descUnits, idIn, q, facilityId, siteId, site, groupId, group, tenantId, tenant, roleId, role, tag, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param serial  (optional)
     * @param type  (optional)
     * @param width  (optional)
     * @param uHeight  (optional)
     * @param descUnits  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param facilityId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRacksList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRacksList200Response> dcimRacksListWithHttpInfo(String name, String serial, String type, String width, BigDecimal uHeight, String descUnits, String idIn, String q, String facilityId, String siteId, String site, String groupId, String group, String tenantId, String tenant, String roleId, String role, String tag, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksListValidateBeforeCall(name, serial, type, width, uHeight, descUnits, idIn, q, facilityId, siteId, site, groupId, group, tenantId, tenant, roleId, role, tag, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRacksList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param serial  (optional)
     * @param type  (optional)
     * @param width  (optional)
     * @param uHeight  (optional)
     * @param descUnits  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param q  (optional)
     * @param facilityId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksListAsync(String name, String serial, String type, String width, BigDecimal uHeight, String descUnits, String idIn, String q, String facilityId, String siteId, String site, String groupId, String group, String tenantId, String tenant, String roleId, String role, String tag, Integer limit, Integer offset, final ApiCallback<DcimRacksList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksListValidateBeforeCall(name, serial, type, width, uHeight, descUnits, idIn, q, facilityId, siteId, site, groupId, group, tenantId, tenant, roleId, role, tag, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRacksList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksPartialUpdate
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksPartialUpdateCall(Integer id, WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRack;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksPartialUpdateValidateBeforeCall(Integer id, WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksPartialUpdate(Async)");
        }

        // verify the required parameter 'writableRack' is set
        if (writableRack == null) {
            throw new ApiException("Missing the required parameter 'writableRack' when calling dcimRacksPartialUpdate(Async)");
        }

        return dcimRacksPartialUpdateCall(id, writableRack, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksPartialUpdate(Integer id, WritableRack writableRack) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksPartialUpdateWithHttpInfo(id, writableRack);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksPartialUpdateWithHttpInfo(Integer id, WritableRack writableRack) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksPartialUpdateValidateBeforeCall(id, writableRack, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksPartialUpdateAsync(Integer id, WritableRack writableRack, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksPartialUpdateValidateBeforeCall(id, writableRack, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksRead
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksRead(Async)");
        }

        return dcimRacksReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksRead(Integer id) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksReadAsync(Integer id, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksUnits
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksUnitsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/units/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksUnitsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksUnits(Async)");
        }

        return dcimRacksUnitsCall(id, _callback);

    }

    /**
     * 
     * List rack units (by rack)
     * @param id A unique integer value identifying this rack. (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksUnits(Integer id) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksUnitsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * List rack units (by rack)
     * @param id A unique integer value identifying this rack. (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksUnitsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksUnitsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List rack units (by rack)
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksUnitsAsync(Integer id, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksUnitsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksUpdate
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksUpdateCall(Integer id, WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRack;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksUpdateValidateBeforeCall(Integer id, WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksUpdate(Async)");
        }

        // verify the required parameter 'writableRack' is set
        if (writableRack == null) {
            throw new ApiException("Missing the required parameter 'writableRack' when calling dcimRacksUpdate(Async)");
        }

        return dcimRacksUpdateCall(id, writableRack, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksUpdate(Integer id, WritableRack writableRack) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksUpdateWithHttpInfo(id, writableRack);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksUpdateWithHttpInfo(Integer id, WritableRack writableRack) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksUpdateValidateBeforeCall(id, writableRack, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksUpdateAsync(Integer id, WritableRack writableRack, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksUpdateValidateBeforeCall(id, writableRack, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsCreate
     * @param writableRegion  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsCreateCall(WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRegion;

        // create path and map variables
        String localVarPath = "/dcim/regions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsCreateValidateBeforeCall(WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRegion' is set
        if (writableRegion == null) {
            throw new ApiException("Missing the required parameter 'writableRegion' when calling dcimRegionsCreate(Async)");
        }

        return dcimRegionsCreateCall(writableRegion, _callback);

    }

    /**
     * 
     * 
     * @param writableRegion  (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsCreate(WritableRegion writableRegion) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsCreateWithHttpInfo(writableRegion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRegion  (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsCreateWithHttpInfo(WritableRegion writableRegion) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsCreateValidateBeforeCall(writableRegion, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRegion  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsCreateAsync(WritableRegion writableRegion, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsCreateValidateBeforeCall(writableRegion, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsDelete
     * @param id A unique integer value identifying this region. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/regions/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRegionsDelete(Async)");
        }

        return dcimRegionsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRegionsDelete(Integer id) throws ApiException {
        dcimRegionsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRegionsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsList
     * @param name  (optional)
     * @param slug  (optional)
     * @param q  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsListCall(String name, String slug, String q, String parentId, String parent, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/regions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsListValidateBeforeCall(String name, String slug, String q, String parentId, String parent, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRegionsListCall(name, slug, q, parentId, parent, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param q  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRegionsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRegionsList200Response dcimRegionsList(String name, String slug, String q, String parentId, String parent, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRegionsList200Response> localVarResp = dcimRegionsListWithHttpInfo(name, slug, q, parentId, parent, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param q  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRegionsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRegionsList200Response> dcimRegionsListWithHttpInfo(String name, String slug, String q, String parentId, String parent, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsListValidateBeforeCall(name, slug, q, parentId, parent, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRegionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param slug  (optional)
     * @param q  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsListAsync(String name, String slug, String q, String parentId, String parent, Integer limit, Integer offset, final ApiCallback<DcimRegionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsListValidateBeforeCall(name, slug, q, parentId, parent, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRegionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsPartialUpdate
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsPartialUpdateCall(Integer id, WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRegion;

        // create path and map variables
        String localVarPath = "/dcim/regions/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsPartialUpdateValidateBeforeCall(Integer id, WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRegionsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableRegion' is set
        if (writableRegion == null) {
            throw new ApiException("Missing the required parameter 'writableRegion' when calling dcimRegionsPartialUpdate(Async)");
        }

        return dcimRegionsPartialUpdateCall(id, writableRegion, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsPartialUpdate(Integer id, WritableRegion writableRegion) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsPartialUpdateWithHttpInfo(id, writableRegion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsPartialUpdateWithHttpInfo(Integer id, WritableRegion writableRegion) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsPartialUpdateValidateBeforeCall(id, writableRegion, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsPartialUpdateAsync(Integer id, WritableRegion writableRegion, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsPartialUpdateValidateBeforeCall(id, writableRegion, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsRead
     * @param id A unique integer value identifying this region. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/regions/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRegionsRead(Async)");
        }

        return dcimRegionsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsRead(Integer id) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsReadAsync(Integer id, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsUpdate
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsUpdateCall(Integer id, WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRegion;

        // create path and map variables
        String localVarPath = "/dcim/regions/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsUpdateValidateBeforeCall(Integer id, WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRegionsUpdate(Async)");
        }

        // verify the required parameter 'writableRegion' is set
        if (writableRegion == null) {
            throw new ApiException("Missing the required parameter 'writableRegion' when calling dcimRegionsUpdate(Async)");
        }

        return dcimRegionsUpdateCall(id, writableRegion, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsUpdate(Integer id, WritableRegion writableRegion) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsUpdateWithHttpInfo(id, writableRegion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsUpdateWithHttpInfo(Integer id, WritableRegion writableRegion) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsUpdateValidateBeforeCall(id, writableRegion, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsUpdateAsync(Integer id, WritableRegion writableRegion, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsUpdateValidateBeforeCall(id, writableRegion, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesCreate
     * @param writableSite  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesCreateCall(WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableSite;

        // create path and map variables
        String localVarPath = "/dcim/sites/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesCreateValidateBeforeCall(WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableSite' is set
        if (writableSite == null) {
            throw new ApiException("Missing the required parameter 'writableSite' when calling dcimSitesCreate(Async)");
        }

        return dcimSitesCreateCall(writableSite, _callback);

    }

    /**
     * 
     * 
     * @param writableSite  (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesCreate(WritableSite writableSite) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesCreateWithHttpInfo(writableSite);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableSite  (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesCreateWithHttpInfo(WritableSite writableSite) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesCreateValidateBeforeCall(writableSite, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableSite  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesCreateAsync(WritableSite writableSite, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesCreateValidateBeforeCall(writableSite, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesDelete
     * @param id A unique integer value identifying this site. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesDelete(Async)");
        }

        return dcimSitesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimSitesDelete(Integer id) throws ApiException {
        dcimSitesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimSitesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesGraphs
     * @param id A unique integer value identifying this site. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesGraphsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/graphs/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesGraphsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesGraphs(Async)");
        }

        return dcimSitesGraphsCall(id, _callback);

    }

    /**
     * 
     * A convenience method for rendering graphs for a particular site.
     * @param id A unique integer value identifying this site. (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesGraphs(Integer id) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesGraphsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * A convenience method for rendering graphs for a particular site.
     * @param id A unique integer value identifying this site. (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesGraphsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesGraphsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A convenience method for rendering graphs for a particular site.
     * @param id A unique integer value identifying this site. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesGraphsAsync(Integer id, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesGraphsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesList
     * @param q  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param facility  (optional)
     * @param asn  (optional)
     * @param contactName  (optional)
     * @param contactPhone  (optional)
     * @param contactEmail  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param status  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesListCall(String q, String name, String slug, String facility, BigDecimal asn, String contactName, String contactPhone, String contactEmail, String idIn, String status, String regionId, String region, String tenantId, String tenant, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/sites/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (facility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility", facility));
        }

        if (asn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn", asn));
        }

        if (contactName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_name", contactName));
        }

        if (contactPhone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_phone", contactPhone));
        }

        if (contactEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_email", contactEmail));
        }

        if (idIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__in", idIn));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesListValidateBeforeCall(String q, String name, String slug, String facility, BigDecimal asn, String contactName, String contactPhone, String contactEmail, String idIn, String status, String regionId, String region, String tenantId, String tenant, String tag, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimSitesListCall(q, name, slug, facility, asn, contactName, contactPhone, contactEmail, idIn, status, regionId, region, tenantId, tenant, tag, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param q  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param facility  (optional)
     * @param asn  (optional)
     * @param contactName  (optional)
     * @param contactPhone  (optional)
     * @param contactEmail  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param status  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimSitesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimSitesList200Response dcimSitesList(String q, String name, String slug, String facility, BigDecimal asn, String contactName, String contactPhone, String contactEmail, String idIn, String status, String regionId, String region, String tenantId, String tenant, String tag, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimSitesList200Response> localVarResp = dcimSitesListWithHttpInfo(q, name, slug, facility, asn, contactName, contactPhone, contactEmail, idIn, status, regionId, region, tenantId, tenant, tag, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param q  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param facility  (optional)
     * @param asn  (optional)
     * @param contactName  (optional)
     * @param contactPhone  (optional)
     * @param contactEmail  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param status  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimSitesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimSitesList200Response> dcimSitesListWithHttpInfo(String q, String name, String slug, String facility, BigDecimal asn, String contactName, String contactPhone, String contactEmail, String idIn, String status, String regionId, String region, String tenantId, String tenant, String tag, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesListValidateBeforeCall(q, name, slug, facility, asn, contactName, contactPhone, contactEmail, idIn, status, regionId, region, tenantId, tenant, tag, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimSitesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param q  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param facility  (optional)
     * @param asn  (optional)
     * @param contactName  (optional)
     * @param contactPhone  (optional)
     * @param contactEmail  (optional)
     * @param idIn Multiple values may be separated by commas. (optional)
     * @param status  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tag  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesListAsync(String q, String name, String slug, String facility, BigDecimal asn, String contactName, String contactPhone, String contactEmail, String idIn, String status, String regionId, String region, String tenantId, String tenant, String tag, Integer limit, Integer offset, final ApiCallback<DcimSitesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesListValidateBeforeCall(q, name, slug, facility, asn, contactName, contactPhone, contactEmail, idIn, status, regionId, region, tenantId, tenant, tag, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimSitesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesPartialUpdate
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesPartialUpdateCall(Integer id, WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableSite;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesPartialUpdateValidateBeforeCall(Integer id, WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableSite' is set
        if (writableSite == null) {
            throw new ApiException("Missing the required parameter 'writableSite' when calling dcimSitesPartialUpdate(Async)");
        }

        return dcimSitesPartialUpdateCall(id, writableSite, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesPartialUpdate(Integer id, WritableSite writableSite) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesPartialUpdateWithHttpInfo(id, writableSite);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesPartialUpdateWithHttpInfo(Integer id, WritableSite writableSite) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesPartialUpdateValidateBeforeCall(id, writableSite, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesPartialUpdateAsync(Integer id, WritableSite writableSite, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesPartialUpdateValidateBeforeCall(id, writableSite, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesRead
     * @param id A unique integer value identifying this site. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesRead(Async)");
        }

        return dcimSitesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesRead(Integer id) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesReadAsync(Integer id, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesUpdate
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesUpdateCall(Integer id, WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableSite;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesUpdateValidateBeforeCall(Integer id, WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesUpdate(Async)");
        }

        // verify the required parameter 'writableSite' is set
        if (writableSite == null) {
            throw new ApiException("Missing the required parameter 'writableSite' when calling dcimSitesUpdate(Async)");
        }

        return dcimSitesUpdateCall(id, writableSite, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesUpdate(Integer id, WritableSite writableSite) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesUpdateWithHttpInfo(id, writableSite);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesUpdateWithHttpInfo(Integer id, WritableSite writableSite) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesUpdateValidateBeforeCall(id, writableSite, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesUpdateAsync(Integer id, WritableSite writableSite, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesUpdateValidateBeforeCall(id, writableSite, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisCreate
     * @param writableVirtualChassis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisCreateCall(WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVirtualChassis;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisCreateValidateBeforeCall(WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableVirtualChassis' is set
        if (writableVirtualChassis == null) {
            throw new ApiException("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisCreate(Async)");
        }

        return dcimVirtualChassisCreateCall(writableVirtualChassis, _callback);

    }

    /**
     * 
     * 
     * @param writableVirtualChassis  (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisCreate(WritableVirtualChassis writableVirtualChassis) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisCreateWithHttpInfo(writableVirtualChassis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableVirtualChassis  (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisCreateWithHttpInfo(WritableVirtualChassis writableVirtualChassis) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisCreateValidateBeforeCall(writableVirtualChassis, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableVirtualChassis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisCreateAsync(WritableVirtualChassis writableVirtualChassis, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisCreateValidateBeforeCall(writableVirtualChassis, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisDelete
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualChassisDelete(Async)");
        }

        return dcimVirtualChassisDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimVirtualChassisDelete(Integer id) throws ApiException {
        dcimVirtualChassisDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimVirtualChassisDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisList
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisListCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisListValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimVirtualChassisListCall(limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimVirtualChassisList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimVirtualChassisList200Response dcimVirtualChassisList(Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimVirtualChassisList200Response> localVarResp = dcimVirtualChassisListWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimVirtualChassisList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimVirtualChassisList200Response> dcimVirtualChassisListWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisListValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimVirtualChassisList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisListAsync(Integer limit, Integer offset, final ApiCallback<DcimVirtualChassisList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisListValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimVirtualChassisList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisPartialUpdate
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisPartialUpdateCall(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVirtualChassis;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisPartialUpdateValidateBeforeCall(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualChassisPartialUpdate(Async)");
        }

        // verify the required parameter 'writableVirtualChassis' is set
        if (writableVirtualChassis == null) {
            throw new ApiException("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisPartialUpdate(Async)");
        }

        return dcimVirtualChassisPartialUpdateCall(id, writableVirtualChassis, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisPartialUpdate(Integer id, WritableVirtualChassis writableVirtualChassis) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisPartialUpdateWithHttpInfo(id, writableVirtualChassis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisPartialUpdateWithHttpInfo(Integer id, WritableVirtualChassis writableVirtualChassis) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisPartialUpdateValidateBeforeCall(id, writableVirtualChassis, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisPartialUpdateAsync(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisPartialUpdateValidateBeforeCall(id, writableVirtualChassis, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisRead
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualChassisRead(Async)");
        }

        return dcimVirtualChassisReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisRead(Integer id) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisReadAsync(Integer id, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisUpdate
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisUpdateCall(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVirtualChassis;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisUpdateValidateBeforeCall(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualChassisUpdate(Async)");
        }

        // verify the required parameter 'writableVirtualChassis' is set
        if (writableVirtualChassis == null) {
            throw new ApiException("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisUpdate(Async)");
        }

        return dcimVirtualChassisUpdateCall(id, writableVirtualChassis, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisUpdate(Integer id, WritableVirtualChassis writableVirtualChassis) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisUpdateWithHttpInfo(id, writableVirtualChassis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisUpdateWithHttpInfo(Integer id, WritableVirtualChassis writableVirtualChassis) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisUpdateValidateBeforeCall(id, writableVirtualChassis, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisUpdateAsync(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisUpdateValidateBeforeCall(id, writableVirtualChassis, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
