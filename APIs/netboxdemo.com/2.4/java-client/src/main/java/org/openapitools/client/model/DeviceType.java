/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InterfaceOrdering;
import org.openapitools.client.model.NestedManufacturer;
import org.openapitools.client.model.SubdeviceRole;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeviceType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:46.515038-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceType {
  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private LocalDate created;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INSTANCE_COUNT = "instance_count";
  @SerializedName(SERIALIZED_NAME_INSTANCE_COUNT)
  private Integer instanceCount;

  public static final String SERIALIZED_NAME_INTERFACE_ORDERING = "interface_ordering";
  @SerializedName(SERIALIZED_NAME_INTERFACE_ORDERING)
  private InterfaceOrdering interfaceOrdering;

  public static final String SERIALIZED_NAME_IS_CONSOLE_SERVER = "is_console_server";
  @SerializedName(SERIALIZED_NAME_IS_CONSOLE_SERVER)
  private Boolean isConsoleServer;

  public static final String SERIALIZED_NAME_IS_FULL_DEPTH = "is_full_depth";
  @SerializedName(SERIALIZED_NAME_IS_FULL_DEPTH)
  private Boolean isFullDepth;

  public static final String SERIALIZED_NAME_IS_NETWORK_DEVICE = "is_network_device";
  @SerializedName(SERIALIZED_NAME_IS_NETWORK_DEVICE)
  private Boolean isNetworkDevice;

  public static final String SERIALIZED_NAME_IS_PDU = "is_pdu";
  @SerializedName(SERIALIZED_NAME_IS_PDU)
  private Boolean isPdu;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private NestedManufacturer manufacturer;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_PART_NUMBER = "part_number";
  @SerializedName(SERIALIZED_NAME_PART_NUMBER)
  private String partNumber;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_SUBDEVICE_ROLE = "subdevice_role";
  @SerializedName(SERIALIZED_NAME_SUBDEVICE_ROLE)
  private SubdeviceRole subdeviceRole;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_U_HEIGHT = "u_height";
  @SerializedName(SERIALIZED_NAME_U_HEIGHT)
  private Integer uHeight;

  public DeviceType() {
  }

  public DeviceType(
     LocalDate created, 
     Integer id, 
     Integer instanceCount, 
     OffsetDateTime lastUpdated
  ) {
    this();
    this.created = created;
    this.id = id;
    this.instanceCount = instanceCount;
    this.lastUpdated = lastUpdated;
  }

  public DeviceType comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public LocalDate getCreated() {
    return created;
  }



  public DeviceType customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  /**
   * Get instanceCount
   * @return instanceCount
   */
  @javax.annotation.Nullable
  public Integer getInstanceCount() {
    return instanceCount;
  }



  public DeviceType interfaceOrdering(InterfaceOrdering interfaceOrdering) {
    this.interfaceOrdering = interfaceOrdering;
    return this;
  }

  /**
   * Get interfaceOrdering
   * @return interfaceOrdering
   */
  @javax.annotation.Nullable
  public InterfaceOrdering getInterfaceOrdering() {
    return interfaceOrdering;
  }

  public void setInterfaceOrdering(InterfaceOrdering interfaceOrdering) {
    this.interfaceOrdering = interfaceOrdering;
  }


  public DeviceType isConsoleServer(Boolean isConsoleServer) {
    this.isConsoleServer = isConsoleServer;
    return this;
  }

  /**
   * This type of device has console server ports
   * @return isConsoleServer
   */
  @javax.annotation.Nullable
  public Boolean getIsConsoleServer() {
    return isConsoleServer;
  }

  public void setIsConsoleServer(Boolean isConsoleServer) {
    this.isConsoleServer = isConsoleServer;
  }


  public DeviceType isFullDepth(Boolean isFullDepth) {
    this.isFullDepth = isFullDepth;
    return this;
  }

  /**
   * Device consumes both front and rear rack faces
   * @return isFullDepth
   */
  @javax.annotation.Nullable
  public Boolean getIsFullDepth() {
    return isFullDepth;
  }

  public void setIsFullDepth(Boolean isFullDepth) {
    this.isFullDepth = isFullDepth;
  }


  public DeviceType isNetworkDevice(Boolean isNetworkDevice) {
    this.isNetworkDevice = isNetworkDevice;
    return this;
  }

  /**
   * This type of device has network interfaces
   * @return isNetworkDevice
   */
  @javax.annotation.Nullable
  public Boolean getIsNetworkDevice() {
    return isNetworkDevice;
  }

  public void setIsNetworkDevice(Boolean isNetworkDevice) {
    this.isNetworkDevice = isNetworkDevice;
  }


  public DeviceType isPdu(Boolean isPdu) {
    this.isPdu = isPdu;
    return this;
  }

  /**
   * This type of device has power outlets
   * @return isPdu
   */
  @javax.annotation.Nullable
  public Boolean getIsPdu() {
    return isPdu;
  }

  public void setIsPdu(Boolean isPdu) {
    this.isPdu = isPdu;
  }


  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }



  public DeviceType manufacturer(NestedManufacturer manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * Get manufacturer
   * @return manufacturer
   */
  @javax.annotation.Nonnull
  public NestedManufacturer getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(NestedManufacturer manufacturer) {
    this.manufacturer = manufacturer;
  }


  public DeviceType model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nonnull
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public DeviceType partNumber(String partNumber) {
    this.partNumber = partNumber;
    return this;
  }

  /**
   * Discrete part number (optional)
   * @return partNumber
   */
  @javax.annotation.Nullable
  public String getPartNumber() {
    return partNumber;
  }

  public void setPartNumber(String partNumber) {
    this.partNumber = partNumber;
  }


  public DeviceType slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public DeviceType subdeviceRole(SubdeviceRole subdeviceRole) {
    this.subdeviceRole = subdeviceRole;
    return this;
  }

  /**
   * Get subdeviceRole
   * @return subdeviceRole
   */
  @javax.annotation.Nullable
  public SubdeviceRole getSubdeviceRole() {
    return subdeviceRole;
  }

  public void setSubdeviceRole(SubdeviceRole subdeviceRole) {
    this.subdeviceRole = subdeviceRole;
  }


  public DeviceType tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public DeviceType addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public DeviceType uHeight(Integer uHeight) {
    this.uHeight = uHeight;
    return this;
  }

  /**
   * Get uHeight
   * minimum: 0
   * maximum: 32767
   * @return uHeight
   */
  @javax.annotation.Nullable
  public Integer getuHeight() {
    return uHeight;
  }

  public void setuHeight(Integer uHeight) {
    this.uHeight = uHeight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceType deviceType = (DeviceType) o;
    return Objects.equals(this.comments, deviceType.comments) &&
        Objects.equals(this.created, deviceType.created) &&
        Objects.equals(this.customFields, deviceType.customFields) &&
        Objects.equals(this.id, deviceType.id) &&
        Objects.equals(this.instanceCount, deviceType.instanceCount) &&
        Objects.equals(this.interfaceOrdering, deviceType.interfaceOrdering) &&
        Objects.equals(this.isConsoleServer, deviceType.isConsoleServer) &&
        Objects.equals(this.isFullDepth, deviceType.isFullDepth) &&
        Objects.equals(this.isNetworkDevice, deviceType.isNetworkDevice) &&
        Objects.equals(this.isPdu, deviceType.isPdu) &&
        Objects.equals(this.lastUpdated, deviceType.lastUpdated) &&
        Objects.equals(this.manufacturer, deviceType.manufacturer) &&
        Objects.equals(this.model, deviceType.model) &&
        Objects.equals(this.partNumber, deviceType.partNumber) &&
        Objects.equals(this.slug, deviceType.slug) &&
        Objects.equals(this.subdeviceRole, deviceType.subdeviceRole) &&
        Objects.equals(this.tags, deviceType.tags) &&
        Objects.equals(this.uHeight, deviceType.uHeight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, created, customFields, id, instanceCount, interfaceOrdering, isConsoleServer, isFullDepth, isNetworkDevice, isPdu, lastUpdated, manufacturer, model, partNumber, slug, subdeviceRole, tags, uHeight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceType {\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instanceCount: ").append(toIndentedString(instanceCount)).append("\n");
    sb.append("    interfaceOrdering: ").append(toIndentedString(interfaceOrdering)).append("\n");
    sb.append("    isConsoleServer: ").append(toIndentedString(isConsoleServer)).append("\n");
    sb.append("    isFullDepth: ").append(toIndentedString(isFullDepth)).append("\n");
    sb.append("    isNetworkDevice: ").append(toIndentedString(isNetworkDevice)).append("\n");
    sb.append("    isPdu: ").append(toIndentedString(isPdu)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    partNumber: ").append(toIndentedString(partNumber)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    subdeviceRole: ").append(toIndentedString(subdeviceRole)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    uHeight: ").append(toIndentedString(uHeight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comments");
    openapiFields.add("created");
    openapiFields.add("custom_fields");
    openapiFields.add("id");
    openapiFields.add("instance_count");
    openapiFields.add("interface_ordering");
    openapiFields.add("is_console_server");
    openapiFields.add("is_full_depth");
    openapiFields.add("is_network_device");
    openapiFields.add("is_pdu");
    openapiFields.add("last_updated");
    openapiFields.add("manufacturer");
    openapiFields.add("model");
    openapiFields.add("part_number");
    openapiFields.add("slug");
    openapiFields.add("subdevice_role");
    openapiFields.add("tags");
    openapiFields.add("u_height");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("manufacturer");
    openapiRequiredFields.add("model");
    openapiRequiredFields.add("slug");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceType is not found in the empty JSON string", DeviceType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeviceType.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      // validate the optional field `interface_ordering`
      if (jsonObj.get("interface_ordering") != null && !jsonObj.get("interface_ordering").isJsonNull()) {
        InterfaceOrdering.validateJsonElement(jsonObj.get("interface_ordering"));
      }
      // validate the required field `manufacturer`
      NestedManufacturer.validateJsonElement(jsonObj.get("manufacturer"));
      if (!jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("part_number") != null && !jsonObj.get("part_number").isJsonNull()) && !jsonObj.get("part_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `part_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("part_number").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      // validate the optional field `subdevice_role`
      if (jsonObj.get("subdevice_role") != null && !jsonObj.get("subdevice_role").isJsonNull()) {
        SubdeviceRole.validateJsonElement(jsonObj.get("subdevice_role"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceType.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceType>() {
           @Override
           public void write(JsonWriter out, DeviceType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceType
   * @throws IOException if the JSON string is invalid with respect to DeviceType
   */
  public static DeviceType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceType.class);
  }

  /**
   * Convert an instance of DeviceType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

