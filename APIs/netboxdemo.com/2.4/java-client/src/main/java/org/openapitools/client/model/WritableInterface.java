/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WritableInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:46.515038-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WritableInterface {
  public static final String SERIALIZED_NAME_CIRCUIT_TERMINATION = "circuit_termination";
  @SerializedName(SERIALIZED_NAME_CIRCUIT_TERMINATION)
  private Integer circuitTermination;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private Integer device;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  /**
   * Gets or Sets formFactor
   */
  @JsonAdapter(FormFactorEnum.Adapter.class)
  public enum FormFactorEnum {
    NUMBER_0(0),
    
    NUMBER_200(200),
    
    NUMBER_800(800),
    
    NUMBER_1000(1000),
    
    NUMBER_1150(1150),
    
    NUMBER_1170(1170),
    
    NUMBER_1050(1050),
    
    NUMBER_1100(1100),
    
    NUMBER_1200(1200),
    
    NUMBER_1300(1300),
    
    NUMBER_1310(1310),
    
    NUMBER_1320(1320),
    
    NUMBER_1350(1350),
    
    NUMBER_1400(1400),
    
    NUMBER_1500(1500),
    
    NUMBER_1510(1510),
    
    NUMBER_1520(1520),
    
    NUMBER_1550(1550),
    
    NUMBER_1600(1600),
    
    NUMBER_2600(2600),
    
    NUMBER_2610(2610),
    
    NUMBER_2620(2620),
    
    NUMBER_2630(2630),
    
    NUMBER_2640(2640),
    
    NUMBER_6100(6100),
    
    NUMBER_6200(6200),
    
    NUMBER_6300(6300),
    
    NUMBER_6400(6400),
    
    NUMBER_6500(6500),
    
    NUMBER_6600(6600),
    
    NUMBER_6700(6700),
    
    NUMBER_3010(3010),
    
    NUMBER_3020(3020),
    
    NUMBER_3040(3040),
    
    NUMBER_3080(3080),
    
    NUMBER_3160(3160),
    
    NUMBER_3320(3320),
    
    NUMBER_4000(4000),
    
    NUMBER_4010(4010),
    
    NUMBER_4040(4040),
    
    NUMBER_4050(4050),
    
    NUMBER_5000(5000),
    
    NUMBER_5050(5050),
    
    NUMBER_5100(5100),
    
    NUMBER_5150(5150),
    
    NUMBER_5200(5200),
    
    NUMBER_5300(5300),
    
    NUMBER_5310(5310),
    
    NUMBER_5320(5320),
    
    NUMBER_5330(5330),
    
    NUMBER_32767(32767);

    private Integer value;

    FormFactorEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormFactorEnum fromValue(Integer value) {
      for (FormFactorEnum b : FormFactorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormFactorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormFactorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormFactorEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return FormFactorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      FormFactorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORM_FACTOR = "form_factor";
  @SerializedName(SERIALIZED_NAME_FORM_FACTOR)
  private FormFactorEnum formFactor;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INTERFACE_CONNECTION = "interface_connection";
  @SerializedName(SERIALIZED_NAME_INTERFACE_CONNECTION)
  private String interfaceConnection;

  public static final String SERIALIZED_NAME_IS_CONNECTED = "is_connected";
  @SerializedName(SERIALIZED_NAME_IS_CONNECTED)
  private String isConnected;

  public static final String SERIALIZED_NAME_LAG = "lag";
  @SerializedName(SERIALIZED_NAME_LAG)
  private Integer lag;

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "mac_address";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private String macAddress;

  public static final String SERIALIZED_NAME_MGMT_ONLY = "mgmt_only";
  @SerializedName(SERIALIZED_NAME_MGMT_ONLY)
  private Boolean mgmtOnly;

  /**
   * Gets or Sets mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    NUMBER_100(100),
    
    NUMBER_200(200),
    
    NUMBER_300(300);

    private Integer value;

    ModeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(Integer value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_MTU = "mtu";
  @SerializedName(SERIALIZED_NAME_MTU)
  private Integer mtu;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGGED_VLANS = "tagged_vlans";
  @SerializedName(SERIALIZED_NAME_TAGGED_VLANS)
  private Set<Integer> taggedVlans = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNTAGGED_VLAN = "untagged_vlan";
  @SerializedName(SERIALIZED_NAME_UNTAGGED_VLAN)
  private Integer untaggedVlan;

  public WritableInterface() {
  }

  public WritableInterface(
     Integer id, 
     String interfaceConnection, 
     String isConnected
  ) {
    this();
    this.id = id;
    this.interfaceConnection = interfaceConnection;
    this.isConnected = isConnected;
  }

  public WritableInterface circuitTermination(Integer circuitTermination) {
    this.circuitTermination = circuitTermination;
    return this;
  }

  /**
   * Get circuitTermination
   * @return circuitTermination
   */
  @javax.annotation.Nonnull
  public Integer getCircuitTermination() {
    return circuitTermination;
  }

  public void setCircuitTermination(Integer circuitTermination) {
    this.circuitTermination = circuitTermination;
  }


  public WritableInterface description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public WritableInterface device(Integer device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device
   */
  @javax.annotation.Nonnull
  public Integer getDevice() {
    return device;
  }

  public void setDevice(Integer device) {
    this.device = device;
  }


  public WritableInterface enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public WritableInterface formFactor(FormFactorEnum formFactor) {
    this.formFactor = formFactor;
    return this;
  }

  /**
   * Get formFactor
   * @return formFactor
   */
  @javax.annotation.Nullable
  public FormFactorEnum getFormFactor() {
    return formFactor;
  }

  public void setFormFactor(FormFactorEnum formFactor) {
    this.formFactor = formFactor;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  /**
   * Get interfaceConnection
   * @return interfaceConnection
   */
  @javax.annotation.Nullable
  public String getInterfaceConnection() {
    return interfaceConnection;
  }



  /**
   * Get isConnected
   * @return isConnected
   */
  @javax.annotation.Nullable
  public String getIsConnected() {
    return isConnected;
  }



  public WritableInterface lag(Integer lag) {
    this.lag = lag;
    return this;
  }

  /**
   * Get lag
   * @return lag
   */
  @javax.annotation.Nullable
  public Integer getLag() {
    return lag;
  }

  public void setLag(Integer lag) {
    this.lag = lag;
  }


  public WritableInterface macAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  /**
   * Get macAddress
   * @return macAddress
   */
  @javax.annotation.Nullable
  public String getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }


  public WritableInterface mgmtOnly(Boolean mgmtOnly) {
    this.mgmtOnly = mgmtOnly;
    return this;
  }

  /**
   * This interface is used only for out-of-band management
   * @return mgmtOnly
   */
  @javax.annotation.Nullable
  public Boolean getMgmtOnly() {
    return mgmtOnly;
  }

  public void setMgmtOnly(Boolean mgmtOnly) {
    this.mgmtOnly = mgmtOnly;
  }


  public WritableInterface mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public WritableInterface mtu(Integer mtu) {
    this.mtu = mtu;
    return this;
  }

  /**
   * Get mtu
   * minimum: 1
   * maximum: 65536
   * @return mtu
   */
  @javax.annotation.Nullable
  public Integer getMtu() {
    return mtu;
  }

  public void setMtu(Integer mtu) {
    this.mtu = mtu;
  }


  public WritableInterface name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WritableInterface taggedVlans(Set<Integer> taggedVlans) {
    this.taggedVlans = taggedVlans;
    return this;
  }

  public WritableInterface addTaggedVlansItem(Integer taggedVlansItem) {
    if (this.taggedVlans == null) {
      this.taggedVlans = new LinkedHashSet<>();
    }
    this.taggedVlans.add(taggedVlansItem);
    return this;
  }

  /**
   * Get taggedVlans
   * @return taggedVlans
   */
  @javax.annotation.Nullable
  public Set<Integer> getTaggedVlans() {
    return taggedVlans;
  }

  public void setTaggedVlans(Set<Integer> taggedVlans) {
    this.taggedVlans = taggedVlans;
  }


  public WritableInterface tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public WritableInterface addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public WritableInterface untaggedVlan(Integer untaggedVlan) {
    this.untaggedVlan = untaggedVlan;
    return this;
  }

  /**
   * Get untaggedVlan
   * @return untaggedVlan
   */
  @javax.annotation.Nullable
  public Integer getUntaggedVlan() {
    return untaggedVlan;
  }

  public void setUntaggedVlan(Integer untaggedVlan) {
    this.untaggedVlan = untaggedVlan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritableInterface writableInterface = (WritableInterface) o;
    return Objects.equals(this.circuitTermination, writableInterface.circuitTermination) &&
        Objects.equals(this.description, writableInterface.description) &&
        Objects.equals(this.device, writableInterface.device) &&
        Objects.equals(this.enabled, writableInterface.enabled) &&
        Objects.equals(this.formFactor, writableInterface.formFactor) &&
        Objects.equals(this.id, writableInterface.id) &&
        Objects.equals(this.interfaceConnection, writableInterface.interfaceConnection) &&
        Objects.equals(this.isConnected, writableInterface.isConnected) &&
        Objects.equals(this.lag, writableInterface.lag) &&
        Objects.equals(this.macAddress, writableInterface.macAddress) &&
        Objects.equals(this.mgmtOnly, writableInterface.mgmtOnly) &&
        Objects.equals(this.mode, writableInterface.mode) &&
        Objects.equals(this.mtu, writableInterface.mtu) &&
        Objects.equals(this.name, writableInterface.name) &&
        Objects.equals(this.taggedVlans, writableInterface.taggedVlans) &&
        Objects.equals(this.tags, writableInterface.tags) &&
        Objects.equals(this.untaggedVlan, writableInterface.untaggedVlan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(circuitTermination, description, device, enabled, formFactor, id, interfaceConnection, isConnected, lag, macAddress, mgmtOnly, mode, mtu, name, taggedVlans, tags, untaggedVlan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritableInterface {\n");
    sb.append("    circuitTermination: ").append(toIndentedString(circuitTermination)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    formFactor: ").append(toIndentedString(formFactor)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interfaceConnection: ").append(toIndentedString(interfaceConnection)).append("\n");
    sb.append("    isConnected: ").append(toIndentedString(isConnected)).append("\n");
    sb.append("    lag: ").append(toIndentedString(lag)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    mgmtOnly: ").append(toIndentedString(mgmtOnly)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    mtu: ").append(toIndentedString(mtu)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    taggedVlans: ").append(toIndentedString(taggedVlans)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    untaggedVlan: ").append(toIndentedString(untaggedVlan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("circuit_termination");
    openapiFields.add("description");
    openapiFields.add("device");
    openapiFields.add("enabled");
    openapiFields.add("form_factor");
    openapiFields.add("id");
    openapiFields.add("interface_connection");
    openapiFields.add("is_connected");
    openapiFields.add("lag");
    openapiFields.add("mac_address");
    openapiFields.add("mgmt_only");
    openapiFields.add("mode");
    openapiFields.add("mtu");
    openapiFields.add("name");
    openapiFields.add("tagged_vlans");
    openapiFields.add("tags");
    openapiFields.add("untagged_vlan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("circuit_termination");
    openapiRequiredFields.add("device");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WritableInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WritableInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WritableInterface is not found in the empty JSON string", WritableInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WritableInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WritableInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WritableInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `form_factor`
      if (jsonObj.get("form_factor") != null && !jsonObj.get("form_factor").isJsonNull()) {
        FormFactorEnum.validateJsonElement(jsonObj.get("form_factor"));
      }
      if ((jsonObj.get("interface_connection") != null && !jsonObj.get("interface_connection").isJsonNull()) && !jsonObj.get("interface_connection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interface_connection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interface_connection").toString()));
      }
      if ((jsonObj.get("is_connected") != null && !jsonObj.get("is_connected").isJsonNull()) && !jsonObj.get("is_connected").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_connected` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_connected").toString()));
      }
      if ((jsonObj.get("mac_address") != null && !jsonObj.get("mac_address").isJsonNull()) && !jsonObj.get("mac_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac_address").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tagged_vlans") != null && !jsonObj.get("tagged_vlans").isJsonNull() && !jsonObj.get("tagged_vlans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagged_vlans` to be an array in the JSON string but got `%s`", jsonObj.get("tagged_vlans").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WritableInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WritableInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WritableInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WritableInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<WritableInterface>() {
           @Override
           public void write(JsonWriter out, WritableInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WritableInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WritableInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WritableInterface
   * @throws IOException if the JSON string is invalid with respect to WritableInterface
   */
  public static WritableInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WritableInterface.class);
  }

  /**
   * Convert an instance of WritableInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

