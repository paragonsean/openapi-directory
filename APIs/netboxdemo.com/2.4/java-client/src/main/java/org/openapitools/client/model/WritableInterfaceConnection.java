/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WritableInterfaceConnection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:46.515038-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WritableInterfaceConnection {
  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "connection_status";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private Boolean connectionStatus;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INTERFACE_A = "interface_a";
  @SerializedName(SERIALIZED_NAME_INTERFACE_A)
  private Integer interfaceA;

  public static final String SERIALIZED_NAME_INTERFACE_B = "interface_b";
  @SerializedName(SERIALIZED_NAME_INTERFACE_B)
  private Integer interfaceB;

  public WritableInterfaceConnection() {
  }

  public WritableInterfaceConnection(
     Integer id
  ) {
    this();
    this.id = id;
  }

  public WritableInterfaceConnection connectionStatus(Boolean connectionStatus) {
    this.connectionStatus = connectionStatus;
    return this;
  }

  /**
   * Get connectionStatus
   * @return connectionStatus
   */
  @javax.annotation.Nullable
  public Boolean getConnectionStatus() {
    return connectionStatus;
  }

  public void setConnectionStatus(Boolean connectionStatus) {
    this.connectionStatus = connectionStatus;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public WritableInterfaceConnection interfaceA(Integer interfaceA) {
    this.interfaceA = interfaceA;
    return this;
  }

  /**
   * Get interfaceA
   * @return interfaceA
   */
  @javax.annotation.Nonnull
  public Integer getInterfaceA() {
    return interfaceA;
  }

  public void setInterfaceA(Integer interfaceA) {
    this.interfaceA = interfaceA;
  }


  public WritableInterfaceConnection interfaceB(Integer interfaceB) {
    this.interfaceB = interfaceB;
    return this;
  }

  /**
   * Get interfaceB
   * @return interfaceB
   */
  @javax.annotation.Nonnull
  public Integer getInterfaceB() {
    return interfaceB;
  }

  public void setInterfaceB(Integer interfaceB) {
    this.interfaceB = interfaceB;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritableInterfaceConnection writableInterfaceConnection = (WritableInterfaceConnection) o;
    return Objects.equals(this.connectionStatus, writableInterfaceConnection.connectionStatus) &&
        Objects.equals(this.id, writableInterfaceConnection.id) &&
        Objects.equals(this.interfaceA, writableInterfaceConnection.interfaceA) &&
        Objects.equals(this.interfaceB, writableInterfaceConnection.interfaceB);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionStatus, id, interfaceA, interfaceB);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritableInterfaceConnection {\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interfaceA: ").append(toIndentedString(interfaceA)).append("\n");
    sb.append("    interfaceB: ").append(toIndentedString(interfaceB)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connection_status");
    openapiFields.add("id");
    openapiFields.add("interface_a");
    openapiFields.add("interface_b");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("interface_a");
    openapiRequiredFields.add("interface_b");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WritableInterfaceConnection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WritableInterfaceConnection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WritableInterfaceConnection is not found in the empty JSON string", WritableInterfaceConnection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WritableInterfaceConnection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WritableInterfaceConnection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WritableInterfaceConnection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WritableInterfaceConnection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WritableInterfaceConnection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WritableInterfaceConnection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WritableInterfaceConnection.class));

       return (TypeAdapter<T>) new TypeAdapter<WritableInterfaceConnection>() {
           @Override
           public void write(JsonWriter out, WritableInterfaceConnection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WritableInterfaceConnection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WritableInterfaceConnection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WritableInterfaceConnection
   * @throws IOException if the JSON string is invalid with respect to WritableInterfaceConnection
   */
  public static WritableInterfaceConnection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WritableInterfaceConnection.class);
  }

  /**
   * Convert an instance of WritableInterfaceConnection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

