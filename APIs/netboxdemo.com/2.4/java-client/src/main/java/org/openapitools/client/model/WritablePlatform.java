/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WritablePlatform
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:46.515038-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WritablePlatform {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private Integer manufacturer;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAPALM_ARGS = "napalm_args";
  @SerializedName(SERIALIZED_NAME_NAPALM_ARGS)
  private String napalmArgs;

  public static final String SERIALIZED_NAME_NAPALM_DRIVER = "napalm_driver";
  @SerializedName(SERIALIZED_NAME_NAPALM_DRIVER)
  private String napalmDriver;

  /**
   * Gets or Sets rpcClient
   */
  @JsonAdapter(RpcClientEnum.Adapter.class)
  public enum RpcClientEnum {
    JUNIPER_JUNOS("juniper-junos"),
    
    CISCO_IOS("cisco-ios"),
    
    OPENGEAR("opengear");

    private String value;

    RpcClientEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RpcClientEnum fromValue(String value) {
      for (RpcClientEnum b : RpcClientEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RpcClientEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RpcClientEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RpcClientEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RpcClientEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RpcClientEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RPC_CLIENT = "rpc_client";
  @SerializedName(SERIALIZED_NAME_RPC_CLIENT)
  private RpcClientEnum rpcClient;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public WritablePlatform() {
  }

  public WritablePlatform(
     Integer id
  ) {
    this();
    this.id = id;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public WritablePlatform manufacturer(Integer manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * Optionally limit this platform to devices of a certain manufacturer
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public Integer getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(Integer manufacturer) {
    this.manufacturer = manufacturer;
  }


  public WritablePlatform name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WritablePlatform napalmArgs(String napalmArgs) {
    this.napalmArgs = napalmArgs;
    return this;
  }

  /**
   * Additional arguments to pass when initiating the NAPALM driver (JSON format)
   * @return napalmArgs
   */
  @javax.annotation.Nullable
  public String getNapalmArgs() {
    return napalmArgs;
  }

  public void setNapalmArgs(String napalmArgs) {
    this.napalmArgs = napalmArgs;
  }


  public WritablePlatform napalmDriver(String napalmDriver) {
    this.napalmDriver = napalmDriver;
    return this;
  }

  /**
   * The name of the NAPALM driver to use when interacting with devices
   * @return napalmDriver
   */
  @javax.annotation.Nullable
  public String getNapalmDriver() {
    return napalmDriver;
  }

  public void setNapalmDriver(String napalmDriver) {
    this.napalmDriver = napalmDriver;
  }


  public WritablePlatform rpcClient(RpcClientEnum rpcClient) {
    this.rpcClient = rpcClient;
    return this;
  }

  /**
   * Get rpcClient
   * @return rpcClient
   */
  @javax.annotation.Nullable
  public RpcClientEnum getRpcClient() {
    return rpcClient;
  }

  public void setRpcClient(RpcClientEnum rpcClient) {
    this.rpcClient = rpcClient;
  }


  public WritablePlatform slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritablePlatform writablePlatform = (WritablePlatform) o;
    return Objects.equals(this.id, writablePlatform.id) &&
        Objects.equals(this.manufacturer, writablePlatform.manufacturer) &&
        Objects.equals(this.name, writablePlatform.name) &&
        Objects.equals(this.napalmArgs, writablePlatform.napalmArgs) &&
        Objects.equals(this.napalmDriver, writablePlatform.napalmDriver) &&
        Objects.equals(this.rpcClient, writablePlatform.rpcClient) &&
        Objects.equals(this.slug, writablePlatform.slug);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, manufacturer, name, napalmArgs, napalmDriver, rpcClient, slug);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritablePlatform {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    napalmArgs: ").append(toIndentedString(napalmArgs)).append("\n");
    sb.append("    napalmDriver: ").append(toIndentedString(napalmDriver)).append("\n");
    sb.append("    rpcClient: ").append(toIndentedString(rpcClient)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("manufacturer");
    openapiFields.add("name");
    openapiFields.add("napalm_args");
    openapiFields.add("napalm_driver");
    openapiFields.add("rpc_client");
    openapiFields.add("slug");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("slug");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WritablePlatform
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WritablePlatform.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WritablePlatform is not found in the empty JSON string", WritablePlatform.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WritablePlatform.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WritablePlatform` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WritablePlatform.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("napalm_args") != null && !jsonObj.get("napalm_args").isJsonNull()) && !jsonObj.get("napalm_args").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `napalm_args` to be a primitive type in the JSON string but got `%s`", jsonObj.get("napalm_args").toString()));
      }
      if ((jsonObj.get("napalm_driver") != null && !jsonObj.get("napalm_driver").isJsonNull()) && !jsonObj.get("napalm_driver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `napalm_driver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("napalm_driver").toString()));
      }
      if ((jsonObj.get("rpc_client") != null && !jsonObj.get("rpc_client").isJsonNull()) && !jsonObj.get("rpc_client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rpc_client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rpc_client").toString()));
      }
      // validate the optional field `rpc_client`
      if (jsonObj.get("rpc_client") != null && !jsonObj.get("rpc_client").isJsonNull()) {
        RpcClientEnum.validateJsonElement(jsonObj.get("rpc_client"));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WritablePlatform.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WritablePlatform' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WritablePlatform> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WritablePlatform.class));

       return (TypeAdapter<T>) new TypeAdapter<WritablePlatform>() {
           @Override
           public void write(JsonWriter out, WritablePlatform value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WritablePlatform read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WritablePlatform given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WritablePlatform
   * @throws IOException if the JSON string is invalid with respect to WritablePlatform
   */
  public static WritablePlatform fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WritablePlatform.class);
  }

  /**
   * Convert an instance of WritablePlatform to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

