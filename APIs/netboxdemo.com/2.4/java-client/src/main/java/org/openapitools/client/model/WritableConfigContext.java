/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WritableConfigContext
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:46.515038-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WritableConfigContext {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLATFORMS = "platforms";
  @SerializedName(SERIALIZED_NAME_PLATFORMS)
  private Set<Integer> platforms = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_REGIONS = "regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private Set<Integer> regions = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private Set<Integer> roles = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SITES = "sites";
  @SerializedName(SERIALIZED_NAME_SITES)
  private Set<Integer> sites = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TENANT_GROUPS = "tenant_groups";
  @SerializedName(SERIALIZED_NAME_TENANT_GROUPS)
  private Set<Integer> tenantGroups = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TENANTS = "tenants";
  @SerializedName(SERIALIZED_NAME_TENANTS)
  private Set<Integer> tenants = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public WritableConfigContext() {
  }

  public WritableConfigContext(
     Integer id
  ) {
    this();
    this.id = id;
  }

  public WritableConfigContext data(String data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nonnull
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }


  public WritableConfigContext description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public WritableConfigContext isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Get isActive
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public WritableConfigContext name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WritableConfigContext platforms(Set<Integer> platforms) {
    this.platforms = platforms;
    return this;
  }

  public WritableConfigContext addPlatformsItem(Integer platformsItem) {
    if (this.platforms == null) {
      this.platforms = new LinkedHashSet<>();
    }
    this.platforms.add(platformsItem);
    return this;
  }

  /**
   * Get platforms
   * @return platforms
   */
  @javax.annotation.Nullable
  public Set<Integer> getPlatforms() {
    return platforms;
  }

  public void setPlatforms(Set<Integer> platforms) {
    this.platforms = platforms;
  }


  public WritableConfigContext regions(Set<Integer> regions) {
    this.regions = regions;
    return this;
  }

  public WritableConfigContext addRegionsItem(Integer regionsItem) {
    if (this.regions == null) {
      this.regions = new LinkedHashSet<>();
    }
    this.regions.add(regionsItem);
    return this;
  }

  /**
   * Get regions
   * @return regions
   */
  @javax.annotation.Nullable
  public Set<Integer> getRegions() {
    return regions;
  }

  public void setRegions(Set<Integer> regions) {
    this.regions = regions;
  }


  public WritableConfigContext roles(Set<Integer> roles) {
    this.roles = roles;
    return this;
  }

  public WritableConfigContext addRolesItem(Integer rolesItem) {
    if (this.roles == null) {
      this.roles = new LinkedHashSet<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * Get roles
   * @return roles
   */
  @javax.annotation.Nullable
  public Set<Integer> getRoles() {
    return roles;
  }

  public void setRoles(Set<Integer> roles) {
    this.roles = roles;
  }


  public WritableConfigContext sites(Set<Integer> sites) {
    this.sites = sites;
    return this;
  }

  public WritableConfigContext addSitesItem(Integer sitesItem) {
    if (this.sites == null) {
      this.sites = new LinkedHashSet<>();
    }
    this.sites.add(sitesItem);
    return this;
  }

  /**
   * Get sites
   * @return sites
   */
  @javax.annotation.Nullable
  public Set<Integer> getSites() {
    return sites;
  }

  public void setSites(Set<Integer> sites) {
    this.sites = sites;
  }


  public WritableConfigContext tenantGroups(Set<Integer> tenantGroups) {
    this.tenantGroups = tenantGroups;
    return this;
  }

  public WritableConfigContext addTenantGroupsItem(Integer tenantGroupsItem) {
    if (this.tenantGroups == null) {
      this.tenantGroups = new LinkedHashSet<>();
    }
    this.tenantGroups.add(tenantGroupsItem);
    return this;
  }

  /**
   * Get tenantGroups
   * @return tenantGroups
   */
  @javax.annotation.Nullable
  public Set<Integer> getTenantGroups() {
    return tenantGroups;
  }

  public void setTenantGroups(Set<Integer> tenantGroups) {
    this.tenantGroups = tenantGroups;
  }


  public WritableConfigContext tenants(Set<Integer> tenants) {
    this.tenants = tenants;
    return this;
  }

  public WritableConfigContext addTenantsItem(Integer tenantsItem) {
    if (this.tenants == null) {
      this.tenants = new LinkedHashSet<>();
    }
    this.tenants.add(tenantsItem);
    return this;
  }

  /**
   * Get tenants
   * @return tenants
   */
  @javax.annotation.Nullable
  public Set<Integer> getTenants() {
    return tenants;
  }

  public void setTenants(Set<Integer> tenants) {
    this.tenants = tenants;
  }


  public WritableConfigContext weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * minimum: 0
   * maximum: 32767
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritableConfigContext writableConfigContext = (WritableConfigContext) o;
    return Objects.equals(this.data, writableConfigContext.data) &&
        Objects.equals(this.description, writableConfigContext.description) &&
        Objects.equals(this.id, writableConfigContext.id) &&
        Objects.equals(this.isActive, writableConfigContext.isActive) &&
        Objects.equals(this.name, writableConfigContext.name) &&
        Objects.equals(this.platforms, writableConfigContext.platforms) &&
        Objects.equals(this.regions, writableConfigContext.regions) &&
        Objects.equals(this.roles, writableConfigContext.roles) &&
        Objects.equals(this.sites, writableConfigContext.sites) &&
        Objects.equals(this.tenantGroups, writableConfigContext.tenantGroups) &&
        Objects.equals(this.tenants, writableConfigContext.tenants) &&
        Objects.equals(this.weight, writableConfigContext.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, description, id, isActive, name, platforms, regions, roles, sites, tenantGroups, tenants, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritableConfigContext {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    platforms: ").append(toIndentedString(platforms)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    sites: ").append(toIndentedString(sites)).append("\n");
    sb.append("    tenantGroups: ").append(toIndentedString(tenantGroups)).append("\n");
    sb.append("    tenants: ").append(toIndentedString(tenants)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("is_active");
    openapiFields.add("name");
    openapiFields.add("platforms");
    openapiFields.add("regions");
    openapiFields.add("roles");
    openapiFields.add("sites");
    openapiFields.add("tenant_groups");
    openapiFields.add("tenants");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WritableConfigContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WritableConfigContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WritableConfigContext is not found in the empty JSON string", WritableConfigContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WritableConfigContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WritableConfigContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WritableConfigContext.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("platforms") != null && !jsonObj.get("platforms").isJsonNull() && !jsonObj.get("platforms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `platforms` to be an array in the JSON string but got `%s`", jsonObj.get("platforms").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("regions") != null && !jsonObj.get("regions").isJsonNull() && !jsonObj.get("regions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `regions` to be an array in the JSON string but got `%s`", jsonObj.get("regions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull() && !jsonObj.get("roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sites") != null && !jsonObj.get("sites").isJsonNull() && !jsonObj.get("sites").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sites` to be an array in the JSON string but got `%s`", jsonObj.get("sites").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tenant_groups") != null && !jsonObj.get("tenant_groups").isJsonNull() && !jsonObj.get("tenant_groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant_groups` to be an array in the JSON string but got `%s`", jsonObj.get("tenant_groups").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tenants") != null && !jsonObj.get("tenants").isJsonNull() && !jsonObj.get("tenants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenants` to be an array in the JSON string but got `%s`", jsonObj.get("tenants").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WritableConfigContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WritableConfigContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WritableConfigContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WritableConfigContext.class));

       return (TypeAdapter<T>) new TypeAdapter<WritableConfigContext>() {
           @Override
           public void write(JsonWriter out, WritableConfigContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WritableConfigContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WritableConfigContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WritableConfigContext
   * @throws IOException if the JSON string is invalid with respect to WritableConfigContext
   */
  public static WritableConfigContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WritableConfigContext.class);
  }

  /**
   * Convert an instance of WritableConfigContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

