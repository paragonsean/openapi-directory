/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WritableInterfaceTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:46.515038-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WritableInterfaceTemplate {
  public static final String SERIALIZED_NAME_DEVICE_TYPE = "device_type";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private Integer deviceType;

  /**
   * Gets or Sets formFactor
   */
  @JsonAdapter(FormFactorEnum.Adapter.class)
  public enum FormFactorEnum {
    NUMBER_0(0),
    
    NUMBER_200(200),
    
    NUMBER_800(800),
    
    NUMBER_1000(1000),
    
    NUMBER_1150(1150),
    
    NUMBER_1170(1170),
    
    NUMBER_1050(1050),
    
    NUMBER_1100(1100),
    
    NUMBER_1200(1200),
    
    NUMBER_1300(1300),
    
    NUMBER_1310(1310),
    
    NUMBER_1320(1320),
    
    NUMBER_1350(1350),
    
    NUMBER_1400(1400),
    
    NUMBER_1500(1500),
    
    NUMBER_1510(1510),
    
    NUMBER_1520(1520),
    
    NUMBER_1550(1550),
    
    NUMBER_1600(1600),
    
    NUMBER_2600(2600),
    
    NUMBER_2610(2610),
    
    NUMBER_2620(2620),
    
    NUMBER_2630(2630),
    
    NUMBER_2640(2640),
    
    NUMBER_6100(6100),
    
    NUMBER_6200(6200),
    
    NUMBER_6300(6300),
    
    NUMBER_6400(6400),
    
    NUMBER_6500(6500),
    
    NUMBER_6600(6600),
    
    NUMBER_6700(6700),
    
    NUMBER_3010(3010),
    
    NUMBER_3020(3020),
    
    NUMBER_3040(3040),
    
    NUMBER_3080(3080),
    
    NUMBER_3160(3160),
    
    NUMBER_3320(3320),
    
    NUMBER_4000(4000),
    
    NUMBER_4010(4010),
    
    NUMBER_4040(4040),
    
    NUMBER_4050(4050),
    
    NUMBER_5000(5000),
    
    NUMBER_5050(5050),
    
    NUMBER_5100(5100),
    
    NUMBER_5150(5150),
    
    NUMBER_5200(5200),
    
    NUMBER_5300(5300),
    
    NUMBER_5310(5310),
    
    NUMBER_5320(5320),
    
    NUMBER_5330(5330),
    
    NUMBER_32767(32767);

    private Integer value;

    FormFactorEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormFactorEnum fromValue(Integer value) {
      for (FormFactorEnum b : FormFactorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormFactorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormFactorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormFactorEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return FormFactorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      FormFactorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORM_FACTOR = "form_factor";
  @SerializedName(SERIALIZED_NAME_FORM_FACTOR)
  private FormFactorEnum formFactor;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MGMT_ONLY = "mgmt_only";
  @SerializedName(SERIALIZED_NAME_MGMT_ONLY)
  private Boolean mgmtOnly;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public WritableInterfaceTemplate() {
  }

  public WritableInterfaceTemplate(
     Integer id
  ) {
    this();
    this.id = id;
  }

  public WritableInterfaceTemplate deviceType(Integer deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * Get deviceType
   * @return deviceType
   */
  @javax.annotation.Nonnull
  public Integer getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(Integer deviceType) {
    this.deviceType = deviceType;
  }


  public WritableInterfaceTemplate formFactor(FormFactorEnum formFactor) {
    this.formFactor = formFactor;
    return this;
  }

  /**
   * Get formFactor
   * @return formFactor
   */
  @javax.annotation.Nullable
  public FormFactorEnum getFormFactor() {
    return formFactor;
  }

  public void setFormFactor(FormFactorEnum formFactor) {
    this.formFactor = formFactor;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public WritableInterfaceTemplate mgmtOnly(Boolean mgmtOnly) {
    this.mgmtOnly = mgmtOnly;
    return this;
  }

  /**
   * Get mgmtOnly
   * @return mgmtOnly
   */
  @javax.annotation.Nullable
  public Boolean getMgmtOnly() {
    return mgmtOnly;
  }

  public void setMgmtOnly(Boolean mgmtOnly) {
    this.mgmtOnly = mgmtOnly;
  }


  public WritableInterfaceTemplate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritableInterfaceTemplate writableInterfaceTemplate = (WritableInterfaceTemplate) o;
    return Objects.equals(this.deviceType, writableInterfaceTemplate.deviceType) &&
        Objects.equals(this.formFactor, writableInterfaceTemplate.formFactor) &&
        Objects.equals(this.id, writableInterfaceTemplate.id) &&
        Objects.equals(this.mgmtOnly, writableInterfaceTemplate.mgmtOnly) &&
        Objects.equals(this.name, writableInterfaceTemplate.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceType, formFactor, id, mgmtOnly, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritableInterfaceTemplate {\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    formFactor: ").append(toIndentedString(formFactor)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mgmtOnly: ").append(toIndentedString(mgmtOnly)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("device_type");
    openapiFields.add("form_factor");
    openapiFields.add("id");
    openapiFields.add("mgmt_only");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("device_type");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WritableInterfaceTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WritableInterfaceTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WritableInterfaceTemplate is not found in the empty JSON string", WritableInterfaceTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WritableInterfaceTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WritableInterfaceTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WritableInterfaceTemplate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `form_factor`
      if (jsonObj.get("form_factor") != null && !jsonObj.get("form_factor").isJsonNull()) {
        FormFactorEnum.validateJsonElement(jsonObj.get("form_factor"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WritableInterfaceTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WritableInterfaceTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WritableInterfaceTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WritableInterfaceTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<WritableInterfaceTemplate>() {
           @Override
           public void write(JsonWriter out, WritableInterfaceTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WritableInterfaceTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WritableInterfaceTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WritableInterfaceTemplate
   * @throws IOException if the JSON string is invalid with respect to WritableInterfaceTemplate
   */
  public static WritableInterfaceTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WritableInterfaceTemplate.class);
  }

  /**
   * Convert an instance of WritableInterfaceTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

