/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrefix.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrefix::OAIPrefix(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrefix::OAIPrefix() {
    this->initializeModel();
}

OAIPrefix::~OAIPrefix() {}

void OAIPrefix::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_family_isSet = false;
    m_family_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_pool_isSet = false;
    m_is_pool_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_vlan_isSet = false;
    m_vlan_isValid = false;

    m_vrf_isSet = false;
    m_vrf_isValid = false;
}

void OAIPrefix::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrefix::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_pool_isValid = ::OpenAPI::fromJsonValue(m_is_pool, json[QString("is_pool")]);
    m_is_pool_isSet = !json[QString("is_pool")].isNull() && m_is_pool_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_vlan_isValid = ::OpenAPI::fromJsonValue(m_vlan, json[QString("vlan")]);
    m_vlan_isSet = !json[QString("vlan")].isNull() && m_vlan_isValid;

    m_vrf_isValid = ::OpenAPI::fromJsonValue(m_vrf, json[QString("vrf")]);
    m_vrf_isSet = !json[QString("vrf")].isNull() && m_vrf_isValid;
}

QString OAIPrefix::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrefix::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_pool_isSet) {
        obj.insert(QString("is_pool"), ::OpenAPI::toJsonValue(m_is_pool));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_role.isSet()) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_site.isSet()) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant.isSet()) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_vlan.isSet()) {
        obj.insert(QString("vlan"), ::OpenAPI::toJsonValue(m_vlan));
    }
    if (m_vrf.isSet()) {
        obj.insert(QString("vrf"), ::OpenAPI::toJsonValue(m_vrf));
    }
    return obj;
}

QDate OAIPrefix::getCreated() const {
    return m_created;
}
void OAIPrefix::setCreated(const QDate &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIPrefix::is_created_Set() const{
    return m_created_isSet;
}

bool OAIPrefix::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIPrefix::getCustomFields() const {
    return m_custom_fields;
}
void OAIPrefix::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIPrefix::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIPrefix::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIPrefix::getDescription() const {
    return m_description;
}
void OAIPrefix::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPrefix::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPrefix::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIPrefix::getFamily() const {
    return m_family;
}
void OAIPrefix::setFamily(const qint32 &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIPrefix::is_family_Set() const{
    return m_family_isSet;
}

bool OAIPrefix::is_family_Valid() const{
    return m_family_isValid;
}

qint32 OAIPrefix::getId() const {
    return m_id;
}
void OAIPrefix::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPrefix::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPrefix::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPrefix::isIsPool() const {
    return m_is_pool;
}
void OAIPrefix::setIsPool(const bool &is_pool) {
    m_is_pool = is_pool;
    m_is_pool_isSet = true;
}

bool OAIPrefix::is_is_pool_Set() const{
    return m_is_pool_isSet;
}

bool OAIPrefix::is_is_pool_Valid() const{
    return m_is_pool_isValid;
}

QDateTime OAIPrefix::getLastUpdated() const {
    return m_last_updated;
}
void OAIPrefix::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIPrefix::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIPrefix::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIPrefix::getPrefix() const {
    return m_prefix;
}
void OAIPrefix::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIPrefix::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIPrefix::is_prefix_Valid() const{
    return m_prefix_isValid;
}

OAINestedRole OAIPrefix::getRole() const {
    return m_role;
}
void OAIPrefix::setRole(const OAINestedRole &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIPrefix::is_role_Set() const{
    return m_role_isSet;
}

bool OAIPrefix::is_role_Valid() const{
    return m_role_isValid;
}

OAINestedSite OAIPrefix::getSite() const {
    return m_site;
}
void OAIPrefix::setSite(const OAINestedSite &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAIPrefix::is_site_Set() const{
    return m_site_isSet;
}

bool OAIPrefix::is_site_Valid() const{
    return m_site_isValid;
}

OAIStatus OAIPrefix::getStatus() const {
    return m_status;
}
void OAIPrefix::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPrefix::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPrefix::is_status_Valid() const{
    return m_status_isValid;
}

QList<QString> OAIPrefix::getTags() const {
    return m_tags;
}
void OAIPrefix::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPrefix::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPrefix::is_tags_Valid() const{
    return m_tags_isValid;
}

OAINestedTenant OAIPrefix::getTenant() const {
    return m_tenant;
}
void OAIPrefix::setTenant(const OAINestedTenant &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIPrefix::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIPrefix::is_tenant_Valid() const{
    return m_tenant_isValid;
}

OAINestedVLAN OAIPrefix::getVlan() const {
    return m_vlan;
}
void OAIPrefix::setVlan(const OAINestedVLAN &vlan) {
    m_vlan = vlan;
    m_vlan_isSet = true;
}

bool OAIPrefix::is_vlan_Set() const{
    return m_vlan_isSet;
}

bool OAIPrefix::is_vlan_Valid() const{
    return m_vlan_isValid;
}

OAINestedVRF OAIPrefix::getVrf() const {
    return m_vrf;
}
void OAIPrefix::setVrf(const OAINestedVRF &vrf) {
    m_vrf = vrf;
    m_vrf_isSet = true;
}

bool OAIPrefix::is_vrf_Set() const{
    return m_vrf_isSet;
}

bool OAIPrefix::is_vrf_Valid() const{
    return m_vrf_isValid;
}

bool OAIPrefix::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_site.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vrf.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrefix::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_prefix_isValid && true;
}

} // namespace OpenAPI
