/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserAction::OAIUserAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserAction::OAIUserAction() {
    this->initializeModel();
}

OAIUserAction::~OAIUserAction() {}

void OAIUserAction::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIUserAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserAction::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIUserAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserAction::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIAction OAIUserAction::getAction() const {
    return m_action;
}
void OAIUserAction::setAction(const OAIAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIUserAction::is_action_Set() const{
    return m_action_isSet;
}

bool OAIUserAction::is_action_Valid() const{
    return m_action_isValid;
}

qint32 OAIUserAction::getId() const {
    return m_id;
}
void OAIUserAction::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserAction::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserAction::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserAction::getMessage() const {
    return m_message;
}
void OAIUserAction::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIUserAction::is_message_Set() const{
    return m_message_isSet;
}

bool OAIUserAction::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAIUserAction::getTime() const {
    return m_time;
}
void OAIUserAction::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIUserAction::is_time_Set() const{
    return m_time_isSet;
}

bool OAIUserAction::is_time_Valid() const{
    return m_time_isValid;
}

OAINestedUser OAIUserAction::getUser() const {
    return m_user;
}
void OAIUserAction::setUser(const OAINestedUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIUserAction::is_user_Set() const{
    return m_user_isSet;
}

bool OAIUserAction::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIUserAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
