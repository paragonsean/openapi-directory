/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInterface.h
 *
 * 
 */

#ifndef OAIInterface_H
#define OAIInterface_H

#include <QJsonObject>

#include "OAIForm_factor.h"
#include "OAIInterfaceCircuitTermination.h"
#include "OAIInterfaceVLAN.h"
#include "OAIMode.h"
#include "OAINestedDevice.h"
#include "OAINestedInterface.h"
#include <QList>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInterfaceCircuitTermination;
class OAINestedDevice;
class OAIForm_factor;
class OAINestedInterface;
class OAIMode;
class OAIInterfaceVLAN;

class OAIInterface : public OAIObject {
public:
    OAIInterface();
    OAIInterface(QString json);
    ~OAIInterface() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIInterfaceCircuitTermination getCircuitTermination() const;
    void setCircuitTermination(const OAIInterfaceCircuitTermination &circuit_termination);
    bool is_circuit_termination_Set() const;
    bool is_circuit_termination_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAINestedDevice getDevice() const;
    void setDevice(const OAINestedDevice &device);
    bool is_device_Set() const;
    bool is_device_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    OAIForm_factor getFormFactor() const;
    void setFormFactor(const OAIForm_factor &form_factor);
    bool is_form_factor_Set() const;
    bool is_form_factor_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getInterfaceConnection() const;
    void setInterfaceConnection(const QString &interface_connection);
    bool is_interface_connection_Set() const;
    bool is_interface_connection_Valid() const;

    QString getIsConnected() const;
    void setIsConnected(const QString &is_connected);
    bool is_is_connected_Set() const;
    bool is_is_connected_Valid() const;

    OAINestedInterface getLag() const;
    void setLag(const OAINestedInterface &lag);
    bool is_lag_Set() const;
    bool is_lag_Valid() const;

    QString getMacAddress() const;
    void setMacAddress(const QString &mac_address);
    bool is_mac_address_Set() const;
    bool is_mac_address_Valid() const;

    bool isMgmtOnly() const;
    void setMgmtOnly(const bool &mgmt_only);
    bool is_mgmt_only_Set() const;
    bool is_mgmt_only_Valid() const;

    OAIMode getMode() const;
    void setMode(const OAIMode &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    qint32 getMtu() const;
    void setMtu(const qint32 &mtu);
    bool is_mtu_Set() const;
    bool is_mtu_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QSet<OAIInterfaceVLAN> getTaggedVlans() const;
    void setTaggedVlans(const QSet<OAIInterfaceVLAN> &tagged_vlans);
    bool is_tagged_vlans_Set() const;
    bool is_tagged_vlans_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAIInterfaceVLAN getUntaggedVlan() const;
    void setUntaggedVlan(const OAIInterfaceVLAN &untagged_vlan);
    bool is_untagged_vlan_Set() const;
    bool is_untagged_vlan_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIInterfaceCircuitTermination m_circuit_termination;
    bool m_circuit_termination_isSet;
    bool m_circuit_termination_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAINestedDevice m_device;
    bool m_device_isSet;
    bool m_device_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    OAIForm_factor m_form_factor;
    bool m_form_factor_isSet;
    bool m_form_factor_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_interface_connection;
    bool m_interface_connection_isSet;
    bool m_interface_connection_isValid;

    QString m_is_connected;
    bool m_is_connected_isSet;
    bool m_is_connected_isValid;

    OAINestedInterface m_lag;
    bool m_lag_isSet;
    bool m_lag_isValid;

    QString m_mac_address;
    bool m_mac_address_isSet;
    bool m_mac_address_isValid;

    bool m_mgmt_only;
    bool m_mgmt_only_isSet;
    bool m_mgmt_only_isValid;

    OAIMode m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    qint32 m_mtu;
    bool m_mtu_isSet;
    bool m_mtu_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QSet<OAIInterfaceVLAN> m_tagged_vlans;
    bool m_tagged_vlans_isSet;
    bool m_tagged_vlans_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAIInterfaceVLAN m_untagged_vlan;
    bool m_untagged_vlan_isSet;
    bool m_untagged_vlan_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInterface)

#endif // OAIInterface_H
