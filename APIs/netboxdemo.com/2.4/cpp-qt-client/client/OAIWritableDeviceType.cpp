/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableDeviceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableDeviceType::OAIWritableDeviceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableDeviceType::OAIWritableDeviceType() {
    this->initializeModel();
}

OAIWritableDeviceType::~OAIWritableDeviceType() {}

void OAIWritableDeviceType::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instance_count_isSet = false;
    m_instance_count_isValid = false;

    m_interface_ordering_isSet = false;
    m_interface_ordering_isValid = false;

    m_is_console_server_isSet = false;
    m_is_console_server_isValid = false;

    m_is_full_depth_isSet = false;
    m_is_full_depth_isValid = false;

    m_is_network_device_isSet = false;
    m_is_network_device_isValid = false;

    m_is_pdu_isSet = false;
    m_is_pdu_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_part_number_isSet = false;
    m_part_number_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_subdevice_role_isSet = false;
    m_subdevice_role_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_u_height_isSet = false;
    m_u_height_isValid = false;
}

void OAIWritableDeviceType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableDeviceType::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instance_count_isValid = ::OpenAPI::fromJsonValue(m_instance_count, json[QString("instance_count")]);
    m_instance_count_isSet = !json[QString("instance_count")].isNull() && m_instance_count_isValid;

    m_interface_ordering_isValid = ::OpenAPI::fromJsonValue(m_interface_ordering, json[QString("interface_ordering")]);
    m_interface_ordering_isSet = !json[QString("interface_ordering")].isNull() && m_interface_ordering_isValid;

    m_is_console_server_isValid = ::OpenAPI::fromJsonValue(m_is_console_server, json[QString("is_console_server")]);
    m_is_console_server_isSet = !json[QString("is_console_server")].isNull() && m_is_console_server_isValid;

    m_is_full_depth_isValid = ::OpenAPI::fromJsonValue(m_is_full_depth, json[QString("is_full_depth")]);
    m_is_full_depth_isSet = !json[QString("is_full_depth")].isNull() && m_is_full_depth_isValid;

    m_is_network_device_isValid = ::OpenAPI::fromJsonValue(m_is_network_device, json[QString("is_network_device")]);
    m_is_network_device_isSet = !json[QString("is_network_device")].isNull() && m_is_network_device_isValid;

    m_is_pdu_isValid = ::OpenAPI::fromJsonValue(m_is_pdu, json[QString("is_pdu")]);
    m_is_pdu_isSet = !json[QString("is_pdu")].isNull() && m_is_pdu_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_part_number_isValid = ::OpenAPI::fromJsonValue(m_part_number, json[QString("part_number")]);
    m_part_number_isSet = !json[QString("part_number")].isNull() && m_part_number_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_subdevice_role_isValid = ::OpenAPI::fromJsonValue(m_subdevice_role, json[QString("subdevice_role")]);
    m_subdevice_role_isSet = !json[QString("subdevice_role")].isNull() && m_subdevice_role_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_u_height_isValid = ::OpenAPI::fromJsonValue(m_u_height, json[QString("u_height")]);
    m_u_height_isSet = !json[QString("u_height")].isNull() && m_u_height_isValid;
}

QString OAIWritableDeviceType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableDeviceType::asJsonObject() const {
    QJsonObject obj;
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instance_count_isSet) {
        obj.insert(QString("instance_count"), ::OpenAPI::toJsonValue(m_instance_count));
    }
    if (m_interface_ordering_isSet) {
        obj.insert(QString("interface_ordering"), ::OpenAPI::toJsonValue(m_interface_ordering));
    }
    if (m_is_console_server_isSet) {
        obj.insert(QString("is_console_server"), ::OpenAPI::toJsonValue(m_is_console_server));
    }
    if (m_is_full_depth_isSet) {
        obj.insert(QString("is_full_depth"), ::OpenAPI::toJsonValue(m_is_full_depth));
    }
    if (m_is_network_device_isSet) {
        obj.insert(QString("is_network_device"), ::OpenAPI::toJsonValue(m_is_network_device));
    }
    if (m_is_pdu_isSet) {
        obj.insert(QString("is_pdu"), ::OpenAPI::toJsonValue(m_is_pdu));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_part_number_isSet) {
        obj.insert(QString("part_number"), ::OpenAPI::toJsonValue(m_part_number));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_subdevice_role_isSet) {
        obj.insert(QString("subdevice_role"), ::OpenAPI::toJsonValue(m_subdevice_role));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_u_height_isSet) {
        obj.insert(QString("u_height"), ::OpenAPI::toJsonValue(m_u_height));
    }
    return obj;
}

QString OAIWritableDeviceType::getComments() const {
    return m_comments;
}
void OAIWritableDeviceType::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIWritableDeviceType::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIWritableDeviceType::is_comments_Valid() const{
    return m_comments_isValid;
}

QDate OAIWritableDeviceType::getCreated() const {
    return m_created;
}
void OAIWritableDeviceType::setCreated(const QDate &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWritableDeviceType::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWritableDeviceType::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIWritableDeviceType::getCustomFields() const {
    return m_custom_fields;
}
void OAIWritableDeviceType::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIWritableDeviceType::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIWritableDeviceType::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint32 OAIWritableDeviceType::getId() const {
    return m_id;
}
void OAIWritableDeviceType::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableDeviceType::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableDeviceType::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIWritableDeviceType::getInstanceCount() const {
    return m_instance_count;
}
void OAIWritableDeviceType::setInstanceCount(const qint32 &instance_count) {
    m_instance_count = instance_count;
    m_instance_count_isSet = true;
}

bool OAIWritableDeviceType::is_instance_count_Set() const{
    return m_instance_count_isSet;
}

bool OAIWritableDeviceType::is_instance_count_Valid() const{
    return m_instance_count_isValid;
}

qint32 OAIWritableDeviceType::getInterfaceOrdering() const {
    return m_interface_ordering;
}
void OAIWritableDeviceType::setInterfaceOrdering(const qint32 &interface_ordering) {
    m_interface_ordering = interface_ordering;
    m_interface_ordering_isSet = true;
}

bool OAIWritableDeviceType::is_interface_ordering_Set() const{
    return m_interface_ordering_isSet;
}

bool OAIWritableDeviceType::is_interface_ordering_Valid() const{
    return m_interface_ordering_isValid;
}

bool OAIWritableDeviceType::isIsConsoleServer() const {
    return m_is_console_server;
}
void OAIWritableDeviceType::setIsConsoleServer(const bool &is_console_server) {
    m_is_console_server = is_console_server;
    m_is_console_server_isSet = true;
}

bool OAIWritableDeviceType::is_is_console_server_Set() const{
    return m_is_console_server_isSet;
}

bool OAIWritableDeviceType::is_is_console_server_Valid() const{
    return m_is_console_server_isValid;
}

bool OAIWritableDeviceType::isIsFullDepth() const {
    return m_is_full_depth;
}
void OAIWritableDeviceType::setIsFullDepth(const bool &is_full_depth) {
    m_is_full_depth = is_full_depth;
    m_is_full_depth_isSet = true;
}

bool OAIWritableDeviceType::is_is_full_depth_Set() const{
    return m_is_full_depth_isSet;
}

bool OAIWritableDeviceType::is_is_full_depth_Valid() const{
    return m_is_full_depth_isValid;
}

bool OAIWritableDeviceType::isIsNetworkDevice() const {
    return m_is_network_device;
}
void OAIWritableDeviceType::setIsNetworkDevice(const bool &is_network_device) {
    m_is_network_device = is_network_device;
    m_is_network_device_isSet = true;
}

bool OAIWritableDeviceType::is_is_network_device_Set() const{
    return m_is_network_device_isSet;
}

bool OAIWritableDeviceType::is_is_network_device_Valid() const{
    return m_is_network_device_isValid;
}

bool OAIWritableDeviceType::isIsPdu() const {
    return m_is_pdu;
}
void OAIWritableDeviceType::setIsPdu(const bool &is_pdu) {
    m_is_pdu = is_pdu;
    m_is_pdu_isSet = true;
}

bool OAIWritableDeviceType::is_is_pdu_Set() const{
    return m_is_pdu_isSet;
}

bool OAIWritableDeviceType::is_is_pdu_Valid() const{
    return m_is_pdu_isValid;
}

QDateTime OAIWritableDeviceType::getLastUpdated() const {
    return m_last_updated;
}
void OAIWritableDeviceType::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWritableDeviceType::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWritableDeviceType::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAIWritableDeviceType::getManufacturer() const {
    return m_manufacturer;
}
void OAIWritableDeviceType::setManufacturer(const qint32 &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIWritableDeviceType::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIWritableDeviceType::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAIWritableDeviceType::getModel() const {
    return m_model;
}
void OAIWritableDeviceType::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIWritableDeviceType::is_model_Set() const{
    return m_model_isSet;
}

bool OAIWritableDeviceType::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIWritableDeviceType::getPartNumber() const {
    return m_part_number;
}
void OAIWritableDeviceType::setPartNumber(const QString &part_number) {
    m_part_number = part_number;
    m_part_number_isSet = true;
}

bool OAIWritableDeviceType::is_part_number_Set() const{
    return m_part_number_isSet;
}

bool OAIWritableDeviceType::is_part_number_Valid() const{
    return m_part_number_isValid;
}

QString OAIWritableDeviceType::getSlug() const {
    return m_slug;
}
void OAIWritableDeviceType::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIWritableDeviceType::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIWritableDeviceType::is_slug_Valid() const{
    return m_slug_isValid;
}

bool OAIWritableDeviceType::isSubdeviceRole() const {
    return m_subdevice_role;
}
void OAIWritableDeviceType::setSubdeviceRole(const bool &subdevice_role) {
    m_subdevice_role = subdevice_role;
    m_subdevice_role_isSet = true;
}

bool OAIWritableDeviceType::is_subdevice_role_Set() const{
    return m_subdevice_role_isSet;
}

bool OAIWritableDeviceType::is_subdevice_role_Valid() const{
    return m_subdevice_role_isValid;
}

QList<QString> OAIWritableDeviceType::getTags() const {
    return m_tags;
}
void OAIWritableDeviceType::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritableDeviceType::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritableDeviceType::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIWritableDeviceType::getUHeight() const {
    return m_u_height;
}
void OAIWritableDeviceType::setUHeight(const qint32 &u_height) {
    m_u_height = u_height;
    m_u_height_isSet = true;
}

bool OAIWritableDeviceType::is_u_height_Set() const{
    return m_u_height_isSet;
}

bool OAIWritableDeviceType::is_u_height_Valid() const{
    return m_u_height_isValid;
}

bool OAIWritableDeviceType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_ordering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_console_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_full_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_network_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_pdu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdevice_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_u_height_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableDeviceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_manufacturer_isValid && m_model_isValid && m_slug_isValid && true;
}

} // namespace OpenAPI
