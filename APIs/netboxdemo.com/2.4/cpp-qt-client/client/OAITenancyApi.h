/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITenancyApi_H
#define OAI_OAITenancyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAITenancy_tenant_groups_list_200_response.h"
#include "OAITenancy_tenants_list_200_response.h"
#include "OAITenant.h"
#include "OAITenantGroup.h"
#include "OAIWritableTenant.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITenancyApi : public QObject {
    Q_OBJECT

public:
    OAITenancyApi(const int timeOut = 0);
    ~OAITenancyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void tenancyChoicesList();

    /**
    * @param[in]  id QString [required]
    */
    virtual void tenancyChoicesRead(const QString &id);

    /**
    * @param[in]  oai_tenant_group OAITenantGroup [required]
    */
    virtual void tenancyTenantGroupsCreate(const OAITenantGroup &oai_tenant_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void tenancyTenantGroupsDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void tenancyTenantGroupsList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_tenant_group OAITenantGroup [required]
    */
    virtual void tenancyTenantGroupsPartialUpdate(const qint32 &id, const OAITenantGroup &oai_tenant_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void tenancyTenantGroupsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_tenant_group OAITenantGroup [required]
    */
    virtual void tenancyTenantGroupsUpdate(const qint32 &id, const OAITenantGroup &oai_tenant_group);

    /**
    * @param[in]  oai_writable_tenant OAIWritableTenant [required]
    */
    virtual void tenancyTenantsCreate(const OAIWritableTenant &oai_writable_tenant);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void tenancyTenantsDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  id__in QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void tenancyTenantsList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__in = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_tenant OAIWritableTenant [required]
    */
    virtual void tenancyTenantsPartialUpdate(const qint32 &id, const OAIWritableTenant &oai_writable_tenant);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void tenancyTenantsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_tenant OAIWritableTenant [required]
    */
    virtual void tenancyTenantsUpdate(const qint32 &id, const OAIWritableTenant &oai_writable_tenant);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tenancyChoicesListCallback(OAIHttpRequestWorker *worker);
    void tenancyChoicesReadCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsCreateCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsListCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsReadCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantsCreateCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantsDeleteCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantsListCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantsReadCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void tenancyChoicesListSignal();
    void tenancyChoicesReadSignal();
    void tenancyTenantGroupsCreateSignal(OAITenantGroup summary);
    void tenancyTenantGroupsDeleteSignal();
    void tenancyTenantGroupsListSignal(OAITenancy_tenant_groups_list_200_response summary);
    void tenancyTenantGroupsPartialUpdateSignal(OAITenantGroup summary);
    void tenancyTenantGroupsReadSignal(OAITenantGroup summary);
    void tenancyTenantGroupsUpdateSignal(OAITenantGroup summary);
    void tenancyTenantsCreateSignal(OAITenant summary);
    void tenancyTenantsDeleteSignal();
    void tenancyTenantsListSignal(OAITenancy_tenants_list_200_response summary);
    void tenancyTenantsPartialUpdateSignal(OAITenant summary);
    void tenancyTenantsReadSignal(OAITenant summary);
    void tenancyTenantsUpdateSignal(OAITenant summary);


    void tenancyChoicesListSignalFull(OAIHttpRequestWorker *worker);
    void tenancyChoicesReadSignalFull(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsCreateSignalFull(OAIHttpRequestWorker *worker, OAITenantGroup summary);
    void tenancyTenantGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsListSignalFull(OAIHttpRequestWorker *worker, OAITenancy_tenant_groups_list_200_response summary);
    void tenancyTenantGroupsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAITenantGroup summary);
    void tenancyTenantGroupsReadSignalFull(OAIHttpRequestWorker *worker, OAITenantGroup summary);
    void tenancyTenantGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAITenantGroup summary);
    void tenancyTenantsCreateSignalFull(OAIHttpRequestWorker *worker, OAITenant summary);
    void tenancyTenantsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void tenancyTenantsListSignalFull(OAIHttpRequestWorker *worker, OAITenancy_tenants_list_200_response summary);
    void tenancyTenantsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAITenant summary);
    void tenancyTenantsReadSignalFull(OAIHttpRequestWorker *worker, OAITenant summary);
    void tenancyTenantsUpdateSignalFull(OAIHttpRequestWorker *worker, OAITenant summary);

    Q_DECL_DEPRECATED_X("Use tenancyChoicesListSignalError() instead")
    void tenancyChoicesListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyChoicesListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyChoicesReadSignalError() instead")
    void tenancyChoicesReadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyChoicesReadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsCreateSignalError() instead")
    void tenancyTenantGroupsCreateSignalE(OAITenantGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsCreateSignalError(OAITenantGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsDeleteSignalError() instead")
    void tenancyTenantGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsListSignalError() instead")
    void tenancyTenantGroupsListSignalE(OAITenancy_tenant_groups_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsListSignalError(OAITenancy_tenant_groups_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsPartialUpdateSignalError() instead")
    void tenancyTenantGroupsPartialUpdateSignalE(OAITenantGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsPartialUpdateSignalError(OAITenantGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsReadSignalError() instead")
    void tenancyTenantGroupsReadSignalE(OAITenantGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsReadSignalError(OAITenantGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsUpdateSignalError() instead")
    void tenancyTenantGroupsUpdateSignalE(OAITenantGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsUpdateSignalError(OAITenantGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsCreateSignalError() instead")
    void tenancyTenantsCreateSignalE(OAITenant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsCreateSignalError(OAITenant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsDeleteSignalError() instead")
    void tenancyTenantsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsListSignalError() instead")
    void tenancyTenantsListSignalE(OAITenancy_tenants_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsListSignalError(OAITenancy_tenants_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsPartialUpdateSignalError() instead")
    void tenancyTenantsPartialUpdateSignalE(OAITenant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsPartialUpdateSignalError(OAITenant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsReadSignalError() instead")
    void tenancyTenantsReadSignalE(OAITenant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsReadSignalError(OAITenant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsUpdateSignalError() instead")
    void tenancyTenantsUpdateSignalE(OAITenant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsUpdateSignalError(OAITenant summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use tenancyChoicesListSignalErrorFull() instead")
    void tenancyChoicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyChoicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyChoicesReadSignalErrorFull() instead")
    void tenancyChoicesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyChoicesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsCreateSignalErrorFull() instead")
    void tenancyTenantGroupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsDeleteSignalErrorFull() instead")
    void tenancyTenantGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsListSignalErrorFull() instead")
    void tenancyTenantGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsPartialUpdateSignalErrorFull() instead")
    void tenancyTenantGroupsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsReadSignalErrorFull() instead")
    void tenancyTenantGroupsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsUpdateSignalErrorFull() instead")
    void tenancyTenantGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsCreateSignalErrorFull() instead")
    void tenancyTenantsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsDeleteSignalErrorFull() instead")
    void tenancyTenantsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsListSignalErrorFull() instead")
    void tenancyTenantsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsPartialUpdateSignalErrorFull() instead")
    void tenancyTenantsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsReadSignalErrorFull() instead")
    void tenancyTenantsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsUpdateSignalErrorFull() instead")
    void tenancyTenantsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
