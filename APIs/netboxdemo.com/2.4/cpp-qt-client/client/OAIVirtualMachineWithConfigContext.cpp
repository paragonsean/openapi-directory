/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineWithConfigContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineWithConfigContext::OAIVirtualMachineWithConfigContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineWithConfigContext::OAIVirtualMachineWithConfigContext() {
    this->initializeModel();
}

OAIVirtualMachineWithConfigContext::~OAIVirtualMachineWithConfigContext() {}

void OAIVirtualMachineWithConfigContext::initializeModel() {

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_config_context_isSet = false;
    m_config_context_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_disk_isSet = false;
    m_disk_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_local_context_data_isSet = false;
    m_local_context_data_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_primary_ip_isSet = false;
    m_primary_ip_isValid = false;

    m_primary_ip4_isSet = false;
    m_primary_ip4_isValid = false;

    m_primary_ip6_isSet = false;
    m_primary_ip6_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_vcpus_isSet = false;
    m_vcpus_isValid = false;
}

void OAIVirtualMachineWithConfigContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineWithConfigContext::fromJsonObject(QJsonObject json) {

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_config_context_isValid = ::OpenAPI::fromJsonValue(m_config_context, json[QString("config_context")]);
    m_config_context_isSet = !json[QString("config_context")].isNull() && m_config_context_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_disk_isValid = ::OpenAPI::fromJsonValue(m_disk, json[QString("disk")]);
    m_disk_isSet = !json[QString("disk")].isNull() && m_disk_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_local_context_data_isValid = ::OpenAPI::fromJsonValue(m_local_context_data, json[QString("local_context_data")]);
    m_local_context_data_isSet = !json[QString("local_context_data")].isNull() && m_local_context_data_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_primary_ip_isValid = ::OpenAPI::fromJsonValue(m_primary_ip, json[QString("primary_ip")]);
    m_primary_ip_isSet = !json[QString("primary_ip")].isNull() && m_primary_ip_isValid;

    m_primary_ip4_isValid = ::OpenAPI::fromJsonValue(m_primary_ip4, json[QString("primary_ip4")]);
    m_primary_ip4_isSet = !json[QString("primary_ip4")].isNull() && m_primary_ip4_isValid;

    m_primary_ip6_isValid = ::OpenAPI::fromJsonValue(m_primary_ip6, json[QString("primary_ip6")]);
    m_primary_ip6_isSet = !json[QString("primary_ip6")].isNull() && m_primary_ip6_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_vcpus_isValid = ::OpenAPI::fromJsonValue(m_vcpus, json[QString("vcpus")]);
    m_vcpus_isSet = !json[QString("vcpus")].isNull() && m_vcpus_isValid;
}

QString OAIVirtualMachineWithConfigContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineWithConfigContext::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster.isSet()) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_config_context_isSet) {
        obj.insert(QString("config_context"), ::OpenAPI::toJsonValue(m_config_context));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_disk_isSet) {
        obj.insert(QString("disk"), ::OpenAPI::toJsonValue(m_disk));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_local_context_data_isSet) {
        obj.insert(QString("local_context_data"), ::OpenAPI::toJsonValue(m_local_context_data));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_primary_ip.isSet()) {
        obj.insert(QString("primary_ip"), ::OpenAPI::toJsonValue(m_primary_ip));
    }
    if (m_primary_ip4.isSet()) {
        obj.insert(QString("primary_ip4"), ::OpenAPI::toJsonValue(m_primary_ip4));
    }
    if (m_primary_ip6.isSet()) {
        obj.insert(QString("primary_ip6"), ::OpenAPI::toJsonValue(m_primary_ip6));
    }
    if (m_role.isSet()) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant.isSet()) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_vcpus_isSet) {
        obj.insert(QString("vcpus"), ::OpenAPI::toJsonValue(m_vcpus));
    }
    return obj;
}

OAINestedCluster OAIVirtualMachineWithConfigContext::getCluster() const {
    return m_cluster;
}
void OAIVirtualMachineWithConfigContext::setCluster(const OAINestedCluster &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAIVirtualMachineWithConfigContext::getComments() const {
    return m_comments;
}
void OAIVirtualMachineWithConfigContext::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIVirtualMachineWithConfigContext::getConfigContext() const {
    return m_config_context;
}
void OAIVirtualMachineWithConfigContext::setConfigContext(const QString &config_context) {
    m_config_context = config_context;
    m_config_context_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_config_context_Set() const{
    return m_config_context_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_config_context_Valid() const{
    return m_config_context_isValid;
}

QDate OAIVirtualMachineWithConfigContext::getCreated() const {
    return m_created;
}
void OAIVirtualMachineWithConfigContext::setCreated(const QDate &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_created_Set() const{
    return m_created_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIVirtualMachineWithConfigContext::getCustomFields() const {
    return m_custom_fields;
}
void OAIVirtualMachineWithConfigContext::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint32 OAIVirtualMachineWithConfigContext::getDisk() const {
    return m_disk;
}
void OAIVirtualMachineWithConfigContext::setDisk(const qint32 &disk) {
    m_disk = disk;
    m_disk_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_disk_Set() const{
    return m_disk_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_disk_Valid() const{
    return m_disk_isValid;
}

qint32 OAIVirtualMachineWithConfigContext::getId() const {
    return m_id;
}
void OAIVirtualMachineWithConfigContext::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIVirtualMachineWithConfigContext::getLastUpdated() const {
    return m_last_updated;
}
void OAIVirtualMachineWithConfigContext::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIVirtualMachineWithConfigContext::getLocalContextData() const {
    return m_local_context_data;
}
void OAIVirtualMachineWithConfigContext::setLocalContextData(const QString &local_context_data) {
    m_local_context_data = local_context_data;
    m_local_context_data_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_local_context_data_Set() const{
    return m_local_context_data_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_local_context_data_Valid() const{
    return m_local_context_data_isValid;
}

qint32 OAIVirtualMachineWithConfigContext::getMemory() const {
    return m_memory;
}
void OAIVirtualMachineWithConfigContext::setMemory(const qint32 &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_memory_Valid() const{
    return m_memory_isValid;
}

QString OAIVirtualMachineWithConfigContext::getName() const {
    return m_name;
}
void OAIVirtualMachineWithConfigContext::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_name_Valid() const{
    return m_name_isValid;
}

OAINestedPlatform OAIVirtualMachineWithConfigContext::getPlatform() const {
    return m_platform;
}
void OAIVirtualMachineWithConfigContext::setPlatform(const OAINestedPlatform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_platform_Valid() const{
    return m_platform_isValid;
}

OAIVirtualMachineIPAddress OAIVirtualMachineWithConfigContext::getPrimaryIp() const {
    return m_primary_ip;
}
void OAIVirtualMachineWithConfigContext::setPrimaryIp(const OAIVirtualMachineIPAddress &primary_ip) {
    m_primary_ip = primary_ip;
    m_primary_ip_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_primary_ip_Set() const{
    return m_primary_ip_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_primary_ip_Valid() const{
    return m_primary_ip_isValid;
}

OAIVirtualMachineIPAddress OAIVirtualMachineWithConfigContext::getPrimaryIp4() const {
    return m_primary_ip4;
}
void OAIVirtualMachineWithConfigContext::setPrimaryIp4(const OAIVirtualMachineIPAddress &primary_ip4) {
    m_primary_ip4 = primary_ip4;
    m_primary_ip4_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_primary_ip4_Set() const{
    return m_primary_ip4_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_primary_ip4_Valid() const{
    return m_primary_ip4_isValid;
}

OAIVirtualMachineIPAddress OAIVirtualMachineWithConfigContext::getPrimaryIp6() const {
    return m_primary_ip6;
}
void OAIVirtualMachineWithConfigContext::setPrimaryIp6(const OAIVirtualMachineIPAddress &primary_ip6) {
    m_primary_ip6 = primary_ip6;
    m_primary_ip6_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_primary_ip6_Set() const{
    return m_primary_ip6_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_primary_ip6_Valid() const{
    return m_primary_ip6_isValid;
}

OAINestedDeviceRole OAIVirtualMachineWithConfigContext::getRole() const {
    return m_role;
}
void OAIVirtualMachineWithConfigContext::setRole(const OAINestedDeviceRole &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_role_Set() const{
    return m_role_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_role_Valid() const{
    return m_role_isValid;
}

OAIStatus OAIVirtualMachineWithConfigContext::getStatus() const {
    return m_status;
}
void OAIVirtualMachineWithConfigContext::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_status_Valid() const{
    return m_status_isValid;
}

QList<QString> OAIVirtualMachineWithConfigContext::getTags() const {
    return m_tags;
}
void OAIVirtualMachineWithConfigContext::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_tags_Valid() const{
    return m_tags_isValid;
}

OAINestedTenant OAIVirtualMachineWithConfigContext::getTenant() const {
    return m_tenant;
}
void OAIVirtualMachineWithConfigContext::setTenant(const OAINestedTenant &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_tenant_Valid() const{
    return m_tenant_isValid;
}

qint32 OAIVirtualMachineWithConfigContext::getVcpus() const {
    return m_vcpus;
}
void OAIVirtualMachineWithConfigContext::setVcpus(const qint32 &vcpus) {
    m_vcpus = vcpus;
    m_vcpus_isSet = true;
}

bool OAIVirtualMachineWithConfigContext::is_vcpus_Set() const{
    return m_vcpus_isSet;
}

bool OAIVirtualMachineWithConfigContext::is_vcpus_Valid() const{
    return m_vcpus_isValid;
}

bool OAIVirtualMachineWithConfigContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_context_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_ip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_ip4.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_ip6.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcpus_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineWithConfigContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
