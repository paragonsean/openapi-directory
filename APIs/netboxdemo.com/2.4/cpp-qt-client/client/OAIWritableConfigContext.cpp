/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableConfigContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableConfigContext::OAIWritableConfigContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableConfigContext::OAIWritableConfigContext() {
    this->initializeModel();
}

OAIWritableConfigContext::~OAIWritableConfigContext() {}

void OAIWritableConfigContext::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_platforms_isSet = false;
    m_platforms_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_sites_isSet = false;
    m_sites_isValid = false;

    m_tenant_groups_isSet = false;
    m_tenant_groups_isValid = false;

    m_tenants_isSet = false;
    m_tenants_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIWritableConfigContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableConfigContext::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_platforms_isValid = ::OpenAPI::fromJsonValue(m_platforms, json[QString("platforms")]);
    m_platforms_isSet = !json[QString("platforms")].isNull() && m_platforms_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_sites_isValid = ::OpenAPI::fromJsonValue(m_sites, json[QString("sites")]);
    m_sites_isSet = !json[QString("sites")].isNull() && m_sites_isValid;

    m_tenant_groups_isValid = ::OpenAPI::fromJsonValue(m_tenant_groups, json[QString("tenant_groups")]);
    m_tenant_groups_isSet = !json[QString("tenant_groups")].isNull() && m_tenant_groups_isValid;

    m_tenants_isValid = ::OpenAPI::fromJsonValue(m_tenants, json[QString("tenants")]);
    m_tenants_isSet = !json[QString("tenants")].isNull() && m_tenants_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIWritableConfigContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableConfigContext::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_platforms.size() > 0) {
        obj.insert(QString("platforms"), ::OpenAPI::toJsonValue(m_platforms));
    }
    if (m_regions.size() > 0) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_sites.size() > 0) {
        obj.insert(QString("sites"), ::OpenAPI::toJsonValue(m_sites));
    }
    if (m_tenant_groups.size() > 0) {
        obj.insert(QString("tenant_groups"), ::OpenAPI::toJsonValue(m_tenant_groups));
    }
    if (m_tenants.size() > 0) {
        obj.insert(QString("tenants"), ::OpenAPI::toJsonValue(m_tenants));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIWritableConfigContext::getData() const {
    return m_data;
}
void OAIWritableConfigContext::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIWritableConfigContext::is_data_Set() const{
    return m_data_isSet;
}

bool OAIWritableConfigContext::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIWritableConfigContext::getDescription() const {
    return m_description;
}
void OAIWritableConfigContext::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritableConfigContext::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritableConfigContext::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIWritableConfigContext::getId() const {
    return m_id;
}
void OAIWritableConfigContext::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableConfigContext::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableConfigContext::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIWritableConfigContext::isIsActive() const {
    return m_is_active;
}
void OAIWritableConfigContext::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIWritableConfigContext::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIWritableConfigContext::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIWritableConfigContext::getName() const {
    return m_name;
}
void OAIWritableConfigContext::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritableConfigContext::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritableConfigContext::is_name_Valid() const{
    return m_name_isValid;
}

QSet<qint32> OAIWritableConfigContext::getPlatforms() const {
    return m_platforms;
}
void OAIWritableConfigContext::setPlatforms(const QSet<qint32> &platforms) {
    m_platforms = platforms;
    m_platforms_isSet = true;
}

bool OAIWritableConfigContext::is_platforms_Set() const{
    return m_platforms_isSet;
}

bool OAIWritableConfigContext::is_platforms_Valid() const{
    return m_platforms_isValid;
}

QSet<qint32> OAIWritableConfigContext::getRegions() const {
    return m_regions;
}
void OAIWritableConfigContext::setRegions(const QSet<qint32> &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIWritableConfigContext::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIWritableConfigContext::is_regions_Valid() const{
    return m_regions_isValid;
}

QSet<qint32> OAIWritableConfigContext::getRoles() const {
    return m_roles;
}
void OAIWritableConfigContext::setRoles(const QSet<qint32> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIWritableConfigContext::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIWritableConfigContext::is_roles_Valid() const{
    return m_roles_isValid;
}

QSet<qint32> OAIWritableConfigContext::getSites() const {
    return m_sites;
}
void OAIWritableConfigContext::setSites(const QSet<qint32> &sites) {
    m_sites = sites;
    m_sites_isSet = true;
}

bool OAIWritableConfigContext::is_sites_Set() const{
    return m_sites_isSet;
}

bool OAIWritableConfigContext::is_sites_Valid() const{
    return m_sites_isValid;
}

QSet<qint32> OAIWritableConfigContext::getTenantGroups() const {
    return m_tenant_groups;
}
void OAIWritableConfigContext::setTenantGroups(const QSet<qint32> &tenant_groups) {
    m_tenant_groups = tenant_groups;
    m_tenant_groups_isSet = true;
}

bool OAIWritableConfigContext::is_tenant_groups_Set() const{
    return m_tenant_groups_isSet;
}

bool OAIWritableConfigContext::is_tenant_groups_Valid() const{
    return m_tenant_groups_isValid;
}

QSet<qint32> OAIWritableConfigContext::getTenants() const {
    return m_tenants;
}
void OAIWritableConfigContext::setTenants(const QSet<qint32> &tenants) {
    m_tenants = tenants;
    m_tenants_isSet = true;
}

bool OAIWritableConfigContext::is_tenants_Set() const{
    return m_tenants_isSet;
}

bool OAIWritableConfigContext::is_tenants_Valid() const{
    return m_tenants_isValid;
}

qint32 OAIWritableConfigContext::getWeight() const {
    return m_weight;
}
void OAIWritableConfigContext::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIWritableConfigContext::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIWritableConfigContext::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIWritableConfigContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableConfigContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
