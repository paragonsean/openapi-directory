/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIService::OAIService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIService::OAIService() {
    this->initializeModel();
}

OAIService::~OAIService() {}

void OAIService::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ipaddresses_isSet = false;
    m_ipaddresses_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_virtual_machine_isSet = false;
    m_virtual_machine_isValid = false;
}

void OAIService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIService::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ipaddresses_isValid = ::OpenAPI::fromJsonValue(m_ipaddresses, json[QString("ipaddresses")]);
    m_ipaddresses_isSet = !json[QString("ipaddresses")].isNull() && m_ipaddresses_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_virtual_machine_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine, json[QString("virtual_machine")]);
    m_virtual_machine_isSet = !json[QString("virtual_machine")].isNull() && m_virtual_machine_isValid;
}

QString OAIService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIService::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ipaddresses.size() > 0) {
        obj.insert(QString("ipaddresses"), ::OpenAPI::toJsonValue(m_ipaddresses));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_virtual_machine.isSet()) {
        obj.insert(QString("virtual_machine"), ::OpenAPI::toJsonValue(m_virtual_machine));
    }
    return obj;
}

QDate OAIService::getCreated() const {
    return m_created;
}
void OAIService::setCreated(const QDate &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIService::is_created_Set() const{
    return m_created_isSet;
}

bool OAIService::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIService::getCustomFields() const {
    return m_custom_fields;
}
void OAIService::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIService::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIService::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIService::getDescription() const {
    return m_description;
}
void OAIService::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIService::is_description_Set() const{
    return m_description_isSet;
}

bool OAIService::is_description_Valid() const{
    return m_description_isValid;
}

OAINestedDevice OAIService::getDevice() const {
    return m_device;
}
void OAIService::setDevice(const OAINestedDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIService::is_device_Set() const{
    return m_device_isSet;
}

bool OAIService::is_device_Valid() const{
    return m_device_isValid;
}

qint32 OAIService::getId() const {
    return m_id;
}
void OAIService::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIService::is_id_Set() const{
    return m_id_isSet;
}

bool OAIService::is_id_Valid() const{
    return m_id_isValid;
}

QSet<OAINestedIPAddress> OAIService::getIpaddresses() const {
    return m_ipaddresses;
}
void OAIService::setIpaddresses(const QSet<OAINestedIPAddress> &ipaddresses) {
    m_ipaddresses = ipaddresses;
    m_ipaddresses_isSet = true;
}

bool OAIService::is_ipaddresses_Set() const{
    return m_ipaddresses_isSet;
}

bool OAIService::is_ipaddresses_Valid() const{
    return m_ipaddresses_isValid;
}

QDateTime OAIService::getLastUpdated() const {
    return m_last_updated;
}
void OAIService::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIService::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIService::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIService::getName() const {
    return m_name;
}
void OAIService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIService::is_name_Set() const{
    return m_name_isSet;
}

bool OAIService::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIService::getPort() const {
    return m_port;
}
void OAIService::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIService::is_port_Set() const{
    return m_port_isSet;
}

bool OAIService::is_port_Valid() const{
    return m_port_isValid;
}

OAIProtocol OAIService::getProtocol() const {
    return m_protocol;
}
void OAIService::setProtocol(const OAIProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIService::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIService::is_protocol_Valid() const{
    return m_protocol_isValid;
}

OAINestedVirtualMachine OAIService::getVirtualMachine() const {
    return m_virtual_machine;
}
void OAIService::setVirtualMachine(const OAINestedVirtualMachine &virtual_machine) {
    m_virtual_machine = virtual_machine;
    m_virtual_machine_isSet = true;
}

bool OAIService::is_virtual_machine_Set() const{
    return m_virtual_machine_isSet;
}

bool OAIService::is_virtual_machine_Valid() const{
    return m_virtual_machine_isValid;
}

bool OAIService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipaddresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIService::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_port_isValid && m_protocol_isValid && true;
}

} // namespace OpenAPI
