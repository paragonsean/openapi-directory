/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWritableDeviceType.h
 *
 * 
 */

#ifndef OAIWritableDeviceType_H
#define OAIWritableDeviceType_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QDate>
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWritableDeviceType : public OAIObject {
public:
    OAIWritableDeviceType();
    OAIWritableDeviceType(QString json);
    ~OAIWritableDeviceType() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getComments() const;
    void setComments(const QString &comments);
    bool is_comments_Set() const;
    bool is_comments_Valid() const;

    QDate getCreated() const;
    void setCreated(const QDate &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    OAIObject getCustomFields() const;
    void setCustomFields(const OAIObject &custom_fields);
    bool is_custom_fields_Set() const;
    bool is_custom_fields_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getInstanceCount() const;
    void setInstanceCount(const qint32 &instance_count);
    bool is_instance_count_Set() const;
    bool is_instance_count_Valid() const;

    qint32 getInterfaceOrdering() const;
    void setInterfaceOrdering(const qint32 &interface_ordering);
    bool is_interface_ordering_Set() const;
    bool is_interface_ordering_Valid() const;

    bool isIsConsoleServer() const;
    void setIsConsoleServer(const bool &is_console_server);
    bool is_is_console_server_Set() const;
    bool is_is_console_server_Valid() const;

    bool isIsFullDepth() const;
    void setIsFullDepth(const bool &is_full_depth);
    bool is_is_full_depth_Set() const;
    bool is_is_full_depth_Valid() const;

    bool isIsNetworkDevice() const;
    void setIsNetworkDevice(const bool &is_network_device);
    bool is_is_network_device_Set() const;
    bool is_is_network_device_Valid() const;

    bool isIsPdu() const;
    void setIsPdu(const bool &is_pdu);
    bool is_is_pdu_Set() const;
    bool is_is_pdu_Valid() const;

    QDateTime getLastUpdated() const;
    void setLastUpdated(const QDateTime &last_updated);
    bool is_last_updated_Set() const;
    bool is_last_updated_Valid() const;

    qint32 getManufacturer() const;
    void setManufacturer(const qint32 &manufacturer);
    bool is_manufacturer_Set() const;
    bool is_manufacturer_Valid() const;

    QString getModel() const;
    void setModel(const QString &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    QString getPartNumber() const;
    void setPartNumber(const QString &part_number);
    bool is_part_number_Set() const;
    bool is_part_number_Valid() const;

    QString getSlug() const;
    void setSlug(const QString &slug);
    bool is_slug_Set() const;
    bool is_slug_Valid() const;

    bool isSubdeviceRole() const;
    void setSubdeviceRole(const bool &subdevice_role);
    bool is_subdevice_role_Set() const;
    bool is_subdevice_role_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    qint32 getUHeight() const;
    void setUHeight(const qint32 &u_height);
    bool is_u_height_Set() const;
    bool is_u_height_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_comments;
    bool m_comments_isSet;
    bool m_comments_isValid;

    QDate m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    OAIObject m_custom_fields;
    bool m_custom_fields_isSet;
    bool m_custom_fields_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_instance_count;
    bool m_instance_count_isSet;
    bool m_instance_count_isValid;

    qint32 m_interface_ordering;
    bool m_interface_ordering_isSet;
    bool m_interface_ordering_isValid;

    bool m_is_console_server;
    bool m_is_console_server_isSet;
    bool m_is_console_server_isValid;

    bool m_is_full_depth;
    bool m_is_full_depth_isSet;
    bool m_is_full_depth_isValid;

    bool m_is_network_device;
    bool m_is_network_device_isSet;
    bool m_is_network_device_isValid;

    bool m_is_pdu;
    bool m_is_pdu_isSet;
    bool m_is_pdu_isValid;

    QDateTime m_last_updated;
    bool m_last_updated_isSet;
    bool m_last_updated_isValid;

    qint32 m_manufacturer;
    bool m_manufacturer_isSet;
    bool m_manufacturer_isValid;

    QString m_model;
    bool m_model_isSet;
    bool m_model_isValid;

    QString m_part_number;
    bool m_part_number_isSet;
    bool m_part_number_isValid;

    QString m_slug;
    bool m_slug_isSet;
    bool m_slug_isValid;

    bool m_subdevice_role;
    bool m_subdevice_role_isSet;
    bool m_subdevice_role_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    qint32 m_u_height;
    bool m_u_height_isSet;
    bool m_u_height_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWritableDeviceType)

#endif // OAIWritableDeviceType_H
