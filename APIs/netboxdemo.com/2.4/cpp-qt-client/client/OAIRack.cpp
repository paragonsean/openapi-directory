/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRack.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRack::OAIRack(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRack::OAIRack() {
    this->initializeModel();
}

OAIRack::~OAIRack() {}

void OAIRack::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_desc_units_isSet = false;
    m_desc_units_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_facility_id_isSet = false;
    m_facility_id_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_u_height_isSet = false;
    m_u_height_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIRack::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRack::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_desc_units_isValid = ::OpenAPI::fromJsonValue(m_desc_units, json[QString("desc_units")]);
    m_desc_units_isSet = !json[QString("desc_units")].isNull() && m_desc_units_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_facility_id_isValid = ::OpenAPI::fromJsonValue(m_facility_id, json[QString("facility_id")]);
    m_facility_id_isSet = !json[QString("facility_id")].isNull() && m_facility_id_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_u_height_isValid = ::OpenAPI::fromJsonValue(m_u_height, json[QString("u_height")]);
    m_u_height_isSet = !json[QString("u_height")].isNull() && m_u_height_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIRack::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRack::asJsonObject() const {
    QJsonObject obj;
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_desc_units_isSet) {
        obj.insert(QString("desc_units"), ::OpenAPI::toJsonValue(m_desc_units));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_facility_id_isSet) {
        obj.insert(QString("facility_id"), ::OpenAPI::toJsonValue(m_facility_id));
    }
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role.isSet()) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_site.isSet()) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant.isSet()) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_u_height_isSet) {
        obj.insert(QString("u_height"), ::OpenAPI::toJsonValue(m_u_height));
    }
    if (m_width.isSet()) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIRack::getComments() const {
    return m_comments;
}
void OAIRack::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIRack::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIRack::is_comments_Valid() const{
    return m_comments_isValid;
}

QDate OAIRack::getCreated() const {
    return m_created;
}
void OAIRack::setCreated(const QDate &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIRack::is_created_Set() const{
    return m_created_isSet;
}

bool OAIRack::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIRack::getCustomFields() const {
    return m_custom_fields;
}
void OAIRack::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIRack::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIRack::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

bool OAIRack::isDescUnits() const {
    return m_desc_units;
}
void OAIRack::setDescUnits(const bool &desc_units) {
    m_desc_units = desc_units;
    m_desc_units_isSet = true;
}

bool OAIRack::is_desc_units_Set() const{
    return m_desc_units_isSet;
}

bool OAIRack::is_desc_units_Valid() const{
    return m_desc_units_isValid;
}

QString OAIRack::getDisplayName() const {
    return m_display_name;
}
void OAIRack::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRack::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRack::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIRack::getFacilityId() const {
    return m_facility_id;
}
void OAIRack::setFacilityId(const QString &facility_id) {
    m_facility_id = facility_id;
    m_facility_id_isSet = true;
}

bool OAIRack::is_facility_id_Set() const{
    return m_facility_id_isSet;
}

bool OAIRack::is_facility_id_Valid() const{
    return m_facility_id_isValid;
}

OAINestedRackGroup OAIRack::getGroup() const {
    return m_group;
}
void OAIRack::setGroup(const OAINestedRackGroup &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIRack::is_group_Set() const{
    return m_group_isSet;
}

bool OAIRack::is_group_Valid() const{
    return m_group_isValid;
}

qint32 OAIRack::getId() const {
    return m_id;
}
void OAIRack::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRack::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRack::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIRack::getLastUpdated() const {
    return m_last_updated;
}
void OAIRack::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIRack::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIRack::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIRack::getName() const {
    return m_name;
}
void OAIRack::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRack::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRack::is_name_Valid() const{
    return m_name_isValid;
}

OAINestedRackRole OAIRack::getRole() const {
    return m_role;
}
void OAIRack::setRole(const OAINestedRackRole &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIRack::is_role_Set() const{
    return m_role_isSet;
}

bool OAIRack::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIRack::getSerial() const {
    return m_serial;
}
void OAIRack::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIRack::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIRack::is_serial_Valid() const{
    return m_serial_isValid;
}

OAINestedSite OAIRack::getSite() const {
    return m_site;
}
void OAIRack::setSite(const OAINestedSite &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAIRack::is_site_Set() const{
    return m_site_isSet;
}

bool OAIRack::is_site_Valid() const{
    return m_site_isValid;
}

QList<QString> OAIRack::getTags() const {
    return m_tags;
}
void OAIRack::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRack::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRack::is_tags_Valid() const{
    return m_tags_isValid;
}

OAINestedTenant OAIRack::getTenant() const {
    return m_tenant;
}
void OAIRack::setTenant(const OAINestedTenant &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIRack::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIRack::is_tenant_Valid() const{
    return m_tenant_isValid;
}

OAIType OAIRack::getType() const {
    return m_type;
}
void OAIRack::setType(const OAIType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRack::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRack::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIRack::getUHeight() const {
    return m_u_height;
}
void OAIRack::setUHeight(const qint32 &u_height) {
    m_u_height = u_height;
    m_u_height_isSet = true;
}

bool OAIRack::is_u_height_Set() const{
    return m_u_height_isSet;
}

bool OAIRack::is_u_height_Valid() const{
    return m_u_height_isValid;
}

OAIWidth OAIRack::getWidth() const {
    return m_width;
}
void OAIRack::setWidth(const OAIWidth &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIRack::is_width_Set() const{
    return m_width_isSet;
}

bool OAIRack::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIRack::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desc_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_u_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRack::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_site_isValid && true;
}

} // namespace OpenAPI
