/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectChange::OAIObjectChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectChange::OAIObjectChange() {
    this->initializeModel();
}

OAIObjectChange::~OAIObjectChange() {}

void OAIObjectChange::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_changed_object_isSet = false;
    m_changed_object_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_object_data_isSet = false;
    m_object_data_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIObjectChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectChange::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_changed_object_isValid = ::OpenAPI::fromJsonValue(m_changed_object, json[QString("changed_object")]);
    m_changed_object_isSet = !json[QString("changed_object")].isNull() && m_changed_object_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_object_data_isValid = ::OpenAPI::fromJsonValue(m_object_data, json[QString("object_data")]);
    m_object_data_isSet = !json[QString("object_data")].isNull() && m_object_data_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("user_name")]);
    m_user_name_isSet = !json[QString("user_name")].isNull() && m_user_name_isValid;
}

QString OAIObjectChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectChange::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_changed_object_isSet) {
        obj.insert(QString("changed_object"), ::OpenAPI::toJsonValue(m_changed_object));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_object_data_isSet) {
        obj.insert(QString("object_data"), ::OpenAPI::toJsonValue(m_object_data));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("user_name"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

qint32 OAIObjectChange::getAction() const {
    return m_action;
}
void OAIObjectChange::setAction(const qint32 &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIObjectChange::is_action_Set() const{
    return m_action_isSet;
}

bool OAIObjectChange::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIObjectChange::getChangedObject() const {
    return m_changed_object;
}
void OAIObjectChange::setChangedObject(const QString &changed_object) {
    m_changed_object = changed_object;
    m_changed_object_isSet = true;
}

bool OAIObjectChange::is_changed_object_Set() const{
    return m_changed_object_isSet;
}

bool OAIObjectChange::is_changed_object_Valid() const{
    return m_changed_object_isValid;
}

QString OAIObjectChange::getContentType() const {
    return m_content_type;
}
void OAIObjectChange::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIObjectChange::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIObjectChange::is_content_type_Valid() const{
    return m_content_type_isValid;
}

qint32 OAIObjectChange::getId() const {
    return m_id;
}
void OAIObjectChange::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIObjectChange::is_id_Set() const{
    return m_id_isSet;
}

bool OAIObjectChange::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIObjectChange::getObjectData() const {
    return m_object_data;
}
void OAIObjectChange::setObjectData(const QString &object_data) {
    m_object_data = object_data;
    m_object_data_isSet = true;
}

bool OAIObjectChange::is_object_data_Set() const{
    return m_object_data_isSet;
}

bool OAIObjectChange::is_object_data_Valid() const{
    return m_object_data_isValid;
}

QString OAIObjectChange::getRequestId() const {
    return m_request_id;
}
void OAIObjectChange::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIObjectChange::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIObjectChange::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QDateTime OAIObjectChange::getTime() const {
    return m_time;
}
void OAIObjectChange::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIObjectChange::is_time_Set() const{
    return m_time_isSet;
}

bool OAIObjectChange::is_time_Valid() const{
    return m_time_isValid;
}

OAINestedUser OAIObjectChange::getUser() const {
    return m_user;
}
void OAIObjectChange::setUser(const OAINestedUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIObjectChange::is_user_Set() const{
    return m_user_isSet;
}

bool OAIObjectChange::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIObjectChange::getUserName() const {
    return m_user_name;
}
void OAIObjectChange::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIObjectChange::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIObjectChange::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIObjectChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && true;
}

} // namespace OpenAPI
