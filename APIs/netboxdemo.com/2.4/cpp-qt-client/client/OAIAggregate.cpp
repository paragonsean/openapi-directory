/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregate::OAIAggregate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregate::OAIAggregate() {
    this->initializeModel();
}

OAIAggregate::~OAIAggregate() {}

void OAIAggregate::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_date_added_isSet = false;
    m_date_added_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_family_isSet = false;
    m_family_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_rir_isSet = false;
    m_rir_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIAggregate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregate::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_date_added_isValid = ::OpenAPI::fromJsonValue(m_date_added, json[QString("date_added")]);
    m_date_added_isSet = !json[QString("date_added")].isNull() && m_date_added_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_rir_isValid = ::OpenAPI::fromJsonValue(m_rir, json[QString("rir")]);
    m_rir_isSet = !json[QString("rir")].isNull() && m_rir_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIAggregate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregate::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_date_added_isSet) {
        obj.insert(QString("date_added"), ::OpenAPI::toJsonValue(m_date_added));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_rir.isSet()) {
        obj.insert(QString("rir"), ::OpenAPI::toJsonValue(m_rir));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QDate OAIAggregate::getCreated() const {
    return m_created;
}
void OAIAggregate::setCreated(const QDate &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIAggregate::is_created_Set() const{
    return m_created_isSet;
}

bool OAIAggregate::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIAggregate::getCustomFields() const {
    return m_custom_fields;
}
void OAIAggregate::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIAggregate::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIAggregate::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QDate OAIAggregate::getDateAdded() const {
    return m_date_added;
}
void OAIAggregate::setDateAdded(const QDate &date_added) {
    m_date_added = date_added;
    m_date_added_isSet = true;
}

bool OAIAggregate::is_date_added_Set() const{
    return m_date_added_isSet;
}

bool OAIAggregate::is_date_added_Valid() const{
    return m_date_added_isValid;
}

QString OAIAggregate::getDescription() const {
    return m_description;
}
void OAIAggregate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAggregate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAggregate::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIAggregate::getFamily() const {
    return m_family;
}
void OAIAggregate::setFamily(const qint32 &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIAggregate::is_family_Set() const{
    return m_family_isSet;
}

bool OAIAggregate::is_family_Valid() const{
    return m_family_isValid;
}

qint32 OAIAggregate::getId() const {
    return m_id;
}
void OAIAggregate::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAggregate::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAggregate::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIAggregate::getLastUpdated() const {
    return m_last_updated;
}
void OAIAggregate::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIAggregate::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIAggregate::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIAggregate::getPrefix() const {
    return m_prefix;
}
void OAIAggregate::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIAggregate::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIAggregate::is_prefix_Valid() const{
    return m_prefix_isValid;
}

OAINestedRIR OAIAggregate::getRir() const {
    return m_rir;
}
void OAIAggregate::setRir(const OAINestedRIR &rir) {
    m_rir = rir;
    m_rir_isSet = true;
}

bool OAIAggregate::is_rir_Set() const{
    return m_rir_isSet;
}

bool OAIAggregate::is_rir_Valid() const{
    return m_rir_isValid;
}

QList<QString> OAIAggregate::getTags() const {
    return m_tags;
}
void OAIAggregate::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAggregate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAggregate::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIAggregate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_added_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rir.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_prefix_isValid && m_rir_isValid && true;
}

} // namespace OpenAPI
