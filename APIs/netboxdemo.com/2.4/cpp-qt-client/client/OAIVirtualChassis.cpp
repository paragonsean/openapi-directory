/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualChassis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualChassis::OAIVirtualChassis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualChassis::OAIVirtualChassis() {
    this->initializeModel();
}

OAIVirtualChassis::~OAIVirtualChassis() {}

void OAIVirtualChassis::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_master_isSet = false;
    m_master_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIVirtualChassis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualChassis::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_master_isValid = ::OpenAPI::fromJsonValue(m_master, json[QString("master")]);
    m_master_isSet = !json[QString("master")].isNull() && m_master_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIVirtualChassis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualChassis::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_master.isSet()) {
        obj.insert(QString("master"), ::OpenAPI::toJsonValue(m_master));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIVirtualChassis::getDomain() const {
    return m_domain;
}
void OAIVirtualChassis::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIVirtualChassis::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIVirtualChassis::is_domain_Valid() const{
    return m_domain_isValid;
}

qint32 OAIVirtualChassis::getId() const {
    return m_id;
}
void OAIVirtualChassis::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVirtualChassis::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVirtualChassis::is_id_Valid() const{
    return m_id_isValid;
}

OAINestedDevice OAIVirtualChassis::getMaster() const {
    return m_master;
}
void OAIVirtualChassis::setMaster(const OAINestedDevice &master) {
    m_master = master;
    m_master_isSet = true;
}

bool OAIVirtualChassis::is_master_Set() const{
    return m_master_isSet;
}

bool OAIVirtualChassis::is_master_Valid() const{
    return m_master_isValid;
}

QList<QString> OAIVirtualChassis::getTags() const {
    return m_tags;
}
void OAIVirtualChassis::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIVirtualChassis::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIVirtualChassis::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIVirtualChassis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualChassis::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_master_isValid && true;
}

} // namespace OpenAPI
