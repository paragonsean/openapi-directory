/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsoleServerPort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsoleServerPort::OAIConsoleServerPort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsoleServerPort::OAIConsoleServerPort() {
    this->initializeModel();
}

OAIConsoleServerPort::~OAIConsoleServerPort() {}

void OAIConsoleServerPort::initializeModel() {

    m_connected_console_isSet = false;
    m_connected_console_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIConsoleServerPort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsoleServerPort::fromJsonObject(QJsonObject json) {

    m_connected_console_isValid = ::OpenAPI::fromJsonValue(m_connected_console, json[QString("connected_console")]);
    m_connected_console_isSet = !json[QString("connected_console")].isNull() && m_connected_console_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIConsoleServerPort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsoleServerPort::asJsonObject() const {
    QJsonObject obj;
    if (m_connected_console_isSet) {
        obj.insert(QString("connected_console"), ::OpenAPI::toJsonValue(m_connected_console));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIConsoleServerPort::getConnectedConsole() const {
    return m_connected_console;
}
void OAIConsoleServerPort::setConnectedConsole(const QString &connected_console) {
    m_connected_console = connected_console;
    m_connected_console_isSet = true;
}

bool OAIConsoleServerPort::is_connected_console_Set() const{
    return m_connected_console_isSet;
}

bool OAIConsoleServerPort::is_connected_console_Valid() const{
    return m_connected_console_isValid;
}

OAINestedDevice OAIConsoleServerPort::getDevice() const {
    return m_device;
}
void OAIConsoleServerPort::setDevice(const OAINestedDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIConsoleServerPort::is_device_Set() const{
    return m_device_isSet;
}

bool OAIConsoleServerPort::is_device_Valid() const{
    return m_device_isValid;
}

qint32 OAIConsoleServerPort::getId() const {
    return m_id;
}
void OAIConsoleServerPort::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConsoleServerPort::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConsoleServerPort::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIConsoleServerPort::getName() const {
    return m_name;
}
void OAIConsoleServerPort::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConsoleServerPort::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConsoleServerPort::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIConsoleServerPort::getTags() const {
    return m_tags;
}
void OAIConsoleServerPort::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIConsoleServerPort::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIConsoleServerPort::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIConsoleServerPort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connected_console_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsoleServerPort::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
