/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableConsolePort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableConsolePort::OAIWritableConsolePort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableConsolePort::OAIWritableConsolePort() {
    this->initializeModel();
}

OAIWritableConsolePort::~OAIWritableConsolePort() {}

void OAIWritableConsolePort::initializeModel() {

    m_connection_status_isSet = false;
    m_connection_status_isValid = false;

    m_cs_port_isSet = false;
    m_cs_port_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIWritableConsolePort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableConsolePort::fromJsonObject(QJsonObject json) {

    m_connection_status_isValid = ::OpenAPI::fromJsonValue(m_connection_status, json[QString("connection_status")]);
    m_connection_status_isSet = !json[QString("connection_status")].isNull() && m_connection_status_isValid;

    m_cs_port_isValid = ::OpenAPI::fromJsonValue(m_cs_port, json[QString("cs_port")]);
    m_cs_port_isSet = !json[QString("cs_port")].isNull() && m_cs_port_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIWritableConsolePort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableConsolePort::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_status_isSet) {
        obj.insert(QString("connection_status"), ::OpenAPI::toJsonValue(m_connection_status));
    }
    if (m_cs_port_isSet) {
        obj.insert(QString("cs_port"), ::OpenAPI::toJsonValue(m_cs_port));
    }
    if (m_device_isSet) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

bool OAIWritableConsolePort::isConnectionStatus() const {
    return m_connection_status;
}
void OAIWritableConsolePort::setConnectionStatus(const bool &connection_status) {
    m_connection_status = connection_status;
    m_connection_status_isSet = true;
}

bool OAIWritableConsolePort::is_connection_status_Set() const{
    return m_connection_status_isSet;
}

bool OAIWritableConsolePort::is_connection_status_Valid() const{
    return m_connection_status_isValid;
}

qint32 OAIWritableConsolePort::getCsPort() const {
    return m_cs_port;
}
void OAIWritableConsolePort::setCsPort(const qint32 &cs_port) {
    m_cs_port = cs_port;
    m_cs_port_isSet = true;
}

bool OAIWritableConsolePort::is_cs_port_Set() const{
    return m_cs_port_isSet;
}

bool OAIWritableConsolePort::is_cs_port_Valid() const{
    return m_cs_port_isValid;
}

qint32 OAIWritableConsolePort::getDevice() const {
    return m_device;
}
void OAIWritableConsolePort::setDevice(const qint32 &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIWritableConsolePort::is_device_Set() const{
    return m_device_isSet;
}

bool OAIWritableConsolePort::is_device_Valid() const{
    return m_device_isValid;
}

qint32 OAIWritableConsolePort::getId() const {
    return m_id;
}
void OAIWritableConsolePort::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableConsolePort::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableConsolePort::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWritableConsolePort::getName() const {
    return m_name;
}
void OAIWritableConsolePort::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritableConsolePort::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritableConsolePort::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIWritableConsolePort::getTags() const {
    return m_tags;
}
void OAIWritableConsolePort::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritableConsolePort::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritableConsolePort::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIWritableConsolePort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cs_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableConsolePort::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
