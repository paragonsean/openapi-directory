/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWritableDevice.h
 *
 * 
 */

#ifndef OAIWritableDevice_H
#define OAIWritableDevice_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QDate>
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWritableDevice : public OAIObject {
public:
    OAIWritableDevice();
    OAIWritableDevice(QString json);
    ~OAIWritableDevice() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAssetTag() const;
    void setAssetTag(const QString &asset_tag);
    bool is_asset_tag_Set() const;
    bool is_asset_tag_Valid() const;

    qint32 getCluster() const;
    void setCluster(const qint32 &cluster);
    bool is_cluster_Set() const;
    bool is_cluster_Valid() const;

    QString getComments() const;
    void setComments(const QString &comments);
    bool is_comments_Set() const;
    bool is_comments_Valid() const;

    QDate getCreated() const;
    void setCreated(const QDate &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    OAIObject getCustomFields() const;
    void setCustomFields(const OAIObject &custom_fields);
    bool is_custom_fields_Set() const;
    bool is_custom_fields_Valid() const;

    qint32 getDeviceRole() const;
    void setDeviceRole(const qint32 &device_role);
    bool is_device_role_Set() const;
    bool is_device_role_Valid() const;

    qint32 getDeviceType() const;
    void setDeviceType(const qint32 &device_type);
    bool is_device_type_Set() const;
    bool is_device_type_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    qint32 getFace() const;
    void setFace(const qint32 &face);
    bool is_face_Set() const;
    bool is_face_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getLastUpdated() const;
    void setLastUpdated(const QDateTime &last_updated);
    bool is_last_updated_Set() const;
    bool is_last_updated_Valid() const;

    QString getLocalContextData() const;
    void setLocalContextData(const QString &local_context_data);
    bool is_local_context_data_Set() const;
    bool is_local_context_data_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getParentDevice() const;
    void setParentDevice(const QString &parent_device);
    bool is_parent_device_Set() const;
    bool is_parent_device_Valid() const;

    qint32 getPlatform() const;
    void setPlatform(const qint32 &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    qint32 getPosition() const;
    void setPosition(const qint32 &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    QString getPrimaryIp() const;
    void setPrimaryIp(const QString &primary_ip);
    bool is_primary_ip_Set() const;
    bool is_primary_ip_Valid() const;

    qint32 getPrimaryIp4() const;
    void setPrimaryIp4(const qint32 &primary_ip4);
    bool is_primary_ip4_Set() const;
    bool is_primary_ip4_Valid() const;

    qint32 getPrimaryIp6() const;
    void setPrimaryIp6(const qint32 &primary_ip6);
    bool is_primary_ip6_Set() const;
    bool is_primary_ip6_Valid() const;

    qint32 getRack() const;
    void setRack(const qint32 &rack);
    bool is_rack_Set() const;
    bool is_rack_Valid() const;

    QString getSerial() const;
    void setSerial(const QString &serial);
    bool is_serial_Set() const;
    bool is_serial_Valid() const;

    qint32 getSite() const;
    void setSite(const qint32 &site);
    bool is_site_Set() const;
    bool is_site_Valid() const;

    qint32 getStatus() const;
    void setStatus(const qint32 &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    qint32 getTenant() const;
    void setTenant(const qint32 &tenant);
    bool is_tenant_Set() const;
    bool is_tenant_Valid() const;

    qint32 getVcPosition() const;
    void setVcPosition(const qint32 &vc_position);
    bool is_vc_position_Set() const;
    bool is_vc_position_Valid() const;

    qint32 getVcPriority() const;
    void setVcPriority(const qint32 &vc_priority);
    bool is_vc_priority_Set() const;
    bool is_vc_priority_Valid() const;

    qint32 getVirtualChassis() const;
    void setVirtualChassis(const qint32 &virtual_chassis);
    bool is_virtual_chassis_Set() const;
    bool is_virtual_chassis_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_asset_tag;
    bool m_asset_tag_isSet;
    bool m_asset_tag_isValid;

    qint32 m_cluster;
    bool m_cluster_isSet;
    bool m_cluster_isValid;

    QString m_comments;
    bool m_comments_isSet;
    bool m_comments_isValid;

    QDate m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    OAIObject m_custom_fields;
    bool m_custom_fields_isSet;
    bool m_custom_fields_isValid;

    qint32 m_device_role;
    bool m_device_role_isSet;
    bool m_device_role_isValid;

    qint32 m_device_type;
    bool m_device_type_isSet;
    bool m_device_type_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    qint32 m_face;
    bool m_face_isSet;
    bool m_face_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QDateTime m_last_updated;
    bool m_last_updated_isSet;
    bool m_last_updated_isValid;

    QString m_local_context_data;
    bool m_local_context_data_isSet;
    bool m_local_context_data_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_parent_device;
    bool m_parent_device_isSet;
    bool m_parent_device_isValid;

    qint32 m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    qint32 m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    QString m_primary_ip;
    bool m_primary_ip_isSet;
    bool m_primary_ip_isValid;

    qint32 m_primary_ip4;
    bool m_primary_ip4_isSet;
    bool m_primary_ip4_isValid;

    qint32 m_primary_ip6;
    bool m_primary_ip6_isSet;
    bool m_primary_ip6_isValid;

    qint32 m_rack;
    bool m_rack_isSet;
    bool m_rack_isValid;

    QString m_serial;
    bool m_serial_isSet;
    bool m_serial_isValid;

    qint32 m_site;
    bool m_site_isSet;
    bool m_site_isValid;

    qint32 m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    qint32 m_tenant;
    bool m_tenant_isSet;
    bool m_tenant_isValid;

    qint32 m_vc_position;
    bool m_vc_position_isSet;
    bool m_vc_position_isValid;

    qint32 m_vc_priority;
    bool m_vc_priority_isSet;
    bool m_vc_priority_isValid;

    qint32 m_virtual_chassis;
    bool m_virtual_chassis_isSet;
    bool m_virtual_chassis_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWritableDevice)

#endif // OAIWritableDevice_H
