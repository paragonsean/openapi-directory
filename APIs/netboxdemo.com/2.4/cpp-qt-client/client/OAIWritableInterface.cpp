/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableInterface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableInterface::OAIWritableInterface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableInterface::OAIWritableInterface() {
    this->initializeModel();
}

OAIWritableInterface::~OAIWritableInterface() {}

void OAIWritableInterface::initializeModel() {

    m_circuit_termination_isSet = false;
    m_circuit_termination_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_form_factor_isSet = false;
    m_form_factor_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interface_connection_isSet = false;
    m_interface_connection_isValid = false;

    m_is_connected_isSet = false;
    m_is_connected_isValid = false;

    m_lag_isSet = false;
    m_lag_isValid = false;

    m_mac_address_isSet = false;
    m_mac_address_isValid = false;

    m_mgmt_only_isSet = false;
    m_mgmt_only_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_mtu_isSet = false;
    m_mtu_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tagged_vlans_isSet = false;
    m_tagged_vlans_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_untagged_vlan_isSet = false;
    m_untagged_vlan_isValid = false;
}

void OAIWritableInterface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableInterface::fromJsonObject(QJsonObject json) {

    m_circuit_termination_isValid = ::OpenAPI::fromJsonValue(m_circuit_termination, json[QString("circuit_termination")]);
    m_circuit_termination_isSet = !json[QString("circuit_termination")].isNull() && m_circuit_termination_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_form_factor_isValid = ::OpenAPI::fromJsonValue(m_form_factor, json[QString("form_factor")]);
    m_form_factor_isSet = !json[QString("form_factor")].isNull() && m_form_factor_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interface_connection_isValid = ::OpenAPI::fromJsonValue(m_interface_connection, json[QString("interface_connection")]);
    m_interface_connection_isSet = !json[QString("interface_connection")].isNull() && m_interface_connection_isValid;

    m_is_connected_isValid = ::OpenAPI::fromJsonValue(m_is_connected, json[QString("is_connected")]);
    m_is_connected_isSet = !json[QString("is_connected")].isNull() && m_is_connected_isValid;

    m_lag_isValid = ::OpenAPI::fromJsonValue(m_lag, json[QString("lag")]);
    m_lag_isSet = !json[QString("lag")].isNull() && m_lag_isValid;

    m_mac_address_isValid = ::OpenAPI::fromJsonValue(m_mac_address, json[QString("mac_address")]);
    m_mac_address_isSet = !json[QString("mac_address")].isNull() && m_mac_address_isValid;

    m_mgmt_only_isValid = ::OpenAPI::fromJsonValue(m_mgmt_only, json[QString("mgmt_only")]);
    m_mgmt_only_isSet = !json[QString("mgmt_only")].isNull() && m_mgmt_only_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_mtu_isValid = ::OpenAPI::fromJsonValue(m_mtu, json[QString("mtu")]);
    m_mtu_isSet = !json[QString("mtu")].isNull() && m_mtu_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tagged_vlans_isValid = ::OpenAPI::fromJsonValue(m_tagged_vlans, json[QString("tagged_vlans")]);
    m_tagged_vlans_isSet = !json[QString("tagged_vlans")].isNull() && m_tagged_vlans_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_untagged_vlan_isValid = ::OpenAPI::fromJsonValue(m_untagged_vlan, json[QString("untagged_vlan")]);
    m_untagged_vlan_isSet = !json[QString("untagged_vlan")].isNull() && m_untagged_vlan_isValid;
}

QString OAIWritableInterface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableInterface::asJsonObject() const {
    QJsonObject obj;
    if (m_circuit_termination_isSet) {
        obj.insert(QString("circuit_termination"), ::OpenAPI::toJsonValue(m_circuit_termination));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device_isSet) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_form_factor_isSet) {
        obj.insert(QString("form_factor"), ::OpenAPI::toJsonValue(m_form_factor));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interface_connection_isSet) {
        obj.insert(QString("interface_connection"), ::OpenAPI::toJsonValue(m_interface_connection));
    }
    if (m_is_connected_isSet) {
        obj.insert(QString("is_connected"), ::OpenAPI::toJsonValue(m_is_connected));
    }
    if (m_lag_isSet) {
        obj.insert(QString("lag"), ::OpenAPI::toJsonValue(m_lag));
    }
    if (m_mac_address_isSet) {
        obj.insert(QString("mac_address"), ::OpenAPI::toJsonValue(m_mac_address));
    }
    if (m_mgmt_only_isSet) {
        obj.insert(QString("mgmt_only"), ::OpenAPI::toJsonValue(m_mgmt_only));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_mtu_isSet) {
        obj.insert(QString("mtu"), ::OpenAPI::toJsonValue(m_mtu));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tagged_vlans.size() > 0) {
        obj.insert(QString("tagged_vlans"), ::OpenAPI::toJsonValue(m_tagged_vlans));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_untagged_vlan_isSet) {
        obj.insert(QString("untagged_vlan"), ::OpenAPI::toJsonValue(m_untagged_vlan));
    }
    return obj;
}

qint32 OAIWritableInterface::getCircuitTermination() const {
    return m_circuit_termination;
}
void OAIWritableInterface::setCircuitTermination(const qint32 &circuit_termination) {
    m_circuit_termination = circuit_termination;
    m_circuit_termination_isSet = true;
}

bool OAIWritableInterface::is_circuit_termination_Set() const{
    return m_circuit_termination_isSet;
}

bool OAIWritableInterface::is_circuit_termination_Valid() const{
    return m_circuit_termination_isValid;
}

QString OAIWritableInterface::getDescription() const {
    return m_description;
}
void OAIWritableInterface::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritableInterface::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritableInterface::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIWritableInterface::getDevice() const {
    return m_device;
}
void OAIWritableInterface::setDevice(const qint32 &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIWritableInterface::is_device_Set() const{
    return m_device_isSet;
}

bool OAIWritableInterface::is_device_Valid() const{
    return m_device_isValid;
}

bool OAIWritableInterface::isEnabled() const {
    return m_enabled;
}
void OAIWritableInterface::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIWritableInterface::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIWritableInterface::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAIWritableInterface::getFormFactor() const {
    return m_form_factor;
}
void OAIWritableInterface::setFormFactor(const qint32 &form_factor) {
    m_form_factor = form_factor;
    m_form_factor_isSet = true;
}

bool OAIWritableInterface::is_form_factor_Set() const{
    return m_form_factor_isSet;
}

bool OAIWritableInterface::is_form_factor_Valid() const{
    return m_form_factor_isValid;
}

qint32 OAIWritableInterface::getId() const {
    return m_id;
}
void OAIWritableInterface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableInterface::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableInterface::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWritableInterface::getInterfaceConnection() const {
    return m_interface_connection;
}
void OAIWritableInterface::setInterfaceConnection(const QString &interface_connection) {
    m_interface_connection = interface_connection;
    m_interface_connection_isSet = true;
}

bool OAIWritableInterface::is_interface_connection_Set() const{
    return m_interface_connection_isSet;
}

bool OAIWritableInterface::is_interface_connection_Valid() const{
    return m_interface_connection_isValid;
}

QString OAIWritableInterface::getIsConnected() const {
    return m_is_connected;
}
void OAIWritableInterface::setIsConnected(const QString &is_connected) {
    m_is_connected = is_connected;
    m_is_connected_isSet = true;
}

bool OAIWritableInterface::is_is_connected_Set() const{
    return m_is_connected_isSet;
}

bool OAIWritableInterface::is_is_connected_Valid() const{
    return m_is_connected_isValid;
}

qint32 OAIWritableInterface::getLag() const {
    return m_lag;
}
void OAIWritableInterface::setLag(const qint32 &lag) {
    m_lag = lag;
    m_lag_isSet = true;
}

bool OAIWritableInterface::is_lag_Set() const{
    return m_lag_isSet;
}

bool OAIWritableInterface::is_lag_Valid() const{
    return m_lag_isValid;
}

QString OAIWritableInterface::getMacAddress() const {
    return m_mac_address;
}
void OAIWritableInterface::setMacAddress(const QString &mac_address) {
    m_mac_address = mac_address;
    m_mac_address_isSet = true;
}

bool OAIWritableInterface::is_mac_address_Set() const{
    return m_mac_address_isSet;
}

bool OAIWritableInterface::is_mac_address_Valid() const{
    return m_mac_address_isValid;
}

bool OAIWritableInterface::isMgmtOnly() const {
    return m_mgmt_only;
}
void OAIWritableInterface::setMgmtOnly(const bool &mgmt_only) {
    m_mgmt_only = mgmt_only;
    m_mgmt_only_isSet = true;
}

bool OAIWritableInterface::is_mgmt_only_Set() const{
    return m_mgmt_only_isSet;
}

bool OAIWritableInterface::is_mgmt_only_Valid() const{
    return m_mgmt_only_isValid;
}

qint32 OAIWritableInterface::getMode() const {
    return m_mode;
}
void OAIWritableInterface::setMode(const qint32 &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIWritableInterface::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIWritableInterface::is_mode_Valid() const{
    return m_mode_isValid;
}

qint32 OAIWritableInterface::getMtu() const {
    return m_mtu;
}
void OAIWritableInterface::setMtu(const qint32 &mtu) {
    m_mtu = mtu;
    m_mtu_isSet = true;
}

bool OAIWritableInterface::is_mtu_Set() const{
    return m_mtu_isSet;
}

bool OAIWritableInterface::is_mtu_Valid() const{
    return m_mtu_isValid;
}

QString OAIWritableInterface::getName() const {
    return m_name;
}
void OAIWritableInterface::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritableInterface::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritableInterface::is_name_Valid() const{
    return m_name_isValid;
}

QSet<qint32> OAIWritableInterface::getTaggedVlans() const {
    return m_tagged_vlans;
}
void OAIWritableInterface::setTaggedVlans(const QSet<qint32> &tagged_vlans) {
    m_tagged_vlans = tagged_vlans;
    m_tagged_vlans_isSet = true;
}

bool OAIWritableInterface::is_tagged_vlans_Set() const{
    return m_tagged_vlans_isSet;
}

bool OAIWritableInterface::is_tagged_vlans_Valid() const{
    return m_tagged_vlans_isValid;
}

QList<QString> OAIWritableInterface::getTags() const {
    return m_tags;
}
void OAIWritableInterface::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritableInterface::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritableInterface::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIWritableInterface::getUntaggedVlan() const {
    return m_untagged_vlan;
}
void OAIWritableInterface::setUntaggedVlan(const qint32 &untagged_vlan) {
    m_untagged_vlan = untagged_vlan;
    m_untagged_vlan_isSet = true;
}

bool OAIWritableInterface::is_untagged_vlan_Set() const{
    return m_untagged_vlan_isSet;
}

bool OAIWritableInterface::is_untagged_vlan_Valid() const{
    return m_untagged_vlan_isValid;
}

bool OAIWritableInterface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_circuit_termination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_connection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_connected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mgmt_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagged_vlans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_untagged_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableInterface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_circuit_termination_isValid && m_device_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
