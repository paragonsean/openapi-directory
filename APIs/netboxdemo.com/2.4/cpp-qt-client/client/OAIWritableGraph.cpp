/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableGraph.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableGraph::OAIWritableGraph(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableGraph::OAIWritableGraph() {
    this->initializeModel();
}

OAIWritableGraph::~OAIWritableGraph() {}

void OAIWritableGraph::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIWritableGraph::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableGraph::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIWritableGraph::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableGraph::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

qint32 OAIWritableGraph::getId() const {
    return m_id;
}
void OAIWritableGraph::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableGraph::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableGraph::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWritableGraph::getLink() const {
    return m_link;
}
void OAIWritableGraph::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIWritableGraph::is_link_Set() const{
    return m_link_isSet;
}

bool OAIWritableGraph::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIWritableGraph::getName() const {
    return m_name;
}
void OAIWritableGraph::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritableGraph::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritableGraph::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWritableGraph::getSource() const {
    return m_source;
}
void OAIWritableGraph::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIWritableGraph::is_source_Set() const{
    return m_source_isSet;
}

bool OAIWritableGraph::is_source_Valid() const{
    return m_source_isValid;
}

qint32 OAIWritableGraph::getType() const {
    return m_type;
}
void OAIWritableGraph::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWritableGraph::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWritableGraph::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIWritableGraph::getWeight() const {
    return m_weight;
}
void OAIWritableGraph::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIWritableGraph::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIWritableGraph::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIWritableGraph::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableGraph::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_source_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
