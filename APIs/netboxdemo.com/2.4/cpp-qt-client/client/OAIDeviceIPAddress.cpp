/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceIPAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceIPAddress::OAIDeviceIPAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceIPAddress::OAIDeviceIPAddress() {
    this->initializeModel();
}

OAIDeviceIPAddress::~OAIDeviceIPAddress() {}

void OAIDeviceIPAddress::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_family_isSet = false;
    m_family_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIDeviceIPAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceIPAddress::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIDeviceIPAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceIPAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIDeviceIPAddress::getAddress() const {
    return m_address;
}
void OAIDeviceIPAddress::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIDeviceIPAddress::is_address_Set() const{
    return m_address_isSet;
}

bool OAIDeviceIPAddress::is_address_Valid() const{
    return m_address_isValid;
}

qint32 OAIDeviceIPAddress::getFamily() const {
    return m_family;
}
void OAIDeviceIPAddress::setFamily(const qint32 &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIDeviceIPAddress::is_family_Set() const{
    return m_family_isSet;
}

bool OAIDeviceIPAddress::is_family_Valid() const{
    return m_family_isValid;
}

qint32 OAIDeviceIPAddress::getId() const {
    return m_id;
}
void OAIDeviceIPAddress::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeviceIPAddress::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeviceIPAddress::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeviceIPAddress::getUrl() const {
    return m_url;
}
void OAIDeviceIPAddress::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDeviceIPAddress::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDeviceIPAddress::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIDeviceIPAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceIPAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && true;
}

} // namespace OpenAPI
