/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDcimApi_H
#define OAI_OAIDcimApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConsolePort.h"
#include "OAIConsolePortTemplate.h"
#include "OAIConsoleServerPort.h"
#include "OAIConsoleServerPortTemplate.h"
#include "OAIDcim_console_connections_list_200_response.h"
#include "OAIDcim_console_port_templates_list_200_response.h"
#include "OAIDcim_console_server_port_templates_list_200_response.h"
#include "OAIDcim_console_server_ports_list_200_response.h"
#include "OAIDcim_device_bay_templates_list_200_response.h"
#include "OAIDcim_device_bays_list_200_response.h"
#include "OAIDcim_device_roles_list_200_response.h"
#include "OAIDcim_device_types_list_200_response.h"
#include "OAIDcim_devices_list_200_response.h"
#include "OAIDcim_interface_connections_list_200_response.h"
#include "OAIDcim_interface_templates_list_200_response.h"
#include "OAIDcim_interfaces_list_200_response.h"
#include "OAIDcim_inventory_items_list_200_response.h"
#include "OAIDcim_manufacturers_list_200_response.h"
#include "OAIDcim_platforms_list_200_response.h"
#include "OAIDcim_power_connections_list_200_response.h"
#include "OAIDcim_power_outlet_templates_list_200_response.h"
#include "OAIDcim_power_outlets_list_200_response.h"
#include "OAIDcim_power_port_templates_list_200_response.h"
#include "OAIDcim_rack_groups_list_200_response.h"
#include "OAIDcim_rack_reservations_list_200_response.h"
#include "OAIDcim_rack_roles_list_200_response.h"
#include "OAIDcim_racks_list_200_response.h"
#include "OAIDcim_regions_list_200_response.h"
#include "OAIDcim_sites_list_200_response.h"
#include "OAIDcim_virtual_chassis_list_200_response.h"
#include "OAIDevice.h"
#include "OAIDeviceBay.h"
#include "OAIDeviceBayTemplate.h"
#include "OAIDeviceRole.h"
#include "OAIDeviceType.h"
#include "OAIDeviceWithConfigContext.h"
#include "OAIInterface.h"
#include "OAIInterfaceConnection.h"
#include "OAIInterfaceTemplate.h"
#include "OAIInventoryItem.h"
#include "OAIManufacturer.h"
#include "OAIPlatform.h"
#include "OAIPowerOutlet.h"
#include "OAIPowerOutletTemplate.h"
#include "OAIPowerPort.h"
#include "OAIPowerPortTemplate.h"
#include "OAIRack.h"
#include "OAIRackGroup.h"
#include "OAIRackReservation.h"
#include "OAIRackRole.h"
#include "OAIRegion.h"
#include "OAISite.h"
#include "OAIVirtualChassis.h"
#include "OAIWritableConsolePort.h"
#include "OAIWritableConsolePortTemplate.h"
#include "OAIWritableConsoleServerPort.h"
#include "OAIWritableConsoleServerPortTemplate.h"
#include "OAIWritableDevice.h"
#include "OAIWritableDeviceBay.h"
#include "OAIWritableDeviceBayTemplate.h"
#include "OAIWritableDeviceType.h"
#include "OAIWritableInterface.h"
#include "OAIWritableInterfaceConnection.h"
#include "OAIWritableInterfaceTemplate.h"
#include "OAIWritableInventoryItem.h"
#include "OAIWritablePlatform.h"
#include "OAIWritablePowerOutlet.h"
#include "OAIWritablePowerOutletTemplate.h"
#include "OAIWritablePowerPort.h"
#include "OAIWritablePowerPortTemplate.h"
#include "OAIWritableRack.h"
#include "OAIWritableRackGroup.h"
#include "OAIWritableRackReservation.h"
#include "OAIWritableRegion.h"
#include "OAIWritableSite.h"
#include "OAIWritableVirtualChassis.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDcimApi : public QObject {
    Q_OBJECT

public:
    OAIDcimApi(const int timeOut = 0);
    ~OAIDcimApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void dcimChoicesList();

    /**
    * @param[in]  id QString [required]
    */
    virtual void dcimChoicesRead(const QString &id);

    /**
    * @param[in]  peer_device QString [required]
    * @param[in]  peer_interface QString [required]
    */
    virtual void dcimConnectedDeviceList(const QString &peer_device, const QString &peer_interface);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  connection_status QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimConsoleConnectionsList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &connection_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_writable_console_port_template OAIWritableConsolePortTemplate [required]
    */
    virtual void dcimConsolePortTemplatesCreate(const OAIWritableConsolePortTemplate &oai_writable_console_port_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsolePortTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  devicetype_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimConsolePortTemplatesList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_console_port_template OAIWritableConsolePortTemplate [required]
    */
    virtual void dcimConsolePortTemplatesPartialUpdate(const qint32 &id, const OAIWritableConsolePortTemplate &oai_writable_console_port_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsolePortTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_console_port_template OAIWritableConsolePortTemplate [required]
    */
    virtual void dcimConsolePortTemplatesUpdate(const qint32 &id, const OAIWritableConsolePortTemplate &oai_writable_console_port_template);

    /**
    * @param[in]  oai_writable_console_port OAIWritableConsolePort [required]
    */
    virtual void dcimConsolePortsCreate(const OAIWritableConsolePort &oai_writable_console_port);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsolePortsDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimConsolePortsList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_console_port OAIWritableConsolePort [required]
    */
    virtual void dcimConsolePortsPartialUpdate(const qint32 &id, const OAIWritableConsolePort &oai_writable_console_port);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsolePortsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_console_port OAIWritableConsolePort [required]
    */
    virtual void dcimConsolePortsUpdate(const qint32 &id, const OAIWritableConsolePort &oai_writable_console_port);

    /**
    * @param[in]  oai_writable_console_server_port_template OAIWritableConsoleServerPortTemplate [required]
    */
    virtual void dcimConsoleServerPortTemplatesCreate(const OAIWritableConsoleServerPortTemplate &oai_writable_console_server_port_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsoleServerPortTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  devicetype_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimConsoleServerPortTemplatesList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_console_server_port_template OAIWritableConsoleServerPortTemplate [required]
    */
    virtual void dcimConsoleServerPortTemplatesPartialUpdate(const qint32 &id, const OAIWritableConsoleServerPortTemplate &oai_writable_console_server_port_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsoleServerPortTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_console_server_port_template OAIWritableConsoleServerPortTemplate [required]
    */
    virtual void dcimConsoleServerPortTemplatesUpdate(const qint32 &id, const OAIWritableConsoleServerPortTemplate &oai_writable_console_server_port_template);

    /**
    * @param[in]  oai_writable_console_server_port OAIWritableConsoleServerPort [required]
    */
    virtual void dcimConsoleServerPortsCreate(const OAIWritableConsoleServerPort &oai_writable_console_server_port);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsoleServerPortsDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimConsoleServerPortsList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_console_server_port OAIWritableConsoleServerPort [required]
    */
    virtual void dcimConsoleServerPortsPartialUpdate(const qint32 &id, const OAIWritableConsoleServerPort &oai_writable_console_server_port);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsoleServerPortsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_console_server_port OAIWritableConsoleServerPort [required]
    */
    virtual void dcimConsoleServerPortsUpdate(const qint32 &id, const OAIWritableConsoleServerPort &oai_writable_console_server_port);

    /**
    * @param[in]  oai_writable_device_bay_template OAIWritableDeviceBayTemplate [required]
    */
    virtual void dcimDeviceBayTemplatesCreate(const OAIWritableDeviceBayTemplate &oai_writable_device_bay_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDeviceBayTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  devicetype_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimDeviceBayTemplatesList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_device_bay_template OAIWritableDeviceBayTemplate [required]
    */
    virtual void dcimDeviceBayTemplatesPartialUpdate(const qint32 &id, const OAIWritableDeviceBayTemplate &oai_writable_device_bay_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDeviceBayTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_device_bay_template OAIWritableDeviceBayTemplate [required]
    */
    virtual void dcimDeviceBayTemplatesUpdate(const qint32 &id, const OAIWritableDeviceBayTemplate &oai_writable_device_bay_template);

    /**
    * @param[in]  oai_writable_device_bay OAIWritableDeviceBay [required]
    */
    virtual void dcimDeviceBaysCreate(const OAIWritableDeviceBay &oai_writable_device_bay);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDeviceBaysDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimDeviceBaysList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_device_bay OAIWritableDeviceBay [required]
    */
    virtual void dcimDeviceBaysPartialUpdate(const qint32 &id, const OAIWritableDeviceBay &oai_writable_device_bay);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDeviceBaysRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_device_bay OAIWritableDeviceBay [required]
    */
    virtual void dcimDeviceBaysUpdate(const qint32 &id, const OAIWritableDeviceBay &oai_writable_device_bay);

    /**
    * @param[in]  oai_device_role OAIDeviceRole [required]
    */
    virtual void dcimDeviceRolesCreate(const OAIDeviceRole &oai_device_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDeviceRolesDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  color QString [optional]
    * @param[in]  vm_role QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimDeviceRolesList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vm_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_device_role OAIDeviceRole [required]
    */
    virtual void dcimDeviceRolesPartialUpdate(const qint32 &id, const OAIDeviceRole &oai_device_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDeviceRolesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_device_role OAIDeviceRole [required]
    */
    virtual void dcimDeviceRolesUpdate(const qint32 &id, const OAIDeviceRole &oai_device_role);

    /**
    * @param[in]  oai_writable_device_type OAIWritableDeviceType [required]
    */
    virtual void dcimDeviceTypesCreate(const OAIWritableDeviceType &oai_writable_device_type);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDeviceTypesDelete(const qint32 &id);

    /**
    * @param[in]  model QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  part_number QString [optional]
    * @param[in]  u_height double [optional]
    * @param[in]  is_full_depth QString [optional]
    * @param[in]  is_console_server QString [optional]
    * @param[in]  is_pdu QString [optional]
    * @param[in]  is_network_device QString [optional]
    * @param[in]  subdevice_role QString [optional]
    * @param[in]  id__in QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  manufacturer_id QString [optional]
    * @param[in]  manufacturer QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimDeviceTypesList(const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &u_height = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &is_full_depth = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_console_server = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_pdu = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_network_device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subdevice_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__in = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_device_type OAIWritableDeviceType [required]
    */
    virtual void dcimDeviceTypesPartialUpdate(const qint32 &id, const OAIWritableDeviceType &oai_writable_device_type);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDeviceTypesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_device_type OAIWritableDeviceType [required]
    */
    virtual void dcimDeviceTypesUpdate(const qint32 &id, const OAIWritableDeviceType &oai_writable_device_type);

    /**
    * @param[in]  oai_writable_device OAIWritableDevice [required]
    */
    virtual void dcimDevicesCreate(const OAIWritableDevice &oai_writable_device);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDevicesDelete(const qint32 &id);

    /**
    * @param[in]  serial QString [optional]
    * @param[in]  position double [optional]
    * @param[in]  id__in QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  manufacturer_id QString [optional]
    * @param[in]  manufacturer QString [optional]
    * @param[in]  device_type_id QString [optional]
    * @param[in]  role_id QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  platform_id QString [optional]
    * @param[in]  platform QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  asset_tag QString [optional]
    * @param[in]  region_id double [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  rack_group_id QString [optional]
    * @param[in]  rack_id QString [optional]
    * @param[in]  cluster_id QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  is_full_depth QString [optional]
    * @param[in]  is_console_server QString [optional]
    * @param[in]  is_pdu QString [optional]
    * @param[in]  is_network_device QString [optional]
    * @param[in]  mac_address QString [optional]
    * @param[in]  has_primary_ip QString [optional]
    * @param[in]  virtual_chassis_id QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimDevicesList(const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &position = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &id__in = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_type_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &region_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_full_depth = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_console_server = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_pdu = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_network_device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &has_primary_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDevicesNapalm(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_device OAIWritableDevice [required]
    */
    virtual void dcimDevicesPartialUpdate(const qint32 &id, const OAIWritableDevice &oai_writable_device);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDevicesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_device OAIWritableDevice [required]
    */
    virtual void dcimDevicesUpdate(const qint32 &id, const OAIWritableDevice &oai_writable_device);

    /**
    * @param[in]  oai_writable_interface_connection OAIWritableInterfaceConnection [required]
    */
    virtual void dcimInterfaceConnectionsCreate(const OAIWritableInterfaceConnection &oai_writable_interface_connection);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInterfaceConnectionsDelete(const qint32 &id);

    /**
    * @param[in]  connection_status QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimInterfaceConnectionsList(const ::OpenAPI::OptionalParam<QString> &connection_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_interface_connection OAIWritableInterfaceConnection [required]
    */
    virtual void dcimInterfaceConnectionsPartialUpdate(const qint32 &id, const OAIWritableInterfaceConnection &oai_writable_interface_connection);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInterfaceConnectionsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_interface_connection OAIWritableInterfaceConnection [required]
    */
    virtual void dcimInterfaceConnectionsUpdate(const qint32 &id, const OAIWritableInterfaceConnection &oai_writable_interface_connection);

    /**
    * @param[in]  oai_writable_interface_template OAIWritableInterfaceTemplate [required]
    */
    virtual void dcimInterfaceTemplatesCreate(const OAIWritableInterfaceTemplate &oai_writable_interface_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInterfaceTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  form_factor QString [optional]
    * @param[in]  mgmt_only QString [optional]
    * @param[in]  devicetype_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimInterfaceTemplatesList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &form_factor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mgmt_only = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_interface_template OAIWritableInterfaceTemplate [required]
    */
    virtual void dcimInterfaceTemplatesPartialUpdate(const qint32 &id, const OAIWritableInterfaceTemplate &oai_writable_interface_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInterfaceTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_interface_template OAIWritableInterfaceTemplate [required]
    */
    virtual void dcimInterfaceTemplatesUpdate(const qint32 &id, const OAIWritableInterfaceTemplate &oai_writable_interface_template);

    /**
    * @param[in]  oai_writable_interface OAIWritableInterface [required]
    */
    virtual void dcimInterfacesCreate(const OAIWritableInterface &oai_writable_interface);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInterfacesDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInterfacesGraphs(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  enabled QString [optional]
    * @param[in]  mtu double [optional]
    * @param[in]  mgmt_only QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  device_id double [optional]
    * @param[in]  type QString [optional]
    * @param[in]  lag_id QString [optional]
    * @param[in]  mac_address QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  vlan_id QString [optional]
    * @param[in]  vlan QString [optional]
    * @param[in]  form_factor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimInterfacesList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &enabled = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &mtu = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &mgmt_only = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &device_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lag_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vlan_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vlan = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &form_factor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_interface OAIWritableInterface [required]
    */
    virtual void dcimInterfacesPartialUpdate(const qint32 &id, const OAIWritableInterface &oai_writable_interface);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInterfacesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_interface OAIWritableInterface [required]
    */
    virtual void dcimInterfacesUpdate(const qint32 &id, const OAIWritableInterface &oai_writable_interface);

    /**
    * @param[in]  oai_writable_inventory_item OAIWritableInventoryItem [required]
    */
    virtual void dcimInventoryItemsCreate(const OAIWritableInventoryItem &oai_writable_inventory_item);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInventoryItemsDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  part_id QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  asset_tag QString [optional]
    * @param[in]  discovered QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  manufacturer_id QString [optional]
    * @param[in]  manufacturer QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimInventoryItemsList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &discovered = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_inventory_item OAIWritableInventoryItem [required]
    */
    virtual void dcimInventoryItemsPartialUpdate(const qint32 &id, const OAIWritableInventoryItem &oai_writable_inventory_item);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInventoryItemsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_inventory_item OAIWritableInventoryItem [required]
    */
    virtual void dcimInventoryItemsUpdate(const qint32 &id, const OAIWritableInventoryItem &oai_writable_inventory_item);

    /**
    * @param[in]  oai_manufacturer OAIManufacturer [required]
    */
    virtual void dcimManufacturersCreate(const OAIManufacturer &oai_manufacturer);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimManufacturersDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimManufacturersList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_manufacturer OAIManufacturer [required]
    */
    virtual void dcimManufacturersPartialUpdate(const qint32 &id, const OAIManufacturer &oai_manufacturer);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimManufacturersRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_manufacturer OAIManufacturer [required]
    */
    virtual void dcimManufacturersUpdate(const qint32 &id, const OAIManufacturer &oai_manufacturer);

    /**
    * @param[in]  oai_writable_platform OAIWritablePlatform [required]
    */
    virtual void dcimPlatformsCreate(const OAIWritablePlatform &oai_writable_platform);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPlatformsDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  manufacturer_id QString [optional]
    * @param[in]  manufacturer QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimPlatformsList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_platform OAIWritablePlatform [required]
    */
    virtual void dcimPlatformsPartialUpdate(const qint32 &id, const OAIWritablePlatform &oai_writable_platform);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPlatformsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_platform OAIWritablePlatform [required]
    */
    virtual void dcimPlatformsUpdate(const qint32 &id, const OAIWritablePlatform &oai_writable_platform);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  connection_status QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimPowerConnectionsList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &connection_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_writable_power_outlet_template OAIWritablePowerOutletTemplate [required]
    */
    virtual void dcimPowerOutletTemplatesCreate(const OAIWritablePowerOutletTemplate &oai_writable_power_outlet_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerOutletTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  devicetype_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimPowerOutletTemplatesList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_outlet_template OAIWritablePowerOutletTemplate [required]
    */
    virtual void dcimPowerOutletTemplatesPartialUpdate(const qint32 &id, const OAIWritablePowerOutletTemplate &oai_writable_power_outlet_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerOutletTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_outlet_template OAIWritablePowerOutletTemplate [required]
    */
    virtual void dcimPowerOutletTemplatesUpdate(const qint32 &id, const OAIWritablePowerOutletTemplate &oai_writable_power_outlet_template);

    /**
    * @param[in]  oai_writable_power_outlet OAIWritablePowerOutlet [required]
    */
    virtual void dcimPowerOutletsCreate(const OAIWritablePowerOutlet &oai_writable_power_outlet);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerOutletsDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimPowerOutletsList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_outlet OAIWritablePowerOutlet [required]
    */
    virtual void dcimPowerOutletsPartialUpdate(const qint32 &id, const OAIWritablePowerOutlet &oai_writable_power_outlet);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerOutletsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_outlet OAIWritablePowerOutlet [required]
    */
    virtual void dcimPowerOutletsUpdate(const qint32 &id, const OAIWritablePowerOutlet &oai_writable_power_outlet);

    /**
    * @param[in]  oai_writable_power_port_template OAIWritablePowerPortTemplate [required]
    */
    virtual void dcimPowerPortTemplatesCreate(const OAIWritablePowerPortTemplate &oai_writable_power_port_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerPortTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  devicetype_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimPowerPortTemplatesList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_port_template OAIWritablePowerPortTemplate [required]
    */
    virtual void dcimPowerPortTemplatesPartialUpdate(const qint32 &id, const OAIWritablePowerPortTemplate &oai_writable_power_port_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerPortTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_port_template OAIWritablePowerPortTemplate [required]
    */
    virtual void dcimPowerPortTemplatesUpdate(const qint32 &id, const OAIWritablePowerPortTemplate &oai_writable_power_port_template);

    /**
    * @param[in]  oai_writable_power_port OAIWritablePowerPort [required]
    */
    virtual void dcimPowerPortsCreate(const OAIWritablePowerPort &oai_writable_power_port);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerPortsDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimPowerPortsList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_port OAIWritablePowerPort [required]
    */
    virtual void dcimPowerPortsPartialUpdate(const qint32 &id, const OAIWritablePowerPort &oai_writable_power_port);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerPortsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_port OAIWritablePowerPort [required]
    */
    virtual void dcimPowerPortsUpdate(const qint32 &id, const OAIWritablePowerPort &oai_writable_power_port);

    /**
    * @param[in]  oai_writable_rack_group OAIWritableRackGroup [required]
    */
    virtual void dcimRackGroupsCreate(const OAIWritableRackGroup &oai_writable_rack_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRackGroupsDelete(const qint32 &id);

    /**
    * @param[in]  site_id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimRackGroupsList(const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_rack_group OAIWritableRackGroup [required]
    */
    virtual void dcimRackGroupsPartialUpdate(const qint32 &id, const OAIWritableRackGroup &oai_writable_rack_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRackGroupsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_rack_group OAIWritableRackGroup [required]
    */
    virtual void dcimRackGroupsUpdate(const qint32 &id, const OAIWritableRackGroup &oai_writable_rack_group);

    /**
    * @param[in]  oai_writable_rack_reservation OAIWritableRackReservation [required]
    */
    virtual void dcimRackReservationsCreate(const OAIWritableRackReservation &oai_writable_rack_reservation);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRackReservationsDelete(const qint32 &id);

    /**
    * @param[in]  created QString [optional]
    * @param[in]  id__in QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  rack_id QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimRackReservationsList(const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__in = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_rack_reservation OAIWritableRackReservation [required]
    */
    virtual void dcimRackReservationsPartialUpdate(const qint32 &id, const OAIWritableRackReservation &oai_writable_rack_reservation);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRackReservationsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_rack_reservation OAIWritableRackReservation [required]
    */
    virtual void dcimRackReservationsUpdate(const qint32 &id, const OAIWritableRackReservation &oai_writable_rack_reservation);

    /**
    * @param[in]  oai_rack_role OAIRackRole [required]
    */
    virtual void dcimRackRolesCreate(const OAIRackRole &oai_rack_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRackRolesDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  color QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimRackRolesList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_rack_role OAIRackRole [required]
    */
    virtual void dcimRackRolesPartialUpdate(const qint32 &id, const OAIRackRole &oai_rack_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRackRolesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_rack_role OAIRackRole [required]
    */
    virtual void dcimRackRolesUpdate(const qint32 &id, const OAIRackRole &oai_rack_role);

    /**
    * @param[in]  oai_writable_rack OAIWritableRack [required]
    */
    virtual void dcimRacksCreate(const OAIWritableRack &oai_writable_rack);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRacksDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  width QString [optional]
    * @param[in]  u_height double [optional]
    * @param[in]  desc_units QString [optional]
    * @param[in]  id__in QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  facility_id QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  role_id QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimRacksList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &width = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &u_height = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &desc_units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__in = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_rack OAIWritableRack [required]
    */
    virtual void dcimRacksPartialUpdate(const qint32 &id, const OAIWritableRack &oai_writable_rack);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRacksRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRacksUnits(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_rack OAIWritableRack [required]
    */
    virtual void dcimRacksUpdate(const qint32 &id, const OAIWritableRack &oai_writable_rack);

    /**
    * @param[in]  oai_writable_region OAIWritableRegion [required]
    */
    virtual void dcimRegionsCreate(const OAIWritableRegion &oai_writable_region);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRegionsDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  parent QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimRegionsList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_region OAIWritableRegion [required]
    */
    virtual void dcimRegionsPartialUpdate(const qint32 &id, const OAIWritableRegion &oai_writable_region);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRegionsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_region OAIWritableRegion [required]
    */
    virtual void dcimRegionsUpdate(const qint32 &id, const OAIWritableRegion &oai_writable_region);

    /**
    * @param[in]  oai_writable_site OAIWritableSite [required]
    */
    virtual void dcimSitesCreate(const OAIWritableSite &oai_writable_site);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimSitesDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimSitesGraphs(const qint32 &id);

    /**
    * @param[in]  q QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  facility QString [optional]
    * @param[in]  asn double [optional]
    * @param[in]  contact_name QString [optional]
    * @param[in]  contact_phone QString [optional]
    * @param[in]  contact_email QString [optional]
    * @param[in]  id__in QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimSitesList(const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &asn = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &contact_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__in = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_site OAIWritableSite [required]
    */
    virtual void dcimSitesPartialUpdate(const qint32 &id, const OAIWritableSite &oai_writable_site);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimSitesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_site OAIWritableSite [required]
    */
    virtual void dcimSitesUpdate(const qint32 &id, const OAIWritableSite &oai_writable_site);

    /**
    * @param[in]  oai_writable_virtual_chassis OAIWritableVirtualChassis [required]
    */
    virtual void dcimVirtualChassisCreate(const OAIWritableVirtualChassis &oai_writable_virtual_chassis);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimVirtualChassisDelete(const qint32 &id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimVirtualChassisList(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_virtual_chassis OAIWritableVirtualChassis [required]
    */
    virtual void dcimVirtualChassisPartialUpdate(const qint32 &id, const OAIWritableVirtualChassis &oai_writable_virtual_chassis);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimVirtualChassisRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_virtual_chassis OAIWritableVirtualChassis [required]
    */
    virtual void dcimVirtualChassisUpdate(const qint32 &id, const OAIWritableVirtualChassis &oai_writable_virtual_chassis);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dcimChoicesListCallback(OAIHttpRequestWorker *worker);
    void dcimChoicesReadCallback(OAIHttpRequestWorker *worker);
    void dcimConnectedDeviceListCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleConnectionsListCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesListCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortsListCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortsReadCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesListCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsListCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsReadCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesListCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysCreateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysListCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysReadCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesListCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesReadCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesListCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesReadCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesListCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesNapalmCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesReadCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceConnectionsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceConnectionsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceConnectionsListCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceConnectionsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceConnectionsReadCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceConnectionsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesListCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesGraphsCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesListCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesReadCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsListCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsReadCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimManufacturersCreateCallback(OAIHttpRequestWorker *worker);
    void dcimManufacturersDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimManufacturersListCallback(OAIHttpRequestWorker *worker);
    void dcimManufacturersPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimManufacturersReadCallback(OAIHttpRequestWorker *worker);
    void dcimManufacturersUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPlatformsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimPlatformsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPlatformsListCallback(OAIHttpRequestWorker *worker);
    void dcimPlatformsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPlatformsReadCallback(OAIHttpRequestWorker *worker);
    void dcimPlatformsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerConnectionsListCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesListCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsListCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsReadCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesListCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortsListCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortsReadCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRackGroupsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimRackGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRackGroupsListCallback(OAIHttpRequestWorker *worker);
    void dcimRackGroupsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRackGroupsReadCallback(OAIHttpRequestWorker *worker);
    void dcimRackGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRackReservationsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimRackReservationsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRackReservationsListCallback(OAIHttpRequestWorker *worker);
    void dcimRackReservationsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRackReservationsReadCallback(OAIHttpRequestWorker *worker);
    void dcimRackReservationsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRackRolesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimRackRolesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRackRolesListCallback(OAIHttpRequestWorker *worker);
    void dcimRackRolesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRackRolesReadCallback(OAIHttpRequestWorker *worker);
    void dcimRackRolesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRacksCreateCallback(OAIHttpRequestWorker *worker);
    void dcimRacksDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRacksListCallback(OAIHttpRequestWorker *worker);
    void dcimRacksPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRacksReadCallback(OAIHttpRequestWorker *worker);
    void dcimRacksUnitsCallback(OAIHttpRequestWorker *worker);
    void dcimRacksUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRegionsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimRegionsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRegionsListCallback(OAIHttpRequestWorker *worker);
    void dcimRegionsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRegionsReadCallback(OAIHttpRequestWorker *worker);
    void dcimRegionsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimSitesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimSitesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimSitesGraphsCallback(OAIHttpRequestWorker *worker);
    void dcimSitesListCallback(OAIHttpRequestWorker *worker);
    void dcimSitesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimSitesReadCallback(OAIHttpRequestWorker *worker);
    void dcimSitesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisCreateCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisListCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisReadCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dcimChoicesListSignal();
    void dcimChoicesReadSignal();
    void dcimConnectedDeviceListSignal(OAIDevice summary);
    void dcimConsoleConnectionsListSignal(OAIDcim_console_connections_list_200_response summary);
    void dcimConsolePortTemplatesCreateSignal(OAIConsolePortTemplate summary);
    void dcimConsolePortTemplatesDeleteSignal();
    void dcimConsolePortTemplatesListSignal(OAIDcim_console_port_templates_list_200_response summary);
    void dcimConsolePortTemplatesPartialUpdateSignal(OAIConsolePortTemplate summary);
    void dcimConsolePortTemplatesReadSignal(OAIConsolePortTemplate summary);
    void dcimConsolePortTemplatesUpdateSignal(OAIConsolePortTemplate summary);
    void dcimConsolePortsCreateSignal(OAIConsolePort summary);
    void dcimConsolePortsDeleteSignal();
    void dcimConsolePortsListSignal(OAIDcim_console_connections_list_200_response summary);
    void dcimConsolePortsPartialUpdateSignal(OAIConsolePort summary);
    void dcimConsolePortsReadSignal(OAIConsolePort summary);
    void dcimConsolePortsUpdateSignal(OAIConsolePort summary);
    void dcimConsoleServerPortTemplatesCreateSignal(OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortTemplatesDeleteSignal();
    void dcimConsoleServerPortTemplatesListSignal(OAIDcim_console_server_port_templates_list_200_response summary);
    void dcimConsoleServerPortTemplatesPartialUpdateSignal(OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortTemplatesReadSignal(OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortTemplatesUpdateSignal(OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortsCreateSignal(OAIConsoleServerPort summary);
    void dcimConsoleServerPortsDeleteSignal();
    void dcimConsoleServerPortsListSignal(OAIDcim_console_server_ports_list_200_response summary);
    void dcimConsoleServerPortsPartialUpdateSignal(OAIConsoleServerPort summary);
    void dcimConsoleServerPortsReadSignal(OAIConsoleServerPort summary);
    void dcimConsoleServerPortsUpdateSignal(OAIConsoleServerPort summary);
    void dcimDeviceBayTemplatesCreateSignal(OAIDeviceBayTemplate summary);
    void dcimDeviceBayTemplatesDeleteSignal();
    void dcimDeviceBayTemplatesListSignal(OAIDcim_device_bay_templates_list_200_response summary);
    void dcimDeviceBayTemplatesPartialUpdateSignal(OAIDeviceBayTemplate summary);
    void dcimDeviceBayTemplatesReadSignal(OAIDeviceBayTemplate summary);
    void dcimDeviceBayTemplatesUpdateSignal(OAIDeviceBayTemplate summary);
    void dcimDeviceBaysCreateSignal(OAIDeviceBay summary);
    void dcimDeviceBaysDeleteSignal();
    void dcimDeviceBaysListSignal(OAIDcim_device_bays_list_200_response summary);
    void dcimDeviceBaysPartialUpdateSignal(OAIDeviceBay summary);
    void dcimDeviceBaysReadSignal(OAIDeviceBay summary);
    void dcimDeviceBaysUpdateSignal(OAIDeviceBay summary);
    void dcimDeviceRolesCreateSignal(OAIDeviceRole summary);
    void dcimDeviceRolesDeleteSignal();
    void dcimDeviceRolesListSignal(OAIDcim_device_roles_list_200_response summary);
    void dcimDeviceRolesPartialUpdateSignal(OAIDeviceRole summary);
    void dcimDeviceRolesReadSignal(OAIDeviceRole summary);
    void dcimDeviceRolesUpdateSignal(OAIDeviceRole summary);
    void dcimDeviceTypesCreateSignal(OAIDeviceType summary);
    void dcimDeviceTypesDeleteSignal();
    void dcimDeviceTypesListSignal(OAIDcim_device_types_list_200_response summary);
    void dcimDeviceTypesPartialUpdateSignal(OAIDeviceType summary);
    void dcimDeviceTypesReadSignal(OAIDeviceType summary);
    void dcimDeviceTypesUpdateSignal(OAIDeviceType summary);
    void dcimDevicesCreateSignal(OAIDevice summary);
    void dcimDevicesDeleteSignal();
    void dcimDevicesListSignal(OAIDcim_devices_list_200_response summary);
    void dcimDevicesNapalmSignal(OAIDevice summary);
    void dcimDevicesPartialUpdateSignal(OAIDevice summary);
    void dcimDevicesReadSignal(OAIDeviceWithConfigContext summary);
    void dcimDevicesUpdateSignal(OAIDevice summary);
    void dcimInterfaceConnectionsCreateSignal(OAIInterfaceConnection summary);
    void dcimInterfaceConnectionsDeleteSignal();
    void dcimInterfaceConnectionsListSignal(OAIDcim_interface_connections_list_200_response summary);
    void dcimInterfaceConnectionsPartialUpdateSignal(OAIInterfaceConnection summary);
    void dcimInterfaceConnectionsReadSignal(OAIInterfaceConnection summary);
    void dcimInterfaceConnectionsUpdateSignal(OAIInterfaceConnection summary);
    void dcimInterfaceTemplatesCreateSignal(OAIInterfaceTemplate summary);
    void dcimInterfaceTemplatesDeleteSignal();
    void dcimInterfaceTemplatesListSignal(OAIDcim_interface_templates_list_200_response summary);
    void dcimInterfaceTemplatesPartialUpdateSignal(OAIInterfaceTemplate summary);
    void dcimInterfaceTemplatesReadSignal(OAIInterfaceTemplate summary);
    void dcimInterfaceTemplatesUpdateSignal(OAIInterfaceTemplate summary);
    void dcimInterfacesCreateSignal(OAIInterface summary);
    void dcimInterfacesDeleteSignal();
    void dcimInterfacesGraphsSignal(OAIInterface summary);
    void dcimInterfacesListSignal(OAIDcim_interfaces_list_200_response summary);
    void dcimInterfacesPartialUpdateSignal(OAIInterface summary);
    void dcimInterfacesReadSignal(OAIInterface summary);
    void dcimInterfacesUpdateSignal(OAIInterface summary);
    void dcimInventoryItemsCreateSignal(OAIInventoryItem summary);
    void dcimInventoryItemsDeleteSignal();
    void dcimInventoryItemsListSignal(OAIDcim_inventory_items_list_200_response summary);
    void dcimInventoryItemsPartialUpdateSignal(OAIInventoryItem summary);
    void dcimInventoryItemsReadSignal(OAIInventoryItem summary);
    void dcimInventoryItemsUpdateSignal(OAIInventoryItem summary);
    void dcimManufacturersCreateSignal(OAIManufacturer summary);
    void dcimManufacturersDeleteSignal();
    void dcimManufacturersListSignal(OAIDcim_manufacturers_list_200_response summary);
    void dcimManufacturersPartialUpdateSignal(OAIManufacturer summary);
    void dcimManufacturersReadSignal(OAIManufacturer summary);
    void dcimManufacturersUpdateSignal(OAIManufacturer summary);
    void dcimPlatformsCreateSignal(OAIPlatform summary);
    void dcimPlatformsDeleteSignal();
    void dcimPlatformsListSignal(OAIDcim_platforms_list_200_response summary);
    void dcimPlatformsPartialUpdateSignal(OAIPlatform summary);
    void dcimPlatformsReadSignal(OAIPlatform summary);
    void dcimPlatformsUpdateSignal(OAIPlatform summary);
    void dcimPowerConnectionsListSignal(OAIDcim_power_connections_list_200_response summary);
    void dcimPowerOutletTemplatesCreateSignal(OAIPowerOutletTemplate summary);
    void dcimPowerOutletTemplatesDeleteSignal();
    void dcimPowerOutletTemplatesListSignal(OAIDcim_power_outlet_templates_list_200_response summary);
    void dcimPowerOutletTemplatesPartialUpdateSignal(OAIPowerOutletTemplate summary);
    void dcimPowerOutletTemplatesReadSignal(OAIPowerOutletTemplate summary);
    void dcimPowerOutletTemplatesUpdateSignal(OAIPowerOutletTemplate summary);
    void dcimPowerOutletsCreateSignal(OAIPowerOutlet summary);
    void dcimPowerOutletsDeleteSignal();
    void dcimPowerOutletsListSignal(OAIDcim_power_outlets_list_200_response summary);
    void dcimPowerOutletsPartialUpdateSignal(OAIPowerOutlet summary);
    void dcimPowerOutletsReadSignal(OAIPowerOutlet summary);
    void dcimPowerOutletsUpdateSignal(OAIPowerOutlet summary);
    void dcimPowerPortTemplatesCreateSignal(OAIPowerPortTemplate summary);
    void dcimPowerPortTemplatesDeleteSignal();
    void dcimPowerPortTemplatesListSignal(OAIDcim_power_port_templates_list_200_response summary);
    void dcimPowerPortTemplatesPartialUpdateSignal(OAIPowerPortTemplate summary);
    void dcimPowerPortTemplatesReadSignal(OAIPowerPortTemplate summary);
    void dcimPowerPortTemplatesUpdateSignal(OAIPowerPortTemplate summary);
    void dcimPowerPortsCreateSignal(OAIPowerPort summary);
    void dcimPowerPortsDeleteSignal();
    void dcimPowerPortsListSignal(OAIDcim_power_connections_list_200_response summary);
    void dcimPowerPortsPartialUpdateSignal(OAIPowerPort summary);
    void dcimPowerPortsReadSignal(OAIPowerPort summary);
    void dcimPowerPortsUpdateSignal(OAIPowerPort summary);
    void dcimRackGroupsCreateSignal(OAIRackGroup summary);
    void dcimRackGroupsDeleteSignal();
    void dcimRackGroupsListSignal(OAIDcim_rack_groups_list_200_response summary);
    void dcimRackGroupsPartialUpdateSignal(OAIRackGroup summary);
    void dcimRackGroupsReadSignal(OAIRackGroup summary);
    void dcimRackGroupsUpdateSignal(OAIRackGroup summary);
    void dcimRackReservationsCreateSignal(OAIRackReservation summary);
    void dcimRackReservationsDeleteSignal();
    void dcimRackReservationsListSignal(OAIDcim_rack_reservations_list_200_response summary);
    void dcimRackReservationsPartialUpdateSignal(OAIRackReservation summary);
    void dcimRackReservationsReadSignal(OAIRackReservation summary);
    void dcimRackReservationsUpdateSignal(OAIRackReservation summary);
    void dcimRackRolesCreateSignal(OAIRackRole summary);
    void dcimRackRolesDeleteSignal();
    void dcimRackRolesListSignal(OAIDcim_rack_roles_list_200_response summary);
    void dcimRackRolesPartialUpdateSignal(OAIRackRole summary);
    void dcimRackRolesReadSignal(OAIRackRole summary);
    void dcimRackRolesUpdateSignal(OAIRackRole summary);
    void dcimRacksCreateSignal(OAIRack summary);
    void dcimRacksDeleteSignal();
    void dcimRacksListSignal(OAIDcim_racks_list_200_response summary);
    void dcimRacksPartialUpdateSignal(OAIRack summary);
    void dcimRacksReadSignal(OAIRack summary);
    void dcimRacksUnitsSignal(OAIRack summary);
    void dcimRacksUpdateSignal(OAIRack summary);
    void dcimRegionsCreateSignal(OAIRegion summary);
    void dcimRegionsDeleteSignal();
    void dcimRegionsListSignal(OAIDcim_regions_list_200_response summary);
    void dcimRegionsPartialUpdateSignal(OAIRegion summary);
    void dcimRegionsReadSignal(OAIRegion summary);
    void dcimRegionsUpdateSignal(OAIRegion summary);
    void dcimSitesCreateSignal(OAISite summary);
    void dcimSitesDeleteSignal();
    void dcimSitesGraphsSignal(OAISite summary);
    void dcimSitesListSignal(OAIDcim_sites_list_200_response summary);
    void dcimSitesPartialUpdateSignal(OAISite summary);
    void dcimSitesReadSignal(OAISite summary);
    void dcimSitesUpdateSignal(OAISite summary);
    void dcimVirtualChassisCreateSignal(OAIVirtualChassis summary);
    void dcimVirtualChassisDeleteSignal();
    void dcimVirtualChassisListSignal(OAIDcim_virtual_chassis_list_200_response summary);
    void dcimVirtualChassisPartialUpdateSignal(OAIVirtualChassis summary);
    void dcimVirtualChassisReadSignal(OAIVirtualChassis summary);
    void dcimVirtualChassisUpdateSignal(OAIVirtualChassis summary);


    void dcimChoicesListSignalFull(OAIHttpRequestWorker *worker);
    void dcimChoicesReadSignalFull(OAIHttpRequestWorker *worker);
    void dcimConnectedDeviceListSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void dcimConsoleConnectionsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_console_connections_list_200_response summary);
    void dcimConsolePortTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIConsolePortTemplate summary);
    void dcimConsolePortTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_console_port_templates_list_200_response summary);
    void dcimConsolePortTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsolePortTemplate summary);
    void dcimConsolePortTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIConsolePortTemplate summary);
    void dcimConsolePortTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsolePortTemplate summary);
    void dcimConsolePortsCreateSignalFull(OAIHttpRequestWorker *worker, OAIConsolePort summary);
    void dcimConsolePortsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimConsolePortsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_console_connections_list_200_response summary);
    void dcimConsolePortsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsolePort summary);
    void dcimConsolePortsReadSignalFull(OAIHttpRequestWorker *worker, OAIConsolePort summary);
    void dcimConsolePortsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsolePort summary);
    void dcimConsoleServerPortTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_console_server_port_templates_list_200_response summary);
    void dcimConsoleServerPortTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortsCreateSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPort summary);
    void dcimConsoleServerPortsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_console_server_ports_list_200_response summary);
    void dcimConsoleServerPortsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPort summary);
    void dcimConsoleServerPortsReadSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPort summary);
    void dcimConsoleServerPortsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPort summary);
    void dcimDeviceBayTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBayTemplate summary);
    void dcimDeviceBayTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_device_bay_templates_list_200_response summary);
    void dcimDeviceBayTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBayTemplate summary);
    void dcimDeviceBayTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBayTemplate summary);
    void dcimDeviceBayTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBayTemplate summary);
    void dcimDeviceBaysCreateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBay summary);
    void dcimDeviceBaysDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_device_bays_list_200_response summary);
    void dcimDeviceBaysPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBay summary);
    void dcimDeviceBaysReadSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBay summary);
    void dcimDeviceBaysUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBay summary);
    void dcimDeviceRolesCreateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceRole summary);
    void dcimDeviceRolesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_device_roles_list_200_response summary);
    void dcimDeviceRolesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceRole summary);
    void dcimDeviceRolesReadSignalFull(OAIHttpRequestWorker *worker, OAIDeviceRole summary);
    void dcimDeviceRolesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceRole summary);
    void dcimDeviceTypesCreateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceType summary);
    void dcimDeviceTypesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_device_types_list_200_response summary);
    void dcimDeviceTypesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceType summary);
    void dcimDeviceTypesReadSignalFull(OAIHttpRequestWorker *worker, OAIDeviceType summary);
    void dcimDeviceTypesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceType summary);
    void dcimDevicesCreateSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void dcimDevicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimDevicesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_devices_list_200_response summary);
    void dcimDevicesNapalmSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void dcimDevicesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void dcimDevicesReadSignalFull(OAIHttpRequestWorker *worker, OAIDeviceWithConfigContext summary);
    void dcimDevicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void dcimInterfaceConnectionsCreateSignalFull(OAIHttpRequestWorker *worker, OAIInterfaceConnection summary);
    void dcimInterfaceConnectionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimInterfaceConnectionsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_interface_connections_list_200_response summary);
    void dcimInterfaceConnectionsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInterfaceConnection summary);
    void dcimInterfaceConnectionsReadSignalFull(OAIHttpRequestWorker *worker, OAIInterfaceConnection summary);
    void dcimInterfaceConnectionsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInterfaceConnection summary);
    void dcimInterfaceTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIInterfaceTemplate summary);
    void dcimInterfaceTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_interface_templates_list_200_response summary);
    void dcimInterfaceTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInterfaceTemplate summary);
    void dcimInterfaceTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIInterfaceTemplate summary);
    void dcimInterfaceTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInterfaceTemplate summary);
    void dcimInterfacesCreateSignalFull(OAIHttpRequestWorker *worker, OAIInterface summary);
    void dcimInterfacesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimInterfacesGraphsSignalFull(OAIHttpRequestWorker *worker, OAIInterface summary);
    void dcimInterfacesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_interfaces_list_200_response summary);
    void dcimInterfacesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInterface summary);
    void dcimInterfacesReadSignalFull(OAIHttpRequestWorker *worker, OAIInterface summary);
    void dcimInterfacesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInterface summary);
    void dcimInventoryItemsCreateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItem summary);
    void dcimInventoryItemsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_inventory_items_list_200_response summary);
    void dcimInventoryItemsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItem summary);
    void dcimInventoryItemsReadSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItem summary);
    void dcimInventoryItemsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItem summary);
    void dcimManufacturersCreateSignalFull(OAIHttpRequestWorker *worker, OAIManufacturer summary);
    void dcimManufacturersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimManufacturersListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_manufacturers_list_200_response summary);
    void dcimManufacturersPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManufacturer summary);
    void dcimManufacturersReadSignalFull(OAIHttpRequestWorker *worker, OAIManufacturer summary);
    void dcimManufacturersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManufacturer summary);
    void dcimPlatformsCreateSignalFull(OAIHttpRequestWorker *worker, OAIPlatform summary);
    void dcimPlatformsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPlatformsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_platforms_list_200_response summary);
    void dcimPlatformsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPlatform summary);
    void dcimPlatformsReadSignalFull(OAIHttpRequestWorker *worker, OAIPlatform summary);
    void dcimPlatformsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPlatform summary);
    void dcimPowerConnectionsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_power_connections_list_200_response summary);
    void dcimPowerOutletTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutletTemplate summary);
    void dcimPowerOutletTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_power_outlet_templates_list_200_response summary);
    void dcimPowerOutletTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutletTemplate summary);
    void dcimPowerOutletTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutletTemplate summary);
    void dcimPowerOutletTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutletTemplate summary);
    void dcimPowerOutletsCreateSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutlet summary);
    void dcimPowerOutletsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_power_outlets_list_200_response summary);
    void dcimPowerOutletsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutlet summary);
    void dcimPowerOutletsReadSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutlet summary);
    void dcimPowerOutletsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutlet summary);
    void dcimPowerPortTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPortTemplate summary);
    void dcimPowerPortTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_power_port_templates_list_200_response summary);
    void dcimPowerPortTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPortTemplate summary);
    void dcimPowerPortTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIPowerPortTemplate summary);
    void dcimPowerPortTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPortTemplate summary);
    void dcimPowerPortsCreateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPort summary);
    void dcimPowerPortsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPowerPortsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_power_connections_list_200_response summary);
    void dcimPowerPortsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPort summary);
    void dcimPowerPortsReadSignalFull(OAIHttpRequestWorker *worker, OAIPowerPort summary);
    void dcimPowerPortsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPort summary);
    void dcimRackGroupsCreateSignalFull(OAIHttpRequestWorker *worker, OAIRackGroup summary);
    void dcimRackGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRackGroupsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_rack_groups_list_200_response summary);
    void dcimRackGroupsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRackGroup summary);
    void dcimRackGroupsReadSignalFull(OAIHttpRequestWorker *worker, OAIRackGroup summary);
    void dcimRackGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRackGroup summary);
    void dcimRackReservationsCreateSignalFull(OAIHttpRequestWorker *worker, OAIRackReservation summary);
    void dcimRackReservationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRackReservationsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_rack_reservations_list_200_response summary);
    void dcimRackReservationsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRackReservation summary);
    void dcimRackReservationsReadSignalFull(OAIHttpRequestWorker *worker, OAIRackReservation summary);
    void dcimRackReservationsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRackReservation summary);
    void dcimRackRolesCreateSignalFull(OAIHttpRequestWorker *worker, OAIRackRole summary);
    void dcimRackRolesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRackRolesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_rack_roles_list_200_response summary);
    void dcimRackRolesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRackRole summary);
    void dcimRackRolesReadSignalFull(OAIHttpRequestWorker *worker, OAIRackRole summary);
    void dcimRackRolesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRackRole summary);
    void dcimRacksCreateSignalFull(OAIHttpRequestWorker *worker, OAIRack summary);
    void dcimRacksDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRacksListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_racks_list_200_response summary);
    void dcimRacksPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRack summary);
    void dcimRacksReadSignalFull(OAIHttpRequestWorker *worker, OAIRack summary);
    void dcimRacksUnitsSignalFull(OAIHttpRequestWorker *worker, OAIRack summary);
    void dcimRacksUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRack summary);
    void dcimRegionsCreateSignalFull(OAIHttpRequestWorker *worker, OAIRegion summary);
    void dcimRegionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRegionsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_regions_list_200_response summary);
    void dcimRegionsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRegion summary);
    void dcimRegionsReadSignalFull(OAIHttpRequestWorker *worker, OAIRegion summary);
    void dcimRegionsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRegion summary);
    void dcimSitesCreateSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void dcimSitesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimSitesGraphsSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void dcimSitesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_sites_list_200_response summary);
    void dcimSitesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void dcimSitesReadSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void dcimSitesUpdateSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void dcimVirtualChassisCreateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualChassis summary);
    void dcimVirtualChassisDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_virtual_chassis_list_200_response summary);
    void dcimVirtualChassisPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualChassis summary);
    void dcimVirtualChassisReadSignalFull(OAIHttpRequestWorker *worker, OAIVirtualChassis summary);
    void dcimVirtualChassisUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualChassis summary);

    Q_DECL_DEPRECATED_X("Use dcimChoicesListSignalError() instead")
    void dcimChoicesListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimChoicesListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimChoicesReadSignalError() instead")
    void dcimChoicesReadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimChoicesReadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConnectedDeviceListSignalError() instead")
    void dcimConnectedDeviceListSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConnectedDeviceListSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleConnectionsListSignalError() instead")
    void dcimConsoleConnectionsListSignalE(OAIDcim_console_connections_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleConnectionsListSignalError(OAIDcim_console_connections_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesCreateSignalError() instead")
    void dcimConsolePortTemplatesCreateSignalE(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesCreateSignalError(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesDeleteSignalError() instead")
    void dcimConsolePortTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesListSignalError() instead")
    void dcimConsolePortTemplatesListSignalE(OAIDcim_console_port_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesListSignalError(OAIDcim_console_port_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesPartialUpdateSignalError() instead")
    void dcimConsolePortTemplatesPartialUpdateSignalE(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesPartialUpdateSignalError(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesReadSignalError() instead")
    void dcimConsolePortTemplatesReadSignalE(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesReadSignalError(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesUpdateSignalError() instead")
    void dcimConsolePortTemplatesUpdateSignalE(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesUpdateSignalError(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsCreateSignalError() instead")
    void dcimConsolePortsCreateSignalE(OAIConsolePort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsCreateSignalError(OAIConsolePort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsDeleteSignalError() instead")
    void dcimConsolePortsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsListSignalError() instead")
    void dcimConsolePortsListSignalE(OAIDcim_console_connections_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsListSignalError(OAIDcim_console_connections_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsPartialUpdateSignalError() instead")
    void dcimConsolePortsPartialUpdateSignalE(OAIConsolePort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsPartialUpdateSignalError(OAIConsolePort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsReadSignalError() instead")
    void dcimConsolePortsReadSignalE(OAIConsolePort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsReadSignalError(OAIConsolePort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsUpdateSignalError() instead")
    void dcimConsolePortsUpdateSignalE(OAIConsolePort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsUpdateSignalError(OAIConsolePort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesCreateSignalError() instead")
    void dcimConsoleServerPortTemplatesCreateSignalE(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesCreateSignalError(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesDeleteSignalError() instead")
    void dcimConsoleServerPortTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesListSignalError() instead")
    void dcimConsoleServerPortTemplatesListSignalE(OAIDcim_console_server_port_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesListSignalError(OAIDcim_console_server_port_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesPartialUpdateSignalError() instead")
    void dcimConsoleServerPortTemplatesPartialUpdateSignalE(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesPartialUpdateSignalError(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesReadSignalError() instead")
    void dcimConsoleServerPortTemplatesReadSignalE(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesReadSignalError(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesUpdateSignalError() instead")
    void dcimConsoleServerPortTemplatesUpdateSignalE(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesUpdateSignalError(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsCreateSignalError() instead")
    void dcimConsoleServerPortsCreateSignalE(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsCreateSignalError(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsDeleteSignalError() instead")
    void dcimConsoleServerPortsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsListSignalError() instead")
    void dcimConsoleServerPortsListSignalE(OAIDcim_console_server_ports_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsListSignalError(OAIDcim_console_server_ports_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsPartialUpdateSignalError() instead")
    void dcimConsoleServerPortsPartialUpdateSignalE(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsPartialUpdateSignalError(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsReadSignalError() instead")
    void dcimConsoleServerPortsReadSignalE(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsReadSignalError(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsUpdateSignalError() instead")
    void dcimConsoleServerPortsUpdateSignalE(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsUpdateSignalError(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesCreateSignalError() instead")
    void dcimDeviceBayTemplatesCreateSignalE(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesCreateSignalError(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesDeleteSignalError() instead")
    void dcimDeviceBayTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesListSignalError() instead")
    void dcimDeviceBayTemplatesListSignalE(OAIDcim_device_bay_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesListSignalError(OAIDcim_device_bay_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesPartialUpdateSignalError() instead")
    void dcimDeviceBayTemplatesPartialUpdateSignalE(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesPartialUpdateSignalError(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesReadSignalError() instead")
    void dcimDeviceBayTemplatesReadSignalE(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesReadSignalError(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesUpdateSignalError() instead")
    void dcimDeviceBayTemplatesUpdateSignalE(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesUpdateSignalError(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysCreateSignalError() instead")
    void dcimDeviceBaysCreateSignalE(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysCreateSignalError(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysDeleteSignalError() instead")
    void dcimDeviceBaysDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysListSignalError() instead")
    void dcimDeviceBaysListSignalE(OAIDcim_device_bays_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysListSignalError(OAIDcim_device_bays_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysPartialUpdateSignalError() instead")
    void dcimDeviceBaysPartialUpdateSignalE(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysPartialUpdateSignalError(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysReadSignalError() instead")
    void dcimDeviceBaysReadSignalE(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysReadSignalError(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysUpdateSignalError() instead")
    void dcimDeviceBaysUpdateSignalE(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysUpdateSignalError(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesCreateSignalError() instead")
    void dcimDeviceRolesCreateSignalE(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesCreateSignalError(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesDeleteSignalError() instead")
    void dcimDeviceRolesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesListSignalError() instead")
    void dcimDeviceRolesListSignalE(OAIDcim_device_roles_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesListSignalError(OAIDcim_device_roles_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesPartialUpdateSignalError() instead")
    void dcimDeviceRolesPartialUpdateSignalE(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesPartialUpdateSignalError(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesReadSignalError() instead")
    void dcimDeviceRolesReadSignalE(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesReadSignalError(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesUpdateSignalError() instead")
    void dcimDeviceRolesUpdateSignalE(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesUpdateSignalError(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesCreateSignalError() instead")
    void dcimDeviceTypesCreateSignalE(OAIDeviceType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesCreateSignalError(OAIDeviceType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesDeleteSignalError() instead")
    void dcimDeviceTypesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesListSignalError() instead")
    void dcimDeviceTypesListSignalE(OAIDcim_device_types_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesListSignalError(OAIDcim_device_types_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesPartialUpdateSignalError() instead")
    void dcimDeviceTypesPartialUpdateSignalE(OAIDeviceType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesPartialUpdateSignalError(OAIDeviceType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesReadSignalError() instead")
    void dcimDeviceTypesReadSignalE(OAIDeviceType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesReadSignalError(OAIDeviceType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesUpdateSignalError() instead")
    void dcimDeviceTypesUpdateSignalE(OAIDeviceType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesUpdateSignalError(OAIDeviceType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesCreateSignalError() instead")
    void dcimDevicesCreateSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesCreateSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesDeleteSignalError() instead")
    void dcimDevicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesListSignalError() instead")
    void dcimDevicesListSignalE(OAIDcim_devices_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesListSignalError(OAIDcim_devices_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesNapalmSignalError() instead")
    void dcimDevicesNapalmSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesNapalmSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesPartialUpdateSignalError() instead")
    void dcimDevicesPartialUpdateSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesPartialUpdateSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesReadSignalError() instead")
    void dcimDevicesReadSignalE(OAIDeviceWithConfigContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesReadSignalError(OAIDeviceWithConfigContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesUpdateSignalError() instead")
    void dcimDevicesUpdateSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesUpdateSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceConnectionsCreateSignalError() instead")
    void dcimInterfaceConnectionsCreateSignalE(OAIInterfaceConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceConnectionsCreateSignalError(OAIInterfaceConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceConnectionsDeleteSignalError() instead")
    void dcimInterfaceConnectionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceConnectionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceConnectionsListSignalError() instead")
    void dcimInterfaceConnectionsListSignalE(OAIDcim_interface_connections_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceConnectionsListSignalError(OAIDcim_interface_connections_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceConnectionsPartialUpdateSignalError() instead")
    void dcimInterfaceConnectionsPartialUpdateSignalE(OAIInterfaceConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceConnectionsPartialUpdateSignalError(OAIInterfaceConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceConnectionsReadSignalError() instead")
    void dcimInterfaceConnectionsReadSignalE(OAIInterfaceConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceConnectionsReadSignalError(OAIInterfaceConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceConnectionsUpdateSignalError() instead")
    void dcimInterfaceConnectionsUpdateSignalE(OAIInterfaceConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceConnectionsUpdateSignalError(OAIInterfaceConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesCreateSignalError() instead")
    void dcimInterfaceTemplatesCreateSignalE(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesCreateSignalError(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesDeleteSignalError() instead")
    void dcimInterfaceTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesListSignalError() instead")
    void dcimInterfaceTemplatesListSignalE(OAIDcim_interface_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesListSignalError(OAIDcim_interface_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesPartialUpdateSignalError() instead")
    void dcimInterfaceTemplatesPartialUpdateSignalE(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesPartialUpdateSignalError(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesReadSignalError() instead")
    void dcimInterfaceTemplatesReadSignalE(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesReadSignalError(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesUpdateSignalError() instead")
    void dcimInterfaceTemplatesUpdateSignalE(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesUpdateSignalError(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesCreateSignalError() instead")
    void dcimInterfacesCreateSignalE(OAIInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesCreateSignalError(OAIInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesDeleteSignalError() instead")
    void dcimInterfacesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesGraphsSignalError() instead")
    void dcimInterfacesGraphsSignalE(OAIInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesGraphsSignalError(OAIInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesListSignalError() instead")
    void dcimInterfacesListSignalE(OAIDcim_interfaces_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesListSignalError(OAIDcim_interfaces_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesPartialUpdateSignalError() instead")
    void dcimInterfacesPartialUpdateSignalE(OAIInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesPartialUpdateSignalError(OAIInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesReadSignalError() instead")
    void dcimInterfacesReadSignalE(OAIInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesReadSignalError(OAIInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesUpdateSignalError() instead")
    void dcimInterfacesUpdateSignalE(OAIInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesUpdateSignalError(OAIInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsCreateSignalError() instead")
    void dcimInventoryItemsCreateSignalE(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsCreateSignalError(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsDeleteSignalError() instead")
    void dcimInventoryItemsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsListSignalError() instead")
    void dcimInventoryItemsListSignalE(OAIDcim_inventory_items_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsListSignalError(OAIDcim_inventory_items_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsPartialUpdateSignalError() instead")
    void dcimInventoryItemsPartialUpdateSignalE(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsPartialUpdateSignalError(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsReadSignalError() instead")
    void dcimInventoryItemsReadSignalE(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsReadSignalError(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsUpdateSignalError() instead")
    void dcimInventoryItemsUpdateSignalE(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsUpdateSignalError(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersCreateSignalError() instead")
    void dcimManufacturersCreateSignalE(OAIManufacturer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersCreateSignalError(OAIManufacturer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersDeleteSignalError() instead")
    void dcimManufacturersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersListSignalError() instead")
    void dcimManufacturersListSignalE(OAIDcim_manufacturers_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersListSignalError(OAIDcim_manufacturers_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersPartialUpdateSignalError() instead")
    void dcimManufacturersPartialUpdateSignalE(OAIManufacturer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersPartialUpdateSignalError(OAIManufacturer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersReadSignalError() instead")
    void dcimManufacturersReadSignalE(OAIManufacturer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersReadSignalError(OAIManufacturer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersUpdateSignalError() instead")
    void dcimManufacturersUpdateSignalE(OAIManufacturer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersUpdateSignalError(OAIManufacturer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsCreateSignalError() instead")
    void dcimPlatformsCreateSignalE(OAIPlatform summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsCreateSignalError(OAIPlatform summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsDeleteSignalError() instead")
    void dcimPlatformsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsListSignalError() instead")
    void dcimPlatformsListSignalE(OAIDcim_platforms_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsListSignalError(OAIDcim_platforms_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsPartialUpdateSignalError() instead")
    void dcimPlatformsPartialUpdateSignalE(OAIPlatform summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsPartialUpdateSignalError(OAIPlatform summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsReadSignalError() instead")
    void dcimPlatformsReadSignalE(OAIPlatform summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsReadSignalError(OAIPlatform summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsUpdateSignalError() instead")
    void dcimPlatformsUpdateSignalE(OAIPlatform summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsUpdateSignalError(OAIPlatform summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerConnectionsListSignalError() instead")
    void dcimPowerConnectionsListSignalE(OAIDcim_power_connections_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerConnectionsListSignalError(OAIDcim_power_connections_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesCreateSignalError() instead")
    void dcimPowerOutletTemplatesCreateSignalE(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesCreateSignalError(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesDeleteSignalError() instead")
    void dcimPowerOutletTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesListSignalError() instead")
    void dcimPowerOutletTemplatesListSignalE(OAIDcim_power_outlet_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesListSignalError(OAIDcim_power_outlet_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesPartialUpdateSignalError() instead")
    void dcimPowerOutletTemplatesPartialUpdateSignalE(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesPartialUpdateSignalError(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesReadSignalError() instead")
    void dcimPowerOutletTemplatesReadSignalE(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesReadSignalError(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesUpdateSignalError() instead")
    void dcimPowerOutletTemplatesUpdateSignalE(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesUpdateSignalError(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsCreateSignalError() instead")
    void dcimPowerOutletsCreateSignalE(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsCreateSignalError(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsDeleteSignalError() instead")
    void dcimPowerOutletsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsListSignalError() instead")
    void dcimPowerOutletsListSignalE(OAIDcim_power_outlets_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsListSignalError(OAIDcim_power_outlets_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsPartialUpdateSignalError() instead")
    void dcimPowerOutletsPartialUpdateSignalE(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsPartialUpdateSignalError(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsReadSignalError() instead")
    void dcimPowerOutletsReadSignalE(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsReadSignalError(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsUpdateSignalError() instead")
    void dcimPowerOutletsUpdateSignalE(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsUpdateSignalError(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesCreateSignalError() instead")
    void dcimPowerPortTemplatesCreateSignalE(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesCreateSignalError(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesDeleteSignalError() instead")
    void dcimPowerPortTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesListSignalError() instead")
    void dcimPowerPortTemplatesListSignalE(OAIDcim_power_port_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesListSignalError(OAIDcim_power_port_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesPartialUpdateSignalError() instead")
    void dcimPowerPortTemplatesPartialUpdateSignalE(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesPartialUpdateSignalError(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesReadSignalError() instead")
    void dcimPowerPortTemplatesReadSignalE(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesReadSignalError(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesUpdateSignalError() instead")
    void dcimPowerPortTemplatesUpdateSignalE(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesUpdateSignalError(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsCreateSignalError() instead")
    void dcimPowerPortsCreateSignalE(OAIPowerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsCreateSignalError(OAIPowerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsDeleteSignalError() instead")
    void dcimPowerPortsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsListSignalError() instead")
    void dcimPowerPortsListSignalE(OAIDcim_power_connections_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsListSignalError(OAIDcim_power_connections_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsPartialUpdateSignalError() instead")
    void dcimPowerPortsPartialUpdateSignalE(OAIPowerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsPartialUpdateSignalError(OAIPowerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsReadSignalError() instead")
    void dcimPowerPortsReadSignalE(OAIPowerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsReadSignalError(OAIPowerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsUpdateSignalError() instead")
    void dcimPowerPortsUpdateSignalE(OAIPowerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsUpdateSignalError(OAIPowerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackGroupsCreateSignalError() instead")
    void dcimRackGroupsCreateSignalE(OAIRackGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackGroupsCreateSignalError(OAIRackGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackGroupsDeleteSignalError() instead")
    void dcimRackGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackGroupsListSignalError() instead")
    void dcimRackGroupsListSignalE(OAIDcim_rack_groups_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackGroupsListSignalError(OAIDcim_rack_groups_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackGroupsPartialUpdateSignalError() instead")
    void dcimRackGroupsPartialUpdateSignalE(OAIRackGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackGroupsPartialUpdateSignalError(OAIRackGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackGroupsReadSignalError() instead")
    void dcimRackGroupsReadSignalE(OAIRackGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackGroupsReadSignalError(OAIRackGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackGroupsUpdateSignalError() instead")
    void dcimRackGroupsUpdateSignalE(OAIRackGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackGroupsUpdateSignalError(OAIRackGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsCreateSignalError() instead")
    void dcimRackReservationsCreateSignalE(OAIRackReservation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsCreateSignalError(OAIRackReservation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsDeleteSignalError() instead")
    void dcimRackReservationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsListSignalError() instead")
    void dcimRackReservationsListSignalE(OAIDcim_rack_reservations_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsListSignalError(OAIDcim_rack_reservations_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsPartialUpdateSignalError() instead")
    void dcimRackReservationsPartialUpdateSignalE(OAIRackReservation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsPartialUpdateSignalError(OAIRackReservation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsReadSignalError() instead")
    void dcimRackReservationsReadSignalE(OAIRackReservation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsReadSignalError(OAIRackReservation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsUpdateSignalError() instead")
    void dcimRackReservationsUpdateSignalE(OAIRackReservation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsUpdateSignalError(OAIRackReservation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesCreateSignalError() instead")
    void dcimRackRolesCreateSignalE(OAIRackRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesCreateSignalError(OAIRackRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesDeleteSignalError() instead")
    void dcimRackRolesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesListSignalError() instead")
    void dcimRackRolesListSignalE(OAIDcim_rack_roles_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesListSignalError(OAIDcim_rack_roles_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesPartialUpdateSignalError() instead")
    void dcimRackRolesPartialUpdateSignalE(OAIRackRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesPartialUpdateSignalError(OAIRackRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesReadSignalError() instead")
    void dcimRackRolesReadSignalE(OAIRackRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesReadSignalError(OAIRackRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesUpdateSignalError() instead")
    void dcimRackRolesUpdateSignalE(OAIRackRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesUpdateSignalError(OAIRackRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksCreateSignalError() instead")
    void dcimRacksCreateSignalE(OAIRack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksCreateSignalError(OAIRack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksDeleteSignalError() instead")
    void dcimRacksDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksListSignalError() instead")
    void dcimRacksListSignalE(OAIDcim_racks_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksListSignalError(OAIDcim_racks_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksPartialUpdateSignalError() instead")
    void dcimRacksPartialUpdateSignalE(OAIRack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksPartialUpdateSignalError(OAIRack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksReadSignalError() instead")
    void dcimRacksReadSignalE(OAIRack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksReadSignalError(OAIRack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksUnitsSignalError() instead")
    void dcimRacksUnitsSignalE(OAIRack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksUnitsSignalError(OAIRack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksUpdateSignalError() instead")
    void dcimRacksUpdateSignalE(OAIRack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksUpdateSignalError(OAIRack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsCreateSignalError() instead")
    void dcimRegionsCreateSignalE(OAIRegion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsCreateSignalError(OAIRegion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsDeleteSignalError() instead")
    void dcimRegionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsListSignalError() instead")
    void dcimRegionsListSignalE(OAIDcim_regions_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsListSignalError(OAIDcim_regions_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsPartialUpdateSignalError() instead")
    void dcimRegionsPartialUpdateSignalE(OAIRegion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsPartialUpdateSignalError(OAIRegion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsReadSignalError() instead")
    void dcimRegionsReadSignalE(OAIRegion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsReadSignalError(OAIRegion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsUpdateSignalError() instead")
    void dcimRegionsUpdateSignalE(OAIRegion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsUpdateSignalError(OAIRegion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesCreateSignalError() instead")
    void dcimSitesCreateSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesCreateSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesDeleteSignalError() instead")
    void dcimSitesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesGraphsSignalError() instead")
    void dcimSitesGraphsSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesGraphsSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesListSignalError() instead")
    void dcimSitesListSignalE(OAIDcim_sites_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesListSignalError(OAIDcim_sites_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesPartialUpdateSignalError() instead")
    void dcimSitesPartialUpdateSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesPartialUpdateSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesReadSignalError() instead")
    void dcimSitesReadSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesReadSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesUpdateSignalError() instead")
    void dcimSitesUpdateSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesUpdateSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisCreateSignalError() instead")
    void dcimVirtualChassisCreateSignalE(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisCreateSignalError(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisDeleteSignalError() instead")
    void dcimVirtualChassisDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisListSignalError() instead")
    void dcimVirtualChassisListSignalE(OAIDcim_virtual_chassis_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisListSignalError(OAIDcim_virtual_chassis_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisPartialUpdateSignalError() instead")
    void dcimVirtualChassisPartialUpdateSignalE(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisPartialUpdateSignalError(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisReadSignalError() instead")
    void dcimVirtualChassisReadSignalE(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisReadSignalError(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisUpdateSignalError() instead")
    void dcimVirtualChassisUpdateSignalE(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisUpdateSignalError(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dcimChoicesListSignalErrorFull() instead")
    void dcimChoicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimChoicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimChoicesReadSignalErrorFull() instead")
    void dcimChoicesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimChoicesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConnectedDeviceListSignalErrorFull() instead")
    void dcimConnectedDeviceListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConnectedDeviceListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleConnectionsListSignalErrorFull() instead")
    void dcimConsoleConnectionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleConnectionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesCreateSignalErrorFull() instead")
    void dcimConsolePortTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesDeleteSignalErrorFull() instead")
    void dcimConsolePortTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesListSignalErrorFull() instead")
    void dcimConsolePortTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesPartialUpdateSignalErrorFull() instead")
    void dcimConsolePortTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesReadSignalErrorFull() instead")
    void dcimConsolePortTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesUpdateSignalErrorFull() instead")
    void dcimConsolePortTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsCreateSignalErrorFull() instead")
    void dcimConsolePortsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsDeleteSignalErrorFull() instead")
    void dcimConsolePortsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsListSignalErrorFull() instead")
    void dcimConsolePortsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsPartialUpdateSignalErrorFull() instead")
    void dcimConsolePortsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsReadSignalErrorFull() instead")
    void dcimConsolePortsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsUpdateSignalErrorFull() instead")
    void dcimConsolePortsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesCreateSignalErrorFull() instead")
    void dcimConsoleServerPortTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesDeleteSignalErrorFull() instead")
    void dcimConsoleServerPortTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesListSignalErrorFull() instead")
    void dcimConsoleServerPortTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesPartialUpdateSignalErrorFull() instead")
    void dcimConsoleServerPortTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesReadSignalErrorFull() instead")
    void dcimConsoleServerPortTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesUpdateSignalErrorFull() instead")
    void dcimConsoleServerPortTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsCreateSignalErrorFull() instead")
    void dcimConsoleServerPortsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsDeleteSignalErrorFull() instead")
    void dcimConsoleServerPortsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsListSignalErrorFull() instead")
    void dcimConsoleServerPortsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsPartialUpdateSignalErrorFull() instead")
    void dcimConsoleServerPortsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsReadSignalErrorFull() instead")
    void dcimConsoleServerPortsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsUpdateSignalErrorFull() instead")
    void dcimConsoleServerPortsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesCreateSignalErrorFull() instead")
    void dcimDeviceBayTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesDeleteSignalErrorFull() instead")
    void dcimDeviceBayTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesListSignalErrorFull() instead")
    void dcimDeviceBayTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesPartialUpdateSignalErrorFull() instead")
    void dcimDeviceBayTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesReadSignalErrorFull() instead")
    void dcimDeviceBayTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesUpdateSignalErrorFull() instead")
    void dcimDeviceBayTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysCreateSignalErrorFull() instead")
    void dcimDeviceBaysCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysDeleteSignalErrorFull() instead")
    void dcimDeviceBaysDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysListSignalErrorFull() instead")
    void dcimDeviceBaysListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysPartialUpdateSignalErrorFull() instead")
    void dcimDeviceBaysPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysReadSignalErrorFull() instead")
    void dcimDeviceBaysReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysUpdateSignalErrorFull() instead")
    void dcimDeviceBaysUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesCreateSignalErrorFull() instead")
    void dcimDeviceRolesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesDeleteSignalErrorFull() instead")
    void dcimDeviceRolesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesListSignalErrorFull() instead")
    void dcimDeviceRolesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesPartialUpdateSignalErrorFull() instead")
    void dcimDeviceRolesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesReadSignalErrorFull() instead")
    void dcimDeviceRolesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesUpdateSignalErrorFull() instead")
    void dcimDeviceRolesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesCreateSignalErrorFull() instead")
    void dcimDeviceTypesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesDeleteSignalErrorFull() instead")
    void dcimDeviceTypesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesListSignalErrorFull() instead")
    void dcimDeviceTypesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesPartialUpdateSignalErrorFull() instead")
    void dcimDeviceTypesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesReadSignalErrorFull() instead")
    void dcimDeviceTypesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesUpdateSignalErrorFull() instead")
    void dcimDeviceTypesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesCreateSignalErrorFull() instead")
    void dcimDevicesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesDeleteSignalErrorFull() instead")
    void dcimDevicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesListSignalErrorFull() instead")
    void dcimDevicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesNapalmSignalErrorFull() instead")
    void dcimDevicesNapalmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesNapalmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesPartialUpdateSignalErrorFull() instead")
    void dcimDevicesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesReadSignalErrorFull() instead")
    void dcimDevicesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesUpdateSignalErrorFull() instead")
    void dcimDevicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceConnectionsCreateSignalErrorFull() instead")
    void dcimInterfaceConnectionsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceConnectionsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceConnectionsDeleteSignalErrorFull() instead")
    void dcimInterfaceConnectionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceConnectionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceConnectionsListSignalErrorFull() instead")
    void dcimInterfaceConnectionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceConnectionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceConnectionsPartialUpdateSignalErrorFull() instead")
    void dcimInterfaceConnectionsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceConnectionsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceConnectionsReadSignalErrorFull() instead")
    void dcimInterfaceConnectionsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceConnectionsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceConnectionsUpdateSignalErrorFull() instead")
    void dcimInterfaceConnectionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceConnectionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesCreateSignalErrorFull() instead")
    void dcimInterfaceTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesDeleteSignalErrorFull() instead")
    void dcimInterfaceTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesListSignalErrorFull() instead")
    void dcimInterfaceTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesPartialUpdateSignalErrorFull() instead")
    void dcimInterfaceTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesReadSignalErrorFull() instead")
    void dcimInterfaceTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesUpdateSignalErrorFull() instead")
    void dcimInterfaceTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesCreateSignalErrorFull() instead")
    void dcimInterfacesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesDeleteSignalErrorFull() instead")
    void dcimInterfacesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesGraphsSignalErrorFull() instead")
    void dcimInterfacesGraphsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesGraphsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesListSignalErrorFull() instead")
    void dcimInterfacesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesPartialUpdateSignalErrorFull() instead")
    void dcimInterfacesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesReadSignalErrorFull() instead")
    void dcimInterfacesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesUpdateSignalErrorFull() instead")
    void dcimInterfacesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsCreateSignalErrorFull() instead")
    void dcimInventoryItemsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsDeleteSignalErrorFull() instead")
    void dcimInventoryItemsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsListSignalErrorFull() instead")
    void dcimInventoryItemsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsPartialUpdateSignalErrorFull() instead")
    void dcimInventoryItemsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsReadSignalErrorFull() instead")
    void dcimInventoryItemsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsUpdateSignalErrorFull() instead")
    void dcimInventoryItemsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersCreateSignalErrorFull() instead")
    void dcimManufacturersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersDeleteSignalErrorFull() instead")
    void dcimManufacturersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersListSignalErrorFull() instead")
    void dcimManufacturersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersPartialUpdateSignalErrorFull() instead")
    void dcimManufacturersPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersReadSignalErrorFull() instead")
    void dcimManufacturersReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersUpdateSignalErrorFull() instead")
    void dcimManufacturersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsCreateSignalErrorFull() instead")
    void dcimPlatformsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsDeleteSignalErrorFull() instead")
    void dcimPlatformsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsListSignalErrorFull() instead")
    void dcimPlatformsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsPartialUpdateSignalErrorFull() instead")
    void dcimPlatformsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsReadSignalErrorFull() instead")
    void dcimPlatformsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsUpdateSignalErrorFull() instead")
    void dcimPlatformsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerConnectionsListSignalErrorFull() instead")
    void dcimPowerConnectionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerConnectionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesCreateSignalErrorFull() instead")
    void dcimPowerOutletTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesDeleteSignalErrorFull() instead")
    void dcimPowerOutletTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesListSignalErrorFull() instead")
    void dcimPowerOutletTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesPartialUpdateSignalErrorFull() instead")
    void dcimPowerOutletTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesReadSignalErrorFull() instead")
    void dcimPowerOutletTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesUpdateSignalErrorFull() instead")
    void dcimPowerOutletTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsCreateSignalErrorFull() instead")
    void dcimPowerOutletsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsDeleteSignalErrorFull() instead")
    void dcimPowerOutletsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsListSignalErrorFull() instead")
    void dcimPowerOutletsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsPartialUpdateSignalErrorFull() instead")
    void dcimPowerOutletsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsReadSignalErrorFull() instead")
    void dcimPowerOutletsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsUpdateSignalErrorFull() instead")
    void dcimPowerOutletsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesCreateSignalErrorFull() instead")
    void dcimPowerPortTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesDeleteSignalErrorFull() instead")
    void dcimPowerPortTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesListSignalErrorFull() instead")
    void dcimPowerPortTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesPartialUpdateSignalErrorFull() instead")
    void dcimPowerPortTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesReadSignalErrorFull() instead")
    void dcimPowerPortTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesUpdateSignalErrorFull() instead")
    void dcimPowerPortTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsCreateSignalErrorFull() instead")
    void dcimPowerPortsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsDeleteSignalErrorFull() instead")
    void dcimPowerPortsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsListSignalErrorFull() instead")
    void dcimPowerPortsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsPartialUpdateSignalErrorFull() instead")
    void dcimPowerPortsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsReadSignalErrorFull() instead")
    void dcimPowerPortsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsUpdateSignalErrorFull() instead")
    void dcimPowerPortsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackGroupsCreateSignalErrorFull() instead")
    void dcimRackGroupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackGroupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackGroupsDeleteSignalErrorFull() instead")
    void dcimRackGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackGroupsListSignalErrorFull() instead")
    void dcimRackGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackGroupsPartialUpdateSignalErrorFull() instead")
    void dcimRackGroupsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackGroupsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackGroupsReadSignalErrorFull() instead")
    void dcimRackGroupsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackGroupsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackGroupsUpdateSignalErrorFull() instead")
    void dcimRackGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsCreateSignalErrorFull() instead")
    void dcimRackReservationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsDeleteSignalErrorFull() instead")
    void dcimRackReservationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsListSignalErrorFull() instead")
    void dcimRackReservationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsPartialUpdateSignalErrorFull() instead")
    void dcimRackReservationsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsReadSignalErrorFull() instead")
    void dcimRackReservationsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsUpdateSignalErrorFull() instead")
    void dcimRackReservationsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesCreateSignalErrorFull() instead")
    void dcimRackRolesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesDeleteSignalErrorFull() instead")
    void dcimRackRolesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesListSignalErrorFull() instead")
    void dcimRackRolesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesPartialUpdateSignalErrorFull() instead")
    void dcimRackRolesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesReadSignalErrorFull() instead")
    void dcimRackRolesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesUpdateSignalErrorFull() instead")
    void dcimRackRolesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksCreateSignalErrorFull() instead")
    void dcimRacksCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksDeleteSignalErrorFull() instead")
    void dcimRacksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksListSignalErrorFull() instead")
    void dcimRacksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksPartialUpdateSignalErrorFull() instead")
    void dcimRacksPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksReadSignalErrorFull() instead")
    void dcimRacksReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksUnitsSignalErrorFull() instead")
    void dcimRacksUnitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksUnitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksUpdateSignalErrorFull() instead")
    void dcimRacksUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsCreateSignalErrorFull() instead")
    void dcimRegionsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsDeleteSignalErrorFull() instead")
    void dcimRegionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsListSignalErrorFull() instead")
    void dcimRegionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsPartialUpdateSignalErrorFull() instead")
    void dcimRegionsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsReadSignalErrorFull() instead")
    void dcimRegionsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsUpdateSignalErrorFull() instead")
    void dcimRegionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesCreateSignalErrorFull() instead")
    void dcimSitesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesDeleteSignalErrorFull() instead")
    void dcimSitesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesGraphsSignalErrorFull() instead")
    void dcimSitesGraphsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesGraphsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesListSignalErrorFull() instead")
    void dcimSitesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesPartialUpdateSignalErrorFull() instead")
    void dcimSitesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesReadSignalErrorFull() instead")
    void dcimSitesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesUpdateSignalErrorFull() instead")
    void dcimSitesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisCreateSignalErrorFull() instead")
    void dcimVirtualChassisCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisDeleteSignalErrorFull() instead")
    void dcimVirtualChassisDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisListSignalErrorFull() instead")
    void dcimVirtualChassisListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisPartialUpdateSignalErrorFull() instead")
    void dcimVirtualChassisPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisReadSignalErrorFull() instead")
    void dcimVirtualChassisReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisUpdateSignalErrorFull() instead")
    void dcimVirtualChassisUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
