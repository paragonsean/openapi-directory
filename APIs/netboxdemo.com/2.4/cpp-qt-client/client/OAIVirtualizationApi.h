/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualizationApi_H
#define OAI_OAIVirtualizationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICluster.h"
#include "OAIClusterGroup.h"
#include "OAIClusterType.h"
#include "OAIDcim_interfaces_list_200_response.h"
#include "OAIInterface.h"
#include "OAIVirtualMachine.h"
#include "OAIVirtualMachineWithConfigContext.h"
#include "OAIVirtualization_cluster_groups_list_200_response.h"
#include "OAIVirtualization_cluster_types_list_200_response.h"
#include "OAIVirtualization_clusters_list_200_response.h"
#include "OAIVirtualization_virtual_machines_list_200_response.h"
#include "OAIWritableCluster.h"
#include "OAIWritableInterface.h"
#include "OAIWritableVirtualMachine.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualizationApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualizationApi(const int timeOut = 0);
    ~OAIVirtualizationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void virtualizationChoicesList();

    /**
    * @param[in]  id QString [required]
    */
    virtual void virtualizationChoicesRead(const QString &id);

    /**
    * @param[in]  oai_cluster_group OAIClusterGroup [required]
    */
    virtual void virtualizationClusterGroupsCreate(const OAIClusterGroup &oai_cluster_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationClusterGroupsDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void virtualizationClusterGroupsList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_cluster_group OAIClusterGroup [required]
    */
    virtual void virtualizationClusterGroupsPartialUpdate(const qint32 &id, const OAIClusterGroup &oai_cluster_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationClusterGroupsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_cluster_group OAIClusterGroup [required]
    */
    virtual void virtualizationClusterGroupsUpdate(const qint32 &id, const OAIClusterGroup &oai_cluster_group);

    /**
    * @param[in]  oai_cluster_type OAIClusterType [required]
    */
    virtual void virtualizationClusterTypesCreate(const OAIClusterType &oai_cluster_type);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationClusterTypesDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void virtualizationClusterTypesList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_cluster_type OAIClusterType [required]
    */
    virtual void virtualizationClusterTypesPartialUpdate(const qint32 &id, const OAIClusterType &oai_cluster_type);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationClusterTypesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_cluster_type OAIClusterType [required]
    */
    virtual void virtualizationClusterTypesUpdate(const qint32 &id, const OAIClusterType &oai_cluster_type);

    /**
    * @param[in]  oai_writable_cluster OAIWritableCluster [required]
    */
    virtual void virtualizationClustersCreate(const OAIWritableCluster &oai_writable_cluster);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationClustersDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  id__in QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  type_id QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void virtualizationClustersList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__in = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_cluster OAIWritableCluster [required]
    */
    virtual void virtualizationClustersPartialUpdate(const qint32 &id, const OAIWritableCluster &oai_writable_cluster);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationClustersRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_cluster OAIWritableCluster [required]
    */
    virtual void virtualizationClustersUpdate(const qint32 &id, const OAIWritableCluster &oai_writable_cluster);

    /**
    * @param[in]  oai_writable_interface OAIWritableInterface [required]
    */
    virtual void virtualizationInterfacesCreate(const OAIWritableInterface &oai_writable_interface);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationInterfacesDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  enabled QString [optional]
    * @param[in]  mtu double [optional]
    * @param[in]  virtual_machine_id QString [optional]
    * @param[in]  virtual_machine QString [optional]
    * @param[in]  mac_address QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void virtualizationInterfacesList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &enabled = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &mtu = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_interface OAIWritableInterface [required]
    */
    virtual void virtualizationInterfacesPartialUpdate(const qint32 &id, const OAIWritableInterface &oai_writable_interface);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationInterfacesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_interface OAIWritableInterface [required]
    */
    virtual void virtualizationInterfacesUpdate(const qint32 &id, const OAIWritableInterface &oai_writable_interface);

    /**
    * @param[in]  oai_writable_virtual_machine OAIWritableVirtualMachine [required]
    */
    virtual void virtualizationVirtualMachinesCreate(const OAIWritableVirtualMachine &oai_writable_virtual_machine);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationVirtualMachinesDelete(const qint32 &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  id__in QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  cluster_group_id QString [optional]
    * @param[in]  cluster_group QString [optional]
    * @param[in]  cluster_type_id QString [optional]
    * @param[in]  cluster_type QString [optional]
    * @param[in]  cluster_id QString [optional]
    * @param[in]  region_id double [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  role_id QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  platform_id QString [optional]
    * @param[in]  platform QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void virtualizationVirtualMachinesList(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__in = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_type_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &region_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_virtual_machine OAIWritableVirtualMachine [required]
    */
    virtual void virtualizationVirtualMachinesPartialUpdate(const qint32 &id, const OAIWritableVirtualMachine &oai_writable_virtual_machine);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationVirtualMachinesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_virtual_machine OAIWritableVirtualMachine [required]
    */
    virtual void virtualizationVirtualMachinesUpdate(const qint32 &id, const OAIWritableVirtualMachine &oai_writable_virtual_machine);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualizationChoicesListCallback(OAIHttpRequestWorker *worker);
    void virtualizationChoicesReadCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsCreateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsListCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsReadCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesCreateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesListCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesReadCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClustersCreateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClustersDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualizationClustersListCallback(OAIHttpRequestWorker *worker);
    void virtualizationClustersPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClustersReadCallback(OAIHttpRequestWorker *worker);
    void virtualizationClustersUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesCreateCallback(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesListCallback(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesReadCallback(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesCreateCallback(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesListCallback(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesReadCallback(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualizationChoicesListSignal();
    void virtualizationChoicesReadSignal();
    void virtualizationClusterGroupsCreateSignal(OAIClusterGroup summary);
    void virtualizationClusterGroupsDeleteSignal();
    void virtualizationClusterGroupsListSignal(OAIVirtualization_cluster_groups_list_200_response summary);
    void virtualizationClusterGroupsPartialUpdateSignal(OAIClusterGroup summary);
    void virtualizationClusterGroupsReadSignal(OAIClusterGroup summary);
    void virtualizationClusterGroupsUpdateSignal(OAIClusterGroup summary);
    void virtualizationClusterTypesCreateSignal(OAIClusterType summary);
    void virtualizationClusterTypesDeleteSignal();
    void virtualizationClusterTypesListSignal(OAIVirtualization_cluster_types_list_200_response summary);
    void virtualizationClusterTypesPartialUpdateSignal(OAIClusterType summary);
    void virtualizationClusterTypesReadSignal(OAIClusterType summary);
    void virtualizationClusterTypesUpdateSignal(OAIClusterType summary);
    void virtualizationClustersCreateSignal(OAICluster summary);
    void virtualizationClustersDeleteSignal();
    void virtualizationClustersListSignal(OAIVirtualization_clusters_list_200_response summary);
    void virtualizationClustersPartialUpdateSignal(OAICluster summary);
    void virtualizationClustersReadSignal(OAICluster summary);
    void virtualizationClustersUpdateSignal(OAICluster summary);
    void virtualizationInterfacesCreateSignal(OAIInterface summary);
    void virtualizationInterfacesDeleteSignal();
    void virtualizationInterfacesListSignal(OAIDcim_interfaces_list_200_response summary);
    void virtualizationInterfacesPartialUpdateSignal(OAIInterface summary);
    void virtualizationInterfacesReadSignal(OAIInterface summary);
    void virtualizationInterfacesUpdateSignal(OAIInterface summary);
    void virtualizationVirtualMachinesCreateSignal(OAIVirtualMachine summary);
    void virtualizationVirtualMachinesDeleteSignal();
    void virtualizationVirtualMachinesListSignal(OAIVirtualization_virtual_machines_list_200_response summary);
    void virtualizationVirtualMachinesPartialUpdateSignal(OAIVirtualMachine summary);
    void virtualizationVirtualMachinesReadSignal(OAIVirtualMachineWithConfigContext summary);
    void virtualizationVirtualMachinesUpdateSignal(OAIVirtualMachine summary);


    void virtualizationChoicesListSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationChoicesReadSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsCreateSignalFull(OAIHttpRequestWorker *worker, OAIClusterGroup summary);
    void virtualizationClusterGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualization_cluster_groups_list_200_response summary);
    void virtualizationClusterGroupsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIClusterGroup summary);
    void virtualizationClusterGroupsReadSignalFull(OAIHttpRequestWorker *worker, OAIClusterGroup summary);
    void virtualizationClusterGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIClusterGroup summary);
    void virtualizationClusterTypesCreateSignalFull(OAIHttpRequestWorker *worker, OAIClusterType summary);
    void virtualizationClusterTypesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualization_cluster_types_list_200_response summary);
    void virtualizationClusterTypesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIClusterType summary);
    void virtualizationClusterTypesReadSignalFull(OAIHttpRequestWorker *worker, OAIClusterType summary);
    void virtualizationClusterTypesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIClusterType summary);
    void virtualizationClustersCreateSignalFull(OAIHttpRequestWorker *worker, OAICluster summary);
    void virtualizationClustersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationClustersListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualization_clusters_list_200_response summary);
    void virtualizationClustersPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAICluster summary);
    void virtualizationClustersReadSignalFull(OAIHttpRequestWorker *worker, OAICluster summary);
    void virtualizationClustersUpdateSignalFull(OAIHttpRequestWorker *worker, OAICluster summary);
    void virtualizationInterfacesCreateSignalFull(OAIHttpRequestWorker *worker, OAIInterface summary);
    void virtualizationInterfacesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_interfaces_list_200_response summary);
    void virtualizationInterfacesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInterface summary);
    void virtualizationInterfacesReadSignalFull(OAIHttpRequestWorker *worker, OAIInterface summary);
    void virtualizationInterfacesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInterface summary);
    void virtualizationVirtualMachinesCreateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachine summary);
    void virtualizationVirtualMachinesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualization_virtual_machines_list_200_response summary);
    void virtualizationVirtualMachinesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachine summary);
    void virtualizationVirtualMachinesReadSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineWithConfigContext summary);
    void virtualizationVirtualMachinesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachine summary);

    Q_DECL_DEPRECATED_X("Use virtualizationChoicesListSignalError() instead")
    void virtualizationChoicesListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationChoicesListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationChoicesReadSignalError() instead")
    void virtualizationChoicesReadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationChoicesReadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsCreateSignalError() instead")
    void virtualizationClusterGroupsCreateSignalE(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsCreateSignalError(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsDeleteSignalError() instead")
    void virtualizationClusterGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsListSignalError() instead")
    void virtualizationClusterGroupsListSignalE(OAIVirtualization_cluster_groups_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsListSignalError(OAIVirtualization_cluster_groups_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsPartialUpdateSignalError() instead")
    void virtualizationClusterGroupsPartialUpdateSignalE(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsPartialUpdateSignalError(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsReadSignalError() instead")
    void virtualizationClusterGroupsReadSignalE(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsReadSignalError(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsUpdateSignalError() instead")
    void virtualizationClusterGroupsUpdateSignalE(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsUpdateSignalError(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesCreateSignalError() instead")
    void virtualizationClusterTypesCreateSignalE(OAIClusterType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesCreateSignalError(OAIClusterType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesDeleteSignalError() instead")
    void virtualizationClusterTypesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesListSignalError() instead")
    void virtualizationClusterTypesListSignalE(OAIVirtualization_cluster_types_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesListSignalError(OAIVirtualization_cluster_types_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesPartialUpdateSignalError() instead")
    void virtualizationClusterTypesPartialUpdateSignalE(OAIClusterType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesPartialUpdateSignalError(OAIClusterType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesReadSignalError() instead")
    void virtualizationClusterTypesReadSignalE(OAIClusterType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesReadSignalError(OAIClusterType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesUpdateSignalError() instead")
    void virtualizationClusterTypesUpdateSignalE(OAIClusterType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesUpdateSignalError(OAIClusterType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersCreateSignalError() instead")
    void virtualizationClustersCreateSignalE(OAICluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersCreateSignalError(OAICluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersDeleteSignalError() instead")
    void virtualizationClustersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersListSignalError() instead")
    void virtualizationClustersListSignalE(OAIVirtualization_clusters_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersListSignalError(OAIVirtualization_clusters_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersPartialUpdateSignalError() instead")
    void virtualizationClustersPartialUpdateSignalE(OAICluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersPartialUpdateSignalError(OAICluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersReadSignalError() instead")
    void virtualizationClustersReadSignalE(OAICluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersReadSignalError(OAICluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersUpdateSignalError() instead")
    void virtualizationClustersUpdateSignalE(OAICluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersUpdateSignalError(OAICluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesCreateSignalError() instead")
    void virtualizationInterfacesCreateSignalE(OAIInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesCreateSignalError(OAIInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesDeleteSignalError() instead")
    void virtualizationInterfacesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesListSignalError() instead")
    void virtualizationInterfacesListSignalE(OAIDcim_interfaces_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesListSignalError(OAIDcim_interfaces_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesPartialUpdateSignalError() instead")
    void virtualizationInterfacesPartialUpdateSignalE(OAIInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesPartialUpdateSignalError(OAIInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesReadSignalError() instead")
    void virtualizationInterfacesReadSignalE(OAIInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesReadSignalError(OAIInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesUpdateSignalError() instead")
    void virtualizationInterfacesUpdateSignalE(OAIInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesUpdateSignalError(OAIInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesCreateSignalError() instead")
    void virtualizationVirtualMachinesCreateSignalE(OAIVirtualMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesCreateSignalError(OAIVirtualMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesDeleteSignalError() instead")
    void virtualizationVirtualMachinesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesListSignalError() instead")
    void virtualizationVirtualMachinesListSignalE(OAIVirtualization_virtual_machines_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesListSignalError(OAIVirtualization_virtual_machines_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesPartialUpdateSignalError() instead")
    void virtualizationVirtualMachinesPartialUpdateSignalE(OAIVirtualMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesPartialUpdateSignalError(OAIVirtualMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesReadSignalError() instead")
    void virtualizationVirtualMachinesReadSignalE(OAIVirtualMachineWithConfigContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesReadSignalError(OAIVirtualMachineWithConfigContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesUpdateSignalError() instead")
    void virtualizationVirtualMachinesUpdateSignalE(OAIVirtualMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesUpdateSignalError(OAIVirtualMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualizationChoicesListSignalErrorFull() instead")
    void virtualizationChoicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationChoicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationChoicesReadSignalErrorFull() instead")
    void virtualizationChoicesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationChoicesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsCreateSignalErrorFull() instead")
    void virtualizationClusterGroupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsDeleteSignalErrorFull() instead")
    void virtualizationClusterGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsListSignalErrorFull() instead")
    void virtualizationClusterGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsPartialUpdateSignalErrorFull() instead")
    void virtualizationClusterGroupsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsReadSignalErrorFull() instead")
    void virtualizationClusterGroupsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsUpdateSignalErrorFull() instead")
    void virtualizationClusterGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesCreateSignalErrorFull() instead")
    void virtualizationClusterTypesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesDeleteSignalErrorFull() instead")
    void virtualizationClusterTypesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesListSignalErrorFull() instead")
    void virtualizationClusterTypesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesPartialUpdateSignalErrorFull() instead")
    void virtualizationClusterTypesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesReadSignalErrorFull() instead")
    void virtualizationClusterTypesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesUpdateSignalErrorFull() instead")
    void virtualizationClusterTypesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersCreateSignalErrorFull() instead")
    void virtualizationClustersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersDeleteSignalErrorFull() instead")
    void virtualizationClustersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersListSignalErrorFull() instead")
    void virtualizationClustersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersPartialUpdateSignalErrorFull() instead")
    void virtualizationClustersPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersReadSignalErrorFull() instead")
    void virtualizationClustersReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersUpdateSignalErrorFull() instead")
    void virtualizationClustersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesCreateSignalErrorFull() instead")
    void virtualizationInterfacesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesDeleteSignalErrorFull() instead")
    void virtualizationInterfacesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesListSignalErrorFull() instead")
    void virtualizationInterfacesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesPartialUpdateSignalErrorFull() instead")
    void virtualizationInterfacesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesReadSignalErrorFull() instead")
    void virtualizationInterfacesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesUpdateSignalErrorFull() instead")
    void virtualizationInterfacesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesCreateSignalErrorFull() instead")
    void virtualizationVirtualMachinesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesDeleteSignalErrorFull() instead")
    void virtualizationVirtualMachinesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesListSignalErrorFull() instead")
    void virtualizationVirtualMachinesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesPartialUpdateSignalErrorFull() instead")
    void virtualizationVirtualMachinesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesReadSignalErrorFull() instead")
    void virtualizationVirtualMachinesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesUpdateSignalErrorFull() instead")
    void virtualizationVirtualMachinesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
