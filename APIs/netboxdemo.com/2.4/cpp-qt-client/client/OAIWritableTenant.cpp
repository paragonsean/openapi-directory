/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.4
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableTenant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableTenant::OAIWritableTenant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableTenant::OAIWritableTenant() {
    this->initializeModel();
}

OAIWritableTenant::~OAIWritableTenant() {}

void OAIWritableTenant::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIWritableTenant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableTenant::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIWritableTenant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableTenant::asJsonObject() const {
    QJsonObject obj;
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIWritableTenant::getComments() const {
    return m_comments;
}
void OAIWritableTenant::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIWritableTenant::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIWritableTenant::is_comments_Valid() const{
    return m_comments_isValid;
}

QDate OAIWritableTenant::getCreated() const {
    return m_created;
}
void OAIWritableTenant::setCreated(const QDate &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWritableTenant::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWritableTenant::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIWritableTenant::getCustomFields() const {
    return m_custom_fields;
}
void OAIWritableTenant::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIWritableTenant::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIWritableTenant::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIWritableTenant::getDescription() const {
    return m_description;
}
void OAIWritableTenant::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritableTenant::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritableTenant::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIWritableTenant::getGroup() const {
    return m_group;
}
void OAIWritableTenant::setGroup(const qint32 &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIWritableTenant::is_group_Set() const{
    return m_group_isSet;
}

bool OAIWritableTenant::is_group_Valid() const{
    return m_group_isValid;
}

qint32 OAIWritableTenant::getId() const {
    return m_id;
}
void OAIWritableTenant::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableTenant::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableTenant::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIWritableTenant::getLastUpdated() const {
    return m_last_updated;
}
void OAIWritableTenant::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWritableTenant::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWritableTenant::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIWritableTenant::getName() const {
    return m_name;
}
void OAIWritableTenant::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritableTenant::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritableTenant::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWritableTenant::getSlug() const {
    return m_slug;
}
void OAIWritableTenant::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIWritableTenant::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIWritableTenant::is_slug_Valid() const{
    return m_slug_isValid;
}

QList<QString> OAIWritableTenant::getTags() const {
    return m_tags;
}
void OAIWritableTenant::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritableTenant::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritableTenant::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIWritableTenant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableTenant::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_slug_isValid && true;
}

} // namespace OpenAPI
