/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.Mode;
import org.openapitools.client.model.NestedVLAN;
import org.openapitools.client.model.NestedVirtualMachine;
import org.openapitools.client.model.Type7;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VirtualMachineInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:50.058495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachineInterface {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "mac_address";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private String macAddress;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private Mode mode;

  public static final String SERIALIZED_NAME_MTU = "mtu";
  @SerializedName(SERIALIZED_NAME_MTU)
  private Integer mtu;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGGED_VLANS = "tagged_vlans";
  @SerializedName(SERIALIZED_NAME_TAGGED_VLANS)
  private Set<NestedVLAN> taggedVlans = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Type7 type = {"label":"Virtual","value":"virtual"};

  public static final String SERIALIZED_NAME_UNTAGGED_VLAN = "untagged_vlan";
  @SerializedName(SERIALIZED_NAME_UNTAGGED_VLAN)
  private NestedVLAN untaggedVlan;

  public static final String SERIALIZED_NAME_VIRTUAL_MACHINE = "virtual_machine";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_MACHINE)
  private NestedVirtualMachine virtualMachine;

  public VirtualMachineInterface() {
  }

  public VirtualMachineInterface(
     Integer id
  ) {
    this();
    this.id = id;
  }

  public VirtualMachineInterface description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public VirtualMachineInterface enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public VirtualMachineInterface macAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  /**
   * Get macAddress
   * @return macAddress
   */
  @javax.annotation.Nullable
  public String getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }


  public VirtualMachineInterface mode(Mode mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public Mode getMode() {
    return mode;
  }

  public void setMode(Mode mode) {
    this.mode = mode;
  }


  public VirtualMachineInterface mtu(Integer mtu) {
    this.mtu = mtu;
    return this;
  }

  /**
   * Get mtu
   * minimum: 1
   * maximum: 65536
   * @return mtu
   */
  @javax.annotation.Nullable
  public Integer getMtu() {
    return mtu;
  }

  public void setMtu(Integer mtu) {
    this.mtu = mtu;
  }


  public VirtualMachineInterface name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public VirtualMachineInterface taggedVlans(Set<NestedVLAN> taggedVlans) {
    this.taggedVlans = taggedVlans;
    return this;
  }

  public VirtualMachineInterface addTaggedVlansItem(NestedVLAN taggedVlansItem) {
    if (this.taggedVlans == null) {
      this.taggedVlans = new LinkedHashSet<>();
    }
    this.taggedVlans.add(taggedVlansItem);
    return this;
  }

  /**
   * Get taggedVlans
   * @return taggedVlans
   */
  @javax.annotation.Nullable
  public Set<NestedVLAN> getTaggedVlans() {
    return taggedVlans;
  }

  public void setTaggedVlans(Set<NestedVLAN> taggedVlans) {
    this.taggedVlans = taggedVlans;
  }


  public VirtualMachineInterface tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public VirtualMachineInterface addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public VirtualMachineInterface type(Type7 type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public Type7 getType() {
    return type;
  }

  public void setType(Type7 type) {
    this.type = type;
  }


  public VirtualMachineInterface untaggedVlan(NestedVLAN untaggedVlan) {
    this.untaggedVlan = untaggedVlan;
    return this;
  }

  /**
   * Get untaggedVlan
   * @return untaggedVlan
   */
  @javax.annotation.Nullable
  public NestedVLAN getUntaggedVlan() {
    return untaggedVlan;
  }

  public void setUntaggedVlan(NestedVLAN untaggedVlan) {
    this.untaggedVlan = untaggedVlan;
  }


  public VirtualMachineInterface virtualMachine(NestedVirtualMachine virtualMachine) {
    this.virtualMachine = virtualMachine;
    return this;
  }

  /**
   * Get virtualMachine
   * @return virtualMachine
   */
  @javax.annotation.Nonnull
  public NestedVirtualMachine getVirtualMachine() {
    return virtualMachine;
  }

  public void setVirtualMachine(NestedVirtualMachine virtualMachine) {
    this.virtualMachine = virtualMachine;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachineInterface virtualMachineInterface = (VirtualMachineInterface) o;
    return Objects.equals(this.description, virtualMachineInterface.description) &&
        Objects.equals(this.enabled, virtualMachineInterface.enabled) &&
        Objects.equals(this.id, virtualMachineInterface.id) &&
        Objects.equals(this.macAddress, virtualMachineInterface.macAddress) &&
        Objects.equals(this.mode, virtualMachineInterface.mode) &&
        Objects.equals(this.mtu, virtualMachineInterface.mtu) &&
        Objects.equals(this.name, virtualMachineInterface.name) &&
        Objects.equals(this.taggedVlans, virtualMachineInterface.taggedVlans) &&
        Objects.equals(this.tags, virtualMachineInterface.tags) &&
        Objects.equals(this.type, virtualMachineInterface.type) &&
        Objects.equals(this.untaggedVlan, virtualMachineInterface.untaggedVlan) &&
        Objects.equals(this.virtualMachine, virtualMachineInterface.virtualMachine);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, enabled, id, macAddress, mode, mtu, name, taggedVlans, tags, type, untaggedVlan, virtualMachine);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachineInterface {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    mtu: ").append(toIndentedString(mtu)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    taggedVlans: ").append(toIndentedString(taggedVlans)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    untaggedVlan: ").append(toIndentedString(untaggedVlan)).append("\n");
    sb.append("    virtualMachine: ").append(toIndentedString(virtualMachine)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("enabled");
    openapiFields.add("id");
    openapiFields.add("mac_address");
    openapiFields.add("mode");
    openapiFields.add("mtu");
    openapiFields.add("name");
    openapiFields.add("tagged_vlans");
    openapiFields.add("tags");
    openapiFields.add("type");
    openapiFields.add("untagged_vlan");
    openapiFields.add("virtual_machine");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("virtual_machine");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachineInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachineInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachineInterface is not found in the empty JSON string", VirtualMachineInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachineInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachineInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VirtualMachineInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("mac_address") != null && !jsonObj.get("mac_address").isJsonNull()) && !jsonObj.get("mac_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac_address").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        Mode.validateJsonElement(jsonObj.get("mode"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("tagged_vlans") != null && !jsonObj.get("tagged_vlans").isJsonNull()) {
        JsonArray jsonArraytaggedVlans = jsonObj.getAsJsonArray("tagged_vlans");
        if (jsonArraytaggedVlans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tagged_vlans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tagged_vlans` to be an array in the JSON string but got `%s`", jsonObj.get("tagged_vlans").toString()));
          }

          // validate the optional field `tagged_vlans` (array)
          for (int i = 0; i < jsonArraytaggedVlans.size(); i++) {
            NestedVLAN.validateJsonElement(jsonArraytaggedVlans.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        Type7.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `untagged_vlan`
      if (jsonObj.get("untagged_vlan") != null && !jsonObj.get("untagged_vlan").isJsonNull()) {
        NestedVLAN.validateJsonElement(jsonObj.get("untagged_vlan"));
      }
      // validate the required field `virtual_machine`
      NestedVirtualMachine.validateJsonElement(jsonObj.get("virtual_machine"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachineInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachineInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachineInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachineInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachineInterface>() {
           @Override
           public void write(JsonWriter out, VirtualMachineInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachineInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachineInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachineInterface
   * @throws IOException if the JSON string is invalid with respect to VirtualMachineInterface
   */
  public static VirtualMachineInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachineInterface.class);
  }

  /**
   * Convert an instance of VirtualMachineInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

