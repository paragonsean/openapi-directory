/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ConnectionStatus;
import org.openapitools.client.model.NestedCable;
import org.openapitools.client.model.NestedCircuit;
import org.openapitools.client.model.NestedSite;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CircuitTermination
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:50.058495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CircuitTermination {
  public static final String SERIALIZED_NAME_CABLE = "cable";
  @SerializedName(SERIALIZED_NAME_CABLE)
  private NestedCable cable;

  public static final String SERIALIZED_NAME_CIRCUIT = "circuit";
  @SerializedName(SERIALIZED_NAME_CIRCUIT)
  private NestedCircuit circuit;

  public static final String SERIALIZED_NAME_CONNECTED_ENDPOINT = "connected_endpoint";
  @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINT)
  private Map<String, String> connectedEndpoint = new HashMap<>();

  public static final String SERIALIZED_NAME_CONNECTED_ENDPOINT_TYPE = "connected_endpoint_type";
  @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINT_TYPE)
  private String connectedEndpointType;

  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "connection_status";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private ConnectionStatus connectionStatus;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PORT_SPEED = "port_speed";
  @SerializedName(SERIALIZED_NAME_PORT_SPEED)
  private Integer portSpeed;

  public static final String SERIALIZED_NAME_PP_INFO = "pp_info";
  @SerializedName(SERIALIZED_NAME_PP_INFO)
  private String ppInfo;

  public static final String SERIALIZED_NAME_SITE = "site";
  @SerializedName(SERIALIZED_NAME_SITE)
  private NestedSite site;

  /**
   * Gets or Sets termSide
   */
  @JsonAdapter(TermSideEnum.Adapter.class)
  public enum TermSideEnum {
    A("A"),
    
    Z("Z");

    private String value;

    TermSideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TermSideEnum fromValue(String value) {
      for (TermSideEnum b : TermSideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TermSideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TermSideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TermSideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TermSideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TermSideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TERM_SIDE = "term_side";
  @SerializedName(SERIALIZED_NAME_TERM_SIDE)
  private TermSideEnum termSide;

  public static final String SERIALIZED_NAME_UPSTREAM_SPEED = "upstream_speed";
  @SerializedName(SERIALIZED_NAME_UPSTREAM_SPEED)
  private Integer upstreamSpeed;

  public static final String SERIALIZED_NAME_XCONNECT_ID = "xconnect_id";
  @SerializedName(SERIALIZED_NAME_XCONNECT_ID)
  private String xconnectId;

  public CircuitTermination() {
  }

  public CircuitTermination(
     Map<String, String> connectedEndpoint, 
     String connectedEndpointType, 
     Integer id
  ) {
    this();
    this.connectedEndpoint = connectedEndpoint;
    this.connectedEndpointType = connectedEndpointType;
    this.id = id;
  }

  public CircuitTermination cable(NestedCable cable) {
    this.cable = cable;
    return this;
  }

  /**
   * Get cable
   * @return cable
   */
  @javax.annotation.Nullable
  public NestedCable getCable() {
    return cable;
  }

  public void setCable(NestedCable cable) {
    this.cable = cable;
  }


  public CircuitTermination circuit(NestedCircuit circuit) {
    this.circuit = circuit;
    return this;
  }

  /**
   * Get circuit
   * @return circuit
   */
  @javax.annotation.Nonnull
  public NestedCircuit getCircuit() {
    return circuit;
  }

  public void setCircuit(NestedCircuit circuit) {
    this.circuit = circuit;
  }


  /**
   *  Return the appropriate serializer for the type of connected object. 
   * @return connectedEndpoint
   */
  @javax.annotation.Nullable
  public Map<String, String> getConnectedEndpoint() {
    return connectedEndpoint;
  }



  /**
   * Get connectedEndpointType
   * @return connectedEndpointType
   */
  @javax.annotation.Nullable
  public String getConnectedEndpointType() {
    return connectedEndpointType;
  }



  public CircuitTermination connectionStatus(ConnectionStatus connectionStatus) {
    this.connectionStatus = connectionStatus;
    return this;
  }

  /**
   * Get connectionStatus
   * @return connectionStatus
   */
  @javax.annotation.Nullable
  public ConnectionStatus getConnectionStatus() {
    return connectionStatus;
  }

  public void setConnectionStatus(ConnectionStatus connectionStatus) {
    this.connectionStatus = connectionStatus;
  }


  public CircuitTermination description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public CircuitTermination portSpeed(Integer portSpeed) {
    this.portSpeed = portSpeed;
    return this;
  }

  /**
   * Get portSpeed
   * minimum: 0
   * maximum: 2147483647
   * @return portSpeed
   */
  @javax.annotation.Nonnull
  public Integer getPortSpeed() {
    return portSpeed;
  }

  public void setPortSpeed(Integer portSpeed) {
    this.portSpeed = portSpeed;
  }


  public CircuitTermination ppInfo(String ppInfo) {
    this.ppInfo = ppInfo;
    return this;
  }

  /**
   * Get ppInfo
   * @return ppInfo
   */
  @javax.annotation.Nullable
  public String getPpInfo() {
    return ppInfo;
  }

  public void setPpInfo(String ppInfo) {
    this.ppInfo = ppInfo;
  }


  public CircuitTermination site(NestedSite site) {
    this.site = site;
    return this;
  }

  /**
   * Get site
   * @return site
   */
  @javax.annotation.Nonnull
  public NestedSite getSite() {
    return site;
  }

  public void setSite(NestedSite site) {
    this.site = site;
  }


  public CircuitTermination termSide(TermSideEnum termSide) {
    this.termSide = termSide;
    return this;
  }

  /**
   * Get termSide
   * @return termSide
   */
  @javax.annotation.Nonnull
  public TermSideEnum getTermSide() {
    return termSide;
  }

  public void setTermSide(TermSideEnum termSide) {
    this.termSide = termSide;
  }


  public CircuitTermination upstreamSpeed(Integer upstreamSpeed) {
    this.upstreamSpeed = upstreamSpeed;
    return this;
  }

  /**
   * Upstream speed, if different from port speed
   * minimum: 0
   * maximum: 2147483647
   * @return upstreamSpeed
   */
  @javax.annotation.Nullable
  public Integer getUpstreamSpeed() {
    return upstreamSpeed;
  }

  public void setUpstreamSpeed(Integer upstreamSpeed) {
    this.upstreamSpeed = upstreamSpeed;
  }


  public CircuitTermination xconnectId(String xconnectId) {
    this.xconnectId = xconnectId;
    return this;
  }

  /**
   * Get xconnectId
   * @return xconnectId
   */
  @javax.annotation.Nullable
  public String getXconnectId() {
    return xconnectId;
  }

  public void setXconnectId(String xconnectId) {
    this.xconnectId = xconnectId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CircuitTermination circuitTermination = (CircuitTermination) o;
    return Objects.equals(this.cable, circuitTermination.cable) &&
        Objects.equals(this.circuit, circuitTermination.circuit) &&
        Objects.equals(this.connectedEndpoint, circuitTermination.connectedEndpoint) &&
        Objects.equals(this.connectedEndpointType, circuitTermination.connectedEndpointType) &&
        Objects.equals(this.connectionStatus, circuitTermination.connectionStatus) &&
        Objects.equals(this.description, circuitTermination.description) &&
        Objects.equals(this.id, circuitTermination.id) &&
        Objects.equals(this.portSpeed, circuitTermination.portSpeed) &&
        Objects.equals(this.ppInfo, circuitTermination.ppInfo) &&
        Objects.equals(this.site, circuitTermination.site) &&
        Objects.equals(this.termSide, circuitTermination.termSide) &&
        Objects.equals(this.upstreamSpeed, circuitTermination.upstreamSpeed) &&
        Objects.equals(this.xconnectId, circuitTermination.xconnectId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cable, circuit, connectedEndpoint, connectedEndpointType, connectionStatus, description, id, portSpeed, ppInfo, site, termSide, upstreamSpeed, xconnectId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CircuitTermination {\n");
    sb.append("    cable: ").append(toIndentedString(cable)).append("\n");
    sb.append("    circuit: ").append(toIndentedString(circuit)).append("\n");
    sb.append("    connectedEndpoint: ").append(toIndentedString(connectedEndpoint)).append("\n");
    sb.append("    connectedEndpointType: ").append(toIndentedString(connectedEndpointType)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    portSpeed: ").append(toIndentedString(portSpeed)).append("\n");
    sb.append("    ppInfo: ").append(toIndentedString(ppInfo)).append("\n");
    sb.append("    site: ").append(toIndentedString(site)).append("\n");
    sb.append("    termSide: ").append(toIndentedString(termSide)).append("\n");
    sb.append("    upstreamSpeed: ").append(toIndentedString(upstreamSpeed)).append("\n");
    sb.append("    xconnectId: ").append(toIndentedString(xconnectId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cable");
    openapiFields.add("circuit");
    openapiFields.add("connected_endpoint");
    openapiFields.add("connected_endpoint_type");
    openapiFields.add("connection_status");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("port_speed");
    openapiFields.add("pp_info");
    openapiFields.add("site");
    openapiFields.add("term_side");
    openapiFields.add("upstream_speed");
    openapiFields.add("xconnect_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("circuit");
    openapiRequiredFields.add("port_speed");
    openapiRequiredFields.add("site");
    openapiRequiredFields.add("term_side");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CircuitTermination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CircuitTermination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CircuitTermination is not found in the empty JSON string", CircuitTermination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CircuitTermination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CircuitTermination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CircuitTermination.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cable`
      if (jsonObj.get("cable") != null && !jsonObj.get("cable").isJsonNull()) {
        NestedCable.validateJsonElement(jsonObj.get("cable"));
      }
      // validate the required field `circuit`
      NestedCircuit.validateJsonElement(jsonObj.get("circuit"));
      if ((jsonObj.get("connected_endpoint_type") != null && !jsonObj.get("connected_endpoint_type").isJsonNull()) && !jsonObj.get("connected_endpoint_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connected_endpoint_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connected_endpoint_type").toString()));
      }
      // validate the optional field `connection_status`
      if (jsonObj.get("connection_status") != null && !jsonObj.get("connection_status").isJsonNull()) {
        ConnectionStatus.validateJsonElement(jsonObj.get("connection_status"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("pp_info") != null && !jsonObj.get("pp_info").isJsonNull()) && !jsonObj.get("pp_info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pp_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pp_info").toString()));
      }
      // validate the required field `site`
      NestedSite.validateJsonElement(jsonObj.get("site"));
      if (!jsonObj.get("term_side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `term_side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("term_side").toString()));
      }
      // validate the required field `term_side`
      TermSideEnum.validateJsonElement(jsonObj.get("term_side"));
      if ((jsonObj.get("xconnect_id") != null && !jsonObj.get("xconnect_id").isJsonNull()) && !jsonObj.get("xconnect_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xconnect_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xconnect_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CircuitTermination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CircuitTermination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CircuitTermination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CircuitTermination.class));

       return (TypeAdapter<T>) new TypeAdapter<CircuitTermination>() {
           @Override
           public void write(JsonWriter out, CircuitTermination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CircuitTermination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CircuitTermination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CircuitTermination
   * @throws IOException if the JSON string is invalid with respect to CircuitTermination
   */
  public static CircuitTermination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CircuitTermination.class);
  }

  /**
   * Convert an instance of CircuitTermination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

