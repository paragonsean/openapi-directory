/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NestedDevice;
import org.openapitools.client.model.NestedManufacturer;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InventoryItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:50.058495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InventoryItem {
  public static final String SERIALIZED_NAME_ASSET_TAG = "asset_tag";
  @SerializedName(SERIALIZED_NAME_ASSET_TAG)
  private String assetTag;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private NestedDevice device;

  public static final String SERIALIZED_NAME_DISCOVERED = "discovered";
  @SerializedName(SERIALIZED_NAME_DISCOVERED)
  private Boolean discovered;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private NestedManufacturer manufacturer;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private Integer parent;

  public static final String SERIALIZED_NAME_PART_ID = "part_id";
  @SerializedName(SERIALIZED_NAME_PART_ID)
  private String partId;

  public static final String SERIALIZED_NAME_SERIAL = "serial";
  @SerializedName(SERIALIZED_NAME_SERIAL)
  private String serial;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public InventoryItem() {
  }

  public InventoryItem(
     Integer id
  ) {
    this();
    this.id = id;
  }

  public InventoryItem assetTag(String assetTag) {
    this.assetTag = assetTag;
    return this;
  }

  /**
   * A unique tag used to identify this item
   * @return assetTag
   */
  @javax.annotation.Nullable
  public String getAssetTag() {
    return assetTag;
  }

  public void setAssetTag(String assetTag) {
    this.assetTag = assetTag;
  }


  public InventoryItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public InventoryItem device(NestedDevice device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device
   */
  @javax.annotation.Nonnull
  public NestedDevice getDevice() {
    return device;
  }

  public void setDevice(NestedDevice device) {
    this.device = device;
  }


  public InventoryItem discovered(Boolean discovered) {
    this.discovered = discovered;
    return this;
  }

  /**
   * This item was automatically discovered
   * @return discovered
   */
  @javax.annotation.Nullable
  public Boolean getDiscovered() {
    return discovered;
  }

  public void setDiscovered(Boolean discovered) {
    this.discovered = discovered;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public InventoryItem manufacturer(NestedManufacturer manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * Get manufacturer
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public NestedManufacturer getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(NestedManufacturer manufacturer) {
    this.manufacturer = manufacturer;
  }


  public InventoryItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public InventoryItem parent(Integer parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public Integer getParent() {
    return parent;
  }

  public void setParent(Integer parent) {
    this.parent = parent;
  }


  public InventoryItem partId(String partId) {
    this.partId = partId;
    return this;
  }

  /**
   * Manufacturer-assigned part identifier
   * @return partId
   */
  @javax.annotation.Nullable
  public String getPartId() {
    return partId;
  }

  public void setPartId(String partId) {
    this.partId = partId;
  }


  public InventoryItem serial(String serial) {
    this.serial = serial;
    return this;
  }

  /**
   * Get serial
   * @return serial
   */
  @javax.annotation.Nullable
  public String getSerial() {
    return serial;
  }

  public void setSerial(String serial) {
    this.serial = serial;
  }


  public InventoryItem tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public InventoryItem addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventoryItem inventoryItem = (InventoryItem) o;
    return Objects.equals(this.assetTag, inventoryItem.assetTag) &&
        Objects.equals(this.description, inventoryItem.description) &&
        Objects.equals(this.device, inventoryItem.device) &&
        Objects.equals(this.discovered, inventoryItem.discovered) &&
        Objects.equals(this.id, inventoryItem.id) &&
        Objects.equals(this.manufacturer, inventoryItem.manufacturer) &&
        Objects.equals(this.name, inventoryItem.name) &&
        Objects.equals(this.parent, inventoryItem.parent) &&
        Objects.equals(this.partId, inventoryItem.partId) &&
        Objects.equals(this.serial, inventoryItem.serial) &&
        Objects.equals(this.tags, inventoryItem.tags);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetTag, description, device, discovered, id, manufacturer, name, parent, partId, serial, tags);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventoryItem {\n");
    sb.append("    assetTag: ").append(toIndentedString(assetTag)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    discovered: ").append(toIndentedString(discovered)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    partId: ").append(toIndentedString(partId)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asset_tag");
    openapiFields.add("description");
    openapiFields.add("device");
    openapiFields.add("discovered");
    openapiFields.add("id");
    openapiFields.add("manufacturer");
    openapiFields.add("name");
    openapiFields.add("parent");
    openapiFields.add("part_id");
    openapiFields.add("serial");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("device");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InventoryItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InventoryItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InventoryItem is not found in the empty JSON string", InventoryItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InventoryItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InventoryItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InventoryItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("asset_tag") != null && !jsonObj.get("asset_tag").isJsonNull()) && !jsonObj.get("asset_tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_tag").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `device`
      NestedDevice.validateJsonElement(jsonObj.get("device"));
      // validate the optional field `manufacturer`
      if (jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) {
        NestedManufacturer.validateJsonElement(jsonObj.get("manufacturer"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("part_id") != null && !jsonObj.get("part_id").isJsonNull()) && !jsonObj.get("part_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `part_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("part_id").toString()));
      }
      if ((jsonObj.get("serial") != null && !jsonObj.get("serial").isJsonNull()) && !jsonObj.get("serial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serial").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InventoryItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InventoryItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InventoryItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InventoryItem.class));

       return (TypeAdapter<T>) new TypeAdapter<InventoryItem>() {
           @Override
           public void write(JsonWriter out, InventoryItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InventoryItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InventoryItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InventoryItem
   * @throws IOException if the JSON string is invalid with respect to InventoryItem
   */
  public static InventoryItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InventoryItem.class);
  }

  /**
   * Convert an instance of InventoryItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

