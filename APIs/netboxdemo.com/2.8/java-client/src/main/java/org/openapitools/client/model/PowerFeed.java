/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NestedPowerPanel;
import org.openapitools.client.model.NestedRack;
import org.openapitools.client.model.Phase;
import org.openapitools.client.model.Status4;
import org.openapitools.client.model.Supply;
import org.openapitools.client.model.Type3;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PowerFeed
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:50.058495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PowerFeed {
  public static final String SERIALIZED_NAME_AMPERAGE = "amperage";
  @SerializedName(SERIALIZED_NAME_AMPERAGE)
  private Integer amperage;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private LocalDate created;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields = {};

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_MAX_UTILIZATION = "max_utilization";
  @SerializedName(SERIALIZED_NAME_MAX_UTILIZATION)
  private Integer maxUtilization;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private Phase phase = {"id":1,"label":"Single phase","value":"single-phase"};

  public static final String SERIALIZED_NAME_POWER_PANEL = "power_panel";
  @SerializedName(SERIALIZED_NAME_POWER_PANEL)
  private NestedPowerPanel powerPanel;

  public static final String SERIALIZED_NAME_RACK = "rack";
  @SerializedName(SERIALIZED_NAME_RACK)
  private NestedRack rack;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status4 status = {"id":1,"label":"Active","value":"active"};

  public static final String SERIALIZED_NAME_SUPPLY = "supply";
  @SerializedName(SERIALIZED_NAME_SUPPLY)
  private Supply supply = {"id":1,"label":"AC","value":"ac"};

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Type3 type = {"id":1,"label":"Primary","value":"primary"};

  public static final String SERIALIZED_NAME_VOLTAGE = "voltage";
  @SerializedName(SERIALIZED_NAME_VOLTAGE)
  private Integer voltage;

  public PowerFeed() {
  }

  public PowerFeed(
     LocalDate created, 
     Integer id, 
     OffsetDateTime lastUpdated
  ) {
    this();
    this.created = created;
    this.id = id;
    this.lastUpdated = lastUpdated;
  }

  public PowerFeed amperage(Integer amperage) {
    this.amperage = amperage;
    return this;
  }

  /**
   * Get amperage
   * minimum: 1
   * maximum: 32767
   * @return amperage
   */
  @javax.annotation.Nullable
  public Integer getAmperage() {
    return amperage;
  }

  public void setAmperage(Integer amperage) {
    this.amperage = amperage;
  }


  public PowerFeed comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public LocalDate getCreated() {
    return created;
  }



  public PowerFeed customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }



  public PowerFeed maxUtilization(Integer maxUtilization) {
    this.maxUtilization = maxUtilization;
    return this;
  }

  /**
   * Maximum permissible draw (percentage)
   * minimum: 1
   * maximum: 100
   * @return maxUtilization
   */
  @javax.annotation.Nullable
  public Integer getMaxUtilization() {
    return maxUtilization;
  }

  public void setMaxUtilization(Integer maxUtilization) {
    this.maxUtilization = maxUtilization;
  }


  public PowerFeed name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PowerFeed phase(Phase phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nullable
  public Phase getPhase() {
    return phase;
  }

  public void setPhase(Phase phase) {
    this.phase = phase;
  }


  public PowerFeed powerPanel(NestedPowerPanel powerPanel) {
    this.powerPanel = powerPanel;
    return this;
  }

  /**
   * Get powerPanel
   * @return powerPanel
   */
  @javax.annotation.Nonnull
  public NestedPowerPanel getPowerPanel() {
    return powerPanel;
  }

  public void setPowerPanel(NestedPowerPanel powerPanel) {
    this.powerPanel = powerPanel;
  }


  public PowerFeed rack(NestedRack rack) {
    this.rack = rack;
    return this;
  }

  /**
   * Get rack
   * @return rack
   */
  @javax.annotation.Nullable
  public NestedRack getRack() {
    return rack;
  }

  public void setRack(NestedRack rack) {
    this.rack = rack;
  }


  public PowerFeed status(Status4 status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status4 getStatus() {
    return status;
  }

  public void setStatus(Status4 status) {
    this.status = status;
  }


  public PowerFeed supply(Supply supply) {
    this.supply = supply;
    return this;
  }

  /**
   * Get supply
   * @return supply
   */
  @javax.annotation.Nullable
  public Supply getSupply() {
    return supply;
  }

  public void setSupply(Supply supply) {
    this.supply = supply;
  }


  public PowerFeed tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public PowerFeed addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public PowerFeed type(Type3 type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public Type3 getType() {
    return type;
  }

  public void setType(Type3 type) {
    this.type = type;
  }


  public PowerFeed voltage(Integer voltage) {
    this.voltage = voltage;
    return this;
  }

  /**
   * Get voltage
   * minimum: -32768
   * maximum: 32767
   * @return voltage
   */
  @javax.annotation.Nullable
  public Integer getVoltage() {
    return voltage;
  }

  public void setVoltage(Integer voltage) {
    this.voltage = voltage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PowerFeed powerFeed = (PowerFeed) o;
    return Objects.equals(this.amperage, powerFeed.amperage) &&
        Objects.equals(this.comments, powerFeed.comments) &&
        Objects.equals(this.created, powerFeed.created) &&
        Objects.equals(this.customFields, powerFeed.customFields) &&
        Objects.equals(this.id, powerFeed.id) &&
        Objects.equals(this.lastUpdated, powerFeed.lastUpdated) &&
        Objects.equals(this.maxUtilization, powerFeed.maxUtilization) &&
        Objects.equals(this.name, powerFeed.name) &&
        Objects.equals(this.phase, powerFeed.phase) &&
        Objects.equals(this.powerPanel, powerFeed.powerPanel) &&
        Objects.equals(this.rack, powerFeed.rack) &&
        Objects.equals(this.status, powerFeed.status) &&
        Objects.equals(this.supply, powerFeed.supply) &&
        Objects.equals(this.tags, powerFeed.tags) &&
        Objects.equals(this.type, powerFeed.type) &&
        Objects.equals(this.voltage, powerFeed.voltage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amperage, comments, created, customFields, id, lastUpdated, maxUtilization, name, phase, powerPanel, rack, status, supply, tags, type, voltage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PowerFeed {\n");
    sb.append("    amperage: ").append(toIndentedString(amperage)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    maxUtilization: ").append(toIndentedString(maxUtilization)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    powerPanel: ").append(toIndentedString(powerPanel)).append("\n");
    sb.append("    rack: ").append(toIndentedString(rack)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    supply: ").append(toIndentedString(supply)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    voltage: ").append(toIndentedString(voltage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amperage");
    openapiFields.add("comments");
    openapiFields.add("created");
    openapiFields.add("custom_fields");
    openapiFields.add("id");
    openapiFields.add("last_updated");
    openapiFields.add("max_utilization");
    openapiFields.add("name");
    openapiFields.add("phase");
    openapiFields.add("power_panel");
    openapiFields.add("rack");
    openapiFields.add("status");
    openapiFields.add("supply");
    openapiFields.add("tags");
    openapiFields.add("type");
    openapiFields.add("voltage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("power_panel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PowerFeed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PowerFeed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PowerFeed is not found in the empty JSON string", PowerFeed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PowerFeed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PowerFeed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PowerFeed.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `phase`
      if (jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) {
        Phase.validateJsonElement(jsonObj.get("phase"));
      }
      // validate the required field `power_panel`
      NestedPowerPanel.validateJsonElement(jsonObj.get("power_panel"));
      // validate the optional field `rack`
      if (jsonObj.get("rack") != null && !jsonObj.get("rack").isJsonNull()) {
        NestedRack.validateJsonElement(jsonObj.get("rack"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Status4.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `supply`
      if (jsonObj.get("supply") != null && !jsonObj.get("supply").isJsonNull()) {
        Supply.validateJsonElement(jsonObj.get("supply"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        Type3.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PowerFeed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PowerFeed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PowerFeed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PowerFeed.class));

       return (TypeAdapter<T>) new TypeAdapter<PowerFeed>() {
           @Override
           public void write(JsonWriter out, PowerFeed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PowerFeed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PowerFeed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PowerFeed
   * @throws IOException if the JSON string is invalid with respect to PowerFeed
   */
  public static PowerFeed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PowerFeed.class);
  }

  /**
   * Convert an instance of PowerFeed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

