/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WritableExportTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:50.058495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WritableExportTemplate {
  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FILE_EXTENSION = "file_extension";
  @SerializedName(SERIALIZED_NAME_FILE_EXTENSION)
  private String fileExtension;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mime_type";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TEMPLATE_CODE = "template_code";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_CODE)
  private String templateCode;

  /**
   * Gets or Sets templateLanguage
   */
  @JsonAdapter(TemplateLanguageEnum.Adapter.class)
  public enum TemplateLanguageEnum {
    DJANGO("django"),
    
    JINJA2("jinja2");

    private String value;

    TemplateLanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TemplateLanguageEnum fromValue(String value) {
      for (TemplateLanguageEnum b : TemplateLanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TemplateLanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TemplateLanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TemplateLanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TemplateLanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TemplateLanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEMPLATE_LANGUAGE = "template_language";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_LANGUAGE)
  private TemplateLanguageEnum templateLanguage;

  public WritableExportTemplate() {
  }

  public WritableExportTemplate(
     Integer id
  ) {
    this();
    this.id = id;
  }

  public WritableExportTemplate contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nonnull
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public WritableExportTemplate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public WritableExportTemplate fileExtension(String fileExtension) {
    this.fileExtension = fileExtension;
    return this;
  }

  /**
   * Extension to append to the rendered filename
   * @return fileExtension
   */
  @javax.annotation.Nullable
  public String getFileExtension() {
    return fileExtension;
  }

  public void setFileExtension(String fileExtension) {
    this.fileExtension = fileExtension;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public WritableExportTemplate mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * Defaults to &lt;code&gt;text/plain&lt;/code&gt;
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public WritableExportTemplate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WritableExportTemplate templateCode(String templateCode) {
    this.templateCode = templateCode;
    return this;
  }

  /**
   * The list of objects being exported is passed as a context variable named &lt;code&gt;queryset&lt;/code&gt;.
   * @return templateCode
   */
  @javax.annotation.Nonnull
  public String getTemplateCode() {
    return templateCode;
  }

  public void setTemplateCode(String templateCode) {
    this.templateCode = templateCode;
  }


  public WritableExportTemplate templateLanguage(TemplateLanguageEnum templateLanguage) {
    this.templateLanguage = templateLanguage;
    return this;
  }

  /**
   * Get templateLanguage
   * @return templateLanguage
   */
  @javax.annotation.Nullable
  public TemplateLanguageEnum getTemplateLanguage() {
    return templateLanguage;
  }

  public void setTemplateLanguage(TemplateLanguageEnum templateLanguage) {
    this.templateLanguage = templateLanguage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritableExportTemplate writableExportTemplate = (WritableExportTemplate) o;
    return Objects.equals(this.contentType, writableExportTemplate.contentType) &&
        Objects.equals(this.description, writableExportTemplate.description) &&
        Objects.equals(this.fileExtension, writableExportTemplate.fileExtension) &&
        Objects.equals(this.id, writableExportTemplate.id) &&
        Objects.equals(this.mimeType, writableExportTemplate.mimeType) &&
        Objects.equals(this.name, writableExportTemplate.name) &&
        Objects.equals(this.templateCode, writableExportTemplate.templateCode) &&
        Objects.equals(this.templateLanguage, writableExportTemplate.templateLanguage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, description, fileExtension, id, mimeType, name, templateCode, templateLanguage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritableExportTemplate {\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fileExtension: ").append(toIndentedString(fileExtension)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    templateCode: ").append(toIndentedString(templateCode)).append("\n");
    sb.append("    templateLanguage: ").append(toIndentedString(templateLanguage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content_type");
    openapiFields.add("description");
    openapiFields.add("file_extension");
    openapiFields.add("id");
    openapiFields.add("mime_type");
    openapiFields.add("name");
    openapiFields.add("template_code");
    openapiFields.add("template_language");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("content_type");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("template_code");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WritableExportTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WritableExportTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WritableExportTemplate is not found in the empty JSON string", WritableExportTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WritableExportTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WritableExportTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WritableExportTemplate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("file_extension") != null && !jsonObj.get("file_extension").isJsonNull()) && !jsonObj.get("file_extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_extension").toString()));
      }
      if ((jsonObj.get("mime_type") != null && !jsonObj.get("mime_type").isJsonNull()) && !jsonObj.get("mime_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mime_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime_type").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("template_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_code").toString()));
      }
      if ((jsonObj.get("template_language") != null && !jsonObj.get("template_language").isJsonNull()) && !jsonObj.get("template_language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_language").toString()));
      }
      // validate the optional field `template_language`
      if (jsonObj.get("template_language") != null && !jsonObj.get("template_language").isJsonNull()) {
        TemplateLanguageEnum.validateJsonElement(jsonObj.get("template_language"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WritableExportTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WritableExportTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WritableExportTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WritableExportTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<WritableExportTemplate>() {
           @Override
           public void write(JsonWriter out, WritableExportTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WritableExportTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WritableExportTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WritableExportTemplate
   * @throws IOException if the JSON string is invalid with respect to WritableExportTemplate
   */
  public static WritableExportTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WritableExportTemplate.class);
  }

  /**
   * Convert an instance of WritableExportTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

