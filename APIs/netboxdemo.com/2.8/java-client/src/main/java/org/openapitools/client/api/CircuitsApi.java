/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Circuit;
import org.openapitools.client.model.CircuitTermination;
import org.openapitools.client.model.CircuitType;
import org.openapitools.client.model.CircuitsCircuitTerminationsList200Response;
import org.openapitools.client.model.CircuitsCircuitTypesList200Response;
import org.openapitools.client.model.CircuitsCircuitsList200Response;
import org.openapitools.client.model.CircuitsProvidersList200Response;
import org.openapitools.client.model.Provider;
import org.openapitools.client.model.WritableCircuit;
import org.openapitools.client.model.WritableCircuitTermination;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CircuitsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CircuitsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CircuitsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for circuitsCircuitTerminationsCreate
     * @param writableCircuitTermination  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsCreateCall(WritableCircuitTermination writableCircuitTermination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableCircuitTermination;

        // create path and map variables
        String localVarPath = "/circuits/circuit-terminations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTerminationsCreateValidateBeforeCall(WritableCircuitTermination writableCircuitTermination, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableCircuitTermination' is set
        if (writableCircuitTermination == null) {
            throw new ApiException("Missing the required parameter 'writableCircuitTermination' when calling circuitsCircuitTerminationsCreate(Async)");
        }

        return circuitsCircuitTerminationsCreateCall(writableCircuitTermination, _callback);

    }

    /**
     * 
     * 
     * @param writableCircuitTermination  (required)
     * @return CircuitTermination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CircuitTermination circuitsCircuitTerminationsCreate(WritableCircuitTermination writableCircuitTermination) throws ApiException {
        ApiResponse<CircuitTermination> localVarResp = circuitsCircuitTerminationsCreateWithHttpInfo(writableCircuitTermination);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableCircuitTermination  (required)
     * @return ApiResponse&lt;CircuitTermination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CircuitTermination> circuitsCircuitTerminationsCreateWithHttpInfo(WritableCircuitTermination writableCircuitTermination) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTerminationsCreateValidateBeforeCall(writableCircuitTermination, null);
        Type localVarReturnType = new TypeToken<CircuitTermination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableCircuitTermination  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsCreateAsync(WritableCircuitTermination writableCircuitTermination, final ApiCallback<CircuitTermination> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitTerminationsCreateValidateBeforeCall(writableCircuitTermination, _callback);
        Type localVarReturnType = new TypeToken<CircuitTermination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitTerminationsDelete
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/circuits/circuit-terminations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTerminationsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTerminationsDelete(Async)");
        }

        return circuitsCircuitTerminationsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit termination. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void circuitsCircuitTerminationsDelete(Integer id) throws ApiException {
        circuitsCircuitTerminationsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit termination. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> circuitsCircuitTerminationsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTerminationsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitTerminationsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitTerminationsList
     * @param termSide  (optional)
     * @param portSpeed  (optional)
     * @param upstreamSpeed  (optional)
     * @param xconnectId  (optional)
     * @param q  (optional)
     * @param circuitId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param termSideN  (optional)
     * @param portSpeedN  (optional)
     * @param portSpeedLte  (optional)
     * @param portSpeedLt  (optional)
     * @param portSpeedGte  (optional)
     * @param portSpeedGt  (optional)
     * @param upstreamSpeedN  (optional)
     * @param upstreamSpeedLte  (optional)
     * @param upstreamSpeedLt  (optional)
     * @param upstreamSpeedGte  (optional)
     * @param upstreamSpeedGt  (optional)
     * @param xconnectIdN  (optional)
     * @param xconnectIdIc  (optional)
     * @param xconnectIdNic  (optional)
     * @param xconnectIdIew  (optional)
     * @param xconnectIdNiew  (optional)
     * @param xconnectIdIsw  (optional)
     * @param xconnectIdNisw  (optional)
     * @param xconnectIdIe  (optional)
     * @param xconnectIdNie  (optional)
     * @param circuitIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsListCall(String termSide, String portSpeed, String upstreamSpeed, String xconnectId, String q, String circuitId, String siteId, String site, String termSideN, String portSpeedN, String portSpeedLte, String portSpeedLt, String portSpeedGte, String portSpeedGt, String upstreamSpeedN, String upstreamSpeedLte, String upstreamSpeedLt, String upstreamSpeedGte, String upstreamSpeedGt, String xconnectIdN, String xconnectIdIc, String xconnectIdNic, String xconnectIdIew, String xconnectIdNiew, String xconnectIdIsw, String xconnectIdNisw, String xconnectIdIe, String xconnectIdNie, String circuitIdN, String siteIdN, String siteN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/circuits/circuit-terminations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (termSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("term_side", termSide));
        }

        if (portSpeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port_speed", portSpeed));
        }

        if (upstreamSpeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upstream_speed", upstreamSpeed));
        }

        if (xconnectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id", xconnectId));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (circuitId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("circuit_id", circuitId));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (termSideN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("term_side__n", termSideN));
        }

        if (portSpeedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port_speed__n", portSpeedN));
        }

        if (portSpeedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port_speed__lte", portSpeedLte));
        }

        if (portSpeedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port_speed__lt", portSpeedLt));
        }

        if (portSpeedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port_speed__gte", portSpeedGte));
        }

        if (portSpeedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port_speed__gt", portSpeedGt));
        }

        if (upstreamSpeedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upstream_speed__n", upstreamSpeedN));
        }

        if (upstreamSpeedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upstream_speed__lte", upstreamSpeedLte));
        }

        if (upstreamSpeedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upstream_speed__lt", upstreamSpeedLt));
        }

        if (upstreamSpeedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upstream_speed__gte", upstreamSpeedGte));
        }

        if (upstreamSpeedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upstream_speed__gt", upstreamSpeedGt));
        }

        if (xconnectIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__n", xconnectIdN));
        }

        if (xconnectIdIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__ic", xconnectIdIc));
        }

        if (xconnectIdNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__nic", xconnectIdNic));
        }

        if (xconnectIdIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__iew", xconnectIdIew));
        }

        if (xconnectIdNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__niew", xconnectIdNiew));
        }

        if (xconnectIdIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__isw", xconnectIdIsw));
        }

        if (xconnectIdNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__nisw", xconnectIdNisw));
        }

        if (xconnectIdIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__ie", xconnectIdIe));
        }

        if (xconnectIdNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__nie", xconnectIdNie));
        }

        if (circuitIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("circuit_id__n", circuitIdN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTerminationsListValidateBeforeCall(String termSide, String portSpeed, String upstreamSpeed, String xconnectId, String q, String circuitId, String siteId, String site, String termSideN, String portSpeedN, String portSpeedLte, String portSpeedLt, String portSpeedGte, String portSpeedGt, String upstreamSpeedN, String upstreamSpeedLte, String upstreamSpeedLt, String upstreamSpeedGte, String upstreamSpeedGt, String xconnectIdN, String xconnectIdIc, String xconnectIdNic, String xconnectIdIew, String xconnectIdNiew, String xconnectIdIsw, String xconnectIdNisw, String xconnectIdIe, String xconnectIdNie, String circuitIdN, String siteIdN, String siteN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return circuitsCircuitTerminationsListCall(termSide, portSpeed, upstreamSpeed, xconnectId, q, circuitId, siteId, site, termSideN, portSpeedN, portSpeedLte, portSpeedLt, portSpeedGte, portSpeedGt, upstreamSpeedN, upstreamSpeedLte, upstreamSpeedLt, upstreamSpeedGte, upstreamSpeedGt, xconnectIdN, xconnectIdIc, xconnectIdNic, xconnectIdIew, xconnectIdNiew, xconnectIdIsw, xconnectIdNisw, xconnectIdIe, xconnectIdNie, circuitIdN, siteIdN, siteN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param termSide  (optional)
     * @param portSpeed  (optional)
     * @param upstreamSpeed  (optional)
     * @param xconnectId  (optional)
     * @param q  (optional)
     * @param circuitId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param termSideN  (optional)
     * @param portSpeedN  (optional)
     * @param portSpeedLte  (optional)
     * @param portSpeedLt  (optional)
     * @param portSpeedGte  (optional)
     * @param portSpeedGt  (optional)
     * @param upstreamSpeedN  (optional)
     * @param upstreamSpeedLte  (optional)
     * @param upstreamSpeedLt  (optional)
     * @param upstreamSpeedGte  (optional)
     * @param upstreamSpeedGt  (optional)
     * @param xconnectIdN  (optional)
     * @param xconnectIdIc  (optional)
     * @param xconnectIdNic  (optional)
     * @param xconnectIdIew  (optional)
     * @param xconnectIdNiew  (optional)
     * @param xconnectIdIsw  (optional)
     * @param xconnectIdNisw  (optional)
     * @param xconnectIdIe  (optional)
     * @param xconnectIdNie  (optional)
     * @param circuitIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return CircuitsCircuitTerminationsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CircuitsCircuitTerminationsList200Response circuitsCircuitTerminationsList(String termSide, String portSpeed, String upstreamSpeed, String xconnectId, String q, String circuitId, String siteId, String site, String termSideN, String portSpeedN, String portSpeedLte, String portSpeedLt, String portSpeedGte, String portSpeedGt, String upstreamSpeedN, String upstreamSpeedLte, String upstreamSpeedLt, String upstreamSpeedGte, String upstreamSpeedGt, String xconnectIdN, String xconnectIdIc, String xconnectIdNic, String xconnectIdIew, String xconnectIdNiew, String xconnectIdIsw, String xconnectIdNisw, String xconnectIdIe, String xconnectIdNie, String circuitIdN, String siteIdN, String siteN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<CircuitsCircuitTerminationsList200Response> localVarResp = circuitsCircuitTerminationsListWithHttpInfo(termSide, portSpeed, upstreamSpeed, xconnectId, q, circuitId, siteId, site, termSideN, portSpeedN, portSpeedLte, portSpeedLt, portSpeedGte, portSpeedGt, upstreamSpeedN, upstreamSpeedLte, upstreamSpeedLt, upstreamSpeedGte, upstreamSpeedGt, xconnectIdN, xconnectIdIc, xconnectIdNic, xconnectIdIew, xconnectIdNiew, xconnectIdIsw, xconnectIdNisw, xconnectIdIe, xconnectIdNie, circuitIdN, siteIdN, siteN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param termSide  (optional)
     * @param portSpeed  (optional)
     * @param upstreamSpeed  (optional)
     * @param xconnectId  (optional)
     * @param q  (optional)
     * @param circuitId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param termSideN  (optional)
     * @param portSpeedN  (optional)
     * @param portSpeedLte  (optional)
     * @param portSpeedLt  (optional)
     * @param portSpeedGte  (optional)
     * @param portSpeedGt  (optional)
     * @param upstreamSpeedN  (optional)
     * @param upstreamSpeedLte  (optional)
     * @param upstreamSpeedLt  (optional)
     * @param upstreamSpeedGte  (optional)
     * @param upstreamSpeedGt  (optional)
     * @param xconnectIdN  (optional)
     * @param xconnectIdIc  (optional)
     * @param xconnectIdNic  (optional)
     * @param xconnectIdIew  (optional)
     * @param xconnectIdNiew  (optional)
     * @param xconnectIdIsw  (optional)
     * @param xconnectIdNisw  (optional)
     * @param xconnectIdIe  (optional)
     * @param xconnectIdNie  (optional)
     * @param circuitIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;CircuitsCircuitTerminationsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CircuitsCircuitTerminationsList200Response> circuitsCircuitTerminationsListWithHttpInfo(String termSide, String portSpeed, String upstreamSpeed, String xconnectId, String q, String circuitId, String siteId, String site, String termSideN, String portSpeedN, String portSpeedLte, String portSpeedLt, String portSpeedGte, String portSpeedGt, String upstreamSpeedN, String upstreamSpeedLte, String upstreamSpeedLt, String upstreamSpeedGte, String upstreamSpeedGt, String xconnectIdN, String xconnectIdIc, String xconnectIdNic, String xconnectIdIew, String xconnectIdNiew, String xconnectIdIsw, String xconnectIdNisw, String xconnectIdIe, String xconnectIdNie, String circuitIdN, String siteIdN, String siteN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTerminationsListValidateBeforeCall(termSide, portSpeed, upstreamSpeed, xconnectId, q, circuitId, siteId, site, termSideN, portSpeedN, portSpeedLte, portSpeedLt, portSpeedGte, portSpeedGt, upstreamSpeedN, upstreamSpeedLte, upstreamSpeedLt, upstreamSpeedGte, upstreamSpeedGt, xconnectIdN, xconnectIdIc, xconnectIdNic, xconnectIdIew, xconnectIdNiew, xconnectIdIsw, xconnectIdNisw, xconnectIdIe, xconnectIdNie, circuitIdN, siteIdN, siteN, limit, offset, null);
        Type localVarReturnType = new TypeToken<CircuitsCircuitTerminationsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param termSide  (optional)
     * @param portSpeed  (optional)
     * @param upstreamSpeed  (optional)
     * @param xconnectId  (optional)
     * @param q  (optional)
     * @param circuitId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param termSideN  (optional)
     * @param portSpeedN  (optional)
     * @param portSpeedLte  (optional)
     * @param portSpeedLt  (optional)
     * @param portSpeedGte  (optional)
     * @param portSpeedGt  (optional)
     * @param upstreamSpeedN  (optional)
     * @param upstreamSpeedLte  (optional)
     * @param upstreamSpeedLt  (optional)
     * @param upstreamSpeedGte  (optional)
     * @param upstreamSpeedGt  (optional)
     * @param xconnectIdN  (optional)
     * @param xconnectIdIc  (optional)
     * @param xconnectIdNic  (optional)
     * @param xconnectIdIew  (optional)
     * @param xconnectIdNiew  (optional)
     * @param xconnectIdIsw  (optional)
     * @param xconnectIdNisw  (optional)
     * @param xconnectIdIe  (optional)
     * @param xconnectIdNie  (optional)
     * @param circuitIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsListAsync(String termSide, String portSpeed, String upstreamSpeed, String xconnectId, String q, String circuitId, String siteId, String site, String termSideN, String portSpeedN, String portSpeedLte, String portSpeedLt, String portSpeedGte, String portSpeedGt, String upstreamSpeedN, String upstreamSpeedLte, String upstreamSpeedLt, String upstreamSpeedGte, String upstreamSpeedGt, String xconnectIdN, String xconnectIdIc, String xconnectIdNic, String xconnectIdIew, String xconnectIdNiew, String xconnectIdIsw, String xconnectIdNisw, String xconnectIdIe, String xconnectIdNie, String circuitIdN, String siteIdN, String siteN, Integer limit, Integer offset, final ApiCallback<CircuitsCircuitTerminationsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitTerminationsListValidateBeforeCall(termSide, portSpeed, upstreamSpeed, xconnectId, q, circuitId, siteId, site, termSideN, portSpeedN, portSpeedLte, portSpeedLt, portSpeedGte, portSpeedGt, upstreamSpeedN, upstreamSpeedLte, upstreamSpeedLt, upstreamSpeedGte, upstreamSpeedGt, xconnectIdN, xconnectIdIc, xconnectIdNic, xconnectIdIew, xconnectIdNiew, xconnectIdIsw, xconnectIdNisw, xconnectIdIe, xconnectIdNie, circuitIdN, siteIdN, siteN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CircuitsCircuitTerminationsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitTerminationsPartialUpdate
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param writableCircuitTermination  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsPartialUpdateCall(Integer id, WritableCircuitTermination writableCircuitTermination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableCircuitTermination;

        // create path and map variables
        String localVarPath = "/circuits/circuit-terminations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTerminationsPartialUpdateValidateBeforeCall(Integer id, WritableCircuitTermination writableCircuitTermination, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTerminationsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableCircuitTermination' is set
        if (writableCircuitTermination == null) {
            throw new ApiException("Missing the required parameter 'writableCircuitTermination' when calling circuitsCircuitTerminationsPartialUpdate(Async)");
        }

        return circuitsCircuitTerminationsPartialUpdateCall(id, writableCircuitTermination, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param writableCircuitTermination  (required)
     * @return CircuitTermination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CircuitTermination circuitsCircuitTerminationsPartialUpdate(Integer id, WritableCircuitTermination writableCircuitTermination) throws ApiException {
        ApiResponse<CircuitTermination> localVarResp = circuitsCircuitTerminationsPartialUpdateWithHttpInfo(id, writableCircuitTermination);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param writableCircuitTermination  (required)
     * @return ApiResponse&lt;CircuitTermination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CircuitTermination> circuitsCircuitTerminationsPartialUpdateWithHttpInfo(Integer id, WritableCircuitTermination writableCircuitTermination) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTerminationsPartialUpdateValidateBeforeCall(id, writableCircuitTermination, null);
        Type localVarReturnType = new TypeToken<CircuitTermination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param writableCircuitTermination  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsPartialUpdateAsync(Integer id, WritableCircuitTermination writableCircuitTermination, final ApiCallback<CircuitTermination> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitTerminationsPartialUpdateValidateBeforeCall(id, writableCircuitTermination, _callback);
        Type localVarReturnType = new TypeToken<CircuitTermination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitTerminationsRead
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/circuits/circuit-terminations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTerminationsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTerminationsRead(Async)");
        }

        return circuitsCircuitTerminationsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this circuit termination. (required)
     * @return CircuitTermination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CircuitTermination circuitsCircuitTerminationsRead(Integer id) throws ApiException {
        ApiResponse<CircuitTermination> localVarResp = circuitsCircuitTerminationsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this circuit termination. (required)
     * @return ApiResponse&lt;CircuitTermination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CircuitTermination> circuitsCircuitTerminationsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTerminationsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CircuitTermination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsReadAsync(Integer id, final ApiCallback<CircuitTermination> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitTerminationsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CircuitTermination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitTerminationsUpdate
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param writableCircuitTermination  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsUpdateCall(Integer id, WritableCircuitTermination writableCircuitTermination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableCircuitTermination;

        // create path and map variables
        String localVarPath = "/circuits/circuit-terminations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTerminationsUpdateValidateBeforeCall(Integer id, WritableCircuitTermination writableCircuitTermination, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTerminationsUpdate(Async)");
        }

        // verify the required parameter 'writableCircuitTermination' is set
        if (writableCircuitTermination == null) {
            throw new ApiException("Missing the required parameter 'writableCircuitTermination' when calling circuitsCircuitTerminationsUpdate(Async)");
        }

        return circuitsCircuitTerminationsUpdateCall(id, writableCircuitTermination, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param writableCircuitTermination  (required)
     * @return CircuitTermination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CircuitTermination circuitsCircuitTerminationsUpdate(Integer id, WritableCircuitTermination writableCircuitTermination) throws ApiException {
        ApiResponse<CircuitTermination> localVarResp = circuitsCircuitTerminationsUpdateWithHttpInfo(id, writableCircuitTermination);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param writableCircuitTermination  (required)
     * @return ApiResponse&lt;CircuitTermination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CircuitTermination> circuitsCircuitTerminationsUpdateWithHttpInfo(Integer id, WritableCircuitTermination writableCircuitTermination) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTerminationsUpdateValidateBeforeCall(id, writableCircuitTermination, null);
        Type localVarReturnType = new TypeToken<CircuitTermination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param writableCircuitTermination  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsUpdateAsync(Integer id, WritableCircuitTermination writableCircuitTermination, final ApiCallback<CircuitTermination> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitTerminationsUpdateValidateBeforeCall(id, writableCircuitTermination, _callback);
        Type localVarReturnType = new TypeToken<CircuitTermination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitTypesCreate
     * @param circuitType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTypesCreateCall(CircuitType circuitType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = circuitType;

        // create path and map variables
        String localVarPath = "/circuits/circuit-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTypesCreateValidateBeforeCall(CircuitType circuitType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'circuitType' is set
        if (circuitType == null) {
            throw new ApiException("Missing the required parameter 'circuitType' when calling circuitsCircuitTypesCreate(Async)");
        }

        return circuitsCircuitTypesCreateCall(circuitType, _callback);

    }

    /**
     * 
     * 
     * @param circuitType  (required)
     * @return CircuitType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CircuitType circuitsCircuitTypesCreate(CircuitType circuitType) throws ApiException {
        ApiResponse<CircuitType> localVarResp = circuitsCircuitTypesCreateWithHttpInfo(circuitType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param circuitType  (required)
     * @return ApiResponse&lt;CircuitType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CircuitType> circuitsCircuitTypesCreateWithHttpInfo(CircuitType circuitType) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTypesCreateValidateBeforeCall(circuitType, null);
        Type localVarReturnType = new TypeToken<CircuitType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param circuitType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTypesCreateAsync(CircuitType circuitType, final ApiCallback<CircuitType> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitTypesCreateValidateBeforeCall(circuitType, _callback);
        Type localVarReturnType = new TypeToken<CircuitType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitTypesDelete
     * @param id A unique integer value identifying this circuit type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTypesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/circuits/circuit-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTypesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTypesDelete(Async)");
        }

        return circuitsCircuitTypesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit type. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void circuitsCircuitTypesDelete(Integer id) throws ApiException {
        circuitsCircuitTypesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit type. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> circuitsCircuitTypesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTypesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this circuit type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTypesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitTypesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitTypesList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTypesListCall(String id, String name, String slug, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/circuits/circuit-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTypesListValidateBeforeCall(String id, String name, String slug, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return circuitsCircuitTypesListCall(id, name, slug, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return CircuitsCircuitTypesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CircuitsCircuitTypesList200Response circuitsCircuitTypesList(String id, String name, String slug, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, Integer limit, Integer offset) throws ApiException {
        ApiResponse<CircuitsCircuitTypesList200Response> localVarResp = circuitsCircuitTypesListWithHttpInfo(id, name, slug, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;CircuitsCircuitTypesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CircuitsCircuitTypesList200Response> circuitsCircuitTypesListWithHttpInfo(String id, String name, String slug, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTypesListValidateBeforeCall(id, name, slug, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, limit, offset, null);
        Type localVarReturnType = new TypeToken<CircuitsCircuitTypesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTypesListAsync(String id, String name, String slug, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, Integer limit, Integer offset, final ApiCallback<CircuitsCircuitTypesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitTypesListValidateBeforeCall(id, name, slug, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CircuitsCircuitTypesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitTypesPartialUpdate
     * @param id A unique integer value identifying this circuit type. (required)
     * @param circuitType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTypesPartialUpdateCall(Integer id, CircuitType circuitType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = circuitType;

        // create path and map variables
        String localVarPath = "/circuits/circuit-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTypesPartialUpdateValidateBeforeCall(Integer id, CircuitType circuitType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTypesPartialUpdate(Async)");
        }

        // verify the required parameter 'circuitType' is set
        if (circuitType == null) {
            throw new ApiException("Missing the required parameter 'circuitType' when calling circuitsCircuitTypesPartialUpdate(Async)");
        }

        return circuitsCircuitTypesPartialUpdateCall(id, circuitType, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit type. (required)
     * @param circuitType  (required)
     * @return CircuitType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CircuitType circuitsCircuitTypesPartialUpdate(Integer id, CircuitType circuitType) throws ApiException {
        ApiResponse<CircuitType> localVarResp = circuitsCircuitTypesPartialUpdateWithHttpInfo(id, circuitType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit type. (required)
     * @param circuitType  (required)
     * @return ApiResponse&lt;CircuitType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CircuitType> circuitsCircuitTypesPartialUpdateWithHttpInfo(Integer id, CircuitType circuitType) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTypesPartialUpdateValidateBeforeCall(id, circuitType, null);
        Type localVarReturnType = new TypeToken<CircuitType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this circuit type. (required)
     * @param circuitType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTypesPartialUpdateAsync(Integer id, CircuitType circuitType, final ApiCallback<CircuitType> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitTypesPartialUpdateValidateBeforeCall(id, circuitType, _callback);
        Type localVarReturnType = new TypeToken<CircuitType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitTypesRead
     * @param id A unique integer value identifying this circuit type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTypesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/circuits/circuit-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTypesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTypesRead(Async)");
        }

        return circuitsCircuitTypesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this circuit type. (required)
     * @return CircuitType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CircuitType circuitsCircuitTypesRead(Integer id) throws ApiException {
        ApiResponse<CircuitType> localVarResp = circuitsCircuitTypesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this circuit type. (required)
     * @return ApiResponse&lt;CircuitType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CircuitType> circuitsCircuitTypesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTypesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CircuitType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this circuit type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTypesReadAsync(Integer id, final ApiCallback<CircuitType> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitTypesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CircuitType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitTypesUpdate
     * @param id A unique integer value identifying this circuit type. (required)
     * @param circuitType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTypesUpdateCall(Integer id, CircuitType circuitType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = circuitType;

        // create path and map variables
        String localVarPath = "/circuits/circuit-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTypesUpdateValidateBeforeCall(Integer id, CircuitType circuitType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTypesUpdate(Async)");
        }

        // verify the required parameter 'circuitType' is set
        if (circuitType == null) {
            throw new ApiException("Missing the required parameter 'circuitType' when calling circuitsCircuitTypesUpdate(Async)");
        }

        return circuitsCircuitTypesUpdateCall(id, circuitType, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit type. (required)
     * @param circuitType  (required)
     * @return CircuitType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CircuitType circuitsCircuitTypesUpdate(Integer id, CircuitType circuitType) throws ApiException {
        ApiResponse<CircuitType> localVarResp = circuitsCircuitTypesUpdateWithHttpInfo(id, circuitType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit type. (required)
     * @param circuitType  (required)
     * @return ApiResponse&lt;CircuitType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CircuitType> circuitsCircuitTypesUpdateWithHttpInfo(Integer id, CircuitType circuitType) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTypesUpdateValidateBeforeCall(id, circuitType, null);
        Type localVarReturnType = new TypeToken<CircuitType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this circuit type. (required)
     * @param circuitType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitTypesUpdateAsync(Integer id, CircuitType circuitType, final ApiCallback<CircuitType> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitTypesUpdateValidateBeforeCall(id, circuitType, _callback);
        Type localVarReturnType = new TypeToken<CircuitType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitsCreate
     * @param writableCircuit  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitsCreateCall(WritableCircuit writableCircuit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableCircuit;

        // create path and map variables
        String localVarPath = "/circuits/circuits/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitsCreateValidateBeforeCall(WritableCircuit writableCircuit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableCircuit' is set
        if (writableCircuit == null) {
            throw new ApiException("Missing the required parameter 'writableCircuit' when calling circuitsCircuitsCreate(Async)");
        }

        return circuitsCircuitsCreateCall(writableCircuit, _callback);

    }

    /**
     * 
     * 
     * @param writableCircuit  (required)
     * @return Circuit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Circuit circuitsCircuitsCreate(WritableCircuit writableCircuit) throws ApiException {
        ApiResponse<Circuit> localVarResp = circuitsCircuitsCreateWithHttpInfo(writableCircuit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableCircuit  (required)
     * @return ApiResponse&lt;Circuit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Circuit> circuitsCircuitsCreateWithHttpInfo(WritableCircuit writableCircuit) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitsCreateValidateBeforeCall(writableCircuit, null);
        Type localVarReturnType = new TypeToken<Circuit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableCircuit  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitsCreateAsync(WritableCircuit writableCircuit, final ApiCallback<Circuit> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitsCreateValidateBeforeCall(writableCircuit, _callback);
        Type localVarReturnType = new TypeToken<Circuit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitsDelete
     * @param id A unique integer value identifying this circuit. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/circuits/circuits/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitsDelete(Async)");
        }

        return circuitsCircuitsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void circuitsCircuitsDelete(Integer id) throws ApiException {
        circuitsCircuitsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> circuitsCircuitsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this circuit. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitsList
     * @param id  (optional)
     * @param cid  (optional)
     * @param installDate  (optional)
     * @param commitRate  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param providerId  (optional)
     * @param provider  (optional)
     * @param typeId  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param cidN  (optional)
     * @param cidIc  (optional)
     * @param cidNic  (optional)
     * @param cidIew  (optional)
     * @param cidNiew  (optional)
     * @param cidIsw  (optional)
     * @param cidNisw  (optional)
     * @param cidIe  (optional)
     * @param cidNie  (optional)
     * @param installDateN  (optional)
     * @param installDateLte  (optional)
     * @param installDateLt  (optional)
     * @param installDateGte  (optional)
     * @param installDateGt  (optional)
     * @param commitRateN  (optional)
     * @param commitRateLte  (optional)
     * @param commitRateLt  (optional)
     * @param commitRateGte  (optional)
     * @param commitRateGt  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param providerIdN  (optional)
     * @param providerN  (optional)
     * @param typeIdN  (optional)
     * @param typeN  (optional)
     * @param statusN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitsListCall(String id, String cid, String installDate, String commitRate, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String providerId, String provider, String typeId, String type, String status, String siteId, String site, String regionId, String region, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String cidN, String cidIc, String cidNic, String cidIew, String cidNiew, String cidIsw, String cidNisw, String cidIe, String cidNie, String installDateN, String installDateLte, String installDateLt, String installDateGte, String installDateGt, String commitRateN, String commitRateLte, String commitRateLt, String commitRateGte, String commitRateGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String providerIdN, String providerN, String typeIdN, String typeN, String statusN, String siteIdN, String siteN, String regionIdN, String regionN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/circuits/circuits/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        if (installDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("install_date", installDate));
        }

        if (commitRate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit_rate", commitRate));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (providerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider_id", providerId));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        if (typeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type_id", typeId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (cidN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__n", cidN));
        }

        if (cidIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__ic", cidIc));
        }

        if (cidNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__nic", cidNic));
        }

        if (cidIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__iew", cidIew));
        }

        if (cidNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__niew", cidNiew));
        }

        if (cidIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__isw", cidIsw));
        }

        if (cidNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__nisw", cidNisw));
        }

        if (cidIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__ie", cidIe));
        }

        if (cidNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__nie", cidNie));
        }

        if (installDateN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("install_date__n", installDateN));
        }

        if (installDateLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("install_date__lte", installDateLte));
        }

        if (installDateLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("install_date__lt", installDateLt));
        }

        if (installDateGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("install_date__gte", installDateGte));
        }

        if (installDateGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("install_date__gt", installDateGt));
        }

        if (commitRateN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit_rate__n", commitRateN));
        }

        if (commitRateLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit_rate__lte", commitRateLte));
        }

        if (commitRateLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit_rate__lt", commitRateLt));
        }

        if (commitRateGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit_rate__gte", commitRateGte));
        }

        if (commitRateGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit_rate__gt", commitRateGt));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (providerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider_id__n", providerIdN));
        }

        if (providerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider__n", providerN));
        }

        if (typeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type_id__n", typeIdN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitsListValidateBeforeCall(String id, String cid, String installDate, String commitRate, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String providerId, String provider, String typeId, String type, String status, String siteId, String site, String regionId, String region, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String cidN, String cidIc, String cidNic, String cidIew, String cidNiew, String cidIsw, String cidNisw, String cidIe, String cidNie, String installDateN, String installDateLte, String installDateLt, String installDateGte, String installDateGt, String commitRateN, String commitRateLte, String commitRateLt, String commitRateGte, String commitRateGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String providerIdN, String providerN, String typeIdN, String typeN, String statusN, String siteIdN, String siteN, String regionIdN, String regionN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return circuitsCircuitsListCall(id, cid, installDate, commitRate, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, providerId, provider, typeId, type, status, siteId, site, regionId, region, tag, idN, idLte, idLt, idGte, idGt, cidN, cidIc, cidNic, cidIew, cidNiew, cidIsw, cidNisw, cidIe, cidNie, installDateN, installDateLte, installDateLt, installDateGte, installDateGt, commitRateN, commitRateLte, commitRateLt, commitRateGte, commitRateGt, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, providerIdN, providerN, typeIdN, typeN, statusN, siteIdN, siteN, regionIdN, regionN, tagN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param cid  (optional)
     * @param installDate  (optional)
     * @param commitRate  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param providerId  (optional)
     * @param provider  (optional)
     * @param typeId  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param cidN  (optional)
     * @param cidIc  (optional)
     * @param cidNic  (optional)
     * @param cidIew  (optional)
     * @param cidNiew  (optional)
     * @param cidIsw  (optional)
     * @param cidNisw  (optional)
     * @param cidIe  (optional)
     * @param cidNie  (optional)
     * @param installDateN  (optional)
     * @param installDateLte  (optional)
     * @param installDateLt  (optional)
     * @param installDateGte  (optional)
     * @param installDateGt  (optional)
     * @param commitRateN  (optional)
     * @param commitRateLte  (optional)
     * @param commitRateLt  (optional)
     * @param commitRateGte  (optional)
     * @param commitRateGt  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param providerIdN  (optional)
     * @param providerN  (optional)
     * @param typeIdN  (optional)
     * @param typeN  (optional)
     * @param statusN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return CircuitsCircuitsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CircuitsCircuitsList200Response circuitsCircuitsList(String id, String cid, String installDate, String commitRate, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String providerId, String provider, String typeId, String type, String status, String siteId, String site, String regionId, String region, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String cidN, String cidIc, String cidNic, String cidIew, String cidNiew, String cidIsw, String cidNisw, String cidIe, String cidNie, String installDateN, String installDateLte, String installDateLt, String installDateGte, String installDateGt, String commitRateN, String commitRateLte, String commitRateLt, String commitRateGte, String commitRateGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String providerIdN, String providerN, String typeIdN, String typeN, String statusN, String siteIdN, String siteN, String regionIdN, String regionN, String tagN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<CircuitsCircuitsList200Response> localVarResp = circuitsCircuitsListWithHttpInfo(id, cid, installDate, commitRate, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, providerId, provider, typeId, type, status, siteId, site, regionId, region, tag, idN, idLte, idLt, idGte, idGt, cidN, cidIc, cidNic, cidIew, cidNiew, cidIsw, cidNisw, cidIe, cidNie, installDateN, installDateLte, installDateLt, installDateGte, installDateGt, commitRateN, commitRateLte, commitRateLt, commitRateGte, commitRateGt, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, providerIdN, providerN, typeIdN, typeN, statusN, siteIdN, siteN, regionIdN, regionN, tagN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param cid  (optional)
     * @param installDate  (optional)
     * @param commitRate  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param providerId  (optional)
     * @param provider  (optional)
     * @param typeId  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param cidN  (optional)
     * @param cidIc  (optional)
     * @param cidNic  (optional)
     * @param cidIew  (optional)
     * @param cidNiew  (optional)
     * @param cidIsw  (optional)
     * @param cidNisw  (optional)
     * @param cidIe  (optional)
     * @param cidNie  (optional)
     * @param installDateN  (optional)
     * @param installDateLte  (optional)
     * @param installDateLt  (optional)
     * @param installDateGte  (optional)
     * @param installDateGt  (optional)
     * @param commitRateN  (optional)
     * @param commitRateLte  (optional)
     * @param commitRateLt  (optional)
     * @param commitRateGte  (optional)
     * @param commitRateGt  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param providerIdN  (optional)
     * @param providerN  (optional)
     * @param typeIdN  (optional)
     * @param typeN  (optional)
     * @param statusN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;CircuitsCircuitsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CircuitsCircuitsList200Response> circuitsCircuitsListWithHttpInfo(String id, String cid, String installDate, String commitRate, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String providerId, String provider, String typeId, String type, String status, String siteId, String site, String regionId, String region, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String cidN, String cidIc, String cidNic, String cidIew, String cidNiew, String cidIsw, String cidNisw, String cidIe, String cidNie, String installDateN, String installDateLte, String installDateLt, String installDateGte, String installDateGt, String commitRateN, String commitRateLte, String commitRateLt, String commitRateGte, String commitRateGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String providerIdN, String providerN, String typeIdN, String typeN, String statusN, String siteIdN, String siteN, String regionIdN, String regionN, String tagN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitsListValidateBeforeCall(id, cid, installDate, commitRate, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, providerId, provider, typeId, type, status, siteId, site, regionId, region, tag, idN, idLte, idLt, idGte, idGt, cidN, cidIc, cidNic, cidIew, cidNiew, cidIsw, cidNisw, cidIe, cidNie, installDateN, installDateLte, installDateLt, installDateGte, installDateGt, commitRateN, commitRateLte, commitRateLt, commitRateGte, commitRateGt, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, providerIdN, providerN, typeIdN, typeN, statusN, siteIdN, siteN, regionIdN, regionN, tagN, limit, offset, null);
        Type localVarReturnType = new TypeToken<CircuitsCircuitsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param cid  (optional)
     * @param installDate  (optional)
     * @param commitRate  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param providerId  (optional)
     * @param provider  (optional)
     * @param typeId  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param cidN  (optional)
     * @param cidIc  (optional)
     * @param cidNic  (optional)
     * @param cidIew  (optional)
     * @param cidNiew  (optional)
     * @param cidIsw  (optional)
     * @param cidNisw  (optional)
     * @param cidIe  (optional)
     * @param cidNie  (optional)
     * @param installDateN  (optional)
     * @param installDateLte  (optional)
     * @param installDateLt  (optional)
     * @param installDateGte  (optional)
     * @param installDateGt  (optional)
     * @param commitRateN  (optional)
     * @param commitRateLte  (optional)
     * @param commitRateLt  (optional)
     * @param commitRateGte  (optional)
     * @param commitRateGt  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param providerIdN  (optional)
     * @param providerN  (optional)
     * @param typeIdN  (optional)
     * @param typeN  (optional)
     * @param statusN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitsListAsync(String id, String cid, String installDate, String commitRate, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String providerId, String provider, String typeId, String type, String status, String siteId, String site, String regionId, String region, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String cidN, String cidIc, String cidNic, String cidIew, String cidNiew, String cidIsw, String cidNisw, String cidIe, String cidNie, String installDateN, String installDateLte, String installDateLt, String installDateGte, String installDateGt, String commitRateN, String commitRateLte, String commitRateLt, String commitRateGte, String commitRateGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String providerIdN, String providerN, String typeIdN, String typeN, String statusN, String siteIdN, String siteN, String regionIdN, String regionN, String tagN, Integer limit, Integer offset, final ApiCallback<CircuitsCircuitsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitsListValidateBeforeCall(id, cid, installDate, commitRate, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, providerId, provider, typeId, type, status, siteId, site, regionId, region, tag, idN, idLte, idLt, idGte, idGt, cidN, cidIc, cidNic, cidIew, cidNiew, cidIsw, cidNisw, cidIe, cidNie, installDateN, installDateLte, installDateLt, installDateGte, installDateGt, commitRateN, commitRateLte, commitRateLt, commitRateGte, commitRateGt, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, providerIdN, providerN, typeIdN, typeN, statusN, siteIdN, siteN, regionIdN, regionN, tagN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CircuitsCircuitsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitsPartialUpdate
     * @param id A unique integer value identifying this circuit. (required)
     * @param writableCircuit  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitsPartialUpdateCall(Integer id, WritableCircuit writableCircuit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableCircuit;

        // create path and map variables
        String localVarPath = "/circuits/circuits/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitsPartialUpdateValidateBeforeCall(Integer id, WritableCircuit writableCircuit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableCircuit' is set
        if (writableCircuit == null) {
            throw new ApiException("Missing the required parameter 'writableCircuit' when calling circuitsCircuitsPartialUpdate(Async)");
        }

        return circuitsCircuitsPartialUpdateCall(id, writableCircuit, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit. (required)
     * @param writableCircuit  (required)
     * @return Circuit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Circuit circuitsCircuitsPartialUpdate(Integer id, WritableCircuit writableCircuit) throws ApiException {
        ApiResponse<Circuit> localVarResp = circuitsCircuitsPartialUpdateWithHttpInfo(id, writableCircuit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit. (required)
     * @param writableCircuit  (required)
     * @return ApiResponse&lt;Circuit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Circuit> circuitsCircuitsPartialUpdateWithHttpInfo(Integer id, WritableCircuit writableCircuit) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitsPartialUpdateValidateBeforeCall(id, writableCircuit, null);
        Type localVarReturnType = new TypeToken<Circuit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this circuit. (required)
     * @param writableCircuit  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitsPartialUpdateAsync(Integer id, WritableCircuit writableCircuit, final ApiCallback<Circuit> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitsPartialUpdateValidateBeforeCall(id, writableCircuit, _callback);
        Type localVarReturnType = new TypeToken<Circuit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitsRead
     * @param id A unique integer value identifying this circuit. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/circuits/circuits/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitsRead(Async)");
        }

        return circuitsCircuitsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this circuit. (required)
     * @return Circuit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Circuit circuitsCircuitsRead(Integer id) throws ApiException {
        ApiResponse<Circuit> localVarResp = circuitsCircuitsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this circuit. (required)
     * @return ApiResponse&lt;Circuit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Circuit> circuitsCircuitsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Circuit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this circuit. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitsReadAsync(Integer id, final ApiCallback<Circuit> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Circuit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsCircuitsUpdate
     * @param id A unique integer value identifying this circuit. (required)
     * @param writableCircuit  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitsUpdateCall(Integer id, WritableCircuit writableCircuit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableCircuit;

        // create path and map variables
        String localVarPath = "/circuits/circuits/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitsUpdateValidateBeforeCall(Integer id, WritableCircuit writableCircuit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitsUpdate(Async)");
        }

        // verify the required parameter 'writableCircuit' is set
        if (writableCircuit == null) {
            throw new ApiException("Missing the required parameter 'writableCircuit' when calling circuitsCircuitsUpdate(Async)");
        }

        return circuitsCircuitsUpdateCall(id, writableCircuit, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit. (required)
     * @param writableCircuit  (required)
     * @return Circuit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Circuit circuitsCircuitsUpdate(Integer id, WritableCircuit writableCircuit) throws ApiException {
        ApiResponse<Circuit> localVarResp = circuitsCircuitsUpdateWithHttpInfo(id, writableCircuit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this circuit. (required)
     * @param writableCircuit  (required)
     * @return ApiResponse&lt;Circuit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Circuit> circuitsCircuitsUpdateWithHttpInfo(Integer id, WritableCircuit writableCircuit) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitsUpdateValidateBeforeCall(id, writableCircuit, null);
        Type localVarReturnType = new TypeToken<Circuit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this circuit. (required)
     * @param writableCircuit  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsCircuitsUpdateAsync(Integer id, WritableCircuit writableCircuit, final ApiCallback<Circuit> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsCircuitsUpdateValidateBeforeCall(id, writableCircuit, _callback);
        Type localVarReturnType = new TypeToken<Circuit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsProvidersCreate
     * @param provider  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsProvidersCreateCall(Provider provider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provider;

        // create path and map variables
        String localVarPath = "/circuits/providers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProvidersCreateValidateBeforeCall(Provider provider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling circuitsProvidersCreate(Async)");
        }

        return circuitsProvidersCreateCall(provider, _callback);

    }

    /**
     * 
     * 
     * @param provider  (required)
     * @return Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Provider circuitsProvidersCreate(Provider provider) throws ApiException {
        ApiResponse<Provider> localVarResp = circuitsProvidersCreateWithHttpInfo(provider);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param provider  (required)
     * @return ApiResponse&lt;Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Provider> circuitsProvidersCreateWithHttpInfo(Provider provider) throws ApiException {
        okhttp3.Call localVarCall = circuitsProvidersCreateValidateBeforeCall(provider, null);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param provider  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsProvidersCreateAsync(Provider provider, final ApiCallback<Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsProvidersCreateValidateBeforeCall(provider, _callback);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsProvidersDelete
     * @param id A unique integer value identifying this provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsProvidersDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/circuits/providers/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProvidersDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsProvidersDelete(Async)");
        }

        return circuitsProvidersDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void circuitsProvidersDelete(Integer id) throws ApiException {
        circuitsProvidersDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> circuitsProvidersDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsProvidersDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsProvidersDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsProvidersDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsProvidersGraphs
     * @param id A unique integer value identifying this provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsProvidersGraphsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/circuits/providers/{id}/graphs/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProvidersGraphsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsProvidersGraphs(Async)");
        }

        return circuitsProvidersGraphsCall(id, _callback);

    }

    /**
     * 
     * A convenience method for rendering graphs for a particular provider.
     * @param id A unique integer value identifying this provider. (required)
     * @return Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Provider circuitsProvidersGraphs(Integer id) throws ApiException {
        ApiResponse<Provider> localVarResp = circuitsProvidersGraphsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * A convenience method for rendering graphs for a particular provider.
     * @param id A unique integer value identifying this provider. (required)
     * @return ApiResponse&lt;Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Provider> circuitsProvidersGraphsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsProvidersGraphsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A convenience method for rendering graphs for a particular provider.
     * @param id A unique integer value identifying this provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsProvidersGraphsAsync(Integer id, final ApiCallback<Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsProvidersGraphsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsProvidersList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param asn  (optional)
     * @param account  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param asnN  (optional)
     * @param asnLte  (optional)
     * @param asnLt  (optional)
     * @param asnGte  (optional)
     * @param asnGt  (optional)
     * @param accountN  (optional)
     * @param accountIc  (optional)
     * @param accountNic  (optional)
     * @param accountIew  (optional)
     * @param accountNiew  (optional)
     * @param accountIsw  (optional)
     * @param accountNisw  (optional)
     * @param accountIe  (optional)
     * @param accountNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsProvidersListCall(String id, String name, String slug, String asn, String account, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteId, String site, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String accountN, String accountIc, String accountNic, String accountIew, String accountNiew, String accountIsw, String accountNisw, String accountIe, String accountNie, String regionIdN, String regionN, String siteIdN, String siteN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/circuits/providers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (asn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn", asn));
        }

        if (account != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account", account));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (asnN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__n", asnN));
        }

        if (asnLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__lte", asnLte));
        }

        if (asnLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__lt", asnLt));
        }

        if (asnGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__gte", asnGte));
        }

        if (asnGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__gt", asnGt));
        }

        if (accountN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__n", accountN));
        }

        if (accountIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__ic", accountIc));
        }

        if (accountNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__nic", accountNic));
        }

        if (accountIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__iew", accountIew));
        }

        if (accountNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__niew", accountNiew));
        }

        if (accountIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__isw", accountIsw));
        }

        if (accountNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__nisw", accountNisw));
        }

        if (accountIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__ie", accountIe));
        }

        if (accountNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__nie", accountNie));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProvidersListValidateBeforeCall(String id, String name, String slug, String asn, String account, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteId, String site, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String accountN, String accountIc, String accountNic, String accountIew, String accountNiew, String accountIsw, String accountNisw, String accountIe, String accountNie, String regionIdN, String regionN, String siteIdN, String siteN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return circuitsProvidersListCall(id, name, slug, asn, account, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, regionId, region, siteId, site, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, asnN, asnLte, asnLt, asnGte, asnGt, accountN, accountIc, accountNic, accountIew, accountNiew, accountIsw, accountNisw, accountIe, accountNie, regionIdN, regionN, siteIdN, siteN, tagN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param asn  (optional)
     * @param account  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param asnN  (optional)
     * @param asnLte  (optional)
     * @param asnLt  (optional)
     * @param asnGte  (optional)
     * @param asnGt  (optional)
     * @param accountN  (optional)
     * @param accountIc  (optional)
     * @param accountNic  (optional)
     * @param accountIew  (optional)
     * @param accountNiew  (optional)
     * @param accountIsw  (optional)
     * @param accountNisw  (optional)
     * @param accountIe  (optional)
     * @param accountNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return CircuitsProvidersList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CircuitsProvidersList200Response circuitsProvidersList(String id, String name, String slug, String asn, String account, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteId, String site, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String accountN, String accountIc, String accountNic, String accountIew, String accountNiew, String accountIsw, String accountNisw, String accountIe, String accountNie, String regionIdN, String regionN, String siteIdN, String siteN, String tagN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<CircuitsProvidersList200Response> localVarResp = circuitsProvidersListWithHttpInfo(id, name, slug, asn, account, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, regionId, region, siteId, site, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, asnN, asnLte, asnLt, asnGte, asnGt, accountN, accountIc, accountNic, accountIew, accountNiew, accountIsw, accountNisw, accountIe, accountNie, regionIdN, regionN, siteIdN, siteN, tagN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param asn  (optional)
     * @param account  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param asnN  (optional)
     * @param asnLte  (optional)
     * @param asnLt  (optional)
     * @param asnGte  (optional)
     * @param asnGt  (optional)
     * @param accountN  (optional)
     * @param accountIc  (optional)
     * @param accountNic  (optional)
     * @param accountIew  (optional)
     * @param accountNiew  (optional)
     * @param accountIsw  (optional)
     * @param accountNisw  (optional)
     * @param accountIe  (optional)
     * @param accountNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;CircuitsProvidersList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CircuitsProvidersList200Response> circuitsProvidersListWithHttpInfo(String id, String name, String slug, String asn, String account, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteId, String site, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String accountN, String accountIc, String accountNic, String accountIew, String accountNiew, String accountIsw, String accountNisw, String accountIe, String accountNie, String regionIdN, String regionN, String siteIdN, String siteN, String tagN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = circuitsProvidersListValidateBeforeCall(id, name, slug, asn, account, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, regionId, region, siteId, site, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, asnN, asnLte, asnLt, asnGte, asnGt, accountN, accountIc, accountNic, accountIew, accountNiew, accountIsw, accountNisw, accountIe, accountNie, regionIdN, regionN, siteIdN, siteN, tagN, limit, offset, null);
        Type localVarReturnType = new TypeToken<CircuitsProvidersList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param asn  (optional)
     * @param account  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param asnN  (optional)
     * @param asnLte  (optional)
     * @param asnLt  (optional)
     * @param asnGte  (optional)
     * @param asnGt  (optional)
     * @param accountN  (optional)
     * @param accountIc  (optional)
     * @param accountNic  (optional)
     * @param accountIew  (optional)
     * @param accountNiew  (optional)
     * @param accountIsw  (optional)
     * @param accountNisw  (optional)
     * @param accountIe  (optional)
     * @param accountNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsProvidersListAsync(String id, String name, String slug, String asn, String account, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteId, String site, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String accountN, String accountIc, String accountNic, String accountIew, String accountNiew, String accountIsw, String accountNisw, String accountIe, String accountNie, String regionIdN, String regionN, String siteIdN, String siteN, String tagN, Integer limit, Integer offset, final ApiCallback<CircuitsProvidersList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsProvidersListValidateBeforeCall(id, name, slug, asn, account, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, regionId, region, siteId, site, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, asnN, asnLte, asnLt, asnGte, asnGt, accountN, accountIc, accountNic, accountIew, accountNiew, accountIsw, accountNisw, accountIe, accountNie, regionIdN, regionN, siteIdN, siteN, tagN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CircuitsProvidersList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsProvidersPartialUpdate
     * @param id A unique integer value identifying this provider. (required)
     * @param provider  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsProvidersPartialUpdateCall(Integer id, Provider provider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provider;

        // create path and map variables
        String localVarPath = "/circuits/providers/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProvidersPartialUpdateValidateBeforeCall(Integer id, Provider provider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsProvidersPartialUpdate(Async)");
        }

        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling circuitsProvidersPartialUpdate(Async)");
        }

        return circuitsProvidersPartialUpdateCall(id, provider, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this provider. (required)
     * @param provider  (required)
     * @return Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Provider circuitsProvidersPartialUpdate(Integer id, Provider provider) throws ApiException {
        ApiResponse<Provider> localVarResp = circuitsProvidersPartialUpdateWithHttpInfo(id, provider);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this provider. (required)
     * @param provider  (required)
     * @return ApiResponse&lt;Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Provider> circuitsProvidersPartialUpdateWithHttpInfo(Integer id, Provider provider) throws ApiException {
        okhttp3.Call localVarCall = circuitsProvidersPartialUpdateValidateBeforeCall(id, provider, null);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this provider. (required)
     * @param provider  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsProvidersPartialUpdateAsync(Integer id, Provider provider, final ApiCallback<Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsProvidersPartialUpdateValidateBeforeCall(id, provider, _callback);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsProvidersRead
     * @param id A unique integer value identifying this provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsProvidersReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/circuits/providers/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProvidersReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsProvidersRead(Async)");
        }

        return circuitsProvidersReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this provider. (required)
     * @return Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Provider circuitsProvidersRead(Integer id) throws ApiException {
        ApiResponse<Provider> localVarResp = circuitsProvidersReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this provider. (required)
     * @return ApiResponse&lt;Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Provider> circuitsProvidersReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsProvidersReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsProvidersReadAsync(Integer id, final ApiCallback<Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsProvidersReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for circuitsProvidersUpdate
     * @param id A unique integer value identifying this provider. (required)
     * @param provider  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsProvidersUpdateCall(Integer id, Provider provider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provider;

        // create path and map variables
        String localVarPath = "/circuits/providers/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProvidersUpdateValidateBeforeCall(Integer id, Provider provider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsProvidersUpdate(Async)");
        }

        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling circuitsProvidersUpdate(Async)");
        }

        return circuitsProvidersUpdateCall(id, provider, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this provider. (required)
     * @param provider  (required)
     * @return Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Provider circuitsProvidersUpdate(Integer id, Provider provider) throws ApiException {
        ApiResponse<Provider> localVarResp = circuitsProvidersUpdateWithHttpInfo(id, provider);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this provider. (required)
     * @param provider  (required)
     * @return ApiResponse&lt;Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Provider> circuitsProvidersUpdateWithHttpInfo(Integer id, Provider provider) throws ApiException {
        okhttp3.Call localVarCall = circuitsProvidersUpdateValidateBeforeCall(id, provider, null);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this provider. (required)
     * @param provider  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call circuitsProvidersUpdateAsync(Integer id, Provider provider, final ApiCallback<Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = circuitsProvidersUpdateValidateBeforeCall(id, provider, _callback);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
