/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConfigContext;
import org.openapitools.client.model.ExportTemplate;
import org.openapitools.client.model.ExtrasConfigContextsList200Response;
import org.openapitools.client.model.ExtrasExportTemplatesList200Response;
import org.openapitools.client.model.ExtrasGraphsList200Response;
import org.openapitools.client.model.ExtrasImageAttachmentsList200Response;
import org.openapitools.client.model.ExtrasObjectChangesList200Response;
import org.openapitools.client.model.ExtrasTagsList200Response;
import org.openapitools.client.model.Graph;
import org.openapitools.client.model.ImageAttachment;
import org.openapitools.client.model.ObjectChange;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.WritableConfigContext;
import org.openapitools.client.model.WritableExportTemplate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExtrasApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExtrasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExtrasApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for extrasConfigContextsCreate
     * @param writableConfigContext  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsCreateCall(WritableConfigContext writableConfigContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConfigContext;

        // create path and map variables
        String localVarPath = "/extras/config-contexts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasConfigContextsCreateValidateBeforeCall(WritableConfigContext writableConfigContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConfigContext' is set
        if (writableConfigContext == null) {
            throw new ApiException("Missing the required parameter 'writableConfigContext' when calling extrasConfigContextsCreate(Async)");
        }

        return extrasConfigContextsCreateCall(writableConfigContext, _callback);

    }

    /**
     * 
     * 
     * @param writableConfigContext  (required)
     * @return ConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConfigContext extrasConfigContextsCreate(WritableConfigContext writableConfigContext) throws ApiException {
        ApiResponse<ConfigContext> localVarResp = extrasConfigContextsCreateWithHttpInfo(writableConfigContext);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConfigContext  (required)
     * @return ApiResponse&lt;ConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigContext> extrasConfigContextsCreateWithHttpInfo(WritableConfigContext writableConfigContext) throws ApiException {
        okhttp3.Call localVarCall = extrasConfigContextsCreateValidateBeforeCall(writableConfigContext, null);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConfigContext  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsCreateAsync(WritableConfigContext writableConfigContext, final ApiCallback<ConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasConfigContextsCreateValidateBeforeCall(writableConfigContext, _callback);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasConfigContextsDelete
     * @param id A unique integer value identifying this config context. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/config-contexts/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasConfigContextsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasConfigContextsDelete(Async)");
        }

        return extrasConfigContextsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasConfigContextsDelete(Integer id) throws ApiException {
        extrasConfigContextsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasConfigContextsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasConfigContextsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasConfigContextsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasConfigContextsList
     * @param id  (optional)
     * @param name  (optional)
     * @param isActive  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param clusterGroupId  (optional)
     * @param clusterGroup  (optional)
     * @param clusterId  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param clusterGroupIdN  (optional)
     * @param clusterGroupN  (optional)
     * @param clusterIdN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsListCall(String id, String name, String isActive, String q, String regionId, String region, String siteId, String site, String roleId, String role, String platformId, String platform, String clusterGroupId, String clusterGroup, String clusterId, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String regionIdN, String regionN, String siteIdN, String siteN, String roleIdN, String roleN, String platformIdN, String platformN, String clusterGroupIdN, String clusterGroupN, String clusterIdN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/config-contexts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_active", isActive));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (platformId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform_id", platformId));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (clusterGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_group_id", clusterGroupId));
        }

        if (clusterGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_group", clusterGroup));
        }

        if (clusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id", clusterId));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }

        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }

        if (platformIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform_id__n", platformIdN));
        }

        if (platformN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform__n", platformN));
        }

        if (clusterGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_group_id__n", clusterGroupIdN));
        }

        if (clusterGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_group__n", clusterGroupN));
        }

        if (clusterIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id__n", clusterIdN));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasConfigContextsListValidateBeforeCall(String id, String name, String isActive, String q, String regionId, String region, String siteId, String site, String roleId, String role, String platformId, String platform, String clusterGroupId, String clusterGroup, String clusterId, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String regionIdN, String regionN, String siteIdN, String siteN, String roleIdN, String roleN, String platformIdN, String platformN, String clusterGroupIdN, String clusterGroupN, String clusterIdN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return extrasConfigContextsListCall(id, name, isActive, q, regionId, region, siteId, site, roleId, role, platformId, platform, clusterGroupId, clusterGroup, clusterId, tenantGroupId, tenantGroup, tenantId, tenant, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, regionIdN, regionN, siteIdN, siteN, roleIdN, roleN, platformIdN, platformN, clusterGroupIdN, clusterGroupN, clusterIdN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param isActive  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param clusterGroupId  (optional)
     * @param clusterGroup  (optional)
     * @param clusterId  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param clusterGroupIdN  (optional)
     * @param clusterGroupN  (optional)
     * @param clusterIdN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasConfigContextsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasConfigContextsList200Response extrasConfigContextsList(String id, String name, String isActive, String q, String regionId, String region, String siteId, String site, String roleId, String role, String platformId, String platform, String clusterGroupId, String clusterGroup, String clusterId, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String regionIdN, String regionN, String siteIdN, String siteN, String roleIdN, String roleN, String platformIdN, String platformN, String clusterGroupIdN, String clusterGroupN, String clusterIdN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasConfigContextsList200Response> localVarResp = extrasConfigContextsListWithHttpInfo(id, name, isActive, q, regionId, region, siteId, site, roleId, role, platformId, platform, clusterGroupId, clusterGroup, clusterId, tenantGroupId, tenantGroup, tenantId, tenant, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, regionIdN, regionN, siteIdN, siteN, roleIdN, roleN, platformIdN, platformN, clusterGroupIdN, clusterGroupN, clusterIdN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param isActive  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param clusterGroupId  (optional)
     * @param clusterGroup  (optional)
     * @param clusterId  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param clusterGroupIdN  (optional)
     * @param clusterGroupN  (optional)
     * @param clusterIdN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasConfigContextsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasConfigContextsList200Response> extrasConfigContextsListWithHttpInfo(String id, String name, String isActive, String q, String regionId, String region, String siteId, String site, String roleId, String role, String platformId, String platform, String clusterGroupId, String clusterGroup, String clusterId, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String regionIdN, String regionN, String siteIdN, String siteN, String roleIdN, String roleN, String platformIdN, String platformN, String clusterGroupIdN, String clusterGroupN, String clusterIdN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasConfigContextsListValidateBeforeCall(id, name, isActive, q, regionId, region, siteId, site, roleId, role, platformId, platform, clusterGroupId, clusterGroup, clusterId, tenantGroupId, tenantGroup, tenantId, tenant, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, regionIdN, regionN, siteIdN, siteN, roleIdN, roleN, platformIdN, platformN, clusterGroupIdN, clusterGroupN, clusterIdN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagN, limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasConfigContextsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param isActive  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param clusterGroupId  (optional)
     * @param clusterGroup  (optional)
     * @param clusterId  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param clusterGroupIdN  (optional)
     * @param clusterGroupN  (optional)
     * @param clusterIdN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsListAsync(String id, String name, String isActive, String q, String regionId, String region, String siteId, String site, String roleId, String role, String platformId, String platform, String clusterGroupId, String clusterGroup, String clusterId, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String regionIdN, String regionN, String siteIdN, String siteN, String roleIdN, String roleN, String platformIdN, String platformN, String clusterGroupIdN, String clusterGroupN, String clusterIdN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagN, Integer limit, Integer offset, final ApiCallback<ExtrasConfigContextsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasConfigContextsListValidateBeforeCall(id, name, isActive, q, regionId, region, siteId, site, roleId, role, platformId, platform, clusterGroupId, clusterGroup, clusterId, tenantGroupId, tenantGroup, tenantId, tenant, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, regionIdN, regionN, siteIdN, siteN, roleIdN, roleN, platformIdN, platformN, clusterGroupIdN, clusterGroupN, clusterIdN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasConfigContextsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasConfigContextsPartialUpdate
     * @param id A unique integer value identifying this config context. (required)
     * @param writableConfigContext  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsPartialUpdateCall(Integer id, WritableConfigContext writableConfigContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConfigContext;

        // create path and map variables
        String localVarPath = "/extras/config-contexts/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasConfigContextsPartialUpdateValidateBeforeCall(Integer id, WritableConfigContext writableConfigContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasConfigContextsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableConfigContext' is set
        if (writableConfigContext == null) {
            throw new ApiException("Missing the required parameter 'writableConfigContext' when calling extrasConfigContextsPartialUpdate(Async)");
        }

        return extrasConfigContextsPartialUpdateCall(id, writableConfigContext, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @param writableConfigContext  (required)
     * @return ConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConfigContext extrasConfigContextsPartialUpdate(Integer id, WritableConfigContext writableConfigContext) throws ApiException {
        ApiResponse<ConfigContext> localVarResp = extrasConfigContextsPartialUpdateWithHttpInfo(id, writableConfigContext);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @param writableConfigContext  (required)
     * @return ApiResponse&lt;ConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigContext> extrasConfigContextsPartialUpdateWithHttpInfo(Integer id, WritableConfigContext writableConfigContext) throws ApiException {
        okhttp3.Call localVarCall = extrasConfigContextsPartialUpdateValidateBeforeCall(id, writableConfigContext, null);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @param writableConfigContext  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsPartialUpdateAsync(Integer id, WritableConfigContext writableConfigContext, final ApiCallback<ConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasConfigContextsPartialUpdateValidateBeforeCall(id, writableConfigContext, _callback);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasConfigContextsRead
     * @param id A unique integer value identifying this config context. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/config-contexts/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasConfigContextsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasConfigContextsRead(Async)");
        }

        return extrasConfigContextsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this config context. (required)
     * @return ConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConfigContext extrasConfigContextsRead(Integer id) throws ApiException {
        ApiResponse<ConfigContext> localVarResp = extrasConfigContextsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this config context. (required)
     * @return ApiResponse&lt;ConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigContext> extrasConfigContextsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasConfigContextsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this config context. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsReadAsync(Integer id, final ApiCallback<ConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasConfigContextsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasConfigContextsUpdate
     * @param id A unique integer value identifying this config context. (required)
     * @param writableConfigContext  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsUpdateCall(Integer id, WritableConfigContext writableConfigContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConfigContext;

        // create path and map variables
        String localVarPath = "/extras/config-contexts/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasConfigContextsUpdateValidateBeforeCall(Integer id, WritableConfigContext writableConfigContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasConfigContextsUpdate(Async)");
        }

        // verify the required parameter 'writableConfigContext' is set
        if (writableConfigContext == null) {
            throw new ApiException("Missing the required parameter 'writableConfigContext' when calling extrasConfigContextsUpdate(Async)");
        }

        return extrasConfigContextsUpdateCall(id, writableConfigContext, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @param writableConfigContext  (required)
     * @return ConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConfigContext extrasConfigContextsUpdate(Integer id, WritableConfigContext writableConfigContext) throws ApiException {
        ApiResponse<ConfigContext> localVarResp = extrasConfigContextsUpdateWithHttpInfo(id, writableConfigContext);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @param writableConfigContext  (required)
     * @return ApiResponse&lt;ConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigContext> extrasConfigContextsUpdateWithHttpInfo(Integer id, WritableConfigContext writableConfigContext) throws ApiException {
        okhttp3.Call localVarCall = extrasConfigContextsUpdateValidateBeforeCall(id, writableConfigContext, null);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @param writableConfigContext  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsUpdateAsync(Integer id, WritableConfigContext writableConfigContext, final ApiCallback<ConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasConfigContextsUpdateValidateBeforeCall(id, writableConfigContext, _callback);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomFieldChoicesList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldChoicesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/_custom_field_choices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomFieldChoicesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return extrasCustomFieldChoicesListCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasCustomFieldChoicesList() throws ApiException {
        extrasCustomFieldChoicesListWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasCustomFieldChoicesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = extrasCustomFieldChoicesListValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldChoicesListAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomFieldChoicesListValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomFieldChoicesRead
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldChoicesReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/_custom_field_choices/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomFieldChoicesReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasCustomFieldChoicesRead(Async)");
        }

        return extrasCustomFieldChoicesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasCustomFieldChoicesRead(String id) throws ApiException {
        extrasCustomFieldChoicesReadWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasCustomFieldChoicesReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomFieldChoicesReadValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldChoicesReadAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomFieldChoicesReadValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasExportTemplatesCreate
     * @param writableExportTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesCreateCall(WritableExportTemplate writableExportTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableExportTemplate;

        // create path and map variables
        String localVarPath = "/extras/export-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasExportTemplatesCreateValidateBeforeCall(WritableExportTemplate writableExportTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableExportTemplate' is set
        if (writableExportTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableExportTemplate' when calling extrasExportTemplatesCreate(Async)");
        }

        return extrasExportTemplatesCreateCall(writableExportTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableExportTemplate  (required)
     * @return ExportTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExportTemplate extrasExportTemplatesCreate(WritableExportTemplate writableExportTemplate) throws ApiException {
        ApiResponse<ExportTemplate> localVarResp = extrasExportTemplatesCreateWithHttpInfo(writableExportTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableExportTemplate  (required)
     * @return ApiResponse&lt;ExportTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportTemplate> extrasExportTemplatesCreateWithHttpInfo(WritableExportTemplate writableExportTemplate) throws ApiException {
        okhttp3.Call localVarCall = extrasExportTemplatesCreateValidateBeforeCall(writableExportTemplate, null);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableExportTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesCreateAsync(WritableExportTemplate writableExportTemplate, final ApiCallback<ExportTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasExportTemplatesCreateValidateBeforeCall(writableExportTemplate, _callback);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasExportTemplatesDelete
     * @param id A unique integer value identifying this export template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/export-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasExportTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasExportTemplatesDelete(Async)");
        }

        return extrasExportTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasExportTemplatesDelete(Integer id) throws ApiException {
        extrasExportTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasExportTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasExportTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasExportTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasExportTemplatesList
     * @param id  (optional)
     * @param contentType  (optional)
     * @param name  (optional)
     * @param templateLanguage  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param templateLanguageN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesListCall(String id, String contentType, String name, String templateLanguage, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String templateLanguageN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/export-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type", contentType));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (templateLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template_language", templateLanguage));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (contentTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type__n", contentTypeN));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (templateLanguageN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template_language__n", templateLanguageN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasExportTemplatesListValidateBeforeCall(String id, String contentType, String name, String templateLanguage, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String templateLanguageN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return extrasExportTemplatesListCall(id, contentType, name, templateLanguage, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, templateLanguageN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param contentType  (optional)
     * @param name  (optional)
     * @param templateLanguage  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param templateLanguageN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasExportTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasExportTemplatesList200Response extrasExportTemplatesList(String id, String contentType, String name, String templateLanguage, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String templateLanguageN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasExportTemplatesList200Response> localVarResp = extrasExportTemplatesListWithHttpInfo(id, contentType, name, templateLanguage, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, templateLanguageN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param contentType  (optional)
     * @param name  (optional)
     * @param templateLanguage  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param templateLanguageN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasExportTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasExportTemplatesList200Response> extrasExportTemplatesListWithHttpInfo(String id, String contentType, String name, String templateLanguage, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String templateLanguageN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasExportTemplatesListValidateBeforeCall(id, contentType, name, templateLanguage, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, templateLanguageN, limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasExportTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param contentType  (optional)
     * @param name  (optional)
     * @param templateLanguage  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param templateLanguageN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesListAsync(String id, String contentType, String name, String templateLanguage, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String templateLanguageN, Integer limit, Integer offset, final ApiCallback<ExtrasExportTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasExportTemplatesListValidateBeforeCall(id, contentType, name, templateLanguage, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, templateLanguageN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasExportTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasExportTemplatesPartialUpdate
     * @param id A unique integer value identifying this export template. (required)
     * @param writableExportTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesPartialUpdateCall(Integer id, WritableExportTemplate writableExportTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableExportTemplate;

        // create path and map variables
        String localVarPath = "/extras/export-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasExportTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableExportTemplate writableExportTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasExportTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableExportTemplate' is set
        if (writableExportTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableExportTemplate' when calling extrasExportTemplatesPartialUpdate(Async)");
        }

        return extrasExportTemplatesPartialUpdateCall(id, writableExportTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @param writableExportTemplate  (required)
     * @return ExportTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExportTemplate extrasExportTemplatesPartialUpdate(Integer id, WritableExportTemplate writableExportTemplate) throws ApiException {
        ApiResponse<ExportTemplate> localVarResp = extrasExportTemplatesPartialUpdateWithHttpInfo(id, writableExportTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @param writableExportTemplate  (required)
     * @return ApiResponse&lt;ExportTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportTemplate> extrasExportTemplatesPartialUpdateWithHttpInfo(Integer id, WritableExportTemplate writableExportTemplate) throws ApiException {
        okhttp3.Call localVarCall = extrasExportTemplatesPartialUpdateValidateBeforeCall(id, writableExportTemplate, null);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @param writableExportTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesPartialUpdateAsync(Integer id, WritableExportTemplate writableExportTemplate, final ApiCallback<ExportTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasExportTemplatesPartialUpdateValidateBeforeCall(id, writableExportTemplate, _callback);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasExportTemplatesRead
     * @param id A unique integer value identifying this export template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/export-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasExportTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasExportTemplatesRead(Async)");
        }

        return extrasExportTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this export template. (required)
     * @return ExportTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExportTemplate extrasExportTemplatesRead(Integer id) throws ApiException {
        ApiResponse<ExportTemplate> localVarResp = extrasExportTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this export template. (required)
     * @return ApiResponse&lt;ExportTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportTemplate> extrasExportTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasExportTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this export template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesReadAsync(Integer id, final ApiCallback<ExportTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasExportTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasExportTemplatesUpdate
     * @param id A unique integer value identifying this export template. (required)
     * @param writableExportTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesUpdateCall(Integer id, WritableExportTemplate writableExportTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableExportTemplate;

        // create path and map variables
        String localVarPath = "/extras/export-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasExportTemplatesUpdateValidateBeforeCall(Integer id, WritableExportTemplate writableExportTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasExportTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableExportTemplate' is set
        if (writableExportTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableExportTemplate' when calling extrasExportTemplatesUpdate(Async)");
        }

        return extrasExportTemplatesUpdateCall(id, writableExportTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @param writableExportTemplate  (required)
     * @return ExportTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExportTemplate extrasExportTemplatesUpdate(Integer id, WritableExportTemplate writableExportTemplate) throws ApiException {
        ApiResponse<ExportTemplate> localVarResp = extrasExportTemplatesUpdateWithHttpInfo(id, writableExportTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @param writableExportTemplate  (required)
     * @return ApiResponse&lt;ExportTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportTemplate> extrasExportTemplatesUpdateWithHttpInfo(Integer id, WritableExportTemplate writableExportTemplate) throws ApiException {
        okhttp3.Call localVarCall = extrasExportTemplatesUpdateValidateBeforeCall(id, writableExportTemplate, null);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @param writableExportTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesUpdateAsync(Integer id, WritableExportTemplate writableExportTemplate, final ApiCallback<ExportTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasExportTemplatesUpdateValidateBeforeCall(id, writableExportTemplate, _callback);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasGraphsCreate
     * @param graph  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasGraphsCreateCall(Graph graph, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = graph;

        // create path and map variables
        String localVarPath = "/extras/graphs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasGraphsCreateValidateBeforeCall(Graph graph, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'graph' is set
        if (graph == null) {
            throw new ApiException("Missing the required parameter 'graph' when calling extrasGraphsCreate(Async)");
        }

        return extrasGraphsCreateCall(graph, _callback);

    }

    /**
     * 
     * 
     * @param graph  (required)
     * @return Graph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Graph extrasGraphsCreate(Graph graph) throws ApiException {
        ApiResponse<Graph> localVarResp = extrasGraphsCreateWithHttpInfo(graph);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param graph  (required)
     * @return ApiResponse&lt;Graph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Graph> extrasGraphsCreateWithHttpInfo(Graph graph) throws ApiException {
        okhttp3.Call localVarCall = extrasGraphsCreateValidateBeforeCall(graph, null);
        Type localVarReturnType = new TypeToken<Graph>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param graph  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasGraphsCreateAsync(Graph graph, final ApiCallback<Graph> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasGraphsCreateValidateBeforeCall(graph, _callback);
        Type localVarReturnType = new TypeToken<Graph>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasGraphsDelete
     * @param id A unique integer value identifying this graph. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasGraphsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/graphs/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasGraphsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasGraphsDelete(Async)");
        }

        return extrasGraphsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this graph. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasGraphsDelete(Integer id) throws ApiException {
        extrasGraphsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this graph. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasGraphsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasGraphsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this graph. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasGraphsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasGraphsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasGraphsList
     * @param id  (optional)
     * @param type  (optional)
     * @param name  (optional)
     * @param templateLanguage  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param typeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param templateLanguageN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasGraphsListCall(String id, String type, String name, String templateLanguage, String idN, String idLte, String idLt, String idGte, String idGt, String typeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String templateLanguageN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/graphs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (templateLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template_language", templateLanguage));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (templateLanguageN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template_language__n", templateLanguageN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasGraphsListValidateBeforeCall(String id, String type, String name, String templateLanguage, String idN, String idLte, String idLt, String idGte, String idGt, String typeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String templateLanguageN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return extrasGraphsListCall(id, type, name, templateLanguage, idN, idLte, idLt, idGte, idGt, typeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, templateLanguageN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param type  (optional)
     * @param name  (optional)
     * @param templateLanguage  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param typeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param templateLanguageN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasGraphsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasGraphsList200Response extrasGraphsList(String id, String type, String name, String templateLanguage, String idN, String idLte, String idLt, String idGte, String idGt, String typeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String templateLanguageN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasGraphsList200Response> localVarResp = extrasGraphsListWithHttpInfo(id, type, name, templateLanguage, idN, idLte, idLt, idGte, idGt, typeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, templateLanguageN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param type  (optional)
     * @param name  (optional)
     * @param templateLanguage  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param typeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param templateLanguageN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasGraphsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasGraphsList200Response> extrasGraphsListWithHttpInfo(String id, String type, String name, String templateLanguage, String idN, String idLte, String idLt, String idGte, String idGt, String typeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String templateLanguageN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasGraphsListValidateBeforeCall(id, type, name, templateLanguage, idN, idLte, idLt, idGte, idGt, typeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, templateLanguageN, limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasGraphsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param type  (optional)
     * @param name  (optional)
     * @param templateLanguage  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param typeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param templateLanguageN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasGraphsListAsync(String id, String type, String name, String templateLanguage, String idN, String idLte, String idLt, String idGte, String idGt, String typeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String templateLanguageN, Integer limit, Integer offset, final ApiCallback<ExtrasGraphsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasGraphsListValidateBeforeCall(id, type, name, templateLanguage, idN, idLte, idLt, idGte, idGt, typeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, templateLanguageN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasGraphsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasGraphsPartialUpdate
     * @param id A unique integer value identifying this graph. (required)
     * @param graph  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasGraphsPartialUpdateCall(Integer id, Graph graph, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = graph;

        // create path and map variables
        String localVarPath = "/extras/graphs/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasGraphsPartialUpdateValidateBeforeCall(Integer id, Graph graph, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasGraphsPartialUpdate(Async)");
        }

        // verify the required parameter 'graph' is set
        if (graph == null) {
            throw new ApiException("Missing the required parameter 'graph' when calling extrasGraphsPartialUpdate(Async)");
        }

        return extrasGraphsPartialUpdateCall(id, graph, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this graph. (required)
     * @param graph  (required)
     * @return Graph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Graph extrasGraphsPartialUpdate(Integer id, Graph graph) throws ApiException {
        ApiResponse<Graph> localVarResp = extrasGraphsPartialUpdateWithHttpInfo(id, graph);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this graph. (required)
     * @param graph  (required)
     * @return ApiResponse&lt;Graph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Graph> extrasGraphsPartialUpdateWithHttpInfo(Integer id, Graph graph) throws ApiException {
        okhttp3.Call localVarCall = extrasGraphsPartialUpdateValidateBeforeCall(id, graph, null);
        Type localVarReturnType = new TypeToken<Graph>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this graph. (required)
     * @param graph  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasGraphsPartialUpdateAsync(Integer id, Graph graph, final ApiCallback<Graph> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasGraphsPartialUpdateValidateBeforeCall(id, graph, _callback);
        Type localVarReturnType = new TypeToken<Graph>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasGraphsRead
     * @param id A unique integer value identifying this graph. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasGraphsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/graphs/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasGraphsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasGraphsRead(Async)");
        }

        return extrasGraphsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this graph. (required)
     * @return Graph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Graph extrasGraphsRead(Integer id) throws ApiException {
        ApiResponse<Graph> localVarResp = extrasGraphsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this graph. (required)
     * @return ApiResponse&lt;Graph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Graph> extrasGraphsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasGraphsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Graph>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this graph. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasGraphsReadAsync(Integer id, final ApiCallback<Graph> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasGraphsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Graph>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasGraphsUpdate
     * @param id A unique integer value identifying this graph. (required)
     * @param graph  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasGraphsUpdateCall(Integer id, Graph graph, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = graph;

        // create path and map variables
        String localVarPath = "/extras/graphs/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasGraphsUpdateValidateBeforeCall(Integer id, Graph graph, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasGraphsUpdate(Async)");
        }

        // verify the required parameter 'graph' is set
        if (graph == null) {
            throw new ApiException("Missing the required parameter 'graph' when calling extrasGraphsUpdate(Async)");
        }

        return extrasGraphsUpdateCall(id, graph, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this graph. (required)
     * @param graph  (required)
     * @return Graph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Graph extrasGraphsUpdate(Integer id, Graph graph) throws ApiException {
        ApiResponse<Graph> localVarResp = extrasGraphsUpdateWithHttpInfo(id, graph);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this graph. (required)
     * @param graph  (required)
     * @return ApiResponse&lt;Graph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Graph> extrasGraphsUpdateWithHttpInfo(Integer id, Graph graph) throws ApiException {
        okhttp3.Call localVarCall = extrasGraphsUpdateValidateBeforeCall(id, graph, null);
        Type localVarReturnType = new TypeToken<Graph>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this graph. (required)
     * @param graph  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasGraphsUpdateAsync(Integer id, Graph graph, final ApiCallback<Graph> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasGraphsUpdateValidateBeforeCall(id, graph, _callback);
        Type localVarReturnType = new TypeToken<Graph>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasImageAttachmentsCreate
     * @param imageAttachment  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsCreateCall(ImageAttachment imageAttachment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageAttachment;

        // create path and map variables
        String localVarPath = "/extras/image-attachments/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasImageAttachmentsCreateValidateBeforeCall(ImageAttachment imageAttachment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageAttachment' is set
        if (imageAttachment == null) {
            throw new ApiException("Missing the required parameter 'imageAttachment' when calling extrasImageAttachmentsCreate(Async)");
        }

        return extrasImageAttachmentsCreateCall(imageAttachment, _callback);

    }

    /**
     * 
     * 
     * @param imageAttachment  (required)
     * @return ImageAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ImageAttachment extrasImageAttachmentsCreate(ImageAttachment imageAttachment) throws ApiException {
        ApiResponse<ImageAttachment> localVarResp = extrasImageAttachmentsCreateWithHttpInfo(imageAttachment);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param imageAttachment  (required)
     * @return ApiResponse&lt;ImageAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageAttachment> extrasImageAttachmentsCreateWithHttpInfo(ImageAttachment imageAttachment) throws ApiException {
        okhttp3.Call localVarCall = extrasImageAttachmentsCreateValidateBeforeCall(imageAttachment, null);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param imageAttachment  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsCreateAsync(ImageAttachment imageAttachment, final ApiCallback<ImageAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasImageAttachmentsCreateValidateBeforeCall(imageAttachment, _callback);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasImageAttachmentsDelete
     * @param id A unique integer value identifying this image attachment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/image-attachments/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasImageAttachmentsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasImageAttachmentsDelete(Async)");
        }

        return extrasImageAttachmentsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasImageAttachmentsDelete(Integer id) throws ApiException {
        extrasImageAttachmentsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasImageAttachmentsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasImageAttachmentsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasImageAttachmentsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasImageAttachmentsList
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsListCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/image-attachments/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasImageAttachmentsListValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return extrasImageAttachmentsListCall(limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasImageAttachmentsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasImageAttachmentsList200Response extrasImageAttachmentsList(Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasImageAttachmentsList200Response> localVarResp = extrasImageAttachmentsListWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasImageAttachmentsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasImageAttachmentsList200Response> extrasImageAttachmentsListWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasImageAttachmentsListValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasImageAttachmentsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsListAsync(Integer limit, Integer offset, final ApiCallback<ExtrasImageAttachmentsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasImageAttachmentsListValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasImageAttachmentsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasImageAttachmentsPartialUpdate
     * @param id A unique integer value identifying this image attachment. (required)
     * @param imageAttachment  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsPartialUpdateCall(Integer id, ImageAttachment imageAttachment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageAttachment;

        // create path and map variables
        String localVarPath = "/extras/image-attachments/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasImageAttachmentsPartialUpdateValidateBeforeCall(Integer id, ImageAttachment imageAttachment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasImageAttachmentsPartialUpdate(Async)");
        }

        // verify the required parameter 'imageAttachment' is set
        if (imageAttachment == null) {
            throw new ApiException("Missing the required parameter 'imageAttachment' when calling extrasImageAttachmentsPartialUpdate(Async)");
        }

        return extrasImageAttachmentsPartialUpdateCall(id, imageAttachment, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @param imageAttachment  (required)
     * @return ImageAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ImageAttachment extrasImageAttachmentsPartialUpdate(Integer id, ImageAttachment imageAttachment) throws ApiException {
        ApiResponse<ImageAttachment> localVarResp = extrasImageAttachmentsPartialUpdateWithHttpInfo(id, imageAttachment);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @param imageAttachment  (required)
     * @return ApiResponse&lt;ImageAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageAttachment> extrasImageAttachmentsPartialUpdateWithHttpInfo(Integer id, ImageAttachment imageAttachment) throws ApiException {
        okhttp3.Call localVarCall = extrasImageAttachmentsPartialUpdateValidateBeforeCall(id, imageAttachment, null);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @param imageAttachment  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsPartialUpdateAsync(Integer id, ImageAttachment imageAttachment, final ApiCallback<ImageAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasImageAttachmentsPartialUpdateValidateBeforeCall(id, imageAttachment, _callback);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasImageAttachmentsRead
     * @param id A unique integer value identifying this image attachment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/image-attachments/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasImageAttachmentsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasImageAttachmentsRead(Async)");
        }

        return extrasImageAttachmentsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this image attachment. (required)
     * @return ImageAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ImageAttachment extrasImageAttachmentsRead(Integer id) throws ApiException {
        ApiResponse<ImageAttachment> localVarResp = extrasImageAttachmentsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this image attachment. (required)
     * @return ApiResponse&lt;ImageAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageAttachment> extrasImageAttachmentsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasImageAttachmentsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this image attachment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsReadAsync(Integer id, final ApiCallback<ImageAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasImageAttachmentsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasImageAttachmentsUpdate
     * @param id A unique integer value identifying this image attachment. (required)
     * @param imageAttachment  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsUpdateCall(Integer id, ImageAttachment imageAttachment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageAttachment;

        // create path and map variables
        String localVarPath = "/extras/image-attachments/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasImageAttachmentsUpdateValidateBeforeCall(Integer id, ImageAttachment imageAttachment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasImageAttachmentsUpdate(Async)");
        }

        // verify the required parameter 'imageAttachment' is set
        if (imageAttachment == null) {
            throw new ApiException("Missing the required parameter 'imageAttachment' when calling extrasImageAttachmentsUpdate(Async)");
        }

        return extrasImageAttachmentsUpdateCall(id, imageAttachment, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @param imageAttachment  (required)
     * @return ImageAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ImageAttachment extrasImageAttachmentsUpdate(Integer id, ImageAttachment imageAttachment) throws ApiException {
        ApiResponse<ImageAttachment> localVarResp = extrasImageAttachmentsUpdateWithHttpInfo(id, imageAttachment);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @param imageAttachment  (required)
     * @return ApiResponse&lt;ImageAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageAttachment> extrasImageAttachmentsUpdateWithHttpInfo(Integer id, ImageAttachment imageAttachment) throws ApiException {
        okhttp3.Call localVarCall = extrasImageAttachmentsUpdateValidateBeforeCall(id, imageAttachment, null);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @param imageAttachment  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsUpdateAsync(Integer id, ImageAttachment imageAttachment, final ApiCallback<ImageAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasImageAttachmentsUpdateValidateBeforeCall(id, imageAttachment, _callback);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasObjectChangesList
     * @param id  (optional)
     * @param user  (optional)
     * @param userName  (optional)
     * @param requestId  (optional)
     * @param action  (optional)
     * @param changedObjectType  (optional)
     * @param changedObjectId  (optional)
     * @param objectRepr  (optional)
     * @param q  (optional)
     * @param time  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param userN  (optional)
     * @param userNameN  (optional)
     * @param userNameIc  (optional)
     * @param userNameNic  (optional)
     * @param userNameIew  (optional)
     * @param userNameNiew  (optional)
     * @param userNameIsw  (optional)
     * @param userNameNisw  (optional)
     * @param userNameIe  (optional)
     * @param userNameNie  (optional)
     * @param actionN  (optional)
     * @param changedObjectTypeN  (optional)
     * @param changedObjectIdN  (optional)
     * @param changedObjectIdLte  (optional)
     * @param changedObjectIdLt  (optional)
     * @param changedObjectIdGte  (optional)
     * @param changedObjectIdGt  (optional)
     * @param objectReprN  (optional)
     * @param objectReprIc  (optional)
     * @param objectReprNic  (optional)
     * @param objectReprIew  (optional)
     * @param objectReprNiew  (optional)
     * @param objectReprIsw  (optional)
     * @param objectReprNisw  (optional)
     * @param objectReprIe  (optional)
     * @param objectReprNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasObjectChangesListCall(String id, String user, String userName, String requestId, String action, String changedObjectType, String changedObjectId, String objectRepr, String q, String time, String idN, String idLte, String idLt, String idGte, String idGt, String userN, String userNameN, String userNameIc, String userNameNic, String userNameIew, String userNameNiew, String userNameIsw, String userNameNisw, String userNameIe, String userNameNie, String actionN, String changedObjectTypeN, String changedObjectIdN, String changedObjectIdLte, String changedObjectIdLt, String changedObjectIdGte, String changedObjectIdGt, String objectReprN, String objectReprIc, String objectReprNic, String objectReprIew, String objectReprNiew, String objectReprIsw, String objectReprNisw, String objectReprIe, String objectReprNie, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/object-changes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name", userName));
        }

        if (requestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request_id", requestId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (changedObjectType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_type", changedObjectType));
        }

        if (changedObjectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_id", changedObjectId));
        }

        if (objectRepr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr", objectRepr));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (userN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user__n", userN));
        }

        if (userNameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__n", userNameN));
        }

        if (userNameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__ic", userNameIc));
        }

        if (userNameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__nic", userNameNic));
        }

        if (userNameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__iew", userNameIew));
        }

        if (userNameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__niew", userNameNiew));
        }

        if (userNameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__isw", userNameIsw));
        }

        if (userNameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__nisw", userNameNisw));
        }

        if (userNameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__ie", userNameIe));
        }

        if (userNameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__nie", userNameNie));
        }

        if (actionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action__n", actionN));
        }

        if (changedObjectTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_type__n", changedObjectTypeN));
        }

        if (changedObjectIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_id__n", changedObjectIdN));
        }

        if (changedObjectIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_id__lte", changedObjectIdLte));
        }

        if (changedObjectIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_id__lt", changedObjectIdLt));
        }

        if (changedObjectIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_id__gte", changedObjectIdGte));
        }

        if (changedObjectIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_id__gt", changedObjectIdGt));
        }

        if (objectReprN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__n", objectReprN));
        }

        if (objectReprIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__ic", objectReprIc));
        }

        if (objectReprNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__nic", objectReprNic));
        }

        if (objectReprIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__iew", objectReprIew));
        }

        if (objectReprNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__niew", objectReprNiew));
        }

        if (objectReprIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__isw", objectReprIsw));
        }

        if (objectReprNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__nisw", objectReprNisw));
        }

        if (objectReprIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__ie", objectReprIe));
        }

        if (objectReprNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__nie", objectReprNie));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasObjectChangesListValidateBeforeCall(String id, String user, String userName, String requestId, String action, String changedObjectType, String changedObjectId, String objectRepr, String q, String time, String idN, String idLte, String idLt, String idGte, String idGt, String userN, String userNameN, String userNameIc, String userNameNic, String userNameIew, String userNameNiew, String userNameIsw, String userNameNisw, String userNameIe, String userNameNie, String actionN, String changedObjectTypeN, String changedObjectIdN, String changedObjectIdLte, String changedObjectIdLt, String changedObjectIdGte, String changedObjectIdGt, String objectReprN, String objectReprIc, String objectReprNic, String objectReprIew, String objectReprNiew, String objectReprIsw, String objectReprNisw, String objectReprIe, String objectReprNie, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return extrasObjectChangesListCall(id, user, userName, requestId, action, changedObjectType, changedObjectId, objectRepr, q, time, idN, idLte, idLt, idGte, idGt, userN, userNameN, userNameIc, userNameNic, userNameIew, userNameNiew, userNameIsw, userNameNisw, userNameIe, userNameNie, actionN, changedObjectTypeN, changedObjectIdN, changedObjectIdLte, changedObjectIdLt, changedObjectIdGte, changedObjectIdGt, objectReprN, objectReprIc, objectReprNic, objectReprIew, objectReprNiew, objectReprIsw, objectReprNisw, objectReprIe, objectReprNie, limit, offset, _callback);

    }

    /**
     * 
     * Retrieve a list of recent changes.
     * @param id  (optional)
     * @param user  (optional)
     * @param userName  (optional)
     * @param requestId  (optional)
     * @param action  (optional)
     * @param changedObjectType  (optional)
     * @param changedObjectId  (optional)
     * @param objectRepr  (optional)
     * @param q  (optional)
     * @param time  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param userN  (optional)
     * @param userNameN  (optional)
     * @param userNameIc  (optional)
     * @param userNameNic  (optional)
     * @param userNameIew  (optional)
     * @param userNameNiew  (optional)
     * @param userNameIsw  (optional)
     * @param userNameNisw  (optional)
     * @param userNameIe  (optional)
     * @param userNameNie  (optional)
     * @param actionN  (optional)
     * @param changedObjectTypeN  (optional)
     * @param changedObjectIdN  (optional)
     * @param changedObjectIdLte  (optional)
     * @param changedObjectIdLt  (optional)
     * @param changedObjectIdGte  (optional)
     * @param changedObjectIdGt  (optional)
     * @param objectReprN  (optional)
     * @param objectReprIc  (optional)
     * @param objectReprNic  (optional)
     * @param objectReprIew  (optional)
     * @param objectReprNiew  (optional)
     * @param objectReprIsw  (optional)
     * @param objectReprNisw  (optional)
     * @param objectReprIe  (optional)
     * @param objectReprNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasObjectChangesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasObjectChangesList200Response extrasObjectChangesList(String id, String user, String userName, String requestId, String action, String changedObjectType, String changedObjectId, String objectRepr, String q, String time, String idN, String idLte, String idLt, String idGte, String idGt, String userN, String userNameN, String userNameIc, String userNameNic, String userNameIew, String userNameNiew, String userNameIsw, String userNameNisw, String userNameIe, String userNameNie, String actionN, String changedObjectTypeN, String changedObjectIdN, String changedObjectIdLte, String changedObjectIdLt, String changedObjectIdGte, String changedObjectIdGt, String objectReprN, String objectReprIc, String objectReprNic, String objectReprIew, String objectReprNiew, String objectReprIsw, String objectReprNisw, String objectReprIe, String objectReprNie, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasObjectChangesList200Response> localVarResp = extrasObjectChangesListWithHttpInfo(id, user, userName, requestId, action, changedObjectType, changedObjectId, objectRepr, q, time, idN, idLte, idLt, idGte, idGt, userN, userNameN, userNameIc, userNameNic, userNameIew, userNameNiew, userNameIsw, userNameNisw, userNameIe, userNameNie, actionN, changedObjectTypeN, changedObjectIdN, changedObjectIdLte, changedObjectIdLt, changedObjectIdGte, changedObjectIdGt, objectReprN, objectReprIc, objectReprNic, objectReprIew, objectReprNiew, objectReprIsw, objectReprNisw, objectReprIe, objectReprNie, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of recent changes.
     * @param id  (optional)
     * @param user  (optional)
     * @param userName  (optional)
     * @param requestId  (optional)
     * @param action  (optional)
     * @param changedObjectType  (optional)
     * @param changedObjectId  (optional)
     * @param objectRepr  (optional)
     * @param q  (optional)
     * @param time  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param userN  (optional)
     * @param userNameN  (optional)
     * @param userNameIc  (optional)
     * @param userNameNic  (optional)
     * @param userNameIew  (optional)
     * @param userNameNiew  (optional)
     * @param userNameIsw  (optional)
     * @param userNameNisw  (optional)
     * @param userNameIe  (optional)
     * @param userNameNie  (optional)
     * @param actionN  (optional)
     * @param changedObjectTypeN  (optional)
     * @param changedObjectIdN  (optional)
     * @param changedObjectIdLte  (optional)
     * @param changedObjectIdLt  (optional)
     * @param changedObjectIdGte  (optional)
     * @param changedObjectIdGt  (optional)
     * @param objectReprN  (optional)
     * @param objectReprIc  (optional)
     * @param objectReprNic  (optional)
     * @param objectReprIew  (optional)
     * @param objectReprNiew  (optional)
     * @param objectReprIsw  (optional)
     * @param objectReprNisw  (optional)
     * @param objectReprIe  (optional)
     * @param objectReprNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasObjectChangesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasObjectChangesList200Response> extrasObjectChangesListWithHttpInfo(String id, String user, String userName, String requestId, String action, String changedObjectType, String changedObjectId, String objectRepr, String q, String time, String idN, String idLte, String idLt, String idGte, String idGt, String userN, String userNameN, String userNameIc, String userNameNic, String userNameIew, String userNameNiew, String userNameIsw, String userNameNisw, String userNameIe, String userNameNie, String actionN, String changedObjectTypeN, String changedObjectIdN, String changedObjectIdLte, String changedObjectIdLt, String changedObjectIdGte, String changedObjectIdGt, String objectReprN, String objectReprIc, String objectReprNic, String objectReprIew, String objectReprNiew, String objectReprIsw, String objectReprNisw, String objectReprIe, String objectReprNie, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasObjectChangesListValidateBeforeCall(id, user, userName, requestId, action, changedObjectType, changedObjectId, objectRepr, q, time, idN, idLte, idLt, idGte, idGt, userN, userNameN, userNameIc, userNameNic, userNameIew, userNameNiew, userNameIsw, userNameNisw, userNameIe, userNameNie, actionN, changedObjectTypeN, changedObjectIdN, changedObjectIdLte, changedObjectIdLt, changedObjectIdGte, changedObjectIdGt, objectReprN, objectReprIc, objectReprNic, objectReprIew, objectReprNiew, objectReprIsw, objectReprNisw, objectReprIe, objectReprNie, limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasObjectChangesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of recent changes.
     * @param id  (optional)
     * @param user  (optional)
     * @param userName  (optional)
     * @param requestId  (optional)
     * @param action  (optional)
     * @param changedObjectType  (optional)
     * @param changedObjectId  (optional)
     * @param objectRepr  (optional)
     * @param q  (optional)
     * @param time  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param userN  (optional)
     * @param userNameN  (optional)
     * @param userNameIc  (optional)
     * @param userNameNic  (optional)
     * @param userNameIew  (optional)
     * @param userNameNiew  (optional)
     * @param userNameIsw  (optional)
     * @param userNameNisw  (optional)
     * @param userNameIe  (optional)
     * @param userNameNie  (optional)
     * @param actionN  (optional)
     * @param changedObjectTypeN  (optional)
     * @param changedObjectIdN  (optional)
     * @param changedObjectIdLte  (optional)
     * @param changedObjectIdLt  (optional)
     * @param changedObjectIdGte  (optional)
     * @param changedObjectIdGt  (optional)
     * @param objectReprN  (optional)
     * @param objectReprIc  (optional)
     * @param objectReprNic  (optional)
     * @param objectReprIew  (optional)
     * @param objectReprNiew  (optional)
     * @param objectReprIsw  (optional)
     * @param objectReprNisw  (optional)
     * @param objectReprIe  (optional)
     * @param objectReprNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasObjectChangesListAsync(String id, String user, String userName, String requestId, String action, String changedObjectType, String changedObjectId, String objectRepr, String q, String time, String idN, String idLte, String idLt, String idGte, String idGt, String userN, String userNameN, String userNameIc, String userNameNic, String userNameIew, String userNameNiew, String userNameIsw, String userNameNisw, String userNameIe, String userNameNie, String actionN, String changedObjectTypeN, String changedObjectIdN, String changedObjectIdLte, String changedObjectIdLt, String changedObjectIdGte, String changedObjectIdGt, String objectReprN, String objectReprIc, String objectReprNic, String objectReprIew, String objectReprNiew, String objectReprIsw, String objectReprNisw, String objectReprIe, String objectReprNie, Integer limit, Integer offset, final ApiCallback<ExtrasObjectChangesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasObjectChangesListValidateBeforeCall(id, user, userName, requestId, action, changedObjectType, changedObjectId, objectRepr, q, time, idN, idLte, idLt, idGte, idGt, userN, userNameN, userNameIc, userNameNic, userNameIew, userNameNiew, userNameIsw, userNameNisw, userNameIe, userNameNie, actionN, changedObjectTypeN, changedObjectIdN, changedObjectIdLte, changedObjectIdLt, changedObjectIdGte, changedObjectIdGt, objectReprN, objectReprIc, objectReprNic, objectReprIew, objectReprNiew, objectReprIsw, objectReprNisw, objectReprIe, objectReprNie, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasObjectChangesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasObjectChangesRead
     * @param id A unique integer value identifying this object change. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasObjectChangesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/object-changes/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasObjectChangesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasObjectChangesRead(Async)");
        }

        return extrasObjectChangesReadCall(id, _callback);

    }

    /**
     * 
     * Retrieve a list of recent changes.
     * @param id A unique integer value identifying this object change. (required)
     * @return ObjectChange
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ObjectChange extrasObjectChangesRead(Integer id) throws ApiException {
        ApiResponse<ObjectChange> localVarResp = extrasObjectChangesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of recent changes.
     * @param id A unique integer value identifying this object change. (required)
     * @return ApiResponse&lt;ObjectChange&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObjectChange> extrasObjectChangesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasObjectChangesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ObjectChange>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of recent changes.
     * @param id A unique integer value identifying this object change. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasObjectChangesReadAsync(Integer id, final ApiCallback<ObjectChange> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasObjectChangesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ObjectChange>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasReportsList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasReportsListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/reports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasReportsListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return extrasReportsListCall(_callback);

    }

    /**
     * 
     * Compile all reports and their related results (if any). Result data is deferred in the list view.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasReportsList() throws ApiException {
        extrasReportsListWithHttpInfo();
    }

    /**
     * 
     * Compile all reports and their related results (if any). Result data is deferred in the list view.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasReportsListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = extrasReportsListValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Compile all reports and their related results (if any). Result data is deferred in the list view.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasReportsListAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasReportsListValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasReportsRead
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasReportsReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/reports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasReportsReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasReportsRead(Async)");
        }

        return extrasReportsReadCall(id, _callback);

    }

    /**
     * 
     * Retrieve a single Report identified as \&quot;&lt;module&gt;.&lt;report&gt;\&quot;.
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasReportsRead(String id) throws ApiException {
        extrasReportsReadWithHttpInfo(id);
    }

    /**
     * 
     * Retrieve a single Report identified as \&quot;&lt;module&gt;.&lt;report&gt;\&quot;.
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasReportsReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = extrasReportsReadValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve a single Report identified as \&quot;&lt;module&gt;.&lt;report&gt;\&quot;.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasReportsReadAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasReportsReadValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasReportsRun
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasReportsRunCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/reports/{id}/run/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasReportsRunValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasReportsRun(Async)");
        }

        return extrasReportsRunCall(id, _callback);

    }

    /**
     * 
     * Run a Report and create a new ReportResult, overwriting any previous result for the Report.
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasReportsRun(String id) throws ApiException {
        extrasReportsRunWithHttpInfo(id);
    }

    /**
     * 
     * Run a Report and create a new ReportResult, overwriting any previous result for the Report.
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasReportsRunWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = extrasReportsRunValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Run a Report and create a new ReportResult, overwriting any previous result for the Report.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasReportsRunAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasReportsRunValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasScriptsList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasScriptsListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/scripts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasScriptsListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return extrasScriptsListCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasScriptsList() throws ApiException {
        extrasScriptsListWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasScriptsListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = extrasScriptsListValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasScriptsListAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasScriptsListValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasScriptsRead
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasScriptsReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/scripts/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasScriptsReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasScriptsRead(Async)");
        }

        return extrasScriptsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasScriptsRead(String id) throws ApiException {
        extrasScriptsReadWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasScriptsReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = extrasScriptsReadValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasScriptsReadAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasScriptsReadValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasTagsCreate
     * @param tag  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsCreateCall(Tag tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tag;

        // create path and map variables
        String localVarPath = "/extras/tags/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasTagsCreateValidateBeforeCall(Tag tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling extrasTagsCreate(Async)");
        }

        return extrasTagsCreateCall(tag, _callback);

    }

    /**
     * 
     * 
     * @param tag  (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Tag extrasTagsCreate(Tag tag) throws ApiException {
        ApiResponse<Tag> localVarResp = extrasTagsCreateWithHttpInfo(tag);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tag  (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> extrasTagsCreateWithHttpInfo(Tag tag) throws ApiException {
        okhttp3.Call localVarCall = extrasTagsCreateValidateBeforeCall(tag, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tag  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsCreateAsync(Tag tag, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasTagsCreateValidateBeforeCall(tag, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasTagsDelete
     * @param id A unique integer value identifying this tag. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/tags/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasTagsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasTagsDelete(Async)");
        }

        return extrasTagsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasTagsDelete(Integer id) throws ApiException {
        extrasTagsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasTagsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasTagsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasTagsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasTagsList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsListCall(String id, String name, String slug, String color, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/tags/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasTagsListValidateBeforeCall(String id, String name, String slug, String color, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return extrasTagsListCall(id, name, slug, color, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasTagsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasTagsList200Response extrasTagsList(String id, String name, String slug, String color, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasTagsList200Response> localVarResp = extrasTagsListWithHttpInfo(id, name, slug, color, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasTagsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasTagsList200Response> extrasTagsListWithHttpInfo(String id, String name, String slug, String color, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasTagsListValidateBeforeCall(id, name, slug, color, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasTagsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsListAsync(String id, String name, String slug, String color, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, Integer limit, Integer offset, final ApiCallback<ExtrasTagsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasTagsListValidateBeforeCall(id, name, slug, color, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasTagsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasTagsPartialUpdate
     * @param id A unique integer value identifying this tag. (required)
     * @param tag  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsPartialUpdateCall(Integer id, Tag tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tag;

        // create path and map variables
        String localVarPath = "/extras/tags/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasTagsPartialUpdateValidateBeforeCall(Integer id, Tag tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasTagsPartialUpdate(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling extrasTagsPartialUpdate(Async)");
        }

        return extrasTagsPartialUpdateCall(id, tag, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @param tag  (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Tag extrasTagsPartialUpdate(Integer id, Tag tag) throws ApiException {
        ApiResponse<Tag> localVarResp = extrasTagsPartialUpdateWithHttpInfo(id, tag);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @param tag  (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> extrasTagsPartialUpdateWithHttpInfo(Integer id, Tag tag) throws ApiException {
        okhttp3.Call localVarCall = extrasTagsPartialUpdateValidateBeforeCall(id, tag, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @param tag  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsPartialUpdateAsync(Integer id, Tag tag, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasTagsPartialUpdateValidateBeforeCall(id, tag, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasTagsRead
     * @param id A unique integer value identifying this tag. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/tags/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasTagsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasTagsRead(Async)");
        }

        return extrasTagsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this tag. (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Tag extrasTagsRead(Integer id) throws ApiException {
        ApiResponse<Tag> localVarResp = extrasTagsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this tag. (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> extrasTagsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasTagsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this tag. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsReadAsync(Integer id, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasTagsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasTagsUpdate
     * @param id A unique integer value identifying this tag. (required)
     * @param tag  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsUpdateCall(Integer id, Tag tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tag;

        // create path and map variables
        String localVarPath = "/extras/tags/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasTagsUpdateValidateBeforeCall(Integer id, Tag tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasTagsUpdate(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling extrasTagsUpdate(Async)");
        }

        return extrasTagsUpdateCall(id, tag, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @param tag  (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Tag extrasTagsUpdate(Integer id, Tag tag) throws ApiException {
        ApiResponse<Tag> localVarResp = extrasTagsUpdateWithHttpInfo(id, tag);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @param tag  (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> extrasTagsUpdateWithHttpInfo(Integer id, Tag tag) throws ApiException {
        okhttp3.Call localVarCall = extrasTagsUpdateValidateBeforeCall(id, tag, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @param tag  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsUpdateAsync(Integer id, Tag tag, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasTagsUpdateValidateBeforeCall(id, tag, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
