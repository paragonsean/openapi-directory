/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Family;
import org.openapitools.client.model.IPAddressInterface;
import org.openapitools.client.model.NestedIPAddress;
import org.openapitools.client.model.NestedTenant;
import org.openapitools.client.model.NestedVRF;
import org.openapitools.client.model.Role1;
import org.openapitools.client.model.Status3;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IPAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:50.058495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IPAddress {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private LocalDate created;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields = {};

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DNS_NAME = "dns_name";
  @SerializedName(SERIALIZED_NAME_DNS_NAME)
  private String dnsName;

  public static final String SERIALIZED_NAME_FAMILY = "family";
  @SerializedName(SERIALIZED_NAME_FAMILY)
  private Family family;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INTERFACE = "interface";
  @SerializedName(SERIALIZED_NAME_INTERFACE)
  private IPAddressInterface _interface;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_NAT_INSIDE = "nat_inside";
  @SerializedName(SERIALIZED_NAME_NAT_INSIDE)
  private NestedIPAddress natInside;

  public static final String SERIALIZED_NAME_NAT_OUTSIDE = "nat_outside";
  @SerializedName(SERIALIZED_NAME_NAT_OUTSIDE)
  private NestedIPAddress natOutside;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private Role1 role;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status3 status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TENANT = "tenant";
  @SerializedName(SERIALIZED_NAME_TENANT)
  private NestedTenant tenant;

  public static final String SERIALIZED_NAME_VRF = "vrf";
  @SerializedName(SERIALIZED_NAME_VRF)
  private NestedVRF vrf;

  public IPAddress() {
  }

  public IPAddress(
     LocalDate created, 
     Integer id, 
     OffsetDateTime lastUpdated
  ) {
    this();
    this.created = created;
    this.id = id;
    this.lastUpdated = lastUpdated;
  }

  public IPAddress address(String address) {
    this.address = address;
    return this;
  }

  /**
   * IPv4 or IPv6 address (with mask)
   * @return address
   */
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public LocalDate getCreated() {
    return created;
  }



  public IPAddress customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public IPAddress description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public IPAddress dnsName(String dnsName) {
    this.dnsName = dnsName;
    return this;
  }

  /**
   * Hostname or FQDN (not case-sensitive)
   * @return dnsName
   */
  @javax.annotation.Nullable
  public String getDnsName() {
    return dnsName;
  }

  public void setDnsName(String dnsName) {
    this.dnsName = dnsName;
  }


  public IPAddress family(Family family) {
    this.family = family;
    return this;
  }

  /**
   * Get family
   * @return family
   */
  @javax.annotation.Nullable
  public Family getFamily() {
    return family;
  }

  public void setFamily(Family family) {
    this.family = family;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public IPAddress _interface(IPAddressInterface _interface) {
    this._interface = _interface;
    return this;
  }

  /**
   * Get _interface
   * @return _interface
   */
  @javax.annotation.Nullable
  public IPAddressInterface getInterface() {
    return _interface;
  }

  public void setInterface(IPAddressInterface _interface) {
    this._interface = _interface;
  }


  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }



  public IPAddress natInside(NestedIPAddress natInside) {
    this.natInside = natInside;
    return this;
  }

  /**
   * Get natInside
   * @return natInside
   */
  @javax.annotation.Nullable
  public NestedIPAddress getNatInside() {
    return natInside;
  }

  public void setNatInside(NestedIPAddress natInside) {
    this.natInside = natInside;
  }


  public IPAddress natOutside(NestedIPAddress natOutside) {
    this.natOutside = natOutside;
    return this;
  }

  /**
   * Get natOutside
   * @return natOutside
   */
  @javax.annotation.Nullable
  public NestedIPAddress getNatOutside() {
    return natOutside;
  }

  public void setNatOutside(NestedIPAddress natOutside) {
    this.natOutside = natOutside;
  }


  public IPAddress role(Role1 role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public Role1 getRole() {
    return role;
  }

  public void setRole(Role1 role) {
    this.role = role;
  }


  public IPAddress status(Status3 status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status3 getStatus() {
    return status;
  }

  public void setStatus(Status3 status) {
    this.status = status;
  }


  public IPAddress tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public IPAddress addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public IPAddress tenant(NestedTenant tenant) {
    this.tenant = tenant;
    return this;
  }

  /**
   * Get tenant
   * @return tenant
   */
  @javax.annotation.Nullable
  public NestedTenant getTenant() {
    return tenant;
  }

  public void setTenant(NestedTenant tenant) {
    this.tenant = tenant;
  }


  public IPAddress vrf(NestedVRF vrf) {
    this.vrf = vrf;
    return this;
  }

  /**
   * Get vrf
   * @return vrf
   */
  @javax.annotation.Nullable
  public NestedVRF getVrf() {
    return vrf;
  }

  public void setVrf(NestedVRF vrf) {
    this.vrf = vrf;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPAddress ipAddress = (IPAddress) o;
    return Objects.equals(this.address, ipAddress.address) &&
        Objects.equals(this.created, ipAddress.created) &&
        Objects.equals(this.customFields, ipAddress.customFields) &&
        Objects.equals(this.description, ipAddress.description) &&
        Objects.equals(this.dnsName, ipAddress.dnsName) &&
        Objects.equals(this.family, ipAddress.family) &&
        Objects.equals(this.id, ipAddress.id) &&
        Objects.equals(this._interface, ipAddress._interface) &&
        Objects.equals(this.lastUpdated, ipAddress.lastUpdated) &&
        Objects.equals(this.natInside, ipAddress.natInside) &&
        Objects.equals(this.natOutside, ipAddress.natOutside) &&
        Objects.equals(this.role, ipAddress.role) &&
        Objects.equals(this.status, ipAddress.status) &&
        Objects.equals(this.tags, ipAddress.tags) &&
        Objects.equals(this.tenant, ipAddress.tenant) &&
        Objects.equals(this.vrf, ipAddress.vrf);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, created, customFields, description, dnsName, family, id, _interface, lastUpdated, natInside, natOutside, role, status, tags, tenant, vrf);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPAddress {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dnsName: ").append(toIndentedString(dnsName)).append("\n");
    sb.append("    family: ").append(toIndentedString(family)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    _interface: ").append(toIndentedString(_interface)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    natInside: ").append(toIndentedString(natInside)).append("\n");
    sb.append("    natOutside: ").append(toIndentedString(natOutside)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tenant: ").append(toIndentedString(tenant)).append("\n");
    sb.append("    vrf: ").append(toIndentedString(vrf)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("created");
    openapiFields.add("custom_fields");
    openapiFields.add("description");
    openapiFields.add("dns_name");
    openapiFields.add("family");
    openapiFields.add("id");
    openapiFields.add("interface");
    openapiFields.add("last_updated");
    openapiFields.add("nat_inside");
    openapiFields.add("nat_outside");
    openapiFields.add("role");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("tenant");
    openapiFields.add("vrf");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IPAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IPAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IPAddress is not found in the empty JSON string", IPAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IPAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IPAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IPAddress.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("dns_name") != null && !jsonObj.get("dns_name").isJsonNull()) && !jsonObj.get("dns_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dns_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dns_name").toString()));
      }
      // validate the optional field `family`
      if (jsonObj.get("family") != null && !jsonObj.get("family").isJsonNull()) {
        Family.validateJsonElement(jsonObj.get("family"));
      }
      // validate the optional field `interface`
      if (jsonObj.get("interface") != null && !jsonObj.get("interface").isJsonNull()) {
        IPAddressInterface.validateJsonElement(jsonObj.get("interface"));
      }
      // validate the optional field `nat_inside`
      if (jsonObj.get("nat_inside") != null && !jsonObj.get("nat_inside").isJsonNull()) {
        NestedIPAddress.validateJsonElement(jsonObj.get("nat_inside"));
      }
      // validate the optional field `nat_outside`
      if (jsonObj.get("nat_outside") != null && !jsonObj.get("nat_outside").isJsonNull()) {
        NestedIPAddress.validateJsonElement(jsonObj.get("nat_outside"));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        Role1.validateJsonElement(jsonObj.get("role"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Status3.validateJsonElement(jsonObj.get("status"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // validate the optional field `tenant`
      if (jsonObj.get("tenant") != null && !jsonObj.get("tenant").isJsonNull()) {
        NestedTenant.validateJsonElement(jsonObj.get("tenant"));
      }
      // validate the optional field `vrf`
      if (jsonObj.get("vrf") != null && !jsonObj.get("vrf").isJsonNull()) {
        NestedVRF.validateJsonElement(jsonObj.get("vrf"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IPAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IPAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IPAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IPAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<IPAddress>() {
           @Override
           public void write(JsonWriter out, IPAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IPAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IPAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IPAddress
   * @throws IOException if the JSON string is invalid with respect to IPAddress
   */
  public static IPAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IPAddress.class);
  }

  /**
   * Convert an instance of IPAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

