/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.NestedCable;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WritablePowerOutlet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:50.058495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WritablePowerOutlet {
  public static final String SERIALIZED_NAME_CABLE = "cable";
  @SerializedName(SERIALIZED_NAME_CABLE)
  private NestedCable cable;

  public static final String SERIALIZED_NAME_CONNECTED_ENDPOINT = "connected_endpoint";
  @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINT)
  private Map<String, String> connectedEndpoint = new HashMap<>();

  public static final String SERIALIZED_NAME_CONNECTED_ENDPOINT_TYPE = "connected_endpoint_type";
  @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINT_TYPE)
  private String connectedEndpointType;

  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "connection_status";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private Boolean connectionStatus;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private Integer device;

  /**
   * Phase (for three-phase feeds)
   */
  @JsonAdapter(FeedLegEnum.Adapter.class)
  public enum FeedLegEnum {
    A("A"),
    
    B("B"),
    
    C("C");

    private String value;

    FeedLegEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeedLegEnum fromValue(String value) {
      for (FeedLegEnum b : FeedLegEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeedLegEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeedLegEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeedLegEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeedLegEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeedLegEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEED_LEG = "feed_leg";
  @SerializedName(SERIALIZED_NAME_FEED_LEG)
  private FeedLegEnum feedLeg;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POWER_PORT = "power_port";
  @SerializedName(SERIALIZED_NAME_POWER_PORT)
  private Integer powerPort;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  /**
   * Physical port type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    IEC_60320_C5("iec-60320-c5"),
    
    IEC_60320_C7("iec-60320-c7"),
    
    IEC_60320_C13("iec-60320-c13"),
    
    IEC_60320_C15("iec-60320-c15"),
    
    IEC_60320_C19("iec-60320-c19"),
    
    IEC_60309_P_N_E_4H("iec-60309-p-n-e-4h"),
    
    IEC_60309_P_N_E_6H("iec-60309-p-n-e-6h"),
    
    IEC_60309_P_N_E_9H("iec-60309-p-n-e-9h"),
    
    IEC_60309_2P_E_4H("iec-60309-2p-e-4h"),
    
    IEC_60309_2P_E_6H("iec-60309-2p-e-6h"),
    
    IEC_60309_2P_E_9H("iec-60309-2p-e-9h"),
    
    IEC_60309_3P_E_4H("iec-60309-3p-e-4h"),
    
    IEC_60309_3P_E_6H("iec-60309-3p-e-6h"),
    
    IEC_60309_3P_E_9H("iec-60309-3p-e-9h"),
    
    IEC_60309_3P_N_E_4H("iec-60309-3p-n-e-4h"),
    
    IEC_60309_3P_N_E_6H("iec-60309-3p-n-e-6h"),
    
    IEC_60309_3P_N_E_9H("iec-60309-3p-n-e-9h"),
    
    NEMA_1_15R("nema-1-15r"),
    
    NEMA_5_15R("nema-5-15r"),
    
    NEMA_5_20R("nema-5-20r"),
    
    NEMA_5_30R("nema-5-30r"),
    
    NEMA_5_50R("nema-5-50r"),
    
    NEMA_6_15R("nema-6-15r"),
    
    NEMA_6_20R("nema-6-20r"),
    
    NEMA_6_30R("nema-6-30r"),
    
    NEMA_6_50R("nema-6-50r"),
    
    NEMA_10_30R("nema-10-30r"),
    
    NEMA_10_50R("nema-10-50r"),
    
    NEMA_14_20R("nema-14-20r"),
    
    NEMA_14_30R("nema-14-30r"),
    
    NEMA_14_50R("nema-14-50r"),
    
    NEMA_14_60R("nema-14-60r"),
    
    NEMA_L1_15R("nema-l1-15r"),
    
    NEMA_L5_15R("nema-l5-15r"),
    
    NEMA_L5_20R("nema-l5-20r"),
    
    NEMA_L5_30R("nema-l5-30r"),
    
    NEMA_L5_50R("nema-l5-50r"),
    
    NEMA_L6_15R("nema-l6-15r"),
    
    NEMA_L6_20R("nema-l6-20r"),
    
    NEMA_L6_30R("nema-l6-30r"),
    
    NEMA_L6_50R("nema-l6-50r"),
    
    NEMA_L10_30R("nema-l10-30r"),
    
    NEMA_L14_20R("nema-l14-20r"),
    
    NEMA_L14_30R("nema-l14-30r"),
    
    NEMA_L14_50R("nema-l14-50r"),
    
    NEMA_L14_60R("nema-l14-60r"),
    
    NEMA_L21_20R("nema-l21-20r"),
    
    NEMA_L21_30R("nema-l21-30r"),
    
    CS6360_C("CS6360C"),
    
    CS6364_C("CS6364C"),
    
    CS8164_C("CS8164C"),
    
    CS8264_C("CS8264C"),
    
    CS8364_C("CS8364C"),
    
    CS8464_C("CS8464C"),
    
    ITA_E("ita-e"),
    
    ITA_F("ita-f"),
    
    ITA_G("ita-g"),
    
    ITA_H("ita-h"),
    
    ITA_I("ita-i"),
    
    ITA_J("ita-j"),
    
    ITA_K("ita-k"),
    
    ITA_L("ita-l"),
    
    ITA_M("ita-m"),
    
    ITA_N("ita-n"),
    
    ITA_O("ita-o"),
    
    HDOT_CX("hdot-cx");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public WritablePowerOutlet() {
  }

  public WritablePowerOutlet(
     Map<String, String> connectedEndpoint, 
     String connectedEndpointType, 
     Integer id
  ) {
    this();
    this.connectedEndpoint = connectedEndpoint;
    this.connectedEndpointType = connectedEndpointType;
    this.id = id;
  }

  public WritablePowerOutlet cable(NestedCable cable) {
    this.cable = cable;
    return this;
  }

  /**
   * Get cable
   * @return cable
   */
  @javax.annotation.Nullable
  public NestedCable getCable() {
    return cable;
  }

  public void setCable(NestedCable cable) {
    this.cable = cable;
  }


  /**
   *  Return the appropriate serializer for the type of connected object. 
   * @return connectedEndpoint
   */
  @javax.annotation.Nullable
  public Map<String, String> getConnectedEndpoint() {
    return connectedEndpoint;
  }



  /**
   * Get connectedEndpointType
   * @return connectedEndpointType
   */
  @javax.annotation.Nullable
  public String getConnectedEndpointType() {
    return connectedEndpointType;
  }



  public WritablePowerOutlet connectionStatus(Boolean connectionStatus) {
    this.connectionStatus = connectionStatus;
    return this;
  }

  /**
   * Get connectionStatus
   * @return connectionStatus
   */
  @javax.annotation.Nullable
  public Boolean getConnectionStatus() {
    return connectionStatus;
  }

  public void setConnectionStatus(Boolean connectionStatus) {
    this.connectionStatus = connectionStatus;
  }


  public WritablePowerOutlet description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public WritablePowerOutlet device(Integer device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device
   */
  @javax.annotation.Nonnull
  public Integer getDevice() {
    return device;
  }

  public void setDevice(Integer device) {
    this.device = device;
  }


  public WritablePowerOutlet feedLeg(FeedLegEnum feedLeg) {
    this.feedLeg = feedLeg;
    return this;
  }

  /**
   * Phase (for three-phase feeds)
   * @return feedLeg
   */
  @javax.annotation.Nullable
  public FeedLegEnum getFeedLeg() {
    return feedLeg;
  }

  public void setFeedLeg(FeedLegEnum feedLeg) {
    this.feedLeg = feedLeg;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public WritablePowerOutlet name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WritablePowerOutlet powerPort(Integer powerPort) {
    this.powerPort = powerPort;
    return this;
  }

  /**
   * Get powerPort
   * @return powerPort
   */
  @javax.annotation.Nullable
  public Integer getPowerPort() {
    return powerPort;
  }

  public void setPowerPort(Integer powerPort) {
    this.powerPort = powerPort;
  }


  public WritablePowerOutlet tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public WritablePowerOutlet addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public WritablePowerOutlet type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Physical port type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritablePowerOutlet writablePowerOutlet = (WritablePowerOutlet) o;
    return Objects.equals(this.cable, writablePowerOutlet.cable) &&
        Objects.equals(this.connectedEndpoint, writablePowerOutlet.connectedEndpoint) &&
        Objects.equals(this.connectedEndpointType, writablePowerOutlet.connectedEndpointType) &&
        Objects.equals(this.connectionStatus, writablePowerOutlet.connectionStatus) &&
        Objects.equals(this.description, writablePowerOutlet.description) &&
        Objects.equals(this.device, writablePowerOutlet.device) &&
        Objects.equals(this.feedLeg, writablePowerOutlet.feedLeg) &&
        Objects.equals(this.id, writablePowerOutlet.id) &&
        Objects.equals(this.name, writablePowerOutlet.name) &&
        Objects.equals(this.powerPort, writablePowerOutlet.powerPort) &&
        Objects.equals(this.tags, writablePowerOutlet.tags) &&
        Objects.equals(this.type, writablePowerOutlet.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cable, connectedEndpoint, connectedEndpointType, connectionStatus, description, device, feedLeg, id, name, powerPort, tags, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritablePowerOutlet {\n");
    sb.append("    cable: ").append(toIndentedString(cable)).append("\n");
    sb.append("    connectedEndpoint: ").append(toIndentedString(connectedEndpoint)).append("\n");
    sb.append("    connectedEndpointType: ").append(toIndentedString(connectedEndpointType)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    feedLeg: ").append(toIndentedString(feedLeg)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    powerPort: ").append(toIndentedString(powerPort)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cable");
    openapiFields.add("connected_endpoint");
    openapiFields.add("connected_endpoint_type");
    openapiFields.add("connection_status");
    openapiFields.add("description");
    openapiFields.add("device");
    openapiFields.add("feed_leg");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("power_port");
    openapiFields.add("tags");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("device");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WritablePowerOutlet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WritablePowerOutlet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WritablePowerOutlet is not found in the empty JSON string", WritablePowerOutlet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WritablePowerOutlet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WritablePowerOutlet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WritablePowerOutlet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cable`
      if (jsonObj.get("cable") != null && !jsonObj.get("cable").isJsonNull()) {
        NestedCable.validateJsonElement(jsonObj.get("cable"));
      }
      if ((jsonObj.get("connected_endpoint_type") != null && !jsonObj.get("connected_endpoint_type").isJsonNull()) && !jsonObj.get("connected_endpoint_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connected_endpoint_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connected_endpoint_type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("feed_leg") != null && !jsonObj.get("feed_leg").isJsonNull()) && !jsonObj.get("feed_leg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feed_leg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feed_leg").toString()));
      }
      // validate the optional field `feed_leg`
      if (jsonObj.get("feed_leg") != null && !jsonObj.get("feed_leg").isJsonNull()) {
        FeedLegEnum.validateJsonElement(jsonObj.get("feed_leg"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WritablePowerOutlet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WritablePowerOutlet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WritablePowerOutlet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WritablePowerOutlet.class));

       return (TypeAdapter<T>) new TypeAdapter<WritablePowerOutlet>() {
           @Override
           public void write(JsonWriter out, WritablePowerOutlet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WritablePowerOutlet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WritablePowerOutlet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WritablePowerOutlet
   * @throws IOException if the JSON string is invalid with respect to WritablePowerOutlet
   */
  public static WritablePowerOutlet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WritablePowerOutlet.class);
  }

  /**
   * Convert an instance of WritablePowerOutlet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

